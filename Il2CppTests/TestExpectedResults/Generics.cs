// Image 0: mscorlib.dll - 0
// Image 1: Generics.dll - 1810

// Namespace: System
[Serializable]
public class Object // TypeDefIndex: 1
{
	// Constructors
	public Object(); // 0x001AF63C

	// Methods
	public virtual bool Equals(object obj); // 0x001B0CC0
	public static bool Equals(object objA, object objB); // 0x001B0CD4
	protected override void Finalize(); // 0x001B0D08
	public virtual int GetHashCode(); // 0x001B0D0C
	public Type GetType(); // 0x001B0D14
	protected object MemberwiseClone(); // 0x001B0D18
	public virtual string ToString(); // 0x001B0D1C
	public static bool ReferenceEquals(object objA, object objB); // 0x001B0D54
	internal static int InternalGetHashCode(object o); // 0x001B0D10
	internal IntPtr obj_address(); // 0x001B0D68
	private void FieldGetter(string typeName, string fieldName, object val); // 0x001B0D6C
	private void FieldSetter(string typeName, string fieldName, object val); // 0x001B0D70
}

// Namespace: System
[Serializable]
public abstract class ValueType // TypeDefIndex: 2
{
	// Constructors
	protected ValueType(); // 0x0055BA78

	// Methods
	private static bool InternalEquals(object o1, object o2, out object[] fields); // 0x0055BA80
	internal static bool DefaultEquals(object o1, object o2); // 0x0055BA84
	public override bool Equals(object obj); // 0x0055BBA0
	internal static int InternalGetHashCode(object o, out object[] fields); // 0x0055BBA4
	public override int GetHashCode(); // 0x0055BBA8
	public override string ToString(); // 0x0055BCA8
}

// Namespace: System
[Serializable]
public abstract class Attribute : _Attribute // TypeDefIndex: 3
{
	// Properties
	public virtual object TypeId { get; } // 0x004F47E0 

	// Constructors
	protected Attribute(); // 0x004F45B8

	// Methods
	private void System.Runtime.InteropServices._Attribute.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x004F45C0
	private void System.Runtime.InteropServices._Attribute.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x004F4648
	private void System.Runtime.InteropServices._Attribute.GetTypeInfoCount(out uint pcTInfo); // 0x004F46D0
	private void System.Runtime.InteropServices._Attribute.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x004F4758
	private static void CheckParameters(object element, Type attributeType); // 0x004F47E8
	private static Attribute FindAttribute(object[] attributes); // 0x004F49C8
	public static Attribute GetCustomAttribute(ParameterInfo element, Type attributeType); // 0x004F4AF8
	public static Attribute GetCustomAttribute(MemberInfo element, Type attributeType); // 0x004F4B4C
	public static Attribute GetCustomAttribute(Assembly element, Type attributeType); // 0x004F4BF4
	public static Attribute GetCustomAttribute(Module element, Type attributeType); // 0x004F4C48
	public static Attribute GetCustomAttribute(Module element, Type attributeType, bool inherit); // 0x004F4C50
	public static Attribute GetCustomAttribute(Assembly element, Type attributeType, bool inherit); // 0x004F4BFC
	public static Attribute GetCustomAttribute(ParameterInfo element, Type attributeType, bool inherit); // 0x004F4B00
	public static Attribute GetCustomAttribute(MemberInfo element, Type attributeType, bool inherit); // 0x004F4B54
	public static Attribute[] GetCustomAttributes(Assembly element); // 0x004F4C9C
	public static Attribute[] GetCustomAttributes(ParameterInfo element); // 0x004F4DBC
	public static Attribute[] GetCustomAttributes(MemberInfo element); // 0x004F4EDC
	public static Attribute[] GetCustomAttributes(Module element); // 0x004F509C
	public static Attribute[] GetCustomAttributes(Assembly element, Type attributeType); // 0x004F51BC
	public static Attribute[] GetCustomAttributes(Module element, Type attributeType); // 0x004F5294
	public static Attribute[] GetCustomAttributes(ParameterInfo element, Type attributeType); // 0x004F536C
	public static Attribute[] GetCustomAttributes(MemberInfo element, Type type); // 0x004F5444
	public static Attribute[] GetCustomAttributes(Assembly element, Type attributeType, bool inherit); // 0x004F51C4
	public static Attribute[] GetCustomAttributes(ParameterInfo element, Type attributeType, bool inherit); // 0x004F5374
	public static Attribute[] GetCustomAttributes(Module element, Type attributeType, bool inherit); // 0x004F529C
	public static Attribute[] GetCustomAttributes(MemberInfo element, Type type, bool inherit); // 0x004F544C
	public static Attribute[] GetCustomAttributes(Module element, bool inherit); // 0x004F50A4
	public static Attribute[] GetCustomAttributes(Assembly element, bool inherit); // 0x004F4CA4
	public static Attribute[] GetCustomAttributes(MemberInfo element, bool inherit); // 0x004F4EE4
	public static Attribute[] GetCustomAttributes(ParameterInfo element, bool inherit); // 0x004F4DC4
	public override int GetHashCode(); // 0x004F557C
	public virtual bool IsDefaultAttribute(); // 0x004F5584
	public static bool IsDefined(Module element, Type attributeType); // 0x004F558C
	public static bool IsDefined(ParameterInfo element, Type attributeType); // 0x004F55DC
	public static bool IsDefined(MemberInfo element, Type attributeType); // 0x004F565C
	public static bool IsDefined(Assembly element, Type attributeType); // 0x004F57DC
	public static bool IsDefined(MemberInfo element, Type attributeType, bool inherit); // 0x004F5664
	public static bool IsDefined(Assembly element, Type attributeType, bool inherit); // 0x004F57E4
	public static bool IsDefined(Module element, Type attributeType, bool inherit); // 0x004F5594
	public static bool IsDefined(ParameterInfo element, Type attributeType, bool inherit); // 0x004F55E4
	public virtual bool Match(object obj); // 0x004F582C
	public override bool Equals(object obj); // 0x004F583C
}

// Namespace: System.Runtime.InteropServices
public interface _Attribute // TypeDefIndex: 4
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System
[Serializable]
public struct Int32 : IFormattable, IConvertible, IComparable, IComparable`1<int>, IEquatable`1<int> // TypeDefIndex: 5
{
	// Fields
	public const int MaxValue = 2147483647; // 0x00
	public const int MinValue = -2147483648; // 0x00
	internal int m_value; // 0x08

	// Methods
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x0008B5C8
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x0008B5D0
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x0008B5D8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x0008B5E0
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x0008B5F4
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x0008B608
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x0008B610
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x0008B618
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x0008B620
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x0008B628
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x0008B630
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x0008B638
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x0008B640
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x0008B648
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x0008B650
	public int CompareTo(object value); // 0x0008B658
	public override bool Equals(object obj); // 0x0008B660
	public override int GetHashCode(); // 0x0008B668
	public int CompareTo(int value); // 0x0008B670
	public bool Equals(int obj); // 0x0008B688
	internal static bool ProcessTrailingWhitespace(bool tryParse, string s, int position, Exception exc); // 0x001D7BCC
	internal static bool Parse(string s, bool tryParse, out int result, out Exception exc); // 0x001D8ED8
	public static int Parse(string s, IFormatProvider provider); // 0x001D91FC
	public static int Parse(string s, NumberStyles style); // 0x001D9208
	internal static bool CheckStyle(NumberStyles style, bool tryParse, Exception exc); // 0x001D9210
	internal static bool JumpOverWhite(int pos, string s, bool reportError, bool tryParse, Exception exc); // 0x001D931C
	internal static void FindSign(int pos, string s, NumberFormatInfo nfi, bool foundSign, bool negative); // 0x001D943C
	internal static void FindCurrency(int pos, string s, NumberFormatInfo nfi, bool foundCurrency); // 0x001D95D0
	internal static bool FindExponent(int pos, string s, int exponent, bool tryParse, Exception exc); // 0x001D9718
	internal static bool FindOther(int pos, string s, string other); // 0x001D9AF8
	internal static bool ValidDigit(char e, bool allowHex); // 0x001D9C00
	internal static Exception GetFormatException(); // 0x001D7B4C
	internal static bool Parse(string s, NumberStyles style, IFormatProvider fp, bool tryParse, out int result, out Exception exc); // 0x001D9CF0
	public static int Parse(string s); // 0x001DABCC
	public static int Parse(string s, NumberStyles style, IFormatProvider provider); // 0x001D7DC4
	public static bool TryParse(string s, out int result); // 0x001DAC6C
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out int result); // 0x001D7FC8
	public override string ToString(); // 0x0008B69C
	public string ToString(IFormatProvider provider); // 0x0008B6A4
	public string ToString(string format); // 0x0008B6AC
	public string ToString(string format, IFormatProvider provider); // 0x0008B6B8
	public TypeCode GetTypeCode(); // 0x0008B6C0
}

// Namespace: System
public interface IFormattable // TypeDefIndex: 6
{
	// Methods
	string ToString(string format, IFormatProvider formatProvider);
}

// Namespace: System
public interface IConvertible // TypeDefIndex: 7
{
	// Methods
	TypeCode GetTypeCode();
	bool ToBoolean(IFormatProvider provider);
	byte ToByte(IFormatProvider provider);
	char ToChar(IFormatProvider provider);
	DateTime ToDateTime(IFormatProvider provider);
	Decimal ToDecimal(IFormatProvider provider);
	double ToDouble(IFormatProvider provider);
	short ToInt16(IFormatProvider provider);
	int ToInt32(IFormatProvider provider);
	long ToInt64(IFormatProvider provider);
	sbyte ToSByte(IFormatProvider provider);
	float ToSingle(IFormatProvider provider);
	string ToString(IFormatProvider provider);
	object ToType(Type conversionType, IFormatProvider provider);
	ushort ToUInt16(IFormatProvider provider);
	uint ToUInt32(IFormatProvider provider);
	ulong ToUInt64(IFormatProvider provider);
}

// Namespace: System
public interface IComparable // TypeDefIndex: 8
{
	// Methods
	int CompareTo(object obj);
}

// Namespace: System
public interface IComparable`1 // TypeDefIndex: 9
{
	// Methods
	int CompareTo(T other);
}

// Namespace: System
public sealed class SerializableAttribute : Attribute // TypeDefIndex: 10
{
	// Constructors
	public SerializableAttribute(); // 0x00247530

}

// Namespace: System
[Serializable]
public sealed class AttributeUsageAttribute : Attribute // TypeDefIndex: 11
{
	// Fields
	private AttributeTargets valid_on; // 0x08
	private bool allow_multiple; // 0x0C
	private bool inherited; // 0x0D

	// Properties
	public bool AllowMultiple { get; set; } // 0x004F5910 0x004F5918
	public bool Inherited { get; set; } // 0x004F5920 0x004F5928
	public AttributeTargets ValidOn { get; } // 0x004F5930 

	// Constructors
	public AttributeUsageAttribute(AttributeTargets validOn); // 0x004F58E4

}

// Namespace: System.Runtime.InteropServices
public sealed class ComVisibleAttribute : Attribute // TypeDefIndex: 12
{
	// Fields
	private bool Visible; // 0x08

	// Properties
	public bool Value { get; } // 0x002B5F20 

	// Constructors
	public ComVisibleAttribute(bool visibility); // 0x002B5F00

}

// Namespace: System
public interface IEquatable`1 // TypeDefIndex: 13
{
	// Methods
	bool Equals(T other);
}

// Namespace: System
[Serializable]
public struct Int64 : IFormattable, IConvertible, IComparable, IComparable`1<long>, IEquatable`1<long> // TypeDefIndex: 14
{
	// Fields
	public const long MaxValue = 9223372036854775807; // 0x00
	public const long MinValue = -9223372036854775808; // 0x00
	internal long m_value; // 0x08

	// Methods
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x0008B6C8
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x0008B6D0
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x0008B6D8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x0008B6E0
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x0008B6F4
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x0008B708
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x0008B710
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x0008B718
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x0008B720
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x0008B728
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x0008B730
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x0008B738
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x0008B740
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x0008B748
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x0008B750
	public int CompareTo(object value); // 0x0008B758
	public override bool Equals(object obj); // 0x0008B760
	public override int GetHashCode(); // 0x0008B768
	public int CompareTo(long value); // 0x0008B774
	public bool Equals(long obj); // 0x0008B7A8
	internal static bool Parse(string s, bool tryParse, out long result, out Exception exc); // 0x001DBA78
	public static long Parse(string s, IFormatProvider provider); // 0x001DBE04
	public static long Parse(string s, NumberStyles style); // 0x001DBED0
	internal static bool Parse(string s, NumberStyles style, IFormatProvider fp, bool tryParse, out long result, out Exception exc); // 0x001DBED8
	public static long Parse(string s); // 0x001DD24C
	public static long Parse(string s, NumberStyles style, IFormatProvider provider); // 0x001DBE10
	public static bool TryParse(string s, out long result); // 0x001DD2F4
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out long result); // 0x001DD33C
	public override string ToString(); // 0x0008B7C4
	public string ToString(IFormatProvider provider); // 0x0008B7CC
	public string ToString(string format); // 0x0008B7D4
	public string ToString(string format, IFormatProvider provider); // 0x0008B7E0
	public TypeCode GetTypeCode(); // 0x0008B7E8
}

// Namespace: System
[Serializable]
public struct UInt32 : IFormattable, IConvertible, IComparable, IComparable`1<uint>, IEquatable`1<uint> // TypeDefIndex: 15
{
	// Fields
	public const uint MaxValue = 4294967295; // 0x00
	public const uint MinValue = 0; // 0x00
	internal uint m_value; // 0x08

	// Methods
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x000A7D1C
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x000A7D24
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x000A7D2C
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x000A7D34
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x000A7D48
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x000A7D5C
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x000A7D64
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x000A7D6C
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x000A7D74
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x000A7D7C
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x000A7D84
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x000A7D8C
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x000A7D94
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x000A7D9C
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x000A7DA4
	public int CompareTo(object value); // 0x000A7DAC
	public override bool Equals(object obj); // 0x000A7DB4
	public override int GetHashCode(); // 0x000A7DBC
	public int CompareTo(uint value); // 0x000A7DC4
	public bool Equals(uint obj); // 0x000A7DDC
	internal static bool Parse(string s, bool tryParse, out uint result, out Exception exc); // 0x00428AFC
	internal static bool Parse(string s, NumberStyles style, IFormatProvider provider, bool tryParse, out uint result, out Exception exc); // 0x00428E30
	public static uint Parse(string s); // 0x00429C1C
	public static uint Parse(string s, NumberStyles style, IFormatProvider provider); // 0x00427DAC
	public static uint Parse(string s, IFormatProvider provider); // 0x00429CBC
	public static uint Parse(string s, NumberStyles style); // 0x00429CC8
	public static bool TryParse(string s, out uint result); // 0x00429CD0
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out uint result); // 0x00427EF8
	public override string ToString(); // 0x000A7DF0
	public string ToString(IFormatProvider provider); // 0x000A7DF8
	public string ToString(string format); // 0x000A7E00
	public string ToString(string format, IFormatProvider provider); // 0x000A7E0C
	public TypeCode GetTypeCode(); // 0x000A7E14
}

// Namespace: System
[Serializable]
public sealed class CLSCompliantAttribute : Attribute // TypeDefIndex: 16
{
	// Fields
	private bool is_compliant; // 0x08

	// Properties
	public bool IsCompliant { get; } // 0x004FA59C 

	// Constructors
	public CLSCompliantAttribute(bool isCompliant); // 0x004FA57C

}

// Namespace: System
[Serializable]
public struct UInt64 : IFormattable, IConvertible, IComparable, IComparable`1<ulong>, IEquatable`1<ulong> // TypeDefIndex: 17
{
	// Fields
	public const ulong MaxValue = 18446744073709551615; // 0x00
	public const ulong MinValue = 0; // 0x00
	internal ulong m_value; // 0x08

	// Methods
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x000A7E1C
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x000A7E24
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x000A7E2C
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x000A7E34
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x000A7E48
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x000A7E5C
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x000A7E64
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x000A7E6C
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x000A7E74
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x000A7E7C
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x000A7E84
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x000A7E8C
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x000A7E94
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x000A7E9C
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x000A7EA4
	public int CompareTo(object value); // 0x000A7EAC
	public override bool Equals(object obj); // 0x000A7EB4
	public override int GetHashCode(); // 0x000A7EBC
	public int CompareTo(ulong value); // 0x000A7EC8
	public bool Equals(ulong obj); // 0x000A7EFC
	public static ulong Parse(string s); // 0x0042A96C
	public static ulong Parse(string s, IFormatProvider provider); // 0x0042AA38
	public static ulong Parse(string s, NumberStyles style); // 0x0042AA44
	internal static bool Parse(string s, NumberStyles style, IFormatProvider provider, bool tryParse, out ulong result, out Exception exc); // 0x0042AA4C
	public static ulong Parse(string s, NumberStyles style, IFormatProvider provider); // 0x0042A978
	public static bool TryParse(string s, out ulong result); // 0x0042B8A4
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out ulong result); // 0x0042B8F8
	public override string ToString(); // 0x000A7F18
	public string ToString(IFormatProvider provider); // 0x000A7F20
	public string ToString(string format); // 0x000A7F28
	public string ToString(string format, IFormatProvider provider); // 0x000A7F34
	public TypeCode GetTypeCode(); // 0x000A7F3C
}

// Namespace: System
[Serializable]
public struct Byte : IFormattable, IConvertible, IComparable, IComparable`1<byte>, IEquatable`1<byte> // TypeDefIndex: 18
{
	// Fields
	public const byte MinValue = 0; // 0x00
	public const byte MaxValue = 255; // 0x00
	internal byte m_value; // 0x08

	// Methods
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x000A9950
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x000A9958
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x000A9960
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x000A9968
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x000A9970
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x000A9980
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x000A9994
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x000A999C
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x000A99A4
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x000A99AC
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x000A99B4
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x000A99BC
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x000A99C4
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x000A99CC
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x000A99D4
	public int CompareTo(object value); // 0x000A99DC
	public override bool Equals(object obj); // 0x000A99E4
	public override int GetHashCode(); // 0x000A99EC
	public int CompareTo(byte value); // 0x000A99F4
	public bool Equals(byte obj); // 0x000A9A0C
	public static byte Parse(string s, IFormatProvider provider); // 0x004FA224
	public static byte Parse(string s, NumberStyles style); // 0x004FA304
	public static byte Parse(string s, NumberStyles style, IFormatProvider provider); // 0x004FA230
	public static byte Parse(string s); // 0x004FA30C
	public static bool TryParse(string s, out byte result); // 0x004FA318
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out byte result); // 0x004FA36C
	public override string ToString(); // 0x000A9A20
	public string ToString(string format); // 0x000A9A28
	public string ToString(IFormatProvider provider); // 0x000A9A34
	public string ToString(string format, IFormatProvider provider); // 0x000A9A3C
	public TypeCode GetTypeCode(); // 0x000A9A44
}

// Namespace: System
[Serializable]
public struct SByte : IFormattable, IConvertible, IComparable, IComparable`1<sbyte>, IEquatable`1<sbyte> // TypeDefIndex: 19
{
	// Fields
	public const sbyte MinValue = 128; // 0x00
	public const sbyte MaxValue = 127; // 0x00
	internal sbyte m_value; // 0x08

	// Methods
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x0008BE58
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x0008BE60
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x0008BE68
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x0008BE70
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x0008BE84
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x0008BE98
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x0008BEA0
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x0008BEA8
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x0008BEB0
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x0008BEB8
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x0008BEC0
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x0008BEC8
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x0008BED0
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x0008BED8
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x0008BEE0
	public int CompareTo(object obj); // 0x0008BEE8
	public override bool Equals(object obj); // 0x0008BEF0
	public override int GetHashCode(); // 0x0008BEF8
	public int CompareTo(sbyte value); // 0x0008BF00
	public bool Equals(sbyte obj); // 0x0008BF24
	internal static bool Parse(string s, bool tryParse, out sbyte result, out Exception exc); // 0x0020FF2C
	public static sbyte Parse(string s, IFormatProvider provider); // 0x002102F0
	public static sbyte Parse(string s, NumberStyles style); // 0x002103D4
	public static sbyte Parse(string s, NumberStyles style, IFormatProvider provider); // 0x002102FC
	public static sbyte Parse(string s); // 0x002103DC
	public static bool TryParse(string s, out sbyte result); // 0x0021047C
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out sbyte result); // 0x002104C0
	public override string ToString(); // 0x0008BF3C
	public string ToString(IFormatProvider provider); // 0x0008BF44
	public string ToString(string format); // 0x0008BF4C
	public string ToString(string format, IFormatProvider provider); // 0x0008BF58
	public TypeCode GetTypeCode(); // 0x0008BF60
}

// Namespace: System
[Serializable]
public struct Int16 : IFormattable, IConvertible, IComparable, IComparable`1<short>, IEquatable`1<short> // TypeDefIndex: 20
{
	// Fields
	public const short MaxValue = 32767; // 0x00
	public const short MinValue = -32768; // 0x00
	internal short m_value; // 0x08

	// Methods
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x0008B4B8
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x0008B4C0
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x0008B4C8
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x0008B4D0
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x0008B4E4
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x0008B4F8
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x0008B500
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x0008B508
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x0008B510
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x0008B518
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x0008B520
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x0008B528
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x0008B530
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x0008B538
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x0008B540
	public int CompareTo(object value); // 0x0008B548
	public override bool Equals(object obj); // 0x0008B550
	public override int GetHashCode(); // 0x0008B558
	public int CompareTo(short value); // 0x0008B560
	public bool Equals(short obj); // 0x0008B584
	internal static bool Parse(string s, bool tryParse, out short result, out Exception exc); // 0x001D784C
	public static short Parse(string s, IFormatProvider provider); // 0x001D7CE8
	public static short Parse(string s, NumberStyles style); // 0x001D7DBC
	public static short Parse(string s, NumberStyles style, IFormatProvider provider); // 0x001D7CF4
	public static short Parse(string s); // 0x001D7E7C
	public static bool TryParse(string s, out short result); // 0x001D7F1C
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out short result); // 0x001D7F60
	public override string ToString(); // 0x0008B59C
	public string ToString(IFormatProvider provider); // 0x0008B5A4
	public string ToString(string format); // 0x0008B5AC
	public string ToString(string format, IFormatProvider provider); // 0x0008B5B8
	public TypeCode GetTypeCode(); // 0x0008B5C0
}

// Namespace: System
[Serializable]
public struct UInt16 : IFormattable, IConvertible, IComparable, IComparable`1<ushort>, IEquatable`1<ushort> // TypeDefIndex: 21
{
	// Fields
	public const ushort MaxValue = 65535; // 0x00
	public const ushort MinValue = 0; // 0x00
	internal ushort m_value; // 0x08

	// Methods
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x000A7C28
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x000A7C30
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x000A7C38
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x000A7C40
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x000A7C54
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x000A7C68
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x000A7C70
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x000A7C78
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x000A7C80
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x000A7C88
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x000A7C90
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x000A7C98
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x000A7CA0
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x000A7CA8
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x000A7CB0
	public int CompareTo(object value); // 0x000A7CB8
	public override bool Equals(object obj); // 0x000A7CC0
	public override int GetHashCode(); // 0x000A7CC8
	public int CompareTo(ushort value); // 0x000A7CD0
	public bool Equals(ushort obj); // 0x000A7CDC
	public static ushort Parse(string s, IFormatProvider provider); // 0x00427CC8
	public static ushort Parse(string s, NumberStyles style); // 0x00427DA4
	public static ushort Parse(string s, NumberStyles style, IFormatProvider provider); // 0x00427CD4
	public static ushort Parse(string s); // 0x00427E64
	public static bool TryParse(string s, out ushort result); // 0x00427E70
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out ushort result); // 0x00427E94
	public override string ToString(); // 0x000A7CF0
	public string ToString(IFormatProvider provider); // 0x000A7CF8
	public string ToString(string format); // 0x000A7D00
	public string ToString(string format, IFormatProvider provider); // 0x000A7D0C
	public TypeCode GetTypeCode(); // 0x000A7D14
}

// Namespace: System.Collections
public interface IEnumerator // TypeDefIndex: 22
{
	// Properties
	object Current { get; }

	// Methods
	bool MoveNext();
	void Reset();
}

// Namespace: System.Collections
public interface IEnumerable // TypeDefIndex: 23
{
	// Methods
	IEnumerator GetEnumerator();
}

// Namespace: System
public interface IDisposable // TypeDefIndex: 24
{
	// Methods
	void Dispose();
}

// Namespace: System.Collections.Generic
public interface IEnumerator`1 : IEnumerator, IDisposable // TypeDefIndex: 25
{
	// Properties
	T Current { get; }

}

// Namespace: System
[Serializable]
public struct Char : IConvertible, IComparable, IComparable`1<char>, IEquatable`1<char> // TypeDefIndex: 26
{
	// Fields
	public const char MaxValue = '\xffff'; // 0x00
	public const char MinValue = '\x0000'; // 0x00
	internal char m_value; // 0x08
	private static readonly void * category_data; // 0x00
	private static readonly void * numeric_data; // 0x04
	private static readonly void * numeric_data_values; // 0x08
	private static readonly void * to_lower_data_low; // 0x0C
	private static readonly void * to_lower_data_high; // 0x10
	private static readonly void * to_upper_data_low; // 0x14
	private static readonly void * to_upper_data_high; // 0x18

	// Constructors
	private static Char(); // 0x004FA68C

	// Methods
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x000A9A4C
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x000A9A54
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x000A9A64
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x000A9A6C
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x000A9A74
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x000A9A84
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x000A9A94
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x000A9AA4
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x000A9AAC
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x000A9AB4
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x000A9ABC
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x000A9AC4
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x000A9AD4
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x000A9ADC
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x000A9AE4
	private static void GetDataTablePointers(out void * category_data, out void * numeric_data, out void * numeric_data_values, out void * to_lower_data_low, out void * to_lower_data_high, out void * to_upper_data_low, out void * to_upper_data_high); // 0x004FA718
	public int CompareTo(object value); // 0x000A9AEC
	public override bool Equals(object obj); // 0x000A9AF4
	public int CompareTo(char value); // 0x000A9AFC
	public static string ConvertFromUtf32(int utf32); // 0x004FB0E8
	public static int ConvertToUtf32(char highSurrogate, char lowSurrogate); // 0x004FB2B8
	public static int ConvertToUtf32(string s, int index); // 0x004FB3C4
	public bool Equals(char obj); // 0x000A9B14
	public static bool IsSurrogatePair(char highSurrogate, char lowSurrogate); // 0x004FB860
	public static bool IsSurrogatePair(string s, int index); // 0x004FB87C
	public override int GetHashCode(); // 0x000A9B28
	public static double GetNumericValue(char c); // 0x004FB9A0
	public static double GetNumericValue(string s, int index); // 0x004FBA7C
	public static UnicodeCategory GetUnicodeCategory(char c); // 0x004FBB28
	public static UnicodeCategory GetUnicodeCategory(string s, int index); // 0x004FBBBC
	public static bool IsControl(char c); // 0x004FBC68
	public static bool IsControl(string s, int index); // 0x004FBD08
	public static bool IsDigit(char c); // 0x004FBDB4
	public static bool IsDigit(string s, int index); // 0x004FBE54
	public static bool IsHighSurrogate(char c); // 0x004FB824
	public static bool IsHighSurrogate(string s, int index); // 0x004FBF00
	public static bool IsLetter(char c); // 0x004FBFBC
	public static bool IsLetter(string s, int index); // 0x004FC05C
	public static bool IsLetterOrDigit(char c); // 0x004FC108
	public static bool IsLetterOrDigit(string s, int index); // 0x004FC1B8
	public static bool IsLower(char c); // 0x004FC264
	public static bool IsLower(string s, int index); // 0x004FC300
	public static bool IsLowSurrogate(char c); // 0x004FB838
	public static bool IsLowSurrogate(string s, int index); // 0x004FC3AC
	public static bool IsNumber(char c); // 0x004FC468
	public static bool IsNumber(string s, int index); // 0x004FC510
	public static bool IsPunctuation(char c); // 0x004FC5BC
	public static bool IsPunctuation(string s, int index); // 0x004FC664
	public static bool IsSeparator(char c); // 0x004FC710
	public static bool IsSeparator(string s, int index); // 0x004FC7B8
	public static bool IsSurrogate(char c); // 0x004FB784
	public static bool IsSurrogate(string s, int index); // 0x004FC864
	public static bool IsSymbol(char c); // 0x004FC910
	public static bool IsSymbol(string s, int index); // 0x004FC9B8
	public static bool IsUpper(char c); // 0x004FCA64
	public static bool IsUpper(string s, int index); // 0x004FCB04
	public static bool IsWhiteSpace(char c); // 0x004FCBB0
	public static bool IsWhiteSpace(string s, int index); // 0x004FCC94
	private static void CheckParameter(string s, int index); // 0x004FB670
	public static bool TryParse(string s, out char result); // 0x004FCD40
	public static char Parse(string s); // 0x004FCD98
	public static char ToLower(char c); // 0x004FCEB8
	public static char ToLowerInvariant(char c); // 0x004FCF8C
	public static char ToLower(char c, CultureInfo culture); // 0x004FD094
	public static char ToUpper(char c); // 0x004FD1D8
	public static char ToUpperInvariant(char c); // 0x004FD2AC
	public static char ToUpper(char c, CultureInfo culture); // 0x004FD3B4
	public override string ToString(); // 0x000A9B30
	public static string ToString(char c); // 0x004FD50C
	public string ToString(IFormatProvider provider); // 0x000A9B44
	public TypeCode GetTypeCode(); // 0x000A9B58
}

// Namespace: System
[Serializable]
public sealed class String : IConvertible, IComparable, IEnumerable, ICloneable, IComparable`1<string>, IEquatable`1<string>, IEnumerable`1<char> // TypeDefIndex: 27
{
	// Fields
	[NonSerialized]	private int length; // 0x08
	[NonSerialized]	private char start_char; // 0x0C
	public static readonly string Empty; // 0x00
	private static readonly char[] WhiteChars; // 0x04

	// Properties
	public char Chars { get; } // 0x00234510 
	public int Length { get; } // 0x00253A14 

	// Constructors
	public String(void * value); // 0x00248AB0
	public String(void * value, int startIndex, int length); // 0x00248AB4
	public String(void * value); // 0x00248AB8
	public String(void * value, int startIndex, int length); // 0x00248ABC
	public String(void * value, int startIndex, int length, Encoding enc); // 0x00248AC0
	public String(char[] value, int startIndex, int length); // 0x00248AC4
	public String(char[] value); // 0x00248AC8
	public String(char c, int count); // 0x00248ACC
	private static String(); // 0x00248AD0

	// Methods
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x00248B84
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x00248C10
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x00248C9C
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x00248D28
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x00248DBC
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x00248E50
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x00248EDC
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x00248F68
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x00248FF4
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x00249080
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x0024910C
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x00249198
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x0024929C
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x00249328
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x002493B4
	private IEnumerator`1<char> System.Collections.Generic.IEnumerable<char>.GetEnumerator(); // 0x00249440
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x002494B4
	public static bool Equals(string a, string b); // 0x00249528
	public override bool Equals(object obj); // 0x00249644
	public bool Equals(string value); // 0x002496F8
	public object Clone(); // 0x00249780
	public TypeCode GetTypeCode(); // 0x00249784
	public void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count); // 0x0024978C
	public char[] ToCharArray(); // 0x00249B84
	public char[] ToCharArray(int startIndex, int length); // 0x00249B90
	public string[] Split(char[] separator); // 0x00249D98
	public string[] Split(char[] separator, int count); // 0x00249DA0
	public string[] Split(char[] separator, int count, StringSplitOptions options); // 0x00249F70
	public string[] Split(string[] separator, int count, StringSplitOptions options); // 0x0024A364
	public string[] Split(char[] separator, StringSplitOptions options); // 0x0024A998
	public string[] Split(string[] separator, StringSplitOptions options); // 0x0024A9B8
	public string Substring(int startIndex); // 0x0023443C
	public string Substring(int startIndex, int length); // 0x002345BC
	internal string SubstringUnchecked(int startIndex, int length); // 0x0024A9D8
	public string Trim(); // 0x0024AAD4
	public string Trim(char[] trimChars); // 0x0024AD0C
	public string TrimStart(char[] trimChars); // 0x0024AF38
	public string TrimEnd(char[] trimChars); // 0x0024B044
	private int FindNotWhiteSpace(int pos, int target, int change); // 0x0024AC14
	private int FindNotInTable(int pos, int target, int change, char[] table); // 0x0024AE78
	public static int Compare(string strA, string strB); // 0x0024B158
	public static int Compare(string strA, string strB, bool ignoreCase); // 0x0024B244
	public static int Compare(string strA, string strB, bool ignoreCase, CultureInfo culture); // 0x00233BD0
	public static int Compare(string strA, int indexA, string strB, int indexB, int length); // 0x0024B334
	public static int Compare(string strA, int indexA, string strB, int indexB, int length, bool ignoreCase); // 0x0023701C
	public static int Compare(string strA, int indexA, string strB, int indexB, int length, bool ignoreCase, CultureInfo culture); // 0x00234FF4
	public static int Compare(string strA, string strB, StringComparison comparisonType); // 0x0024B41C
	public static int Compare(string strA, int indexA, string strB, int indexB, int length, StringComparison comparisonType); // 0x0024BA64
	public static bool Equals(string a, string b, StringComparison comparisonType); // 0x0024C060
	public bool Equals(string value, StringComparison comparisonType); // 0x0024C100
	public static int Compare(string strA, string strB, CultureInfo culture, CompareOptions options); // 0x0024C1A0
	public static int Compare(string strA, int indexA, string strB, int indexB, int length, CultureInfo culture, CompareOptions options); // 0x0024C2AC
	public int CompareTo(object value); // 0x0024C414
	public int CompareTo(string strB); // 0x00239360
	public static int CompareOrdinal(string strA, string strB); // 0x0024C524
	public static int CompareOrdinal(string strA, int indexA, string strB, int indexB, int length); // 0x0024BE00
	internal static int CompareOrdinalCaseInsensitive(string strA, int indexA, string strB, int indexB, int length); // 0x0024BF30
	internal static int CompareOrdinalUnchecked(string strA, int indexA, int lenA, string strB, int indexB, int lenB); // 0x0024B7B4
	internal static int CompareOrdinalCaseInsensitiveUnchecked(string strA, int indexA, int lenA, string strB, int indexB, int lenB); // 0x0024B8C0
	public bool EndsWith(string value); // 0x0024C5CC
	public bool EndsWith(string value, bool ignoreCase, CultureInfo culture); // 0x0024C718
	public int IndexOfAny(char[] anyOf); // 0x0023FEAC
	public int IndexOfAny(char[] anyOf, int startIndex); // 0x0024C98C
	public int IndexOfAny(char[] anyOf, int startIndex, int count); // 0x0024CA88
	private int IndexOfAnyUnchecked(char[] anyOf, int startIndex, int count); // 0x0024C878
	public int IndexOf(string value, StringComparison comparisonType); // 0x0024CD90
	public int IndexOf(string value, int startIndex, StringComparison comparisonType); // 0x0024D0E0
	public int IndexOf(string value, int startIndex, int count, StringComparison comparisonType); // 0x0024CDB4
	internal int IndexOfOrdinal(string value, int startIndex, int count, CompareOptions options); // 0x0024D104
	internal int IndexOfOrdinalUnchecked(string value, int startIndex, int count); // 0x0024D2A4
	internal int IndexOfOrdinalIgnoreCaseUnchecked(string value, int startIndex, int count); // 0x0024D3C0
	public int LastIndexOf(string value, StringComparison comparisonType); // 0x0024D550
	public int LastIndexOf(string value, int startIndex, StringComparison comparisonType); // 0x0024D954
	public int LastIndexOf(string value, int startIndex, int count, StringComparison comparisonType); // 0x0024D628
	internal int LastIndexOfOrdinal(string value, int startIndex, int count, CompareOptions options); // 0x0024D974
	internal int LastIndexOfOrdinalUnchecked(string value, int startIndex, int count); // 0x0024DB1C
	internal int LastIndexOfOrdinalIgnoreCaseUnchecked(string value, int startIndex, int count); // 0x0024DC5C
	public int IndexOf(char value); // 0x00235724
	public int IndexOf(char value, int startIndex); // 0x0024DF9C
	public int IndexOf(char value, int startIndex, int count); // 0x0024E0F4
	internal int IndexOfUnchecked(char value, int startIndex, int count); // 0x0024CBEC
	internal int IndexOfOrdinalIgnoreCase(char value, int startIndex, int count); // 0x0024E2BC
	public int IndexOf(string value); // 0x002338E8
	public int IndexOf(string value, int startIndex); // 0x0024A978
	public int IndexOf(string value, int startIndex, int count); // 0x0024E3DC
	public int LastIndexOfAny(char[] anyOf); // 0x0024E638
	public int LastIndexOfAny(char[] anyOf, int startIndex); // 0x0024E7C8
	public int LastIndexOfAny(char[] anyOf, int startIndex, int count); // 0x0024E8FC
	private int LastIndexOfAnyUnchecked(char[] anyOf, int startIndex, int count); // 0x0024E6F0
	public int LastIndexOf(char value); // 0x0024EAE8
	public int LastIndexOf(char value, int startIndex); // 0x0024EB14
	public int LastIndexOf(char value, int startIndex, int count); // 0x0024EB30
	internal int LastIndexOfUnchecked(char value, int startIndex, int count); // 0x0024DDF0
	internal int LastIndexOfOrdinalIgnoreCase(char value, int startIndex, int count); // 0x0024ECF4
	public int LastIndexOf(string value); // 0x00234FC8
	public int LastIndexOf(string value, int startIndex); // 0x0024F0EC
	public int LastIndexOf(string value, int startIndex, int count); // 0x0024EE14
	public bool Contains(string value); // 0x0024F114
	public static bool IsNullOrEmpty(string value); // 0x0024F134
	public string Normalize(); // 0x0024F154
	public string Normalize(NormalizationForm normalizationForm); // 0x0024F1DC
	public bool IsNormalized(); // 0x0024F2C0
	public bool IsNormalized(NormalizationForm normalizationForm); // 0x0024F348
	public string Remove(int startIndex); // 0x0024F42C
	public string PadLeft(int totalWidth); // 0x0024F75C
	public string PadLeft(int totalWidth, char paddingChar); // 0x0024F764
	public string PadRight(int totalWidth); // 0x0024F908
	public string PadRight(int totalWidth, char paddingChar); // 0x0024F910
	public bool StartsWith(string value); // 0x002342F0
	public bool StartsWith(string value, StringComparison comparisonType); // 0x0024FAB0
	public bool EndsWith(string value, StringComparison comparisonType); // 0x0024FED0
	public bool StartsWith(string value, bool ignoreCase, CultureInfo culture); // 0x002502F0
	public string Replace(char oldChar, char newChar); // 0x002503F0
	public string Replace(string oldValue, string newValue); // 0x00250558
	private string ReplaceUnchecked(string oldValue, string newValue); // 0x002506CC
	private string ReplaceFallback(string oldValue, string newValue, int testedCount); // 0x002509EC
	public string Remove(int startIndex, int count); // 0x0024F55C
	public string ToLower(); // 0x00250BA0
	public string ToLower(CultureInfo culture); // 0x00250C2C
	public string ToLowerInvariant(); // 0x00250D44
	public string ToUpper(); // 0x002381DC
	public string ToUpper(CultureInfo culture); // 0x00250E8C
	public string ToUpperInvariant(); // 0x00238D48
	public override string ToString(); // 0x00250FA4
	public string ToString(IFormatProvider provider); // 0x00250FA8
	public static string Format(string format, object arg0); // 0x00235938
	public static string Format(string format, object arg0, object arg1); // 0x002473B4
	public static string Format(string format, object arg0, object arg1, object arg2); // 0x00251068
	public static string Format(string format, object[] args); // 0x00251218
	public static string Format(IFormatProvider provider, string format, object[] args); // 0x00250FAC
	internal static StringBuilder FormatHelper(StringBuilder result, IFormatProvider provider, string format, object[] args); // 0x002512A4
	public static string Copy(string str); // 0x00252074
	public static string Concat(object arg0); // 0x002521C4
	public static string Concat(object arg0, object arg1); // 0x00236920
	public static string Concat(object arg0, object arg1, object arg2); // 0x0024A19C
	public static string Concat(object arg0, object arg1, object arg2, object arg3); // 0x00252274
	public static string Concat(string str0, string str1); // 0x00233A6C
	public static string Concat(string str0, string str1, string str2); // 0x00238420
	public static string Concat(string str0, string str1, string str2, string str3); // 0x00252558
	public static string Concat(object[] args); // 0x002529D8
	public static string Concat(string[] values); // 0x00252E18
	private static string ConcatInternal(string[] values, int length); // 0x00252C78
	public string Insert(int startIndex, string value); // 0x00252F54
	public static string Intern(string str); // 0x00253134
	public static string IsInterned(string str); // 0x00253218
	public static string Join(string separator, string[] value); // 0x002532FC
	public static string Join(string separator, string[] value, int startIndex, int count); // 0x00253768
	private static string JoinUnchecked(string separator, string[] value, int startIndex, int count); // 0x00253430
	public CharEnumerator GetEnumerator(); // 0x00253A1C
	private static void ParseFormatSpecifier(string str, int ptr, out int n, out int width, out bool left_align, out string format); // 0x00251B10
	private static int ParseDecimal(string str, int ptr); // 0x00253A90
	internal void InternalSetChar(int idx, char val); // 0x00253B00
	internal void InternalSetLength(int newLength); // 0x00253BBC
	public override int GetHashCode(); // 0x00233DF4
	internal int GetCaseInsensitiveHashCode(); // 0x00253CA8
	private string CreateString(void * value); // 0x00253DF0
	private string CreateString(void * value, int startIndex, int length); // 0x002543A0
	private string CreateString(void * value, int startIndex, int length, Encoding enc); // 0x00253ED4
	private string CreateString(void * value); // 0x0025452C
	private string CreateString(void * value, int startIndex, int length); // 0x0025467C
	private string CreateString(char[] val, int startIndex, int length); // 0x0025486C
	private string CreateString(char[] val); // 0x00254B10
	private string CreateString(char c, int count); // 0x00254C80
	internal static void memset(void * dest, int val, int len); // 0x00254DCC
	private static void memcpy4(void * dest, void * src, int size); // 0x00254E8C
	private static void memcpy2(void * dest, void * src, int size); // 0x00254F18
	private static void memcpy1(void * dest, void * src, int size); // 0x00254F90
	internal static void memcpy(void * dest, void * src, int size); // 0x002543C0
	internal static void CharCopy(void * dest, void * src, int count); // 0x00249A80
	internal static void CharCopyReverse(void * dest, void * src, int count); // 0x00255038
	internal static void CharCopy(string target, int targetIndex, string source, int sourceIndex, int count); // 0x00255068
	internal static void CharCopy(string target, int targetIndex, char[] source, int sourceIndex, int count); // 0x00255128
	internal static void CharCopyReverse(string target, int targetIndex, string source, int sourceIndex, int count); // 0x002551F0
	private string[] InternalSplit(char[] separator, int count, int options); // 0x00249F6C
	internal static string InternalAllocateStr(int length); // 0x0024AAD0
	private static string InternalIntern(string str); // 0x00253214
	private static string InternalIsInterned(string str); // 0x002532F8
	public static bool op_Equality(string a, string b); // 0x00234268
	public static bool op_Inequality(string a, string b); // 0x00230EFC
}

// Namespace: System
public interface ICloneable // TypeDefIndex: 28
{
	// Methods
	object Clone();
}

// Namespace: System.Collections.Generic
public interface IEnumerable`1 : IEnumerable // TypeDefIndex: 29
{
	// Methods
	IEnumerator`1<T> GetEnumerator();
}

// Namespace: System
[Serializable]
public struct Single : IFormattable, IConvertible, IComparable, IComparable`1<float>, IEquatable`1<float> // TypeDefIndex: 30
{
	// Fields
	public const float Epsilon = 1E-45; // 0x00
	public const float MaxValue = 3.4028235E+38; // 0x00
	public const float MinValue = -3.4028235E+38; // 0x00
	public const float NaN = NaN; // 0x00
	public const float PositiveInfinity = ∞; // 0x00
	public const float NegativeInfinity = -∞; // 0x00
	private const double MaxValueEpsilon = 3.6147112457961776E+29; // 0x00
	internal float m_value; // 0x08

	// Methods
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x0008C564
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x0008C56C
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x0008C574
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x0008C57C
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x0008C590
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x0008C5A4
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x0008C5AC
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x0008C5B4
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x0008C5BC
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x0008C5C4
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x0008C5CC
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x0008C5D4
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x0008C5DC
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x0008C5E4
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x0008C5EC
	public int CompareTo(object value); // 0x0008C5F4
	public override bool Equals(object obj); // 0x0008C5FC
	public int CompareTo(float value); // 0x0008C604
	public bool Equals(float obj); // 0x0008C60C
	public override int GetHashCode(); // 0x0008C644
	public static bool IsInfinity(float f); // 0x00248330
	public static bool IsNaN(float f); // 0x002480F8
	public static bool IsNegativeInfinity(float f); // 0x002480B0
	public static bool IsPositiveInfinity(float f); // 0x00248068
	public static float Parse(string s); // 0x00248370
	public static float Parse(string s, IFormatProvider provider); // 0x00248468
	public static float Parse(string s, NumberStyles style); // 0x00248560
	public static float Parse(string s, NumberStyles style, IFormatProvider provider); // 0x00248658
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out float result); // 0x00248758
	public static bool TryParse(string s, out float result); // 0x0024880C
	public override string ToString(); // 0x0008C64C
	public string ToString(IFormatProvider provider); // 0x0008C654
	public string ToString(string format); // 0x0008C65C
	public string ToString(string format, IFormatProvider provider); // 0x0008C668
	public TypeCode GetTypeCode(); // 0x0008C670
}

// Namespace: System
[Serializable]
public struct Double : IFormattable, IConvertible, IComparable, IComparable`1<double>, IEquatable`1<double> // TypeDefIndex: 31
{
	// Fields
	public const double Epsilon = 5E-324; // 0x00
	public const double MaxValue = 1.7976931348623157E+308; // 0x00
	public const double MinValue = -1.7976931348623157E+308; // 0x00
	public const double NaN = NaN; // 0x00
	public const double NegativeInfinity = -∞; // 0x00
	public const double PositiveInfinity = ∞; // 0x00
	private const int State_AllowSign = 1; // 0x00
	private const int State_Digits = 2; // 0x00
	private const int State_Decimal = 3; // 0x00
	private const int State_ExponentSign = 4; // 0x00
	private const int State_Exponent = 5; // 0x00
	private const int State_ConsumeWhiteSpace = 6; // 0x00
	private const int State_Exit = 7; // 0x00
	internal double m_value; // 0x08

	// Methods
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x0008D1A8
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x0008D1B0
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x0008D1B8
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x0008D1C0
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x0008D1D0
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x0008D1E0
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x0008D1F4
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x0008D1FC
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x0008D204
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x0008D20C
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x0008D214
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x0008D21C
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x0008D224
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x0008D22C
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x0008D234
	public int CompareTo(object value); // 0x0008D23C
	public override bool Equals(object obj); // 0x0008D244
	public int CompareTo(double value); // 0x0008D24C
	public bool Equals(double obj); // 0x0008D268
	public override int GetHashCode(); // 0x0008D2A0
	public static bool IsInfinity(double d); // 0x002D6BA0
	public static bool IsNaN(double d); // 0x002D6960
	public static bool IsNegativeInfinity(double d); // 0x002D6910
	public static bool IsPositiveInfinity(double d); // 0x002D68C0
	public static double Parse(string s); // 0x002D6BE8
	public static double Parse(string s, IFormatProvider provider); // 0x002D6CB4
	public static double Parse(string s, NumberStyles style); // 0x002D6CC0
	public static double Parse(string s, NumberStyles style, IFormatProvider provider); // 0x002D6BF4
	internal static bool Parse(string s, NumberStyles style, IFormatProvider provider, bool tryParse, out double result, out Exception exc); // 0x002D6CC8
	private static bool TryParseStringConstant(string format, string s, int start, int end); // 0x002D812C
	private static bool ParseImpl(void * byte_ptr, out double value); // 0x002D822C
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out double result); // 0x002D8230
	public static bool TryParse(string s, out double result); // 0x002D827C
	public override string ToString(); // 0x0008D2AC
	public string ToString(IFormatProvider provider); // 0x0008D2B4
	public string ToString(string format); // 0x0008D2BC
	public string ToString(string format, IFormatProvider provider); // 0x0008D2C8
	public TypeCode GetTypeCode(); // 0x0008D2D0
}

// Namespace: System
[Serializable]
public struct Decimal : IFormattable, IConvertible, IComparable, IComparable`1<Decimal>, IEquatable`1<Decimal> // TypeDefIndex: 32
{
	// Fields
	public static readonly Decimal MinValue; // 0x00
	public static readonly Decimal MaxValue; // 0x10
	public static readonly Decimal MinusOne; // 0x20
	public static readonly Decimal One; // 0x30
	public static readonly Decimal Zero; // 0x40
	private const int DECIMAL_DIVIDE_BY_ZERO = 5; // 0x00
	private const uint MAX_SCALE = 28; // 0x00
	private const int iMAX_SCALE = 28; // 0x00
	private const uint SIGN_FLAG = 2147483648; // 0x00
	private const uint SCALE_MASK = 16711680; // 0x00
	private const int SCALE_SHIFT = 16; // 0x00
	private const uint RESERVED_SS32_BITS = 2130771967; // 0x00
	private static readonly Decimal MaxValueDiv10; // 0x50
	private uint flags; // 0x08
	private uint hi; // 0x0C
	private uint lo; // 0x10
	private uint mid; // 0x14

	// Constructors
	public Decimal(int lo, int mid, int hi, bool isNegative, byte scale); // 0x000A95E8
	public Decimal(int value); // 0x000A9610
	public Decimal(uint value); // 0x000A9638
	public Decimal(long value); // 0x000A9650
	public Decimal(ulong value); // 0x000A9684
	public Decimal(float value); // 0x000A9698
	public Decimal(double value); // 0x000A96A0
	public Decimal(int[] bits); // 0x000A96BC
	private static Decimal(); // 0x004C1B08

	// Methods
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x000A96C4
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x000A96CC
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x000A96D4
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x000A96DC
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x000A96EC
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x000A96FC
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x000A970C
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x000A9714
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x000A971C
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x000A9724
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x000A972C
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x000A9734
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x000A973C
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x000A9744
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x000A974C
	public static Decimal FromOACurrency(long cy); // 0x004C25A4
	public static int[] GetBits(Decimal d); // 0x004C2774
	public static Decimal Negate(Decimal d); // 0x004C287C
	public static Decimal Add(Decimal d1, Decimal d2); // 0x004C288C
	public static Decimal Subtract(Decimal d1, Decimal d2); // 0x004C29C4
	public override int GetHashCode(); // 0x000A9754
	private static ulong u64(Decimal value); // 0x004C2B84
	private static long s64(Decimal value); // 0x004C2C88
	public static bool Equals(Decimal d1, Decimal d2); // 0x004C2D88
	public override bool Equals(object value); // 0x000A9770
	private bool IsZero(); // 0x000A9778
	private bool IsNegative(); // 0x000A97AC
	public static Decimal Floor(Decimal d); // 0x004C303C
	public static Decimal Truncate(Decimal d); // 0x004C30E4
	public static Decimal Round(Decimal d, int decimals); // 0x004C318C
	public static Decimal Round(Decimal d, int decimals, MidpointRounding mode); // 0x004C3240
	public static Decimal Round(Decimal d); // 0x004C3BE4
	public static Decimal Round(Decimal d, MidpointRounding mode); // 0x004C3C08
	public static Decimal Multiply(Decimal d1, Decimal d2); // 0x004C3C34
	public static Decimal Divide(Decimal d1, Decimal d2); // 0x004C3D68
	public static Decimal Remainder(Decimal d1, Decimal d2); // 0x004C3EE4
	public static int Compare(Decimal d1, Decimal d2); // 0x004C2E58
	public int CompareTo(object value); // 0x000A97B8
	public int CompareTo(Decimal value); // 0x000A97C0
	public bool Equals(Decimal value); // 0x000A97E4
	public static Decimal Ceiling(Decimal d); // 0x004C4624
	public static Decimal Parse(string s); // 0x004C4648
	public static Decimal Parse(string s, NumberStyles style); // 0x004C46E0
	public static Decimal Parse(string s, IFormatProvider provider); // 0x004C477C
	private static void ThrowAtPos(int pos); // 0x004C4818
	private static void ThrowInvalidExp(); // 0x004C4928
	private static string stripStyles(string s, NumberStyles style, NumberFormatInfo nfi, out int decPos, out bool isNegative, out bool expFlag, out int exp, bool throwex); // 0x004C49D0
	public static Decimal Parse(string s, NumberStyles style, IFormatProvider provider); // 0x004C151C
	public static bool TryParse(string s, out Decimal result); // 0x004C5F8C
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out Decimal result); // 0x004C6048
	private static bool PerformParse(string s, NumberStyles style, IFormatProvider provider, out Decimal res, bool throwex); // 0x004C597C
	public TypeCode GetTypeCode(); // 0x000A9808
	public static byte ToByte(Decimal value); // 0x004C6124
	public static double ToDouble(Decimal d); // 0x004C6484
	public static short ToInt16(Decimal value); // 0x004C652C
	public static int ToInt32(Decimal d); // 0x004C67CC
	public static long ToInt64(Decimal d); // 0x004C6A64
	public static long ToOACurrency(Decimal value); // 0x004C6D50
	public static sbyte ToSByte(Decimal value); // 0x004C6E18
	public static float ToSingle(Decimal d); // 0x004C70B8
	public static ushort ToUInt16(Decimal value); // 0x004C7160
	public static uint ToUInt32(Decimal d); // 0x004C73FC
	public static ulong ToUInt64(Decimal d); // 0x004C76CC
	public string ToString(string format, IFormatProvider provider); // 0x000A9810
	public override string ToString(); // 0x000A9818
	public string ToString(string format); // 0x000A9820
	public string ToString(IFormatProvider provider); // 0x000A982C
	private static int decimal2UInt64(Decimal val, out ulong result); // 0x004C2C84
	private static int decimal2Int64(Decimal val, out long result); // 0x004C2D84
	private static int decimalIncr(Decimal d1, Decimal d2); // 0x004C29C0
	internal static int decimal2string(Decimal val, int digits, int decimals, char[] bufDigits, int bufSize, out int decPos, out int sign); // 0x004C7B08
	internal static int string2decimal(out Decimal val, string sDigits, uint decPos, int sign); // 0x004C6114
	internal static int decimalSetExponent(Decimal val, int exp); // 0x004C6118
	private static double decimal2double(Decimal val); // 0x004C7B0C
	private static void decimalFloorAndTrunc(Decimal val, int floorFlag); // 0x004C2C80
	private static int decimalMult(Decimal pd1, Decimal pd2); // 0x004C3D64
	private static int decimalDiv(out Decimal pc, Decimal pa, Decimal pb); // 0x004C3EE0
	private static int decimalIntDiv(out Decimal pc, Decimal pa, Decimal pb); // 0x004C7B10
	private static int decimalCompare(Decimal d1, Decimal d2); // 0x004C433C
	public static Decimal op_Addition(Decimal d1, Decimal d2); // 0x004C3A48
	public static Decimal op_Decrement(Decimal d); // 0x004C7B14
	public static Decimal op_Increment(Decimal d); // 0x004C7BD8
	public static Decimal op_Subtraction(Decimal d1, Decimal d2); // 0x004C38B0
	public static Decimal op_UnaryNegation(Decimal d); // 0x004C7C98
	public static Decimal op_UnaryPlus(Decimal d); // 0x004C7D30
	public static Decimal op_Multiply(Decimal d1, Decimal d2); // 0x004C397C
	public static Decimal op_Division(Decimal d1, Decimal d2); // 0x004C26A8
	public static Decimal op_Modulus(Decimal d1, Decimal d2); // 0x004C7D3C
	public static byte op_Explicit(Decimal value); // 0x004C63B4
	public static sbyte op_Explicit(Decimal value); // 0x004C6FE8
	public static char op_Explicit(Decimal value); // 0x004C7E08
	public static short op_Explicit(Decimal value); // 0x004C66FC
	public static ushort op_Explicit(Decimal value); // 0x004C732C
	public static int op_Explicit(Decimal value); // 0x004C6998
	public static uint op_Explicit(Decimal value); // 0x004C7604
	public static long op_Explicit(Decimal value); // 0x004C6CB0
	public static ulong op_Explicit(Decimal value); // 0x004C78D8
	public static Decimal op_Implicit(byte value); // 0x004C7ED8
	public static Decimal op_Implicit(sbyte value); // 0x004C7EE8
	public static Decimal op_Implicit(short value); // 0x004C7F14
	public static Decimal op_Implicit(ushort value); // 0x004C7F40
	public static Decimal op_Implicit(char value); // 0x004C7F50
	public static Decimal op_Implicit(int value); // 0x004C7F60
	public static Decimal op_Implicit(uint value); // 0x004C7F8C
	public static Decimal op_Implicit(long value); // 0x004C2670
	public static Decimal op_Implicit(ulong value); // 0x004C7FA4
	public static Decimal op_Explicit(float value); // 0x004C7FB4
	public static Decimal op_Explicit(double value); // 0x004C3890
	public static float op_Explicit(Decimal value); // 0x004C7FCC
	public static double op_Explicit(Decimal value); // 0x004C8078
	public static bool op_Inequality(Decimal d1, Decimal d2); // 0x004C8104
	public static bool op_Equality(Decimal d1, Decimal d2); // 0x004C427C
	public static bool op_GreaterThan(Decimal d1, Decimal d2); // 0x004C3B14
	public static bool op_GreaterThanOrEqual(Decimal d1, Decimal d2); // 0x004C81C8
	public static bool op_LessThan(Decimal d1, Decimal d2); // 0x004C62F0
	public static bool op_LessThanOrEqual(Decimal d1, Decimal d2); // 0x004C8298
}

// Namespace: System
[Serializable]
public struct Boolean : IConvertible, IComparable, IComparable`1<bool>, IEquatable`1<bool> // TypeDefIndex: 33
{
	// Fields
	public static readonly string FalseString; // 0x00
	public static readonly string TrueString; // 0x04
	internal bool m_value; // 0x08

	// Constructors
	private static Boolean(); // 0x004F816C

	// Methods
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x000A9848
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x000A9850
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x000A9860
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x000A9868
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x000A9878
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x000A9888
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x000A989C
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x000A98A4
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x000A98AC
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x000A98B4
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x000A98BC
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x000A98C4
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x000A98CC
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x000A98D4
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x000A98DC
	public int CompareTo(object obj); // 0x000A98E4
	public override bool Equals(object obj); // 0x000A98EC
	public int CompareTo(bool value); // 0x000A98F4
	public bool Equals(bool obj); // 0x000A9914
	public override int GetHashCode(); // 0x000A9928
	public static bool Parse(string value); // 0x004F8C7C
	public static bool TryParse(string value, out bool result); // 0x004F8F38
	public override string ToString(); // 0x000A9938
	public TypeCode GetTypeCode(); // 0x000A9940
	public string ToString(IFormatProvider provider); // 0x000A9948
}

// Namespace: System
[Serializable]
public struct IntPtr : ISerializable // TypeDefIndex: 34
{
	// Fields
	private void * m_value; // 0x08
	public static readonly IntPtr Zero; // 0x00

	// Properties
	public static int Size { get; } // 0x001DD96C 

	// Constructors
	public IntPtr(int value); // 0x0008B7F0
	public IntPtr(long value); // 0x0008B7F8
	public IntPtr(void * value); // 0x0008B800
	private IntPtr(SerializationInfo info, StreamingContext context); // 0x0008B808

	// Methods
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x0008B824
	public override bool Equals(object obj); // 0x0008B840
	public override int GetHashCode(); // 0x0008B848
	public int ToInt32(); // 0x0008B850
	public long ToInt64(); // 0x0008B858
	public void * ToPointer(); // 0x0008B864
	public override string ToString(); // 0x0008B86C
	public string ToString(string format); // 0x0008B898
	public static bool op_Equality(IntPtr value1, IntPtr value2); // 0x001DDA74
	public static bool op_Inequality(IntPtr value1, IntPtr value2); // 0x001DDA88
	public static IntPtr op_Explicit(int value); // 0x001DDA9C
	public static IntPtr op_Explicit(long value); // 0x001DDAA0
	public static IntPtr op_Explicit(void * value); // 0x001DDAA4
	public static int op_Explicit(IntPtr value); // 0x001DDAA8
	public static long op_Explicit(IntPtr value); // 0x001DDAAC
	public static void * op_Explicit(IntPtr value); // 0x001D5CE4
}

// Namespace: System.Runtime.Serialization
public interface ISerializable // TypeDefIndex: 35
{
	// Methods
	void GetObjectData(SerializationInfo info, StreamingContext context);
}

// Namespace: System
[Serializable]
public struct UIntPtr : ISerializable // TypeDefIndex: 36
{
	// Fields
	public static readonly UIntPtr Zero; // 0x00
	private void * _pointer; // 0x08

	// Properties
	public static int Size { get; } // 0x0055A81C 

	// Constructors
	public UIntPtr(ulong value); // 0x000C7AF8
	public UIntPtr(uint value); // 0x000C7B14
	public UIntPtr(void * value); // 0x000C7B1C
	private static UIntPtr(); // 0x0055A834

	// Methods
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x000C7B24
	public override bool Equals(object obj); // 0x000C7B40
	public override int GetHashCode(); // 0x000C7B48
	public uint ToUInt32(); // 0x000C7B50
	public ulong ToUInt64(); // 0x000C7B58
	public void * ToPointer(); // 0x000C7B64
	public override string ToString(); // 0x000C7B6C
	public static bool op_Equality(UIntPtr value1, UIntPtr value2); // 0x0055AA40
	public static bool op_Inequality(UIntPtr value1, UIntPtr value2); // 0x0055AA54
	public static ulong op_Explicit(UIntPtr value); // 0x0055AA68
	public static uint op_Explicit(UIntPtr value); // 0x0055AA70
	public static UIntPtr op_Explicit(ulong value); // 0x0055AA74
	public static UIntPtr op_Explicit(void * value); // 0x0055AAA4
	public static void * op_Explicit(UIntPtr value); // 0x0055AAA8
	public static UIntPtr op_Explicit(uint value); // 0x0055AAAC
}

// Namespace: System
[Serializable]
public abstract class MulticastDelegate : Delegate // TypeDefIndex: 37
{
	// Fields
	private MulticastDelegate prev; // 0x2C
	private MulticastDelegate kpm_next; // 0x30

	// Constructors
	protected MulticastDelegate(object target, string method); // 0x001E8C14
	protected MulticastDelegate(Type target, string method); // 0x001E8C34

	// Methods
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x001E8C54
	protected sealed override object DynamicInvokeImpl(object[] args); // 0x001E8C74
	public sealed override bool Equals(object obj); // 0x001E8CA8
	public sealed override int GetHashCode(); // 0x001E8DB4
	public sealed override Delegate[] GetInvocationList(); // 0x001E8DBC
	protected sealed override Delegate CombineImpl(Delegate follow); // 0x001E918C
	private bool BaseEquals(MulticastDelegate value); // 0x001E9594
	private static MulticastDelegate KPM(MulticastDelegate needle, MulticastDelegate haystack, out MulticastDelegate tail); // 0x001E959C
	protected sealed override Delegate RemoveImpl(Delegate value); // 0x001E9708
	public static bool op_Equality(MulticastDelegate d1, MulticastDelegate d2); // 0x001E9930
	public static bool op_Inequality(MulticastDelegate d1, MulticastDelegate d2); // 0x001E994C
}

// Namespace: System
[Serializable]
public abstract class Delegate : ICloneable, ISerializable // TypeDefIndex: 38
{
	// Fields
	private IntPtr method_ptr; // 0x08
	private IntPtr invoke_impl; // 0x0C
	private object m_target; // 0x10
	private IntPtr method; // 0x14
	private IntPtr delegate_trampoline; // 0x18
	private IntPtr method_code; // 0x1C
	private MethodInfo method_info; // 0x20
	private MethodInfo original_method_info; // 0x24
	private DelegateData data; // 0x28

	// Properties
	public MethodInfo Method { get; } // 0x004C8614 
	public object Target { get; } // 0x004C86F0 

	// Constructors
	protected Delegate(object target, string method); // 0x004C8368
	protected Delegate(Type target, string method); // 0x004C84B8

	// Methods
	internal static Delegate CreateDelegate_internal(Type type, object target, MethodInfo info, bool throwOnBindFailure); // 0x004C86F8
	internal void SetMulticastInvoke(); // 0x004C86FC
	private static bool arg_type_match(Type delArgType, Type argType); // 0x004C8700
	private static bool return_type_match(Type delReturnType, Type returnType); // 0x004C8778
	public static Delegate CreateDelegate(Type type, object firstArgument, MethodInfo method, bool throwOnBindFailure); // 0x004C87F0
	public static Delegate CreateDelegate(Type type, object firstArgument, MethodInfo method); // 0x004C91D4
	public static Delegate CreateDelegate(Type type, MethodInfo method, bool throwOnBindFailure); // 0x004C91F0
	public static Delegate CreateDelegate(Type type, MethodInfo method); // 0x004C9214
	public static Delegate CreateDelegate(Type type, object target, string method); // 0x004C9238
	private static MethodInfo GetCandidateMethod(Type type, Type target, string method, BindingFlags bflags, bool ignoreCase, bool throwOnBindFailure); // 0x004C927C
	public static Delegate CreateDelegate(Type type, Type target, string method, bool ignoreCase, bool throwOnBindFailure); // 0x004C9708
	public static Delegate CreateDelegate(Type type, Type target, string method); // 0x004C9808
	public static Delegate CreateDelegate(Type type, Type target, string method, bool ignoreCase); // 0x004C982C
	public static Delegate CreateDelegate(Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure); // 0x004C984C
	public static Delegate CreateDelegate(Type type, object target, string method, bool ignoreCase); // 0x004C925C
	public object DynamicInvoke(object[] args); // 0x004C995C
	protected virtual object DynamicInvokeImpl(object[] args); // 0x004C996C
	public virtual object Clone(); // 0x004C9C88
	public override bool Equals(object obj); // 0x004C9C90
	public override int GetHashCode(); // 0x004C9DE8
	protected virtual MethodInfo GetMethodImpl(); // 0x004C9E30
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x004C9E34
	public virtual Delegate[] GetInvocationList(); // 0x004CA0DC
	public static Delegate Combine(Delegate a, Delegate b); // 0x004CA1A8
	public static Delegate Combine(Delegate[] delegates); // 0x004CA2B4
	protected virtual Delegate CombineImpl(Delegate d); // 0x004CA324
	public static Delegate Remove(Delegate source, Delegate value); // 0x004CA3F4
	protected virtual Delegate RemoveImpl(Delegate d); // 0x004CA410
	public static Delegate RemoveAll(Delegate source, Delegate value); // 0x004CA440
	public static bool op_Equality(Delegate d1, Delegate d2); // 0x004CA508
	public static bool op_Inequality(Delegate d1, Delegate d2); // 0x004CA4C4
}

// Namespace: System
[Serializable]
public abstract struct Enum : IFormattable, IConvertible, IComparable // TypeDefIndex: 39
{
	// Fields
	private static char[] split_char; // 0x00

	// Properties
	private object Value { get; } // 0x002D886C 

	// Constructors
	protected Enum(); // 0x002D871C
	private static Enum(); // 0x002D8724

	// Methods
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x002D87D4
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x002D8870
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x002D8908
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x002D89A0
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x002D8A40
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x002D8AE0
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x002D8B78
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x002D8C10
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x002D8CA8
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x002D8D40
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x002D8DD8
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x002D8E70
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x002D9048
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x002D90E0
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x002D9178
	public TypeCode GetTypeCode(); // 0x002D9210
	private object get_value(); // 0x002D9424
	public static Array GetValues(Type enumType); // 0x002D9428
	public static string[] GetNames(Type enumType); // 0x002D9600
	private static int FindPosition(object value, Array values); // 0x002D97C0
	public static string GetName(Type enumType, object value); // 0x002D9A50
	public static bool IsDefined(Type enumType, object value); // 0x002D9C9C
	private static Type get_underlying_type(Type enumType); // 0x002DA030
	public static Type GetUnderlyingType(Type enumType); // 0x002D92DC
	public static object Parse(Type enumType, string value); // 0x002DA034
	private static int FindName(Hashtable name_hash, string[] names, string name, bool ignoreCase); // 0x002DAA2C
	private static ulong GetValue(object value, TypeCode typeCode); // 0x002DACEC
	public static object Parse(Type enumType, string value, bool ignoreCase); // 0x002DA0C0
	private int compare_value_to(object other); // 0x002DB4C8
	public int CompareTo(object target); // 0x002DB4CC
	public override string ToString(); // 0x002DB604
	public string ToString(IFormatProvider provider); // 0x002D8FE4
	public string ToString(string format); // 0x002DB668
	public string ToString(string format, IFormatProvider provider); // 0x002DB788
	public static object ToObject(Type enumType, byte value); // 0x002DB0A0
	public static object ToObject(Type enumType, short value); // 0x002DB150
	public static object ToObject(Type enumType, int value); // 0x002DB2B0
	public static object ToObject(Type enumType, long value); // 0x002DB410
	public static object ToObject(Type enumType, object value); // 0x002D9C98
	public static object ToObject(Type enumType, sbyte value); // 0x002DAFF0
	public static object ToObject(Type enumType, ushort value); // 0x002DB200
	public static object ToObject(Type enumType, uint value); // 0x002DB360
	public static object ToObject(Type enumType, ulong value); // 0x002DAF38
	public override bool Equals(object obj); // 0x002DC20C
	private int get_hashcode(); // 0x002DC214
	public override int GetHashCode(); // 0x002DC218
	private static string FormatSpecifier_X(Type enumType, object value, bool upper); // 0x002DC21C
	private static string FormatFlags(Type enumType, object value); // 0x002DC71C
	public static string Format(Type enumType, object value, string format); // 0x002DB8A8
}

// Namespace: System
[Serializable]
public abstract class Array : IEnumerable, ICloneable, ICollection, IList // TypeDefIndex: 40
{
	// Properties
	private object System.Collections.IList.Item { get; set; } // 0x004EC894 0x004ECA20
	private int System.Collections.ICollection.Count { get; } // 0x004ED1AC 
	public int Length { get; } // 0x004EC9C0 
	public long LongLength { get; } // 0x004ED2F8 
	public int Rank { get; } // 0x004ECA18 
	public bool IsSynchronized { get; } // 0x004ED334 
	public object SyncRoot { get; } // 0x004ED33C 
	public bool IsFixedSize { get; } // 0x004ED340 
	public bool IsReadOnly { get; } // 0x004ED348 

	// Constructors
	private Array(); // 0x004EC88C

	// Methods
	private int System.Collections.IList.Add(object value); // 0x004ECB58
	private void System.Collections.IList.Clear(); // 0x004ECBE0
	private bool System.Collections.IList.Contains(object value); // 0x004ECDDC
	private int System.Collections.IList.IndexOf(object value); // 0x004ECEF0
	private void System.Collections.IList.Insert(int index, object value); // 0x004ED014
	private void System.Collections.IList.Remove(object value); // 0x004ED09C
	private void System.Collections.IList.RemoveAt(int index); // 0x004ED124
	internal int InternalArray__ICollection_get_Count(); // 0x004ED1B0
	internal bool InternalArray__ICollection_get_IsReadOnly(); // 0x004ED1B4
	internal IEnumerator`1<T> InternalArray__IEnumerable_GetEnumerator();
	internal void InternalArray__ICollection_Clear(); // 0x004ED1BC
	internal void InternalArray__ICollection_Add(T item);
	internal bool InternalArray__ICollection_Remove(T item);
	internal bool InternalArray__ICollection_Contains(T item);
	internal void InternalArray__ICollection_CopyTo(T[] array, int index);
	internal void InternalArray__Insert(int index, T item);
	internal void InternalArray__RemoveAt(int index); // 0x004ED258
	internal int InternalArray__IndexOf(T item);
	internal T InternalArray__get_Item(int index);
	internal void InternalArray__set_Item(int index, T item);
	internal void GetGenericValueImpl(int pos, out T value);
	internal void SetGenericValueImpl(int pos, T value);
	private int GetRank(); // 0x004ED30C
	public int GetLength(int dimension); // 0x004ED2F4
	public long GetLongLength(int dimension); // 0x004ED310
	public int GetLowerBound(int dimension); // 0x004ECC14
	public object GetValue(int[] indices); // 0x004ED324
	public void SetValue(object value, int[] indices); // 0x004ED328
	internal object GetValueImpl(int pos); // 0x004ECA1C
	internal void SetValueImpl(object value, int pos); // 0x004ECB54
	internal static bool FastCopy(Array source, int source_idx, Array dest, int dest_idx, int length); // 0x004ED32C
	internal static Array CreateInstanceImpl(Type elementType, int[] lengths, int[] bounds); // 0x004ED330
	public IEnumerator GetEnumerator(); // 0x004ED350
	public int GetUpperBound(int dimension); // 0x004ED404
	public object GetValue(int index); // 0x004ED434
	public object GetValue(int index1, int index2); // 0x004ED5A0
	public object GetValue(int index1, int index2, int index3); // 0x004ED66C
	public object GetValue(long index); // 0x004ED75C
	public object GetValue(long index1, long index2); // 0x004ED840
	public object GetValue(long index1, long index2, long index3); // 0x004ED9A0
	public void SetValue(object value, long index); // 0x004EDB7C
	public void SetValue(object value, long index1, long index2); // 0x004EDDDC
	public void SetValue(object value, long index1, long index2, long index3); // 0x004EDFAC
	public void SetValue(object value, int index); // 0x004EDC68
	public void SetValue(object value, int index1, int index2); // 0x004EE218
	public void SetValue(object value, int index1, int index2, int index3); // 0x004EE2EC
	public static Array CreateInstance(Type elementType, int length); // 0x004EE3E4
	public static Array CreateInstance(Type elementType, int length1, int length2); // 0x004EE78C
	public static Array CreateInstance(Type elementType, int length1, int length2, int length3); // 0x004EE858
	public static Array CreateInstance(Type elementType, int[] lengths); // 0x004EE48C
	public static Array CreateInstance(Type elementType, int[] lengths, int[] lowerBounds); // 0x004EE948
	private static int[] GetIntArray(long[] values); // 0x004EEEC0
	public static Array CreateInstance(Type elementType, long[] lengths); // 0x004EF044
	public object GetValue(long[] indices); // 0x004EF108
	public void SetValue(object value, long[] indices); // 0x004EF1CC
	public static int BinarySearch(Array array, object value); // 0x004EF298
	public static int BinarySearch(Array array, object value, IComparer comparer); // 0x004EF744
	public static int BinarySearch(Array array, int index, int length, object value); // 0x004EF938
	public static int BinarySearch(Array array, int index, int length, object value, IComparer comparer); // 0x004EFC70
	private static int DoBinarySearch(Array array, int index, int length, object value, IComparer comparer); // 0x004EF484
	public static void Clear(Array array, int index, int length); // 0x004ECC18
	private static void ClearInternal(Array a, int index, int count); // 0x004EFFB0
	public object Clone(); // 0x004EFFB4
	public static void Copy(Array sourceArray, Array destinationArray, int length); // 0x004EFFB8
	public static void Copy(Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length); // 0x004F00F4
	public static void Copy(Array sourceArray, long sourceIndex, Array destinationArray, long destinationIndex, long length); // 0x004F0A14
	public static void Copy(Array sourceArray, Array destinationArray, long length); // 0x004F0C98
	public static int IndexOf(Array array, object value); // 0x004F0D84
	public static int IndexOf(Array array, object value, int startIndex); // 0x004F1044
	public static int IndexOf(Array array, object value, int startIndex, int count); // 0x004F0E58
	public void Initialize(); // 0x004F111C
	public static int LastIndexOf(Array array, object value); // 0x004F1120
	public static int LastIndexOf(Array array, object value, int startIndex); // 0x004F120C
	public static int LastIndexOf(Array array, object value, int startIndex, int count); // 0x004F12EC
	private static Swapper get_swapper(Array array); // 0x004F14E0
	private static Swapper get_swapper(T[] array);
	public static void Reverse(Array array); // 0x004F1620
	public static void Reverse(Array array, int index, int length); // 0x004F16F8
	public static void Sort(Array array); // 0x004F1EF8
	public static void Sort(Array keys, Array items); // 0x004F24C0
	public static void Sort(Array array, IComparer comparer); // 0x004F25B0
	public static void Sort(Array array, int index, int length); // 0x004F269C
	public static void Sort(Array keys, Array items, IComparer comparer); // 0x004F26C8
	public static void Sort(Array keys, Array items, int index, int length); // 0x004F27B8
	public static void Sort(Array array, int index, int length, IComparer comparer); // 0x004F27D8
	public static void Sort(Array keys, Array items, int index, int length, IComparer comparer); // 0x004F1FE4
	private void int_swapper(int i, int j); // 0x004F2F90
	private void obj_swapper(int i, int j); // 0x004F30A0
	private void slow_swapper(int i, int j); // 0x004F3210
	private void double_swapper(int i, int j); // 0x004F325C
	private static int new_gap(int gap); // 0x004F3374
	private static void combsort(double[] array, int start, int size, Swapper swap_items); // 0x004F2804
	private static void combsort(int[] array, int start, int size, Swapper swap_items); // 0x004F2A04
	private static void combsort(char[] array, int start, int size, Swapper swap_items); // 0x004F2C24
	private static void qsort(Array keys, Array items, int low0, int high0, IComparer comparer); // 0x004F2E20
	private static void swap(Array keys, Array items, int i, int j); // 0x004F35A8
	private static int compare(object value1, object value2, IComparer comparer); // 0x004F33C0
	public static void Sort(T[] array);
	public static void Sort(T[] keys, T[] items);
	public static void Sort(T[] array, IComparer`1<T> comparer);
	public static void Sort(T[] keys, T[] items, IComparer`1<T> comparer);
	public static void Sort(T[] array, int index, int length);
	public static void Sort(T[] keys, T[] items, int index, int length);
	public static void Sort(T[] array, int index, int length, IComparer`1<T> comparer);
	public static void Sort(T[] keys, T[] items, int index, int length, IComparer`1<T> comparer);
	public static void Sort(T[] array, Comparison`1<T> comparison);
	internal static void Sort(T[] array, int length, Comparison`1<T> comparison);
	private static void qsort(T[] keys, T[] items, int low0, int high0, IComparer`1<T> comparer);
	private static int compare(T value1, T value2, IComparer`1<T> comparer);
	private static void qsort(T[] array, int low0, int high0, Comparison`1<T> comparison);
	private static void swap(T[] keys, T[] items, int i, int j);
	private static void swap(T[] array, int i, int j);
	public void CopyTo(Array array, int index); // 0x004F36A4
	public void CopyTo(Array array, long index); // 0x004F3948
	public static void Resize(T[] array, int newSize);
	internal static void Resize(T[] array, int length, int newSize);
	public static bool TrueForAll(T[] array, Predicate`1<T> match);
	public static void ForEach(T[] array, Action`1<T> action);
	public static T[] ConvertAll(T[] array, Converter`2<T, T> converter);
	public static int FindLastIndex(T[] array, Predicate`1<T> match);
	public static int FindLastIndex(T[] array, int startIndex, Predicate`1<T> match);
	public static int FindLastIndex(T[] array, int startIndex, int count, Predicate`1<T> match);
	public static int FindIndex(T[] array, Predicate`1<T> match);
	public static int FindIndex(T[] array, int startIndex, Predicate`1<T> match);
	public static int FindIndex(T[] array, int startIndex, int count, Predicate`1<T> match);
	public static int BinarySearch(T[] array, T value);
	public static int BinarySearch(T[] array, T value, IComparer`1<T> comparer);
	public static int BinarySearch(T[] array, int index, int length, T value);
	public static int BinarySearch(T[] array, int index, int length, T value, IComparer`1<T> comparer);
	public static int IndexOf(T[] array, T value);
	public static int IndexOf(T[] array, T value, int startIndex);
	public static int IndexOf(T[] array, T value, int startIndex, int count);
	public static int LastIndexOf(T[] array, T value);
	public static int LastIndexOf(T[] array, T value, int startIndex);
	public static int LastIndexOf(T[] array, T value, int startIndex, int count);
	public static T[] FindAll(T[] array, Predicate`1<T> match);
	public static bool Exists(T[] array, Predicate`1<T> match);
	public static ReadOnlyCollection`1<T> AsReadOnly(T[] array);
	public static T Find(T[] array, Predicate`1<T> match);
	public static T FindLast(T[] array, Predicate`1<T> match);
	public static void ConstrainedCopy(Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length); // 0x004F3A34
}

// Namespace: 
internal struct InternalEnumerator`1 : IEnumerator, IDisposable, IEnumerator`1<T> // TypeDefIndex: 41
{
	// Fields
	private const int NOT_STARTED = -2; // 0x00
	private const int FINISHED = -1; // 0x00
	private Array array; // 0x00
	private int idx; // 0x00

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	public T Current { get; }

	// Constructors
	internal InternalEnumerator`1(Array array);

	// Methods
	private void System.Collections.IEnumerator.Reset();
	public void Dispose();
	public bool MoveNext();
}

// Namespace: 
internal class SimpleEnumerator : IEnumerator, ICloneable // TypeDefIndex: 42
{
	// Fields
	private Array enumeratee; // 0x08
	private int currentpos; // 0x0C
	private int length; // 0x10

	// Properties
	public object Current { get; } // 0x004F3A54 

	// Constructors
	public SimpleEnumerator(Array arrayToEnumerate); // 0x004ED3C0

	// Methods
	public bool MoveNext(); // 0x004F3B8C
	public void Reset(); // 0x004F3BB0
	public object Clone(); // 0x004F3BBC
}

// Namespace: 
private class ArrayReadOnlyList`1 : IEnumerable, IList`1<T>, ICollection`1<T>, IEnumerable`1<T> // TypeDefIndex: 43
{
	// Fields
	private T[] array; // 0x00

	// Properties
	public T Item { get; set; }
	public int Count { get; }
	public bool IsReadOnly { get; }

	// Constructors
	public ArrayReadOnlyList`1(T[] array);

	// Methods
	private IEnumerator System.Collections.IEnumerable.GetEnumerator();
	public void Add(T item);
	public void Clear();
	public bool Contains(T item);
	public void CopyTo(T[] array, int index);
	public IEnumerator`1<T> GetEnumerator();
	public int IndexOf(T item);
	public void Insert(int index, T item);
	public bool Remove(T item);
	public void RemoveAt(int index);
	private static Exception ReadOnlyError();
}

// Namespace: 
private sealed class <GetEnumerator>c__Iterator0 : IEnumerator, IDisposable, IEnumerator`1<T> // TypeDefIndex: 44
{
	// Fields
	internal int <i>__0; // 0x00
	internal int $PC; // 0x00
	internal T $current; // 0x00
	internal ArrayReadOnlyList`1<T> <>f__this; // 0x00

	// Properties
	private T System.Collections.Generic.IEnumerator<T>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Constructors
	public <GetEnumerator>c__Iterator0();

	// Methods
	public bool MoveNext();
	public void Dispose();
	public void Reset();
}

// Namespace: 
private delegate void Swapper(int i, int j); // TypeDefIndex: 45; 0x004F1CCC

// Namespace: System.Collections
public interface ICollection : IEnumerable // TypeDefIndex: 46
{
	// Properties
	int Count { get; }
	bool IsSynchronized { get; }
	object SyncRoot { get; }

	// Methods
	void CopyTo(Array array, int index);
}

// Namespace: System.Collections
public interface IList : IEnumerable, ICollection // TypeDefIndex: 47
{
	// Properties
	bool IsFixedSize { get; }
	bool IsReadOnly { get; }
	object Item { get; set; }

	// Methods
	int Add(object value);
	void Clear();
	bool Contains(object value);
	int IndexOf(object value);
	void Insert(int index, object value);
	void Remove(object value);
	void RemoveAt(int index);
}

// Namespace: System.Collections.Generic
public interface IList`1 : IEnumerable, ICollection`1<T>, IEnumerable`1<T> // TypeDefIndex: 48
{
	// Properties
	T Item { get; set; }

	// Methods
	int IndexOf(T item);
	void Insert(int index, T item);
	void RemoveAt(int index);
}

// Namespace: System.Collections.Generic
public interface ICollection`1 : IEnumerable, IEnumerable`1<T> // TypeDefIndex: 49
{
	// Properties
	int Count { get; }
	bool IsReadOnly { get; }

	// Methods
	void Add(T item);
	void Clear();
	bool Contains(T item);
	void CopyTo(T[] array, int arrayIndex);
	bool Remove(T item);
}

// Namespace: System
[Serializable]
public struct Void // TypeDefIndex: 50
{
}

// Namespace: System
[Serializable]
public abstract class Type : MemberInfo, IReflect, _Type // TypeDefIndex: 51
{
	// Fields
	internal const BindingFlags DefaultBindingFlags = 28; // 0x00
	internal RuntimeTypeHandle _impl; // 0x08
	public static readonly char Delimiter; // 0x00
	public static readonly Type[] EmptyTypes; // 0x04
	public static readonly MemberFilter FilterAttribute; // 0x08
	public static readonly MemberFilter FilterName; // 0x0C
	public static readonly MemberFilter FilterNameIgnoreCase; // 0x10
	public static readonly object Missing; // 0x14

	// Properties
	public abstract Assembly Assembly { get; }
	public abstract string AssemblyQualifiedName { get; }
	public TypeAttributes Attributes { get; } // 0x004219E4 
	public abstract Type BaseType { get; }
	public override Type DeclaringType { get; } // 0x004219F4 
	public static Binder DefaultBinder { get; } // 0x004219FC 
	public abstract string FullName { get; }
	public abstract Guid GUID { get; }
	public bool HasElementType { get; } // 0x00421AEC 
	public bool IsAbstract { get; } // 0x00421AFC 
	public bool IsAnsiClass { get; } // 0x00421B1C 
	public bool IsArray { get; } // 0x00421B48 
	public bool IsAutoClass { get; } // 0x00421B58 
	public bool IsAutoLayout { get; } // 0x00421B84 
	public bool IsByRef { get; } // 0x00421BB0 
	public bool IsClass { get; } // 0x00421BC0 
	public bool IsCOMObject { get; } // 0x00421C3C 
	public bool IsContextful { get; } // 0x00421C4C 
	public bool IsEnum { get; } // 0x00421C5C 
	public bool IsExplicitLayout { get; } // 0x00421D04 
	public bool IsImport { get; } // 0x00421D30 
	public bool IsInterface { get; } // 0x00421C0C 
	public bool IsLayoutSequential { get; } // 0x00421D50 
	public bool IsMarshalByRef { get; } // 0x00421D7C 
	public bool IsNestedAssembly { get; } // 0x00421D8C 
	public bool IsNestedFamANDAssem { get; } // 0x00421DB8 
	public bool IsNestedFamily { get; } // 0x00421DE4 
	public bool IsNestedFamORAssem { get; } // 0x00421E10 
	public bool IsNestedPrivate { get; } // 0x00421E3C 
	public bool IsNestedPublic { get; } // 0x00421E68 
	public bool IsNotPublic { get; } // 0x00421E94 
	public bool IsPointer { get; } // 0x00421EC0 
	public bool IsPrimitive { get; } // 0x00421ED0 
	public bool IsPublic { get; } // 0x00421EE0 
	public bool IsSealed { get; } // 0x00421F08 
	public bool IsSerializable { get; } // 0x00421F28 
	public bool IsSpecialName { get; } // 0x004221A4 
	public bool IsUnicodeClass { get; } // 0x004221C4 
	public bool IsValueType { get; } // 0x00421C2C 
	public override MemberTypes MemberType { get; } // 0x004221F0 
	public abstract Module Module { get; }
	public abstract string Namespace { get; }
	public override Type ReflectedType { get; } // 0x004221F8 
	public virtual RuntimeTypeHandle TypeHandle { get; } // 0x00422200 
	public ConstructorInfo TypeInitializer { get; } // 0x00422208 
	public abstract Type UnderlyingSystemType { get; }
	internal bool IsSystemType { get; } // 0x00422144 
	public virtual bool ContainsGenericParameters { get; } // 0x004255D8 
	public virtual bool IsGenericTypeDefinition { get; } // 0x004255E0 
	public virtual bool IsGenericType { get; } // 0x00425684 
	public virtual bool IsGenericParameter { get; } // 0x00425B78 
	public bool IsNested { get; } // 0x00425B80 
	public bool IsVisible { get; } // 0x00425BA4 
	public virtual int GenericParameterPosition { get; } // 0x00425C24 
	public virtual GenericParameterAttributes GenericParameterAttributes { get; } // 0x00425CC4 
	public virtual MethodBase DeclaringMethod { get; } // 0x00425E30 
	public virtual StructLayoutAttribute StructLayoutAttribute { get; } // 0x0042613C 
	internal bool IsUserType { get; } // 0x00426484 

	// Constructors
	protected Type(); // 0x00421018
	private static Type(); // 0x00421020

	// Methods
	private void System.Runtime.InteropServices._Type.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x004211B8
	private void System.Runtime.InteropServices._Type.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x00421240
	private void System.Runtime.InteropServices._Type.GetTypeInfoCount(out uint pcTInfo); // 0x004212C8
	private void System.Runtime.InteropServices._Type.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x00421350
	private static bool FilterName_impl(MemberInfo m, object filterCriteria); // 0x004213D8
	private static bool FilterNameIgnoreCase_impl(MemberInfo m, object filterCriteria); // 0x00421564
	private static bool FilterAttribute_impl(MemberInfo m, object filterCriteria); // 0x00421764
	public override bool Equals(object o); // 0x004222CC
	public bool Equals(Type o); // 0x00422370
	internal bool EqualsInternal(Type type); // 0x004223D8
	private static Type internal_from_handle(IntPtr handle); // 0x004223DC
	private static Type internal_from_name(string name, bool throwOnError, bool ignoreCase); // 0x004223E0
	public static Type GetType(string typeName); // 0x004223E4
	public static Type GetType(string typeName, bool throwOnError); // 0x004224CC
	public static Type GetType(string typeName, bool throwOnError, bool ignoreCase); // 0x0042267C
	public static Type[] GetTypeArray(object[] args); // 0x0042280C
	internal static TypeCode GetTypeCodeInternal(Type type); // 0x0042299C
	public static TypeCode GetTypeCode(Type type); // 0x004229A0
	public static Type GetTypeFromCLSID(Guid clsid); // 0x00422AB4
	public static Type GetTypeFromCLSID(Guid clsid, bool throwOnError); // 0x00422B3C
	public static Type GetTypeFromCLSID(Guid clsid, string server); // 0x00422BC4
	public static Type GetTypeFromCLSID(Guid clsid, string server, bool throwOnError); // 0x00422C4C
	public static Type GetTypeFromHandle(RuntimeTypeHandle handle); // 0x00413148
	public static Type GetTypeFromProgID(string progID); // 0x00422CD4
	public static Type GetTypeFromProgID(string progID, bool throwOnError); // 0x00422D5C
	public static Type GetTypeFromProgID(string progID, string server); // 0x00422DE4
	public static Type GetTypeFromProgID(string progID, string server, bool throwOnError); // 0x00422E6C
	public static RuntimeTypeHandle GetTypeHandle(object o); // 0x00422EF4
	internal static bool type_is_subtype_of(Type a, Type b, bool check_interfaces); // 0x004221A0
	internal static bool type_is_assignable_from(Type a, Type b); // 0x00422FC0
	public Type GetType(); // 0x00422FC4
	public virtual bool IsSubclassOf(Type c); // 0x00422FCC
	public virtual Type[] FindInterfaces(TypeFilter filter, object filterCriteria); // 0x004230BC
	public Type GetInterface(string name); // 0x004232F0
	public abstract Type GetInterface(string name, bool ignoreCase);
	internal static void GetInterfaceMapData(Type t, Type iface, out MethodInfo[] targets, out MethodInfo[] methods); // 0x00423304
	public virtual InterfaceMapping GetInterfaceMap(Type interfaceType); // 0x00423308
	public abstract Type[] GetInterfaces();
	public virtual bool IsAssignableFrom(Type c); // 0x00423580
	public virtual bool IsInstanceOfType(object o); // 0x0042372C
	public virtual int GetArrayRank(); // 0x00423730
	public abstract Type GetElementType();
	public EventInfo GetEvent(string name); // 0x004237B8
	public abstract EventInfo GetEvent(string name, BindingFlags bindingAttr);
	public virtual EventInfo[] GetEvents(); // 0x004237CC
	public abstract EventInfo[] GetEvents(BindingFlags bindingAttr);
	public FieldInfo GetField(string name); // 0x004237E0
	public abstract FieldInfo GetField(string name, BindingFlags bindingAttr);
	public FieldInfo[] GetFields(); // 0x004237F4
	public abstract FieldInfo[] GetFields(BindingFlags bindingAttr);
	public override int GetHashCode(); // 0x00423808
	public MemberInfo[] GetMember(string name); // 0x00423858
	public virtual MemberInfo[] GetMember(string name, BindingFlags bindingAttr); // 0x00423888
	public virtual MemberInfo[] GetMember(string name, MemberTypes type, BindingFlags bindingAttr); // 0x004238B8
	public MemberInfo[] GetMembers(); // 0x00423A24
	public abstract MemberInfo[] GetMembers(BindingFlags bindingAttr);
	public MethodInfo GetMethod(string name); // 0x00423A38
	public MethodInfo GetMethod(string name, BindingFlags bindingAttr); // 0x00423B28
	public MethodInfo GetMethod(string name, Type[] types); // 0x00423C1C
	public MethodInfo GetMethod(string name, Type[] types, ParameterModifier[] modifiers); // 0x00423E1C
	public MethodInfo GetMethod(string name, BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers); // 0x00423E48
	public MethodInfo GetMethod(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x00423C4C
	protected abstract MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
	internal MethodInfo GetMethodImplInternal(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x00423E70
	internal virtual MethodInfo GetMethod(MethodInfo fromNoninstanciated); // 0x00423EAC
	internal virtual ConstructorInfo GetConstructor(ConstructorInfo fromNoninstanciated); // 0x00423F48
	internal virtual FieldInfo GetField(FieldInfo fromNoninstanciated); // 0x00423FE4
	public MethodInfo[] GetMethods(); // 0x00424080
	public abstract MethodInfo[] GetMethods(BindingFlags bindingAttr);
	public Type GetNestedType(string name); // 0x00424094
	public abstract Type GetNestedType(string name, BindingFlags bindingAttr);
	public Type[] GetNestedTypes(); // 0x004240A8
	public abstract Type[] GetNestedTypes(BindingFlags bindingAttr);
	public PropertyInfo[] GetProperties(); // 0x004240BC
	public abstract PropertyInfo[] GetProperties(BindingFlags bindingAttr);
	public PropertyInfo GetProperty(string name); // 0x004240D0
	public PropertyInfo GetProperty(string name, BindingFlags bindingAttr); // 0x004241BC
	public PropertyInfo GetProperty(string name, Type returnType); // 0x004242AC
	public PropertyInfo GetProperty(string name, Type[] types); // 0x0042439C
	public PropertyInfo GetProperty(string name, Type returnType, Type[] types); // 0x00424598
	public PropertyInfo GetProperty(string name, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x004245C0
	public PropertyInfo GetProperty(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x004243C8
	protected abstract PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers);
	internal PropertyInfo GetPropertyImplInternal(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x004245E8
	protected abstract ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
	protected abstract TypeAttributes GetAttributeFlagsImpl();
	protected abstract bool HasElementTypeImpl();
	protected abstract bool IsArrayImpl();
	protected abstract bool IsByRefImpl();
	protected abstract bool IsCOMObjectImpl();
	protected abstract bool IsPointerImpl();
	protected abstract bool IsPrimitiveImpl();
	internal static bool IsArrayImpl(Type type); // 0x00424624
	protected virtual bool IsValueTypeImpl(); // 0x00424628
	protected virtual bool IsContextfulImpl(); // 0x00424770
	protected virtual bool IsMarshalByRefImpl(); // 0x0042482C
	public ConstructorInfo GetConstructor(Type[] types); // 0x004248E8
	public ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers); // 0x00424A90
	public ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x00424914
	public ConstructorInfo[] GetConstructors(); // 0x00424AB4
	public abstract ConstructorInfo[] GetConstructors(BindingFlags bindingAttr);
	public virtual MemberInfo[] GetDefaultMembers(); // 0x00424AC8
	public virtual MemberInfo[] FindMembers(MemberTypes memberType, BindingFlags bindingAttr, MemberFilter filter, object filterCriteria); // 0x00424C40
	public object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args); // 0x004254B0
	public object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, CultureInfo culture); // 0x004254F8
	public abstract object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters);
	public override string ToString(); // 0x00425540
	public virtual Type[] GetGenericArguments(); // 0x00425550
	internal Type GetGenericTypeDefinition_impl(); // 0x004255E4
	public virtual Type GetGenericTypeDefinition(); // 0x004255E8
	private static Type MakeGenericType(Type gt, Type[] types); // 0x00425688
	public virtual Type MakeGenericType(Type[] typeArguments); // 0x0042568C
	private int GetGenericParameterPosition(); // 0x00425C20
	private GenericParameterAttributes GetGenericParameterAttributes(); // 0x00425CC0
	private Type[] GetGenericParameterConstraints_impl(); // 0x00425D78
	public virtual Type[] GetGenericParameterConstraints(); // 0x00425D7C
	private Type make_array_type(int rank); // 0x00425E38
	public virtual Type MakeArrayType(); // 0x00425E3C
	public virtual Type MakeArrayType(int rank); // 0x00425E44
	private Type make_byref_type(); // 0x00425EEC
	public virtual Type MakeByRefType(); // 0x00425EF0
	public virtual Type MakePointerType(); // 0x00425EF4
	public static Type ReflectionOnlyGetType(string typeName, bool throwIfNotFound, bool ignoreCase); // 0x00425EF8
	private void GetPacking(out int packing, out int size); // 0x00426138
	internal object[] GetPseudoCustomAttributes(); // 0x00426280
}

// Namespace: System.Reflection
[Serializable]
public abstract class MemberInfo : ICustomAttributeProvider, _MemberInfo // TypeDefIndex: 52
{
	// Properties
	public abstract Type DeclaringType { get; }
	public abstract MemberTypes MemberType { get; }
	public abstract string Name { get; }
	public abstract Type ReflectedType { get; }
	public virtual Module Module { get; } // 0x00281914 
	public virtual int MetadataToken { get; } // 0x00281958 

	// Constructors
	protected MemberInfo(); // 0x0027E9F4

	// Methods
	private void System.Runtime.InteropServices._MemberInfo.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x002816F4
	private void System.Runtime.InteropServices._MemberInfo.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x0028177C
	private void System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount(out uint pcTInfo); // 0x00281804
	private void System.Runtime.InteropServices._MemberInfo.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x0028188C
	public abstract bool IsDefined(Type attributeType, bool inherit);
	public abstract object[] GetCustomAttributes(bool inherit);
	public abstract object[] GetCustomAttributes(Type attributeType, bool inherit);
	virtual Type System.Runtime.InteropServices._MemberInfo.GetType(); // 0x0028195C
}

// Namespace: System.Reflection
public interface ICustomAttributeProvider // TypeDefIndex: 53
{
	// Methods
	object[] GetCustomAttributes(bool inherit);
	object[] GetCustomAttributes(Type attributeType, bool inherit);
	bool IsDefined(Type attributeType, bool inherit);
}

// Namespace: System.Runtime.InteropServices
public interface _MemberInfo // TypeDefIndex: 54
{
	// Properties
	Type DeclaringType { get; }
	MemberTypes MemberType { get; }
	string Name { get; }
	Type ReflectedType { get; }

	// Methods
	bool Equals(object other);
	object[] GetCustomAttributes(bool inherit);
	object[] GetCustomAttributes(Type attributeType, bool inherit);
	int GetHashCode();
	Type GetType();
	bool IsDefined(Type attributeType, bool inherit);
	string ToString();
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Reflection
public interface IReflect // TypeDefIndex: 55
{
	// Properties
	Type UnderlyingSystemType { get; }

	// Methods
	FieldInfo GetField(string name, BindingFlags bindingAttr);
	FieldInfo[] GetFields(BindingFlags bindingAttr);
	MemberInfo[] GetMember(string name, BindingFlags bindingAttr);
	MemberInfo[] GetMembers(BindingFlags bindingAttr);
	MethodInfo GetMethod(string name, BindingFlags bindingAttr);
	MethodInfo GetMethod(string name, BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers);
	MethodInfo[] GetMethods(BindingFlags bindingAttr);
	PropertyInfo[] GetProperties(BindingFlags bindingAttr);
	PropertyInfo GetProperty(string name, BindingFlags bindingAttr);
	PropertyInfo GetProperty(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers);
	object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters);
}

// Namespace: System.Runtime.InteropServices
public interface _Type // TypeDefIndex: 56
{
	// Properties
	Assembly Assembly { get; }
	string AssemblyQualifiedName { get; }
	TypeAttributes Attributes { get; }
	Type BaseType { get; }
	Type DeclaringType { get; }
	string FullName { get; }
	Guid GUID { get; }
	bool HasElementType { get; }
	bool IsAbstract { get; }
	bool IsAnsiClass { get; }
	bool IsArray { get; }
	bool IsAutoClass { get; }
	bool IsAutoLayout { get; }
	bool IsByRef { get; }
	bool IsClass { get; }
	bool IsCOMObject { get; }
	bool IsContextful { get; }
	bool IsEnum { get; }
	bool IsExplicitLayout { get; }
	bool IsImport { get; }
	bool IsInterface { get; }
	bool IsLayoutSequential { get; }
	bool IsMarshalByRef { get; }
	bool IsNestedAssembly { get; }
	bool IsNestedFamANDAssem { get; }
	bool IsNestedFamily { get; }
	bool IsNestedFamORAssem { get; }
	bool IsNestedPrivate { get; }
	bool IsNestedPublic { get; }
	bool IsNotPublic { get; }
	bool IsPointer { get; }
	bool IsPrimitive { get; }
	bool IsPublic { get; }
	bool IsSealed { get; }
	bool IsSerializable { get; }
	bool IsSpecialName { get; }
	bool IsUnicodeClass { get; }
	bool IsValueType { get; }
	MemberTypes MemberType { get; }
	Module Module { get; }
	string Name { get; }
	string Namespace { get; }
	Type ReflectedType { get; }
	RuntimeTypeHandle TypeHandle { get; }
	ConstructorInfo TypeInitializer { get; }
	Type UnderlyingSystemType { get; }

	// Methods
	bool Equals(object other);
	bool Equals(Type o);
	Type[] FindInterfaces(TypeFilter filter, object filterCriteria);
	MemberInfo[] FindMembers(MemberTypes memberType, BindingFlags bindingAttr, MemberFilter filter, object filterCriteria);
	int GetArrayRank();
	ConstructorInfo GetConstructor(Type[] types);
	ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers);
	ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
	ConstructorInfo[] GetConstructors();
	ConstructorInfo[] GetConstructors(BindingFlags bindingAttr);
	object[] GetCustomAttributes(bool inherit);
	object[] GetCustomAttributes(Type attributeType, bool inherit);
	MemberInfo[] GetDefaultMembers();
	Type GetElementType();
	EventInfo GetEvent(string name);
	EventInfo GetEvent(string name, BindingFlags bindingAttr);
	EventInfo[] GetEvents();
	EventInfo[] GetEvents(BindingFlags bindingAttr);
	FieldInfo GetField(string name);
	FieldInfo GetField(string name, BindingFlags bindingAttr);
	FieldInfo[] GetFields();
	FieldInfo[] GetFields(BindingFlags bindingAttr);
	int GetHashCode();
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
	Type GetInterface(string name);
	Type GetInterface(string name, bool ignoreCase);
	InterfaceMapping GetInterfaceMap(Type interfaceType);
	Type[] GetInterfaces();
	MemberInfo[] GetMember(string name);
	MemberInfo[] GetMember(string name, MemberTypes type, BindingFlags bindingAttr);
	MemberInfo[] GetMember(string name, BindingFlags bindingAttr);
	MemberInfo[] GetMembers();
	MemberInfo[] GetMembers(BindingFlags bindingAttr);
	MethodInfo GetMethod(string name);
	MethodInfo GetMethod(string name, BindingFlags bindingAttr);
	MethodInfo GetMethod(string name, Type[] types);
	MethodInfo GetMethod(string name, Type[] types, ParameterModifier[] modifiers);
	MethodInfo GetMethod(string name, BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers);
	MethodInfo GetMethod(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
	MethodInfo[] GetMethods();
	MethodInfo[] GetMethods(BindingFlags bindingAttr);
	Type GetNestedType(string name);
	Type GetNestedType(string name, BindingFlags bindingAttr);
	Type[] GetNestedTypes();
	Type[] GetNestedTypes(BindingFlags bindingAttr);
	PropertyInfo[] GetProperties();
	PropertyInfo[] GetProperties(BindingFlags bindingAttr);
	PropertyInfo GetProperty(string name);
	PropertyInfo GetProperty(string name, BindingFlags bindingAttr);
	PropertyInfo GetProperty(string name, Type returnType);
	PropertyInfo GetProperty(string name, Type[] types);
	PropertyInfo GetProperty(string name, Type returnType, Type[] types);
	PropertyInfo GetProperty(string name, Type returnType, Type[] types, ParameterModifier[] modifiers);
	PropertyInfo GetProperty(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers);
	Type GetType();
	object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args);
	object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, CultureInfo culture);
	object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters);
	bool IsAssignableFrom(Type c);
	bool IsDefined(Type attributeType, bool inherit);
	bool IsInstanceOfType(object o);
	bool IsSubclassOf(Type c);
	string ToString();
}

// Namespace: System
[Serializable]
public class Exception : ISerializable, _Exception // TypeDefIndex: 57
{
	// Fields
	private IntPtr[] trace_ips; // 0x08
	private Exception inner_exception; // 0x0C
	internal string message; // 0x10
	private string help_link; // 0x14
	private string class_name; // 0x18
	private string stack_trace; // 0x1C
	private string _remoteStackTraceString; // 0x20
	private int remote_stack_index; // 0x24
	internal int hresult; // 0x28
	private string source; // 0x2C
	private IDictionary _data; // 0x30

	// Properties
	public Exception InnerException { get; } // 0x002E0C78 
	public virtual string HelpLink { get; set; } // 0x002E0C80 0x002E0C88
	protected int HResult { get; set; } // 0x002E0C90 0x002E0C98
	private string ClassName { get; } // 0x002E0CB0 
	public virtual string Message { get; } // 0x002E0D0C 
	public virtual string Source { get; set; } // 0x002E0DCC 0x002E0F58
	public virtual string StackTrace { get; } // 0x002E0F60 
	public MethodBase TargetSite { get; } // 0x002E1A7C 
	public virtual IDictionary Data { get; } // 0x002E1B7C 

	// Constructors
	public Exception(); // 0x002E0864
	public Exception(string message); // 0x002D80FC
	protected Exception(SerializationInfo info, StreamingContext context); // 0x002E0878
	public Exception(string message, Exception innerException); // 0x002E0C40

	// Methods
	internal void SetMessage(string s); // 0x002E0CA0
	internal void SetStackTrace(string s); // 0x002E0CA8
	public virtual Exception GetBaseException(); // 0x002E1BFC
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x002E1C28
	public override string ToString(); // 0x002E1EC4
	internal Exception FixRemotingException(); // 0x002E215C
	internal void GetFullNameForStackTrace(StringBuilder sb, MethodBase mi); // 0x002E146C
	public Type GetType(); // 0x002E0D04
}

// Namespace: System.Runtime.InteropServices
public interface _Exception // TypeDefIndex: 58
{
	// Properties
	string HelpLink { get; set; }
	Exception InnerException { get; }
	string Message { get; }
	string Source { get; set; }
	string StackTrace { get; }
	MethodBase TargetSite { get; }

	// Methods
	bool Equals(object obj);
	Exception GetBaseException();
	int GetHashCode();
	void GetObjectData(SerializationInfo info, StreamingContext context);
	Type GetType();
	string ToString();
}

// Namespace: System
[Serializable]
public struct RuntimeFieldHandle : ISerializable // TypeDefIndex: 59
{
	// Fields
	private IntPtr value; // 0x08

	// Properties
	public IntPtr Value { get; } // 0x0008BD34 

	// Constructors
	internal RuntimeFieldHandle(IntPtr v); // 0x0008BD10
	private RuntimeFieldHandle(SerializationInfo info, StreamingContext context); // 0x0008BD18

	// Methods
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0008BD3C
	public override bool Equals(object obj); // 0x0008BD58
	public bool Equals(RuntimeFieldHandle handle); // 0x0008BD60
	public override int GetHashCode(); // 0x0008BD6C
	public static bool op_Equality(RuntimeFieldHandle left, RuntimeFieldHandle right); // 0x0020E750
	public static bool op_Inequality(RuntimeFieldHandle left, RuntimeFieldHandle right); // 0x0020E758
}

// Namespace: System
[Serializable]
public struct RuntimeTypeHandle : ISerializable // TypeDefIndex: 60
{
	// Fields
	private IntPtr value; // 0x08

	// Properties
	public IntPtr Value { get; } // 0x0008BE0C 

	// Constructors
	internal RuntimeTypeHandle(IntPtr val); // 0x0008BDE8
	private RuntimeTypeHandle(SerializationInfo info, StreamingContext context); // 0x0008BDF0

	// Methods
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0008BE14
	public override bool Equals(object obj); // 0x0008BE30
	public bool Equals(RuntimeTypeHandle handle); // 0x0008BE38
	public override int GetHashCode(); // 0x0008BE44
	public ModuleHandle GetModuleHandle(); // 0x0008BE50
	public static bool op_Equality(RuntimeTypeHandle left, object right); // 0x0020F2C8
	public static bool op_Inequality(RuntimeTypeHandle left, object right); // 0x0020F35C
	public static bool op_Equality(object left, RuntimeTypeHandle right); // 0x0020F3F0
	public static bool op_Inequality(object left, RuntimeTypeHandle right); // 0x0020F484
}

// Namespace: System
public sealed class ParamArrayAttribute : Attribute // TypeDefIndex: 61
{
	// Constructors
	public ParamArrayAttribute(); // 0x001B1A3C

}

// Namespace: System.Runtime.InteropServices
public sealed class OutAttribute : Attribute // TypeDefIndex: 62
{
	// Constructors
	public OutAttribute(); // 0x002BD43C

}

// Namespace: System
[Serializable]
public sealed class ObsoleteAttribute : Attribute // TypeDefIndex: 63
{
	// Fields
	private string _message; // 0x08
	private bool _error; // 0x0C

	// Properties
	public string Message { get; } // 0x001B0FF0 
	public bool IsError { get; } // 0x001B0FF8 

	// Constructors
	public ObsoleteAttribute(); // 0x001B0FA0
	public ObsoleteAttribute(string message); // 0x001B0FA8
	public ObsoleteAttribute(string message, bool error); // 0x001B0FC8

}

// Namespace: System.Runtime.InteropServices
public sealed class DllImportAttribute : Attribute // TypeDefIndex: 64
{
	// Fields
	public CallingConvention CallingConvention; // 0x08
	public CharSet CharSet; // 0x0C
	private string Dll; // 0x10
	public string EntryPoint; // 0x14
	public bool ExactSpelling; // 0x18
	public bool PreserveSig; // 0x19
	public bool SetLastError; // 0x1A
	public bool BestFitMapping; // 0x1B
	public bool ThrowOnUnmappableChar; // 0x1C

	// Properties
	public string Value { get; } // 0x002B63F4 

	// Constructors
	public DllImportAttribute(string dllName); // 0x002B63D4

}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class MethodImplAttribute : Attribute // TypeDefIndex: 65
{
	// Fields
	private MethodImplOptions _val; // 0x08
	public MethodCodeType MethodCodeType; // 0x0C

	// Properties
	public MethodImplOptions Value { get; } // 0x0037D43C 

	// Constructors
	public MethodImplAttribute(); // 0x0037D3F4
	public MethodImplAttribute(short value); // 0x0037D3FC
	public MethodImplAttribute(MethodImplOptions methodImplOptions); // 0x0037D41C

}

// Namespace: System.Runtime.InteropServices
public sealed class MarshalAsAttribute : Attribute // TypeDefIndex: 66
{
	// Fields
	private UnmanagedType utype; // 0x08
	public UnmanagedType ArraySubType; // 0x0C
	public string MarshalCookie; // 0x10
	public string MarshalType; // 0x14
	public Type MarshalTypeRef; // 0x18
	public VarEnum SafeArraySubType; // 0x1C
	public int SizeConst; // 0x20
	public short SizeParamIndex; // 0x24
	public Type SafeArrayUserDefinedSubType; // 0x28
	public int IidParameterIndex; // 0x2C

	// Properties
	public UnmanagedType Value { get; } // 0x002BD04C 

	// Constructors
	public MarshalAsAttribute(short unmanagedType); // 0x002BD00C
	public MarshalAsAttribute(UnmanagedType unmanagedType); // 0x002BD02C

}

// Namespace: System.Runtime.InteropServices
public sealed class InAttribute : Attribute // TypeDefIndex: 67
{
	// Constructors
	public InAttribute(); // 0x002B7178

}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class IndexerNameAttribute : Attribute // TypeDefIndex: 68
{
	// Constructors
	public IndexerNameAttribute(string indexerName); // 0x0037D3A8

}

// Namespace: System.Diagnostics
[Serializable]
public sealed class ConditionalAttribute : Attribute // TypeDefIndex: 69
{
	// Fields
	private string myCondition; // 0x08

	// Properties
	public string ConditionString { get; } // 0x004CB26C 

	// Constructors
	public ConditionalAttribute(string conditionString); // 0x004CB24C

}

// Namespace: System.Security.Permissions
[Serializable]
public abstract class SecurityAttribute : Attribute // TypeDefIndex: 70
{
	// Fields
	private SecurityAction m_Action; // 0x08
	private bool m_Unrestricted; // 0x0C

	// Properties
	public bool Unrestricted { get; set; } // 0x003AA614 0x003AA61C
	public SecurityAction Action { get; set; } // 0x003AA624 0x003AA62C

	// Constructors
	protected SecurityAttribute(SecurityAction action); // 0x003AA5F4

	// Methods
	public abstract IPermission CreatePermission();
}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class RequiredAttributeAttribute : Attribute // TypeDefIndex: 71
{
	// Properties
	public Type RequiredContract { get; } // 0x0037D454 

	// Constructors
	public RequiredAttributeAttribute(Type requiredContract); // 0x0037D44C

}

// Namespace: System.Runtime.InteropServices
public sealed class GuidAttribute : Attribute // TypeDefIndex: 72
{
	// Fields
	private string guidValue; // 0x08

	// Properties
	public string Value { get; } // 0x002B70D8 

	// Constructors
	public GuidAttribute(string guid); // 0x002B70B8

}

// Namespace: System.Reflection
public sealed class AssemblyCultureAttribute : Attribute // TypeDefIndex: 73
{
	// Fields
	private string name; // 0x08

	// Properties
	public string Culture { get; } // 0x001B5848 

	// Constructors
	public AssemblyCultureAttribute(string culture); // 0x001B5828

}

// Namespace: System.Reflection
public sealed class AssemblyVersionAttribute : Attribute // TypeDefIndex: 74
{
	// Fields
	private string name; // 0x08

	// Properties
	public string Version { get; } // 0x001B769C 

	// Constructors
	public AssemblyVersionAttribute(string version); // 0x001B767C

}

// Namespace: System.Runtime.InteropServices
public sealed class ComImportAttribute : Attribute // TypeDefIndex: 75
{
	// Constructors
	public ComImportAttribute(); // 0x0037F1C4

}

// Namespace: System.Runtime.InteropServices
public sealed class CoClassAttribute : Attribute // TypeDefIndex: 76
{
	// Fields
	private Type klass; // 0x08

	// Properties
	public Type CoClass { get; } // 0x0037F0D4 

	// Constructors
	public CoClassAttribute(Type coClass); // 0x0037F0B4

}

// Namespace: System.Runtime.InteropServices
public sealed class OptionalAttribute : Attribute // TypeDefIndex: 77
{
	// Constructors
	public OptionalAttribute(); // 0x002BD434

}

// Namespace: System.Runtime.InteropServices
public sealed class DefaultCharSetAttribute : Attribute // TypeDefIndex: 78
{
	// Fields
	private CharSet _set; // 0x08

	// Properties
	public CharSet CharSet { get; } // 0x002B627C 

	// Constructors
	public DefaultCharSetAttribute(CharSet charSet); // 0x002B625C

}

// Namespace: System.Runtime.CompilerServices
public sealed class TypeForwardedToAttribute : Attribute // TypeDefIndex: 79
{
	// Fields
	private Type destination; // 0x08

	// Properties
	public Type Destination { get; } // 0x0037E28C 

	// Constructors
	public TypeForwardedToAttribute(Type destination); // 0x0037E26C

}

// Namespace: System.Runtime.CompilerServices
public sealed class FixedBufferAttribute : Attribute // TypeDefIndex: 80
{
	// Fields
	private Type elementType; // 0x08
	private int length; // 0x0C

	// Properties
	public Type ElementType { get; } // 0x0037D370 
	public int Length { get; } // 0x0037D378 

	// Constructors
	public FixedBufferAttribute(Type elementType, int length); // 0x0037D348

}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class CompilerGeneratedAttribute : Attribute // TypeDefIndex: 81
{
	// Constructors
	public CompilerGeneratedAttribute(); // 0x0037D0AC

}

// Namespace: System.Runtime.CompilerServices
public sealed class InternalsVisibleToAttribute : Attribute // TypeDefIndex: 82
{
	// Fields
	private string assemblyName; // 0x08
	private bool all_visible; // 0x0C

	// Properties
	public string AssemblyName { get; } // 0x0037D3DC 
	public bool AllInternalsVisible { get; set; } // 0x0037D3E4 0x0037D3EC

	// Constructors
	public InternalsVisibleToAttribute(string assemblyName); // 0x0037D3B0

}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class RuntimeCompatibilityAttribute : Attribute // TypeDefIndex: 83
{
	// Fields
	private bool wrap_non_exception_throws; // 0x08

	// Properties
	public bool WrapNonExceptionThrows { get; set; } // 0x0037D4E4 0x0037D4EC

	// Constructors
	public RuntimeCompatibilityAttribute(); // 0x0037D4DC

}

// Namespace: System.Diagnostics
[Serializable]
public sealed class DebuggerHiddenAttribute : Attribute // TypeDefIndex: 84
{
	// Constructors
	public DebuggerHiddenAttribute(); // 0x002D3D28

}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class UnsafeValueTypeAttribute : Attribute // TypeDefIndex: 85
{
	// Constructors
	public UnsafeValueTypeAttribute(); // 0x0037E294

}

// Namespace: System.Reflection
[Serializable]
public sealed class DefaultMemberAttribute : Attribute // TypeDefIndex: 86
{
	// Fields
	private string member_name; // 0x08

	// Properties
	public string MemberName { get; } // 0x001BCE0C 

	// Constructors
	public DefaultMemberAttribute(string memberName); // 0x001BCDEC

}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class DecimalConstantAttribute : Attribute // TypeDefIndex: 87
{
	// Fields
	private byte scale; // 0x08
	private bool sign; // 0x09
	private int hi; // 0x0C
	private int mid; // 0x10
	private int low; // 0x14

	// Properties
	public Decimal Value { get; } // 0x00367A88 

	// Constructors
	public DecimalConstantAttribute(byte scale, byte sign, uint hi, uint mid, uint low); // 0x0037D168
	public DecimalConstantAttribute(byte scale, byte sign, int hi, int mid, int low); // 0x0037D220

}

// Namespace: System.Runtime.InteropServices
public sealed class StructLayoutAttribute : Attribute // TypeDefIndex: 88
{
	// Fields
	public CharSet CharSet; // 0x08
	public int Pack; // 0x0C
	public int Size; // 0x10
	private LayoutKind lkind; // 0x14

	// Properties
	public LayoutKind Value { get; } // 0x002BE928 

	// Constructors
	public StructLayoutAttribute(short layoutKind); // 0x002BE8C0
	public StructLayoutAttribute(LayoutKind layoutKind); // 0x002BE8F4

}

// Namespace: System.Runtime.InteropServices
public sealed class FieldOffsetAttribute : Attribute // TypeDefIndex: 89
{
	// Fields
	private int val; // 0x08

	// Properties
	public int Value { get; } // 0x002B6AE4 

	// Constructors
	public FieldOffsetAttribute(int offset); // 0x002B6AC4

}

// Namespace: System
public struct RuntimeArgumentHandle // TypeDefIndex: 90
{
	// Fields
	internal IntPtr args; // 0x08

}

// Namespace: System
[Serializable]
public delegate void AsyncCallback(IAsyncResult ar); // TypeDefIndex: 91; 0x004F41F0

// Namespace: System
public interface IAsyncResult // TypeDefIndex: 92
{
	// Properties
	object AsyncState { get; }
	WaitHandle AsyncWaitHandle { get; }
	bool CompletedSynchronously { get; }
	bool IsCompleted { get; }

}

// Namespace: System
public struct TypedReference // TypeDefIndex: 93
{
	// Fields
	private RuntimeTypeHandle type; // 0x08
	private IntPtr value; // 0x0C
	private IntPtr klass; // 0x10

	// Methods
	public override bool Equals(object o); // 0x000A7C10
	public override int GetHashCode(); // 0x000A7C20
	public static Type GetTargetType(TypedReference value); // 0x00427004
	public static TypedReference MakeTypedReference(object target, FieldInfo[] flds); // 0x00427084
	public static void SetTypedReference(TypedReference target, object value); // 0x00427210
	public static RuntimeTypeHandle TargetTypeToken(TypedReference value); // 0x004272E8
	public static object ToObject(TypedReference value); // 0x004272EC
}

// Namespace: System
public struct ArgIterator // TypeDefIndex: 94
{
	// Fields
	private IntPtr sig; // 0x08
	private IntPtr args; // 0x0C
	private int next_arg; // 0x10
	private int num_args; // 0x14

	// Constructors
	public ArgIterator(RuntimeArgumentHandle arglist); // 0x0008C738
	public ArgIterator(RuntimeArgumentHandle arglist, void * ptr); // 0x0008C740

	// Methods
	private void Setup(IntPtr argsp, IntPtr start); // 0x0008C748
	public void End(); // 0x0008C750
	public override bool Equals(object o); // 0x0008C75C
	public override int GetHashCode(); // 0x0008C76C
	public TypedReference GetNextArg(); // 0x0008C778
	private TypedReference IntGetNextArg(); // 0x0008C78C
	public TypedReference GetNextArg(RuntimeTypeHandle rth); // 0x0008C7A0
	private TypedReference IntGetNextArg(IntPtr rth); // 0x0008C7B4
	public RuntimeTypeHandle GetNextArgType(); // 0x0008C7C8
	private IntPtr IntGetNextArgType(); // 0x0008C7D0
	public int GetRemainingCount(); // 0x0008C7D8
}

// Namespace: System
[Serializable]
public abstract class MarshalByRefObject // TypeDefIndex: 95
{
	// Fields
	[NonSerialized]	private ServerIdentity _identity; // 0x08

	// Properties
	internal ServerIdentity ObjectIdentity { get; set; } // 0x001DE6EC 0x001DE6F4

	// Constructors
	protected MarshalByRefObject(); // 0x001DE5DC

	// Methods
	internal Identity GetObjectIdentity(MarshalByRefObject obj, out bool IsClient); // 0x001DE5E4
	public virtual ObjRef CreateObjRef(Type requestedType); // 0x001DE6FC
	public object GetLifetimeService(); // 0x001DE7D0
	public virtual object InitializeLifetimeService(); // 0x001DE7E4
	protected MarshalByRefObject MemberwiseClone(bool cloneIdentity); // 0x001DE868
}

// Namespace: System
[Serializable]
public struct Nullable`1 // TypeDefIndex: 96
{
	// Fields
	internal T value; // 0x00
	internal bool has_value; // 0x00

	// Properties
	public bool HasValue { get; }
	public T Value { get; }

	// Constructors
	public Nullable`1(T value);

	// Methods
	public override bool Equals(object other);
	private bool Equals(Nullable`1<T> other);
	public override int GetHashCode();
	public T GetValueOrDefault();
	public T GetValueOrDefault(T defaultValue);
	public override string ToString();
	private static object Box(Nullable`1<T> o);
	private static Nullable`1<T> Unbox(object o);
	public static Nullable`1<T> op_Implicit(T value);
	public static T op_Explicit(Nullable`1<T> value);
}

// Namespace: System.Runtime.CompilerServices
public static class RuntimeHelpers // TypeDefIndex: 97
{
	// Properties
	public static int OffsetToStringData { get; } // 0x0037D5B8 

	// Methods
	private static void InitializeArray(Array array, IntPtr fldHandle); // 0x0037D4F4
	public static void InitializeArray(Array array, RuntimeFieldHandle fldHandle); // 0x0037D4F8
	public static int GetHashCode(object o); // 0x0037D5BC
	public static bool Equals(object o1, object o2); // 0x0037D5C4
	public static object GetObjectValue(object obj); // 0x0037D690
	private static void RunClassConstructor(IntPtr type); // 0x0037D694
	public static void RunClassConstructor(RuntimeTypeHandle type); // 0x0037D698
	public static void ExecuteCodeWithGuaranteedCleanup(TryCode code, CleanupCode backoutCode, object userData); // 0x0037D76C
	public static void PrepareConstrainedRegions(); // 0x0037D770
	public static void PrepareConstrainedRegionsNoOP(); // 0x0037D774
	public static void ProbeForSufficientStack(); // 0x0037D778
	public static void PrepareDelegate(Delegate d); // 0x0037D77C
	public static void PrepareMethod(RuntimeMethodHandle method); // 0x0037D824
	public static void PrepareMethod(RuntimeMethodHandle method, RuntimeTypeHandle[] instantiation); // 0x0037D828
	public static void RunModuleConstructor(ModuleHandle module); // 0x0037D82C
	public static void RunModuleConstructor(IntPtr module); // 0x0037D940
}

// Namespace: 
public delegate void TryCode(object userData); // TypeDefIndex: 98; 0x0037DDC4

// Namespace: 
public delegate void CleanupCode(object userData, bool exceptionThrown); // TypeDefIndex: 99; 0x0037D958

// Namespace: 
internal static class Consts // TypeDefIndex: 100
{
	// Fields
	public const string MonoVersion = "2.6.5.0"; // 0x00
	public const string MonoCompany = "MONO development team"; // 0x00
	public const string MonoProduct = "MONO Common language infrastructure"; // 0x00
	public const string MonoCopyright = "(c) various MONO Authors"; // 0x00
	public const string FxVersion = "2.0.0.0"; // 0x00
	public const string VsVersion = "8.0.0.0"; // 0x00
	public const string FxFileVersion = "2.0.50727.1433"; // 0x00
	public const string VsFileVersion = "8.0.50727.1433"; // 0x00
	public const string AssemblyI18N = "I18N, Version=2.0.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756"; // 0x00
	public const string AssemblyMicrosoft_VisualStudio = "Microsoft.VisualStudio, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	public const string AssemblyMicrosoft_VisualStudio_Web = "Microsoft.VisualStudio.Web, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	public const string AssemblyMicrosoft_VSDesigner = "Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	public const string AssemblyMono_Http = "Mono.Http, Version=2.0.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756"; // 0x00
	public const string AssemblyMono_Posix = "Mono.Posix, Version=2.0.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756"; // 0x00
	public const string AssemblyMono_Security = "Mono.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756"; // 0x00
	public const string AssemblyMono_Messaging_RabbitMQ = "Mono.Messaging.RabbitMQ, Version=2.0.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756"; // 0x00
	public const string AssemblyCorlib = "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"; // 0x00
	public const string AssemblySystem = "System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"; // 0x00
	public const string AssemblySystem_Data = "System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"; // 0x00
	public const string AssemblySystem_Design = "System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	public const string AssemblySystem_DirectoryServices = "System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	public const string AssemblySystem_Drawing = "System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	public const string AssemblySystem_Drawing_Design = "System.Drawing.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	public const string AssemblySystem_Messaging = "System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	public const string AssemblySystem_Security = "System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	public const string AssemblySystem_ServiceProcess = "System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	public const string AssemblySystem_Web = "System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	public const string AssemblySystem_Windows_Forms = "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"; // 0x00
	public const string AssemblySystem_Core = "System.Core, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"; // 0x00

}

// Namespace: 
internal sealed class Locale // TypeDefIndex: 101
{
	// Constructors
	private Locale(); // 0x003EC438

	// Methods
	public static string GetText(string msg); // 0x003EC440
	public static string GetText(string fmt, object[] args); // 0x003EC444
}

// Namespace: System
internal class MonoTODOAttribute : Attribute // TypeDefIndex: 102
{
	// Fields
	private string comment; // 0x08

	// Properties
	public string Comment { get; } // 0x001E5774 

	// Constructors
	public MonoTODOAttribute(); // 0x001E576C
	public MonoTODOAttribute(string comment); // 0x001E4688

}

// Namespace: System
internal class MonoDocumentationNoteAttribute : MonoTODOAttribute // TypeDefIndex: 103
{
	// Constructors
	public MonoDocumentationNoteAttribute(string comment); // 0x001E4668

}

// Namespace: System
internal class MonoExtensionAttribute : MonoTODOAttribute // TypeDefIndex: 104
{
	// Constructors
	public MonoExtensionAttribute(string comment); // 0x001E56E4

}

// Namespace: System
internal class MonoInternalNoteAttribute : MonoTODOAttribute // TypeDefIndex: 105
{
	// Constructors
	public MonoInternalNoteAttribute(string comment); // 0x001E5704

}

// Namespace: System
internal class MonoLimitationAttribute : MonoTODOAttribute // TypeDefIndex: 106
{
	// Constructors
	public MonoLimitationAttribute(string comment); // 0x001E5724

}

// Namespace: System
internal class MonoNotSupportedAttribute : MonoTODOAttribute // TypeDefIndex: 107
{
	// Constructors
	public MonoNotSupportedAttribute(string comment); // 0x001E574C

}

// Namespace: Microsoft.Win32.SafeHandles
public abstract class CriticalHandleMinusOneIsInvalid : CriticalHandle, IDisposable // TypeDefIndex: 108
{
	// Properties
	public override bool IsInvalid { get; } // 0x003F4F94 

	// Constructors
	protected CriticalHandleMinusOneIsInvalid(); // 0x003F4F68

}

// Namespace: Microsoft.Win32.SafeHandles
public abstract class CriticalHandleZeroOrMinusOneIsInvalid : CriticalHandle, IDisposable // TypeDefIndex: 109
{
	// Properties
	public override bool IsInvalid { get; } // 0x003F4FEC 

	// Constructors
	protected CriticalHandleZeroOrMinusOneIsInvalid(); // 0x003F4FC0

}

// Namespace: Microsoft.Win32.SafeHandles
public sealed class SafeFileHandle : SafeHandleZeroOrMinusOneIsInvalid // TypeDefIndex: 110
{
	// Constructors
	public SafeFileHandle(IntPtr preexistingHandle, bool ownsHandle); // 0x003F5074
	internal SafeFileHandle(); // 0x003F50E4

	// Methods
	protected override bool ReleaseHandle(); // 0x003F5114
}

// Namespace: Microsoft.Win32.SafeHandles
public abstract class SafeHandleMinusOneIsInvalid : SafeHandle, IDisposable // TypeDefIndex: 111
{
	// Properties
	public override bool IsInvalid { get; } // 0x003F51F4 

	// Constructors
	protected SafeHandleMinusOneIsInvalid(bool ownsHandle); // 0x003F51C0

}

// Namespace: Microsoft.Win32.SafeHandles
public abstract class SafeHandleZeroOrMinusOneIsInvalid : SafeHandle, IDisposable // TypeDefIndex: 112
{
	// Properties
	public override bool IsInvalid { get; } // 0x003F5220 

	// Constructors
	protected SafeHandleZeroOrMinusOneIsInvalid(bool ownsHandle); // 0x003F50B0

}

// Namespace: Microsoft.Win32.SafeHandles
public sealed class SafeWaitHandle : SafeHandleZeroOrMinusOneIsInvalid // TypeDefIndex: 113
{
	// Constructors
	public SafeWaitHandle(IntPtr existingHandle, bool ownsHandle); // 0x003F527C

	// Methods
	protected override bool ReleaseHandle(); // 0x003F52B8
}

// Namespace: Microsoft.Win32
internal interface IRegistryApi // TypeDefIndex: 114
{
	// Methods
	RegistryKey CreateSubKey(RegistryKey rkey, string keyname);
	RegistryKey OpenRemoteBaseKey(RegistryHive hKey, string machineName);
	RegistryKey OpenSubKey(RegistryKey rkey, string keyname, bool writtable);
	void Flush(RegistryKey rkey);
	void Close(RegistryKey rkey);
	object GetValue(RegistryKey rkey, string name, object default_value, RegistryValueOptions options);
	void SetValue(RegistryKey rkey, string name, object value);
	int SubKeyCount(RegistryKey rkey);
	int ValueCount(RegistryKey rkey);
	void DeleteValue(RegistryKey rkey, string value, bool throw_if_missing);
	void DeleteKey(RegistryKey rkey, string keyName, bool throw_if_missing);
	string[] GetSubKeyNames(RegistryKey rkey);
	string[] GetValueNames(RegistryKey rkey);
	string ToString(RegistryKey rkey);
	void SetValue(RegistryKey rkey, string name, object value, RegistryValueKind valueKind);
}

// Namespace: Microsoft.Win32
public static class Registry // TypeDefIndex: 115
{
	// Fields
	public static readonly RegistryKey ClassesRoot; // 0x00
	public static readonly RegistryKey CurrentConfig; // 0x04
	public static readonly RegistryKey CurrentUser; // 0x08
	public static readonly RegistryKey DynData; // 0x0C
	public static readonly RegistryKey LocalMachine; // 0x10
	public static readonly RegistryKey PerformanceData; // 0x14
	public static readonly RegistryKey Users; // 0x18
	private static Dictionary`2<string, int> <>f__switch$map0; // 0x1C

	// Constructors
	private static Registry(); // 0x003F1B48

	// Methods
	private static RegistryKey ToKey(string keyName, bool setting); // 0x003F1DB8
	public static void SetValue(string keyName, string valueName, object value); // 0x003F2900
	public static void SetValue(string keyName, string valueName, object value, RegistryValueKind valueKind); // 0x003F2C7C
	public static object GetValue(string keyName, string valueName, object defaultValue); // 0x003F3014
}

// Namespace: Microsoft.Win32
[Serializable]
public enum RegistryHive // TypeDefIndex: 116
{
	ClassesRoot = -2147483648,
	CurrentUser = -2147483647,
	LocalMachine = -2147483646,
	Users = -2147483645,
	PerformanceData = -2147483644,
	CurrentConfig = -2147483643,
	DynData = -2147483642
}

// Namespace: Microsoft.Win32
public sealed class RegistryKey : MarshalByRefObject, IDisposable // TypeDefIndex: 117
{
	// Fields
	private object handle; // 0x0C
	private object hive; // 0x10
	private readonly string qname; // 0x14
	private readonly bool isRemoteRoot; // 0x18
	private readonly bool isWritable; // 0x19
	private static readonly IRegistryApi RegistryApi; // 0x00

	// Properties
	public string Name { get; } // 0x003F379C 
	public int SubKeyCount { get; } // 0x003F38C0 
	public int ValueCount { get; } // 0x003F3A90 
	internal bool IsRoot { get; } // 0x003EEBE4 
	private bool IsWritable { get; } // 0x003F4E3C 
	internal RegistryHive Hive { get; } // 0x003EEBF4 
	internal object Handle { get; } // 0x003F4E44 

	// Constructors
	internal RegistryKey(RegistryHive hiveId); // 0x003F1D74
	internal RegistryKey(RegistryHive hiveId, IntPtr keyHandle, bool remoteRoot); // 0x003F3204
	internal RegistryKey(object data, string keyName, bool writable); // 0x003EE224
	private static RegistryKey(); // 0x003F3440

	// Methods
	private void System.IDisposable.Dispose(); // 0x003F35D4
	protected override void Finalize(); // 0x003F3738
	public void Flush(); // 0x003F37A4
	public void Close(); // 0x003F35F4
	public void SetValue(string name, object value); // 0x003F2A80
	public void SetValue(string name, object value, RegistryValueKind valueKind); // 0x003F2E0C
	public RegistryKey OpenSubKey(string name); // 0x003F3C70
	public RegistryKey OpenSubKey(string name, bool writable); // 0x003F25B8
	public object GetValue(string name); // 0x003F3C78
	public object GetValue(string name, object defaultValue); // 0x003F30BC
	public object GetValue(string name, object defaultValue, RegistryValueOptions options); // 0x003F3C80
	public RegistryValueKind GetValueKind(string name); // 0x003F3DC8
	public RegistryKey CreateSubKey(string subkey); // 0x003F2760
	public RegistryKey CreateSubKey(string subkey, RegistryKeyPermissionCheck permissionCheck); // 0x003F3EF8
	public RegistryKey CreateSubKey(string subkey, RegistryKeyPermissionCheck permissionCheck, RegistrySecurity registrySecurity); // 0x003F3F80
	public void DeleteSubKey(string subkey); // 0x003F4008
	public void DeleteSubKey(string subkey, bool throwOnMissingSubKey); // 0x003F4010
	public void DeleteSubKeyTree(string subkey); // 0x003F4288
	public void DeleteValue(string name); // 0x003F44AC
	public void DeleteValue(string name, bool throwOnMissingValue); // 0x003F44B4
	public RegistrySecurity GetAccessControl(); // 0x003F46A4
	public RegistrySecurity GetAccessControl(AccessControlSections includeSections); // 0x003F472C
	public string[] GetSubKeyNames(); // 0x003F47B4
	public string[] GetValueNames(); // 0x003F48D8
	public static RegistryKey OpenRemoteBaseKey(RegistryHive hKey, string machineName); // 0x003F49FC
	public RegistryKey OpenSubKey(string name, RegistryKeyPermissionCheck permissionCheck); // 0x003F4B80
	public RegistryKey OpenSubKey(string name, RegistryKeyPermissionCheck permissionCheck, RegistryRights rights); // 0x003F4C08
	public void SetAccessControl(RegistrySecurity registrySecurity); // 0x003F4C90
	public override string ToString(); // 0x003F4D18
	private void AssertKeyStillValid(); // 0x003F39E4
	private void AssertKeyNameNotNull(string subKeyName); // 0x003F3E50
	private void AssertKeyNameLength(string name); // 0x003F3BB4
	private void DeleteChildKeysAndValues(); // 0x003F4384
	internal static string DecodeString(byte[] data); // 0x003F4E4C
	internal static IOException CreateMarkedForDeletionException(); // 0x003F1AAC
	private static string GetHiveName(RegistryHive hive); // 0x003F32F4
}

// Namespace: Microsoft.Win32
public enum RegistryKeyPermissionCheck // TypeDefIndex: 118
{
	Default = 0,
	ReadSubTree = 1,
	ReadWriteSubTree = 2
}

// Namespace: Microsoft.Win32
public enum RegistryValueKind // TypeDefIndex: 119
{
	Unknown = 0,
	String = 1,
	ExpandString = 2,
	Binary = 3,
	DWord = 4,
	MultiString = 7,
	QWord = 11
}

// Namespace: Microsoft.Win32
public enum RegistryValueOptions // TypeDefIndex: 120
{
	None = 0,
	DoNotExpandEnvironmentNames = 1
}

// Namespace: Microsoft.Win32
internal class ExpandString // TypeDefIndex: 121
{
	// Fields
	private string value; // 0x08

	// Constructors
	public ExpandString(string s); // 0x003EC4D0

	// Methods
	public override string ToString(); // 0x003EC4F0
	public string Expand(); // 0x003EC4F8
}

// Namespace: Microsoft.Win32
internal class KeyHandler // TypeDefIndex: 122
{
	// Fields
	private static Hashtable key_to_handler; // 0x00
	private static Hashtable dir_to_handler; // 0x04
	public string Dir; // 0x08
	private Hashtable values; // 0x0C
	private string file; // 0x10
	private bool dirty; // 0x14
	private static Dictionary`2<string, int> <>f__switch$map1; // 0x08

	// Properties
	public int ValueCount { get; } // 0x003F18FC 
	public bool IsMarkedForDeletion { get; } // 0x003EFF24 
	private static string UserStore { get; } // 0x003EECC4 
	private static string MachineStore { get; } // 0x003EED64 

	// Constructors
	private KeyHandler(RegistryKey rkey, string basedir); // 0x003EC72C
	private static KeyHandler(); // 0x003ED1BC

	// Methods
	public void Load(); // 0x003EC8DC
	private void LoadKey(SecurityElement se); // 0x003ED2A4
	public RegistryKey Ensure(RegistryKey rkey, string extra, bool writable); // 0x003EDDCC
	public RegistryKey Probe(RegistryKey rkey, string extra, bool writable); // 0x003EE254
	private static string CombineName(RegistryKey rkey, string extra); // 0x003EE124
	public static KeyHandler Lookup(RegistryKey rkey, bool createNonExisting); // 0x003EE678
	public static void Drop(RegistryKey rkey); // 0x003EEEAC
	public static void Drop(string dir); // 0x003EF4A8
	public object GetValue(string name, RegistryValueOptions options); // 0x003EFDAC
	public void SetValue(string name, object value); // 0x003EFFE4
	public string[] GetValueNames(); // 0x003F0384
	public void SetValue(string name, object value, RegistryValueKind valueKind); // 0x003F053C
	private void SetDirty(); // 0x003F01F8
	public void DirtyTimeout(object state); // 0x003F09AC
	public void Flush(); // 0x003F09B0
	public bool ValueExists(string name); // 0x003F1834
	public void RemoveValue(string name); // 0x003F19FC
	protected override void Finalize(); // 0x003F1A48
	private void Save(); // 0x003F0ABC
	private void AssertNotMarkedForDeletion(); // 0x003F016C
}

// Namespace: Microsoft.Win32
internal class UnixRegistryApi : IRegistryApi // TypeDefIndex: 123
{
	// Constructors
	public UnixRegistryApi(); // 0x003F35CC

	// Methods
	private static string ToUnix(string keyname); // 0x003F52D4
	private static bool IsWellKnownKey(string parentKeyName, string keyname); // 0x003F5350
	public RegistryKey CreateSubKey(RegistryKey rkey, string keyname); // 0x003F557C
	public RegistryKey OpenRemoteBaseKey(RegistryHive hKey, string machineName); // 0x003F5688
	public RegistryKey OpenSubKey(RegistryKey rkey, string keyname, bool writable); // 0x003F5710
	public void Flush(RegistryKey rkey); // 0x003F5810
	public void Close(RegistryKey rkey); // 0x003F58A0
	public object GetValue(RegistryKey rkey, string name, object default_value, RegistryValueOptions options); // 0x003F5920
	public void SetValue(RegistryKey rkey, string name, object value); // 0x003F59E8
	public void SetValue(RegistryKey rkey, string name, object value, RegistryValueKind valueKind); // 0x003F5ABC
	public int SubKeyCount(RegistryKey rkey); // 0x003F5B9C
	public int ValueCount(RegistryKey rkey); // 0x003F5C80
	public void DeleteValue(RegistryKey rkey, string name, bool throw_if_missing); // 0x003F5D44
	public void DeleteKey(RegistryKey rkey, string keyname, bool throw_if_missing); // 0x003F5E5C
	public string[] GetSubKeyNames(RegistryKey rkey); // 0x003F6044
	public string[] GetValueNames(RegistryKey rkey); // 0x003F620C
	public string ToString(RegistryKey rkey); // 0x003F62D0
	private RegistryKey CreateSubKey(RegistryKey rkey, string keyname, bool writable); // 0x003F5598
}

// Namespace: Microsoft.Win32
internal class Win32RegistryApi : IRegistryApi // TypeDefIndex: 124
{
	// Fields
	private const int OpenRegKeyRead = 131097; // 0x00
	private const int OpenRegKeyWrite = 131078; // 0x00
	private const int Int32ByteSize = 4; // 0x00
	private const int BufferMaxLength = 1024; // 0x00
	private readonly int NativeBytesPerCharacter; // 0x08

	// Constructors
	public Win32RegistryApi(); // 0x003F352C

	// Methods
	private static extern int RegCreateKey(IntPtr keyBase, string keyName, out IntPtr keyHandle); // 0x003F62F8
	private static extern int RegCloseKey(IntPtr keyHandle); // 0x003F6410
	private static extern int RegConnectRegistry(string machineName, IntPtr hKey, out IntPtr keyHandle); // 0x003F6510
	private static extern int RegFlushKey(IntPtr keyHandle); // 0x003F6638
	private static extern int RegOpenKeyEx(IntPtr keyBase, string keyName, IntPtr reserved, int access, out IntPtr keyHandle); // 0x003F6738
	private static extern int RegDeleteKey(IntPtr keyHandle, string valueName); // 0x003F6860
	private static extern int RegDeleteValue(IntPtr keyHandle, string valueName); // 0x003F6970
	private static extern int RegEnumKey(IntPtr keyBase, int index, StringBuilder nameBuffer, int bufferLength); // 0x003F6A88
	private static extern int RegEnumValue(IntPtr keyBase, int index, StringBuilder nameBuffer, int nameLength, IntPtr reserved, RegistryValueKind type, IntPtr data, IntPtr dataLength); // 0x003F6BC8
	private static extern int RegSetValueEx(IntPtr keyBase, string valueName, IntPtr reserved, RegistryValueKind type, string data, int rawDataLength); // 0x003F6D30
	private static extern int RegSetValueEx(IntPtr keyBase, string valueName, IntPtr reserved, RegistryValueKind type, byte[] rawData, int rawDataLength); // 0x003F6E38
	private static extern int RegSetValueEx(IntPtr keyBase, string valueName, IntPtr reserved, RegistryValueKind type, int data, int rawDataLength); // 0x003F6F40
	private static extern int RegQueryValueEx(IntPtr keyBase, string valueName, IntPtr reserved, RegistryValueKind type, IntPtr zero, int dataSize); // 0x003F7040
	private static extern int RegQueryValueEx(IntPtr keyBase, string valueName, IntPtr reserved, RegistryValueKind type, out byte[] data, int dataSize); // 0x003F7140
	private static extern int RegQueryValueEx(IntPtr keyBase, string valueName, IntPtr reserved, RegistryValueKind type, int data, int dataSize); // 0x003F72D8
	private static IntPtr GetHandle(RegistryKey key); // 0x003F73D4
	private static bool IsHandleValid(RegistryKey key); // 0x003F7484
	public object GetValue(RegistryKey rkey, string name, object defaultValue, RegistryValueOptions options); // 0x003F74B0
	public void SetValue(RegistryKey rkey, string name, object value, RegistryValueKind valueKind); // 0x003F7A50
	public void SetValue(RegistryKey rkey, string name, object value); // 0x003F8070
	private int GetBinaryValue(RegistryKey rkey, string name, RegistryValueKind type, out byte[] data, int size); // 0x003F79A8
	public int SubKeyCount(RegistryKey rkey); // 0x003F8618
	public int ValueCount(RegistryKey rkey); // 0x003F8738
	public RegistryKey OpenRemoteBaseKey(RegistryHive hKey, string machineName); // 0x003F8894
	public RegistryKey OpenSubKey(RegistryKey rkey, string keyName, bool writable); // 0x003F895C
	public void Flush(RegistryKey rkey); // 0x003F8B24
	public void Close(RegistryKey rkey); // 0x003F8B5C
	public RegistryKey CreateSubKey(RegistryKey rkey, string keyName); // 0x003F8B94
	public void DeleteKey(RegistryKey rkey, string keyName, bool shouldThrowWhenKeyMissing); // 0x003F8CC4
	public void DeleteValue(RegistryKey rkey, string value, bool shouldThrowWhenKeyMissing); // 0x003F8DE0
	public string[] GetSubKeyNames(RegistryKey rkey); // 0x003F8F04
	public string[] GetValueNames(RegistryKey rkey); // 0x003F912C
	private void GenerateException(int errorCode); // 0x003F7850
	public string ToString(RegistryKey rkey); // 0x003F93B0
	internal static string CombineName(RegistryKey rkey, string localName); // 0x003F8A74
}

// Namespace: Microsoft.Win32
internal class Win32ResultCode // TypeDefIndex: 125
{
	// Fields
	public const int Success = 0; // 0x00
	public const int FileNotFound = 2; // 0x00
	public const int AccessDenied = 5; // 0x00
	public const int InvalidParameter = 87; // 0x00
	public const int MoreData = 234; // 0x00
	public const int NetworkPathNotFound = 53; // 0x00
	public const int NoMoreEntries = 259; // 0x00
	public const int MarkedForDeletion = 1018; // 0x00

	// Constructors
	public Win32ResultCode(); // 0x003F93D4

}

// Namespace: Mono.Globalization.Unicode
internal class CodePointIndexer // TypeDefIndex: 126
{
	// Fields
	private readonly TableRange[] ranges; // 0x08
	public readonly int TotalCount; // 0x0C
	private int defaultIndex; // 0x10
	private int defaultCP; // 0x14

	// Constructors
	public CodePointIndexer(int[] starts, int[] ends, int defaultIndex, int defaultCP); // 0x003FEBFC

	// Methods
	public static Array CompressArray(Array source, Type type, CodePointIndexer indexer); // 0x003FEF04
	public int ToIndex(int cp); // 0x003FF0B8
	public int ToCodePoint(int i); // 0x003FF200
}

// Namespace: 
[Serializable]
internal struct TableRange // TypeDefIndex: 127
{
	// Fields
	public readonly int Start; // 0x08
	public readonly int End; // 0x0C
	public readonly int Count; // 0x10
	public readonly int IndexStart; // 0x14
	public readonly int IndexEnd; // 0x18

	// Constructors
	public TableRange(int start, int end, int indexStart); // 0x000A7708

}

// Namespace: Mono.Globalization.Unicode
internal class TailoringInfo // TypeDefIndex: 128
{
	// Fields
	public readonly int LCID; // 0x08
	public readonly int TailoringIndex; // 0x0C
	public readonly int TailoringCount; // 0x10
	public readonly bool FrenchSort; // 0x14

	// Constructors
	public TailoringInfo(int lcid, int tailoringIndex, int tailoringCount, bool frenchSort); // 0x0044B8D4

}

// Namespace: Mono.Globalization.Unicode
internal class Contraction // TypeDefIndex: 129
{
	// Fields
	public readonly char[] Source; // 0x08
	public readonly string Replacement; // 0x0C
	public readonly byte[] SortKey; // 0x10

	// Constructors
	public Contraction(char[] source, string replacement, byte[] sortkey); // 0x003FF348

}

// Namespace: Mono.Globalization.Unicode
internal class ContractionComparer : IComparer // TypeDefIndex: 130
{
	// Fields
	public static readonly ContractionComparer Instance; // 0x00

	// Constructors
	public ContractionComparer(); // 0x003FF378
	private static ContractionComparer(); // 0x003FF380

	// Methods
	public int Compare(object o1, object o2); // 0x003FF3F4
}

// Namespace: Mono.Globalization.Unicode
internal class Level2Map // TypeDefIndex: 131
{
	// Fields
	public byte Source; // 0x08
	public byte Replace; // 0x09

	// Constructors
	public Level2Map(byte source, byte replace); // 0x003FF604

}

// Namespace: Mono.Globalization.Unicode
internal class Level2MapComparer : IComparer // TypeDefIndex: 132
{
	// Fields
	public static readonly Level2MapComparer Instance; // 0x00

	// Constructors
	public Level2MapComparer(); // 0x003FF62C
	private static Level2MapComparer(); // 0x003FF634

	// Methods
	public int Compare(object o1, object o2); // 0x003FF6A8
}

// Namespace: Mono.Globalization.Unicode
internal class MSCompatUnicodeTable // TypeDefIndex: 133
{
	// Fields
	private const int ResourceVersionSize = 1; // 0x00
	public static int MaxExpansionLength; // 0x00
	private static readonly void * ignorableFlags; // 0x04
	private static readonly void * categories; // 0x08
	private static readonly void * level1; // 0x0C
	private static readonly void * level2; // 0x10
	private static readonly void * level3; // 0x14
	private static void * cjkCHScategory; // 0x18
	private static void * cjkCHTcategory; // 0x1C
	private static void * cjkJAcategory; // 0x20
	private static void * cjkKOcategory; // 0x24
	private static void * cjkCHSlv1; // 0x28
	private static void * cjkCHTlv1; // 0x2C
	private static void * cjkJAlv1; // 0x30
	private static void * cjkKOlv1; // 0x34
	private static void * cjkKOlv2; // 0x38
	private static readonly char[] tailoringArr; // 0x3C
	private static readonly TailoringInfo[] tailoringInfos; // 0x40
	private static object forLock; // 0x44
	public static readonly bool isReady; // 0x48
	private static Dictionary`2<string, int> <>f__switch$map2; // 0x4C
	private static Dictionary`2<string, int> <>f__switch$map3; // 0x50
	private static Dictionary`2<string, int> <>f__switch$map4; // 0x54

	// Properties
	public static bool IsReady { get; } // 0x0040198C 

	// Constructors
	public MSCompatUnicodeTable(); // 0x003FF7C4
	private static MSCompatUnicodeTable(); // 0x003FF7CC

	// Methods
	public static TailoringInfo GetTailoringInfo(int lcid); // 0x003FFCBC
	public static void BuildTailoringTables(CultureInfo culture, TailoringInfo t, Contraction[] contractions, Level2Map[] diacriticals); // 0x003FFE9C
	private static void SetCJKReferences(string name, CodePointIndexer cjkIndexer, void * catTable, void * lv1Table, CodePointIndexer lv2Indexer, void * lv2Table); // 0x00400738
	public static byte Category(int cp); // 0x00400D24
	public static byte Level1(int cp); // 0x00400E18
	public static byte Level2(int cp); // 0x00400F0C
	public static byte Level3(int cp); // 0x00401000
	public static bool IsSortable(string s); // 0x004010F4
	public static bool IsSortable(int cp); // 0x004011C0
	public static bool IsIgnorable(int cp); // 0x004012B0
	public static bool IsIgnorable(int cp, byte flag); // 0x00401334
	public static bool IsIgnorableSymbol(int cp); // 0x004014B0
	public static bool IsIgnorableNonSpacing(int cp); // 0x00401534
	public static int ToKanaTypeInsensitive(int i); // 0x004015B8
	public static int ToWidthCompat(int i); // 0x004015D0
	public static bool HasSpecialWeight(char c); // 0x00401768
	public static byte GetJapaneseDashType(char c); // 0x004017F4
	public static bool IsHalfWidthKana(char c); // 0x0040185C
	public static bool IsHiragana(char c); // 0x00401874
	public static bool IsJapaneseSmallLetter(char c); // 0x00401890
	private static IntPtr GetResource(string name); // 0x003FFC14
	private static uint UInt32FromBytePtr(void * raw, uint idx); // 0x003FFCB4
	public static void FillCJK(string culture, CodePointIndexer cjkIndexer, void * catTable, void * lv1Table, CodePointIndexer lv2Indexer, void * lv2Table); // 0x00401A18
	private static void FillCJKCore(string culture, CodePointIndexer cjkIndexer, void * catTable, void * lv1Table, CodePointIndexer cjkLv2Indexer, void * lv2Table); // 0x00401B8C
}

// Namespace: Mono.Globalization.Unicode
internal class MSCompatUnicodeTableUtil // TypeDefIndex: 134
{
	// Fields
	public const byte ResourceVersion = 3; // 0x00
	public static readonly CodePointIndexer Ignorable; // 0x00
	public static readonly CodePointIndexer Category; // 0x04
	public static readonly CodePointIndexer Level1; // 0x08
	public static readonly CodePointIndexer Level2; // 0x0C
	public static readonly CodePointIndexer Level3; // 0x10
	public static readonly CodePointIndexer CjkCHS; // 0x14
	public static readonly CodePointIndexer Cjk; // 0x18

	// Constructors
	public MSCompatUnicodeTableUtil(); // 0x00402704
	private static MSCompatUnicodeTableUtil(); // 0x0040270C

}

// Namespace: Mono.Globalization.Unicode
internal enum NormalizationCheck // TypeDefIndex: 135
{
	Yes = 0,
	No = 1,
	Maybe = 2
}

// Namespace: Mono.Globalization.Unicode
internal class Normalization // TypeDefIndex: 136
{
	// Fields
	public const int NoNfd = 1; // 0x00
	public const int NoNfkd = 2; // 0x00
	public const int NoNfc = 4; // 0x00
	public const int MaybeNfc = 8; // 0x00
	public const int NoNfkc = 16; // 0x00
	public const int MaybeNfkc = 32; // 0x00
	public const int FullCompositionExclusion = 64; // 0x00
	public const int IsUnsafe = 128; // 0x00
	private const int HangulSBase = 44032; // 0x00
	private const int HangulLBase = 4352; // 0x00
	private const int HangulVBase = 4449; // 0x00
	private const int HangulTBase = 4519; // 0x00
	private const int HangulLCount = 19; // 0x00
	private const int HangulVCount = 21; // 0x00
	private const int HangulTCount = 28; // 0x00
	private const int HangulNCount = 588; // 0x00
	private const int HangulSCount = 11172; // 0x00
	private static void * props; // 0x00
	private static void * mappedChars; // 0x04
	private static void * charMapIndex; // 0x08
	private static void * helperIndex; // 0x0C
	private static void * mapIdxToComposite; // 0x10
	private static void * combiningClass; // 0x14
	private static object forLock; // 0x18
	public static readonly bool isReady; // 0x1C

	// Properties
	public static bool IsReady { get; } // 0x00405568 

	// Constructors
	public Normalization(); // 0x00402E50
	private static Normalization(); // 0x00402E58

	// Methods
	private static uint PropValue(int cp); // 0x00403094
	private static int CharMapIdx(int cp); // 0x00403208
	private static int GetNormalizedStringLength(int ch); // 0x00403380
	private static byte GetCombiningClass(int c); // 0x004034B4
	private static int GetPrimaryCompositeFromMapIndex(int src); // 0x004035A8
	private static int GetPrimaryCompositeHelperIndex(int cp); // 0x004036A0
	private static int GetPrimaryCompositeCharIndex(object chars, int start); // 0x00403798
	private static string Compose(string source, int checkType); // 0x00403BF0
	private static StringBuilder Combine(string source, int start, int checkType); // 0x00403EAC
	private static bool CanBePrimaryComposite(int i); // 0x00404588
	private static void Combine(StringBuilder sb, int start, int checkType); // 0x00404020
	private static int GetPrimaryCompositeMapIndex(object o, int cur, int bufferPos); // 0x0040464C
	private static string Decompose(string source, int checkType); // 0x00404758
	private static void Decompose(string source, StringBuilder sb, int checkType); // 0x00403D24
	private static void ReorderCanonical(string src, StringBuilder sb, int start); // 0x00404B00
	private static void DecomposeChar(StringBuilder sb, int[] buf, string s, int i, int start); // 0x00404810
	public static NormalizationCheck QuickCheck(char c, int type); // 0x004043D8
	private static bool GetCanonicalHangul(int s, int[] buf, int bufIdx); // 0x00405078
	public static void GetCanonical(int c, int[] buf, int bufIdx); // 0x00404E9C
	public static bool IsNormalized(string source, int type); // 0x004051C4
	public static string Normalize(string source, int type); // 0x00405498
	private static void load_normalization_resource(out IntPtr props, out IntPtr mappedChars, out IntPtr charMapIndex, out IntPtr helperIndex, out IntPtr mapIdxToComposite, out IntPtr combiningClass); // 0x00403090
}

// Namespace: Mono.Globalization.Unicode
internal class NormalizationTableUtil // TypeDefIndex: 137
{
	// Fields
	public static readonly CodePointIndexer Prop; // 0x00
	public static readonly CodePointIndexer Map; // 0x04
	public static readonly CodePointIndexer Combining; // 0x08
	public static readonly CodePointIndexer Composite; // 0x0C
	public static readonly CodePointIndexer Helper; // 0x10

	// Properties
	public static int PropCount { get; } // 0x00405A74 
	public static int MapCount { get; } // 0x00405D18 

	// Constructors
	public NormalizationTableUtil(); // 0x004055F4
	private static NormalizationTableUtil(); // 0x004055FC

	// Methods
	public static int PropIdx(int cp); // 0x0040315C
	public static int PropCP(int index); // 0x004059C8
	public static int MapIdx(int cp); // 0x004032D4
	public static int MapCP(int index); // 0x00405B14
	public static int CbIdx(int cp); // 0x00405BC0
	public static int CbCP(int index); // 0x00405C6C
}

// Namespace: Mono.Globalization.Unicode
internal class SimpleCollator // TypeDefIndex: 138
{
	// Fields
	private const int UnsafeFlagLength = 96; // 0x00
	private static bool QuickCheckDisabled; // 0x00
	private static SimpleCollator invariant; // 0x04
	private readonly TextInfo textInfo; // 0x08
	private readonly bool frenchSort; // 0x0C
	private readonly void * cjkCatTable; // 0x10
	private readonly void * cjkLv1Table; // 0x14
	private readonly CodePointIndexer cjkIndexer; // 0x18
	private readonly void * cjkLv2Table; // 0x1C
	private readonly CodePointIndexer cjkLv2Indexer; // 0x20
	private readonly int lcid; // 0x24
	private readonly Contraction[] contractions; // 0x28
	private readonly Level2Map[] level2Maps; // 0x2C
	private readonly byte[] unsafeFlags; // 0x30

	// Constructors
	public SimpleCollator(CultureInfo culture); // 0x00405DB8
	private static SimpleCollator(); // 0x004063B8

	// Methods
	private void SetCJKTable(CultureInfo culture, CodePointIndexer cjkIndexer, void * catTable, void * lv1Table, CodePointIndexer lv2Indexer, void * lv2Table); // 0x004062AC
	private static CultureInfo GetNeutralCulture(CultureInfo info); // 0x004064E0
	private byte Category(int cp); // 0x0040657C
	private byte Level1(int cp); // 0x00406654
	private byte Level2(int cp, ExtenderType ext); // 0x0040672C
	private static bool IsHalfKana(int cp, CompareOptions opt); // 0x0040695C
	private Contraction GetContraction(string s, int start, int end); // 0x004069F8
	private Contraction GetContraction(string s, int start, int end, Contraction[] clist); // 0x00406AF4
	private Contraction GetTailContraction(string s, int start, int end); // 0x00406C9C
	private Contraction GetTailContraction(string s, int start, int end, Contraction[] clist); // 0x00406D98
	private Contraction GetContraction(char c); // 0x00407080
	private Contraction GetContraction(char c, Contraction[] clist); // 0x00407158
	private int FilterOptions(int i, CompareOptions opt); // 0x00407270
	private ExtenderType GetExtenderType(int i); // 0x004073D8
	private static byte ToDashTypeValue(ExtenderType ext, CompareOptions opt); // 0x004074D8
	private int FilterExtender(int i, ExtenderType ext, CompareOptions opt); // 0x00407510
	private static bool IsIgnorable(int i, CompareOptions opt); // 0x00407750
	private bool IsSafe(int i); // 0x004077F8
	public SortKey GetSortKey(string s); // 0x00407890
	public SortKey GetSortKey(string s, CompareOptions options); // 0x00407898
	public SortKey GetSortKey(string s, int start, int length, CompareOptions options); // 0x004078E0
	private void GetSortKey(string s, int start, int end, SortKeyBuffer buf, CompareOptions opt); // 0x00407A24
	private void FillSortKeyRaw(int i, ExtenderType ext, SortKeyBuffer buf, CompareOptions opt); // 0x00407F10
	private void FillSurrogateSortKeyRaw(int i, SortKeyBuffer buf); // 0x00408418
	public int Compare(string s1, string s2); // 0x004084EC
	public int Compare(string s1, string s2, CompareOptions options); // 0x00408508
	private int CompareOrdinal(string s1, int idx1, int len1, string s2, int idx2, int len2); // 0x00408750
	private int CompareQuick(string s1, int idx1, int len1, string s2, int idx2, int len2, out bool sourceConsumed, out bool targetConsumed, bool immediateBreakup); // 0x00408C7C
	private int CompareOrdinalIgnoreCase(string s1, int idx1, int len1, string s2, int idx2, int len2); // 0x0040966C
	public int Compare(string s1, int idx1, int len1, string s2, int idx2, int len2, CompareOptions options); // 0x0040857C
	private void ClearBuffer(void * buffer, int size); // 0x00407EF4
	private bool QuickCheckPossible(string s1, int idx1, int end1, string s2, int idx2, int end2); // 0x00409C74
	private int CompareInternal(string s1, int idx1, int len1, string s2, int idx2, int len2, out bool targetConsumed, out bool sourceConsumed, bool skipHeadingExtenders, bool immediateBreakup, Context ctx); // 0x00409C7C
	private int CompareFlagPair(bool b1, bool b2); // 0x0040B98C
	public bool IsPrefix(string src, string target, CompareOptions opt); // 0x0040B9AC
	public bool IsPrefix(string s, string target, int start, int length, CompareOptions opt); // 0x0040B9FC
	private bool IsPrefix(string s, string target, int start, int length, bool skipHeadingExtenders, Context ctx); // 0x0040BB58
	public bool IsSuffix(string src, string target, CompareOptions opt); // 0x0040BBDC
	public bool IsSuffix(string s, string target, int start, int length, CompareOptions opt); // 0x0040BC48
	public int IndexOf(string s, string target, CompareOptions opt); // 0x0040BEFC
	private int QuickIndexOf(string s, string target, int start, int length, out bool testWasUnable); // 0x0040C174
	public int IndexOf(string s, string target, int start, int length, CompareOptions opt); // 0x0040BF4C
	private int IndexOfOrdinal(string s, string target, int start, int length); // 0x0040C2EC
	private int IndexOfOrdinalIgnoreCase(string s, string target, int start, int length); // 0x0040C3BC
	public int IndexOf(string s, char target, CompareOptions opt); // 0x0040CA68
	public int IndexOf(string s, char target, int start, int length, CompareOptions opt); // 0x0040CAB8
	private int IndexOfOrdinal(string s, char target, int start, int length); // 0x0040CF28
	private int IndexOfOrdinalIgnoreCase(string s, char target, int start, int length); // 0x0040CF94
	private int IndexOfSortKey(string s, int start, int length, void * sortkey, char target, int ti, bool noLv4, Context ctx); // 0x0040D06C
	private int IndexOf(string s, string target, int start, int length, void * targetSortKey, Context ctx); // 0x0040C508
	public int LastIndexOf(string s, string target, CompareOptions opt); // 0x0040D2AC
	public int LastIndexOf(string s, string target, int start, int length, CompareOptions opt); // 0x0040BD10
	private int LastIndexOfOrdinal(string s, string target, int start, int length); // 0x0040D318
	private int LastIndexOfOrdinalIgnoreCase(string s, string target, int start, int length); // 0x0040D4D0
	public int LastIndexOf(string s, char target, CompareOptions opt); // 0x0040DDBC
	public int LastIndexOf(string s, char target, int start, int length, CompareOptions opt); // 0x0040DE28
	private int LastIndexOfOrdinal(string s, char target, int start, int length); // 0x0040E2AC
	private int LastIndexOfOrdinalIgnoreCase(string s, char target, int start, int length); // 0x0040E334
	private int LastIndexOfSortKey(string s, int start, int orgStart, int length, void * sortkey, int ti, bool noLv4, Context ctx); // 0x0040E428
	private int LastIndexOf(string s, string target, int start, int length, void * targetSortKey, Context ctx); // 0x0040D780
	private bool MatchesForward(string s, int idx, int end, int ti, void * sortkey, bool noLv4, Context ctx); // 0x0040D0EC
	private bool MatchesForwardCore(string s, int idx, int end, int ti, void * sortkey, bool noLv4, ExtenderType ext, Contraction ct, Context ctx); // 0x0040E67C
	private bool MatchesPrimitive(CompareOptions opt, void * source, int si, ExtenderType ext, void * target, int ti, bool noLv4); // 0x0040EB34
	private bool MatchesBackward(string s, int idx, int end, int orgStart, int ti, void * sortkey, bool noLv4, Context ctx); // 0x0040E4B4
	private bool MatchesBackwardCore(string s, int idx, int end, int orgStart, int ti, void * sortkey, bool noLv4, ExtenderType ext, Contraction ct, Context ctx); // 0x0040EFDC
}

// Namespace: 
internal struct Context // TypeDefIndex: 139
{
	// Fields
	public readonly CompareOptions Option; // 0x08
	public readonly void * NeverMatchFlags; // 0x0C
	public readonly void * AlwaysMatchFlags; // 0x10
	public void * Buffer1; // 0x14
	public void * Buffer2; // 0x18
	public int PrevCode; // 0x1C
	public void * PrevSortKey; // 0x20
	public readonly bool QuickCheckPossible; // 0x24

	// Constructors
	public Context(CompareOptions opt, void * alwaysMatchFlags, void * neverMatchFlags, void * buffer1, void * buffer2, void * prev1, bool quickCheckPossible); // 0x000A81BC

	// Methods
	public void ClearPrevInfo(); // 0x000A81F8
}

// Namespace: 
private struct PreviousInfo // TypeDefIndex: 140
{
	// Fields
	public int Code; // 0x08
	public void * SortKey; // 0x0C

	// Constructors
	public PreviousInfo(bool dummy); // 0x000A82AC

}

// Namespace: 
private struct Escape // TypeDefIndex: 141
{
	// Fields
	public string Source; // 0x08
	public int Index; // 0x0C
	public int Start; // 0x10
	public int End; // 0x14
	public int Optional; // 0x18

}

// Namespace: 
private enum ExtenderType // TypeDefIndex: 142
{
	None = 0,
	Simple = 1,
	Voiced = 2,
	Conditional = 3,
	Buggy = 4
}

// Namespace: System.Globalization
[Serializable]
public class SortKey // TypeDefIndex: 143
{
	// Fields
	private readonly string source; // 0x08
	private readonly CompareOptions options; // 0x0C
	private readonly byte[] key; // 0x10
	private readonly int lcid; // 0x14

	// Properties
	public virtual string OriginalString { get; } // 0x004797F8 
	public virtual byte[] KeyData { get; } // 0x00479800 

	// Constructors
	internal SortKey(int lcid, string source, CompareOptions opt); // 0x00479518
	internal SortKey(int lcid, string source, byte[] buffer, CompareOptions opt, int lv1Length, int lv2Length, int lv3Length, int kanaSmallLength, int markTypeLength, int katakanaLength, int kanaWidthLength, int identLength); // 0x00479548

	// Methods
	public static int Compare(SortKey sortkey1, SortKey sortkey2); // 0x0047957C
	public override bool Equals(object value); // 0x00479808
	public override int GetHashCode(); // 0x004798D8
	public override string ToString(); // 0x004799B4
}

// Namespace: Mono.Globalization.Unicode
internal class SortKeyBuffer // TypeDefIndex: 144
{
	// Fields
	private int l1; // 0x08
	private int l2; // 0x0C
	private int l3; // 0x10
	private int l4s; // 0x14
	private int l4t; // 0x18
	private int l4k; // 0x1C
	private int l4w; // 0x20
	private int l5; // 0x24
	private byte[] l1b; // 0x28
	private byte[] l2b; // 0x2C
	private byte[] l3b; // 0x30
	private byte[] l4sb; // 0x34
	private byte[] l4tb; // 0x38
	private byte[] l4kb; // 0x3C
	private byte[] l4wb; // 0x40
	private byte[] l5b; // 0x44
	private string source; // 0x48
	private bool processLevel2; // 0x4C
	private bool frenchSort; // 0x4D
	private bool frenchSorted; // 0x4E
	private int lcid; // 0x50
	private CompareOptions options; // 0x54

	// Constructors
	public SortKeyBuffer(int lcid); // 0x0044ABE8

	// Methods
	public void Reset(); // 0x0044ABF0
	internal void ClearBuffer(); // 0x0044AC10
	internal void Initialize(CompareOptions options, int lcid, string s, bool frenchSort); // 0x0044AC28
	internal void AppendCJKExtension(byte lv1msb, byte lv1lsb); // 0x0044AE28
	internal void AppendKana(byte category, byte lv1, byte lv2, byte lv3, bool isSmallKana, byte markType, bool isKatakana, bool isHalfWidth); // 0x0044AFC4
	internal void AppendNormal(byte category, byte lv1, byte lv2, byte lv3); // 0x0044B0A4
	private void AppendLevel5(byte category, byte lv1); // 0x0044B218
	private void AppendBufferPrimitive(byte value, byte[] buf, int bidx); // 0x0044AEBC
	public SortKey GetResultAndReset(); // 0x0044B2AC
	private int GetOptimizedLength(byte[] data, int len, byte defaultValue); // 0x0044B858
	public SortKey GetResult(); // 0x0044B2DC
}

// Namespace: Mono.Interop
internal class ComInteropProxy : RealProxy, IRemotingTypeInfo // TypeDefIndex: 145
{
	// Fields
	private __ComObject com_object; // 0x28
	private int ref_count; // 0x2C
	private string type_name; // 0x30

	// Properties
	public string TypeName { get; set; } // 0x0044BEEC 0x0044BEF4

	// Constructors
	private ComInteropProxy(Type t); // 0x0044B90C
	private ComInteropProxy(IntPtr pUnk); // 0x0044B944
	internal ComInteropProxy(IntPtr pUnk, Type t); // 0x0044B9EC

	// Methods
	private static void AddProxy(IntPtr pItf, ComInteropProxy proxy); // 0x0044BAC0
	internal static ComInteropProxy FindProxy(IntPtr pItf); // 0x0044BAC4
	private void CacheProxy(); // 0x0044BA88
	internal static ComInteropProxy GetProxy(IntPtr pItf, Type t); // 0x0044BAC8
	internal static ComInteropProxy CreateProxy(Type t); // 0x0044BC3C
	public override IMessage Invoke(IMessage msg); // 0x0044BDFC
	public bool CanCastTo(Type fromType, object o); // 0x0044BEFC
}

// Namespace: Mono.Interop
internal interface IDispatch // TypeDefIndex: 146
{
}

// Namespace: Mono.Interop
internal interface IUnknown // TypeDefIndex: 147
{
}

// Namespace: Mono.Math.Prime.Generator
internal class NextPrimeFinder : SequentialSearchPrimeGeneratorBase // TypeDefIndex: 148
{
	// Constructors
	public NextPrimeFinder(); // 0x0045075C

	// Methods
	protected override BigInteger GenerateSearchBase(int bits, object Context); // 0x00454070
}

// Namespace: Mono.Math.Prime.Generator
internal abstract class PrimeGeneratorBase // TypeDefIndex: 149
{
	// Properties
	public virtual ConfidenceFactor Confidence { get; } // 0x004541A4 
	public virtual PrimalityTest PrimalityTest { get; } // 0x004541AC 
	public virtual int TrialDivisionBounds { get; } // 0x00454240 

	// Constructors
	protected PrimeGeneratorBase(); // 0x0045419C

	// Methods
	protected bool PostTrialDivisionTests(BigInteger bi); // 0x00454248
	public abstract BigInteger GenerateNewPrime(int bits);
}

// Namespace: Mono.Math.Prime.Generator
internal class SequentialSearchPrimeGeneratorBase : PrimeGeneratorBase // TypeDefIndex: 150
{
	// Constructors
	public SequentialSearchPrimeGeneratorBase(); // 0x004507F8

	// Methods
	protected virtual BigInteger GenerateSearchBase(int bits, object context); // 0x0045465C
	public override BigInteger GenerateNewPrime(int bits); // 0x00454704
	public virtual BigInteger GenerateNewPrime(int bits, object context); // 0x00454718
	protected virtual bool IsPrimeAcceptable(BigInteger bi, object context); // 0x00454AE0
}

// Namespace: Mono.Math.Prime
internal enum ConfidenceFactor // TypeDefIndex: 151
{
	ExtraLow = 0,
	Low = 1,
	Medium = 2,
	High = 3,
	ExtraHigh = 4,
	Provable = 5
}

// Namespace: Mono.Math.Prime
internal sealed class PrimalityTests // TypeDefIndex: 152
{
	// Constructors
	private PrimalityTests(); // 0x00454BC0

	// Methods
	private static int GetSPPRounds(BigInteger bi, ConfidenceFactor confidence); // 0x00454BC8
	public static bool Test(BigInteger n, ConfidenceFactor confidence); // 0x00450674
	public static bool RabinMillerTest(BigInteger n, ConfidenceFactor confidence); // 0x0045504C
	public static bool SmallPrimeSppTest(BigInteger bi, ConfidenceFactor confidence); // 0x00454DB8
}

// Namespace: Mono.Math
internal class BigInteger // TypeDefIndex: 153
{
	// Fields
	private const uint DEFAULT_LEN = 20; // 0x00
	private const string WouldReturnNegVal = "Operation would return a negative value"; // 0x00
	private uint length; // 0x08
	private uint[] data; // 0x0C
	internal static readonly uint[] smallPrimes; // 0x00
	private static RandomNumberGenerator rng; // 0x04

	// Properties
	private static RandomNumberGenerator Rng { get; } // 0x0044DD78 

	// Constructors
	public BigInteger(); // 0x0044C030
	public BigInteger(Sign sign, uint len); // 0x0044C0B4
	public BigInteger(BigInteger bi); // 0x0044C138
	public BigInteger(BigInteger bi, uint len); // 0x0044C220
	public BigInteger(byte[] inData); // 0x0044C33C
	public BigInteger(uint[] inData); // 0x0044C8A0
	public BigInteger(uint ui); // 0x0044C9D0
	public BigInteger(ulong ul); // 0x0044CA84
	private static BigInteger(); // 0x0044CB6C

	// Methods
	public static BigInteger Parse(string number); // 0x0044CC04
	public static BigInteger Add(BigInteger bi1, BigInteger bi2); // 0x0044D248
	public static BigInteger Subtract(BigInteger bi1, BigInteger bi2); // 0x0044D2D0
	public static int Modulus(BigInteger bi, int i); // 0x0044D578
	public static uint Modulus(BigInteger bi, uint ui); // 0x0044D624
	public static BigInteger Modulus(BigInteger bi1, BigInteger bi2); // 0x0044D6B0
	public static BigInteger Divid(BigInteger bi, int i); // 0x0044D77C
	public static BigInteger Divid(BigInteger bi1, BigInteger bi2); // 0x0044D8C0
	public static BigInteger Multiply(BigInteger bi1, BigInteger bi2); // 0x0044D98C
	public static BigInteger Multiply(BigInteger bi, int i); // 0x0044DCF0
	public static BigInteger GenerateRandom(int bits, RandomNumberGenerator rng); // 0x0044DE90
	public static BigInteger GenerateRandom(int bits); // 0x0044E08C
	public void Randomize(RandomNumberGenerator rng); // 0x0044E114
	public void Randomize(); // 0x0044E44C
	public int BitCount(); // 0x0044E3B8
	public bool TestBit(uint bitNum); // 0x0044E4D4
	public bool TestBit(int bitNum); // 0x0044E530
	public void SetBit(uint bitNum); // 0x0044E670
	public void ClearBit(uint bitNum); // 0x0044E6EC
	public void SetBit(uint bitNum, bool value); // 0x0044E678
	public int LowestSetBit(); // 0x0044E6F4
	public byte[] GetBytes(); // 0x0044E7A4
	public Sign Compare(BigInteger bi); // 0x0044E968
	public string ToString(uint radix); // 0x0044EC54
	public string ToString(uint radix, string characterSet); // 0x0044ECC0
	private void Normalize(); // 0x0044C81C
	public void Clear(); // 0x0044F17C
	public override int GetHashCode(); // 0x0044F1EC
	public override string ToString(); // 0x0044F260
	public override bool Equals(object o); // 0x0044F268
	public BigInteger GCD(BigInteger bi); // 0x0044F4FC
	public BigInteger ModInverse(BigInteger modulus); // 0x0044F6FC
	public BigInteger ModPow(BigInteger exp, BigInteger n); // 0x0044FFE4
	public bool IsProbablePrime(); // 0x004502F4
	public static BigInteger NextHighestPrime(BigInteger bi); // 0x004506C4
	public static BigInteger GeneratePseudoPrime(int bits); // 0x00450764
	public void Incr2(); // 0x00450800
	public static BigInteger op_Implicit(uint value); // 0x004505E4
	public static BigInteger op_Implicit(int value); // 0x0044D060
	public static BigInteger op_Implicit(ulong value); // 0x0045096C
	public static BigInteger op_Addition(BigInteger bi1, BigInteger bi2); // 0x0044D130
	public static BigInteger op_Subtraction(BigInteger bi1, BigInteger bi2); // 0x0044D358
	public static int op_Modulus(BigInteger bi, int i); // 0x0044D600
	public static uint op_Modulus(BigInteger bi, uint ui); // 0x0044D6AC
	public static BigInteger op_Modulus(BigInteger bi1, BigInteger bi2); // 0x0044D738
	public static BigInteger op_Division(BigInteger bi, int i); // 0x0044D804
	public static BigInteger op_Division(BigInteger bi1, BigInteger bi2); // 0x0044D948
	public static BigInteger op_Multiply(BigInteger bi1, BigInteger bi2); // 0x0044DA14
	public static BigInteger op_Multiply(BigInteger bi, int i); // 0x0044CF34
	public static BigInteger op_LeftShift(BigInteger bi1, int shiftVal); // 0x00451F30
	public static BigInteger op_RightShift(BigInteger bi1, int shiftVal); // 0x004522BC
	public static bool op_Equality(BigInteger bi1, uint ui); // 0x0044E330
	public static bool op_Inequality(BigInteger bi1, uint ui); // 0x0044F0F4
	public static bool op_Equality(BigInteger bi1, BigInteger bi2); // 0x0044F3F8
	public static bool op_Inequality(BigInteger bi1, BigInteger bi2); // 0x00452580
	public static bool op_GreaterThan(BigInteger bi1, BigInteger bi2); // 0x00452680
	public static bool op_LessThan(BigInteger bi1, BigInteger bi2); // 0x004526A0
	public static bool op_GreaterThanOrEqual(BigInteger bi1, BigInteger bi2); // 0x004526B4
	public static bool op_LessThanOrEqual(BigInteger bi1, BigInteger bi2); // 0x00450654
}

// Namespace: 
public enum Sign // TypeDefIndex: 154
{
	Negative = -1,
	Zero = 0,
	Positive = 1
}

// Namespace: 
internal sealed class ModulusRing // TypeDefIndex: 155
{
	// Fields
	private BigInteger mod; // 0x08
	private BigInteger constant; // 0x0C

	// Constructors
	public ModulusRing(BigInteger modulus); // 0x00450078

	// Methods
	public void BarrettReduction(BigInteger x); // 0x0045361C
	public BigInteger Multiply(BigInteger a, BigInteger b); // 0x004539F4
	public BigInteger Difference(BigInteger a, BigInteger b); // 0x004533A0
	public BigInteger Pow(BigInteger a, BigInteger k); // 0x004501AC
	public BigInteger Pow(uint b, BigInteger exp); // 0x00453C54
}

// Namespace: 
internal sealed class Montgomery // TypeDefIndex: 156
{
	// Constructors
	private Montgomery(); // 0x00453CD8

	// Methods
	public static uint Inverse(uint n); // 0x00453CE0
	public static BigInteger ToMont(BigInteger n, BigInteger m); // 0x00453D14
	public static BigInteger Reduce(BigInteger n, BigInteger m, uint mPrime); // 0x00453DEC
}

// Namespace: 
private sealed class Kernel // TypeDefIndex: 157
{
	// Constructors
	public Kernel(); // 0x004526D4

	// Methods
	public static BigInteger AddSameSign(BigInteger bi1, BigInteger bi2); // 0x004509EC
	public static BigInteger Subtract(BigInteger big, BigInteger small); // 0x00450D0C
	public static void MinusEq(BigInteger big, BigInteger small); // 0x004526DC
	public static void PlusEq(BigInteger bi1, BigInteger bi2); // 0x004528EC
	public static Sign Compare(BigInteger bi1, BigInteger bi2); // 0x0044E96C
	public static uint SingleByteDivideInPlace(BigInteger n, uint d); // 0x0044EFFC
	public static uint DwordMod(BigInteger n, uint d); // 0x0045101C
	public static BigInteger DwordDiv(BigInteger n, uint d); // 0x00451AC8
	public static BigInteger[] DwordDivMod(BigInteger n, uint d); // 0x00452BF4
	public static BigInteger[] multiByteDivide(BigInteger bi1, BigInteger bi2); // 0x004510B8
	public static BigInteger LeftShift(BigInteger bi, int n); // 0x00451F34
	public static BigInteger RightShift(BigInteger bi, int n); // 0x004522C0
	public static BigInteger MultiplyByDword(BigInteger n, uint f); // 0x00451D9C
	public static void Multiply(uint[] x, uint xOffset, uint xLen, uint[] y, uint yOffset, uint yLen, uint[] d, uint dOffset); // 0x00451C68
	public static void MultiplyMod2p32pmod(uint[] x, int xOffset, int xLen, uint[] y, int yOffest, int yLen, uint[] d, int dOffset, int mod); // 0x00452E9C
	public static void SquarePositive(BigInteger bi, uint[] wkSpace); // 0x00452FC8
	public static BigInteger gcd(BigInteger a, BigInteger b); // 0x0044F500
	public static uint modInverse(BigInteger bi, uint modulus); // 0x004532AC
	public static BigInteger modInverse(BigInteger bi, BigInteger modulus); // 0x0044F700
}

// Namespace: Mono.Security.Authenticode
internal enum Authority // TypeDefIndex: 158
{
	Individual = 0,
	Commercial = 1,
	Maximum = 2
}

// Namespace: Mono.Security.Authenticode
internal class AuthenticodeBase // TypeDefIndex: 159
{
	// Fields
	public const string spcIndirectDataContext = "1.3.6.1.4.1.311.2.1.4"; // 0x00
	private byte[] fileblock; // 0x08
	private FileStream fs; // 0x0C
	private int blockNo; // 0x10
	private int blockLength; // 0x14
	private int peOffset; // 0x18
	private int dirSecurityOffset; // 0x1C
	private int dirSecuritySize; // 0x20
	private int coffSymbolTableOffset; // 0x24

	// Properties
	internal int PEOffset { get; } // 0x00458314 
	internal int CoffSymbolTableOffset { get; } // 0x00458634 
	internal int SecurityOffset { get; } // 0x00458658 

	// Constructors
	public AuthenticodeBase(); // 0x004582A0

	// Methods
	internal void Open(string filename); // 0x0045867C
	internal void Close(); // 0x0045873C
	internal bool ReadFirstBlock(); // 0x00458338
	internal byte[] GetSecurityEntry(); // 0x00458804
	internal byte[] GetHash(HashAlgorithm hash); // 0x00458918
	protected byte[] HashFile(string fileName, string hashName); // 0x004590B4
}

// Namespace: Mono.Security.Authenticode
internal class AuthenticodeDeformatter : AuthenticodeBase // TypeDefIndex: 160
{
	// Fields
	private string filename; // 0x28
	private byte[] hash; // 0x2C
	private X509CertificateCollection coll; // 0x30
	private ASN1 signedHash; // 0x34
	private DateTime timestamp; // 0x38
	private X509Certificate signingCertificate; // 0x48
	private int reason; // 0x4C
	private bool trustedRoot; // 0x50
	private bool trustedTimestampRoot; // 0x51
	private byte[] entry; // 0x54
	private X509Chain signerChain; // 0x58
	private X509Chain timestampChain; // 0x5C
	private static Dictionary`2<string, int> <>f__switch$map5; // 0x00
	private static Dictionary`2<string, int> <>f__switch$map6; // 0x04
	private static Dictionary`2<string, int> <>f__switch$map7; // 0x08

	// Properties
	public string FileName { get; set; } // 0x004593F0 0x004592B0
	public byte[] Hash { get; } // 0x004598EC 
	public int Reason { get; } // 0x004599B4 
	public byte[] Signature { get; } // 0x00459BE0 
	public DateTime Timestamp { get; } // 0x00459C8C 
	public X509CertificateCollection Certificates { get; } // 0x00459C9C 
	public X509Certificate SigningCertificate { get; } // 0x00459CA4 

	// Constructors
	public AuthenticodeDeformatter(); // 0x004591F4
	public AuthenticodeDeformatter(string fileName); // 0x0045928C

	// Methods
	public bool IsTrusted(); // 0x004599DC
	private bool CheckSignature(string fileName); // 0x004594F4
	private bool CompareIssuerSerial(string issuer, byte[] serial, X509Certificate x509); // 0x0045ACB4
	private bool VerifySignature(SignedData sd, byte[] calculatedMessageDigest, HashAlgorithm ha); // 0x00459CAC
	private bool VerifyCounterSignature(SignerInfo cs, byte[] signature); // 0x0045AE84
	private void Reset(); // 0x004593F8
}

// Namespace: Mono.Security.Cryptography
internal sealed class CryptoConvert // TypeDefIndex: 161
{
	// Constructors
	private CryptoConvert(); // 0x0045D230

	// Methods
	private static int ToInt32LE(byte[] bytes, int offset); // 0x0045D238
	private static uint ToUInt32LE(byte[] bytes, int offset); // 0x0045D308
	private static byte[] GetBytesLE(int val); // 0x0045D3D8
	private static byte[] Trim(byte[] array); // 0x0045D4E0
	public static RSA FromCapiPrivateKeyBlob(byte[] blob); // 0x0045D5E0
	public static RSA FromCapiPrivateKeyBlob(byte[] blob, int offset); // 0x0045D5E8
	public static DSA FromCapiPrivateKeyBlobDSA(byte[] blob); // 0x0045DC88
	public static DSA FromCapiPrivateKeyBlobDSA(byte[] blob, int offset); // 0x0045DC90
	public static byte[] ToCapiPrivateKeyBlob(RSA rsa); // 0x0045E200
	public static byte[] ToCapiPrivateKeyBlob(DSA dsa); // 0x0045E7A0
	public static RSA FromCapiPublicKeyBlob(byte[] blob); // 0x0045EBCC
	public static RSA FromCapiPublicKeyBlob(byte[] blob, int offset); // 0x0045EBD4
	public static DSA FromCapiPublicKeyBlobDSA(byte[] blob); // 0x0045F0DC
	public static DSA FromCapiPublicKeyBlobDSA(byte[] blob, int offset); // 0x0045F0E4
	public static byte[] ToCapiPublicKeyBlob(RSA rsa); // 0x0045F658
	public static byte[] ToCapiPublicKeyBlob(DSA dsa); // 0x0045FA00
	public static RSA FromCapiKeyBlob(byte[] blob); // 0x0045FE2C
	public static RSA FromCapiKeyBlob(byte[] blob, int offset); // 0x0045FE34
	public static DSA FromCapiKeyBlobDSA(byte[] blob); // 0x0045FFF8
	public static DSA FromCapiKeyBlobDSA(byte[] blob, int offset); // 0x00460000
	public static byte[] ToCapiKeyBlob(AsymmetricAlgorithm keypair, bool includePrivateKey); // 0x0046018C
	public static byte[] ToCapiKeyBlob(RSA rsa, bool includePrivateKey); // 0x004602C8
	public static byte[] ToCapiKeyBlob(DSA dsa, bool includePrivateKey); // 0x00460390
	public static string ToHex(byte[] input); // 0x00460458
	private static byte FromHexChar(char c); // 0x004605C0
	public static byte[] FromHex(string hex); // 0x004606A8
}

// Namespace: Mono.Security.Cryptography
internal sealed class KeyBuilder // TypeDefIndex: 162
{
	// Fields
	private static RandomNumberGenerator rng; // 0x00

	// Properties
	private static RandomNumberGenerator Rng { get; } // 0x004636BC 

	// Constructors
	private KeyBuilder(); // 0x004636B4

	// Methods
	public static byte[] Key(int size); // 0x00463750
	public static byte[] IV(int size); // 0x004637EC
}

// Namespace: Mono.Security.Cryptography
internal class BlockProcessor // TypeDefIndex: 163
{
	// Fields
	private ICryptoTransform transform; // 0x08
	private byte[] block; // 0x0C
	private int blockSize; // 0x10
	private int blockCount; // 0x14

	// Constructors
	public BlockProcessor(ICryptoTransform transform); // 0x0045CC40
	public BlockProcessor(ICryptoTransform transform, int blockSize); // 0x0045CD28

	// Methods
	protected override void Finalize(); // 0x0045CDAC
	public void Initialize(); // 0x0045CE20
	public void Core(byte[] rgb); // 0x0045CE4C
	public void Core(byte[] rgb, int ib, int cb); // 0x0045CE8C
	public byte[] Final(); // 0x0045D138
}

// Namespace: Mono.Security.Cryptography
internal class DSAManaged : DSA // TypeDefIndex: 164
{
	// Fields
	private const int defaultKeySize = 1024; // 0x00
	private bool keypairGenerated; // 0x10
	private bool m_disposed; // 0x11
	private BigInteger p; // 0x14
	private BigInteger q; // 0x18
	private BigInteger g; // 0x1C
	private BigInteger x; // 0x20
	private BigInteger y; // 0x24
	private BigInteger j; // 0x28
	private BigInteger seed; // 0x2C
	private int counter; // 0x30
	private bool j_missing; // 0x34
	private RandomNumberGenerator rng; // 0x38
	private KeyGeneratedEventHandler KeyGenerated; // 0x3C

	// Properties
	private RandomNumberGenerator Random { get; } // 0x00461924 
	public override int KeySize { get; } // 0x0046194C 
	public override string KeyExchangeAlgorithm { get; } // 0x00461984 
	public bool PublicOnly { get; } // 0x0046198C 
	public override string SignatureAlgorithm { get; } // 0x00461A28 

	// Events
	public event KeyGeneratedEventHandler KeyGenerated {
		add; // 0x0046095C
		remove; // 0x004609EC
	}

	// Constructors
	public DSAManaged(); // 0x0046083C
	public DSAManaged(int dwKeySize); // 0x00460844

	// Methods
	protected override void Finalize(); // 0x00460A7C
	private void Generate(); // 0x00460AF4
	private void GenerateKeyPair(); // 0x00461308
	private void add(byte[] a, byte[] b, int value); // 0x00461818
	private void GenerateParams(int keyLength); // 0x00460B38
	private byte[] NormalizeArray(byte[] array); // 0x00461A84
	public override DSAParameters ExportParameters(bool includePrivateParameters); // 0x00461B50
	public override void ImportParameters(DSAParameters parameters); // 0x00461E98
	public override byte[] CreateSignature(byte[] rgbHash); // 0x0046221C
	public override bool VerifySignature(byte[] rgbHash, byte[] rgbSignature); // 0x0046267C
	protected override void Dispose(bool disposing); // 0x00462CB4
}

// Namespace: 
public delegate void KeyGeneratedEventHandler(object sender, EventArgs e); // TypeDefIndex: 165; 0x0046146C

// Namespace: Mono.Security.Cryptography
internal class HMACAlgorithm // TypeDefIndex: 166
{
	// Fields
	private byte[] key; // 0x08
	private byte[] hash; // 0x0C
	private HashAlgorithm algo; // 0x10
	private string hashName; // 0x14
	private BlockProcessor block; // 0x18

	// Properties
	public HashAlgorithm Algo { get; } // 0x004631A0 
	public string HashName { get; set; } // 0x004631A8 0x004631B0
	public byte[] Key { get; set; } // 0x004631B4 0x004631BC

	// Constructors
	public HMACAlgorithm(string algoName); // 0x00463050

	// Methods
	protected override void Finalize(); // 0x00463108
	private void CreateHash(string algoName); // 0x00463078
	public void Dispose(); // 0x00463184
	public void Initialize(); // 0x004632AC
	private byte[] KeySetup(byte[] key, byte padding); // 0x0046336C
	public void Core(byte[] rgb, int ib, int cb); // 0x004634D4
	public byte[] Final(); // 0x0046351C
}

// Namespace: Mono.Security.Cryptography
internal class KeyPairPersistence // TypeDefIndex: 167
{
	// Fields
	private static bool _userPathExists; // 0x00
	private static string _userPath; // 0x04
	private static bool _machinePathExists; // 0x08
	private static string _machinePath; // 0x0C
	private CspParameters _params; // 0x08
	private string _keyvalue; // 0x0C
	private string _filename; // 0x10
	private string _container; // 0x14
	private static object lockobj; // 0x10

	// Properties
	public string Filename { get; } // 0x00463B10 
	public string KeyValue { get; set; } // 0x00464CCC 0x00464CD4
	public CspParameters Parameters { get; } // 0x00464CF8 
	private static string UserPath { get; } // 0x004646B0 
	private static string MachinePath { get; } // 0x00464094 
	private bool CanChange { get; } // 0x00464CE4 
	private bool UseDefaultKeyContainer { get; } // 0x00465A58 
	private bool UseMachineKeyStore { get; } // 0x0046406C 
	private string ContainerName { get; } // 0x00463E5C 

	// Constructors
	public KeyPairPersistence(CspParameters parameters); // 0x00463888
	public KeyPairPersistence(CspParameters parameters, string keyPair); // 0x00463890
	private static KeyPairPersistence(); // 0x00463A74

	// Methods
	public bool Load(); // 0x00464D00
	public void Save(); // 0x00465068
	public void Remove(); // 0x0046579C
	internal static bool _CanSecure(string root); // 0x0046594C
	internal static bool _ProtectUser(string path); // 0x00465950
	internal static bool _ProtectMachine(string path); // 0x00465954
	internal static bool _IsUserProtected(string path); // 0x00465958
	internal static bool _IsMachineProtected(string path); // 0x0046595C
	private static bool CanSecure(string path); // 0x00465960
	private static bool ProtectUser(string path); // 0x004656DC
	private static bool ProtectMachine(string path); // 0x0046561C
	private static bool IsUserProtected(string path); // 0x004657CC
	private static bool IsMachineProtected(string path); // 0x0046588C
	private CspParameters Copy(CspParameters p); // 0x00463960
	private void FromXml(string xml); // 0x00464E9C
	private string ToXml(); // 0x004652F8
}

// Namespace: Mono.Security.Cryptography
internal class MACAlgorithm // TypeDefIndex: 168
{
	// Fields
	private SymmetricAlgorithm algo; // 0x08
	private ICryptoTransform enc; // 0x0C
	private byte[] block; // 0x10
	private int blockSize; // 0x14
	private int blockCount; // 0x18

	// Constructors
	public MACAlgorithm(SymmetricAlgorithm algorithm); // 0x00465A80

	// Methods
	public void Initialize(byte[] key); // 0x00465B98
	public void Core(byte[] rgb, int ib, int cb); // 0x00465C2C
	public byte[] Final(); // 0x00465EC4
}

// Namespace: Mono.Security.Cryptography
internal sealed class PKCS1 // TypeDefIndex: 169
{
	// Fields
	private static byte[] emptySHA1; // 0x00
	private static byte[] emptySHA256; // 0x04
	private static byte[] emptySHA384; // 0x08
	private static byte[] emptySHA512; // 0x0C

	// Constructors
	private PKCS1(); // 0x004661CC
	private static PKCS1(); // 0x004661D4

	// Methods
	private static bool Compare(byte[] array1, byte[] array2); // 0x00466314
	private static byte[] xor(byte[] array1, byte[] array2); // 0x004663DC
	private static byte[] GetEmptyHash(HashAlgorithm hash); // 0x0046651C
	public static byte[] I2OSP(int x, int size); // 0x00466770
	public static byte[] I2OSP(byte[] x, int size); // 0x00466834
	public static byte[] OS2IP(byte[] x); // 0x004668F8
	public static byte[] RSAEP(RSA rsa, byte[] m); // 0x00466A04
	public static byte[] RSADP(RSA rsa, byte[] c); // 0x00466A40
	public static byte[] RSASP1(RSA rsa, byte[] m); // 0x00466A7C
	public static byte[] RSAVP1(RSA rsa, byte[] s); // 0x00466AB8
	public static byte[] Encrypt_OAEP(RSA rsa, HashAlgorithm hash, RandomNumberGenerator rng, byte[] M); // 0x00466AF4
	public static byte[] Decrypt_OAEP(RSA rsa, HashAlgorithm hash, byte[] C); // 0x00467164
	public static byte[] Encrypt_v15(RSA rsa, RandomNumberGenerator rng, byte[] M); // 0x0046757C
	public static byte[] Decrypt_v15(RSA rsa, byte[] C); // 0x004677BC
	public static byte[] Sign_v15(RSA rsa, HashAlgorithm hash, byte[] hashValue); // 0x00467A40
	public static bool Verify_v15(RSA rsa, HashAlgorithm hash, byte[] hashValue, byte[] signature); // 0x00467F8C
	public static bool Verify_v15(RSA rsa, HashAlgorithm hash, byte[] hashValue, byte[] signature, bool tryNonStandardEncoding); // 0x0045BC10
	public static byte[] Encode_v15(HashAlgorithm hash, byte[] hashValue, int emLength); // 0x00467B20
	public static byte[] MGF1(HashAlgorithm hash, byte[] mgfSeed, int maskLen); // 0x00466F0C
}

// Namespace: Mono.Security.Cryptography
internal sealed class PKCS8 // TypeDefIndex: 170
{
	// Constructors
	private PKCS8(); // 0x00468034

	// Methods
	public static KeyInfo GetType(byte[] data); // 0x0046803C
}

// Namespace: 
public enum KeyInfo // TypeDefIndex: 171
{
	PrivateKey = 0,
	EncryptedPrivateKey = 1,
	Unknown = 2
}

// Namespace: 
public class PrivateKeyInfo // TypeDefIndex: 172
{
	// Fields
	private int _version; // 0x08
	private string _algorithm; // 0x0C
	private byte[] _key; // 0x10
	private ArrayList _list; // 0x14

	// Properties
	public string Algorithm { get; set; } // 0x0033CEE4 0x0033CEEC
	public ArrayList Attributes { get; } // 0x0033CEF4 
	public byte[] PrivateKey { get; set; } // 0x0033CEFC 0x0033CFA8
	public int Version { get; set; } // 0x0033D0B0 0x0033D0B8

	// Constructors
	public PrivateKeyInfo(); // 0x0033CAC8
	public PrivateKeyInfo(byte[] data); // 0x0033CB4C

	// Methods
	private void Decode(byte[] data); // 0x0033CB70
	public byte[] GetBytes(); // 0x0033D168
	private static byte[] RemoveLeadingZero(byte[] bigInt); // 0x0033D6E8
	private static byte[] Normalize(byte[] bigInt, int length); // 0x0033D7D4
	public static RSA DecodeRSA(byte[] keypair); // 0x0033D8A4
	public static byte[] Encode(RSA rsa); // 0x0033DDE4
	public static DSA DecodeDSA(byte[] privateKey, DSAParameters dsaParameters); // 0x0033E0C4
	public static byte[] Encode(DSA dsa); // 0x0033E23C
	public static byte[] Encode(AsymmetricAlgorithm aa); // 0x0033E2B4
}

// Namespace: 
public class EncryptedPrivateKeyInfo // TypeDefIndex: 173
{
	// Fields
	private string _algorithm; // 0x08
	private byte[] _salt; // 0x0C
	private int _iterations; // 0x10
	private byte[] _data; // 0x14

	// Properties
	public string Algorithm { get; set; } // 0x00468674 0x0046867C
	public byte[] EncryptedData { get; set; } // 0x00468684 0x00468730
	public byte[] Salt { get; set; } // 0x004687F0 0x00468908
	public int IterationCount { get; set; } // 0x004689C0 0x004689C8

	// Constructors
	public EncryptedPrivateKeyInfo(); // 0x0046826C
	public EncryptedPrivateKeyInfo(byte[] data); // 0x00468274

	// Methods
	private void Decode(byte[] data); // 0x0046829C
	public byte[] GetBytes(); // 0x00468A88
}

// Namespace: Mono.Security.Cryptography
internal class RSAManaged : RSA // TypeDefIndex: 174
{
	// Fields
	private const int defaultKeySize = 1024; // 0x00
	private bool isCRTpossible; // 0x10
	private bool keyBlinding; // 0x11
	private bool keypairGenerated; // 0x12
	private bool m_disposed; // 0x13
	private BigInteger d; // 0x14
	private BigInteger p; // 0x18
	private BigInteger q; // 0x1C
	private BigInteger dp; // 0x20
	private BigInteger dq; // 0x24
	private BigInteger qInv; // 0x28
	private BigInteger n; // 0x2C
	private BigInteger e; // 0x30
	private KeyGeneratedEventHandler KeyGenerated; // 0x34

	// Properties
	public override int KeySize { get; } // 0x0033EE48 
	public override string KeyExchangeAlgorithm { get; } // 0x0033EE9C 
	public bool PublicOnly { get; } // 0x0033EEF8 
	public override string SignatureAlgorithm { get; } // 0x0033EFE8 
	public bool UseKeyBlinding { get; set; } // 0x00341014 0x0034101C
	public bool IsCrtPossible { get; } // 0x00341024 

	// Events
	public event KeyGeneratedEventHandler KeyGenerated {
		add; // 0x0033E538
		remove; // 0x0033E5C8
	}

	// Constructors
	public RSAManaged(); // 0x0033E404
	public RSAManaged(int keySize); // 0x0033E40C

	// Methods
	protected override void Finalize(); // 0x0033E658
	private void GenerateKeyPair(); // 0x0033E6D0
	public override byte[] DecryptValue(byte[] rgb); // 0x0033F044
	public override byte[] EncryptValue(byte[] rgb); // 0x0033F604
	public override RSAParameters ExportParameters(bool includePrivateParameters); // 0x0033F77C
	public override void ImportParameters(RSAParameters parameters); // 0x0033FC2C
	protected override void Dispose(bool disposing); // 0x0034035C
	public override string ToXmlString(bool includePrivateParameters); // 0x00340748
	private byte[] GetPaddedValue(BigInteger value, int length); // 0x0033F514
}

// Namespace: 
public delegate void KeyGeneratedEventHandler(object sender, EventArgs e); // TypeDefIndex: 175; 0x0033EA9C

// Namespace: Mono.Security.Cryptography
internal abstract class SymmetricTransform : IDisposable, ICryptoTransform // TypeDefIndex: 176
{
	// Fields
	protected SymmetricAlgorithm algo; // 0x08
	protected bool encrypt; // 0x0C
	private int BlockSizeByte; // 0x10
	private byte[] temp; // 0x14
	private byte[] temp2; // 0x18
	private byte[] workBuff; // 0x1C
	private byte[] workout; // 0x20
	private int FeedBackByte; // 0x24
	private int FeedBackIter; // 0x28
	private bool m_disposed; // 0x2C
	private bool lastBlock; // 0x2D
	private RandomNumberGenerator _rng; // 0x30

	// Properties
	public virtual bool CanTransformMultipleBlocks { get; } // 0x003414BC 
	public virtual bool CanReuseTransform { get; } // 0x003414C4 
	public virtual int InputBlockSize { get; } // 0x003414CC 
	public virtual int OutputBlockSize { get; } // 0x003414D4 
	private bool KeepLastBlock { get; } // 0x003422E4 

	// Constructors
	public SymmetricTransform(SymmetricAlgorithm symmAlgo, bool encryption, byte[] rgbIV); // 0x0034109C

	// Methods
	private void System.IDisposable.Dispose(); // 0x003413B0
	protected override void Finalize(); // 0x003413E4
	protected virtual void Dispose(bool disposing); // 0x0034145C
	protected virtual void Transform(byte[] input, byte[] output); // 0x003414DC
	protected abstract void ECB(byte[] input, byte[] output);
	protected virtual void CBC(byte[] input, byte[] output); // 0x003416F4
	protected virtual void CFB(byte[] input, byte[] output); // 0x003418E4
	protected virtual void OFB(byte[] input, byte[] output); // 0x00341C1C
	protected virtual void CTS(byte[] input, byte[] output); // 0x00341CB8
	private void CheckInput(byte[] inputBuffer, int inputOffset, int inputCount); // 0x00341D54
	public virtual int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset); // 0x00341F38
	private int InternalTransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset); // 0x0034236C
	private void Random(byte[] buffer, int start, int length); // 0x00342594
	private void ThrowBadPaddingException(PaddingMode padding, int length, int position); // 0x00342674
	private byte[] FinalEncrypt(byte[] inputBuffer, int inputOffset, int inputCount); // 0x003428B4
	private byte[] FinalDecrypt(byte[] inputBuffer, int inputOffset, int inputCount); // 0x00342C80
	public virtual byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x00343084
}

// Namespace: Mono.Security.X509.Extensions
internal class BasicConstraintsExtension : X509Extension // TypeDefIndex: 177
{
	// Fields
	public const int NoPathLengthConstraint = -1; // 0x00
	private bool cA; // 0x14
	private int pathLenConstraint; // 0x18

	// Properties
	public bool CertificateAuthority { get; set; } // 0x00354530 0x00354538
	public override string Name { get; } // 0x00354540 
	public int PathLenConstraint { get; set; } // 0x0035459C 0x003545A4

	// Constructors
	public BasicConstraintsExtension(); // 0x00354154
	public BasicConstraintsExtension(ASN1 asn1); // 0x003541C8
	public BasicConstraintsExtension(X509Extension extension); // 0x003541D0

	// Methods
	protected override void Decode(); // 0x003541D8
	protected override void Encode(); // 0x00354390
	public override string ToString(); // 0x003546D0
}

// Namespace: Mono.Security.X509.Extensions
internal enum KeyUsages // TypeDefIndex: 178
{
	none = 0,
	encipherOnly = 1,
	cRLSign = 2,
	keyCertSign = 4,
	keyAgreement = 8,
	dataEncipherment = 16,
	keyEncipherment = 32,
	nonRepudiation = 64,
	digitalSignature = 128,
	decipherOnly = 2048
}

// Namespace: Mono.Security.X509.Extensions
internal class KeyUsageExtension : X509Extension // TypeDefIndex: 179
{
	// Fields
	private int kubits; // 0x14

	// Properties
	public KeyUsages KeyUsage { get; set; } // 0x00354DF4 0x00354DFC
	public override string Name { get; } // 0x00354EEC 

	// Constructors
	public KeyUsageExtension(ASN1 asn1); // 0x00354900
	public KeyUsageExtension(X509Extension extension); // 0x00354908
	public KeyUsageExtension(); // 0x00354910

	// Methods
	protected override void Decode(); // 0x0035497C
	protected override void Encode(); // 0x00354B2C
	public bool Support(KeyUsages usage); // 0x00354F48
	public override string ToString(); // 0x0035504C
}

// Namespace: Mono.Security.X509.Extensions
internal class SubjectKeyIdentifierExtension : X509Extension // TypeDefIndex: 180
{
	// Fields
	private byte[] ski; // 0x14

	// Properties
	public override string Name { get; } // 0x00355710 
	public byte[] Identifier { get; } // 0x0035576C 

	// Constructors
	public SubjectKeyIdentifierExtension(); // 0x0035557C
	public SubjectKeyIdentifierExtension(ASN1 asn1); // 0x003555E8
	public SubjectKeyIdentifierExtension(X509Extension extension); // 0x003555F0

	// Methods
	protected override void Decode(); // 0x003555F8
	public override string ToString(); // 0x00355818
}

// Namespace: Mono.Security.X509
internal class PKCS5 // TypeDefIndex: 181
{
	// Fields
	public const string pbeWithMD2AndDESCBC = "1.2.840.113549.1.5.1"; // 0x00
	public const string pbeWithMD5AndDESCBC = "1.2.840.113549.1.5.3"; // 0x00
	public const string pbeWithMD2AndRC2CBC = "1.2.840.113549.1.5.4"; // 0x00
	public const string pbeWithMD5AndRC2CBC = "1.2.840.113549.1.5.6"; // 0x00
	public const string pbeWithSHA1AndDESCBC = "1.2.840.113549.1.5.10"; // 0x00
	public const string pbeWithSHA1AndRC2CBC = "1.2.840.113549.1.5.11"; // 0x00

	// Constructors
	public PKCS5(); // 0x00256128

}

// Namespace: Mono.Security.X509
internal class PKCS9 // TypeDefIndex: 182
{
	// Fields
	public const string friendlyName = "1.2.840.113549.1.9.20"; // 0x00
	public const string localKeyId = "1.2.840.113549.1.9.21"; // 0x00

	// Constructors
	public PKCS9(); // 0x00256130

}

// Namespace: Mono.Security.X509
internal class SafeBag // TypeDefIndex: 183
{
	// Fields
	private string _bagOID; // 0x08
	private ASN1 _asn1; // 0x0C

	// Properties
	public string BagOID { get; } // 0x00256160 
	public ASN1 ASN1 { get; } // 0x00256168 

	// Constructors
	public SafeBag(string bagOID, ASN1 asn1); // 0x00256138

}

// Namespace: Mono.Security.X509
internal class PKCS12 : ICloneable // TypeDefIndex: 184
{
	// Fields
	public const string pbeWithSHAAnd128BitRC4 = "1.2.840.113549.1.12.1.1"; // 0x00
	public const string pbeWithSHAAnd40BitRC4 = "1.2.840.113549.1.12.1.2"; // 0x00
	public const string pbeWithSHAAnd3KeyTripleDESCBC = "1.2.840.113549.1.12.1.3"; // 0x00
	public const string pbeWithSHAAnd2KeyTripleDESCBC = "1.2.840.113549.1.12.1.4"; // 0x00
	public const string pbeWithSHAAnd128BitRC2CBC = "1.2.840.113549.1.12.1.5"; // 0x00
	public const string pbeWithSHAAnd40BitRC2CBC = "1.2.840.113549.1.12.1.6"; // 0x00
	public const string keyBag = "1.2.840.113549.1.12.10.1.1"; // 0x00
	public const string pkcs8ShroudedKeyBag = "1.2.840.113549.1.12.10.1.2"; // 0x00
	public const string certBag = "1.2.840.113549.1.12.10.1.3"; // 0x00
	public const string crlBag = "1.2.840.113549.1.12.10.1.4"; // 0x00
	public const string secretBag = "1.2.840.113549.1.12.10.1.5"; // 0x00
	public const string safeContentsBag = "1.2.840.113549.1.12.10.1.6"; // 0x00
	public const string x509Certificate = "1.2.840.113549.1.9.22.1"; // 0x00
	public const string sdsiCertificate = "1.2.840.113549.1.9.22.2"; // 0x00
	public const string x509Crl = "1.2.840.113549.1.9.23.1"; // 0x00
	public const int CryptoApiPasswordLimit = 32; // 0x00
	private static int recommendedIterationCount; // 0x00
	private byte[] _password; // 0x08
	private ArrayList _keyBags; // 0x0C
	private ArrayList _secretBags; // 0x10
	private X509CertificateCollection _certs; // 0x14
	private bool _keyBagsChanged; // 0x18
	private bool _secretBagsChanged; // 0x19
	private bool _certsChanged; // 0x1A
	private int _iterations; // 0x1C
	private ArrayList _safeBags; // 0x20
	private RandomNumberGenerator _rng; // 0x24
	private static int password_max_length; // 0x04
	private static Dictionary`2<string, int> <>f__switch$map8; // 0x08
	private static Dictionary`2<string, int> <>f__switch$map9; // 0x0C
	private static Dictionary`2<string, int> <>f__switch$mapA; // 0x10
	private static Dictionary`2<string, int> <>f__switch$mapB; // 0x14
	private static Dictionary`2<string, int> <>f__switch$mapC; // 0x18
	private static Dictionary`2<string, int> <>f__switch$mapD; // 0x1C
	private static Dictionary`2<string, int> <>f__switch$mapE; // 0x20
	private static Dictionary`2<string, int> <>f__switch$mapF; // 0x24

	// Properties
	public string Password { set; } // 0x00355B78
	public int IterationCount { get; set; } // 0x00357D3C 0x00357D44
	public ArrayList Keys { get; } // 0x00357D4C 
	public ArrayList Secrets { get; } // 0x00358778 
	public X509CertificateCollection Certificates { get; } // 0x00358BA4 
	internal RandomNumberGenerator RNG { get; } // 0x00359054 
	public static int MaximumPasswordLength { get; set; } // 0x00366530 0x003665BC

	// Constructors
	public PKCS12(); // 0x003559EC
	public PKCS12(byte[] data); // 0x00355B10
	public PKCS12(byte[] data, string password); // 0x00356A20
	public PKCS12(byte[] data, byte[] password); // 0x00356A54
	private static PKCS12(); // 0x00356A80

	// Methods
	private void Decode(byte[] data); // 0x00355E0C
	protected override void Finalize(); // 0x00357CB8
	private bool Compare(byte[] expected, byte[] actual); // 0x00356CD8
	private SymmetricAlgorithm GetSymmetricAlgorithm(string algorithmOid, byte[] salt, int iterationCount); // 0x0035907C
	public byte[] Decrypt(string algorithmOid, byte[] salt, int iterationCount, byte[] encryptedData); // 0x003585B0
	public byte[] Decrypt(EncryptedData ed); // 0x00357BAC
	public byte[] Encrypt(string algorithmOid, byte[] salt, int iterationCount, byte[] data); // 0x00359968
	private DSAParameters GetExistingParameters(out bool found); // 0x00359B9C
	private void AddPrivateKey(PrivateKeyInfo pki); // 0x00359E68
	private void ReadSafeBag(ASN1 safeBag); // 0x00356DA0
	private ASN1 Pkcs8ShroudedKeyBagSafeBag(AsymmetricAlgorithm aa, IDictionary attributes); // 0x0035A038
	private ASN1 KeyBagSafeBag(AsymmetricAlgorithm aa, IDictionary attributes); // 0x0035B3B8
	private ASN1 SecretBagSafeBag(byte[] secret, IDictionary attributes); // 0x0035C618
	private ASN1 CertificateSafeBag(X509Certificate x509, IDictionary attributes); // 0x0035D644
	private byte[] MAC(byte[] password, byte[] salt, int iterations, byte[] data); // 0x00356AF8
	public byte[] GetBytes(); // 0x0035E7C4
	private ContentInfo EncryptedContentInfo(ASN1 safeBags, string algorithmOid); // 0x00360F84
	public void AddCertificate(X509Certificate cert); // 0x00360F7C
	public void AddCertificate(X509Certificate cert, IDictionary attributes); // 0x00361398
	public void RemoveCertificate(X509Certificate cert); // 0x00360F74
	public void RemoveCertificate(X509Certificate cert, IDictionary attrs); // 0x003616B8
	private bool CompareAsymmetricAlgorithm(AsymmetricAlgorithm a1, AsymmetricAlgorithm a2); // 0x00361D94
	public void AddPkcs8ShroudedKeyBag(AsymmetricAlgorithm aa); // 0x00361EB4
	public void AddPkcs8ShroudedKeyBag(AsymmetricAlgorithm aa, IDictionary attributes); // 0x00361EBC
	public void RemovePkcs8ShroudedKeyBag(AsymmetricAlgorithm aa); // 0x00362340
	public void AddKeyBag(AsymmetricAlgorithm aa); // 0x003627B0
	public void AddKeyBag(AsymmetricAlgorithm aa, IDictionary attributes); // 0x003627B8
	public void RemoveKeyBag(AsymmetricAlgorithm aa); // 0x00362B34
	public void AddSecretBag(byte[] secret); // 0x00362EA0
	public void AddSecretBag(byte[] secret, IDictionary attributes); // 0x00362EA8
	public void RemoveSecretBag(byte[] secret); // 0x003630C8
	public AsymmetricAlgorithm GetAsymmetricAlgorithm(IDictionary attrs); // 0x003632DC
	public byte[] GetSecret(IDictionary attrs); // 0x00363F20
	public X509Certificate GetCertificate(IDictionary attrs); // 0x0036472C
	public IDictionary GetAttributes(AsymmetricAlgorithm aa); // 0x00364FFC
	public IDictionary GetAttributes(X509Certificate cert); // 0x00365A80
	public void SaveToFile(string filename); // 0x00366214
	public object Clone(); // 0x00366400
	private static byte[] LoadFile(string filename); // 0x0036672C
	public static PKCS12 LoadFromFile(string filename); // 0x0036692C
	public static PKCS12 LoadFromFile(string filename, string password); // 0x00366A34
}

// Namespace: 
public class DeriveBytes // TypeDefIndex: 185
{
	// Fields
	private static byte[] keyDiversifier; // 0x00
	private static byte[] ivDiversifier; // 0x04
	private static byte[] macDiversifier; // 0x08
	private string _hashName; // 0x08
	private int _iterations; // 0x0C
	private byte[] _password; // 0x10
	private byte[] _salt; // 0x14

	// Properties
	public string HashName { get; set; } // 0x002553E4 0x002553EC
	public int IterationCount { get; set; } // 0x002553F4 0x002553FC
	public byte[] Password { get; set; } // 0x00255404 0x002554BC
	public byte[] Salt { get; set; } // 0x0025558C 0x00255644

	// Constructors
	public DeriveBytes(); // 0x002552D4
	private static DeriveBytes(); // 0x002552DC

	// Methods
	private void Adjust(byte[] a, int aOff, byte[] b); // 0x002556F4
	private byte[] Derive(byte[] diversifier, int n); // 0x00255888
	public byte[] DeriveKey(int size); // 0x00255F48
	public byte[] DeriveIV(int size); // 0x00255FE8
	public byte[] DeriveMAC(int size); // 0x00256088
}

// Namespace: 
public enum Purpose // TypeDefIndex: 186
{
	Key = 0,
	IV = 1,
	MAC = 2
}

// Namespace: Mono.Security.X509
internal sealed class X501 // TypeDefIndex: 187
{
	// Fields
	private static byte[] countryName; // 0x00
	private static byte[] organizationName; // 0x04
	private static byte[] organizationalUnitName; // 0x08
	private static byte[] commonName; // 0x0C
	private static byte[] localityName; // 0x10
	private static byte[] stateOrProvinceName; // 0x14
	private static byte[] streetAddress; // 0x18
	private static byte[] domainComponent; // 0x1C
	private static byte[] userid; // 0x20
	private static byte[] email; // 0x24
	private static byte[] dnQualifier; // 0x28
	private static byte[] title; // 0x2C
	private static byte[] surname; // 0x30
	private static byte[] givenName; // 0x34
	private static byte[] initial; // 0x38
	private static Dictionary`2<string, int> <>f__switch$map10; // 0x3C

	// Constructors
	private X501(); // 0x00256170
	private static X501(); // 0x00256178

	// Methods
	public static string ToString(ASN1 seq); // 0x00256AA4
	public static string ToString(ASN1 seq, bool reversed, string separator, bool quotes); // 0x002579C0
	private static void AppendEntry(StringBuilder sb, ASN1 entry, bool quotes); // 0x00256C10
	private static AttributeTypeAndValue GetAttributeFromOid(string attributeType); // 0x00257BFC
	private static bool IsOid(string oid); // 0x00258C90
	private static AttributeTypeAndValue ReadAttribute(string value, int pos); // 0x00258DA0
	private static bool IsHex(char c); // 0x00258FE0
	private static string ReadHex(string value, int pos); // 0x002590FC
	private static int ReadEscaped(StringBuilder sb, string value, int pos); // 0x00259394
	private static int ReadQuoted(StringBuilder sb, string value, int pos); // 0x002595C8
	private static string ReadValue(string value, int pos); // 0x00259798
	public static ASN1 FromString(string rdn); // 0x00259AB0
}

// Namespace: Mono.Security.X509
internal class X509Crl // TypeDefIndex: 188
{
	// Fields
	private string issuer; // 0x08
	private byte version; // 0x0C
	private DateTime thisUpdate; // 0x10
	private DateTime nextUpdate; // 0x20
	private ArrayList entries; // 0x30
	private string signatureOID; // 0x34
	private byte[] signature; // 0x38
	private X509ExtensionCollection extensions; // 0x3C
	private byte[] encoded; // 0x40
	private byte[] hash_value; // 0x44
	private static Dictionary`2<string, int> <>f__switch$map11; // 0x00
	private static Dictionary`2<string, int> <>f__switch$map12; // 0x04

	// Properties
	public ArrayList Entries { get; } // 0x0025FF90 
	public X509CrlEntry Item { get; } // 0x00260018 
	public X509CrlEntry Item { get; } // 0x002600E8 
	public X509ExtensionCollection Extensions { get; } // 0x0026027C 
	public byte[] Hash { get; } // 0x00260284 
	public string IssuerName { get; } // 0x00260694 
	public DateTime NextUpdate { get; } // 0x0026069C 
	public DateTime ThisUpdate { get; } // 0x002606AC 
	public string SignatureAlgorithm { get; } // 0x002606BC 
	public byte[] Signature { get; } // 0x002606C4 
	public byte[] RawData { get; } // 0x00260770 
	public byte Version { get; } // 0x00260828 
	public bool IsCurrent { get; } // 0x00260830 

	// Constructors
	public X509Crl(byte[] crl); // 0x0025F49C

	// Methods
	private void Parse(byte[] crl); // 0x0025F5B4
	public bool WasCurrent(DateTime instant); // 0x002608D8
	public byte[] GetBytes(); // 0x00260AF4
	private bool Compare(byte[] array1, byte[] array2); // 0x00260BAC
	public X509CrlEntry GetCrlEntry(X509Certificate x509); // 0x00260C6C
	public X509CrlEntry GetCrlEntry(byte[] serialNumber); // 0x002600EC
	public bool VerifySignature(X509Certificate x509); // 0x00260DF0
	private string GetHashName(); // 0x00260388
	internal bool VerifySignature(DSA dsa); // 0x00261160
	internal bool VerifySignature(RSA rsa); // 0x00261524
	public bool VerifySignature(AsymmetricAlgorithm aa); // 0x00261608
	public static X509Crl CreateFromFile(string filename); // 0x002617D4
}

// Namespace: 
public class X509CrlEntry // TypeDefIndex: 189
{
	// Fields
	private byte[] sn; // 0x08
	private DateTime revocationDate; // 0x10
	private X509ExtensionCollection extensions; // 0x20

	// Properties
	public byte[] SerialNumber { get; } // 0x00260D38 
	public DateTime RevocationDate { get; } // 0x00261AC0 
	public X509ExtensionCollection Extensions { get; } // 0x00261AD0 

	// Constructors
	internal X509CrlEntry(byte[] serialNumber, DateTime revocationDate, X509ExtensionCollection extensions); // 0x00261A04
	internal X509CrlEntry(ASN1 entry); // 0x0025FE58

	// Methods
	public byte[] GetBytes(); // 0x00261AD8
}

// Namespace: Mono.Security.X509
internal class X509Certificate : ISerializable // TypeDefIndex: 190
{
	// Fields
	private ASN1 decoder; // 0x08
	private byte[] m_encodedcert; // 0x0C
	private DateTime m_from; // 0x10
	private DateTime m_until; // 0x20
	private ASN1 issuer; // 0x30
	private string m_issuername; // 0x34
	private string m_keyalgo; // 0x38
	private byte[] m_keyalgoparams; // 0x3C
	private ASN1 subject; // 0x40
	private string m_subject; // 0x44
	private byte[] m_publickey; // 0x48
	private byte[] signature; // 0x4C
	private string m_signaturealgo; // 0x50
	private byte[] m_signaturealgoparams; // 0x54
	private byte[] certhash; // 0x58
	private RSA _rsa; // 0x5C
	private DSA _dsa; // 0x60
	private int version; // 0x64
	private byte[] serialnumber; // 0x68
	private byte[] issuerUniqueID; // 0x6C
	private byte[] subjectUniqueID; // 0x70
	private X509ExtensionCollection extensions; // 0x74
	private static string encoding_error; // 0x00
	private static Dictionary`2<string, int> <>f__switch$map13; // 0x04
	private static Dictionary`2<string, int> <>f__switch$map14; // 0x08
	private static Dictionary`2<string, int> <>f__switch$map15; // 0x0C

	// Properties
	public DSA DSA { get; set; } // 0x0025B26C 0x0025B5C8
	public X509ExtensionCollection Extensions { get; } // 0x0025B5DC 
	public byte[] Hash { get; } // 0x0025B5E4 
	public virtual string IssuerName { get; } // 0x0025BA78 
	public virtual string KeyAlgorithm { get; } // 0x0025BA80 
	public virtual byte[] KeyAlgorithmParameters { get; set; } // 0x0025BA88 0x0025BB34
	public virtual byte[] PublicKey { get; } // 0x0025BB3C 
	public virtual RSA RSA { get; set; } // 0x0025BBE8 0x0025BDAC
	public virtual byte[] RawData { get; } // 0x0025BDC0 
	public virtual byte[] SerialNumber { get; } // 0x0025BE6C 
	public virtual byte[] Signature { get; } // 0x0025BF18 
	public virtual string SignatureAlgorithm { get; } // 0x0025C554 
	public virtual byte[] SignatureAlgorithmParameters { get; } // 0x0025C55C 
	public virtual string SubjectName { get; } // 0x0025C608 
	public virtual DateTime ValidFrom { get; } // 0x0025C610 
	public virtual DateTime ValidUntil { get; } // 0x0025C620 
	public int Version { get; } // 0x0025C630 
	public bool IsCurrent { get; } // 0x0025C638 
	public byte[] IssuerUniqueIdentifier { get; } // 0x0025C824 
	public byte[] SubjectUniqueIdentifier { get; } // 0x0025C8D0 
	public bool IsSelfSigned { get; } // 0x0025D1C8 

	// Constructors
	public X509Certificate(byte[] data); // 0x00259E70
	protected X509Certificate(SerializationInfo info, StreamingContext context); // 0x0025AE80
	private static X509Certificate(); // 0x0025AFAC

	// Methods
	private void Parse(byte[] data); // 0x0025A24C
	private byte[] GetUnsignedBigInteger(byte[] integer); // 0x0025B190
	public bool WasCurrent(DateTime instant); // 0x0025C6E0
	internal bool VerifySignature(DSA dsa); // 0x0025C97C
	internal string GetHashNameFromOID(string oid); // 0x0025CA74
	internal bool VerifySignature(RSA rsa); // 0x0025CD98
	public bool VerifySignature(AsymmetricAlgorithm aa); // 0x0025CF30
	public bool CheckSignature(byte[] hash, string hashAlgorithm, byte[] signature); // 0x0025D0FC
	public ASN1 GetIssuerName(); // 0x0025D288
	public ASN1 GetSubjectName(); // 0x0025D290
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0025D298
	private static byte[] PEM(string type, byte[] data); // 0x0025A054
}

// Namespace: Mono.Security.X509
[Serializable]
internal class X509CertificateCollection : CollectionBase, IEnumerable // TypeDefIndex: 191
{
	// Properties
	public X509Certificate Item { get; set; } // 0x0025D614 0x0025D6F0

	// Constructors
	public X509CertificateCollection(); // 0x0025D31C
	public X509CertificateCollection(X509Certificate[] value); // 0x0025D324
	public X509CertificateCollection(X509CertificateCollection value); // 0x0025D474

	// Methods
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x0025D5D8
	public int Add(X509Certificate value); // 0x0025D73C
	public void AddRange(X509Certificate[] value); // 0x0025D34C
	public void AddRange(X509CertificateCollection value); // 0x0025D49C
	public bool Contains(X509Certificate value); // 0x0025D820
	public void CopyTo(X509Certificate[] array, int index); // 0x0025D9F4
	public X509CertificateEnumerator GetEnumerator(); // 0x0025DA40
	public override int GetHashCode(); // 0x0025DB98
	public int IndexOf(X509Certificate value); // 0x0025D840
	public void Insert(int index, X509Certificate value); // 0x0025DC94
	public void Remove(X509Certificate value); // 0x0025DCE0
	private bool Compare(byte[] array1, byte[] array2); // 0x0025DBD4
}

// Namespace: 
public class X509CertificateEnumerator : IEnumerator // TypeDefIndex: 192
{
	// Fields
	private IEnumerator enumerator; // 0x08

	// Properties
	private object System.Collections.IEnumerator.Current { get; } // 0x0025DD24 
	public X509Certificate Current { get; } // 0x0025DFAC 

	// Constructors
	public X509CertificateEnumerator(X509CertificateCollection mappings); // 0x0025DAB0

	// Methods
	private bool System.Collections.IEnumerator.MoveNext(); // 0x0025DDFC
	private void System.Collections.IEnumerator.Reset(); // 0x0025DED4
	public bool MoveNext(); // 0x0025E0D8
	public void Reset(); // 0x0025E1B0
}

// Namespace: Mono.Security.X509
internal class X509Chain // TypeDefIndex: 193
{
	// Fields
	private X509CertificateCollection roots; // 0x08
	private X509CertificateCollection certs; // 0x0C
	private X509Certificate _root; // 0x10
	private X509CertificateCollection _chain; // 0x14
	private X509ChainStatusFlags _status; // 0x18

	// Properties
	public X509CertificateCollection Chain { get; } // 0x0025E39C 
	public X509Certificate Root { get; } // 0x0025E3A4 
	public X509ChainStatusFlags Status { get; } // 0x0025E3AC 
	public X509CertificateCollection TrustAnchors { get; set; } // 0x0025E3B4 0x0025E5A4

	// Constructors
	public X509Chain(); // 0x0025E288
	public X509Chain(X509CertificateCollection chain); // 0x0025E304

	// Methods
	public void LoadCertificate(X509Certificate x509); // 0x0025E5AC
	public void LoadCertificates(X509CertificateCollection collection); // 0x0025E5DC
	public X509Certificate FindByIssuerName(string issuerName); // 0x0025E60C
	public bool Build(X509Certificate leaf); // 0x0025E87C
	public void Reset(); // 0x0025F314
	private bool IsValid(X509Certificate cert); // 0x0025F2D0
	private X509Certificate FindCertificateParent(X509Certificate child); // 0x0025EC84
	private X509Certificate FindCertificateRoot(X509Certificate potentialRoot); // 0x0025EE9C
	private bool IsTrusted(X509Certificate potentialTrusted); // 0x0025F364
	private bool IsParent(X509Certificate child, X509Certificate parent); // 0x0025F10C
}

// Namespace: Mono.Security.X509
[Serializable]
internal enum X509ChainStatusFlags // TypeDefIndex: 194
{
	NoError = 0,
	NotTimeValid = 1,
	NotTimeNested = 2,
	NotSignatureValid = 8,
	UntrustedRoot = 32,
	InvalidBasicConstraints = 1024,
	PartialChain = 65536
}

// Namespace: Mono.Security.X509
internal class X509Extension // TypeDefIndex: 195
{
	// Fields
	protected string extnOid; // 0x08
	protected bool extnCritical; // 0x0C
	protected ASN1 extnValue; // 0x10

	// Properties
	public ASN1 ASN1 { get; } // 0x002624AC 
	public string Oid { get; } // 0x0026262C 
	public bool Critical { get; set; } // 0x00262634 0x0026263C
	public virtual string Name { get; } // 0x00262644 
	public ASN1 Value { get; } // 0x00262470 

	// Constructors
	protected X509Extension(); // 0x00261E54
	public X509Extension(ASN1 asn1); // 0x00261E74
	public X509Extension(X509Extension extension); // 0x00262294

	// Methods
	protected virtual void Decode(); // 0x002624A4
	protected virtual void Encode(); // 0x002624A8
	public override bool Equals(object obj); // 0x0026264C
	public byte[] GetBytes(); // 0x0026284C
	public override int GetHashCode(); // 0x00262884
	private void WriteLine(StringBuilder sb, int n, int pos); // 0x002628B0
	public override string ToString(); // 0x00262BAC
}

// Namespace: Mono.Security.X509
internal sealed class X509ExtensionCollection : CollectionBase, IEnumerable // TypeDefIndex: 196
{
	// Fields
	private bool readOnly; // 0x0C

	// Properties
	public X509Extension Item { get; } // 0x00263140 
	public X509Extension Item { get; } // 0x0025F3A8 

	// Constructors
	public X509ExtensionCollection(); // 0x00261AB8
	public X509ExtensionCollection(ASN1 asn1); // 0x0025B024

	// Methods
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x00262CCC
	public int Add(X509Extension extension); // 0x00262D08
	public void AddRange(X509Extension[] extension); // 0x00262E3C
	public void AddRange(X509ExtensionCollection collection); // 0x00262FB4
	public bool Contains(X509Extension extension); // 0x0026321C
	public bool Contains(string oid); // 0x002633DC
	public void CopyTo(X509Extension[] extensions, int index); // 0x002635CC
	public int IndexOf(X509Extension extension); // 0x0026323C
	public int IndexOf(string oid); // 0x002633FC
	public void Insert(int index, X509Extension extension); // 0x002636B8
	public void Remove(X509Extension extension); // 0x002637A4
	public void Remove(string oid); // 0x00263888
	public byte[] GetBytes(); // 0x00261C78
}

// Namespace: Mono.Security.X509
internal class X509Store // TypeDefIndex: 197
{
	// Fields
	private string _storePath; // 0x08
	private X509CertificateCollection _certificates; // 0x0C
	private ArrayList _crls; // 0x10
	private bool _crl; // 0x14
	private string _name; // 0x18

	// Properties
	public X509CertificateCollection Certificates { get; } // 0x002639AC 
	public ArrayList Crls { get; } // 0x00263BC4 
	public string Name { get; } // 0x00263E60 

	// Constructors
	internal X509Store(string path, bool crl); // 0x00263984

	// Methods
	public void Clear(); // 0x00263F4C
	public void Import(X509Certificate certificate); // 0x00263F98
	public void Import(X509Crl crl); // 0x002643C4
	public void Remove(X509Certificate certificate); // 0x0026468C
	public void Remove(X509Crl crl); // 0x0026474C
	private string GetUniqueName(X509Certificate certificate); // 0x00264308
	private string GetUniqueName(X509Crl crl); // 0x002645D0
	private byte[] GetUniqueName(X509ExtensionCollection extensions); // 0x0026480C
	private string GetUniqueName(string method, byte[] name, string fileExtension); // 0x002648D4
	private byte[] Load(string filename); // 0x00264A90
	private X509Certificate LoadCertificate(string filename); // 0x00264C90
	private X509Crl LoadCrl(string filename); // 0x00264D0C
	private bool CheckStore(string path, bool throwException); // 0x002641C8
	private X509CertificateCollection BuildCertificatesCollection(string storeName); // 0x002639D8
	private ArrayList BuildCrlsCollection(string storeName); // 0x00263C68
}

// Namespace: Mono.Security.X509
internal sealed class X509StoreManager // TypeDefIndex: 198
{
	// Fields
	private static X509Stores _userStore; // 0x00
	private static X509Stores _machineStore; // 0x04

	// Properties
	public static X509Stores CurrentUser { get; } // 0x00264D90 
	public static X509Stores LocalMachine { get; } // 0x00264ED4 
	public static X509CertificateCollection IntermediateCACertificates { get; } // 0x00264FF4 
	public static ArrayList IntermediateCACrls { get; } // 0x0026521C 
	public static X509CertificateCollection TrustedRootCertificates { get; } // 0x0025E458 
	public static ArrayList TrustedRootCACrls { get; } // 0x00265420 
	public static X509CertificateCollection UntrustedCertificates { get; } // 0x00265548 

	// Constructors
	private X509StoreManager(); // 0x00264D88

}

// Namespace: Mono.Security.X509
internal class X509Stores // TypeDefIndex: 199
{
	// Fields
	private string _storePath; // 0x08
	private X509Store _personal; // 0x0C
	private X509Store _other; // 0x10
	private X509Store _intermediate; // 0x14
	private X509Store _trusted; // 0x18
	private X509Store _untrusted; // 0x1C

	// Properties
	public X509Store Personal { get; } // 0x00265770 
	public X509Store OtherPeople { get; } // 0x0026584C 
	public X509Store IntermediateCA { get; } // 0x00265140 
	public X509Store TrustedRoot { get; } // 0x00265344 
	public X509Store Untrusted { get; } // 0x00265694 

	// Constructors
	internal X509Stores(string path); // 0x00264EB4

	// Methods
	public void Clear(); // 0x00265928
	public X509Store Open(string storeName, bool create); // 0x00265994
}

// Namespace: 
public class Names // TypeDefIndex: 200
{
	// Fields
	public const string Personal = "My"; // 0x00
	public const string OtherPeople = "AddressBook"; // 0x00
	public const string IntermediateCA = "CA"; // 0x00
	public const string TrustedRoot = "Trust"; // 0x00
	public const string Untrusted = "Disallowed"; // 0x00

	// Constructors
	public Names(); // 0x00265AD8

}

// Namespace: Mono.Security.X509
internal class X520 // TypeDefIndex: 201
{
	// Constructors
	public X520(); // 0x00265AE0

}

// Namespace: 
public abstract class AttributeTypeAndValue // TypeDefIndex: 202
{
	// Fields
	private string oid; // 0x08
	private string attrValue; // 0x0C
	private int upperBound; // 0x10
	private byte encoding; // 0x14

	// Properties
	public string Value { get; set; } // 0x00265B48 0x00259D28
	public ASN1 ASN1 { get; } // 0x00265B50 

	// Constructors
	protected AttributeTypeAndValue(string oid, int upperBound); // 0x00265AE8
	protected AttributeTypeAndValue(string oid, int upperBound, byte encoding); // 0x00265B18

	// Methods
	internal ASN1 GetASN1(byte encoding); // 0x00265B58
	internal ASN1 GetASN1(); // 0x00259E68
	public byte[] GetBytes(byte encoding); // 0x00265E54
	public byte[] GetBytes(); // 0x00265E8C
	private byte SelectBestEncoding(); // 0x00265DEC
}

// Namespace: 
public class Name : AttributeTypeAndValue // TypeDefIndex: 203
{
	// Constructors
	public Name(); // 0x00265EC8

}

// Namespace: 
public class CommonName : AttributeTypeAndValue // TypeDefIndex: 204
{
	// Constructors
	public CommonName(); // 0x0025870C

}

// Namespace: 
public class SerialNumber : AttributeTypeAndValue // TypeDefIndex: 205
{
	// Constructors
	public SerialNumber(); // 0x00265F44

}

// Namespace: 
public class LocalityName : AttributeTypeAndValue // TypeDefIndex: 206
{
	// Constructors
	public LocalityName(); // 0x00258788

}

// Namespace: 
public class StateOrProvinceName : AttributeTypeAndValue // TypeDefIndex: 207
{
	// Constructors
	public StateOrProvinceName(); // 0x00258804

}

// Namespace: 
public class OrganizationName : AttributeTypeAndValue // TypeDefIndex: 208
{
	// Constructors
	public OrganizationName(); // 0x00258614

}

// Namespace: 
public class OrganizationalUnitName : AttributeTypeAndValue // TypeDefIndex: 209
{
	// Constructors
	public OrganizationalUnitName(); // 0x00258690

}

// Namespace: 
public class EmailAddress : AttributeTypeAndValue // TypeDefIndex: 210
{
	// Constructors
	public EmailAddress(); // 0x00258880

}

// Namespace: 
public class DomainComponent : AttributeTypeAndValue // TypeDefIndex: 211
{
	// Constructors
	public DomainComponent(); // 0x002588FC

}

// Namespace: 
public class UserId : AttributeTypeAndValue // TypeDefIndex: 212
{
	// Constructors
	public UserId(); // 0x00258978

}

// Namespace: 
public class Oid : AttributeTypeAndValue // TypeDefIndex: 213
{
	// Constructors
	public Oid(string oid); // 0x00258C60

}

// Namespace: 
public class Title : AttributeTypeAndValue // TypeDefIndex: 214
{
	// Constructors
	public Title(); // 0x00258A70

}

// Namespace: 
public class CountryName : AttributeTypeAndValue // TypeDefIndex: 215
{
	// Constructors
	public CountryName(); // 0x00258598

}

// Namespace: 
public class DnQualifier : AttributeTypeAndValue // TypeDefIndex: 216
{
	// Constructors
	public DnQualifier(); // 0x002589F4

}

// Namespace: 
public class Surname : AttributeTypeAndValue // TypeDefIndex: 217
{
	// Constructors
	public Surname(); // 0x00258AEC

}

// Namespace: 
public class GivenName : AttributeTypeAndValue // TypeDefIndex: 218
{
	// Constructors
	public GivenName(); // 0x00258B68

}

// Namespace: 
public class Initial : AttributeTypeAndValue // TypeDefIndex: 219
{
	// Constructors
	public Initial(); // 0x00258BE4

}

// Namespace: Mono.Security
internal class ASN1 // TypeDefIndex: 220
{
	// Fields
	private byte m_nTag; // 0x08
	private byte[] m_aValue; // 0x0C
	private ArrayList elist; // 0x10

	// Properties
	public int Count { get; } // 0x00455820 
	public byte Tag { get; } // 0x00455840 
	public int Length { get; } // 0x00455848 
	public byte[] Value { get; set; } // 0x0045585C 0x00455934
	public ASN1 Item { get; } // 0x00456594 

	// Constructors
	public ASN1(); // 0x0045547C
	public ASN1(byte tag); // 0x004554C8
	public ASN1(byte tag, byte[] data); // 0x004554A0
	public ASN1(byte[] data); // 0x004554F0

	// Methods
	private bool CompareArray(byte[] array1, byte[] array2); // 0x004559E4
	public bool Equals(byte[] asn1); // 0x00455AAC
	public bool CompareValue(byte[] value); // 0x00455AD8
	public ASN1 Add(ASN1 asn1); // 0x00455AE4
	public virtual byte[] GetBytes(); // 0x00455B9C
	protected void Decode(byte[] asn1, int anPos, int anLength); // 0x004556D0
	protected void DecodeTLV(byte[] asn1, int pos, out byte tag, out int length, out byte[] content); // 0x0045641C
	public ASN1 Element(int index, byte anTag); // 0x00456720
	public override string ToString(); // 0x004568C8
	public void SaveToFile(string filename); // 0x00456BD4
}

// Namespace: Mono.Security
internal static class ASN1Convert // TypeDefIndex: 221
{
	// Methods
	public static ASN1 FromDateTime(DateTime dt); // 0x00456DCC
	public static ASN1 FromInt32(int value); // 0x004570EC
	public static ASN1 FromOid(string oid); // 0x004572AC
	public static ASN1 FromUnsignedBigInteger(byte[] big); // 0x004573B8
	public static int ToInt32(ASN1 asn1); // 0x0045750C
	public static string ToOid(ASN1 asn1); // 0x00457688
	public static DateTime ToDateTime(ASN1 time); // 0x00457A98
}

// Namespace: Mono.Security
internal sealed class BitConverterLE // TypeDefIndex: 222
{
	// Constructors
	private BitConverterLE(); // 0x0045BEA0

	// Methods
	private static byte[] GetUShortBytes(void * bytes); // 0x0045BEA8
	private static byte[] GetUIntBytes(void * bytes); // 0x0045BFF8
	private static byte[] GetULongBytes(void * bytes); // 0x0045C1D8
	internal static byte[] GetBytes(bool value); // 0x0045C4D8
	internal static byte[] GetBytes(char value); // 0x0045C574
	internal static byte[] GetBytes(short value); // 0x0045C594
	internal static byte[] GetBytes(int value); // 0x0045728C
	internal static byte[] GetBytes(long value); // 0x0045C5B4
	internal static byte[] GetBytes(ushort value); // 0x0045C5D0
	internal static byte[] GetBytes(uint value); // 0x0045C5F0
	internal static byte[] GetBytes(ulong value); // 0x0045C610
	internal static byte[] GetBytes(float value); // 0x0045C62C
	internal static byte[] GetBytes(double value); // 0x0045C64C
	private static void UShortFromBytes(void * dst, byte[] src, int startIndex); // 0x0045C668
	private static void UIntFromBytes(void * dst, byte[] src, int startIndex); // 0x0045C798
	private static void ULongFromBytes(void * dst, byte[] src, int startIndex); // 0x0045C978
	internal static bool ToBoolean(byte[] value, int startIndex); // 0x0045CAC0
	internal static char ToChar(byte[] value, int startIndex); // 0x0045CB10
	internal static short ToInt16(byte[] value, int startIndex); // 0x0045CB40
	internal static int ToInt32(byte[] value, int startIndex); // 0x004587A4
	internal static long ToInt64(byte[] value, int startIndex); // 0x0045CB70
	internal static ushort ToUInt16(byte[] value, int startIndex); // 0x00458774
	internal static uint ToUInt32(byte[] value, int startIndex); // 0x004587D4
	internal static ulong ToUInt64(byte[] value, int startIndex); // 0x0045CBA4
	internal static float ToSingle(byte[] value, int startIndex); // 0x0045CBD8
	internal static double ToDouble(byte[] value, int startIndex); // 0x0045CC08
}

// Namespace: Mono.Security
internal sealed class PKCS7 // TypeDefIndex: 223
{
	// Constructors
	private PKCS7(); // 0x00343194

	// Methods
	public static ASN1 Attribute(string oid, ASN1 value); // 0x0034319C
	public static ASN1 AlgorithmIdentifier(string oid); // 0x003432AC
	public static ASN1 AlgorithmIdentifier(string oid, ASN1 parameters); // 0x00343394
	public static ASN1 IssuerAndSerialNumber(X509Certificate x509); // 0x00343468
}

// Namespace: 
public class Oid // TypeDefIndex: 224
{
	// Fields
	public const string rsaEncryption = "1.2.840.113549.1.1.1"; // 0x00
	public const string data = "1.2.840.113549.1.7.1"; // 0x00
	public const string signedData = "1.2.840.113549.1.7.2"; // 0x00
	public const string envelopedData = "1.2.840.113549.1.7.3"; // 0x00
	public const string signedAndEnvelopedData = "1.2.840.113549.1.7.4"; // 0x00
	public const string digestedData = "1.2.840.113549.1.7.5"; // 0x00
	public const string encryptedData = "1.2.840.113549.1.7.6"; // 0x00
	public const string contentType = "1.2.840.113549.1.9.3"; // 0x00
	public const string messageDigest = "1.2.840.113549.1.9.4"; // 0x00
	public const string signingTime = "1.2.840.113549.1.9.5"; // 0x00
	public const string countersignature = "1.2.840.113549.1.9.6"; // 0x00

	// Constructors
	public Oid(); // 0x00344CB8

}

// Namespace: 
public class ContentInfo // TypeDefIndex: 225
{
	// Fields
	private string contentType; // 0x08
	private ASN1 content; // 0x0C

	// Properties
	public ASN1 ASN1 { get; } // 0x0034399C 
	public ASN1 Content { get; set; } // 0x00343A84 0x00343A8C
	public string ContentType { get; set; } // 0x00343A94 0x00343A9C

	// Constructors
	public ContentInfo(); // 0x0034365C
	public ContentInfo(string oid); // 0x003436DC
	public ContentInfo(byte[] data); // 0x003436F8
	public ContentInfo(ASN1 asn1); // 0x00343778

	// Methods
	internal ASN1 GetASN1(); // 0x003439A0
	public byte[] GetBytes(); // 0x00343AA4
}

// Namespace: 
public class EncryptedData // TypeDefIndex: 226
{
	// Fields
	private byte _version; // 0x08
	private ContentInfo _content; // 0x0C
	private ContentInfo _encryptionAlgorithm; // 0x10
	private byte[] _encrypted; // 0x14

	// Properties
	public ASN1 ASN1 { get; } // 0x00343FC0 
	public ContentInfo ContentInfo { get; } // 0x00343FD0 
	public ContentInfo EncryptionAlgorithm { get; } // 0x00343FD8 
	public byte[] EncryptedContent { get; } // 0x00343FE0 
	public byte Version { get; set; } // 0x0034408C 0x00344094

	// Constructors
	public EncryptedData(); // 0x00343ADC
	public EncryptedData(byte[] data); // 0x00343AFC
	public EncryptedData(ASN1 asn1); // 0x00343B7C

	// Methods
	internal ASN1 GetASN1(); // 0x00343FC8
	public byte[] GetBytes(); // 0x0034409C
}

// Namespace: 
public class EnvelopedData // TypeDefIndex: 227
{
	// Fields
	private byte _version; // 0x08
	private ContentInfo _content; // 0x0C
	private ContentInfo _encryptionAlgorithm; // 0x10
	private ArrayList _recipientInfos; // 0x14
	private byte[] _encrypted; // 0x18

	// Properties
	public ArrayList RecipientInfos { get; } // 0x00344B38 
	public ASN1 ASN1 { get; } // 0x00344B40 
	public ContentInfo ContentInfo { get; } // 0x00344BB4 
	public ContentInfo EncryptionAlgorithm { get; } // 0x00344BBC 
	public byte[] EncryptedContent { get; } // 0x00344BC4 
	public byte Version { get; set; } // 0x00344C70 0x00344C78

	// Constructors
	public EnvelopedData(); // 0x003440B0
	public EnvelopedData(byte[] data); // 0x00344168
	public EnvelopedData(ASN1 asn1); // 0x003441E8

	// Methods
	internal ASN1 GetASN1(); // 0x00344B44
	public byte[] GetBytes(); // 0x00344C80
}

// Namespace: 
public class RecipientInfo // TypeDefIndex: 228
{
	// Fields
	private int _version; // 0x08
	private string _oid; // 0x0C
	private byte[] _key; // 0x10
	private byte[] _ski; // 0x14
	private string _issuer; // 0x18
	private byte[] _serial; // 0x1C

	// Properties
	public string Oid { get; } // 0x00344CC8 
	public byte[] Key { get; } // 0x00344CD0 
	public byte[] SubjectKeyIdentifier { get; } // 0x00344D7C 
	public string Issuer { get; } // 0x00344E28 
	public byte[] Serial { get; } // 0x00344E30 
	public int Version { get; } // 0x00344EDC 

	// Constructors
	public RecipientInfo(); // 0x00344CC0
	public RecipientInfo(ASN1 data); // 0x0034486C

}

// Namespace: 
public class SignedData // TypeDefIndex: 229
{
	// Fields
	private byte version; // 0x08
	private string hashAlgorithm; // 0x0C
	private ContentInfo contentInfo; // 0x10
	private X509CertificateCollection certs; // 0x14
	private ArrayList crls; // 0x18
	private SignerInfo signerInfo; // 0x1C
	private bool mda; // 0x20
	private bool signed; // 0x21
	private static Dictionary`2<string, int> <>f__switch$map16; // 0x00

	// Properties
	public ASN1 ASN1 { get; } // 0x0034630C 
	public X509CertificateCollection Certificates { get; } // 0x00346F4C 
	public ContentInfo ContentInfo { get; } // 0x00346F54 
	public ArrayList Crls { get; } // 0x00346F5C 
	public string HashName { get; set; } // 0x00346F64 0x003462E0
	public SignerInfo SignerInfo { get; } // 0x00346F6C 
	public byte Version { get; set; } // 0x00346F74 0x00346F7C
	public bool UseAuthenticatedAttributes { get; set; } // 0x00346F84 0x00346F8C

	// Constructors
	public SignedData(); // 0x00344EE4
	public SignedData(byte[] data); // 0x0034506C
	public SignedData(ASN1 asn1); // 0x003450EC

	// Methods
	public bool VerifySignature(AsymmetricAlgorithm aa); // 0x00346F94
	internal string OidToName(string oid); // 0x00345F48
	internal ASN1 GetASN1(); // 0x00346310
	public byte[] GetBytes(); // 0x003475D4
}

// Namespace: 
public class SignerInfo // TypeDefIndex: 230
{
	// Fields
	private byte version; // 0x08
	private X509Certificate x509; // 0x0C
	private string hashAlgorithm; // 0x10
	private AsymmetricAlgorithm key; // 0x14
	private ArrayList authenticatedAttributes; // 0x18
	private ArrayList unauthenticatedAttributes; // 0x1C
	private byte[] signature; // 0x20
	private string issuer; // 0x24
	private byte[] serial; // 0x28
	private byte[] ski; // 0x2C

	// Properties
	public string IssuerName { get; } // 0x0034768C 
	public byte[] SerialNumber { get; } // 0x00347694 
	public byte[] SubjectKeyIdentifier { get; } // 0x00347740 
	public ASN1 ASN1 { get; } // 0x003475D0 
	public ArrayList AuthenticatedAttributes { get; } // 0x0034833C 
	public X509Certificate Certificate { get; set; } // 0x00348344 0x0034834C
	public string HashName { get; set; } // 0x00348354 0x0034835C
	public AsymmetricAlgorithm Key { get; set; } // 0x00348364 0x0034836C
	public byte[] Signature { get; set; } // 0x00347474 0x00347520
	public ArrayList UnauthenticatedAttributes { get; } // 0x00348374 
	public byte Version { get; set; } // 0x0034837C 0x00348384

	// Constructors
	public SignerInfo(); // 0x00344FD0
	public SignerInfo(byte[] data); // 0x0034760C
	public SignerInfo(ASN1 asn1); // 0x00345924

	// Methods
	internal ASN1 GetASN1(); // 0x003477EC
	public byte[] GetBytes(); // 0x0034838C
}

// Namespace: Mono.Security
internal sealed class StrongName // TypeDefIndex: 231
{
	// Fields
	private RSA rsa; // 0x08
	private byte[] publicKey; // 0x0C
	private byte[] keyToken; // 0x10
	private string tokenAlgorithm; // 0x14
	private static object lockObject; // 0x00
	private static bool initialized; // 0x04

	// Properties
	public bool CanSign { get; } // 0x0034879C 
	public RSA RSA { get; set; } // 0x00348934 0x00348620
	public byte[] PublicKey { get; } // 0x0034895C 
	public byte[] PublicKeyToken { get; } // 0x00348EF8 
	public string TokenAlgorithm { get; set; } // 0x003490D4 0x00349140

	// Constructors
	public StrongName(); // 0x003483C4
	public StrongName(int keySize); // 0x003483CC
	public StrongName(byte[] data); // 0x0034844C
	public StrongName(RSA rsa); // 0x00348634
	private static StrongName(); // 0x003486FC

	// Methods
	private void InvalidateCache(); // 0x0034878C
	public byte[] GetBytes(); // 0x003492F4
	private uint RVAtoPosition(uint r, int sections, byte[] headers); // 0x00349324
	internal StrongNameSignature StrongHash(Stream stream, StrongNameOptions options); // 0x003493CC
	public byte[] Hash(string fileName); // 0x00349DB8
	public bool Sign(string fileName); // 0x00349E24
	public bool Verify(string fileName); // 0x0034A33C
	public bool Verify(Stream stream); // 0x0034A4B0
	public static bool IsAssemblyStrongnamed(string assemblyName); // 0x0034A760
	public static bool VerifySignature(byte[] publicKey, int algorithm, byte[] hash, byte[] signature); // 0x0034AE5C
	private static bool Verify(RSA rsa, AssemblyHashAlgorithm algorithm, byte[] hash, byte[] signature); // 0x0034A674
}

// Namespace: 
internal class StrongNameSignature // TypeDefIndex: 232
{
	// Fields
	private byte[] hash; // 0x08
	private byte[] signature; // 0x0C
	private uint signaturePosition; // 0x10
	private uint signatureLength; // 0x14
	private uint metadataPosition; // 0x18
	private uint metadataLength; // 0x1C
	private byte cliFlag; // 0x20
	private uint cliFlagPosition; // 0x24

	// Properties
	public byte[] Hash { get; set; } // 0x0034AF9C 0x0034AFA4
	public byte[] Signature { get; set; } // 0x0034AFAC 0x0034AFB4
	public uint MetadataPosition { get; set; } // 0x0034AFBC 0x0034AFC4
	public uint MetadataLength { get; set; } // 0x0034AFCC 0x0034AFD4
	public uint SignaturePosition { get; set; } // 0x0034AFDC 0x0034AFE4
	public uint SignatureLength { get; set; } // 0x0034AFEC 0x0034AFF4
	public byte CliFlag { get; set; } // 0x0034AFFC 0x0034B004
	public uint CliFlagPosition { get; set; } // 0x0034B00C 0x0034B014

	// Constructors
	public StrongNameSignature(); // 0x00349DB0

}

// Namespace: 
internal enum StrongNameOptions // TypeDefIndex: 233
{
	Metadata = 0,
	Signature = 1
}

// Namespace: Mono.Security
internal class StrongNameManager // TypeDefIndex: 234
{
	// Fields
	private static Hashtable mappings; // 0x00
	private static Hashtable tokens; // 0x04

	// Constructors
	public StrongNameManager(); // 0x0034B01C
	private static StrongNameManager(); // 0x0034B024

	// Methods
	public static void LoadConfig(string filename); // 0x0034B028
	private static void LoadMapping(SecurityElement mapping); // 0x0034B3D4
	private static void LoadVerificationSettings(SecurityElement settings); // 0x0034BB50
	public static byte[] GetMappedPublicKey(byte[] token); // 0x0034AAE4
	public static bool MustVerify(AssemblyName an); // 0x0034AC34
	public override string ToString(); // 0x0034C680
}

// Namespace: 
private class Element // TypeDefIndex: 235
{
	// Fields
	internal Hashtable assemblies; // 0x08

	// Constructors
	public Element(); // 0x0034D0B4
	public Element(string assembly, string users); // 0x0034C580

	// Methods
	public string GetUsers(string assembly); // 0x0034C5CC
}

// Namespace: Mono.Security
internal enum UriPartial // TypeDefIndex: 236
{
	Scheme = 0,
	Authority = 1,
	Path = 2
}

// Namespace: Mono.Security
internal class Uri // TypeDefIndex: 237
{
	// Fields
	private bool isUnixFilePath; // 0x08
	private string source; // 0x0C
	private string scheme; // 0x10
	private string host; // 0x14
	private int port; // 0x18
	private string path; // 0x1C
	private string query; // 0x20
	private string fragment; // 0x24
	private string userinfo; // 0x28
	private bool isUnc; // 0x2C
	private bool isOpaquePart; // 0x2D
	private string[] segments; // 0x30
	private bool userEscaped; // 0x34
	private string cachedAbsoluteUri; // 0x38
	private string cachedToString; // 0x3C
	private string cachedLocalPath; // 0x40
	private int cachedHashCode; // 0x44
	private bool reduce; // 0x48
	private static readonly string hexUpperChars; // 0x00
	public static readonly string SchemeDelimiter; // 0x04
	public static readonly string UriSchemeFile; // 0x08
	public static readonly string UriSchemeFtp; // 0x0C
	public static readonly string UriSchemeGopher; // 0x10
	public static readonly string UriSchemeHttp; // 0x14
	public static readonly string UriSchemeHttps; // 0x18
	public static readonly string UriSchemeMailto; // 0x1C
	public static readonly string UriSchemeNews; // 0x20
	public static readonly string UriSchemeNntp; // 0x24
	private static UriScheme[] schemes; // 0x28
	private static Dictionary`2<string, int> <>f__switch$map17; // 0x2C

	// Properties
	public string AbsolutePath { get; } // 0x0034E4D0 
	public string AbsoluteUri { get; } // 0x0034E4D8 
	public string Authority { get; } // 0x0034ED64 
	public string Fragment { get; } // 0x0034F088 
	public string Host { get; } // 0x0034F090 
	public bool IsDefaultPort { get; } // 0x0034F098 
	public bool IsFile { get; } // 0x0034F130 
	public bool IsLoopback { get; } // 0x0034F200 
	public bool IsUnc { get; } // 0x0034F358 
	public string LocalPath { get; } // 0x0034F360 
	public string PathAndQuery { get; } // 0x0034F7A8 
	public int Port { get; } // 0x0034F838 
	public string Query { get; } // 0x0034F840 
	public string Scheme { get; } // 0x0034F848 
	public string[] Segments { get; } // 0x0034F850 
	public bool UserEscaped { get; } // 0x0034FD24 
	public string UserInfo { get; } // 0x0034FD2C 

	// Constructors
	public Uri(string uriString); // 0x0034D130
	public Uri(string uriString, bool dontEscape); // 0x0034D138
	public Uri(string uriString, bool dontEscape, bool reduce); // 0x0034D300
	public Uri(Uri baseUri, string relativeUri); // 0x0034D40C
	public Uri(Uri baseUri, string relativeUri, bool dontEscape); // 0x0034D428
	private static Uri(); // 0x0034E004

	// Methods
	internal static bool IsIPv4Address(string name); // 0x0034FD34
	internal static bool IsDomainAddress(string name); // 0x0034FF48
	public static bool CheckSchemeName(string schemeName); // 0x003500EC
	public override bool Equals(object comparant); // 0x00350238
	public override int GetHashCode(); // 0x003505EC
	public string GetLeftPart(UriPartial part); // 0x0034E58C
	public static int FromHex(char digit); // 0x0035077C
	public static string HexEscape(char character); // 0x00350860
	public static char HexUnescape(string pattern, int index); // 0x00350A44
	public static bool IsHexDigit(char digit); // 0x00350DD8
	public static bool IsHexEncoding(string pattern, int index); // 0x00350E14
	public string MakeRelative(Uri toUri); // 0x00350F88
	public override string ToString(); // 0x0035138C
	protected void Escape(); // 0x00351728
	protected static string EscapeString(string str); // 0x0034DF70
	internal static string EscapeString(string str, bool escapeReserved, bool escapeHex, bool escapeBrackets); // 0x003517B0
	protected void Parse(); // 0x0034D23C
	protected string Unescape(string str); // 0x0034F7A0
	internal string Unescape(string str, bool excludeSharp); // 0x00351530
	private void ParseAsWindowsUNC(string uriString); // 0x00352E08
	private void ParseAsWindowsAbsoluteFilePath(string uriString); // 0x003530A0
	private void ParseAsUnixAbsoluteFilePath(string uriString); // 0x00353284
	private void Parse(string uriString); // 0x00351BFC
	private static string Reduce(string path); // 0x003538D8
	internal static string GetSchemeDelimiter(string scheme); // 0x00353E18
	internal static int GetDefaultPort(string scheme); // 0x0034EE74
	private string GetOpaqueWiseSchemeDelimiter(); // 0x003506DC
	protected bool IsBadFileSystemCharacter(char ch); // 0x00354058
	protected static bool IsExcludedCharacter(char ch); // 0x003540AC
	private static bool IsPredefinedScheme(string scheme); // 0x003534B4
	protected bool IsReservedCharacter(char ch); // 0x00354120
}

// Namespace: 
private struct UriScheme // TypeDefIndex: 238
{
	// Fields
	public string scheme; // 0x08
	public string delimiter; // 0x0C
	public int defaultPort; // 0x10

	// Constructors
	public UriScheme(string s, string d, int p); // 0x000A6320

}

// Namespace: Mono.Xml
internal class SecurityParser : SmallXmlParser, IContentHandler // TypeDefIndex: 239
{
	// Fields
	private SecurityElement root; // 0x38
	private SecurityElement current; // 0x3C
	private Stack stack; // 0x40

	// Constructors
	public SecurityParser(); // 0x00265FE4

	// Methods
	public void LoadXml(string xml); // 0x0026615C
	public SecurityElement ToXml(); // 0x002664A0
	public void OnStartParsing(SmallXmlParser parser); // 0x002664A8
	public void OnProcessingInstruction(string name, string text); // 0x002664AC
	public void OnIgnorableWhitespace(string s); // 0x002664B0
	public void OnStartElement(string name, IAttrList attrs); // 0x002664B4
	public void OnEndElement(string name); // 0x00266844
	public void OnChars(string ch); // 0x002668F0
	public void OnEndParsing(SmallXmlParser parser); // 0x002669A0
}

// Namespace: Mono.Xml
internal class DefaultHandler : IContentHandler // TypeDefIndex: 240
{
	// Constructors
	public DefaultHandler(); // 0x00265FC0

	// Methods
	public void OnStartParsing(SmallXmlParser parser); // 0x00265FC8
	public void OnEndParsing(SmallXmlParser parser); // 0x00265FCC
	public void OnStartElement(string name, IAttrList attrs); // 0x00265FD0
	public void OnEndElement(string name); // 0x00265FD4
	public void OnChars(string s); // 0x00265FD8
	public void OnIgnorableWhitespace(string s); // 0x00265FDC
	public void OnProcessingInstruction(string name, string text); // 0x00265FE0
}

// Namespace: Mono.Xml
internal class SmallXmlParser // TypeDefIndex: 241
{
	// Fields
	private IContentHandler handler; // 0x08
	private TextReader reader; // 0x0C
	private Stack elementNames; // 0x10
	private Stack xmlSpaces; // 0x14
	private string xmlSpace; // 0x18
	private StringBuilder buffer; // 0x1C
	private char[] nameBuffer; // 0x20
	private bool isWhitespace; // 0x24
	private AttrListImpl attributes; // 0x28
	private int line; // 0x2C
	private int column; // 0x30
	private bool resetColumn; // 0x34
	private static Dictionary`2<string, int> <>f__switch$map18; // 0x00

	// Constructors
	public SmallXmlParser(); // 0x0026605C

	// Methods
	private Exception Error(string msg); // 0x00266A38
	private Exception UnexpectedEndError(); // 0x00266BC4
	private bool IsNameChar(char c, bool start); // 0x00266CF4
	private bool IsWhitespace(int c); // 0x00266E00
	public void SkipWhitespaces(); // 0x00266E2C
	private void HandleWhitespaces(); // 0x00266F18
	public void SkipWhitespaces(bool expected); // 0x00266E34
	private int Peek(); // 0x0026708C
	private int Read(); // 0x00267008
	public void Expect(int c); // 0x002670C0
	private string ReadUntil(char until, bool handleReferences); // 0x002671F4
	public string ReadName(); // 0x0026773C
	public void Parse(TextReader input, IContentHandler handler); // 0x00266210
	private void Cleanup(); // 0x0026855C
	public void ReadContent(); // 0x00267974
	private void HandleBufferedContent(); // 0x002683B4
	private void ReadCharacters(); // 0x00268A70
	private void ReadReference(); // 0x00267340
	private int ReadCharacterReference(); // 0x00268B0C
	private void ReadAttribute(AttrListImpl a); // 0x002688A4
	private void ReadCDATASection(); // 0x00268680
	private void ReadComment(); // 0x002687DC
}

// Namespace: 
public interface IContentHandler // TypeDefIndex: 242
{
	// Methods
	void OnStartParsing(SmallXmlParser parser);
	void OnEndParsing(SmallXmlParser parser);
	void OnStartElement(string name, IAttrList attrs);
	void OnEndElement(string name);
	void OnProcessingInstruction(string name, string text);
	void OnChars(string text);
	void OnIgnorableWhitespace(string text);
}

// Namespace: 
public interface IAttrList // TypeDefIndex: 243
{
	// Properties
	int Length { get; }
	bool IsEmpty { get; }
	string[] Names { get; }
	string[] Values { get; }

	// Methods
	string GetName(int i);
	string GetValue(int i);
	string GetValue(string name);
}

// Namespace: 
private class AttrListImpl : IAttrList // TypeDefIndex: 244
{
	// Fields
	private ArrayList attrNames; // 0x08
	private ArrayList attrValues; // 0x0C

	// Properties
	public int Length { get; } // 0x00268CA0 
	public bool IsEmpty { get; } // 0x00268CD4 
	public string[] Names { get; } // 0x00269030 
	public string[] Values { get; } // 0x00269140 

	// Constructors
	public AttrListImpl(); // 0x002669A4

	// Methods
	public string GetName(int i); // 0x00268D18
	public string GetValue(int i); // 0x00268DCC
	public string GetValue(string name); // 0x00268E80
	internal void Clear(); // 0x00268620
	internal void Add(string name, string value); // 0x00268C30
}

// Namespace: Mono.Xml
internal class SmallXmlParserException : SystemException // TypeDefIndex: 245
{
	// Fields
	private int line; // 0x34
	private int column; // 0x38

	// Properties
	public int Line { get; } // 0x00269250 
	public int Column { get; } // 0x00269258 

	// Constructors
	public SmallXmlParserException(string msg, int line, int column); // 0x00266AC4

}

// Namespace: Mono
internal abstract class DataConverter // TypeDefIndex: 246
{
	// Fields
	private static DataConverter SwapConv; // 0x00
	private static DataConverter CopyConv; // 0x04
	public static readonly bool IsLittleEndian; // 0x08

	// Properties
	public static DataConverter LittleEndian { get; } // 0x003F9AE4 
	public static DataConverter BigEndian { get; } // 0x003F9BF8 
	public static DataConverter Native { get; } // 0x003F9D0C 

	// Constructors
	protected DataConverter(); // 0x003F93DC
	private static DataConverter(); // 0x003F93E4

	// Methods
	public abstract double GetDouble(byte[] data, int index);
	public abstract float GetFloat(byte[] data, int index);
	public abstract long GetInt64(byte[] data, int index);
	public abstract int GetInt32(byte[] data, int index);
	public abstract short GetInt16(byte[] data, int index);
	public abstract uint GetUInt32(byte[] data, int index);
	public abstract ushort GetUInt16(byte[] data, int index);
	public abstract ulong GetUInt64(byte[] data, int index);
	public abstract void PutBytes(byte[] dest, int destIdx, double value);
	public abstract void PutBytes(byte[] dest, int destIdx, float value);
	public abstract void PutBytes(byte[] dest, int destIdx, int value);
	public abstract void PutBytes(byte[] dest, int destIdx, long value);
	public abstract void PutBytes(byte[] dest, int destIdx, short value);
	public abstract void PutBytes(byte[] dest, int destIdx, ushort value);
	public abstract void PutBytes(byte[] dest, int destIdx, uint value);
	public abstract void PutBytes(byte[] dest, int destIdx, ulong value);
	public byte[] GetBytes(double value); // 0x003F95EC
	public byte[] GetBytes(float value); // 0x003F9690
	public byte[] GetBytes(int value); // 0x003F972C
	public byte[] GetBytes(long value); // 0x003F97C8
	public byte[] GetBytes(short value); // 0x003F986C
	public byte[] GetBytes(ushort value); // 0x003F9908
	public byte[] GetBytes(uint value); // 0x003F99A4
	public byte[] GetBytes(ulong value); // 0x003F9A40
	private static int Align(int current, int align); // 0x003F9D98
	public static byte[] Pack(string description, object[] args); // 0x003F9DB8
	public static byte[] PackEnumerable(string description, IEnumerable args); // 0x003FAE0C
	private static bool PackOne(PackContext b, object oarg); // 0x003F9FBC
	private static bool Prepare(byte[] buffer, int idx, int size, bool align); // 0x003FB4AC
	public static IList Unpack(string description, byte[] buffer, int startIndex); // 0x003FB590
	internal void Check(byte[] dest, int destIdx, int size); // 0x003FC95C
}

// Namespace: 
private class PackContext // TypeDefIndex: 247
{
	// Fields
	public byte[] buffer; // 0x08
	private int next; // 0x0C
	public string description; // 0x10
	public int i; // 0x14
	public DataConverter conv; // 0x18
	public int repeat; // 0x1C
	public int align; // 0x20

	// Constructors
	public PackContext(); // 0x003F9FB4

	// Methods
	public void Add(byte[] group); // 0x003FB280
	public byte[] Get(); // 0x003FAD54
}

// Namespace: 
private class CopyConverter : DataConverter // TypeDefIndex: 248
{
	// Constructors
	public CopyConverter(); // 0x003F9568

	// Methods
	public override double GetDouble(byte[] data, int index); // 0x003FCA64
	public override ulong GetUInt64(byte[] data, int index); // 0x003FCC18
	public override long GetInt64(byte[] data, int index); // 0x003FCDC8
	public override float GetFloat(byte[] data, int index); // 0x003FCF78
	public override int GetInt32(byte[] data, int index); // 0x003FD124
	public override uint GetUInt32(byte[] data, int index); // 0x003FD2D0
	public override short GetInt16(byte[] data, int index); // 0x003FD47C
	public override ushort GetUInt16(byte[] data, int index); // 0x003FD628
	public override void PutBytes(byte[] dest, int destIdx, double value); // 0x003FD7D4
	public override void PutBytes(byte[] dest, int destIdx, float value); // 0x003FD838
	public override void PutBytes(byte[] dest, int destIdx, int value); // 0x003FD8A0
	public override void PutBytes(byte[] dest, int destIdx, uint value); // 0x003FD8FC
	public override void PutBytes(byte[] dest, int destIdx, long value); // 0x003FD958
	public override void PutBytes(byte[] dest, int destIdx, ulong value); // 0x003FD9B8
	public override void PutBytes(byte[] dest, int destIdx, short value); // 0x003FDA18
	public override void PutBytes(byte[] dest, int destIdx, ushort value); // 0x003FDA74
}

// Namespace: 
private class SwapConverter : DataConverter // TypeDefIndex: 249
{
	// Constructors
	public SwapConverter(); // 0x003F94E4

	// Methods
	public override double GetDouble(byte[] data, int index); // 0x003FDAD0
	public override ulong GetUInt64(byte[] data, int index); // 0x003FDC80
	public override long GetInt64(byte[] data, int index); // 0x003FDE2C
	public override float GetFloat(byte[] data, int index); // 0x003FDFD8
	public override int GetInt32(byte[] data, int index); // 0x003FE180
	public override uint GetUInt32(byte[] data, int index); // 0x003FE328
	public override short GetInt16(byte[] data, int index); // 0x003FE4D0
	public override ushort GetUInt16(byte[] data, int index); // 0x003FE678
	public override void PutBytes(byte[] dest, int destIdx, double value); // 0x003FE820
	public override void PutBytes(byte[] dest, int destIdx, float value); // 0x003FE894
	public override void PutBytes(byte[] dest, int destIdx, int value); // 0x003FE90C
	public override void PutBytes(byte[] dest, int destIdx, uint value); // 0x003FE984
	public override void PutBytes(byte[] dest, int destIdx, long value); // 0x003FE9FC
	public override void PutBytes(byte[] dest, int destIdx, ulong value); // 0x003FEA84
	public override void PutBytes(byte[] dest, int destIdx, short value); // 0x003FEB0C
	public override void PutBytes(byte[] dest, int destIdx, ushort value); // 0x003FEB84
}

// Namespace: Mono
internal class Runtime // TypeDefIndex: 250
{
	// Constructors
	public Runtime(); // 0x00455468

	// Methods
	private static void mono_runtime_install_handlers(); // 0x00455470
	internal static void InstallSignalHandlers(); // 0x00455474
	internal static string GetDisplayName(); // 0x00455478
}

// Namespace: System.Collections.Generic
internal sealed class CollectionDebuggerView`1 // TypeDefIndex: 251
{
	// Fields
	private readonly ICollection`1<T> c; // 0x00

	// Properties
	public T[] Items { get; }

	// Constructors
	public CollectionDebuggerView`1(ICollection`1<T> col);

}

// Namespace: System.Collections.Generic
internal sealed class CollectionDebuggerView`2 // TypeDefIndex: 252
{
	// Fields
	private readonly ICollection`1<KeyValuePair`2<T, T>> c; // 0x00

	// Properties
	public KeyValuePair`2<T, T>[] Items { get; }

	// Constructors
	public CollectionDebuggerView`2(ICollection`1<KeyValuePair`2<T, T>> col);

}

// Namespace: System.Collections.Generic
[Serializable]
public abstract class Comparer`1 : IComparer`1<T>, IComparer // TypeDefIndex: 253
{
	// Fields
	private static readonly Comparer`1<T> _default; // 0x00

	// Properties
	public static Comparer`1<T> Default { get; }

	// Constructors
	protected Comparer`1();
	private static Comparer`1();

	// Methods
	private int System.Collections.IComparer.Compare(object x, object y);
	public abstract int Compare(T x, T y);
}

// Namespace: 
private sealed class DefaultComparer : Comparer`1<T> // TypeDefIndex: 254
{
	// Constructors
	public DefaultComparer();

	// Methods
	public override int Compare(T x, T y);
}

// Namespace: System.Collections.Generic
[Serializable]
internal sealed class GenericComparer`1 : Comparer`1<T> // TypeDefIndex: 255
{
	// Constructors
	public GenericComparer`1();

	// Methods
	public override int Compare(T x, T y);
}

// Namespace: System.Collections.Generic
internal struct Link // TypeDefIndex: 256
{
	// Fields
	public int HashCode; // 0x08
	public int Next; // 0x0C

}

// Namespace: System.Collections.Generic
[Serializable]
public class Dictionary`2 : IEnumerable, ISerializable, ICollection, ICollection`1<KeyValuePair`2<T, T>>, IEnumerable`1<KeyValuePair`2<T, T>>, IDictionary`2<T, T>, IDictionary, IDeserializationCallback // TypeDefIndex: 257
{
	// Fields
	private const int INITIAL_SIZE = 10; // 0x00
	private const float DEFAULT_LOAD_FACTOR = 0.9; // 0x00
	private const int NO_SLOT = -1; // 0x00
	private const int HASH_FLAG = -2147483648; // 0x00
	private int[] table; // 0x00
	private Link[] linkSlots; // 0x00
	private T[] keySlots; // 0x00
	private T[] valueSlots; // 0x00
	private int touchedSlots; // 0x00
	private int emptySlot; // 0x00
	private int count; // 0x00
	private int threshold; // 0x00
	private IEqualityComparer`1<T> hcp; // 0x00
	private SerializationInfo serialization_info; // 0x00
	private int generation; // 0x00
	private static Transform`1<T, T, DictionaryEntry> <>f__am$cacheB; // 0x00

	// Properties
	private ICollection`1<T> System.Collections.Generic.IDictionary<TKey,TValue>.Keys { get; }
	private ICollection`1<T> System.Collections.Generic.IDictionary<TKey,TValue>.Values { get; }
	private ICollection System.Collections.IDictionary.Keys { get; }
	private ICollection System.Collections.IDictionary.Values { get; }
	private bool System.Collections.IDictionary.IsFixedSize { get; }
	private bool System.Collections.IDictionary.IsReadOnly { get; }
	private object System.Collections.IDictionary.Item { get; set; }
	private bool System.Collections.ICollection.IsSynchronized { get; }
	private object System.Collections.ICollection.SyncRoot { get; }
	private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get; }
	public int Count { get; }
	public T Item { get; set; }
	public IEqualityComparer`1<T> Comparer { get; }
	public KeyCollection<T, T> Keys { get; }
	public ValueCollection<T, T> Values { get; }

	// Constructors
	public Dictionary`2();
	public Dictionary`2(IEqualityComparer`1<T> comparer);
	public Dictionary`2(IDictionary`2<T, T> dictionary);
	public Dictionary`2(int capacity);
	public Dictionary`2(IDictionary`2<T, T> dictionary, IEqualityComparer`1<T> comparer);
	public Dictionary`2(int capacity, IEqualityComparer`1<T> comparer);
	protected Dictionary`2(SerializationInfo info, StreamingContext context);

	// Methods
	private void System.Collections.IDictionary.Add(object key, object value);
	private bool System.Collections.IDictionary.Contains(object key);
	private void System.Collections.IDictionary.Remove(object key);
	private void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair`2<T, T> keyValuePair);
	private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair`2<T, T> keyValuePair);
	private void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair`2<T, T>[] array, int index);
	private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair`2<T, T> keyValuePair);
	private void System.Collections.ICollection.CopyTo(Array array, int index);
	private IEnumerator System.Collections.IEnumerable.GetEnumerator();
	private IEnumerator`1<KeyValuePair`2<T, T>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator();
	private IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
	private void Init(int capacity, IEqualityComparer`1<T> hcp);
	private void InitArrays(int size);
	private void CopyToCheck(Array array, int index);
	private void Do_CopyTo(T[] array, int index, Transform`1<T, T, T> transform);
	private static KeyValuePair`2<T, T> make_pair(T key, T value);
	private static T pick_key(T key, T value);
	private static T pick_value(T key, T value);
	private void CopyTo(KeyValuePair`2<T, T>[] array, int index);
	private void Do_ICollectionCopyTo(Array array, int index, Transform`1<T, T, T> transform);
	private void Resize();
	public void Add(T key, T value);
	public void Clear();
	public bool ContainsKey(T key);
	public bool ContainsValue(T value);
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
	public virtual void OnDeserialization(object sender);
	public bool Remove(T key);
	public bool TryGetValue(T key, out T value);
	private T ToTKey(object key);
	private T ToTValue(object value);
	private bool ContainsKeyValuePair(KeyValuePair`2<T, T> pair);
	public Enumerator<T, T> GetEnumerator();
	private static DictionaryEntry <CopyTo>m__0(T key, T value);
}

// Namespace: 
[Serializable]
private class ShimEnumerator : IEnumerator, IDictionaryEnumerator // TypeDefIndex: 258
{
	// Fields
	private Enumerator<T, T> host_enumerator; // 0x00

	// Properties
	public DictionaryEntry Entry { get; }
	public object Key { get; }
	public object Value { get; }
	public object Current { get; }

	// Constructors
	public ShimEnumerator(Dictionary`2<T, T> host);

	// Methods
	public void Dispose();
	public bool MoveNext();
	public void Reset();
}

// Namespace: 
[Serializable]
public struct Enumerator : IEnumerator, IDisposable, IEnumerator`1<KeyValuePair`2<T, T>>, IDictionaryEnumerator // TypeDefIndex: 259
{
	// Fields
	private Dictionary`2<T, T> dictionary; // 0x00
	private int next; // 0x00
	private int stamp; // 0x00
	internal KeyValuePair`2<T, T> current; // 0x00

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	private DictionaryEntry System.Collections.IDictionaryEnumerator.Entry { get; }
	private object System.Collections.IDictionaryEnumerator.Key { get; }
	private object System.Collections.IDictionaryEnumerator.Value { get; }
	public KeyValuePair`2<T, T> Current { get; }
	internal T CurrentKey { get; }
	internal T CurrentValue { get; }

	// Constructors
	internal Enumerator(Dictionary`2<T, T> dictionary);

	// Methods
	private void System.Collections.IEnumerator.Reset();
	public bool MoveNext();
	internal void Reset();
	private void VerifyState();
	private void VerifyCurrent();
	public void Dispose();
}

// Namespace: 
[Serializable]
public sealed class KeyCollection : IEnumerable, ICollection, ICollection`1<T>, IEnumerable`1<T> // TypeDefIndex: 260
{
	// Fields
	private Dictionary`2<T, T> dictionary; // 0x00

	// Properties
	private bool System.Collections.Generic.ICollection<TKey>.IsReadOnly { get; }
	private bool System.Collections.ICollection.IsSynchronized { get; }
	private object System.Collections.ICollection.SyncRoot { get; }
	public int Count { get; }

	// Constructors
	public KeyCollection(Dictionary`2<T, T> dictionary);

	// Methods
	private void System.Collections.Generic.ICollection<TKey>.Add(T item);
	private void System.Collections.Generic.ICollection<TKey>.Clear();
	private bool System.Collections.Generic.ICollection<TKey>.Contains(T item);
	private bool System.Collections.Generic.ICollection<TKey>.Remove(T item);
	private IEnumerator`1<T> System.Collections.Generic.IEnumerable<TKey>.GetEnumerator();
	private void System.Collections.ICollection.CopyTo(Array array, int index);
	private IEnumerator System.Collections.IEnumerable.GetEnumerator();
	public void CopyTo(T[] array, int index);
	public Enumerator<T, T> GetEnumerator();
}

// Namespace: 
[Serializable]
public struct Enumerator : IEnumerator, IDisposable, IEnumerator`1<T> // TypeDefIndex: 261
{
	// Fields
	private Enumerator<T, T> host_enumerator; // 0x00

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	public T Current { get; }

	// Constructors
	internal Enumerator(Dictionary`2<T, T> host);

	// Methods
	private void System.Collections.IEnumerator.Reset();
	public void Dispose();
	public bool MoveNext();
}

// Namespace: 
[Serializable]
public sealed class ValueCollection : IEnumerable, ICollection, ICollection`1<T>, IEnumerable`1<T> // TypeDefIndex: 262
{
	// Fields
	private Dictionary`2<T, T> dictionary; // 0x00

	// Properties
	private bool System.Collections.Generic.ICollection<TValue>.IsReadOnly { get; }
	private bool System.Collections.ICollection.IsSynchronized { get; }
	private object System.Collections.ICollection.SyncRoot { get; }
	public int Count { get; }

	// Constructors
	public ValueCollection(Dictionary`2<T, T> dictionary);

	// Methods
	private void System.Collections.Generic.ICollection<TValue>.Add(T item);
	private void System.Collections.Generic.ICollection<TValue>.Clear();
	private bool System.Collections.Generic.ICollection<TValue>.Contains(T item);
	private bool System.Collections.Generic.ICollection<TValue>.Remove(T item);
	private IEnumerator`1<T> System.Collections.Generic.IEnumerable<TValue>.GetEnumerator();
	private void System.Collections.ICollection.CopyTo(Array array, int index);
	private IEnumerator System.Collections.IEnumerable.GetEnumerator();
	public void CopyTo(T[] array, int index);
	public Enumerator<T, T> GetEnumerator();
}

// Namespace: 
[Serializable]
public struct Enumerator : IEnumerator, IDisposable, IEnumerator`1<T> // TypeDefIndex: 263
{
	// Fields
	private Enumerator<T, T> host_enumerator; // 0x00

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	public T Current { get; }

	// Constructors
	internal Enumerator(Dictionary`2<T, T> host);

	// Methods
	private void System.Collections.IEnumerator.Reset();
	public void Dispose();
	public bool MoveNext();
}

// Namespace: 
private delegate T Transform`1(T key, T value); // TypeDefIndex: 264; 0x00000000

// Namespace: System.Collections.Generic
[Serializable]
public abstract class EqualityComparer`1 : IEqualityComparer`1<T>, IEqualityComparer // TypeDefIndex: 265
{
	// Fields
	private static readonly EqualityComparer`1<T> _default; // 0x00

	// Properties
	public static EqualityComparer`1<T> Default { get; }

	// Constructors
	protected EqualityComparer`1();
	private static EqualityComparer`1();

	// Methods
	private int System.Collections.IEqualityComparer.GetHashCode(object obj);
	private bool System.Collections.IEqualityComparer.Equals(object x, object y);
	public abstract int GetHashCode(T obj);
	public abstract bool Equals(T x, T y);
}

// Namespace: 
[Serializable]
private sealed class DefaultComparer : EqualityComparer`1<T> // TypeDefIndex: 266
{
	// Constructors
	public DefaultComparer();

	// Methods
	public override int GetHashCode(T obj);
	public override bool Equals(T x, T y);
}

// Namespace: System.Collections.Generic
[Serializable]
internal sealed class GenericEqualityComparer`1 : EqualityComparer`1<T> // TypeDefIndex: 267
{
	// Constructors
	public GenericEqualityComparer`1();

	// Methods
	public override int GetHashCode(T obj);
	public override bool Equals(T x, T y);
}

// Namespace: System.Collections.Generic
public interface IComparer`1 // TypeDefIndex: 268
{
	// Methods
	int Compare(T x, T y);
}

// Namespace: System.Collections.Generic
public interface IDictionary`2 : IEnumerable, ICollection`1<KeyValuePair`2<T, T>>, IEnumerable`1<KeyValuePair`2<T, T>> // TypeDefIndex: 269
{
	// Properties
	T Item { get; set; }
	ICollection`1<T> Keys { get; }
	ICollection`1<T> Values { get; }

	// Methods
	void Add(T key, T value);
	bool ContainsKey(T key);
	bool Remove(T key);
	bool TryGetValue(T key, out T value);
}

// Namespace: System.Collections.Generic
public interface IEqualityComparer`1 // TypeDefIndex: 270
{
	// Methods
	bool Equals(T x, T y);
	int GetHashCode(T obj);
}

// Namespace: System.Collections.Generic
[Serializable]
public class KeyNotFoundException : SystemException, ISerializable // TypeDefIndex: 271
{
	// Constructors
	public KeyNotFoundException(); // 0x00388FA0
	public KeyNotFoundException(string message); // 0x00389008
	public KeyNotFoundException(string message, Exception innerException); // 0x00389010
	protected KeyNotFoundException(SerializationInfo info, StreamingContext context); // 0x00389018

}

// Namespace: System.Collections.Generic
[Serializable]
public struct KeyValuePair`2 // TypeDefIndex: 272
{
	// Fields
	private T key; // 0x00
	private T value; // 0x00

	// Properties
	public T Key { get; set; }
	public T Value { get; set; }

	// Constructors
	public KeyValuePair`2(T key, T value);

	// Methods
	public override string ToString();
}

// Namespace: System.Collections.Generic
[Serializable]
public class List`1 : IEnumerable, ICollection, IList, ICollection`1<T>, IEnumerable`1<T>, IList`1<T> // TypeDefIndex: 273
{
	// Fields
	private const int DefaultCapacity = 4; // 0x00
	private T[] _items; // 0x00
	private int _size; // 0x00
	private int _version; // 0x00
	private static readonly T[] EmptyArray; // 0x00

	// Properties
	private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
	private bool System.Collections.ICollection.IsSynchronized { get; }
	private object System.Collections.ICollection.SyncRoot { get; }
	private bool System.Collections.IList.IsFixedSize { get; }
	private bool System.Collections.IList.IsReadOnly { get; }
	private object System.Collections.IList.Item { get; set; }
	public int Capacity { get; set; }
	public int Count { get; }
	public T Item { get; set; }

	// Constructors
	public List`1();
	public List`1(IEnumerable`1<T> collection);
	public List`1(int capacity);
	internal List`1(T[] data, int size);
	private static List`1();

	// Methods
	private IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
	private void System.Collections.ICollection.CopyTo(Array array, int arrayIndex);
	private IEnumerator System.Collections.IEnumerable.GetEnumerator();
	private int System.Collections.IList.Add(object item);
	private bool System.Collections.IList.Contains(object item);
	private int System.Collections.IList.IndexOf(object item);
	private void System.Collections.IList.Insert(int index, object item);
	private void System.Collections.IList.Remove(object item);
	public void Add(T item);
	private void GrowIfNeeded(int newCount);
	private void CheckRange(int idx, int count);
	private void AddCollection(ICollection`1<T> collection);
	private void AddEnumerable(IEnumerable`1<T> enumerable);
	public void AddRange(IEnumerable`1<T> collection);
	public ReadOnlyCollection`1<T> AsReadOnly();
	public int BinarySearch(T item);
	public int BinarySearch(T item, IComparer`1<T> comparer);
	public int BinarySearch(int index, int count, T item, IComparer`1<T> comparer);
	public void Clear();
	public bool Contains(T item);
	public List`1<T> ConvertAll(Converter`2<T, T> converter);
	public void CopyTo(T[] array);
	public void CopyTo(T[] array, int arrayIndex);
	public void CopyTo(int index, T[] array, int arrayIndex, int count);
	public bool Exists(Predicate`1<T> match);
	public T Find(Predicate`1<T> match);
	private static void CheckMatch(Predicate`1<T> match);
	public List`1<T> FindAll(Predicate`1<T> match);
	private List`1<T> FindAllStackBits(Predicate`1<T> match);
	private List`1<T> FindAllList(Predicate`1<T> match);
	public int FindIndex(Predicate`1<T> match);
	public int FindIndex(int startIndex, Predicate`1<T> match);
	public int FindIndex(int startIndex, int count, Predicate`1<T> match);
	private int GetIndex(int startIndex, int count, Predicate`1<T> match);
	public T FindLast(Predicate`1<T> match);
	public int FindLastIndex(Predicate`1<T> match);
	public int FindLastIndex(int startIndex, Predicate`1<T> match);
	public int FindLastIndex(int startIndex, int count, Predicate`1<T> match);
	private int GetLastIndex(int startIndex, int count, Predicate`1<T> match);
	public void ForEach(Action`1<T> action);
	public Enumerator<T> GetEnumerator();
	public List`1<T> GetRange(int index, int count);
	public int IndexOf(T item);
	public int IndexOf(T item, int index);
	public int IndexOf(T item, int index, int count);
	private void Shift(int start, int delta);
	private void CheckIndex(int index);
	public void Insert(int index, T item);
	private void CheckCollection(IEnumerable`1<T> collection);
	public void InsertRange(int index, IEnumerable`1<T> collection);
	private void InsertCollection(int index, ICollection`1<T> collection);
	private void InsertEnumeration(int index, IEnumerable`1<T> enumerable);
	public int LastIndexOf(T item);
	public int LastIndexOf(T item, int index);
	public int LastIndexOf(T item, int index, int count);
	public bool Remove(T item);
	public int RemoveAll(Predicate`1<T> match);
	public void RemoveAt(int index);
	public void RemoveRange(int index, int count);
	public void Reverse();
	public void Reverse(int index, int count);
	public void Sort();
	public void Sort(IComparer`1<T> comparer);
	public void Sort(Comparison`1<T> comparison);
	public void Sort(int index, int count, IComparer`1<T> comparer);
	public T[] ToArray();
	public void TrimExcess();
	public bool TrueForAll(Predicate`1<T> match);
}

// Namespace: 
[Serializable]
public struct Enumerator : IEnumerator, IDisposable, IEnumerator`1<T> // TypeDefIndex: 274
{
	// Fields
	private List`1<T> l; // 0x00
	private int next; // 0x00
	private int ver; // 0x00
	private T current; // 0x00

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	public T Current { get; }

	// Constructors
	internal Enumerator(List`1<T> l);

	// Methods
	private void System.Collections.IEnumerator.Reset();
	public void Dispose();
	private void VerifyState();
	public bool MoveNext();
}

// Namespace: System.Collections.ObjectModel
[Serializable]
public class Collection`1 : IEnumerable, ICollection, IList, ICollection`1<T>, IList`1<T>, IEnumerable`1<T> // TypeDefIndex: 275
{
	// Fields
	private IList`1<T> list; // 0x00
	private object syncRoot; // 0x00

	// Properties
	private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
	private bool System.Collections.ICollection.IsSynchronized { get; }
	private object System.Collections.ICollection.SyncRoot { get; }
	private bool System.Collections.IList.IsFixedSize { get; }
	private bool System.Collections.IList.IsReadOnly { get; }
	private object System.Collections.IList.Item { get; set; }
	protected IList`1<T> Items { get; }
	public int Count { get; }
	public T Item { get; set; }

	// Constructors
	public Collection`1();
	public Collection`1(IList`1<T> list);

	// Methods
	private void System.Collections.ICollection.CopyTo(Array array, int index);
	private IEnumerator System.Collections.IEnumerable.GetEnumerator();
	private int System.Collections.IList.Add(object value);
	private bool System.Collections.IList.Contains(object value);
	private int System.Collections.IList.IndexOf(object value);
	private void System.Collections.IList.Insert(int index, object value);
	private void System.Collections.IList.Remove(object value);
	public void Add(T item);
	public void Clear();
	protected virtual void ClearItems();
	public bool Contains(T item);
	public void CopyTo(T[] array, int index);
	public IEnumerator`1<T> GetEnumerator();
	public int IndexOf(T item);
	public void Insert(int index, T item);
	protected virtual void InsertItem(int index, T item);
	public bool Remove(T item);
	public void RemoveAt(int index);
	protected virtual void RemoveItem(int index);
	protected virtual void SetItem(int index, T item);
	internal static bool IsValidItem(object item);
	internal static T ConvertItem(object item);
	internal static void CheckWritable(IList`1<T> list);
	internal static bool IsSynchronized(IList`1<T> list);
	internal static bool IsFixedSize(IList`1<T> list);
}

// Namespace: System.Collections.ObjectModel
[Serializable]
public abstract class KeyedCollection`2 : Collection`1<T> // TypeDefIndex: 276
{
	// Fields
	private Dictionary`2<T, T> dictionary; // 0x00
	private IEqualityComparer`1<T> comparer; // 0x00
	private int dictionaryCreationThreshold; // 0x00

	// Properties
	public IEqualityComparer`1<T> Comparer { get; }
	public T Item { get; }
	protected IDictionary`2<T, T> Dictionary { get; }

	// Constructors
	protected KeyedCollection`2();
	protected KeyedCollection`2(IEqualityComparer`1<T> comparer);
	protected KeyedCollection`2(IEqualityComparer`1<T> comparer, int dictionaryCreationThreshold);

	// Methods
	public bool Contains(T key);
	private int IndexOfKey(T key);
	public bool Remove(T key);
	protected void ChangeItemKey(T item, T newKey);
	protected override void ClearItems();
	protected abstract T GetKeyForItem(T item);
	protected override void InsertItem(int index, T item);
	protected override void RemoveItem(int index);
	protected override void SetItem(int index, T item);
}

// Namespace: System.Collections.ObjectModel
[Serializable]
public class ReadOnlyCollection`1 : IEnumerable, ICollection, IList, ICollection`1<T>, IList`1<T>, IEnumerable`1<T> // TypeDefIndex: 277
{
	// Fields
	private IList`1<T> list; // 0x00

	// Properties
	private T System.Collections.Generic.IList<T>.Item { get; set; }
	private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
	private bool System.Collections.ICollection.IsSynchronized { get; }
	private object System.Collections.ICollection.SyncRoot { get; }
	private bool System.Collections.IList.IsFixedSize { get; }
	private bool System.Collections.IList.IsReadOnly { get; }
	private object System.Collections.IList.Item { get; set; }
	public int Count { get; }
	protected IList`1<T> Items { get; }
	public T Item { get; }

	// Constructors
	public ReadOnlyCollection`1(IList`1<T> list);

	// Methods
	private void System.Collections.Generic.ICollection<T>.Add(T item);
	private void System.Collections.Generic.ICollection<T>.Clear();
	private void System.Collections.Generic.IList<T>.Insert(int index, T item);
	private bool System.Collections.Generic.ICollection<T>.Remove(T item);
	private void System.Collections.Generic.IList<T>.RemoveAt(int index);
	private void System.Collections.ICollection.CopyTo(Array array, int index);
	private IEnumerator System.Collections.IEnumerable.GetEnumerator();
	private int System.Collections.IList.Add(object value);
	private void System.Collections.IList.Clear();
	private bool System.Collections.IList.Contains(object value);
	private int System.Collections.IList.IndexOf(object value);
	private void System.Collections.IList.Insert(int index, object value);
	private void System.Collections.IList.Remove(object value);
	private void System.Collections.IList.RemoveAt(int index);
	public bool Contains(T value);
	public void CopyTo(T[] array, int index);
	public IEnumerator`1<T> GetEnumerator();
	public int IndexOf(T value);
}

// Namespace: System.Collections
[Serializable]
public class ArrayList : IEnumerable, ICloneable, ICollection, IList // TypeDefIndex: 278
{
	// Fields
	private const int DefaultInitialCapacity = 4; // 0x00
	private int _size; // 0x08
	private object[] _items; // 0x0C
	private int _version; // 0x10
	private static readonly object[] EmptyArray; // 0x00

	// Properties
	public virtual object Item { get; set; } // 0x004FDDBC 0x004FDED4
	public virtual int Count { get; } // 0x004FE02C 
	public virtual int Capacity { get; set; } // 0x004FE034 0x004FE058
	public virtual bool IsFixedSize { get; } // 0x004FE170 
	public virtual bool IsReadOnly { get; } // 0x004FE178 
	public virtual bool IsSynchronized { get; } // 0x004FE180 
	public virtual object SyncRoot { get; } // 0x004FE188 

	// Constructors
	public ArrayList(); // 0x004FD7A4
	public ArrayList(ICollection c); // 0x004FD844
	public ArrayList(int capacity); // 0x004FDA24
	private ArrayList(int initialCapacity, bool forceZeroSize); // 0x004FDBD8
	private ArrayList(object[] array, int index, int count); // 0x004FDC98
	private static ArrayList(); // 0x004FDD44

	// Methods
	private void EnsureCapacity(int count); // 0x004FE18C
	private void Shift(int index, int count); // 0x004FE288
	public virtual int Add(object value); // 0x004FE430
	public virtual void Clear(); // 0x004FE4F8
	public virtual bool Contains(object item); // 0x004FE52C
	internal virtual bool Contains(object value, int startIndex, int count); // 0x004FE56C
	public virtual int IndexOf(object value); // 0x004FE5A4
	public virtual int IndexOf(object value, int startIndex); // 0x004FE5B8
	public virtual int IndexOf(object value, int startIndex, int count); // 0x004FE5E8
	public virtual int LastIndexOf(object value); // 0x004FE7DC
	public virtual int LastIndexOf(object value, int startIndex); // 0x004FE7F4
	public virtual int LastIndexOf(object value, int startIndex, int count); // 0x004FE820
	public virtual void Insert(int index, object value); // 0x004FE8A8
	public virtual void InsertRange(int index, ICollection c); // 0x004FEA1C
	public virtual void Remove(object obj); // 0x004FEE0C
	public virtual void RemoveAt(int index); // 0x004FEE5C
	public virtual void RemoveRange(int index, int count); // 0x004FEF64
	public virtual void Reverse(); // 0x004FF1DC
	public virtual void Reverse(int index, int count); // 0x004FF208
	public virtual void CopyTo(Array array); // 0x004FF2B8
	public virtual void CopyTo(Array array, int arrayIndex); // 0x004FF2C4
	public virtual void CopyTo(int index, Array array, int arrayIndex, int count); // 0x004FF304
	public virtual IEnumerator GetEnumerator(); // 0x004FF444
	public virtual IEnumerator GetEnumerator(int index, int count); // 0x004FF57C
	public virtual void AddRange(ICollection c); // 0x004FF69C
	public virtual int BinarySearch(object value); // 0x004FF6B4
	public virtual int BinarySearch(object value, IComparer comparer); // 0x004FF824
	public virtual int BinarySearch(int index, int count, object value, IComparer comparer); // 0x004FF988
	public virtual ArrayList GetRange(int index, int count); // 0x004FFAF4
	public virtual void SetRange(int index, ICollection c); // 0x004FFD4C
	public virtual void TrimToSize(); // 0x004FFF6C
	public virtual void Sort(); // 0x00500024
	public virtual void Sort(IComparer comparer); // 0x0050009C
	public virtual void Sort(int index, int count, IComparer comparer); // 0x005000C8
	public virtual object[] ToArray(); // 0x00500180
	public virtual Array ToArray(Type type); // 0x00500204
	public virtual object Clone(); // 0x00500244
	internal static void CheckRange(int index, int count, int listCount); // 0x004FF020
	internal static void ThrowNewArgumentOutOfRangeException(string name, object actual, string message); // 0x004FDB2C
	public static ArrayList Adapter(IList list); // 0x005002CC
	public static ArrayList Synchronized(ArrayList list); // 0x004FFC58
	public static IList Synchronized(IList list); // 0x0050055C
	public static ArrayList ReadOnly(ArrayList list); // 0x005007A0
	public static IList ReadOnly(IList list); // 0x00500898
	public static ArrayList FixedSize(ArrayList list); // 0x00500A14
	public static IList FixedSize(IList list); // 0x00500B0C
	public static ArrayList Repeat(object value, int count); // 0x00500C88
}

// Namespace: 
private sealed class ArrayListEnumerator : IEnumerator, ICloneable // TypeDefIndex: 279
{
	// Fields
	private int m_Pos; // 0x08
	private int m_Index; // 0x0C
	private int m_Count; // 0x10
	private object m_Current; // 0x14
	private ArrayList m_List; // 0x18
	private int m_ExpectedStateChanges; // 0x1C

	// Properties
	public object Current { get; } // 0x00506168 

	// Constructors
	public ArrayListEnumerator(ArrayList list); // 0x0050610C
	public ArrayListEnumerator(ArrayList list, int index, int count); // 0x004FF644

	// Methods
	public object Clone(); // 0x00506160
	public bool MoveNext(); // 0x00506220
	public void Reset(); // 0x0050633C
}

// Namespace: 
private sealed class SimpleEnumerator : IEnumerator, ICloneable // TypeDefIndex: 280
{
	// Fields
	private ArrayList list; // 0x08
	private int index; // 0x0C
	private int version; // 0x10
	private object currentElement; // 0x14
	private static object endFlag; // 0x00

	// Properties
	public object Current { get; } // 0x0050AB3C 

	// Constructors
	public SimpleEnumerator(ArrayList list); // 0x004FF4B4
	private static SimpleEnumerator(); // 0x0050A928

	// Methods
	public object Clone(); // 0x0050A9A8
	public bool MoveNext(); // 0x0050A9B0
	public void Reset(); // 0x0050AC68
}

// Namespace: 
[Serializable]
private sealed class ArrayListAdapter : ArrayList // TypeDefIndex: 281
{
	// Fields
	private IList m_Adaptee; // 0x14

	// Properties
	public override object Item { get; set; } // 0x00500D34 0x00500E14
	public override int Count { get; } // 0x00500EFC 
	public override int Capacity { get; set; } // 0x00500FD4 0x005010AC
	public override bool IsFixedSize { get; } // 0x005011E4 
	public override bool IsReadOnly { get; } // 0x005012BC 
	public override object SyncRoot { get; } // 0x00501394 
	public override bool IsSynchronized { get; } // 0x00503D68 

	// Constructors
	public ArrayListAdapter(IList adaptee); // 0x00500490

	// Methods
	public override int Add(object value); // 0x0050146C
	public override void Clear(); // 0x0050154C
	public override bool Contains(object value); // 0x00501624
	public override int IndexOf(object value); // 0x00501704
	public override int IndexOf(object value, int startIndex); // 0x005017E4
	public override int IndexOf(object value, int startIndex, int count); // 0x005018E0
	public override int LastIndexOf(object value); // 0x00501D64
	public override int LastIndexOf(object value, int startIndex); // 0x00501E5C
	public override int LastIndexOf(object value, int startIndex, int count); // 0x00501E78
	public override void Insert(int index, object value); // 0x005021DC
	public override void InsertRange(int index, ICollection c); // 0x005022C4
	public override void Remove(object value); // 0x005027DC
	public override void RemoveAt(int index); // 0x005028BC
	public override void RemoveRange(int index, int count); // 0x0050299C
	public override void Reverse(); // 0x00502B6C
	public override void Reverse(int index, int count); // 0x00502C54
	public override void SetRange(int index, ICollection c); // 0x0050303C
	public override void CopyTo(Array array); // 0x005035A8
	public override void CopyTo(Array array, int index); // 0x0050368C
	public override void CopyTo(int index, Array array, int arrayIndex, int count); // 0x00503774
	public override IEnumerator GetEnumerator(); // 0x00503E40
	public override IEnumerator GetEnumerator(int index, int count); // 0x00503F18
	public override void AddRange(ICollection c); // 0x00504150
	public override int BinarySearch(object value); // 0x005044F0
	public override int BinarySearch(object value, IComparer comparer); // 0x005044F8
	public override int BinarySearch(int index, int count, object value, IComparer comparer); // 0x005045F8
	public override object Clone(); // 0x00504904
	public override ArrayList GetRange(int index, int count); // 0x00504978
	public override void TrimToSize(); // 0x00504ACC
	public override void Sort(); // 0x00504AD0
	public override void Sort(IComparer comparer); // 0x00504B68
	public override void Sort(int index, int count, IComparer comparer); // 0x00504C60
	private static void Swap(IList list, int x, int y); // 0x005057FC
	internal static void QuickSort(IList list, int left, int right, IComparer comparer); // 0x00504DF8
	public override object[] ToArray(); // 0x00505A98
	public override Array ToArray(Type elementType); // 0x00505C24
}

// Namespace: 
private sealed class EnumeratorWithRange : IEnumerator, ICloneable // TypeDefIndex: 282
{
	// Fields
	private int m_StartIndex; // 0x08
	private int m_Count; // 0x0C
	private int m_MaxCount; // 0x10
	private IEnumerator m_Enumerator; // 0x14

	// Properties
	public object Current { get; } // 0x00505F3C 

	// Constructors
	public EnumeratorWithRange(IEnumerator enumerator, int index, int count); // 0x00504110

	// Methods
	public object Clone(); // 0x00505F34
	public bool MoveNext(); // 0x00506014
	public void Reset(); // 0x00505DA8
}

// Namespace: 
[Serializable]
private class ArrayListWrapper : ArrayList // TypeDefIndex: 283
{
	// Fields
	protected ArrayList m_InnerArrayList; // 0x14

	// Properties
	public override object Item { get; set; } // 0x005063DC 0x00506418
	public override int Count { get; } // 0x0050645C 
	public override int Capacity { get; set; } // 0x00506490 0x005064C4
	public override bool IsFixedSize { get; } // 0x00506500 
	public override bool IsReadOnly { get; } // 0x00506534 
	public override bool IsSynchronized { get; } // 0x00506568 
	public override object SyncRoot { get; } // 0x0050659C 

	// Constructors
	public ArrayListWrapper(ArrayList innerArrayList); // 0x00506354

	// Methods
	public override int Add(object value); // 0x005065D0
	public override void Clear(); // 0x0050660C
	public override bool Contains(object value); // 0x00506640
	public override int IndexOf(object value); // 0x0050667C
	public override int IndexOf(object value, int startIndex); // 0x005066B8
	public override int IndexOf(object value, int startIndex, int count); // 0x005066FC
	public override int LastIndexOf(object value); // 0x00506754
	public override int LastIndexOf(object value, int startIndex); // 0x00506790
	public override int LastIndexOf(object value, int startIndex, int count); // 0x005067D4
	public override void Insert(int index, object value); // 0x0050682C
	public override void InsertRange(int index, ICollection c); // 0x00506870
	public override void Remove(object value); // 0x005068B4
	public override void RemoveAt(int index); // 0x005068F0
	public override void RemoveRange(int index, int count); // 0x0050692C
	public override void Reverse(); // 0x00506970
	public override void Reverse(int index, int count); // 0x005069A4
	public override void SetRange(int index, ICollection c); // 0x005069E8
	public override void CopyTo(Array array); // 0x00506A2C
	public override void CopyTo(Array array, int index); // 0x00506A68
	public override void CopyTo(int index, Array array, int arrayIndex, int count); // 0x00506AAC
	public override IEnumerator GetEnumerator(); // 0x00506B0C
	public override IEnumerator GetEnumerator(int index, int count); // 0x00506B40
	public override void AddRange(ICollection c); // 0x00506B84
	public override int BinarySearch(object value); // 0x00506BC0
	public override int BinarySearch(object value, IComparer comparer); // 0x00506BFC
	public override int BinarySearch(int index, int count, object value, IComparer comparer); // 0x00506C40
	public override object Clone(); // 0x00506CA0
	public override ArrayList GetRange(int index, int count); // 0x00506CD4
	public override void TrimToSize(); // 0x00506D18
	public override void Sort(); // 0x00506D4C
	public override void Sort(IComparer comparer); // 0x00506D80
	public override void Sort(int index, int count, IComparer comparer); // 0x00506DBC
	public override object[] ToArray(); // 0x00506E14
	public override Array ToArray(Type elementType); // 0x00506E48
}

// Namespace: 
[Serializable]
private sealed class SynchronizedArrayListWrapper : ArrayListWrapper // TypeDefIndex: 284
{
	// Fields
	private object m_SyncRoot; // 0x18

	// Properties
	public override object Item { get; set; } // 0x0050AD80 0x0050AE30
	public override int Count { get; } // 0x0050AEDC 
	public override int Capacity { get; set; } // 0x0050AF84 0x0050B02C
	public override bool IsFixedSize { get; } // 0x0050B0CC 
	public override bool IsReadOnly { get; } // 0x0050B174 
	public override bool IsSynchronized { get; } // 0x0050B21C 
	public override object SyncRoot { get; } // 0x0050B224 

	// Constructors
	internal SynchronizedArrayListWrapper(ArrayList innerArrayList); // 0x0050051C

	// Methods
	public override int Add(object value); // 0x0050B22C
	public override void Clear(); // 0x0050B2DC
	public override bool Contains(object value); // 0x0050B374
	public override int IndexOf(object value); // 0x0050B424
	public override int IndexOf(object value, int startIndex); // 0x0050B4D4
	public override int IndexOf(object value, int startIndex, int count); // 0x0050B58C
	public override int LastIndexOf(object value); // 0x0050B658
	public override int LastIndexOf(object value, int startIndex); // 0x0050B708
	public override int LastIndexOf(object value, int startIndex, int count); // 0x0050B7C0
	public override void Insert(int index, object value); // 0x0050B88C
	public override void InsertRange(int index, ICollection c); // 0x0050B938
	public override void Remove(object value); // 0x0050B9E4
	public override void RemoveAt(int index); // 0x0050BA84
	public override void RemoveRange(int index, int count); // 0x0050BB24
	public override void Reverse(); // 0x0050BBD0
	public override void Reverse(int index, int count); // 0x0050BC68
	public override void CopyTo(Array array); // 0x0050BD14
	public override void CopyTo(Array array, int index); // 0x0050BDB4
	public override void CopyTo(int index, Array array, int arrayIndex, int count); // 0x0050BE60
	public override IEnumerator GetEnumerator(); // 0x0050BF30
	public override IEnumerator GetEnumerator(int index, int count); // 0x0050BFD8
	public override void AddRange(ICollection c); // 0x0050C090
	public override int BinarySearch(object value); // 0x0050C130
	public override int BinarySearch(object value, IComparer comparer); // 0x0050C1E0
	public override int BinarySearch(int index, int count, object value, IComparer comparer); // 0x0050C298
	public override object Clone(); // 0x0050C368
	public override ArrayList GetRange(int index, int count); // 0x0050C410
	public override void TrimToSize(); // 0x0050C4C8
	public override void Sort(); // 0x0050C560
	public override void Sort(IComparer comparer); // 0x0050C5F8
	public override void Sort(int index, int count, IComparer comparer); // 0x0050C698
	public override object[] ToArray(); // 0x0050C760
	public override Array ToArray(Type elementType); // 0x0050C808
}

// Namespace: 
[Serializable]
private class FixedSizeArrayListWrapper : ArrayListWrapper // TypeDefIndex: 285
{
	// Properties
	protected virtual string ErrorMessage { get; } // 0x00506E84 
	public override int Capacity { get; set; } // 0x00506EE0 0x00506F14
	public override bool IsFixedSize { get; } // 0x00506FBC 

	// Constructors
	public FixedSizeArrayListWrapper(ArrayList innerList); // 0x00500B08

	// Methods
	public override int Add(object value); // 0x00506FC4
	public override void AddRange(ICollection c); // 0x0050706C
	public override void Clear(); // 0x00507114
	public override void Insert(int index, object value); // 0x005071BC
	public override void InsertRange(int index, ICollection c); // 0x00507264
	public override void Remove(object value); // 0x0050730C
	public override void RemoveAt(int index); // 0x005073B4
	public override void RemoveRange(int index, int count); // 0x0050745C
	public override void TrimToSize(); // 0x00507504
}

// Namespace: 
[Serializable]
private sealed class ReadOnlyArrayListWrapper : FixedSizeArrayListWrapper // TypeDefIndex: 286
{
	// Properties
	protected override string ErrorMessage { get; } // 0x0050A2A4 
	public override bool IsReadOnly { get; } // 0x0050A300 
	public override object Item { get; set; } // 0x0050A308 0x0050A344

	// Constructors
	public ReadOnlyArrayListWrapper(ArrayList innerArrayList); // 0x00500894

	// Methods
	public override void Reverse(); // 0x0050A3D8
	public override void Reverse(int index, int count); // 0x0050A46C
	public override void SetRange(int index, ICollection c); // 0x0050A500
	public override void Sort(); // 0x0050A594
	public override void Sort(IComparer comparer); // 0x0050A628
	public override void Sort(int index, int count, IComparer comparer); // 0x0050A6BC
}

// Namespace: 
[Serializable]
private sealed class RangedArrayList : ArrayListWrapper // TypeDefIndex: 287
{
	// Fields
	private int m_InnerIndex; // 0x18
	private int m_InnerCount; // 0x1C
	private int m_InnerStateChanges; // 0x20

	// Properties
	public override bool IsSynchronized { get; } // 0x00508758 
	public override object Item { get; set; } // 0x00508760 0x00508848
	public override int Count { get; } // 0x00508938 
	public override int Capacity { get; set; } // 0x00508A14 0x00508A48

	// Constructors
	public RangedArrayList(ArrayList innerList, int index, int count); // 0x004FFC18

	// Methods
	private void VerifyStateChanges(); // 0x00508950
	public override int Add(object value); // 0x00508AE4
	public override void Clear(); // 0x00508B5C
	public override bool Contains(object value); // 0x00508BCC
	public override int IndexOf(object value); // 0x00508C24
	public override int IndexOf(object value, int startIndex); // 0x00508C44
	public override int IndexOf(object value, int startIndex, int count); // 0x00508C64
	public override int LastIndexOf(object value); // 0x00508E7C
	public override int LastIndexOf(object value, int startIndex); // 0x00508E9C
	public override int LastIndexOf(object value, int startIndex, int count); // 0x00508EB8
	public override void Insert(int index, object value); // 0x00509054
	public override void InsertRange(int index, ICollection c); // 0x0050919C
	public override void Remove(object value); // 0x0050936C
	public override void RemoveAt(int index); // 0x005093CC
	public override void RemoveRange(int index, int count); // 0x0050950C
	public override void Reverse(); // 0x00509604
	public override void Reverse(int index, int count); // 0x00509610
	public override void SetRange(int index, ICollection c); // 0x005096FC
	public override void CopyTo(Array array); // 0x00509838
	public override void CopyTo(Array array, int index); // 0x00509864
	public override void CopyTo(int index, Array array, int arrayIndex, int count); // 0x00509890
	public override IEnumerator GetEnumerator(); // 0x00509974
	public override IEnumerator GetEnumerator(int index, int count); // 0x00509980
	public override void AddRange(ICollection c); // 0x00509A48
	public override int BinarySearch(object value); // 0x00509B84
	public override int BinarySearch(object value, IComparer comparer); // 0x00509D20
	public override int BinarySearch(int index, int count, object value, IComparer comparer); // 0x00509C3C
	public override object Clone(); // 0x00509D50
	public override ArrayList GetRange(int index, int count); // 0x00509E5C
	public override void TrimToSize(); // 0x00509F24
	public override void Sort(); // 0x00509FAC
	public override void Sort(IComparer comparer); // 0x0050A054
	public override void Sort(int index, int count, IComparer comparer); // 0x0050A078
	public override object[] ToArray(); // 0x0050A178
	public override Array ToArray(Type elementType); // 0x0050A230
}

// Namespace: 
[Serializable]
private sealed class SynchronizedListWrapper : ListWrapper // TypeDefIndex: 288
{
	// Fields
	private object m_SyncRoot; // 0x0C

	// Properties
	public override int Count { get; } // 0x0050C8B8 
	public override bool IsSynchronized { get; } // 0x0050CA00 
	public override object SyncRoot { get; } // 0x0050CA08 
	public override bool IsFixedSize { get; } // 0x0050CB50 
	public override bool IsReadOnly { get; } // 0x0050CC98 
	public override object Item { get; set; } // 0x0050CDE0 0x0050CF30

	// Constructors
	public SynchronizedListWrapper(IList innerList); // 0x005006B4

	// Methods
	public override int Add(object value); // 0x0050D08C
	public override void Clear(); // 0x0050D1DC
	public override bool Contains(object value); // 0x0050D318
	public override int IndexOf(object value); // 0x0050D468
	public override void Insert(int index, object value); // 0x0050D5B8
	public override void Remove(object value); // 0x0050D714
	public override void RemoveAt(int index); // 0x0050D858
	public override void CopyTo(Array array, int index); // 0x0050D99C
	public override IEnumerator GetEnumerator(); // 0x0050DAF8
}

// Namespace: 
[Serializable]
private class FixedSizeListWrapper : ListWrapper // TypeDefIndex: 289
{
	// Properties
	protected virtual string ErrorMessage { get; } // 0x005075CC 
	public override bool IsFixedSize { get; } // 0x00507628 

	// Constructors
	public FixedSizeListWrapper(IList innerList); // 0x00500C68

	// Methods
	public override int Add(object value); // 0x00507630
	public override void Clear(); // 0x005076D8
	public override void Insert(int index, object value); // 0x00507780
	public override void Remove(object value); // 0x00507828
	public override void RemoveAt(int index); // 0x005078D0
}

// Namespace: 
[Serializable]
private sealed class ReadOnlyListWrapper : FixedSizeListWrapper // TypeDefIndex: 290
{
	// Properties
	protected override string ErrorMessage { get; } // 0x0050A750 
	public override bool IsReadOnly { get; } // 0x0050A7AC 
	public override object Item { get; set; } // 0x0050A7B4 0x0050A894

	// Constructors
	public ReadOnlyListWrapper(IList innerList); // 0x005009F4

}

// Namespace: 
[Serializable]
private class ListWrapper : IEnumerable, ICollection, IList // TypeDefIndex: 291
{
	// Fields
	protected IList m_InnerList; // 0x08

	// Properties
	public virtual object Item { get; set; } // 0x00507978 0x00507A58
	public virtual int Count { get; } // 0x00507B40 
	public virtual bool IsSynchronized { get; } // 0x00507C18 
	public virtual object SyncRoot { get; } // 0x00507CF0 
	public virtual bool IsFixedSize { get; } // 0x00507DC8 
	public virtual bool IsReadOnly { get; } // 0x00507EA0 

	// Constructors
	public ListWrapper(IList innerList); // 0x005075AC

	// Methods
	public virtual int Add(object value); // 0x00507F78
	public virtual void Clear(); // 0x00508058
	public virtual bool Contains(object value); // 0x00508130
	public virtual int IndexOf(object value); // 0x00508210
	public virtual void Insert(int index, object value); // 0x005082F0
	public virtual void Remove(object value); // 0x005083D8
	public virtual void RemoveAt(int index); // 0x005084B8
	public virtual void CopyTo(Array array, int index); // 0x00508598
	public virtual IEnumerator GetEnumerator(); // 0x00508680
}

// Namespace: System.Collections
[Serializable]
public sealed class BitArray : IEnumerable, ICloneable, ICollection // TypeDefIndex: 292
{
	// Fields
	private int[] m_array; // 0x08
	private int m_length; // 0x0C
	private int _version; // 0x10

	// Properties
	public int Count { get; } // 0x0050E4F0 
	public bool IsReadOnly { get; } // 0x0050E4F8 
	public bool IsSynchronized { get; } // 0x0050E500 
	public bool Item { get; set; } // 0x0050E508 0x0050DF18
	public int Length { get; set; } // 0x0050E708 0x0050E710
	public object SyncRoot { get; } // 0x0050E8D8 

	// Constructors
	public BitArray(BitArray bits); // 0x0050DC40
	public BitArray(bool[] values); // 0x0050DDE0
	public BitArray(byte[] bytes); // 0x0050DF1C
	public BitArray(int[] values); // 0x0050E11C
	public BitArray(int length); // 0x0050E210
	public BitArray(int length, bool defaultValue); // 0x0050E2F8
	private BitArray(int[] array, int length); // 0x0050E380

	// Methods
	private byte getByte(int byteIndex); // 0x0050E3A8
	private void setByte(int byteIndex, byte value); // 0x0050E05C
	private void checkOperand(BitArray operand); // 0x0050E418
	public object Clone(); // 0x0050E8DC
	public void CopyTo(Array array, int index); // 0x0050E94C
	public BitArray Not(); // 0x0050EDF0
	public BitArray And(BitArray value); // 0x0050EE98
	public BitArray Or(BitArray value); // 0x0050EF7C
	public BitArray Xor(BitArray value); // 0x0050F060
	public bool Get(int index); // 0x0050E50C
	public void Set(int index, bool value); // 0x0050E600
	public void SetAll(bool value); // 0x0050F144
	public IEnumerator GetEnumerator(); // 0x0050F1F8
}

// Namespace: 
[Serializable]
private class BitArrayEnumerator : IEnumerator, ICloneable // TypeDefIndex: 293
{
	// Fields
	private BitArray _bitArray; // 0x08
	private bool _current; // 0x0C
	private int _index; // 0x10
	private int _version; // 0x14

	// Properties
	public object Current { get; } // 0x00385690 

	// Constructors
	public BitArrayEnumerator(BitArray ba); // 0x00385648

	// Methods
	public object Clone(); // 0x00385688
	public bool MoveNext(); // 0x003857CC
	public void Reset(); // 0x00385914
	private void checkVersion(); // 0x00385864
}

// Namespace: System.Collections
[Serializable]
public class CaseInsensitiveComparer : IComparer // TypeDefIndex: 294
{
	// Fields
	private static CaseInsensitiveComparer defaultComparer; // 0x00
	private static CaseInsensitiveComparer defaultInvariantComparer; // 0x04
	private CultureInfo culture; // 0x08

	// Properties
	public static CaseInsensitiveComparer Default { get; } // 0x00385B90 
	public static CaseInsensitiveComparer DefaultInvariant { get; } // 0x00385C1C 

	// Constructors
	public CaseInsensitiveComparer(); // 0x00385930
	private CaseInsensitiveComparer(bool invariant); // 0x003859C0
	public CaseInsensitiveComparer(CultureInfo culture); // 0x003859C8
	private static CaseInsensitiveComparer(); // 0x00385B00

	// Methods
	public int Compare(object a, object b); // 0x00385CA8
}

// Namespace: System.Collections
[Serializable]
public class CaseInsensitiveHashCodeProvider : IHashCodeProvider // TypeDefIndex: 295
{
	// Fields
	private static readonly CaseInsensitiveHashCodeProvider singletonInvariant; // 0x00
	private static CaseInsensitiveHashCodeProvider singleton; // 0x04
	private static readonly object sync; // 0x08
	private TextInfo m_text; // 0x08

	// Properties
	public static CaseInsensitiveHashCodeProvider Default { get; } // 0x003865A0 
	public static CaseInsensitiveHashCodeProvider DefaultInvariant { get; } // 0x00386AA0 

	// Constructors
	public CaseInsensitiveHashCodeProvider(); // 0x00386164
	public CaseInsensitiveHashCodeProvider(CultureInfo culture); // 0x0038637C
	private static CaseInsensitiveHashCodeProvider(); // 0x003864C8

	// Methods
	private static bool AreEqual(CultureInfo a, CultureInfo b); // 0x003862A0
	private static bool AreEqual(TextInfo info, CultureInfo culture); // 0x003869CC
	public int GetHashCode(object obj); // 0x00386B2C
}

// Namespace: System.Collections
[Serializable]
public abstract class CollectionBase : IEnumerable, ICollection, IList // TypeDefIndex: 296
{
	// Fields
	private ArrayList list; // 0x08

	// Properties
	private object System.Collections.ICollection.SyncRoot { get; } // 0x00386F2C 
	private bool System.Collections.ICollection.IsSynchronized { get; } // 0x00386F64 
	private bool System.Collections.IList.IsFixedSize { get; } // 0x00387528 
	private bool System.Collections.IList.IsReadOnly { get; } // 0x00387560 
	private object System.Collections.IList.Item { get; set; } // 0x00387598 0x003875D8
	public int Count { get; } // 0x00387868 
	public int Capacity { get; set; } // 0x00387A0C 0x00387AB0
	protected ArrayList InnerList { get; } // 0x00386EAC 
	protected IList List { get; } // 0x00387B5C 

	// Constructors
	protected CollectionBase(); // 0x00386DD8
	protected CollectionBase(int capacity); // 0x00386DE0

	// Methods
	private void System.Collections.ICollection.CopyTo(Array array, int index); // 0x00386E64
	private int System.Collections.IList.Add(object value); // 0x00386F9C
	private bool System.Collections.IList.Contains(object value); // 0x0038717C
	private int System.Collections.IList.IndexOf(object value); // 0x003871BC
	private void System.Collections.IList.Insert(int index, object value); // 0x003871FC
	private void System.Collections.IList.Remove(object value); // 0x003873AC
	public IEnumerator GetEnumerator(); // 0x003878A0
	public void Clear(); // 0x003878D8
	public void RemoveAt(int index); // 0x00387940
	protected virtual void OnClear(); // 0x00387B60
	protected virtual void OnClearComplete(); // 0x00387B64
	protected virtual void OnInsert(int index, object value); // 0x00387B68
	protected virtual void OnInsertComplete(int index, object value); // 0x00387B6C
	protected virtual void OnRemove(int index, object value); // 0x00387B70
	protected virtual void OnRemoveComplete(int index, object value); // 0x00387B74
	protected virtual void OnSet(int index, object oldValue, object newValue); // 0x00387B78
	protected virtual void OnSetComplete(int index, object oldValue, object newValue); // 0x00387B7C
	protected virtual void OnValidate(object value); // 0x00387B80
}

// Namespace: System.Collections
internal sealed class CollectionDebuggerView // TypeDefIndex: 297
{
	// Fields
	private readonly ICollection c; // 0x08

	// Properties
	public object[] Items { get; } // 0x00387C48 

	// Constructors
	public CollectionDebuggerView(ICollection col); // 0x00387C28

}

// Namespace: System.Collections
[Serializable]
public sealed class Comparer : ISerializable, IComparer // TypeDefIndex: 298
{
	// Fields
	public static readonly Comparer Default; // 0x00
	public static readonly Comparer DefaultInvariant; // 0x04
	private CompareInfo m_compareInfo; // 0x08

	// Constructors
	private Comparer(); // 0x00387DE0
	public Comparer(CultureInfo culture); // 0x00387DE8
	private static Comparer(); // 0x00387EBC

	// Methods
	public int Compare(object a, object b); // 0x00385E84
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00387F94
}

// Namespace: System.Collections
[Serializable]
public abstract class DictionaryBase : IEnumerable, ICollection, IDictionary // TypeDefIndex: 299
{
	// Fields
	private Hashtable hashtable; // 0x08

	// Properties
	private bool System.Collections.IDictionary.IsFixedSize { get; } // 0x00388180 
	private bool System.Collections.IDictionary.IsReadOnly { get; } // 0x00388188 
	private object System.Collections.IDictionary.Item { get; set; } // 0x00388190 0x003881F4
	private ICollection System.Collections.IDictionary.Keys { get; } // 0x003883E8 
	private ICollection System.Collections.IDictionary.Values { get; } // 0x0038841C 
	private bool System.Collections.ICollection.IsSynchronized { get; } // 0x0038883C 
	private object System.Collections.ICollection.SyncRoot { get; } // 0x00388870 
	public int Count { get; } // 0x00388938 
	protected IDictionary Dictionary { get; } // 0x0038896C 
	protected Hashtable InnerHashtable { get; } // 0x00388970 

	// Constructors
	protected DictionaryBase(); // 0x003880C0

	// Methods
	private void System.Collections.IDictionary.Add(object key, object value); // 0x00388450
	private void System.Collections.IDictionary.Remove(object key); // 0x003885F8
	private bool System.Collections.IDictionary.Contains(object key); // 0x00388800
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x003888A4
	public void Clear(); // 0x003888D8
	public void CopyTo(Array array, int index); // 0x00388978
	private void DoCopy(Array array, int index); // 0x00388BB4
	public IDictionaryEnumerator GetEnumerator(); // 0x00388F18
	protected virtual void OnClear(); // 0x00388F4C
	protected virtual void OnClearComplete(); // 0x00388F50
	protected virtual object OnGet(object key, object currentValue); // 0x00388F54
	protected virtual void OnInsert(object key, object value); // 0x00388F5C
	protected virtual void OnInsertComplete(object key, object value); // 0x00388F60
	protected virtual void OnSet(object key, object oldValue, object newValue); // 0x00388F64
	protected virtual void OnSetComplete(object key, object oldValue, object newValue); // 0x00388F68
	protected virtual void OnRemove(object key, object value); // 0x00388F6C
	protected virtual void OnRemoveComplete(object key, object value); // 0x00388F70
	protected virtual void OnValidate(object key, object value); // 0x00388F74
}

// Namespace: System.Collections
[Serializable]
public struct DictionaryEntry // TypeDefIndex: 300
{
	// Fields
	private object _key; // 0x08
	private object _value; // 0x0C

	// Properties
	public object Key { get; set; } // 0x000A7038 0x000A7040
	public object Value { get; set; } // 0x000A7048 0x000A7050

	// Constructors
	public DictionaryEntry(object key, object value); // 0x000A702C

}

// Namespace: System.Collections
[Serializable]
public class Hashtable : IEnumerable, ICloneable, ISerializable, ICollection, IDictionary, IDeserializationCallback // TypeDefIndex: 301
{
	// Fields
	private const int CHAIN_MARKER = -2147483648; // 0x00
	private int inUse; // 0x08
	private int modificationCount; // 0x0C
	private float loadFactor; // 0x10
	private Slot[] table; // 0x14
	private int[] hashes; // 0x18
	private int threshold; // 0x1C
	private HashKeys hashKeys; // 0x20
	private HashValues hashValues; // 0x24
	private IHashCodeProvider hcpRef; // 0x28
	private IComparer comparerRef; // 0x2C
	private SerializationInfo serializationInfo; // 0x30
	private IEqualityComparer equalityComparer; // 0x34
	private static readonly int[] primeTbl; // 0x00

	// Properties
	protected IComparer comparer { get; set; } // 0x00389EF0 0x00389EE8
	protected IHashCodeProvider hcp { get; set; } // 0x00389F00 0x00389EF8
	protected IEqualityComparer EqualityComparer { get; } // 0x00389F08 
	public virtual int Count { get; } // 0x00389F10 
	public virtual bool IsSynchronized { get; } // 0x00389F18 
	public virtual object SyncRoot { get; } // 0x00389F20 
	public virtual bool IsFixedSize { get; } // 0x00389F24 
	public virtual bool IsReadOnly { get; } // 0x00389F2C 
	public virtual ICollection Keys { get; } // 0x00389F34 
	public virtual ICollection Values { get; } // 0x0038A05C 
	public virtual object Item { get; set; } // 0x0038A184 0x0038A3A0

	// Constructors
	public Hashtable(); // 0x00388154
	public Hashtable(int capacity, float loadFactor, IHashCodeProvider hcp, IComparer comparer); // 0x00389060
	public Hashtable(int capacity, float loadFactor); // 0x00389038
	public Hashtable(int capacity); // 0x0038959C
	internal Hashtable(Hashtable source); // 0x003895C4
	public Hashtable(int capacity, IHashCodeProvider hcp, IComparer comparer); // 0x00389764
	public Hashtable(IDictionary d, float loadFactor, IHashCodeProvider hcp, IComparer comparer); // 0x0038978C
	public Hashtable(IDictionary d, float loadFactor); // 0x00389B7C
	public Hashtable(IDictionary d); // 0x00389BA0
	public Hashtable(IDictionary d, IHashCodeProvider hcp, IComparer comparer); // 0x00389BC8
	public Hashtable(IHashCodeProvider hcp, IComparer comparer); // 0x00389BF0
	public Hashtable(SerializationInfo info, StreamingContext context); // 0x00389C18
	public Hashtable(IDictionary d, IEqualityComparer equalityComparer); // 0x00389C38
	public Hashtable(IDictionary d, float loadFactor, IEqualityComparer equalityComparer); // 0x00389C70
	public Hashtable(IEqualityComparer equalityComparer); // 0x00389CA4
	public Hashtable(int capacity, IEqualityComparer equalityComparer); // 0x00389D14
	public Hashtable(int capacity, float loadFactor, IEqualityComparer equalityComparer); // 0x00389CE0
	private static Hashtable(); // 0x00389D4C

	// Methods
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x00389DE4
	public virtual void CopyTo(Array array, int arrayIndex); // 0x0038A8E0
	public virtual void Add(object key, object value); // 0x0038AC94
	public virtual void Clear(); // 0x0038ACB0
	public virtual bool Contains(object key); // 0x0038ADAC
	public virtual IDictionaryEnumerator GetEnumerator(); // 0x0038AFDC
	public virtual void Remove(object key); // 0x0038B050
	public virtual bool ContainsKey(object key); // 0x0038B214
	public virtual bool ContainsValue(object value); // 0x0038B224
	public virtual object Clone(); // 0x0038B42C
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0038B49C
	public virtual void OnDeserialization(object sender); // 0x0038B8B8
	public static Hashtable Synchronized(Hashtable table); // 0x0038C1F4
	protected virtual int GetHash(object key); // 0x0038C3B0
	protected virtual bool KeyEquals(object item, object key); // 0x0038C524
	private void AdjustThreshold(); // 0x0038C1A8
	private void SetTable(Slot[] table, int[] hashes); // 0x003894D8
	private int Find(object key); // 0x0038ADCC
	private void Rehash(); // 0x0038C724
	private void PutImpl(object key, object value, bool overwrite); // 0x0038A3BC
	private void CopyToArray(Array arr, int i, EnumeratorMode mode); // 0x0038B6E0
	internal static bool TestPrime(int x); // 0x0038CA30
	internal static int CalcPrime(int x); // 0x0038CAC0
	internal static int ToPrime(int x); // 0x003892E8
}

// Namespace: 
[Serializable]
internal struct Slot // TypeDefIndex: 302
{
	// Fields
	internal object key; // 0x08
	internal object value; // 0x0C

}

// Namespace: 
[Serializable]
internal class KeyMarker // TypeDefIndex: 303
{
	// Fields
	public static readonly KeyMarker Removed; // 0x00

	// Constructors
	public KeyMarker(); // 0x0038D834
	private static KeyMarker(); // 0x0038D83C

}

// Namespace: 
private enum EnumeratorMode // TypeDefIndex: 304
{
	KEY_MODE = 0,
	VALUE_MODE = 1,
	ENTRY_MODE = 2
}

// Namespace: 
[Serializable]
private sealed class Enumerator : IEnumerator, IDictionaryEnumerator // TypeDefIndex: 305
{
	// Fields
	private Hashtable host; // 0x08
	private int stamp; // 0x0C
	private int pos; // 0x10
	private int size; // 0x14
	private EnumeratorMode mode; // 0x18
	private object currentKey; // 0x1C
	private object currentValue; // 0x20
	private static readonly string xstr; // 0x00

	// Properties
	public DictionaryEntry Entry { get; } // 0x0038CEDC 
	public object Key { get; } // 0x0038CF90 
	public object Value { get; } // 0x0038D038 
	public object Current { get; } // 0x0038D0E0 

	// Constructors
	public Enumerator(Hashtable host, EnumeratorMode mode); // 0x00389E58
	public Enumerator(Hashtable host); // 0x0038CC00
	private static Enumerator(); // 0x0038CC08

	// Methods
	private void FailFast(); // 0x0038CC7C
	public void Reset(); // 0x0038CBD8
	public bool MoveNext(); // 0x0038CD74
}

// Namespace: 
[Serializable]
private class HashKeys : IEnumerable, ICollection // TypeDefIndex: 306
{
	// Fields
	private Hashtable host; // 0x08

	// Properties
	public virtual int Count { get; } // 0x0038D214 
	public virtual bool IsSynchronized { get; } // 0x0038D248 
	public virtual object SyncRoot { get; } // 0x0038D27C 

	// Constructors
	public HashKeys(Hashtable host); // 0x00389FB4

	// Methods
	public virtual void CopyTo(Array array, int arrayIndex); // 0x0038D2B0
	public virtual IEnumerator GetEnumerator(); // 0x0038D4AC
}

// Namespace: 
[Serializable]
private class HashValues : IEnumerable, ICollection // TypeDefIndex: 307
{
	// Fields
	private Hashtable host; // 0x08

	// Properties
	public virtual int Count { get; } // 0x0038D524 
	public virtual bool IsSynchronized { get; } // 0x0038D558 
	public virtual object SyncRoot { get; } // 0x0038D58C 

	// Constructors
	public HashValues(Hashtable host); // 0x0038A0DC

	// Methods
	public virtual void CopyTo(Array array, int arrayIndex); // 0x0038D5C0
	public virtual IEnumerator GetEnumerator(); // 0x0038D7BC
}

// Namespace: 
[Serializable]
private class SyncHashtable : Hashtable, IEnumerable // TypeDefIndex: 308
{
	// Fields
	private Hashtable host; // 0x38

	// Properties
	public override int Count { get; } // 0x0038DB1C 
	public override bool IsSynchronized { get; } // 0x0038DB50 
	public override object SyncRoot { get; } // 0x0038DB58 
	public override bool IsFixedSize { get; } // 0x0038DB8C 
	public override bool IsReadOnly { get; } // 0x0038DBC0 
	public override ICollection Keys { get; } // 0x0038DBF4 
	public override ICollection Values { get; } // 0x0038DCC0 
	public override object Item { get; set; } // 0x0038DD8C 0x0038DDC8

	// Constructors
	public SyncHashtable(Hashtable host); // 0x0038C2C4
	internal SyncHashtable(SerializationInfo info, StreamingContext context); // 0x0038D8B0

	// Methods
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x0038DA20
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0038DA98
	public override void CopyTo(Array array, int arrayIndex); // 0x0038DE98
	public override void Add(object key, object value); // 0x0038DEDC
	public override void Clear(); // 0x0038DFAC
	public override bool Contains(object key); // 0x0038E068
	public override IDictionaryEnumerator GetEnumerator(); // 0x0038E0A8
	public override void Remove(object key); // 0x0038E120
	public override bool ContainsKey(object key); // 0x0038E1E4
	public override bool ContainsValue(object value); // 0x0038E220
	public override object Clone(); // 0x0038E25C
}

// Namespace: System.Collections
public interface IComparer // TypeDefIndex: 309
{
	// Methods
	int Compare(object x, object y);
}

// Namespace: System.Collections
public interface IDictionary : IEnumerable, ICollection // TypeDefIndex: 310
{
	// Properties
	bool IsFixedSize { get; }
	bool IsReadOnly { get; }
	object Item { get; set; }
	ICollection Keys { get; }
	ICollection Values { get; }

	// Methods
	void Add(object key, object value);
	void Clear();
	bool Contains(object key);
	IDictionaryEnumerator GetEnumerator();
	void Remove(object key);
}

// Namespace: System.Collections
public interface IDictionaryEnumerator : IEnumerator // TypeDefIndex: 311
{
	// Properties
	DictionaryEntry Entry { get; }
	object Key { get; }
	object Value { get; }

}

// Namespace: System.Collections
public interface IEqualityComparer // TypeDefIndex: 312
{
	// Methods
	bool Equals(object x, object y);
	int GetHashCode(object obj);
}

// Namespace: System.Collections
public interface IHashCodeProvider // TypeDefIndex: 313
{
	// Methods
	int GetHashCode(object obj);
}

// Namespace: System.Collections
[Serializable]
public class Queue : IEnumerable, ICloneable, ICollection // TypeDefIndex: 314
{
	// Fields
	private object[] _array; // 0x08
	private int _head; // 0x0C
	private int _size; // 0x10
	private int _tail; // 0x14
	private int _growFactor; // 0x18
	private int _version; // 0x1C

	// Properties
	public virtual int Count { get; } // 0x0038E994 
	public virtual bool IsSynchronized { get; } // 0x0038E99C 
	public virtual object SyncRoot { get; } // 0x0038E9A4 

	// Constructors
	public Queue(); // 0x0038E3E4
	public Queue(int capacity); // 0x0038E570
	public Queue(ICollection col); // 0x0038E578
	public Queue(int capacity, float growFactor); // 0x0038E3F0

	// Methods
	public virtual void CopyTo(Array array, int index); // 0x0038E9A8
	public virtual IEnumerator GetEnumerator(); // 0x0038EBA8
	public virtual object Clone(); // 0x0038EC58
	public virtual void Clear(); // 0x0038ED70
	public virtual bool Contains(object obj); // 0x0038EE14
	public virtual object Dequeue(); // 0x0038EF44
	public virtual void Enqueue(object obj); // 0x0038F0A0
	public virtual object Peek(); // 0x0038F298
	public static Queue Synchronized(Queue queue); // 0x0038F370
	public virtual object[] ToArray(); // 0x0038F46C
	public virtual void TrimToSize(); // 0x0038F4F4
	private void grow(); // 0x0038F188
}

// Namespace: 
private class SyncQueue : Queue // TypeDefIndex: 315
{
	// Fields
	private Queue queue; // 0x20

	// Properties
	public override int Count { get; } // 0x0038F980 
	public override bool IsSynchronized { get; } // 0x0038FA28 
	public override object SyncRoot { get; } // 0x0038FA30 

	// Constructors
	internal SyncQueue(Queue queue); // 0x0038F448

	// Methods
	public override void CopyTo(Array array, int index); // 0x0038FA64
	public override IEnumerator GetEnumerator(); // 0x0038FB10
	public override object Clone(); // 0x0038FBB8
	public override void Clear(); // 0x0038FD24
	public override void TrimToSize(); // 0x0038FDBC
	public override bool Contains(object obj); // 0x0038FE54
	public override object Dequeue(); // 0x0038FF04
	public override void Enqueue(object obj); // 0x0038FFAC
	public override object Peek(); // 0x0039004C
	public override object[] ToArray(); // 0x003900F4
}

// Namespace: 
[Serializable]
private class QueueEnumerator : IEnumerator, ICloneable // TypeDefIndex: 316
{
	// Fields
	private Queue queue; // 0x08
	private int _version; // 0x0C
	private int current; // 0x10

	// Properties
	public virtual object Current { get; } // 0x0038F640 

	// Constructors
	internal QueueEnumerator(Queue q); // 0x0038EC18

	// Methods
	public object Clone(); // 0x0038F594
	public virtual bool MoveNext(); // 0x0038F7D0
	public virtual void Reset(); // 0x0038F8C8
}

// Namespace: System.Collections
[Serializable]
public abstract class ReadOnlyCollectionBase : IEnumerable, ICollection // TypeDefIndex: 317
{
	// Fields
	private ArrayList list; // 0x08

	// Properties
	private object System.Collections.ICollection.SyncRoot { get; } // 0x003902D4 
	private bool System.Collections.ICollection.IsSynchronized { get; } // 0x00390308 
	public virtual int Count { get; } // 0x0039033C 
	protected ArrayList InnerList { get; } // 0x003903A4 

	// Constructors
	protected ReadOnlyCollectionBase(); // 0x0039019C

	// Methods
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x00390218
	private void System.Collections.ICollection.CopyTo(Array array, int index); // 0x00390228
	public virtual IEnumerator GetEnumerator(); // 0x00390370
}

// Namespace: System.Collections
[Serializable]
public class SortedList : IEnumerable, ICloneable, ICollection, IDictionary // TypeDefIndex: 318
{
	// Fields
	private static readonly int INITIAL_SIZE; // 0x00
	private int inUse; // 0x08
	private int modificationCount; // 0x0C
	private Slot[] table; // 0x10
	private IComparer comparer; // 0x14
	private int defaultCapacity; // 0x18

	// Properties
	public virtual int Count { get; } // 0x00390BB8 
	public virtual bool IsSynchronized { get; } // 0x00390BC0 
	public virtual object SyncRoot { get; } // 0x00390BC8 
	public virtual bool IsFixedSize { get; } // 0x00390BCC 
	public virtual bool IsReadOnly { get; } // 0x00390BD4 
	public virtual ICollection Keys { get; } // 0x00390BDC 
	public virtual ICollection Values { get; } // 0x00390CF4 
	public virtual object Item { get; set; } // 0x00390E0C 0x00390F14
	public virtual int Capacity { get; set; } // 0x00391918 0x0039193C

	// Constructors
	public SortedList(); // 0x003903AC
	public SortedList(int initialCapacity); // 0x0039056C
	public SortedList(IComparer comparer, int capacity); // 0x00390448
	public SortedList(IComparer comparer); // 0x00390608
	public SortedList(IDictionary d); // 0x003906B8
	public SortedList(IDictionary d, IComparer comparer); // 0x003906C0
	private static SortedList(); // 0x00390A64

	// Methods
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x00390ACC
	public virtual void Add(object key, object value); // 0x00391A94
	public virtual void Clear(); // 0x00391AB0
	public virtual bool Contains(object key); // 0x00391B70
	public virtual IDictionaryEnumerator GetEnumerator(); // 0x00391CDC
	public virtual void Remove(object key); // 0x00391D50
	public virtual void CopyTo(Array array, int arrayIndex); // 0x00391D94
	public virtual object Clone(); // 0x00392120
	public virtual IList GetKeyList(); // 0x003921B0
	public virtual IList GetValueList(); // 0x00392220
	public virtual void RemoveAt(int index); // 0x00392290
	public virtual int IndexOfKey(object key); // 0x00392404
	public virtual int IndexOfValue(object value); // 0x00392564
	public virtual bool ContainsKey(object key); // 0x003925F4
	public virtual bool ContainsValue(object value); // 0x0039275C
	public virtual object GetByIndex(int index); // 0x00392788
	public virtual void SetByIndex(int index, object value); // 0x0039288C
	public virtual object GetKey(int index); // 0x00392994
	public static SortedList Synchronized(SortedList list); // 0x00392A98
	public virtual void TrimToSize(); // 0x00392C44
	private void Resize(int n, bool copy); // 0x00392CA8
	private void EnsureCapacity(int n, int free); // 0x00392D50
	private void PutImpl(object key, object value, bool overwrite); // 0x003912A0
	private object GetImpl(object key); // 0x00390EB4
	private void InitTable(int capacity, bool forceSize); // 0x00390578
	private void CopyToArray(Array arr, int i, EnumeratorMode mode); // 0x00392F00
	private int Find(object key); // 0x003910A4
}

// Namespace: 
[Serializable]
internal struct Slot // TypeDefIndex: 319
{
	// Fields
	internal object key; // 0x08
	internal object value; // 0x0C

}

// Namespace: 
private enum EnumeratorMode // TypeDefIndex: 320
{
	KEY_MODE = 0,
	VALUE_MODE = 1,
	ENTRY_MODE = 2
}

// Namespace: 
private sealed class Enumerator : IEnumerator, ICloneable, IDictionaryEnumerator // TypeDefIndex: 321
{
	// Fields
	private SortedList host; // 0x08
	private int stamp; // 0x0C
	private int pos; // 0x10
	private int size; // 0x14
	private EnumeratorMode mode; // 0x18
	private object currentKey; // 0x1C
	private object currentValue; // 0x20
	private bool invalid; // 0x24
	private static readonly string xstr; // 0x00

	// Properties
	public DictionaryEntry Entry { get; } // 0x003934B0 
	public object Key { get; } // 0x003935B8 
	public object Value { get; } // 0x003936B4 
	public object Current { get; } // 0x003937B0 

	// Constructors
	public Enumerator(SortedList host, EnumeratorMode mode); // 0x00390B40
	public Enumerator(SortedList host); // 0x003932AC
	private static Enumerator(); // 0x003932B4

	// Methods
	public void Reset(); // 0x00393198
	public bool MoveNext(); // 0x00393328
	public object Clone(); // 0x003939B0
}

// Namespace: 
[Serializable]
private class ListKeys : IEnumerable, ICollection, IList // TypeDefIndex: 322
{
	// Fields
	private SortedList host; // 0x08

	// Properties
	public virtual int Count { get; } // 0x00393AD4 
	public virtual bool IsSynchronized { get; } // 0x00393B08 
	public virtual object SyncRoot { get; } // 0x00393B3C 
	public virtual bool IsFixedSize { get; } // 0x00393BB4 
	public virtual bool IsReadOnly { get; } // 0x00393BBC 
	public virtual object Item { get; set; } // 0x00393BC4 0x00393C00

	// Constructors
	public ListKeys(SortedList host); // 0x00390C4C

	// Methods
	public virtual void CopyTo(Array array, int arrayIndex); // 0x00393B70
	public virtual int Add(object value); // 0x00393C9C
	public virtual void Clear(); // 0x00393D38
	public virtual bool Contains(object key); // 0x00393DD4
	public virtual int IndexOf(object key); // 0x00393E10
	public virtual void Insert(int index, object value); // 0x00393E4C
	public virtual void Remove(object value); // 0x00393EE8
	public virtual void RemoveAt(int index); // 0x00393F84
	public virtual IEnumerator GetEnumerator(); // 0x00394020
}

// Namespace: 
[Serializable]
private class ListValues : IEnumerable, ICollection, IList // TypeDefIndex: 323
{
	// Fields
	private SortedList host; // 0x08

	// Properties
	public virtual int Count { get; } // 0x00394098 
	public virtual bool IsSynchronized { get; } // 0x003940CC 
	public virtual object SyncRoot { get; } // 0x00394100 
	public virtual bool IsFixedSize { get; } // 0x00394178 
	public virtual bool IsReadOnly { get; } // 0x00394180 
	public virtual object Item { get; set; } // 0x00394188 0x003941C4

	// Constructors
	public ListValues(SortedList host); // 0x00390D64

	// Methods
	public virtual void CopyTo(Array array, int arrayIndex); // 0x00394134
	public virtual int Add(object value); // 0x00394260
	public virtual void Clear(); // 0x003942FC
	public virtual bool Contains(object value); // 0x00394398
	public virtual int IndexOf(object value); // 0x003943D4
	public virtual void Insert(int index, object value); // 0x00394410
	public virtual void Remove(object value); // 0x003944AC
	public virtual void RemoveAt(int index); // 0x00394548
	public virtual IEnumerator GetEnumerator(); // 0x003945E4
}

// Namespace: 
private class SynchedSortedList : SortedList // TypeDefIndex: 324
{
	// Fields
	private SortedList host; // 0x1C

	// Properties
	public override int Capacity { get; set; } // 0x0039465C 0x00394728
	public override int Count { get; } // 0x003947EC 
	public override bool IsSynchronized { get; } // 0x00394820 
	public override object SyncRoot { get; } // 0x00394828 
	public override bool IsFixedSize { get; } // 0x0039485C 
	public override bool IsReadOnly { get; } // 0x00394890 
	public override ICollection Keys { get; } // 0x003948C4 
	public override ICollection Values { get; } // 0x00394990 
	public override object Item { get; set; } // 0x00394A5C 0x00394B24

	// Constructors
	public SynchedSortedList(SortedList host); // 0x00392B74

	// Methods
	public override void CopyTo(Array array, int arrayIndex); // 0x00394BFC
	public override void Add(object key, object value); // 0x00394CCC
	public override void Clear(); // 0x00394DA4
	public override bool Contains(object key); // 0x00394E60
	public override IDictionaryEnumerator GetEnumerator(); // 0x00394F34
	public override void Remove(object key); // 0x00395000
	public override bool ContainsKey(object key); // 0x003950C4
	public override bool ContainsValue(object value); // 0x00395198
	public override object Clone(); // 0x0039526C
	public override object GetByIndex(int index); // 0x003953B8
	public override object GetKey(int index); // 0x0039548C
	public override IList GetKeyList(); // 0x00395560
	public override IList GetValueList(); // 0x00395668
	public override void RemoveAt(int index); // 0x00395770
	public override int IndexOfKey(object key); // 0x00395834
	public override int IndexOfValue(object val); // 0x00395908
	public override void SetByIndex(int index, object value); // 0x003959DC
	public override void TrimToSize(); // 0x00395AAC
}

// Namespace: System.Collections
[Serializable]
public class Stack : IEnumerable, ICloneable, ICollection // TypeDefIndex: 325
{
	// Fields
	private const int default_capacity = 16; // 0x00
	private object[] contents; // 0x08
	private int current; // 0x0C
	private int count; // 0x10
	private int capacity; // 0x14
	private int modCount; // 0x18

	// Properties
	public virtual int Count { get; } // 0x00396270 
	public virtual bool IsSynchronized { get; } // 0x00396278 
	public virtual object SyncRoot { get; } // 0x00396280 

	// Constructors
	public Stack(); // 0x00395B68
	public Stack(ICollection col); // 0x00395BEC
	public Stack(int initialCapacity); // 0x00396004

	// Methods
	private void Resize(int ncapacity); // 0x003960E8
	public static Stack Synchronized(Stack stack); // 0x00396184
	public virtual void Clear(); // 0x00396284
	public virtual object Clone(); // 0x0039630C
	public virtual bool Contains(object obj); // 0x003963B8
	public virtual void CopyTo(Array array, int index); // 0x003964C0
	public virtual IEnumerator GetEnumerator(); // 0x003966B8
	public virtual object Peek(); // 0x00396768
	public virtual object Pop(); // 0x0039683C
	public virtual void Push(object obj); // 0x003969A8
	public virtual object[] ToArray(); // 0x00396A60
}

// Namespace: 
[Serializable]
private class SyncStack : Stack // TypeDefIndex: 326
{
	// Fields
	private Stack stack; // 0x1C

	// Properties
	public override int Count { get; } // 0x00396DDC 
	public override bool IsSynchronized { get; } // 0x00396E84 
	public override object SyncRoot { get; } // 0x00396E8C 

	// Constructors
	internal SyncStack(Stack s); // 0x00396254

	// Methods
	public override void Clear(); // 0x00396EC0
	public override object Clone(); // 0x00396F58
	public override bool Contains(object obj); // 0x00397098
	public override void CopyTo(Array array, int index); // 0x00397148
	public override IEnumerator GetEnumerator(); // 0x003971F4
	public override object Peek(); // 0x003972D8
	public override object Pop(); // 0x00397380
	public override void Push(object obj); // 0x00397428
	public override object[] ToArray(); // 0x003974C8
}

// Namespace: 
private class Enumerator : IEnumerator, ICloneable // TypeDefIndex: 327
{
	// Fields
	private const int EOF = -1; // 0x00
	private const int BOF = -2; // 0x00
	private Stack stack; // 0x08
	private int modCount; // 0x0C
	private int current; // 0x10

	// Properties
	public virtual object Current { get; } // 0x00396AF4 

	// Constructors
	internal Enumerator(Stack s); // 0x00396728

	// Methods
	public object Clone(); // 0x00396AEC
	public virtual bool MoveNext(); // 0x00396C24
	public virtual void Reset(); // 0x00396D24
}

// Namespace: System.Configuration.Assemblies
[Serializable]
public struct AssemblyHash : ICloneable // TypeDefIndex: 328
{
	// Fields
	private AssemblyHashAlgorithm _algorithm; // 0x08
	private byte[] _value; // 0x0C
	public static readonly AssemblyHash Empty; // 0x00

	// Properties
	public AssemblyHashAlgorithm Algorithm { get; set; } // 0x000A7558 0x000A7560

	// Constructors
	public AssemblyHash(AssemblyHashAlgorithm algorithm, byte[] value); // 0x000A7540
	public AssemblyHash(byte[] value); // 0x000A7548
	private static AssemblyHash(); // 0x00397634

	// Methods
	public object Clone(); // 0x000A7568
	public byte[] GetValue(); // 0x000A7570
	public void SetValue(byte[] value); // 0x000A7578
}

// Namespace: System.Configuration.Assemblies
[Serializable]
public enum AssemblyHashAlgorithm // TypeDefIndex: 329
{
	None = 0,
	MD5 = 32771,
	SHA1 = 32772
}

// Namespace: System.Configuration.Assemblies
[Serializable]
public enum AssemblyVersionCompatibility // TypeDefIndex: 330
{
	SameMachine = 1,
	SameProcess = 2,
	SameDomain = 3
}

// Namespace: System.Deployment.Internal
public static class InternalActivationContextHelper // TypeDefIndex: 331
{
	// Methods
	public static object GetActivationContextData(ActivationContext appInfo); // 0x004CAD0C
	public static object GetApplicationComponentManifest(ActivationContext appInfo); // 0x004CAD94
	public static byte[] GetApplicationManifestBytes(ActivationContext appInfo); // 0x004CAE1C
	public static object GetDeploymentComponentManifest(ActivationContext appInfo); // 0x004CAEA4
	public static byte[] GetDeploymentManifestBytes(ActivationContext appInfo); // 0x004CAF2C
	public static bool IsFirstRun(ActivationContext appInfo); // 0x004CAFB4
	public static void PrepareForExecution(ActivationContext appInfo); // 0x004CB03C
}

// Namespace: System.Deployment.Internal
public static class InternalApplicationIdentityHelper // TypeDefIndex: 332
{
	// Methods
	public static object GetActivationContextData(ActivationContext appInfo); // 0x004CB0C4
	public static object GetInternalAppId(ApplicationIdentity id); // 0x004CB14C
}

// Namespace: System.Diagnostics.CodeAnalysis
public sealed class SuppressMessageAttribute : Attribute // TypeDefIndex: 333
{
	// Fields
	private string category; // 0x08
	private string checkId; // 0x0C
	private string justification; // 0x10
	private string messageId; // 0x14
	private string scope; // 0x18
	private string target; // 0x1C

	// Properties
	public string Category { get; } // 0x004CB1FC 
	public string CheckId { get; } // 0x004CB204 
	public string Justification { get; set; } // 0x004CB20C 0x004CB214
	public string MessageId { get; set; } // 0x004CB21C 0x004CB224
	public string Scope { get; set; } // 0x004CB22C 0x004CB234
	public string Target { get; set; } // 0x004CB23C 0x004CB244

	// Constructors
	public SuppressMessageAttribute(string category, string checkId); // 0x004CB1D4

}

// Namespace: System.Diagnostics.SymbolStore
public interface ISymbolBinder // TypeDefIndex: 334
{
	// Methods
	ISymbolReader GetReader(int importer, string filename, string searchPath);
}

// Namespace: System.Diagnostics.SymbolStore
public interface ISymbolBinder1 // TypeDefIndex: 335
{
	// Methods
	ISymbolReader GetReader(IntPtr importer, string filename, string searchPath);
}

// Namespace: System.Diagnostics.SymbolStore
public interface ISymbolDocument // TypeDefIndex: 336
{
	// Properties
	Guid CheckSumAlgorithmId { get; }
	Guid DocumentType { get; }
	bool HasEmbeddedSource { get; }
	Guid Language { get; }
	Guid LanguageVendor { get; }
	int SourceLength { get; }
	string URL { get; }

	// Methods
	int FindClosestLine(int line);
	byte[] GetCheckSum();
	byte[] GetSourceRange(int startLine, int startColumn, int endLine, int endColumn);
}

// Namespace: System.Diagnostics.SymbolStore
public interface ISymbolDocumentWriter // TypeDefIndex: 337
{
	// Methods
	void SetCheckSum(Guid algorithmId, byte[] checkSum);
	void SetSource(byte[] source);
}

// Namespace: System.Diagnostics.SymbolStore
public interface ISymbolMethod // TypeDefIndex: 338
{
	// Properties
	ISymbolScope RootScope { get; }
	int SequencePointCount { get; }
	SymbolToken Token { get; }

	// Methods
	ISymbolNamespace GetNamespace();
	int GetOffset(ISymbolDocument document, int line, int column);
	ISymbolVariable[] GetParameters();
	int[] GetRanges(ISymbolDocument document, int line, int column);
	ISymbolScope GetScope(int offset);
	void GetSequencePoints(int[] offsets, ISymbolDocument[] documents, int[] lines, int[] columns, int[] endLines, int[] endColumns);
	bool GetSourceStartEnd(ISymbolDocument[] docs, int[] lines, int[] columns);
}

// Namespace: System.Diagnostics.SymbolStore
public interface ISymbolNamespace // TypeDefIndex: 339
{
	// Properties
	string Name { get; }

	// Methods
	ISymbolNamespace[] GetNamespaces();
	ISymbolVariable[] GetVariables();
}

// Namespace: System.Diagnostics.SymbolStore
public interface ISymbolReader // TypeDefIndex: 340
{
	// Properties
	SymbolToken UserEntryPoint { get; }

	// Methods
	ISymbolDocument GetDocument(string url, Guid language, Guid languageVendor, Guid documentType);
	ISymbolDocument[] GetDocuments();
	ISymbolVariable[] GetGlobalVariables();
	ISymbolMethod GetMethod(SymbolToken method);
	ISymbolMethod GetMethod(SymbolToken method, int version);
	ISymbolMethod GetMethodFromDocumentPosition(ISymbolDocument document, int line, int column);
	ISymbolNamespace[] GetNamespaces();
	byte[] GetSymAttribute(SymbolToken parent, string name);
	ISymbolVariable[] GetVariables(SymbolToken parent);
}

// Namespace: System.Diagnostics.SymbolStore
public interface ISymbolScope // TypeDefIndex: 341
{
	// Properties
	int EndOffset { get; }
	ISymbolMethod Method { get; }
	ISymbolScope Parent { get; }
	int StartOffset { get; }

	// Methods
	ISymbolScope[] GetChildren();
	ISymbolVariable[] GetLocals();
	ISymbolNamespace[] GetNamespaces();
}

// Namespace: System.Diagnostics.SymbolStore
public interface ISymbolVariable // TypeDefIndex: 342
{
	// Properties
	int AddressField1 { get; }
	int AddressField2 { get; }
	int AddressField3 { get; }
	SymAddressKind AddressKind { get; }
	object Attributes { get; }
	int EndOffset { get; }
	string Name { get; }
	int StartOffset { get; }

	// Methods
	byte[] GetSignature();
}

// Namespace: System.Diagnostics.SymbolStore
public interface ISymbolWriter // TypeDefIndex: 343
{
	// Methods
	void Close();
	void CloseMethod();
	void CloseNamespace();
	void CloseScope(int endOffset);
	ISymbolDocumentWriter DefineDocument(string url, Guid language, Guid languageVendor, Guid documentType);
	void DefineField(SymbolToken parent, string name, FieldAttributes attributes, byte[] signature, SymAddressKind addrKind, int addr1, int addr2, int addr3);
	void DefineGlobalVariable(string name, FieldAttributes attributes, byte[] signature, SymAddressKind addrKind, int addr1, int addr2, int addr3);
	void DefineLocalVariable(string name, FieldAttributes attributes, byte[] signature, SymAddressKind addrKind, int addr1, int addr2, int addr3, int startOffset, int endOffset);
	void DefineParameter(string name, ParameterAttributes attributes, int sequence, SymAddressKind addrKind, int addr1, int addr2, int addr3);
	void DefineSequencePoints(ISymbolDocumentWriter document, int[] offsets, int[] lines, int[] columns, int[] endLines, int[] endColumns);
	void Initialize(IntPtr emitter, string filename, bool fFullBuild);
	void OpenMethod(SymbolToken method);
	void OpenNamespace(string name);
	int OpenScope(int startOffset);
	void SetMethodSourceRange(ISymbolDocumentWriter startDoc, int startLine, int startColumn, ISymbolDocumentWriter endDoc, int endLine, int endColumn);
	void SetScopeRange(int scopeID, int startOffset, int endOffset);
	void SetSymAttribute(SymbolToken parent, string name, byte[] data);
	void SetUnderlyingWriter(IntPtr underlyingWriter);
	void SetUserEntryPoint(SymbolToken entryMethod);
	void UsingNamespace(string fullName);
}

// Namespace: System.Diagnostics.SymbolStore
[Serializable]
public enum SymAddressKind // TypeDefIndex: 344
{
	ILOffset = 1,
	NativeRVA = 2,
	NativeRegister = 3,
	NativeRegisterRelative = 4,
	NativeOffset = 5,
	NativeRegisterRegister = 6,
	NativeRegisterStack = 7,
	NativeStackRegister = 8,
	BitField = 9,
	NativeSectionOffset = 10
}

// Namespace: System.Diagnostics.SymbolStore
public class SymDocumentType // TypeDefIndex: 345
{
	// Fields
	public static readonly Guid Text; // 0x00

	// Constructors
	public SymDocumentType(); // 0x002D5AC8

}

// Namespace: System.Diagnostics.SymbolStore
public class SymLanguageType // TypeDefIndex: 346
{
	// Fields
	public static readonly Guid Basic; // 0x00
	public static readonly Guid C; // 0x10
	public static readonly Guid Cobol; // 0x20
	public static readonly Guid CPlusPlus; // 0x30
	public static readonly Guid CSharp; // 0x40
	public static readonly Guid ILAssembly; // 0x50
	public static readonly Guid Java; // 0x60
	public static readonly Guid JScript; // 0x70
	public static readonly Guid MCPlusPlus; // 0x80
	public static readonly Guid Pascal; // 0x90
	public static readonly Guid SMC; // 0xA0

	// Constructors
	public SymLanguageType(); // 0x002D5AD0

}

// Namespace: System.Diagnostics.SymbolStore
public class SymLanguageVendor // TypeDefIndex: 347
{
	// Fields
	public static readonly Guid Microsoft; // 0x00

	// Constructors
	public SymLanguageVendor(); // 0x002D5AD8

}

// Namespace: System.Diagnostics.SymbolStore
public struct SymbolToken // TypeDefIndex: 348
{
	// Fields
	private int _val; // 0x08

	// Constructors
	public SymbolToken(int val); // 0x0008D170

	// Methods
	public override bool Equals(object obj); // 0x0008D178
	public bool Equals(SymbolToken obj); // 0x0008D180
	public override int GetHashCode(); // 0x0008D194
	public int GetToken(); // 0x0008D1A0
	public static bool op_Equality(SymbolToken a, SymbolToken b); // 0x002D5BA0
	public static bool op_Inequality(SymbolToken a, SymbolToken b); // 0x002D5BB4
}

// Namespace: System.Diagnostics
public sealed class DebuggableAttribute : Attribute // TypeDefIndex: 349
{
	// Fields
	private bool JITTrackingEnabledFlag; // 0x08
	private bool JITOptimizerDisabledFlag; // 0x09
	private DebuggingModes debuggingModes; // 0x0C

	// Properties
	public DebuggingModes DebuggingFlags { get; } // 0x004CB2EC 
	public bool IsJITTrackingEnabled { get; } // 0x004CB2F4 
	public bool IsJITOptimizerDisabled { get; } // 0x004CB2FC 

	// Constructors
	public DebuggableAttribute(bool isJITTrackingEnabled, bool isJITOptimizerDisabled); // 0x004CB274
	public DebuggableAttribute(DebuggingModes modes); // 0x004CB2BC

}

// Namespace: 
public enum DebuggingModes // TypeDefIndex: 350
{
	None = 0,
	Default = 1,
	IgnoreSymbolStoreSequencePoints = 2,
	EnableEditAndContinue = 4,
	DisableOptimizations = 256
}

// Namespace: System.Diagnostics
public sealed class Debugger // TypeDefIndex: 351
{
	// Fields
	public static readonly string DefaultCategory; // 0x00

	// Properties
	public static bool IsAttached { get; } // 0x004CB3B0 

	// Constructors
	public Debugger(); // 0x004CB304
	private static Debugger(); // 0x004CB30C

	// Methods
	private static bool IsAttached_internal(); // 0x004CB428
	public static void Break(); // 0x004CB42C
	public static bool IsLogging(); // 0x004CB430
	public static bool Launch(); // 0x004CB438
	public static void Log(int level, string category, string message); // 0x004CB4C0
}

// Namespace: System.Diagnostics
public sealed class DebuggerBrowsableAttribute : Attribute // TypeDefIndex: 352
{
	// Fields
	private DebuggerBrowsableState state; // 0x08

	// Properties
	public DebuggerBrowsableState State { get; } // 0x004CB4E4 

	// Constructors
	public DebuggerBrowsableAttribute(DebuggerBrowsableState state); // 0x004CB4C4

}

// Namespace: System.Diagnostics
public enum DebuggerBrowsableState // TypeDefIndex: 353
{
	Never = 0,
	Collapsed = 2,
	RootHidden = 3
}

// Namespace: System.Diagnostics
public sealed class DebuggerDisplayAttribute : Attribute // TypeDefIndex: 354
{
	// Fields
	private string value; // 0x08
	private string type; // 0x0C
	private string name; // 0x10
	private string target_type_name; // 0x14
	private Type target_type; // 0x18

	// Properties
	public string Value { get; } // 0x004CB5DC 
	public Type Target { get; set; } // 0x004CB5E4 0x004CB5EC
	public string TargetTypeName { get; set; } // 0x004CB6B8 0x004CB6C0
	public string Type { get; set; } // 0x004CB6C8 0x004CB6D0
	public string Name { get; set; } // 0x004CB6D8 0x004CB6E0

	// Constructors
	public DebuggerDisplayAttribute(string value); // 0x004CB4EC

}

// Namespace: System.Diagnostics
[Serializable]
public sealed class DebuggerNonUserCodeAttribute : Attribute // TypeDefIndex: 355
{
	// Constructors
	public DebuggerNonUserCodeAttribute(); // 0x002D3D30

}

// Namespace: System.Diagnostics
[Serializable]
public sealed class DebuggerStepThroughAttribute : Attribute // TypeDefIndex: 356
{
	// Constructors
	public DebuggerStepThroughAttribute(); // 0x002D3D38

}

// Namespace: System.Diagnostics
[Serializable]
public sealed class DebuggerStepperBoundaryAttribute : Attribute // TypeDefIndex: 357
{
	// Constructors
	public DebuggerStepperBoundaryAttribute(); // 0x002D3D40

}

// Namespace: System.Diagnostics
public sealed class DebuggerTypeProxyAttribute : Attribute // TypeDefIndex: 358
{
	// Fields
	private string proxy_type_name; // 0x08
	private string target_type_name; // 0x0C
	private Type target_type; // 0x10

	// Properties
	public string ProxyTypeName { get; } // 0x002D3DAC 
	public Type Target { get; set; } // 0x002D3DB4 0x002D3DBC
	public string TargetTypeName { get; set; } // 0x002D3DFC 0x002D3E04

	// Constructors
	public DebuggerTypeProxyAttribute(string typeName); // 0x002D3D48
	public DebuggerTypeProxyAttribute(Type type); // 0x002D3D68

}

// Namespace: System.Diagnostics
public sealed class DebuggerVisualizerAttribute : Attribute // TypeDefIndex: 359
{
	// Fields
	private string description; // 0x08
	private string visualizerSourceName; // 0x0C
	private string visualizerName; // 0x10
	private string targetTypeName; // 0x14
	private Type target; // 0x18

	// Properties
	public string Description { get; set; } // 0x002D421C 0x002D4224
	public Type Target { get; set; } // 0x002D422C 0x002D4234
	public string TargetTypeName { get; set; } // 0x002D4274 0x002D427C
	public string VisualizerObjectSourceTypeName { get; } // 0x002D4284 
	public string VisualizerTypeName { get; } // 0x002D428C 

	// Constructors
	public DebuggerVisualizerAttribute(string visualizerTypeName); // 0x002D3E0C
	public DebuggerVisualizerAttribute(Type visualizer); // 0x002D3E2C
	public DebuggerVisualizerAttribute(string visualizerTypeName, string visualizerObjectSourceTypeName); // 0x002D3F00
	public DebuggerVisualizerAttribute(string visualizerTypeName, Type visualizerObjectSource); // 0x002D3F28
	public DebuggerVisualizerAttribute(Type visualizer, string visualizerObjectSourceTypeName); // 0x002D4004
	public DebuggerVisualizerAttribute(Type visualizer, Type visualizerObjectSource); // 0x002D40E0

}

// Namespace: System.Diagnostics
[Serializable]
public class StackFrame // TypeDefIndex: 360
{
	// Fields
	public const int OFFSET_UNKNOWN = -1; // 0x00
	private int ilOffset; // 0x08
	private int nativeOffset; // 0x0C
	private MethodBase methodBase; // 0x10
	private string fileName; // 0x14
	private int lineNumber; // 0x18
	private int columnNumber; // 0x1C
	private string internalMethodName; // 0x20

	// Constructors
	public StackFrame(); // 0x002D4294
	public StackFrame(bool fNeedFileInfo); // 0x002D4300
	public StackFrame(int skipFrames); // 0x002D436C
	public StackFrame(int skipFrames, bool fNeedFileInfo); // 0x002D43D8
	public StackFrame(string fileName, int lineNumber); // 0x002D4448
	public StackFrame(string fileName, int lineNumber, int colNumber); // 0x002D44CC

	// Methods
	private static bool get_frame_info(int skip, bool needFileInfo, out MethodBase method, out int iloffset, out int native_offset, out string file, out int line, out int column); // 0x002D42FC
	public virtual int GetFileLineNumber(); // 0x002D4550
	public virtual int GetFileColumnNumber(); // 0x002D4558
	public virtual string GetFileName(); // 0x002D4560
	internal string GetSecureFileName(); // 0x002D4568
	public virtual int GetILOffset(); // 0x002D4670
	public virtual MethodBase GetMethod(); // 0x002D4678
	public virtual int GetNativeOffset(); // 0x002D4680
	internal string GetInternalMethodName(); // 0x002D4688
	public override string ToString(); // 0x002D4690
}

// Namespace: System.Diagnostics
[Serializable]
public class StackTrace // TypeDefIndex: 361
{
	// Fields
	public const int METHODS_TO_SKIP = 0; // 0x00
	private StackFrame[] frames; // 0x08
	private bool debug_info; // 0x0C

	// Properties
	public virtual int FrameCount { get; } // 0x002D522C 

	// Constructors
	public StackTrace(); // 0x002D4970
	public StackTrace(bool fNeedFileInfo); // 0x002D4BE4
	public StackTrace(int skipFrames); // 0x002D4C10
	public StackTrace(int skipFrames, bool fNeedFileInfo); // 0x002D4C3C
	public StackTrace(Exception e); // 0x002D4C6C
	public StackTrace(Exception e, bool fNeedFileInfo); // 0x002D4CB4
	public StackTrace(Exception e, int skipFrames); // 0x002D4CDC
	public StackTrace(Exception e, int skipFrames, bool fNeedFileInfo); // 0x002D4C94
	internal StackTrace(Exception e, int skipFrames, bool fNeedFileInfo, bool returnNativeFrames); // 0x002D4D00
	public StackTrace(StackFrame frame); // 0x002D50B8
	public StackTrace(Thread targetThread, bool needFileInfo); // 0x002D5194

	// Methods
	private void init_frames(int skipFrames, bool fNeedFileInfo); // 0x002D4998
	private static StackFrame[] get_trace(Exception e, int skipFrames, bool fNeedFileInfo); // 0x002D50B4
	public virtual StackFrame GetFrame(int index); // 0x002D5240
	public virtual StackFrame[] GetFrames(); // 0x002D52B8
	public override string ToString(); // 0x002D52C0
}

// Namespace: System.Globalization
[Serializable]
public abstract class Calendar : ICloneable // TypeDefIndex: 362
{
	// Fields
	public const int CurrentEra = 0; // 0x00
	[NonSerialized]	private bool m_isReadOnly; // 0x08
	[NonSerialized]	internal int twoDigitYearMax; // 0x0C
	[NonSerialized]	private int M_MaxYearValue; // 0x10
	[NonSerialized]	internal string[] M_AbbrEraNames; // 0x14
	[NonSerialized]	internal string[] M_EraNames; // 0x18
	internal int m_currentEraValue; // 0x1C

	// Properties
	internal virtual int M_DaysInWeek { get; } // 0x002E8328 
	public abstract int[] Eras { get; }
	public virtual CalendarAlgorithmType AlgorithmType { get; } // 0x002E85F4 
	public virtual DateTime MaxSupportedDateTime { get; } // 0x002E85FC 
	public virtual DateTime MinSupportedDateTime { get; } // 0x002E8690 
	public bool IsReadOnly { get; } // 0x002E8904 
	internal virtual int M_MaxYear { get; } // 0x002E8A98 
	public virtual int TwoDigitYearMax { get; set; } // 0x002E8B64 0x002E8B6C
	internal string[] AbbreviatedEraNames { get; set; } // 0x002E988C 0x002E99DC
	internal string[] EraNames { get; set; } // 0x002E9BE0 0x002E9D30

	// Constructors
	protected Calendar(); // 0x002E8308

	// Methods
	internal string M_ValidValues(object a, object b); // 0x002E8330
	internal void M_ArgumentInRange(string param, int arg, int a, int b); // 0x002E840C
	internal void M_CheckHMSM(int hour, int minute, int second, int milliseconds); // 0x002E8504
	public virtual object Clone(); // 0x002E8728
	public virtual int GetLeapMonth(int year); // 0x002E87D4
	public virtual int GetLeapMonth(int year, int era); // 0x002E8878
	public static Calendar ReadOnly(Calendar calendar); // 0x002E890C
	internal void CheckReadOnly(); // 0x002E89EC
	internal virtual void M_CheckYE(int year, int era); // 0x002E8B60
	public virtual DateTime AddDays(DateTime time, int days); // 0x002E8C2C
	public virtual DateTime AddHours(DateTime time, int hours); // 0x002E8CFC
	public virtual DateTime AddMilliseconds(DateTime time, double milliseconds); // 0x002E8DCC
	public virtual DateTime AddMinutes(DateTime time, int minutes); // 0x002E8E9C
	public abstract DateTime AddMonths(DateTime time, int months);
	public virtual DateTime AddSeconds(DateTime time, int seconds); // 0x002E8F6C
	public virtual DateTime AddWeeks(DateTime time, int weeks); // 0x002E903C
	public abstract DateTime AddYears(DateTime time, int years);
	public abstract int GetDayOfMonth(DateTime time);
	public abstract DayOfWeek GetDayOfWeek(DateTime time);
	public abstract int GetDayOfYear(DateTime time);
	public virtual int GetDaysInMonth(int year, int month); // 0x002E90A8
	public abstract int GetDaysInMonth(int year, int month, int era);
	public virtual int GetDaysInYear(int year); // 0x002E90D4
	public abstract int GetDaysInYear(int year, int era);
	public abstract int GetEra(DateTime time);
	public virtual int GetHour(DateTime time); // 0x002E90E8
	public virtual double GetMilliseconds(DateTime time); // 0x002E913C
	public virtual int GetMinute(DateTime time); // 0x002E919C
	public abstract int GetMonth(DateTime time);
	public virtual int GetMonthsInYear(int year); // 0x002E91F0
	public abstract int GetMonthsInYear(int year, int era);
	public virtual int GetSecond(DateTime time); // 0x002E9204
	internal int M_DiffDays(DateTime timeA, DateTime timeB); // 0x002E9258
	internal DateTime M_GetFirstDayOfSecondWeekOfYear(int year, CalendarWeekRule rule, DayOfWeek firstDayOfWeek); // 0x002E9300
	public virtual int GetWeekOfYear(DateTime time, CalendarWeekRule rule, DayOfWeek firstDayOfWeek); // 0x002E94CC
	public abstract int GetYear(DateTime time);
	public virtual bool IsLeapDay(int year, int month, int day); // 0x002E9678
	public abstract bool IsLeapDay(int year, int month, int day, int era);
	public virtual bool IsLeapMonth(int year, int month); // 0x002E96A4
	public abstract bool IsLeapMonth(int year, int month, int era);
	public virtual bool IsLeapYear(int year); // 0x002E96D0
	public abstract bool IsLeapYear(int year, int era);
	public virtual DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond); // 0x002E96E4
	public abstract DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
	public virtual int ToFourDigitYear(int year); // 0x002E9738
}

// Namespace: System.Globalization
public enum CalendarAlgorithmType // TypeDefIndex: 363
{
	Unknown = 0,
	SolarCalendar = 1,
	LunarCalendar = 2,
	LunisolarCalendar = 3
}

// Namespace: System.Globalization
[Serializable]
public enum CalendarWeekRule // TypeDefIndex: 364
{
	FirstDay = 0,
	FirstFullWeek = 1,
	FirstFourDayWeek = 2
}

// Namespace: System.Globalization
internal class CCMath // TypeDefIndex: 365
{
	// Constructors
	public CCMath(); // 0x002E81EC

	// Methods
	public static double round(double x); // 0x002E81F4
	public static double mod(double x, double y); // 0x002E8208
	public static int div(int x, int y); // 0x002E5028
	public static int mod(int x, int y); // 0x002E4C90
	public static int div_mod(out int remainder, int x, int y); // 0x002E505C
	public static int signum(double x); // 0x002E8240
	public static int signum(int x); // 0x002E8268
	public static double amod(double x, double y); // 0x002E827C
	public static int amod(int x, int y); // 0x002E82C0
}

// Namespace: System.Globalization
internal class CCFixed // TypeDefIndex: 366
{
	// Constructors
	public CCFixed(); // 0x002E4B08

	// Methods
	public static DateTime ToDateTime(int date); // 0x002E4B10
	public static DateTime ToDateTime(int date, int hour, int minute, int second, double milliseconds); // 0x002E4B58
	public static int FromDateTime(DateTime time); // 0x002E3BDC
	public static DayOfWeek day_of_week(int date); // 0x002E4C54
	public static int kday_on_or_before(int date, int k); // 0x002E4CD0
	public static int kday_on_or_after(int date, int k); // 0x002E4D10
	public static int kd_nearest(int date, int k); // 0x002E4D54
	public static int kday_after(int date, int k); // 0x002E4D98
	public static int kday_before(int date, int k); // 0x002E4DDC
}

// Namespace: System.Globalization
internal class CCGregorianCalendar // TypeDefIndex: 367
{
	// Fields
	private const int epoch = 1; // 0x00

	// Constructors
	public CCGregorianCalendar(); // 0x002E4E20

	// Methods
	public static bool is_leap_year(int year); // 0x002E4E28
	public static int fixed_from_dmy(int day, int month, int year); // 0x002E4EC0
	public static int year_from_fixed(int date); // 0x002E49F0
	public static void my_from_fixed(out int month, out int year, int date); // 0x002E50A8
	public static void dmy_from_fixed(out int day, out int month, out int year, int date); // 0x002E5248
	public static int month_from_fixed(int date); // 0x002E5290
	public static int day_from_fixed(int date); // 0x002E52C4
	public static int date_difference(int dayA, int monthA, int yearA, int dayB, int monthB, int yearB); // 0x002E5310
	public static int day_number(int day, int month, int year); // 0x002E5350
	public static int days_remaining(int day, int month, int year); // 0x002E537C
	public static DateTime AddMonths(DateTime time, int months); // 0x002E53B8
	public static DateTime AddYears(DateTime time, int years); // 0x002E558C
	public static int GetDayOfMonth(DateTime time); // 0x002E56F0
	public static int GetDayOfYear(DateTime time); // 0x002E5728
	public static int GetDaysInMonth(int year, int month); // 0x002E5554
	public static int GetDaysInYear(int year); // 0x002E5800
	public static int GetMonth(DateTime time); // 0x002E5920
	public static int GetYear(DateTime time); // 0x002E5974
	public static bool IsLeapDay(int year, int month, int day); // 0x002E59B0
	public static DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int milliseconds); // 0x002E5A78
}

// Namespace: 
public enum Month // TypeDefIndex: 368
{
	january = 1,
	february = 2,
	march = 3,
	april = 4,
	may = 5,
	june = 6,
	july = 7,
	august = 8,
	september = 9,
	october = 10,
	november = 11,
	december = 12
}

// Namespace: System.Globalization
internal class CCJulianCalendar // TypeDefIndex: 369
{
	// Fields
	private const int epoch = -1; // 0x00

	// Constructors
	public CCJulianCalendar(); // 0x002E7CD0

	// Methods
	public static bool is_leap_year(int year); // 0x002E7CD8
	public static int fixed_from_dmy(int day, int month, int year); // 0x002E7D28
	public static int year_from_fixed(int date); // 0x002E7E10
	public static void my_from_fixed(out int month, out int year, int date); // 0x002E7E58
	public static void dmy_from_fixed(out int day, out int month, out int year, int date); // 0x002E7F90
	public static int month_from_fixed(int date); // 0x002E7FD8
	public static int day_from_fixed(int date); // 0x002E800C
	public static int date_difference(int dayA, int monthA, int yearA, int dayB, int monthB, int yearB); // 0x002E8058
	public static int day_number(int day, int month, int year); // 0x002E8098
	public static int days_remaining(int day, int month, int year); // 0x002E8148
}

// Namespace: 
public enum Month // TypeDefIndex: 370
{
	january = 1,
	february = 2,
	march = 3,
	april = 4,
	may = 5,
	june = 6,
	july = 7,
	august = 8,
	september = 9,
	october = 10,
	november = 11,
	december = 12
}

// Namespace: System.Globalization
internal class CCHebrewCalendar // TypeDefIndex: 371
{
	// Fields
	private const int epoch = -1373427; // 0x00

	// Constructors
	public CCHebrewCalendar(); // 0x002E6E04

	// Methods
	public static bool is_leap_year(int year); // 0x002E6E0C
	public static int last_month_of_year(int year); // 0x002E6E58
	public static int elapsed_days(int year); // 0x002E6EA8
	public static int new_year_delay(int year); // 0x002E6FD0
	public static int last_day_of_month(int month, int year); // 0x002E701C
	public static bool long_heshvan(int year); // 0x002E71EC
	public static bool short_kislev(int year); // 0x002E725C
	public static int days_in_year(int year); // 0x002E72CC
	public static int fixed_from_dmy(int day, int month, int year); // 0x002E7304
	public static int year_from_fixed(int date); // 0x002E7400
	public static void my_from_fixed(out int month, out int year, int date); // 0x002E7480
	public static void dmy_from_fixed(out int day, out int month, out int year, int date); // 0x002E74F8
	public static int month_from_fixed(int date); // 0x002E7540
	public static int day_from_fixed(int date); // 0x002E7574
	public static int date_difference(int dayA, int monthA, int yearA, int dayB, int monthB, int yearB); // 0x002E75C0
	public static int day_number(int day, int month, int year); // 0x002E7600
	public static int days_remaining(int day, int month, int year); // 0x002E7638
}

// Namespace: 
public enum Month // TypeDefIndex: 372
{
	nisan = 1,
	iyyar = 2,
	sivan = 3,
	tammuz = 4,
	av = 5,
	elul = 6,
	tishri = 7,
	heshvan = 8,
	kislev = 9,
	teveth = 10,
	shevat = 11,
	adar = 12,
	adar_I = 12,
	adar_II = 13
}

// Namespace: System.Globalization
internal class CCHijriCalendar // TypeDefIndex: 373
{
	// Fields
	private const int epoch = 227014; // 0x00

	// Constructors
	public CCHijriCalendar(); // 0x002E7690

	// Methods
	public static bool is_leap_year(int year); // 0x002E7698
	public static int fixed_from_dmy(int day, int month, int year); // 0x002E76E8
	public static int year_from_fixed(int date); // 0x002E7788
	public static void my_from_fixed(out int month, out int year, int date); // 0x002E77D0
	public static void dmy_from_fixed(out int day, out int month, out int year, int date); // 0x002E78C0
	public static int month_from_fixed(int date); // 0x002E7980
	public static int day_from_fixed(int date); // 0x002E7A50
	public static int date_difference(int dayA, int monthA, int yearA, int dayB, int monthB, int yearB); // 0x002E7A90
	public static int day_number(int day, int month, int year); // 0x002E7BC8
	public static int days_remaining(int day, int month, int year); // 0x002E7C88
}

// Namespace: 
public enum Month // TypeDefIndex: 374
{
	muharram = 1,
	safar = 2,
	rabi_I = 3,
	rabi_II = 4,
	jumada_I = 5,
	jumada_II = 6,
	rajab = 7,
	shaban = 8,
	ramadan = 9,
	shawwal = 10,
	dhu_al_quada = 11,
	dhu_al_hijja = 12
}

// Namespace: System.Globalization
internal class CCEastAsianLunisolarCalendar // TypeDefIndex: 375
{
	// Fields
	private const int initial_epact = 29; // 0x00

	// Constructors
	public CCEastAsianLunisolarCalendar(); // 0x002E2F04

	// Methods
	public static int fixed_from_dmy(int day, int month, int year); // 0x002E2F0C
	public static int year_from_fixed(int date); // 0x002E2FA4
	public static void my_from_fixed(out int month, out int year, int date); // 0x002E303C
	public static void dmy_from_fixed(out int day, out int month, out int year, int date); // 0x002E30D4
	public static DateTime AddMonths(DateTime date, int months); // 0x002E316C
	public static DateTime AddYears(DateTime date, int years); // 0x002E3204
	public static int GetDayOfMonth(DateTime date); // 0x002E329C
	public static int GetDayOfYear(DateTime date); // 0x002E3334
	public static int GetDaysInMonth(int gyear, int month); // 0x002E33CC
	public static int GetDaysInYear(int year); // 0x002E3464
	public static int GetMonth(DateTime date); // 0x002E34FC
	public static bool IsLeapMonth(int gyear, int month); // 0x002E3594
	public static bool IsLeapYear(int gyear); // 0x002E35E8
	public static DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond); // 0x002E3628
}

// Namespace: System.Globalization
[Serializable]
internal class CCGregorianEraHandler // TypeDefIndex: 376
{
	// Fields
	private SortedList _Eras; // 0x08

	// Properties
	public int[] Eras { get; } // 0x002E5B48 

	// Constructors
	public CCGregorianEraHandler(); // 0x002E5ACC

	// Methods
	public void appendEra(int nr, int rd_start, int rd_end); // 0x002E5CD4
	public void appendEra(int nr, int rd_start); // 0x002E5F14
	public int GregorianYear(int year, int era); // 0x002E5FE8
	public int EraYear(out int era, int date); // 0x002E62A8
	public void CheckDateTime(DateTime time); // 0x002E6858
	public bool ValidDate(int date); // 0x002E6958
	public bool ValidEra(int era); // 0x002E6D58
}

// Namespace: 
[Serializable]
private struct Era // TypeDefIndex: 377
{
	// Fields
	private int _nr; // 0x08
	private int _start; // 0x0C
	private int _gregorianYearStart; // 0x10
	private int _end; // 0x14
	private int _maxYear; // 0x18

	// Properties
	public int Nr { get; } // 0x0008D35C 

	// Constructors
	public Era(int nr, int start, int end); // 0x0008D340

	// Methods
	public int GregorianYear(int year); // 0x0008D364
	public bool Covers(int date); // 0x0008D36C
	public int EraYear(out int era, int date); // 0x0008D394
}

// Namespace: System.Globalization
[Serializable]
internal class CCEastAsianLunisolarEraHandler // TypeDefIndex: 378
{
	// Fields
	private SortedList _Eras; // 0x08

	// Properties
	public int[] Eras { get; } // 0x002E373C 

	// Constructors
	public CCEastAsianLunisolarEraHandler(); // 0x002E36C0

	// Methods
	public void appendEra(int nr, int rd_start, int rd_end); // 0x002E38C8
	public void appendEra(int nr, int rd_start); // 0x002E3B08
	public int GregorianYear(int year, int era); // 0x002E3C10
	public int EraYear(out int era, int date); // 0x002E3E9C
	public void CheckDateTime(DateTime time); // 0x002E444C
	public bool ValidDate(int date); // 0x002E454C
	public bool ValidEra(int era); // 0x002E494C
}

// Namespace: 
[Serializable]
private struct Era // TypeDefIndex: 379
{
	// Fields
	private int _nr; // 0x08
	private int _start; // 0x0C
	private int _gregorianYearStart; // 0x10
	private int _end; // 0x14
	private int _maxYear; // 0x18

	// Properties
	public int Nr { get; } // 0x0008D300 

	// Constructors
	public Era(int nr, int start, int end); // 0x0008D2E4

	// Methods
	public int GregorianYear(int year); // 0x0008D308
	public bool Covers(int date); // 0x0008D310
	public int EraYear(out int era, int date); // 0x0008D338
}

// Namespace: System.Globalization
public sealed class CharUnicodeInfo // TypeDefIndex: 380
{
	// Constructors
	private CharUnicodeInfo(); // 0x002E9F34

	// Methods
	public static int GetDecimalDigitValue(char ch); // 0x002E9F3C
	public static int GetDecimalDigitValue(string s, int index); // 0x002EA204
	public static int GetDigitValue(char ch); // 0x002EA2C8
	public static int GetDigitValue(string s, int index); // 0x002EA3D8
	public static double GetNumericValue(char ch); // 0x002EA4A0
	public static double GetNumericValue(string s, int index); // 0x002EAA58
	public static UnicodeCategory GetUnicodeCategory(char ch); // 0x002EAB1C
	public static UnicodeCategory GetUnicodeCategory(string s, int index); // 0x002EABA0
}

// Namespace: System.Globalization
[Serializable]
public class ChineseLunisolarCalendar : EastAsianLunisolarCalendar // TypeDefIndex: 381
{
	// Fields
	public const int ChineseEra = 1; // 0x00
	internal static readonly CCEastAsianLunisolarEraHandler era_handler; // 0x00
	private static DateTime ChineseMin; // 0x08
	private static DateTime ChineseMax; // 0x18

	// Properties
	public override int[] Eras { get; } // 0x002EAEB4 
	public override DateTime MinSupportedDateTime { get; } // 0x002EB0BC 
	public override DateTime MaxSupportedDateTime { get; } // 0x002EB154 

	// Constructors
	public ChineseLunisolarCalendar(); // 0x002EAC8C
	private static ChineseLunisolarCalendar(); // 0x002EAD28

	// Methods
	public override int GetEra(DateTime time); // 0x002EAFC4
}

// Namespace: System.Globalization
[Serializable]
internal sealed class CodePageDataItem // TypeDefIndex: 382
{
	// Fields
	private string m_bodyName; // 0x08
	private int m_codePage; // 0x0C
	private int m_dataIndex; // 0x10
	private string m_description; // 0x14
	private uint m_flags; // 0x18
	private string m_headerName; // 0x1C
	private int m_uiFamilyCodePage; // 0x20
	private string m_webName; // 0x24

	// Constructors
	private CodePageDataItem(); // 0x002EB1EC

}

// Namespace: System.Globalization
[Serializable]
public class CompareInfo : IDeserializationCallback // TypeDefIndex: 383
{
	// Fields
	private const CompareOptions ValidCompareOptions_NoStringSort = 1342177311; // 0x00
	private const CompareOptions ValidCompareOptions = 1879048223; // 0x00
	private static readonly bool useManagedCollation; // 0x00
	private int culture; // 0x08
	[NonSerialized]	private string icu_name; // 0x0C
	private int win32LCID; // 0x10
	private string m_name; // 0x14
	[NonSerialized]	private SimpleCollator collator; // 0x18
	private static Hashtable collators; // 0x04
	[NonSerialized]	private static object monitor; // 0x08

	// Properties
	internal static bool UseManagedCollation { get; } // 0x002EBA88 
	public int LCID { get; } // 0x002EE73C 
	public virtual string Name { get; } // 0x002EE744 

	// Constructors
	private CompareInfo(); // 0x002EB1F4
	internal CompareInfo(CultureInfo ci); // 0x002EB1FC
	private static CompareInfo(); // 0x002EB6D4

	// Methods
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender); // 0x002EB874
	private void construct_compareinfo(string locale); // 0x002EB6D0
	private void free_internal_collator(); // 0x002EBB14
	private int internal_compare(string str1, int offset1, int length1, string str2, int offset2, int length2, CompareOptions options); // 0x002EBB18
	private void assign_sortkey(object key, string source, CompareOptions options); // 0x002EBB1C
	private int internal_index(string source, int sindex, int count, char value, CompareOptions options, bool first); // 0x002EBB20
	private int internal_index(string source, int sindex, int count, string value, CompareOptions options, bool first); // 0x002EBB4C
	protected override void Finalize(); // 0x002EBB78
	private int internal_compare_managed(string str1, int offset1, int length1, string str2, int offset2, int length2, CompareOptions options); // 0x002EBBDC
	private int internal_compare_switch(string str1, int offset1, int length1, string str2, int offset2, int length2, CompareOptions options); // 0x002EBC4C
	public virtual int Compare(string string1, string string2); // 0x002EBDB0
	public virtual int Compare(string string1, string string2, CompareOptions options); // 0x002EBDDC
	public virtual int Compare(string string1, int offset1, string string2, int offset2); // 0x002EBF0C
	public virtual int Compare(string string1, int offset1, string string2, int offset2, CompareOptions options); // 0x002EBF3C
	public virtual int Compare(string string1, int offset1, int length1, string string2, int offset2, int length2); // 0x002EC170
	public virtual int Compare(string string1, int offset1, int length1, string string2, int offset2, int length2, CompareOptions options); // 0x002EC1B4
	public override bool Equals(object value); // 0x002EC4A8
	public static CompareInfo GetCompareInfo(int culture); // 0x002EC568
	public static CompareInfo GetCompareInfo(string name); // 0x002EC608
	public static CompareInfo GetCompareInfo(int culture, Assembly assembly); // 0x002EC728
	public static CompareInfo GetCompareInfo(string name, Assembly assembly); // 0x002EC8E0
	public override int GetHashCode(); // 0x002ECAE4
	public virtual SortKey GetSortKey(string source); // 0x002ECAEC
	public virtual SortKey GetSortKey(string source, CompareOptions options); // 0x002ECB00
	public virtual int IndexOf(string source, char value); // 0x002ECD00
	public virtual int IndexOf(string source, string value); // 0x002ECD60
	public virtual int IndexOf(string source, char value, CompareOptions options); // 0x002ECDC0
	public virtual int IndexOf(string source, char value, int startIndex); // 0x002ECE20
	public virtual int IndexOf(string source, string value, CompareOptions options); // 0x002ECE88
	public virtual int IndexOf(string source, string value, int startIndex); // 0x002ECEE8
	public virtual int IndexOf(string source, char value, int startIndex, CompareOptions options); // 0x002ECF50
	public virtual int IndexOf(string source, char value, int startIndex, int count); // 0x002ECFB8
	public virtual int IndexOf(string source, string value, int startIndex, CompareOptions options); // 0x002ECFE8
	public virtual int IndexOf(string source, string value, int startIndex, int count); // 0x002ED050
	private int internal_index_managed(string s, int sindex, int count, char c, CompareOptions opt, bool first); // 0x002ED080
	private int internal_index_switch(string s, int sindex, int count, char c, CompareOptions opt, bool first); // 0x002ED104
	public virtual int IndexOf(string source, char value, int startIndex, int count, CompareOptions options); // 0x002ED274
	private int internal_index_managed(string s1, int sindex, int count, string s2, CompareOptions opt, bool first); // 0x002ED4AC
	private int internal_index_switch(string s1, int sindex, int count, string s2, CompareOptions opt, bool first); // 0x002ED530
	public virtual int IndexOf(string source, string value, int startIndex, int count, CompareOptions options); // 0x002ED6A0
	public virtual bool IsPrefix(string source, string prefix); // 0x002ED8F0
	public virtual bool IsPrefix(string source, string prefix, CompareOptions options); // 0x002ED91C
	public virtual bool IsSuffix(string source, string suffix); // 0x002EDB64
	public virtual bool IsSuffix(string source, string suffix, CompareOptions options); // 0x002EDB90
	public virtual int LastIndexOf(string source, char value); // 0x002EDDD8
	public virtual int LastIndexOf(string source, string value); // 0x002EDE54
	public virtual int LastIndexOf(string source, char value, CompareOptions options); // 0x002EDED0
	public virtual int LastIndexOf(string source, char value, int startIndex); // 0x002EDF4C
	public virtual int LastIndexOf(string source, string value, CompareOptions options); // 0x002EDF80
	public virtual int LastIndexOf(string source, string value, int startIndex); // 0x002EDFFC
	public virtual int LastIndexOf(string source, char value, int startIndex, CompareOptions options); // 0x002EE030
	public virtual int LastIndexOf(string source, char value, int startIndex, int count); // 0x002EE064
	public virtual int LastIndexOf(string source, string value, int startIndex, CompareOptions options); // 0x002EE094
	public virtual int LastIndexOf(string source, string value, int startIndex, int count); // 0x002EE0C8
	public virtual int LastIndexOf(string source, char value, int startIndex, int count, CompareOptions options); // 0x002EE0F8
	public virtual int LastIndexOf(string source, string value, int startIndex, int count, CompareOptions options); // 0x002EE328
	public static bool IsSortable(char ch); // 0x002EE574
	public static bool IsSortable(string text); // 0x002EE5F8
	public override string ToString(); // 0x002EE67C
}

// Namespace: System.Globalization
[Serializable]
public enum CompareOptions // TypeDefIndex: 384
{
	None = 0,
	IgnoreCase = 1,
	IgnoreNonSpace = 2,
	IgnoreSymbols = 4,
	IgnoreKanaType = 8,
	IgnoreWidth = 16,
	OrdinalIgnoreCase = 268435456,
	StringSort = 536870912,
	Ordinal = 1073741824
}

// Namespace: System.Globalization
[Serializable]
public class CultureInfo : ICloneable, IFormatProvider // TypeDefIndex: 385
{
	// Fields
	private const int NumOptionalCalendars = 5; // 0x00
	private const int GregorianTypeMask = 16777215; // 0x00
	private const int CalendarTypeBits = 24; // 0x00
	private const int InvariantCultureId = 127; // 0x00
	private static CultureInfo invariant_culture_info; // 0x00
	private static object shared_table_lock; // 0x04
	internal static int BootstrapCultureID; // 0x08
	private bool m_isReadOnly; // 0x08
	private int cultureID; // 0x0C
	[NonSerialized]	private int parent_lcid; // 0x10
	[NonSerialized]	private int specific_lcid; // 0x14
	[NonSerialized]	private int datetime_index; // 0x18
	[NonSerialized]	private int number_index; // 0x1C
	private bool m_useUserOverride; // 0x20
	[NonSerialized]	private NumberFormatInfo numInfo; // 0x24
	private DateTimeFormatInfo dateTimeInfo; // 0x28
	private TextInfo textInfo; // 0x2C
	private string m_name; // 0x30
	[NonSerialized]	private string displayname; // 0x34
	[NonSerialized]	private string englishname; // 0x38
	[NonSerialized]	private string nativename; // 0x3C
	[NonSerialized]	private string iso3lang; // 0x40
	[NonSerialized]	private string iso2lang; // 0x44
	[NonSerialized]	private string icu_name; // 0x48
	[NonSerialized]	private string win3lang; // 0x4C
	[NonSerialized]	private string territory; // 0x50
	private CompareInfo compareInfo; // 0x54
	[NonSerialized]	private readonly void * calendar_data; // 0x58
	[NonSerialized]	private readonly void * textinfo_data; // 0x5C
	[NonSerialized]	private Calendar[] optional_calendars; // 0x60
	[NonSerialized]	private CultureInfo parent_culture; // 0x64
	private int m_dataItem; // 0x68
	private Calendar calendar; // 0x6C
	[NonSerialized]	private bool constructed; // 0x70
	[NonSerialized]	internal byte[] cached_serialized_form; // 0x74
	private static readonly string MSG_READONLY; // 0x0C
	private static Hashtable shared_by_number; // 0x10
	private static Hashtable shared_by_name; // 0x14
	private static Dictionary`2<string, int> <>f__switch$map19; // 0x18
	private static Dictionary`2<string, int> <>f__switch$map1A; // 0x1C

	// Properties
	public static CultureInfo InvariantCulture { get; } // 0x002DAC58 
	public static CultureInfo CurrentCulture { get; } // 0x002EF3A0 
	public static CultureInfo CurrentUICulture { get; } // 0x002EF43C 
	internal string Territory { get; } // 0x002EF700 
	public virtual int LCID { get; } // 0x002EF708 
	public virtual string Name { get; } // 0x002EF710 
	public virtual string NativeName { get; } // 0x002EF718 
	public virtual Calendar Calendar { get; } // 0x002EF76C 
	public virtual Calendar[] OptionalCalendars { get; } // 0x002EF7A0 
	public virtual CultureInfo Parent { get; } // 0x002EFB20 
	public virtual TextInfo TextInfo { get; } // 0x002EFC30 
	public virtual string ThreeLetterISOLanguageName { get; } // 0x002EFDA4 
	public virtual string ThreeLetterWindowsLanguageName { get; } // 0x002EFDD8 
	public virtual string TwoLetterISOLanguageName { get; } // 0x002EFE0C 
	public bool UseUserOverride { get; } // 0x002EFE40 
	internal string IcuName { get; } // 0x002EB69C 
	public virtual CompareInfo CompareInfo { get; } // 0x002F0764 
	public virtual bool IsNeutralCulture { get; } // 0x002F09E0 
	public virtual NumberFormatInfo NumberFormat { get; set; } // 0x002F0B4C 0x002F0C98
	public virtual DateTimeFormatInfo DateTimeFormat { get; set; } // 0x002F0DFC 0x002F1318
	public virtual string DisplayName { get; } // 0x002F147C 
	public virtual string EnglishName { get; } // 0x002F14B0 
	public static CultureInfo InstalledUICulture { get; } // 0x002F14E4 
	public bool IsReadOnly { get; } // 0x002F17E4 

	// Constructors
	public CultureInfo(int culture); // 0x002EBA68
	public CultureInfo(int culture, bool useUserOverride); // 0x002EE74C
	private CultureInfo(int culture, bool useUserOverride, bool read_only); // 0x002EE768
	public CultureInfo(string name); // 0x002EC708
	public CultureInfo(string name, bool useUserOverride); // 0x002EEBA0
	private CultureInfo(string name, bool useUserOverride, bool read_only); // 0x002EEBBC
	private CultureInfo(); // 0x002EEFF0
	private static CultureInfo(); // 0x002EF010

	// Methods
	public static CultureInfo CreateSpecificCulture(string name); // 0x002EF0D8
	internal static CultureInfo ConstructCurrentCulture(); // 0x002EF4D8
	internal static CultureInfo ConstructCurrentUICulture(); // 0x002EF688
	public void ClearCachedData(); // 0x002EFE48
	public virtual object Clone(); // 0x002EFF14
	public override bool Equals(object value); // 0x002F01B0
	public static CultureInfo[] GetCultures(CultureTypes types); // 0x002F0270
	public override int GetHashCode(); // 0x002F048C
	public static CultureInfo ReadOnly(CultureInfo ci); // 0x002F0494
	public override string ToString(); // 0x002F075C
	internal static bool IsIDNeutralCulture(int lcid); // 0x002F088C
	internal void CheckNeutral(); // 0x002F0A40
	public virtual object GetFormat(Type formatType); // 0x002F17EC
	private void Construct(); // 0x002EF74C
	private bool ConstructInternalLocaleFromName(string locale); // 0x002EED74
	private bool ConstructInternalLocaleFromLcid(int lcid); // 0x002EEB9C
	private static bool ConstructInternalLocaleFromSpecificName(CultureInfo ci, string name); // 0x002EF318
	private static bool ConstructInternalLocaleFromCurrentLocale(CultureInfo ci); // 0x002EF608
	private bool construct_internal_locale_from_lcid(int lcid); // 0x002F190C
	private bool construct_internal_locale_from_name(string name); // 0x002F1910
	private static bool construct_internal_locale_from_specific_name(CultureInfo ci, string name); // 0x002F1914
	private static bool construct_internal_locale_from_current_locale(CultureInfo ci); // 0x002F1918
	private static CultureInfo[] internal_get_cultures(bool neutral, bool specific, bool installed); // 0x002F0488
	private void construct_datetime_format(); // 0x002F11EC
	private void construct_number_format(); // 0x002F0C94
	private static bool internal_is_lcid_neutral(int lcid, out bool is_neutral); // 0x002F09DC
	private void ConstructInvariant(bool read_only); // 0x002EE938
	private TextInfo CreateTextInfo(bool readOnly); // 0x002EFD08
	private static void insert_into_shared_tables(CultureInfo c); // 0x002F1A70
	public static CultureInfo GetCultureInfo(int culture); // 0x002F1574
	public static CultureInfo GetCultureInfo(string name); // 0x002F1C88
	public static CultureInfo GetCultureInfo(string name, string altName); // 0x002F1F38
	public static CultureInfo GetCultureInfoByIetfLanguageTag(string name); // 0x002F2068
	internal static CultureInfo CreateCulture(string name, bool reference); // 0x002F2360
	internal void ConstructCalendars(); // 0x002EF830
}

// Namespace: System.Globalization
[Serializable]
public enum CultureTypes // TypeDefIndex: 386
{
	NeutralCultures = 1,
	SpecificCultures = 2,
	InstalledWin32Cultures = 4,
	AllCultures = 7,
	UserCustomCulture = 8,
	ReplacementCultures = 16,
	WindowsOnlyCultures = 32,
	FrameworkCultures = 64
}

// Namespace: System.Globalization
internal enum DateTimeFormatFlags // TypeDefIndex: 387
{
	Unused = 0,
	But = 1,
	Serialized = 2,
	By = 3,
	Microsoft = 4
}

// Namespace: System.Globalization
[Serializable]
public sealed class DateTimeFormatInfo : ICloneable, IFormatProvider // TypeDefIndex: 388
{
	// Fields
	private const string _RoundtripPattern = "yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK"; // 0x00
	private static readonly string MSG_READONLY; // 0x00
	private static readonly string MSG_ARRAYSIZE_MONTH; // 0x04
	private static readonly string MSG_ARRAYSIZE_DAY; // 0x08
	private static readonly string[] INVARIANT_ABBREVIATED_DAY_NAMES; // 0x0C
	private static readonly string[] INVARIANT_DAY_NAMES; // 0x10
	private static readonly string[] INVARIANT_ABBREVIATED_MONTH_NAMES; // 0x14
	private static readonly string[] INVARIANT_MONTH_NAMES; // 0x18
	private static readonly string[] INVARIANT_SHORT_DAY_NAMES; // 0x1C
	private static DateTimeFormatInfo theInvariantDateTimeFormatInfo; // 0x20
	private bool m_isReadOnly; // 0x08
	private string amDesignator; // 0x0C
	private string pmDesignator; // 0x10
	private string dateSeparator; // 0x14
	private string timeSeparator; // 0x18
	private string shortDatePattern; // 0x1C
	private string longDatePattern; // 0x20
	private string shortTimePattern; // 0x24
	private string longTimePattern; // 0x28
	private string monthDayPattern; // 0x2C
	private string yearMonthPattern; // 0x30
	private string fullDateTimePattern; // 0x34
	private string _RFC1123Pattern; // 0x38
	private string _SortableDateTimePattern; // 0x3C
	private string _UniversalSortableDateTimePattern; // 0x40
	private int firstDayOfWeek; // 0x44
	private Calendar calendar; // 0x48
	private int calendarWeekRule; // 0x4C
	private string[] abbreviatedDayNames; // 0x50
	private string[] dayNames; // 0x54
	private string[] monthNames; // 0x58
	private string[] abbreviatedMonthNames; // 0x5C
	private string[] allShortDatePatterns; // 0x60
	private string[] allLongDatePatterns; // 0x64
	private string[] allShortTimePatterns; // 0x68
	private string[] allLongTimePatterns; // 0x6C
	private string[] monthDayPatterns; // 0x70
	private string[] yearMonthPatterns; // 0x74
	private string[] shortDayNames; // 0x78
	private int nDataItem; // 0x7C
	private bool m_useUserOverride; // 0x80
	private bool m_isDefaultCalendar; // 0x81
	private int CultureID; // 0x84
	private bool bUseCalendarInfo; // 0x88
	private string generalShortTimePattern; // 0x8C
	private string generalLongTimePattern; // 0x90
	private string[] m_eraNames; // 0x94
	private string[] m_abbrevEraNames; // 0x98
	private string[] m_abbrevEnglishEraNames; // 0x9C
	private string[] m_dateWords; // 0xA0
	private int[] optionalCalendars; // 0xA4
	private string[] m_superShortDayNames; // 0xA8
	private string[] genitiveMonthNames; // 0xAC
	private string[] m_genitiveAbbreviatedMonthNames; // 0xB0
	private string[] leapYearMonthNames; // 0xB4
	private DateTimeFormatFlags formatFlags; // 0xB8
	private string m_name; // 0xBC
	private string[] all_date_time_patterns; // 0xC0

	// Properties
	public bool IsReadOnly { get; } // 0x002F3C34 
	public string[] AbbreviatedDayNames { get; set; } // 0x002F4400 0x002F44B8
	internal string[] RawAbbreviatedDayNames { get; set; } // 0x002F46CC 0x002F44BC
	public string[] AbbreviatedMonthNames { get; set; } // 0x002F46D4 0x002F478C
	internal string[] RawAbbreviatedMonthNames { get; set; } // 0x002F49A0 0x002F4790
	public string[] DayNames { get; set; } // 0x002F49A8 0x002F4A60
	internal string[] RawDayNames { get; set; } // 0x002F4C74 0x002F4A64
	public string[] MonthNames { get; set; } // 0x002F4C7C 0x002F4D34
	internal string[] RawMonthNames { get; set; } // 0x002F4F48 0x002F4D38
	public string AMDesignator { get; set; } // 0x002F4F50 0x002F4F58
	public string PMDesignator { get; set; } // 0x002F5080 0x002F5088
	public string DateSeparator { get; set; } // 0x002F51B0 0x002F51B8
	public string TimeSeparator { get; set; } // 0x002F52E0 0x002F52E8
	public string LongDatePattern { get; set; } // 0x002F5410 0x002F5418
	public string ShortDatePattern { get; set; } // 0x002F5540 0x002F5548
	public string ShortTimePattern { get; set; } // 0x002F5670 0x002F5678
	public string LongTimePattern { get; set; } // 0x002F57A0 0x002F57A8
	public string MonthDayPattern { get; set; } // 0x002F58D0 0x002F58D8
	public string YearMonthPattern { get; set; } // 0x002F5A00 0x002F5A08
	public string FullDateTimePattern { get; set; } // 0x002F5B30 0x002F5BDC
	public static DateTimeFormatInfo CurrentInfo { get; } // 0x002F3B70 
	public static DateTimeFormatInfo InvariantInfo { get; } // 0x002F191C 
	public DayOfWeek FirstDayOfWeek { get; set; } // 0x002F623C 0x002F6244
	public Calendar Calendar { get; set; } // 0x002F636C 0x002F11F0
	public CalendarWeekRule CalendarWeekRule { get; set; } // 0x002F6374 0x002F637C
	public string RFC1123Pattern { get; } // 0x002F6464 
	internal string RoundtripPattern { get; } // 0x002F646C 
	public string SortableDateTimePattern { get; } // 0x002F64C8 
	public string UniversalSortableDateTimePattern { get; } // 0x002F64D0 
	public string[] AbbreviatedMonthGenitiveNames { get; set; } // 0x002F751C 0x002F7524
	public string[] MonthGenitiveNames { get; set; } // 0x002F752C 0x002F7534
	public string NativeCalendarName { get; } // 0x002F753C 
	public string[] ShortestDayNames { get; set; } // 0x002F75C8 0x002F75D0

	// Constructors
	internal DateTimeFormatInfo(bool read_only); // 0x002F0FB4
	public DateTimeFormatInfo(); // 0x002F23FC
	private static DateTimeFormatInfo(); // 0x002F2404

	// Methods
	public static DateTimeFormatInfo GetInstance(IFormatProvider provider); // 0x002F39F8
	public static DateTimeFormatInfo ReadOnly(DateTimeFormatInfo dtfi); // 0x002F06C0
	public object Clone(); // 0x002F0120
	public object GetFormat(Type formatType); // 0x002F3C3C
	public string GetAbbreviatedEraName(int era); // 0x002F3C68
	public string GetAbbreviatedMonthName(int month); // 0x002F3DC8
	public int GetEra(string eraName); // 0x002F3EA0
	public string GetEraName(int era); // 0x002F41C4
	public string GetMonthName(int month); // 0x002F4328
	public string[] GetAllDateTimePatterns(); // 0x002F64D8
	internal string[] GetAllDateTimePatternsInternal(); // 0x002F659C
	private void FillAllDateTimePatterns(); // 0x002F65BC
	public string[] GetAllDateTimePatterns(char format); // 0x002F7098
	internal string[] GetAllRawDateTimePatterns(char format); // 0x002F6AA0
	public string GetDayName(DayOfWeek dayofweek); // 0x002F7374
	public string GetAbbreviatedDayName(DayOfWeek dayofweek); // 0x002F7448
	private void FillInvariantPatterns(); // 0x002F5D04
	private string[] PopulateCombinedList(string[] dates, string[] times); // 0x002F7160
	public string GetShortestDayName(DayOfWeek dayOfWeek); // 0x002F77B4
	public void SetAllDateTimePatterns(string[] patterns, char format); // 0x002F7888
}

// Namespace: System.Globalization
[Serializable]
public enum DateTimeStyles // TypeDefIndex: 389
{
	None = 0,
	AllowLeadingWhite = 1,
	AllowTrailingWhite = 2,
	AllowInnerWhite = 4,
	AllowWhiteSpaces = 7,
	NoCurrentDateDefault = 8,
	AdjustToUniversal = 16,
	AssumeLocal = 32,
	AssumeUniversal = 64,
	RoundtripKind = 128
}

// Namespace: System.Globalization
[Serializable]
public class DaylightTime // TypeDefIndex: 390
{
	// Fields
	private DateTime m_start; // 0x08
	private DateTime m_end; // 0x18
	private TimeSpan m_delta; // 0x28

	// Properties
	public DateTime Start { get; } // 0x00468D8C 
	public DateTime End { get; } // 0x00468D9C 
	public TimeSpan Delta { get; } // 0x00468DAC 

	// Constructors
	public DaylightTime(DateTime start, DateTime end, TimeSpan delta); // 0x00468D2C

}

// Namespace: System.Globalization
[Serializable]
public enum DigitShapes // TypeDefIndex: 391
{
	Context = 0,
	None = 1,
	NativeNational = 2
}

// Namespace: System.Globalization
[Serializable]
public abstract class EastAsianLunisolarCalendar : Calendar // TypeDefIndex: 392
{
	// Fields
	internal readonly CCEastAsianLunisolarEraHandler M_EraHandler; // 0x20

	// Properties
	public override int TwoDigitYearMax { get; set; } // 0x00468DD8 0x00468DE0
	internal virtual int ActualCurrentEra { get; } // 0x00468ED8 
	public override CalendarAlgorithmType AlgorithmType { get; } // 0x00469718 

	// Constructors
	internal EastAsianLunisolarCalendar(CCEastAsianLunisolarEraHandler eraHandler); // 0x00468DB8

	// Methods
	internal void M_CheckDateTime(DateTime time); // 0x00468E84
	internal void M_CheckEra(int era); // 0x00468EE0
	internal int M_CheckYEG(int year, int era); // 0x00468FD8
	internal override void M_CheckYE(int year, int era); // 0x00469024
	internal int M_CheckYMEG(int year, int month, int era); // 0x00469028
	internal int M_CheckYMDEG(int year, int month, int day, int era); // 0x00469100
	public override DateTime AddMonths(DateTime time, int months); // 0x004691CC
	public override DateTime AddYears(DateTime time, int years); // 0x0046923C
	public override int GetDayOfMonth(DateTime time); // 0x004692AC
	public override DayOfWeek GetDayOfWeek(DateTime time); // 0x004692F4
	public override int GetDayOfYear(DateTime time); // 0x00469344
	public override int GetDaysInMonth(int year, int month, int era); // 0x0046938C
	public override int GetDaysInYear(int year, int era); // 0x004693BC
	public override int GetLeapMonth(int year, int era); // 0x004693E4
	public override int GetMonth(DateTime time); // 0x004693EC
	public override int GetMonthsInYear(int year, int era); // 0x00469434
	public override int GetYear(DateTime time); // 0x00469498
	public override bool IsLeapDay(int year, int month, int day, int era); // 0x00469504
	public override bool IsLeapMonth(int year, int month, int era); // 0x00469538
	public override bool IsLeapYear(int year, int era); // 0x00469568
	public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era); // 0x00469590
	public override int ToFourDigitYear(int year); // 0x00469624
	public int GetCelestialStem(int sexagenaryYear); // 0x00469720
	public virtual int GetSexagenaryYear(DateTime time); // 0x004697E8
	public int GetTerrestrialBranch(int sexagenaryYear); // 0x00469844
}

// Namespace: System.Globalization
[Serializable]
public class GregorianCalendar : Calendar // TypeDefIndex: 393
{
	// Fields
	public const int ADEra = 1; // 0x00
	[NonSerialized]	internal GregorianCalendarTypes m_type; // 0x20
	private static Nullable`1<DateTime> Min; // 0x00
	private static Nullable`1<DateTime> Max; // 0x18

	// Properties
	public override int[] Eras { get; } // 0x00469AD0 
	public override int TwoDigitYearMax { get; set; } // 0x00469B6C 0x00469B74
	public virtual GregorianCalendarTypes CalendarType { get; set; } // 0x00469C18 0x00469C20
	public override DateTime MinSupportedDateTime { get; } // 0x0046A2E4 
	public override DateTime MaxSupportedDateTime { get; } // 0x0046A418 

	// Constructors
	public GregorianCalendar(GregorianCalendarTypes type); // 0x0046990C
	public GregorianCalendar(); // 0x00469AC8

	// Methods
	internal void M_CheckEra(int era); // 0x00469C40
	internal override void M_CheckYE(int year, int era); // 0x00469D00
	internal void M_CheckYME(int year, int month, int era); // 0x00469D94
	internal void M_CheckYMDE(int year, int month, int day, int era); // 0x00469E78
	public override DateTime AddMonths(DateTime time, int months); // 0x00469F3C
	public override DateTime AddYears(DateTime time, int years); // 0x00469F68
	public override int GetDayOfMonth(DateTime time); // 0x00469F94
	public override DayOfWeek GetDayOfWeek(DateTime time); // 0x00469FCC
	public override int GetDayOfYear(DateTime time); // 0x0046A00C
	public override int GetDaysInMonth(int year, int month, int era); // 0x0046A044
	public override int GetDaysInYear(int year, int era); // 0x0046A07C
	public override int GetEra(DateTime time); // 0x0046A0BC
	public override int GetLeapMonth(int year, int era); // 0x0046A0C4
	public override int GetMonth(DateTime time); // 0x0046A0CC
	public override int GetMonthsInYear(int year, int era); // 0x0046A104
	public override int GetWeekOfYear(DateTime time, CalendarWeekRule rule, DayOfWeek firstDayOfWeek); // 0x0046A134
	public override int GetYear(DateTime time); // 0x0046A168
	public override bool IsLeapDay(int year, int month, int day, int era); // 0x0046A1A0
	public override bool IsLeapMonth(int year, int month, int era); // 0x0046A1E4
	public override bool IsLeapYear(int year, int era); // 0x0046A208
	public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era); // 0x0046A248
	public override int ToFourDigitYear(int year); // 0x0046A2DC
}

// Namespace: System.Globalization
[Serializable]
public enum GregorianCalendarTypes // TypeDefIndex: 394
{
	Localized = 1,
	USEnglish = 2,
	MiddleEastFrench = 9,
	Arabic = 10,
	TransliteratedEnglish = 11,
	TransliteratedFrench = 12
}

// Namespace: System.Globalization
[Serializable]
public class HebrewCalendar : Calendar // TypeDefIndex: 395
{
	// Fields
	internal const long M_MinTicks = 499147488000000000; // 0x00
	internal const long M_MaxTicks = 706783967999999999; // 0x00
	internal const int M_MinYear = 5343; // 0x00
	public static readonly int HebrewEra; // 0x00
	private static DateTime Min; // 0x08
	private static DateTime Max; // 0x18

	// Properties
	internal override int M_MaxYear { get; } // 0x0046A7FC 
	public override int[] Eras { get; } // 0x0046A804 
	public override int TwoDigitYearMax { get; set; } // 0x0046A8E0 0x0046A8E8
	public override DateTime MinSupportedDateTime { get; } // 0x0046B96C 
	public override DateTime MaxSupportedDateTime { get; } // 0x0046BA04 

	// Constructors
	public HebrewCalendar(); // 0x0046A558
	private static HebrewCalendar(); // 0x0046A6F8

	// Methods
	internal void M_CheckDateTime(DateTime time); // 0x0046A98C
	internal void M_CheckEra(int era); // 0x0046AAA4
	internal override void M_CheckYE(int year, int era); // 0x0046ABE4
	internal void M_CheckYME(int year, int month, int era); // 0x0046ACCC
	internal void M_CheckYMDE(int year, int month, int day, int era); // 0x0046AE58
	public override DateTime AddMonths(DateTime time, int months); // 0x0046AF1C
	public override DateTime AddYears(DateTime time, int years); // 0x0046B160
	public override int GetDayOfMonth(DateTime time); // 0x0046B264
	public override DayOfWeek GetDayOfWeek(DateTime time); // 0x0046B2B4
	public override int GetDayOfYear(DateTime time); // 0x0046B304
	internal int M_CCMonth(int month, int year); // 0x0046B374
	internal int M_Month(int ccmonth, int year); // 0x0046B128
	public override int GetDaysInMonth(int year, int month, int era); // 0x0046B3B8
	public override int GetDaysInYear(int year, int era); // 0x0046B420
	public override int GetEra(DateTime time); // 0x0046B484
	public override int GetLeapMonth(int year, int era); // 0x0046B53C
	public override int GetMonth(DateTime time); // 0x0046B574
	public override int GetMonthsInYear(int year, int era); // 0x0046B60C
	public override int GetYear(DateTime time); // 0x0046B64C
	public override bool IsLeapDay(int year, int month, int day, int era); // 0x0046B69C
	public override bool IsLeapMonth(int year, int month, int era); // 0x0046B71C
	public override bool IsLeapYear(int year, int era); // 0x0046B770
	public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era); // 0x0046B7B0
	public override int ToFourDigitYear(int year); // 0x0046B890
}

// Namespace: System.Globalization
[Serializable]
public class HijriCalendar : Calendar // TypeDefIndex: 396
{
	// Fields
	public static readonly int HijriEra; // 0x00
	internal static readonly int M_MinFixed; // 0x04
	internal static readonly int M_MaxFixed; // 0x08
	internal int M_AddHijriDate; // 0x20
	private static DateTime Min; // 0x10
	private static DateTime Max; // 0x20

	// Properties
	public override int[] Eras { get; } // 0x0046BD80 
	public int HijriAdjustment { get; set; } // 0x0046BE5C 0x0046BEE4
	public override int TwoDigitYearMax { get; set; } // 0x0046BF6C 0x0046BF74
	internal virtual int AddHijriDate { get; set; } // 0x0046C018 0x0046C020
	public override DateTime MinSupportedDateTime { get; } // 0x0046D5B4 
	public override DateTime MaxSupportedDateTime { get; } // 0x0046D64C 

	// Constructors
	public HijriCalendar(); // 0x0046BA9C
	private static HijriCalendar(); // 0x0046BC3C

	// Methods
	internal void M_CheckFixedHijri(string param, int rdHijri); // 0x0046C080
	internal void M_CheckDateTime(DateTime time); // 0x0046C588
	internal int M_FromDateTime(DateTime time); // 0x0046C63C
	internal DateTime M_ToDateTime(int rd); // 0x0046C694
	internal DateTime M_ToDateTime(int date, int hour, int minute, int second, int milliseconds); // 0x0046C6D0
	internal void M_CheckEra(int era); // 0x0046C738
	internal override void M_CheckYE(int year, int era); // 0x0046C878
	internal void M_CheckYME(int year, int month, int era); // 0x0046C90C
	internal void M_CheckYMDE(int year, int month, int day, int era); // 0x0046CA30
	public override DateTime AddMonths(DateTime time, int months); // 0x0046CB78
	public override DateTime AddYears(DateTime time, int years); // 0x0046CD0C
	public override int GetDayOfMonth(DateTime time); // 0x0046CE80
	public override DayOfWeek GetDayOfWeek(DateTime time); // 0x0046CF44
	public override int GetDayOfYear(DateTime time); // 0x0046D008
	public override int GetDaysInMonth(int year, int month, int era); // 0x0046D0E8
	public override int GetDaysInYear(int year, int era); // 0x0046D140
	public override int GetEra(DateTime time); // 0x0046D1A4
	public override int GetLeapMonth(int year, int era); // 0x0046D260
	public override int GetMonth(DateTime time); // 0x0046D268
	public override int GetMonthsInYear(int year, int era); // 0x0046D32C
	public override int GetYear(DateTime time); // 0x0046D35C
	public override bool IsLeapDay(int year, int month, int day, int era); // 0x0046D420
	public override bool IsLeapMonth(int year, int month, int era); // 0x0046D48C
	public override bool IsLeapYear(int year, int era); // 0x0046D4B0
	public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era); // 0x0046D4F0
	public override int ToFourDigitYear(int year); // 0x0046D5AC
}

// Namespace: System.Globalization
public sealed class IdnMapping // TypeDefIndex: 397
{
	// Fields
	private bool allow_unassigned; // 0x08
	private bool use_std3; // 0x09
	private Punycode puny; // 0x0C

	// Properties
	public bool AllowUnassigned { get; set; } // 0x0046D7F0 0x0046D7F8
	public bool UseStd3AsciiRules { get; set; } // 0x0046D800 0x0046D808

	// Constructors
	public IdnMapping(); // 0x0046D6E4

	// Methods
	public override bool Equals(object obj); // 0x0046D810
	public override int GetHashCode(); // 0x0046D8CC
	public string GetAscii(string unicode); // 0x0046D8E0
	public string GetAscii(string unicode, int index); // 0x0046DB30
	public string GetAscii(string unicode, int index, int count); // 0x0046D9AC
	private string Convert(string input, int index, int count, bool toAscii); // 0x0046DC04
	private string ToAscii(string s, int offset); // 0x0046DEFC
	private void VerifyLength(string s, int offset); // 0x0046E9D4
	private string NamePrep(string s, int offset); // 0x0046E4F4
	private void VerifyProhibitedCharacters(string s, int offset); // 0x0046EBA0
	private void VerifyStd3AsciiRules(string s, int offset); // 0x0046E6B4
	public string GetUnicode(string ascii); // 0x0046EDFC
	public string GetUnicode(string ascii, int index); // 0x0046F04C
	public string GetUnicode(string ascii, int index, int count); // 0x0046EEC8
	private string ToUnicode(string s, int offset); // 0x0046E244
}

// Namespace: System.Globalization
internal class Bootstring // TypeDefIndex: 398
{
	// Fields
	private readonly char delimiter; // 0x08
	private readonly int base_num; // 0x0C
	private readonly int tmin; // 0x10
	private readonly int tmax; // 0x14
	private readonly int skew; // 0x18
	private readonly int damp; // 0x1C
	private readonly int initial_bias; // 0x20
	private readonly int initial_n; // 0x24

	// Constructors
	public Bootstring(char delimiter, int baseNum, int tmin, int tmax, int skew, int damp, int initialBias, int initialN); // 0x002E2620

	// Methods
	public string Encode(string s, int offset); // 0x002E2670
	private char EncodeDigit(int d); // 0x002E2AA4
	private int DecodeDigit(char c); // 0x002E2B54
	private int Adapt(int delta, int numPoints, bool firstTime); // 0x002E2ABC
	public string Decode(string s, int offset); // 0x002E2B7C
}

// Namespace: System.Globalization
internal class Punycode : Bootstring // TypeDefIndex: 399
{
	// Constructors
	public Punycode(); // 0x0046D7A0

}

// Namespace: System.Globalization
[Serializable]
public class JapaneseCalendar : Calendar // TypeDefIndex: 400
{
	// Fields
	internal static readonly CCGregorianEraHandler M_EraHandler; // 0x00
	private static DateTime JapanMin; // 0x08
	private static DateTime JapanMax; // 0x18

	// Properties
	public override int[] Eras { get; } // 0x0046F7F4 
	public override int TwoDigitYearMax { get; set; } // 0x0046F908 0x0046F910
	public override DateTime MinSupportedDateTime { get; } // 0x0047048C 
	public override DateTime MaxSupportedDateTime { get; } // 0x00470524 

	// Constructors
	public JapaneseCalendar(); // 0x0046F120
	private static JapaneseCalendar(); // 0x0046F538

	// Methods
	internal void M_CheckDateTime(DateTime time); // 0x0046F9B4
	internal void M_CheckEra(int era); // 0x0046FA84
	internal int M_CheckYEG(int year, int era); // 0x0046FBA4
	internal override void M_CheckYE(int year, int era); // 0x0046FC68
	internal int M_CheckYMEG(int year, int month, int era); // 0x0046FC6C
	internal int M_CheckYMDEG(int year, int month, int day, int era); // 0x0046FD3C
	public override DateTime AddMonths(DateTime time, int months); // 0x0046FE04
	public override DateTime AddYears(DateTime time, int years); // 0x0046FE5C
	public override int GetDayOfMonth(DateTime time); // 0x0046FEB4
	public override DayOfWeek GetDayOfWeek(DateTime time); // 0x0046FEFC
	public override int GetDayOfYear(DateTime time); // 0x0046FF4C
	public override int GetDaysInMonth(int year, int month, int era); // 0x0046FF94
	public override int GetDaysInYear(int year, int era); // 0x0046FFC4
	public override int GetEra(DateTime time); // 0x0046FFEC
	public override int GetLeapMonth(int year, int era); // 0x004700DC
	public override int GetMonth(DateTime time); // 0x004700E4
	public override int GetMonthsInYear(int year, int era); // 0x0047012C
	public override int GetWeekOfYear(DateTime time, CalendarWeekRule rule, DayOfWeek firstDayOfWeek); // 0x0047015C
	public override int GetYear(DateTime time); // 0x00470190
	public override bool IsLeapDay(int year, int month, int day, int era); // 0x0047027C
	public override bool IsLeapMonth(int year, int month, int era); // 0x004702B8
	public override bool IsLeapYear(int year, int era); // 0x004702DC
	public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era); // 0x00470304
	public override int ToFourDigitYear(int year); // 0x00470398
}

// Namespace: System.Globalization
[Serializable]
public class JapaneseLunisolarCalendar : EastAsianLunisolarCalendar // TypeDefIndex: 401
{
	// Fields
	public const int JapaneseEra = 1; // 0x00
	internal static readonly CCEastAsianLunisolarEraHandler era_handler; // 0x00
	private static DateTime JapanMin; // 0x08
	private static DateTime JapanMax; // 0x18

	// Properties
	internal override int ActualCurrentEra { get; } // 0x00470834 
	public override int[] Eras { get; } // 0x0047083C 
	public override DateTime MinSupportedDateTime { get; } // 0x00470A40 
	public override DateTime MaxSupportedDateTime { get; } // 0x00470AD8 

	// Constructors
	public JapaneseLunisolarCalendar(); // 0x004705BC
	private static JapaneseLunisolarCalendar(); // 0x0047065C

	// Methods
	public override int GetEra(DateTime time); // 0x00470950
}

// Namespace: System.Globalization
[Serializable]
public class JulianCalendar : Calendar // TypeDefIndex: 402
{
	// Fields
	public static readonly int JulianEra; // 0x00
	private static DateTime JulianMin; // 0x08
	private static DateTime JulianMax; // 0x18

	// Properties
	public override int[] Eras { get; } // 0x00470E14 
	public override int TwoDigitYearMax { get; set; } // 0x00470EF0 0x00470EF8
	public override CalendarAlgorithmType AlgorithmType { get; } // 0x004719D0 
	public override DateTime MinSupportedDateTime { get; } // 0x004719D8 
	public override DateTime MaxSupportedDateTime { get; } // 0x00471A70 

	// Constructors
	public JulianCalendar(); // 0x00470B70
	private static JulianCalendar(); // 0x00470D10

	// Methods
	internal void M_CheckEra(int era); // 0x00470F9C
	internal override void M_CheckYE(int year, int era); // 0x004710DC
	internal void M_CheckYME(int year, int month, int era); // 0x00471170
	internal void M_CheckYMDE(int year, int month, int day, int era); // 0x00471254
	public override DateTime AddMonths(DateTime time, int months); // 0x004713A4
	public override DateTime AddYears(DateTime time, int years); // 0x0047149C
	public override int GetDayOfMonth(DateTime time); // 0x00471574
	public override DayOfWeek GetDayOfWeek(DateTime time); // 0x004715B4
	public override int GetDayOfYear(DateTime time); // 0x004715F4
	public override int GetDaysInMonth(int year, int month, int era); // 0x00471654
	public override int GetDaysInYear(int year, int era); // 0x004716AC
	public override int GetEra(DateTime time); // 0x00471710
	public override int GetLeapMonth(int year, int era); // 0x0047179C
	public override int GetMonth(DateTime time); // 0x004717A4
	public override int GetMonthsInYear(int year, int era); // 0x004717E4
	public override int GetYear(DateTime time); // 0x00471814
	public override bool IsLeapDay(int year, int month, int day, int era); // 0x00471854
	public override bool IsLeapMonth(int year, int month, int era); // 0x004718C0
	public override bool IsLeapYear(int year, int era); // 0x004718E4
	public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era); // 0x00471924
	public override int ToFourDigitYear(int year); // 0x004719C8
}

// Namespace: System.Globalization
[Serializable]
public class KoreanCalendar : Calendar // TypeDefIndex: 403
{
	// Fields
	public const int KoreanEra = 1; // 0x00
	internal static readonly CCGregorianEraHandler M_EraHandler; // 0x00
	private static DateTime KoreanMin; // 0x08
	private static DateTime KoreanMax; // 0x18

	// Properties
	public override int[] Eras { get; } // 0x00471E14 
	public override int TwoDigitYearMax { get; set; } // 0x00471F28 0x00471F30
	public override DateTime MinSupportedDateTime { get; } // 0x0047284C 
	public override DateTime MaxSupportedDateTime { get; } // 0x004728E4 

	// Constructors
	public KoreanCalendar(); // 0x00471B08
	private static KoreanCalendar(); // 0x00471CA8

	// Methods
	internal void M_CheckEra(int era); // 0x00471FD4
	internal int M_CheckYEG(int year, int era); // 0x004720F4
	internal override void M_CheckYE(int year, int era); // 0x004721B8
	internal int M_CheckYMEG(int year, int month, int era); // 0x004721BC
	internal int M_CheckYMDEG(int year, int month, int day, int era); // 0x0047228C
	public override DateTime AddMonths(DateTime time, int months); // 0x00472354
	public override DateTime AddYears(DateTime time, int years); // 0x00472380
	public override int GetDayOfMonth(DateTime time); // 0x004723AC
	public override DayOfWeek GetDayOfWeek(DateTime time); // 0x004723E4
	public override int GetDayOfYear(DateTime time); // 0x00472424
	public override int GetDaysInMonth(int year, int month, int era); // 0x0047245C
	public override int GetDaysInYear(int year, int era); // 0x0047248C
	public override int GetEra(DateTime time); // 0x004724B4
	public override int GetLeapMonth(int year, int era); // 0x004725A4
	public override int GetMonth(DateTime time); // 0x004725AC
	public override int GetMonthsInYear(int year, int era); // 0x004725E4
	public override int GetWeekOfYear(DateTime time, CalendarWeekRule rule, DayOfWeek firstDayOfWeek); // 0x00472608
	public override int GetYear(DateTime time); // 0x0047263C
	public override bool IsLeapDay(int year, int month, int day, int era); // 0x00472728
	public override bool IsLeapMonth(int year, int month, int era); // 0x00472764
	public override bool IsLeapYear(int year, int era); // 0x00472788
	public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era); // 0x004727B0
	public override int ToFourDigitYear(int year); // 0x00472844
}

// Namespace: System.Globalization
[Serializable]
public class KoreanLunisolarCalendar : EastAsianLunisolarCalendar // TypeDefIndex: 404
{
	// Fields
	public const int GregorianEra = 1; // 0x00
	internal static readonly CCEastAsianLunisolarEraHandler era_handler; // 0x00
	private static DateTime KoreanMin; // 0x08
	private static DateTime KoreanMax; // 0x18

	// Properties
	public override int[] Eras { get; } // 0x00472B9C 
	public override DateTime MinSupportedDateTime { get; } // 0x00472DA0 
	public override DateTime MaxSupportedDateTime { get; } // 0x00472E38 

	// Constructors
	public KoreanLunisolarCalendar(); // 0x0047297C
	private static KoreanLunisolarCalendar(); // 0x00472A1C

	// Methods
	public override int GetEra(DateTime time); // 0x00472CB0
}

// Namespace: System.Globalization
[Serializable]
public sealed class NumberFormatInfo : ICloneable, IFormatProvider // TypeDefIndex: 405
{
	// Fields
	private bool isReadOnly; // 0x08
	private string decimalFormats; // 0x0C
	private string currencyFormats; // 0x10
	private string percentFormats; // 0x14
	private string digitPattern; // 0x18
	private string zeroPattern; // 0x1C
	private int currencyDecimalDigits; // 0x20
	private string currencyDecimalSeparator; // 0x24
	private string currencyGroupSeparator; // 0x28
	private int[] currencyGroupSizes; // 0x2C
	private int currencyNegativePattern; // 0x30
	private int currencyPositivePattern; // 0x34
	private string currencySymbol; // 0x38
	private string nanSymbol; // 0x3C
	private string negativeInfinitySymbol; // 0x40
	private string negativeSign; // 0x44
	private int numberDecimalDigits; // 0x48
	private string numberDecimalSeparator; // 0x4C
	private string numberGroupSeparator; // 0x50
	private int[] numberGroupSizes; // 0x54
	private int numberNegativePattern; // 0x58
	private int percentDecimalDigits; // 0x5C
	private string percentDecimalSeparator; // 0x60
	private string percentGroupSeparator; // 0x64
	private int[] percentGroupSizes; // 0x68
	private int percentNegativePattern; // 0x6C
	private int percentPositivePattern; // 0x70
	private string percentSymbol; // 0x74
	private string perMilleSymbol; // 0x78
	private string positiveInfinitySymbol; // 0x7C
	private string positiveSign; // 0x80
	private string ansiCurrencySymbol; // 0x84
	private int m_dataItem; // 0x88
	private bool m_useUserOverride; // 0x8C
	private bool validForParseAsNumber; // 0x8D
	private bool validForParseAsCurrency; // 0x8E
	private string[] nativeDigits; // 0x90
	private int digitSubstitution; // 0x94
	private static readonly string[] invariantNativeDigits; // 0x00

	// Properties
	public int CurrencyDecimalDigits { get; set; } // 0x00474DD8 0x00474DE0
	public string CurrencyDecimalSeparator { get; set; } // 0x00474EE0 0x00474EE8
	public string CurrencyGroupSeparator { get; set; } // 0x00474FE8 0x00474FF0
	public int[] CurrencyGroupSizes { get; set; } // 0x004750F0 0x004751A8
	internal int[] RawCurrencyGroupSizes { get; set; } // 0x00475478 0x004751AC
	public int CurrencyNegativePattern { get; set; } // 0x00475480 0x00475488
	public int CurrencyPositivePattern { get; set; } // 0x00475588 0x00475590
	public string CurrencySymbol { get; set; } // 0x00475690 0x00475698
	public static NumberFormatInfo CurrentInfo { get; } // 0x00475798 
	public static NumberFormatInfo InvariantInfo { get; } // 0x0047587C 
	public bool IsReadOnly { get; } // 0x00475A28 
	public string NaNSymbol { get; set; } // 0x00475A30 0x00475A38
	public string NegativeInfinitySymbol { get; set; } // 0x00475B38 0x00475B40
	public string NegativeSign { get; set; } // 0x00475C40 0x00475C48
	public int NumberDecimalDigits { get; set; } // 0x00475D48 0x00475D50
	public string NumberDecimalSeparator { get; set; } // 0x00475E50 0x00475E58
	public string NumberGroupSeparator { get; set; } // 0x00475F58 0x00475F60
	public int[] NumberGroupSizes { get; set; } // 0x00476060 0x00476118
	internal int[] RawNumberGroupSizes { get; set; } // 0x004763E8 0x0047611C
	public int NumberNegativePattern { get; set; } // 0x004763F0 0x00475928
	public int PercentDecimalDigits { get; set; } // 0x004763F8 0x00476400
	public string PercentDecimalSeparator { get; set; } // 0x00476500 0x00476508
	public string PercentGroupSeparator { get; set; } // 0x00476608 0x00476610
	public int[] PercentGroupSizes { get; set; } // 0x00476710 0x004767C8
	internal int[] RawPercentGroupSizes { get; set; } // 0x00476B40 0x004767CC
	public int PercentNegativePattern { get; set; } // 0x00476B48 0x00476B50
	public int PercentPositivePattern { get; set; } // 0x00476C50 0x00476C58
	public string PercentSymbol { get; set; } // 0x00476D58 0x00476D60
	public string PerMilleSymbol { get; set; } // 0x00476E60 0x00476E68
	public string PositiveInfinitySymbol { get; set; } // 0x00476F68 0x00476F70
	public string PositiveSign { get; set; } // 0x00477070 0x00477078

	// Constructors
	internal NumberFormatInfo(int lcid, bool read_only); // 0x00472ED0
	internal NumberFormatInfo(bool read_only); // 0x004731F4
	public NumberFormatInfo(); // 0x00473200
	private static NumberFormatInfo(); // 0x0047320C

	// Methods
	private void InitPatterns(); // 0x004736D0
	public object GetFormat(Type formatType); // 0x00477178
	public object Clone(); // 0x00477220
	public static NumberFormatInfo ReadOnly(NumberFormatInfo nfi); // 0x004772B0
	public static NumberFormatInfo GetInstance(IFormatProvider formatProvider); // 0x0047734C
}

// Namespace: System.Globalization
[Serializable]
public enum NumberStyles // TypeDefIndex: 406
{
	None = 0,
	AllowLeadingWhite = 1,
	AllowTrailingWhite = 2,
	AllowLeadingSign = 4,
	Integer = 7,
	AllowTrailingSign = 8,
	AllowParentheses = 16,
	AllowDecimalPoint = 32,
	AllowThousands = 64,
	Number = 111,
	AllowExponent = 128,
	Float = 167,
	AllowCurrencySymbol = 256,
	Currency = 383,
	Any = 511,
	AllowHexSpecifier = 512,
	HexNumber = 515
}

// Namespace: System.Globalization
[Serializable]
public class PersianCalendar : Calendar // TypeDefIndex: 407
{
	// Fields
	internal const long M_MinTicks = 196036416000000000; // 0x00
	internal const int M_MinYear = 1; // 0x00
	internal const int epoch = 226895; // 0x00
	public static readonly int PersianEra; // 0x00
	private static DateTime PersianMin; // 0x08
	private static DateTime PersianMax; // 0x18

	// Properties
	public override int[] Eras { get; } // 0x00477768 
	public override int TwoDigitYearMax { get; set; } // 0x00477844 0x0047784C
	public override CalendarAlgorithmType AlgorithmType { get; } // 0x00478AA4 
	public override DateTime MinSupportedDateTime { get; } // 0x00478AAC 
	public override DateTime MaxSupportedDateTime { get; } // 0x00478B44 

	// Constructors
	public PersianCalendar(); // 0x004774C4
	private static PersianCalendar(); // 0x00477664

	// Methods
	internal void M_CheckDateTime(DateTime time); // 0x004778F0
	internal void M_CheckEra(int era); // 0x004779E0
	internal override void M_CheckYE(int year, int era); // 0x00477B20
	internal void M_CheckYME(int year, int month, int era); // 0x00477C04
	internal void M_CheckYMDE(int year, int month, int day, int era); // 0x00477D64
	internal int fixed_from_dmy(int day, int month, int year); // 0x00477EB8
	internal int year_from_fixed(int date); // 0x00477F08
	internal void my_from_fixed(out int month, out int year, int date); // 0x00477F34
	internal void dmy_from_fixed(out int day, out int month, out int year, int date); // 0x00477FD0
	internal bool is_leap_year(int year); // 0x004780C4
	public override DateTime AddMonths(DateTime time, int months); // 0x004780FC
	public override DateTime AddYears(DateTime time, int years); // 0x00478258
	public override int GetDayOfMonth(DateTime time); // 0x00478394
	public override DayOfWeek GetDayOfWeek(DateTime time); // 0x00478404
	public override int GetDayOfYear(DateTime time); // 0x00478454
	public override int GetDaysInMonth(int year, int month, int era); // 0x004784F4
	public override int GetDaysInYear(int year, int era); // 0x0047856C
	public override int GetEra(DateTime time); // 0x004785D4
	public override int GetLeapMonth(int year, int era); // 0x0047868C
	public override int GetMonth(DateTime time); // 0x00478694
	public override int GetMonthsInYear(int year, int era); // 0x00478764
	public override int GetYear(DateTime time); // 0x00478794
	public override bool IsLeapDay(int year, int month, int day, int era); // 0x00478804
	public override bool IsLeapMonth(int year, int month, int era); // 0x00478888
	public override bool IsLeapYear(int year, int era); // 0x004788AC
	public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era); // 0x00478914
	public override int ToFourDigitYear(int year); // 0x004789F0
}

// Namespace: System.Globalization
[Serializable]
public class RegionInfo // TypeDefIndex: 408
{
	// Fields
	private static RegionInfo currentRegion; // 0x00
	private int lcid; // 0x08
	private int regionId; // 0x0C
	private string iso2Name; // 0x10
	private string iso3Name; // 0x14
	private string win3Name; // 0x18
	private string englishName; // 0x1C
	private string currencySymbol; // 0x20
	private string isoCurrencySymbol; // 0x24
	private string currencyEnglishName; // 0x28
	private static Dictionary`2<string, int> <>f__switch$map1B; // 0x04

	// Properties
	public static RegionInfo CurrentRegion { get; } // 0x00479038 
	public virtual string CurrencyEnglishName { get; } // 0x004791A0 
	public virtual string CurrencySymbol { get; } // 0x004791A8 
	public virtual string DisplayName { get; } // 0x004791B0 
	public virtual string EnglishName { get; } // 0x004791B8 
	public virtual int GeoId { get; } // 0x004791C0 
	public virtual bool IsMetric { get; } // 0x004791C8 
	public virtual string ISOCurrencySymbol { get; } // 0x0047938C 
	public virtual string NativeName { get; } // 0x00479394 
	public virtual string CurrencyNativeName { get; } // 0x004793A4 
	public virtual string Name { get; } // 0x0047942C 
	public virtual string ThreeLetterISORegionName { get; } // 0x00479434 
	public virtual string ThreeLetterWindowsRegionName { get; } // 0x0047943C 
	public virtual string TwoLetterISORegionName { get; } // 0x00479444 

	// Constructors
	public RegionInfo(int culture); // 0x00478BDC
	public RegionInfo(string name); // 0x00478E74

	// Methods
	private bool GetByTerritory(CultureInfo ci); // 0x00478D50
	private bool construct_internal_region_from_name(string name); // 0x00479034
	public override bool Equals(object value); // 0x0047944C
	public override int GetHashCode(); // 0x004794F4
	public override string ToString(); // 0x00479508
}

// Namespace: System.Globalization
[Serializable]
public class StringInfo // TypeDefIndex: 409
{
	// Fields
	private string s; // 0x08
	private int length; // 0x0C

	// Properties
	public int LengthInTextElements { get; } // 0x00479EDC 
	public string String { get; set; } // 0x0047A198 0x00479D1C

	// Constructors
	public StringInfo(); // 0x00479CEC
	public StringInfo(string value); // 0x00479CF4

	// Methods
	public override bool Equals(object value); // 0x00479DD4
	public override int GetHashCode(); // 0x00479EB0
	public string SubstringByTextElements(int startingTextElement); // 0x0047A1A0
	public string SubstringByTextElements(int startingTextElement, int lengthInTextElements); // 0x0047A30C
	public static string GetNextTextElement(string str); // 0x0047A568
	public static string GetNextTextElement(string str, int index); // 0x0047A628
	private static int GetNextTextElementLength(string str, int index); // 0x00479F44
	public static TextElementEnumerator GetTextElementEnumerator(string str); // 0x0047A690
	public static TextElementEnumerator GetTextElementEnumerator(string str, int index); // 0x0047A7C4
	public static int[] ParseCombiningCharacters(string str); // 0x0047A8F0
}

// Namespace: System.Globalization
[Serializable]
public class TaiwanCalendar : Calendar // TypeDefIndex: 410
{
	// Fields
	internal static readonly CCGregorianEraHandler M_EraHandler; // 0x00
	private static DateTime TaiwanMin; // 0x08
	private static DateTime TaiwanMax; // 0x18

	// Properties
	public override int[] Eras { get; } // 0x0047AF74 
	public override int TwoDigitYearMax { get; set; } // 0x0047B088 0x0047B090
	public override DateTime MinSupportedDateTime { get; } // 0x0047BC00 
	public override DateTime MaxSupportedDateTime { get; } // 0x0047BC98 

	// Constructors
	public TaiwanCalendar(); // 0x0047AC7C
	private static TaiwanCalendar(); // 0x0047AE0C

	// Methods
	internal void M_CheckDateTime(DateTime time); // 0x0047B134
	internal void M_CheckEra(int era); // 0x0047B204
	internal int M_CheckYEG(int year, int era); // 0x0047B324
	internal override void M_CheckYE(int year, int era); // 0x0047B3E8
	internal int M_CheckYMEG(int year, int month, int era); // 0x0047B3EC
	internal int M_CheckYMDEG(int year, int month, int day, int era); // 0x0047B4BC
	public override DateTime AddMonths(DateTime time, int months); // 0x0047B584
	public override DateTime AddYears(DateTime time, int years); // 0x0047B5DC
	public override int GetDayOfMonth(DateTime time); // 0x0047B634
	public override DayOfWeek GetDayOfWeek(DateTime time); // 0x0047B67C
	public override int GetDayOfYear(DateTime time); // 0x0047B6CC
	public override int GetDaysInMonth(int year, int month, int era); // 0x0047B714
	public override int GetDaysInYear(int year, int era); // 0x0047B744
	public override int GetEra(DateTime time); // 0x0047B76C
	public override int GetLeapMonth(int year, int era); // 0x0047B85C
	public override int GetMonth(DateTime time); // 0x0047B864
	public override int GetMonthsInYear(int year, int era); // 0x0047B8AC
	public override int GetWeekOfYear(DateTime time, CalendarWeekRule rule, DayOfWeek firstDayOfWeek); // 0x0047B8D0
	public override int GetYear(DateTime time); // 0x0047B904
	public override bool IsLeapDay(int year, int month, int day, int era); // 0x0047B9F0
	public override bool IsLeapMonth(int year, int month, int era); // 0x0047BA2C
	public override bool IsLeapYear(int year, int era); // 0x0047BA50
	public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era); // 0x0047BA78
	public override int ToFourDigitYear(int year); // 0x0047BB0C
}

// Namespace: System.Globalization
[Serializable]
public class TaiwanLunisolarCalendar : EastAsianLunisolarCalendar // TypeDefIndex: 411
{
	// Fields
	private const int TaiwanEra = 1; // 0x00
	internal static readonly CCEastAsianLunisolarEraHandler era_handler; // 0x00
	private static DateTime TaiwanMin; // 0x08
	private static DateTime TaiwanMax; // 0x18

	// Properties
	public override int[] Eras { get; } // 0x0047BF50 
	public override DateTime MinSupportedDateTime { get; } // 0x0047C154 
	public override DateTime MaxSupportedDateTime { get; } // 0x0047C1EC 

	// Constructors
	public TaiwanLunisolarCalendar(); // 0x0047BD30
	private static TaiwanLunisolarCalendar(); // 0x0047BDD0

	// Methods
	public override int GetEra(DateTime time); // 0x0047C064
}

// Namespace: System.Globalization
[Serializable]
public class TextElementEnumerator : IEnumerator // TypeDefIndex: 412
{
	// Fields
	private int index; // 0x08
	private int elementindex; // 0x0C
	private int startpos; // 0x10
	private string str; // 0x14
	private string element; // 0x18

	// Properties
	public object Current { get; } // 0x0047C284 
	public int ElementIndex { get; } // 0x0047AB58 

	// Constructors
	internal TextElementEnumerator(string str, int startpos); // 0x0047A76C

	// Methods
	public string GetTextElement(); // 0x0047C31C
	public bool MoveNext(); // 0x0047ABFC
	public void Reset(); // 0x0047AB44
}

// Namespace: System.Globalization
[Serializable]
public class TextInfo : ICloneable, IDeserializationCallback // TypeDefIndex: 413
{
	// Fields
	private string m_listSeparator; // 0x08
	private bool m_isReadOnly; // 0x0C
	private string customCultureName; // 0x10
	[NonSerialized]	private int m_nDataItem; // 0x14
	private bool m_useUserOverride; // 0x18
	private int m_win32LangID; // 0x1C
	[NonSerialized]	private readonly CultureInfo ci; // 0x20
	[NonSerialized]	private readonly bool handleDotI; // 0x24
	[NonSerialized]	private readonly Data data; // 0x28

	// Properties
	public virtual int ANSICodePage { get; } // 0x0047C66C 
	public virtual int EBCDICCodePage { get; } // 0x0047C674 
	public int LCID { get; } // 0x0047C67C 
	public virtual string ListSeparator { get; set; } // 0x0047C684 0x0047C6C8
	public virtual int MacCodePage { get; } // 0x0047C6D0 
	public virtual int OEMCodePage { get; } // 0x0047C6D8 
	public string CultureName { get; } // 0x0047C620 
	public bool IsReadOnly { get; } // 0x0047C6E0 
	public bool IsRightToLeft { get; } // 0x0047C6E8 

	// Constructors
	internal TextInfo(CultureInfo ci, int lcid, void * data, bool read_only); // 0x0047C3B4
	private TextInfo(TextInfo textInfo); // 0x0047C500

	// Methods
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender); // 0x0047C668
	public override bool Equals(object obj); // 0x0047C854
	public override int GetHashCode(); // 0x0047C924
	public override string ToString(); // 0x0047C92C
	public string ToTitleCase(string str); // 0x0047C9EC
	public virtual char ToLower(char c); // 0x0047CF6C
	public virtual char ToUpper(char c); // 0x0047D144
	private char ToTitleCase(char c); // 0x0047CEC4
	public virtual string ToLower(string str); // 0x0047D370
	public virtual string ToUpper(string str); // 0x0047D504
	public static TextInfo ReadOnly(TextInfo textInfo); // 0x0047D698
	public virtual object Clone(); // 0x0047D780
}

// Namespace: 
private struct Data // TypeDefIndex: 414
{
	// Fields
	public int ansi; // 0x08
	public int ebcdic; // 0x0C
	public int mac; // 0x10
	public int oem; // 0x14
	public byte list_sep; // 0x18

}

// Namespace: System.Globalization
[Serializable]
public class ThaiBuddhistCalendar : Calendar // TypeDefIndex: 415
{
	// Fields
	public const int ThaiBuddhistEra = 1; // 0x00
	internal static readonly CCGregorianEraHandler M_EraHandler; // 0x00
	private static DateTime ThaiMin; // 0x08
	private static DateTime ThaiMax; // 0x18

	// Properties
	public override int[] Eras { get; } // 0x0047DAFC 
	public override int TwoDigitYearMax { get; set; } // 0x0047DC10 0x0047DC18
	public override DateTime MinSupportedDateTime { get; } // 0x0047E540 
	public override DateTime MaxSupportedDateTime { get; } // 0x0047E5D8 

	// Constructors
	public ThaiBuddhistCalendar(); // 0x0047D7F0
	private static ThaiBuddhistCalendar(); // 0x0047D990

	// Methods
	internal void M_CheckEra(int era); // 0x0047DCBC
	internal int M_CheckYEG(int year, int era); // 0x0047DDDC
	internal override void M_CheckYE(int year, int era); // 0x0047DEA0
	internal int M_CheckYMEG(int year, int month, int era); // 0x0047DEA4
	internal int M_CheckYMDEG(int year, int month, int day, int era); // 0x0047DF74
	public override DateTime AddMonths(DateTime time, int months); // 0x0047E03C
	public override DateTime AddYears(DateTime time, int years); // 0x0047E068
	public override int GetDayOfMonth(DateTime time); // 0x0047E094
	public override DayOfWeek GetDayOfWeek(DateTime time); // 0x0047E0CC
	public override int GetDayOfYear(DateTime time); // 0x0047E10C
	public override int GetDaysInMonth(int year, int month, int era); // 0x0047E144
	public override int GetDaysInYear(int year, int era); // 0x0047E174
	public override int GetEra(DateTime time); // 0x0047E19C
	public override int GetLeapMonth(int year, int era); // 0x0047E28C
	public override int GetMonth(DateTime time); // 0x0047E294
	public override int GetMonthsInYear(int year, int era); // 0x0047E2CC
	public override int GetWeekOfYear(DateTime time, CalendarWeekRule rule, DayOfWeek firstDayOfWeek); // 0x0047E2FC
	public override int GetYear(DateTime time); // 0x0047E330
	public override bool IsLeapDay(int year, int month, int day, int era); // 0x0047E41C
	public override bool IsLeapMonth(int year, int month, int era); // 0x0047E458
	public override bool IsLeapYear(int year, int era); // 0x0047E47C
	public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era); // 0x0047E4A4
	public override int ToFourDigitYear(int year); // 0x0047E538
}

// Namespace: System.Globalization
[Serializable]
public class UmAlQuraCalendar : Calendar // TypeDefIndex: 416
{
	// Fields
	public const int UmAlQuraEra = 1; // 0x00
	internal static readonly int M_MinFixed; // 0x00
	internal static readonly int M_MaxFixed; // 0x04
	internal int M_AddHijriDate; // 0x20
	private static DateTime Min; // 0x08
	private static DateTime Max; // 0x18

	// Properties
	public override int[] Eras { get; } // 0x0047E944 
	public override int TwoDigitYearMax { get; set; } // 0x0047E9E0 0x0047E9E8
	internal virtual int AddHijriDate { get; set; } // 0x0047EA8C 0x0047EA94
	public override DateTime MinSupportedDateTime { get; } // 0x0047FED4 
	public override DateTime MaxSupportedDateTime { get; } // 0x0047FF6C 

	// Constructors
	public UmAlQuraCalendar(); // 0x0047E670
	private static UmAlQuraCalendar(); // 0x0047E810

	// Methods
	internal void M_CheckFixedHijri(string param, int rdHijri); // 0x0047EAF4
	internal void M_CheckDateTime(DateTime time); // 0x0047EFFC
	internal int M_FromDateTime(DateTime time); // 0x0047F0B0
	internal DateTime M_ToDateTime(int rd); // 0x0047F108
	internal DateTime M_ToDateTime(int date, int hour, int minute, int second, int milliseconds); // 0x0047F144
	internal void M_CheckEra(int era); // 0x0047F1AC
	internal override void M_CheckYE(int year, int era); // 0x0047F26C
	internal void M_CheckYME(int year, int month, int era); // 0x0047F300
	internal void M_CheckYMDE(int year, int month, int day, int era); // 0x0047F424
	public override DateTime AddMonths(DateTime time, int months); // 0x0047F52C
	public override DateTime AddYears(DateTime time, int years); // 0x0047F6C0
	public override int GetDayOfMonth(DateTime time); // 0x0047F834
	public override DayOfWeek GetDayOfWeek(DateTime time); // 0x0047F8F8
	public override int GetDayOfYear(DateTime time); // 0x0047F9BC
	public override int GetDaysInMonth(int year, int month, int era); // 0x0047FA9C
	public override int GetDaysInYear(int year, int era); // 0x0047FAF4
	public override int GetEra(DateTime time); // 0x0047FB58
	public override int GetLeapMonth(int year, int era); // 0x0047FB80
	public override int GetMonth(DateTime time); // 0x0047FB88
	public override int GetMonthsInYear(int year, int era); // 0x0047FC4C
	public override int GetYear(DateTime time); // 0x0047FC7C
	public override bool IsLeapDay(int year, int month, int day, int era); // 0x0047FD40
	public override bool IsLeapMonth(int year, int month, int era); // 0x0047FDAC
	public override bool IsLeapYear(int year, int era); // 0x0047FDD0
	public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era); // 0x0047FE10
	public override int ToFourDigitYear(int year); // 0x0047FECC
}

// Namespace: System.Globalization
[Serializable]
public enum UnicodeCategory // TypeDefIndex: 417
{
	UppercaseLetter = 0,
	LowercaseLetter = 1,
	TitlecaseLetter = 2,
	ModifierLetter = 3,
	OtherLetter = 4,
	NonSpacingMark = 5,
	SpacingCombiningMark = 6,
	EnclosingMark = 7,
	DecimalDigitNumber = 8,
	LetterNumber = 9,
	OtherNumber = 10,
	SpaceSeparator = 11,
	LineSeparator = 12,
	ParagraphSeparator = 13,
	Control = 14,
	Format = 15,
	Surrogate = 16,
	PrivateUse = 17,
	ConnectorPunctuation = 18,
	DashPunctuation = 19,
	OpenPunctuation = 20,
	ClosePunctuation = 21,
	InitialQuotePunctuation = 22,
	FinalQuotePunctuation = 23,
	OtherPunctuation = 24,
	MathSymbol = 25,
	CurrencySymbol = 26,
	ModifierSymbol = 27,
	OtherSymbol = 28,
	OtherNotAssigned = 29
}

// Namespace: System.IO.IsolatedStorage
public interface INormalizeForIsolatedStorage // TypeDefIndex: 418
{
	// Methods
	object Normalize();
}

// Namespace: System.IO.IsolatedStorage
public abstract class IsolatedStorage : MarshalByRefObject // TypeDefIndex: 419
{
	// Fields
	internal IsolatedStorageScope storage_scope; // 0x0C
	internal object _assemblyIdentity; // 0x10
	internal object _domainIdentity; // 0x14
	internal object _applicationIdentity; // 0x18

	// Properties
	public object ApplicationIdentity { get; } // 0x0049D788 
	public object AssemblyIdentity { get; } // 0x0049D8EC 
	public virtual ulong CurrentSize { get; } // 0x0049DA00 
	public object DomainIdentity { get; } // 0x0049DAA8 
	public virtual ulong MaximumSize { get; } // 0x0049DBBC 
	public IsolatedStorageScope Scope { get; } // 0x0049DC64 
	protected virtual char SeparatorExternal { get; } // 0x0049DC6C 
	protected virtual char SeparatorInternal { get; } // 0x0049DCF8 

	// Constructors
	protected IsolatedStorage(); // 0x0049D780

	// Methods
	protected abstract IsolatedStoragePermission GetPermission(PermissionSet ps);
	protected void InitStore(IsolatedStorageScope scope, Type domainEvidenceType, Type assemblyEvidenceType); // 0x0049DD00
	protected void InitStore(IsolatedStorageScope scope, Type appEvidenceType); // 0x0049DE54
	public abstract void Remove();
}

// Namespace: System.IO.IsolatedStorage
[Serializable]
public class IsolatedStorageException : Exception // TypeDefIndex: 420
{
	// Constructors
	public IsolatedStorageException(); // 0x0049DF30
	public IsolatedStorageException(string message); // 0x00497DE4
	public IsolatedStorageException(string message, Exception inner); // 0x0049DFA4
	protected IsolatedStorageException(SerializationInfo info, StreamingContext context); // 0x0049DFAC

}

// Namespace: System.IO.IsolatedStorage
public sealed class IsolatedStorageFile : IsolatedStorage, IDisposable // TypeDefIndex: 421
{
	// Fields
	private bool _resolved; // 0x1C
	private ulong _maxSize; // 0x20
	private Evidence _fullEvidences; // 0x28
	private static Mutex mutex; // 0x00
	private DirectoryInfo directory; // 0x2C

	// Properties
	public override ulong CurrentSize { get; } // 0x004A09FC 
	public override ulong MaximumSize { get; } // 0x004A0A80 
	internal string Root { get; } // 0x004A0E28 

	// Constructors
	private IsolatedStorageFile(IsolatedStorageScope scope); // 0x0049DFCC
	internal IsolatedStorageFile(IsolatedStorageScope scope, string location); // 0x0049DFEC
	private static IsolatedStorageFile(); // 0x0049E0F8

	// Methods
	public static IEnumerator GetEnumerator(IsolatedStorageScope scope); // 0x0049E178
	public static IsolatedStorageFile GetStore(IsolatedStorageScope scope, Evidence domainEvidence, Type domainEvidenceType, Evidence assemblyEvidence, Type assemblyEvidenceType); // 0x0049E6E4
	public static IsolatedStorageFile GetStore(IsolatedStorageScope scope, object domainIdentity, object assemblyIdentity); // 0x0049F4D4
	public static IsolatedStorageFile GetStore(IsolatedStorageScope scope, Type domainEvidenceType, Type assemblyEvidenceType); // 0x0049F6D0
	public static IsolatedStorageFile GetStore(IsolatedStorageScope scope, object applicationIdentity); // 0x0049F98C
	public static IsolatedStorageFile GetStore(IsolatedStorageScope scope, Type applicationEvidenceType); // 0x0049FAE0
	public static IsolatedStorageFile GetMachineStoreForApplication(); // 0x0049FC08
	public static IsolatedStorageFile GetMachineStoreForAssembly(); // 0x0049FCF8
	public static IsolatedStorageFile GetMachineStoreForDomain(); // 0x0049FDEC
	public static IsolatedStorageFile GetUserStoreForApplication(); // 0x0049FF14
	public static IsolatedStorageFile GetUserStoreForAssembly(); // 0x004A0004
	public static IsolatedStorageFile GetUserStoreForDomain(); // 0x004A00F8
	public static void Remove(IsolatedStorageScope scope); // 0x004A0220
	internal static string GetIsolatedStorageRoot(IsolatedStorageScope scope); // 0x0049E4B0
	private static void Demand(IsolatedStorageScope scope); // 0x0049E2D8
	private static IsolatedStorageContainment ScopeToContainment(IsolatedStorageScope scope); // 0x004A02AC
	internal static ulong GetDirectorySize(DirectoryInfo di); // 0x004A0360
	protected override void Finalize(); // 0x004A04E8
	private void PostInit(); // 0x0049F0C4
	public void Close(); // 0x004A0E5C
	public void CreateDirectory(string dir); // 0x004A0E60
	public void DeleteDirectory(string dir); // 0x004A1190
	public void DeleteFile(string file); // 0x004A1354
	public void Dispose(); // 0x004A140C
	public string[] GetDirectoryNames(string searchPattern); // 0x004A1414
	private string[] GetNames(FileSystemInfo[] afsi); // 0x004A16E4
	public string[] GetFileNames(string searchPattern); // 0x004A182C
	public override void Remove(); // 0x004A1AFC
	protected override IsolatedStoragePermission GetPermission(PermissionSet ps); // 0x004A0D18
	private string GetNameFromIdentity(object identity); // 0x004A04F0
	private static object GetTypeFromEvidence(Evidence e, Type t); // 0x0049EBC4
	internal static object GetAssemblyIdentityFromEvidence(Evidence e); // 0x0049EED8
	internal static object GetDomainIdentityFromEvidence(Evidence e); // 0x0049EA68
	private void SaveIdentities(string root); // 0x004A0670
}

// Namespace: 
[Serializable]
private struct Identities // TypeDefIndex: 422
{
	// Fields
	public object Application; // 0x08
	public object Assembly; // 0x0C
	public object Domain; // 0x10

	// Constructors
	public Identities(object application, object assembly, object domain); // 0x000A8794

}

// Namespace: System.IO.IsolatedStorage
internal class IsolatedStorageFileEnumerator : IEnumerator // TypeDefIndex: 423
{
	// Fields
	private IsolatedStorageScope _scope; // 0x08
	private string[] _storages; // 0x0C
	private int _pos; // 0x10

	// Properties
	public object Current { get; } // 0x004A1B34 

	// Constructors
	public IsolatedStorageFileEnumerator(IsolatedStorageScope scope, string root); // 0x0049E644

	// Methods
	public bool MoveNext(); // 0x004A1BF4
	public void Reset(); // 0x004A1C24
}

// Namespace: System.IO.IsolatedStorage
public class IsolatedStorageFileStream : FileStream // TypeDefIndex: 424
{
	// Properties
	public override bool CanRead { get; } // 0x004A281C 
	public override bool CanSeek { get; } // 0x004A2834 
	public override bool CanWrite { get; } // 0x004A283C 
	public override SafeFileHandle SafeFileHandle { get; } // 0x004A2854 
	public override IntPtr Handle { get; } // 0x004A28FC 
	public override bool IsAsync { get; } // 0x004A29A4 
	public override long Length { get; } // 0x004A29AC 
	public override long Position { get; set; } // 0x004A29B0 0x004A29B4

	// Constructors
	public IsolatedStorageFileStream(string path, FileMode mode); // 0x004A1C30
	public IsolatedStorageFileStream(string path, FileMode mode, FileAccess access); // 0x004A1D00
	public IsolatedStorageFileStream(string path, FileMode mode, FileAccess access, FileShare share); // 0x004A1D7C
	public IsolatedStorageFileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize); // 0x004A1DD0
	public IsolatedStorageFileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, IsolatedStorageFile isf); // 0x004A1CA4
	public IsolatedStorageFileStream(string path, FileMode mode, FileAccess access, FileShare share, IsolatedStorageFile isf); // 0x004A246C
	public IsolatedStorageFileStream(string path, FileMode mode, FileAccess access, IsolatedStorageFile isf); // 0x004A24BC
	public IsolatedStorageFileStream(string path, FileMode mode, IsolatedStorageFile isf); // 0x004A253C

	// Methods
	private static string CreateIsolatedPath(IsolatedStorageFile isf, string path, FileMode mode); // 0x004A1E24
	public override IAsyncResult BeginRead(byte[] buffer, int offset, int numBytes, AsyncCallback userCallback, object stateObject); // 0x004A29CC
	public override IAsyncResult BeginWrite(byte[] buffer, int offset, int numBytes, AsyncCallback userCallback, object stateObject); // 0x004A29F0
	public override int EndRead(IAsyncResult asyncResult); // 0x004A2A14
	public override void EndWrite(IAsyncResult asyncResult); // 0x004A2A18
	public override void Flush(); // 0x004A2A1C
	public override int Read(byte[] buffer, int offset, int count); // 0x004A2A20
	public override int ReadByte(); // 0x004A2A38
	public override long Seek(long offset, SeekOrigin origin); // 0x004A2A3C
	public override void SetLength(long value); // 0x004A2A5C
	public override void Write(byte[] buffer, int offset, int count); // 0x004A2A74
	public override void WriteByte(byte value); // 0x004A2A8C
	protected override void Dispose(bool disposing); // 0x004A2A90
}

// Namespace: System.IO.IsolatedStorage
[Serializable]
public enum IsolatedStorageScope // TypeDefIndex: 425
{
	None = 0,
	User = 1,
	Domain = 2,
	Assembly = 4,
	Roaming = 8,
	Machine = 16,
	Application = 32
}

// Namespace: System.IO
public class BinaryReader : IDisposable // TypeDefIndex: 426
{
	// Fields
	private const int MaxBufferSize = 128; // 0x00
	private Stream m_stream; // 0x08
	private Encoding m_encoding; // 0x0C
	private byte[] m_buffer; // 0x10
	private Decoder decoder; // 0x14
	private char[] charBuffer; // 0x18
	private bool m_disposed; // 0x1C

	// Properties
	public virtual Stream BaseStream { get; } // 0x00482E10 

	// Constructors
	public BinaryReader(Stream input); // 0x00482BF0
	public BinaryReader(Stream input, Encoding encoding); // 0x00482C84

	// Methods
	private void System.IDisposable.Dispose(); // 0x00482DFC
	public virtual void Close(); // 0x00482E18
	protected virtual void Dispose(bool disposing); // 0x00482E48
	protected virtual void FillBuffer(int numBytes); // 0x00482E98
	public virtual int PeekChar(); // 0x00483118
	public virtual int Read(); // 0x0048347C
	public virtual int Read(byte[] buffer, int index, int count); // 0x00483560
	public virtual int Read(char[] buffer, int index, int count); // 0x004837DC
	private int ReadCharBytes(char[] buffer, int index, int count, out int bytes_read); // 0x00483330
	protected int Read7BitEncodedInt(); // 0x00483A5C
	public virtual bool ReadBoolean(); // 0x00483B4C
	public virtual byte ReadByte(); // 0x00483B70
	public virtual byte[] ReadBytes(int count); // 0x00483CC8
	public virtual char ReadChar(); // 0x00483EF0
	public virtual char[] ReadChars(int count); // 0x00483F9C
	public virtual Decimal ReadDecimal(); // 0x00484148
	public virtual double ReadDouble(); // 0x0048434C
	public virtual short ReadInt16(); // 0x00484384
	public virtual int ReadInt32(); // 0x0048441C
	public virtual long ReadInt64(); // 0x00484520
	public virtual sbyte ReadSByte(); // 0x0048471C
	public virtual string ReadString(); // 0x0048473C
	public virtual float ReadSingle(); // 0x004849CC
	public virtual ushort ReadUInt16(); // 0x00484A04
	public virtual uint ReadUInt32(); // 0x00484A98
	public virtual ulong ReadUInt64(); // 0x00484B9C
	private void CheckBuffer(int length); // 0x0048304C
}

// Namespace: System.IO
[Serializable]
public class BinaryWriter : IDisposable // TypeDefIndex: 427
{
	// Fields
	public static readonly BinaryWriter Null; // 0x00
	protected Stream OutStream; // 0x08
	private Encoding m_encoding; // 0x0C
	private byte[] buffer; // 0x10
	private bool disposed; // 0x14
	private byte[] stringBuffer; // 0x18
	private int maxCharsPerRound; // 0x1C

	// Properties
	public virtual Stream BaseStream { get; } // 0x00485128 

	// Constructors
	protected BinaryWriter(); // 0x00484D98
	public BinaryWriter(Stream output); // 0x00485010
	public BinaryWriter(Stream output, Encoding encoding); // 0x00484E6C
	private static BinaryWriter(); // 0x004850A4

	// Methods
	private void System.IDisposable.Dispose(); // 0x00485114
	public virtual void Close(); // 0x00485130
	protected virtual void Dispose(bool disposing); // 0x00485144
	public virtual void Flush(); // 0x0048518C
	public virtual long Seek(int offset, SeekOrigin origin); // 0x004851C0
	public virtual void Write(bool value); // 0x00485214
	public virtual void Write(byte value); // 0x00485350
	public virtual void Write(byte[] buffer); // 0x00485440
	public virtual void Write(byte[] buffer, int index, int count); // 0x00485590
	public virtual void Write(char ch); // 0x004856E8
	public virtual void Write(char[] chars); // 0x00485884
	public virtual void Write(char[] chars, int index, int count); // 0x00485A20
	public virtual void Write(Decimal value); // 0x00485BC4
	public virtual void Write(double value); // 0x00485EB8
	public virtual void Write(short value); // 0x00485FD4
	public virtual void Write(int value); // 0x00486148
	public virtual void Write(long value); // 0x0048632C
	public virtual void Write(sbyte value); // 0x004864A0
	public virtual void Write(float value); // 0x004865DC
	public virtual void Write(string value); // 0x004866F0
	public virtual void Write(ushort value); // 0x004869B8
	public virtual void Write(uint value); // 0x00486B2C
	public virtual void Write(ulong value); // 0x00486D10
	protected void Write7BitEncodedInt(int value); // 0x0048696C
}

// Namespace: System.IO
public sealed class BufferedStream : Stream // TypeDefIndex: 428
{
	// Fields
	private Stream m_stream; // 0x08
	private byte[] m_buffer; // 0x0C
	private int m_buffer_pos; // 0x10
	private int m_buffer_read_ahead; // 0x14
	private bool m_buffer_reading; // 0x18
	private bool disposed; // 0x19

	// Properties
	public override bool CanRead { get; } // 0x004870DC 
	public override bool CanWrite { get; } // 0x00487110 
	public override bool CanSeek { get; } // 0x00487144 
	public override long Length { get; } // 0x00487178 
	public override long Position { get; set; } // 0x004872A8 0x004873C8

	// Constructors
	public BufferedStream(Stream stream); // 0x00486E84
	public BufferedStream(Stream stream, int bufferSize); // 0x00486E8C

	// Methods
	protected override void Dispose(bool disposing); // 0x004874D8
	public override void Flush(); // 0x004871B4
	public override long Seek(long offset, SeekOrigin origin); // 0x0048753C
	public override void SetLength(long value); // 0x00487678
	public override int ReadByte(); // 0x004878D0
	public override void WriteByte(byte value); // 0x00487D98
	public override int Read(out byte[] array, int offset, int count); // 0x0048799C
	public override void Write(byte[] array, int offset, int count); // 0x00487E58
	private void CheckObjectDisposedException(); // 0x004872FC
}

// Namespace: System.IO
public static class Directory // TypeDefIndex: 429
{
	// Methods
	public static DirectoryInfo CreateDirectory(string path); // 0x0048816C
	private static DirectoryInfo CreateDirectoriesInternal(string path); // 0x004884B0
	public static void Delete(string path); // 0x0048868C
	private static void RecursiveDelete(string path); // 0x00488AE8
	public static void Delete(string path, bool recursive); // 0x00488D78
	public static bool Exists(string path); // 0x00488FAC
	public static DateTime GetLastAccessTime(string path); // 0x0048904C
	public static DateTime GetLastAccessTimeUtc(string path); // 0x00489060
	public static DateTime GetLastWriteTime(string path); // 0x004890AC
	public static DateTime GetLastWriteTimeUtc(string path); // 0x004890C0
	public static DateTime GetCreationTime(string path); // 0x0048910C
	public static DateTime GetCreationTimeUtc(string path); // 0x00489120
	public static string GetCurrentDirectory(); // 0x0048916C
	public static string[] GetDirectories(string path); // 0x00488C90
	public static string[] GetDirectories(string path, string searchPattern); // 0x0048925C
	public static string[] GetDirectories(string path, string searchPattern, SearchOption searchOption); // 0x00489A40
	private static void GetDirectoriesRecurse(string path, string searchPattern, ArrayList all); // 0x00489BB0
	public static string GetDirectoryRoot(string path); // 0x00489C68
	public static string[] GetFiles(string path); // 0x00488D04
	public static string[] GetFiles(string path, string searchPattern); // 0x00489D04
	public static string[] GetFiles(string path, string searchPattern, SearchOption searchOption); // 0x00489D24
	private static void GetFilesRecurse(string path, string searchPattern, ArrayList all); // 0x00489E94
	public static string[] GetFileSystemEntries(string path); // 0x00489F4C
	public static string[] GetFileSystemEntries(string path, string searchPattern); // 0x00489FC0
	public static string[] GetLogicalDrives(); // 0x00489FE0
	private static bool IsRootDirectory(string path); // 0x00489FE8
	public static DirectoryInfo GetParent(string path); // 0x0048A174
	public static void Move(string sourceDirName, string destDirName); // 0x0048A3A8
	public static void SetCreationTime(string path, DateTime creationTime); // 0x0048A93C
	public static void SetCreationTimeUtc(string path, DateTime creationTimeUtc); // 0x0048A96C
	public static void SetCurrentDirectory(string path); // 0x0048A9CC
	public static void SetLastAccessTime(string path, DateTime lastAccessTime); // 0x0048AC34
	public static void SetLastAccessTimeUtc(string path, DateTime lastAccessTimeUtc); // 0x0048AC64
	public static void SetLastWriteTime(string path, DateTime lastWriteTime); // 0x0048ACC4
	public static void SetLastWriteTimeUtc(string path, DateTime lastWriteTimeUtc); // 0x0048ACF4
	private static void CheckPathExceptions(string path); // 0x00488DA8
	private static string[] GetFileSystemEntries(string path, string searchPattern, FileAttributes mask, FileAttributes attrs); // 0x0048927C
}

// Namespace: System.IO
[Serializable]
public sealed class DirectoryInfo : FileSystemInfo // TypeDefIndex: 430
{
	// Fields
	private string current; // 0x44
	private string parent; // 0x48

	// Properties
	public override bool Exists { get; } // 0x0048B6D4 
	public override string Name { get; } // 0x0048B868 
	public DirectoryInfo Parent { get; } // 0x0048B870 
	public DirectoryInfo Root { get; } // 0x0048B8FC 

	// Constructors
	public DirectoryInfo(string path); // 0x0048AD54
	internal DirectoryInfo(string path, bool simpleOriginalPath); // 0x0048AD5C
	private DirectoryInfo(SerializationInfo info, StreamingContext context); // 0x0048B5B4

	// Methods
	private void Initialize(); // 0x0048B210
	public void Create(); // 0x0048C124
	public DirectoryInfo CreateSubdirectory(string path); // 0x0048C130
	public FileInfo[] GetFiles(); // 0x0048C61C
	public FileInfo[] GetFiles(string searchPattern); // 0x0048C680
	public DirectoryInfo[] GetDirectories(); // 0x0048C958
	public DirectoryInfo[] GetDirectories(string searchPattern); // 0x0048C9BC
	public FileSystemInfo[] GetFileSystemInfos(); // 0x0048CB8C
	public FileSystemInfo[] GetFileSystemInfos(string searchPattern); // 0x0048CBF0
	public override void Delete(); // 0x0048CF5C
	public void Delete(bool recursive); // 0x0048CF6C
	public void MoveTo(string destDirName); // 0x0048CF78
	public override string ToString(); // 0x0048D0D0
	public DirectoryInfo[] GetDirectories(string searchPattern, SearchOption searchOption); // 0x0048D0D8
	internal int GetFilesSubdirs(ArrayList l, string pattern); // 0x0048D440
	public FileInfo[] GetFiles(string searchPattern, SearchOption searchOption); // 0x0048D5F0
}

// Namespace: System.IO
[Serializable]
public class DirectoryNotFoundException : IOException // TypeDefIndex: 431
{
	// Constructors
	public DirectoryNotFoundException(); // 0x0048DAA0
	public DirectoryNotFoundException(string message); // 0x0048DB08
	public DirectoryNotFoundException(string message, Exception innerException); // 0x0048DB10
	protected DirectoryNotFoundException(SerializationInfo info, StreamingContext context); // 0x0048DB20

}

// Namespace: System.IO
[Serializable]
public sealed class DriveInfo : ISerializable // TypeDefIndex: 432
{
	// Fields
	private _DriveType _drive_type; // 0x08
	private string drive_format; // 0x0C
	private string path; // 0x10

	// Properties
	public long AvailableFreeSpace { get; } // 0x0048E7D0 
	public long TotalFreeSpace { get; } // 0x0048E83C 
	public long TotalSize { get; } // 0x0048E8A8 
	public string VolumeLabel { get; set; } // 0x0048E914 0x0048E91C
	public string DriveFormat { get; } // 0x0048E9A4 
	public DriveType DriveType { get; } // 0x0048E9AC 
	public string Name { get; } // 0x0048E9B8 
	public DirectoryInfo RootDirectory { get; } // 0x0048E9C0 
	public bool IsReady { get; } // 0x0048EA38 

	// Constructors
	private DriveInfo(_DriveType _drive_type, string path, string fstype); // 0x0048DB60
	public DriveInfo(string driveName); // 0x0048DB90

	// Methods
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x0048DD54
	private static void GetDiskFreeSpace(string path, out ulong availableFreeSpace, out ulong totalSize, out ulong totalFreeSpace); // 0x0048DDDC
	private static StreamReader TryOpen(string name); // 0x0048EA40
	private static DriveInfo[] LinuxGetDrives(); // 0x0048EC6C
	private static DriveInfo[] UnixGetDrives(); // 0x0048F094
	private static DriveInfo[] WindowsGetDrives(); // 0x0048F3EC
	public static DriveInfo[] GetDrives(); // 0x0048DD20
	public override string ToString(); // 0x0048F474
	private static bool GetDiskFreeSpaceInternal(string pathName, out ulong freeBytesAvail, out ulong totalNumberOfBytes, out ulong totalNumberOfFreeBytes, out MonoIOError error); // 0x0048DEC0
	private static uint GetDriveTypeInternal(string rootPathName); // 0x0048E9B4
}

// Namespace: 
private enum _DriveType // TypeDefIndex: 433
{
	GenericUnix = 0,
	Linux = 1,
	Windows = 2
}

// Namespace: System.IO
[Serializable]
public class DriveNotFoundException : IOException // TypeDefIndex: 434
{
	// Fields
	private const int ErrorCode = -2147024893; // 0x00

	// Constructors
	public DriveNotFoundException(); // 0x0048F47C
	public DriveNotFoundException(string message); // 0x0048F4F0
	public DriveNotFoundException(string message, Exception innerException); // 0x0048F514
	protected DriveNotFoundException(SerializationInfo info, StreamingContext context); // 0x0048F538

}

// Namespace: System.IO
[Serializable]
public enum DriveType // TypeDefIndex: 435
{
	Unknown = 0,
	NoRootDirectory = 1,
	Removable = 2,
	Fixed = 3,
	Network = 4,
	CDRom = 5,
	Ram = 6
}

// Namespace: System.IO
[Serializable]
public class EndOfStreamException : IOException // TypeDefIndex: 436
{
	// Constructors
	public EndOfStreamException(); // 0x0048F558
	public EndOfStreamException(string message); // 0x0048F5CC
	protected EndOfStreamException(SerializationInfo info, StreamingContext context); // 0x0048F5D4
	public EndOfStreamException(string message, Exception innerException); // 0x0048F5F4

}

// Namespace: System.IO
public static class File // TypeDefIndex: 437
{
	// Fields
	private static Nullable`1<DateTime> defaultLocalFileTime; // 0x00

	// Properties
	private static DateTime DefaultLocalFileTime { get; } // 0x00491470 

	// Methods
	public static void AppendAllText(string path, string contents); // 0x0048F5FC
	public static void AppendAllText(string path, string contents, Encoding encoding); // 0x0048F76C
	public static StreamWriter AppendText(string path); // 0x0048F8EC
	public static void Copy(string sourceFileName, string destFileName); // 0x0048F964
	public static void Copy(string sourceFileName, string destFileName, bool overwrite); // 0x0048F96C
	public static FileStream Create(string path); // 0x00490AB8
	public static FileStream Create(string path, int bufferSize); // 0x00490AC0
	public static StreamWriter CreateText(string path); // 0x00490B88
	public static void Delete(string path); // 0x00490C00
	public static bool Exists(string path); // 0x0048EB18
	public static FileAttributes GetAttributes(string path); // 0x00490358
	public static DateTime GetCreationTime(string path); // 0x004910C8
	public static DateTime GetCreationTimeUtc(string path); // 0x004915B0
	public static DateTime GetLastAccessTime(string path); // 0x004915F8
	public static DateTime GetLastAccessTimeUtc(string path); // 0x0049176C
	public static DateTime GetLastWriteTime(string path); // 0x004917B4
	public static DateTime GetLastWriteTimeUtc(string path); // 0x00491928
	public static void Move(string sourceFileName, string destFileName); // 0x00491970
	public static FileStream Open(string path, FileMode mode); // 0x00492118
	public static FileStream Open(string path, FileMode mode, FileAccess access); // 0x004921EC
	public static FileStream Open(string path, FileMode mode, FileAccess access, FileShare share); // 0x0049228C
	public static FileStream OpenRead(string path); // 0x00492334
	public static StreamReader OpenText(string path); // 0x004923D4
	public static FileStream OpenWrite(string path); // 0x004924EC
	public static void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName); // 0x00492584
	public static void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors); // 0x004925A0
	public static void SetAttributes(string path, FileAttributes fileAttributes); // 0x004930A4
	public static void SetCreationTime(string path, DateTime creationTime); // 0x004931AC
	public static void SetCreationTimeUtc(string path, DateTime creationTimeUtc); // 0x00493424
	public static void SetLastAccessTime(string path, DateTime lastAccessTime); // 0x00493480
	public static void SetLastAccessTimeUtc(string path, DateTime lastAccessTimeUtc); // 0x004936F8
	public static void SetLastWriteTime(string path, DateTime lastWriteTime); // 0x00493754
	public static void SetLastWriteTimeUtc(string path, DateTime lastWriteTimeUtc); // 0x004939CC
	private static void CheckPathExceptions(string path); // 0x0049123C
	public static byte[] ReadAllBytes(string path); // 0x00493A28
	public static string[] ReadAllLines(string path); // 0x00493CF4
	public static string[] ReadAllLines(string path, Encoding encoding); // 0x00493F78
	private static string[] ReadAllLines(StreamReader reader); // 0x00493E60
	public static string ReadAllText(string path); // 0x0049413C
	public static string ReadAllText(string path, Encoding encoding); // 0x004941C8
	public static void WriteAllBytes(string path, byte[] bytes); // 0x0049437C
	public static void WriteAllLines(string path, string[] contents); // 0x004944F8
	public static void WriteAllLines(string path, string[] contents, Encoding encoding); // 0x004946CC
	private static void WriteAllLines(StreamWriter writer, string[] contents); // 0x00494648
	public static void WriteAllText(string path, string contents); // 0x00494834
	public static void WriteAllText(string path, string contents, Encoding encoding); // 0x004948C8
	public static void Encrypt(string path); // 0x00494A48
	public static void Decrypt(string path); // 0x00494AF0
}

// Namespace: System.IO
[Serializable]
public enum FileAccess // TypeDefIndex: 438
{
	Read = 1,
	Write = 2,
	ReadWrite = 3
}

// Namespace: System.IO
[Serializable]
public enum FileAttributes // TypeDefIndex: 439
{
	ReadOnly = 1,
	Hidden = 2,
	System = 4,
	Directory = 16,
	Archive = 32,
	Device = 64,
	Normal = 128,
	Temporary = 256,
	SparseFile = 512,
	ReparsePoint = 1024,
	Compressed = 2048,
	Offline = 4096,
	NotContentIndexed = 8192,
	Encrypted = 16384
}

// Namespace: System.IO
[Serializable]
public sealed class FileInfo : FileSystemInfo // TypeDefIndex: 440
{
	// Fields
	private bool exists; // 0x41

	// Properties
	public override bool Exists { get; } // 0x00494BCC 
	public override string Name { get; } // 0x00494C94 
	public bool IsReadOnly { get; set; } // 0x00494D18 0x00494E24
	public long Length { get; } // 0x004950A0 
	public string DirectoryName { get; } // 0x004951A8 
	public DirectoryInfo Directory { get; } // 0x0049522C 

	// Constructors
	public FileInfo(string fileName); // 0x0048C84C
	private FileInfo(SerializationInfo info, StreamingContext context); // 0x00494B98

	// Methods
	internal override void InternalRefresh(); // 0x00494BB0
	public void Encrypt(); // 0x00494F50
	public void Decrypt(); // 0x00494FF8
	public StreamReader OpenText(); // 0x004952AC
	public StreamWriter CreateText(); // 0x00495400
	public StreamWriter AppendText(); // 0x00495494
	public FileStream Create(); // 0x00495528
	public FileStream OpenRead(); // 0x00495534
	public FileStream OpenWrite(); // 0x00495604
	public FileStream Open(FileMode mode); // 0x00495628
	public FileStream Open(FileMode mode, FileAccess access); // 0x0049533C
	public FileStream Open(FileMode mode, FileAccess access, FileShare share); // 0x00495558
	public override void Delete(); // 0x00495648
	public void MoveTo(string destFileName); // 0x00495868
	public FileInfo CopyTo(string destFileName); // 0x00495AC4
	public FileInfo CopyTo(string destFileName, bool overwrite); // 0x00495ACC
	public override string ToString(); // 0x00495C68
	public FileInfo Replace(string destinationFileName, string destinationBackupFileName); // 0x00495C6C
	public FileInfo Replace(string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors); // 0x00495F54
}

// Namespace: System.IO
[Serializable]
public class FileLoadException : IOException // TypeDefIndex: 441
{
	// Fields
	private const int Result = -2147024894; // 0x00
	private string msg; // 0x34
	private string fileName; // 0x38
	private string fusionLog; // 0x3C

	// Properties
	public override string Message { get; } // 0x0049626C 
	public string FileName { get; } // 0x00496274 
	public string FusionLog { get; } // 0x0049627C 

	// Constructors
	public FileLoadException(); // 0x00495FDC
	public FileLoadException(string message); // 0x0049606C
	public FileLoadException(string message, string fileName); // 0x00496098
	public FileLoadException(string message, Exception inner); // 0x004960CC
	public FileLoadException(string message, string fileName, Exception inner); // 0x004960F8
	protected FileLoadException(SerializationInfo info, StreamingContext context); // 0x00496130

	// Methods
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00496284
	public override string ToString(); // 0x00496368
}

// Namespace: System.IO
[Serializable]
public enum FileMode // TypeDefIndex: 442
{
	CreateNew = 1,
	Create = 2,
	Open = 3,
	OpenOrCreate = 4,
	Truncate = 5,
	Append = 6
}

// Namespace: System.IO
[Serializable]
public class FileNotFoundException : IOException // TypeDefIndex: 443
{
	// Fields
	private const int Result = -2146232799; // 0x00
	private string fileName; // 0x34
	private string fusionLog; // 0x38

	// Properties
	public string FileName { get; } // 0x004966C8 
	public string FusionLog { get; } // 0x004966D0 
	public override string Message { get; } // 0x004966D8 

	// Constructors
	public FileNotFoundException(); // 0x00495A44
	public FileNotFoundException(string message); // 0x00496558
	public FileNotFoundException(string message, Exception innerException); // 0x0049657C
	public FileNotFoundException(string message, string fileName); // 0x0049032C
	public FileNotFoundException(string message, string fileName, Exception innerException); // 0x004965A0
	protected FileNotFoundException(SerializationInfo info, StreamingContext context); // 0x004965D0

	// Methods
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00496848
	public override string ToString(); // 0x0049692C
}

// Namespace: System.IO
[Serializable]
public enum FileOptions // TypeDefIndex: 444
{
	WriteThrough = -2147483648,
	None = 0,
	Encrypted = 16384,
	DeleteOnClose = 67108864,
	SequentialScan = 134217728,
	RandomAccess = 268435456,
	Asynchronous = 1073741824
}

// Namespace: System.IO
[Serializable]
public enum FileShare // TypeDefIndex: 445
{
	None = 0,
	Read = 1,
	Write = 2,
	ReadWrite = 3,
	Delete = 4,
	Inheritable = 16
}

// Namespace: System.IO
public class FileStream : Stream // TypeDefIndex: 446
{
	// Fields
	internal const int DefaultBufferSize = 8192; // 0x00
	private FileAccess access; // 0x08
	private bool owner; // 0x0C
	private bool async; // 0x0D
	private bool canseek; // 0x0E
	private long append_startpos; // 0x10
	private bool anonymous; // 0x18
	private byte[] buf; // 0x1C
	private int buf_size; // 0x20
	private int buf_length; // 0x24
	private int buf_offset; // 0x28
	private bool buf_dirty; // 0x2C
	private long buf_start; // 0x30
	private string name; // 0x38
	private IntPtr handle; // 0x3C
	private SafeFileHandle safeHandle; // 0x40

	// Properties
	public override bool CanRead { get; } // 0x00497F84 
	public override bool CanWrite { get; } // 0x00497F9C 
	public override bool CanSeek { get; } // 0x00497FB4 
	public virtual bool IsAsync { get; } // 0x00497FBC 
	public string Name { get; } // 0x00497FC4 
	public override long Length { get; } // 0x00497FCC 
	public override long Position { get; set; } // 0x0049820C 0x00498380
	public virtual IntPtr Handle { get; } // 0x00498564 
	public virtual SafeFileHandle SafeFileHandle { get; } // 0x0049856C 

	// Constructors
	public FileStream(IntPtr handle, FileAccess access); // 0x00496B7C
	public FileStream(IntPtr handle, FileAccess access, bool ownsHandle); // 0x00496BD4
	public FileStream(IntPtr handle, FileAccess access, bool ownsHandle, int bufferSize); // 0x00496C00
	public FileStream(IntPtr handle, FileAccess access, bool ownsHandle, int bufferSize, bool isAsync); // 0x00496BA8
	internal FileStream(IntPtr handle, FileAccess access, bool ownsHandle, int bufferSize, bool isAsync, bool noBuffering); // 0x00496C28
	public FileStream(string path, FileMode mode); // 0x00497104
	public FileStream(string path, FileMode mode, FileAccess access); // 0x00497CD8
	public FileStream(string path, FileMode mode, FileAccess access, FileShare share); // 0x004921BC
	public FileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize); // 0x00490B58
	public FileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, bool useAsync); // 0x00497DB0
	internal FileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, bool isAsync, bool anonymous); // 0x00497D40
	internal FileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, bool anonymous, FileOptions options); // 0x00497170

	// Methods
	public override int ReadByte(); // 0x0049860C
	public override void WriteByte(byte value); // 0x00498A04
	public override int Read(out byte[] array, int offset, int count); // 0x00498C38
	private int ReadInternal(byte[] dest, int offset, int count); // 0x00498FC0
	public override IAsyncResult BeginRead(byte[] array, int offset, int numBytes, AsyncCallback userCallback, object stateObject); // 0x004990BC
	public override int EndRead(IAsyncResult asyncResult); // 0x0049970C
	public override void Write(byte[] array, int offset, int count); // 0x00499AE4
	private void WriteInternal(byte[] src, int offset, int count); // 0x00499E20
	public override IAsyncResult BeginWrite(byte[] array, int offset, int numBytes, AsyncCallback userCallback, object stateObject); // 0x0049A058
	public override void EndWrite(IAsyncResult asyncResult); // 0x0049AAE8
	public override long Seek(long offset, SeekOrigin origin); // 0x0049AEA0
	public override void SetLength(long value); // 0x0049B218
	public override void Flush(); // 0x0049B548
	public virtual void Lock(long position, long length); // 0x0049B654
	public virtual void Unlock(long position, long length); // 0x0049B96C
	protected override void Finalize(); // 0x0049BBE4
	protected override void Dispose(bool disposing); // 0x0049BC5C
	private int ReadSegment(byte[] dest, int dest_offset, int count); // 0x0049905C
	private int WriteSegment(byte[] src, int src_offset, int count); // 0x00499FDC
	private void FlushBuffer(Stream st); // 0x0049A7BC
	private void FlushBuffer(); // 0x00498604
	private void FlushBufferIfDirty(); // 0x004981F4
	private void RefillBuffer(); // 0x004989C4
	private int ReadData(IntPtr handle, byte[] buf, int offset, int count); // 0x0049884C
	private void InitBuffer(int size, bool noBuffering); // 0x00496FEC
	private string GetSecureFileName(string filename); // 0x00497EC8
	private string GetSecureFileName(string filename, bool full); // 0x00497DEC
}

// Namespace: 
private delegate int ReadDelegate(byte[] buffer, int offset, int count); // TypeDefIndex: 447; 0x0049BF00

// Namespace: 
private delegate void WriteDelegate(byte[] buffer, int offset, int count); // TypeDefIndex: 448; 0x0049C304

// Namespace: System.IO
internal class FileStreamAsyncResult : IAsyncResult // TypeDefIndex: 449
{
	// Fields
	private object state; // 0x08
	private bool completed; // 0x0C
	private bool done; // 0x0D
	private Exception exc; // 0x10
	private ManualResetEvent wh; // 0x14
	private AsyncCallback cb; // 0x18
	private bool completedSynch; // 0x1C
	public byte[] Buffer; // 0x20
	public int Offset; // 0x24
	public int Count; // 0x28
	public int OriginalCount; // 0x2C
	public int BytesRead; // 0x30
	private AsyncCallback realcb; // 0x34

	// Properties
	public object AsyncState { get; } // 0x0049C848 
	public bool CompletedSynchronously { get; } // 0x0049C850 
	public WaitHandle AsyncWaitHandle { get; } // 0x0049C858 
	public bool IsCompleted { get; } // 0x0049C860 
	public Exception Exception { get; } // 0x0049C868 
	public bool Done { get; set; } // 0x0049C870 0x0049C878

	// Constructors
	public FileStreamAsyncResult(AsyncCallback cb, object state); // 0x0049A6E0

	// Methods
	private static void CBWrapper(IAsyncResult ares); // 0x0049C708
	public void SetComplete(Exception e); // 0x0049C7E0
	public void SetComplete(Exception e, int nbytes); // 0x0049C834
	public void SetComplete(Exception e, int nbytes, bool synch); // 0x0049C83C
}

// Namespace: System.IO
[Serializable]
public abstract class FileSystemInfo : MarshalByRefObject, ISerializable // TypeDefIndex: 450
{
	// Fields
	protected string FullPath; // 0x0C
	protected string OriginalPath; // 0x10
	internal MonoIOStat stat; // 0x18
	internal bool valid; // 0x40

	// Properties
	public abstract bool Exists { get; }
	public abstract string Name { get; }
	public virtual string FullName { get; } // 0x0049C9B8 
	public string Extension { get; } // 0x0049C9C0 
	public FileAttributes Attributes { get; set; } // 0x0049CC08 0x0049CC24
	public DateTime CreationTime { get; set; } // 0x0049CD60 0x0049CE10
	public DateTime CreationTimeUtc { get; set; } // 0x0049D0EC 0x0049D134
	public DateTime LastAccessTime { get; set; } // 0x0049D190 0x0049D240
	public DateTime LastAccessTimeUtc { get; set; } // 0x0049D3BC 0x0049D418
	public DateTime LastWriteTime { get; set; } // 0x0049D474 0x0049D524
	public DateTime LastWriteTimeUtc { get; set; } // 0x0049D69C 0x0049D6F8

	// Constructors
	protected FileSystemInfo(); // 0x0048AE54
	protected FileSystemInfo(SerializationInfo info, StreamingContext context); // 0x0048B5D8

	// Methods
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0049C880
	public abstract void Delete();
	public void Refresh(); // 0x0049D754
	internal void Refresh(bool force); // 0x0048B784
	internal virtual void InternalRefresh(); // 0x0049D75C
	internal void CheckPath(string path); // 0x0048AE78
}

// Namespace: System.IO
[Serializable]
public class IOException : SystemException // TypeDefIndex: 451
{
	// Constructors
	public IOException(); // 0x00496204
	public IOException(string message); // 0x0048CF54
	public IOException(string message, Exception innerException); // 0x0048DB18
	protected IOException(SerializationInfo info, StreamingContext context); // 0x0048DB40
	public IOException(string message, int hresult); // 0x0049D760

}

// Namespace: System.IO
[Serializable]
public class MemoryStream : Stream // TypeDefIndex: 452
{
	// Fields
	private bool canWrite; // 0x08
	private bool allowGetBuffer; // 0x09
	private int capacity; // 0x0C
	private int length; // 0x10
	private byte[] internalBuffer; // 0x14
	private int initialIndex; // 0x18
	private bool expandable; // 0x1C
	private bool streamClosed; // 0x1D
	private int position; // 0x20
	private int dirty_bytes; // 0x24

	// Properties
	public override bool CanRead { get; } // 0x004A3240 
	public override bool CanSeek { get; } // 0x004A3254 
	public override bool CanWrite { get; } // 0x004A3268 
	public virtual int Capacity { get; set; } // 0x004A328C 0x004A32AC
	public override long Length { get; } // 0x004A3660 
	public override long Position { get; set; } // 0x004A3684 0x004A36A8

	// Constructors
	public MemoryStream(); // 0x0049A7B4
	public MemoryStream(int capacity); // 0x004A2A94
	public MemoryStream(byte[] buffer); // 0x004A2BAC
	public MemoryStream(byte[] buffer, bool writable); // 0x004A2E54
	public MemoryStream(byte[] buffer, int index, int count); // 0x004A2F64
	public MemoryStream(byte[] buffer, int index, int count, bool writable); // 0x004A301C
	public MemoryStream(byte[] buffer, int index, int count, bool writable, bool publiclyVisible); // 0x004A30D8

	// Methods
	private void InternalConstructor(byte[] buffer, int index, int count, bool writable, bool publicallyVisible); // 0x004A2CBC
	private void CheckIfClosedThrowDisposed(); // 0x004A3194
	protected override void Dispose(bool disposing); // 0x004A37DC
	public override void Flush(); // 0x004A37E8
	public virtual byte[] GetBuffer(); // 0x004A37EC
	public override int Read(out byte[] buffer, int offset, int count); // 0x004A3888
	public override int ReadByte(); // 0x004A3A54
	public override long Seek(long offset, SeekOrigin loc); // 0x004A3ABC
	private int CalculateNewCapacity(int minimum); // 0x004A3D18
	private void Expand(int newSize); // 0x004A3D34
	public override void SetLength(long value); // 0x004A3D9C
	public virtual byte[] ToArray(); // 0x004A3F64
	public override void Write(byte[] buffer, int offset, int count); // 0x004A400C
	public override void WriteByte(byte value); // 0x004A421C
	public virtual void WriteTo(Stream stream); // 0x004A4340
}

// Namespace: System.IO
internal enum MonoFileType // TypeDefIndex: 453
{
	Unknown = 0,
	Disk = 1,
	Char = 2,
	Pipe = 3,
	Remote = 32768
}

// Namespace: System.IO
internal sealed class MonoIO // TypeDefIndex: 454
{
	// Fields
	public static readonly FileAttributes InvalidFileAttributes; // 0x00
	public static readonly IntPtr InvalidHandle; // 0x04

	// Properties
	public static IntPtr ConsoleOutput { get; } // 0x004A4768 
	public static IntPtr ConsoleInput { get; } // 0x004A476C 
	public static IntPtr ConsoleError { get; } // 0x004A4770 
	public static char VolumeSeparatorChar { get; } // 0x004A477C 
	public static char DirectorySeparatorChar { get; } // 0x004A4780 
	public static char AltDirectorySeparatorChar { get; } // 0x004A4784 
	public static char PathSeparator { get; } // 0x004A4788 

	// Constructors
	public MonoIO(); // 0x004A4428
	private static MonoIO(); // 0x004A4430

	// Methods
	public static Exception GetException(MonoIOError error); // 0x00491FC0
	public static Exception GetException(string path, MonoIOError error); // 0x0048DEC4
	public static bool CreateDirectory(string path, out MonoIOError error); // 0x004A44B8
	public static bool RemoveDirectory(string path, out MonoIOError error); // 0x004A44BC
	public static string[] GetFileSystemEntries(string path, string path_with_pattern, int attrs, int mask, out MonoIOError error); // 0x004A44C0
	public static string GetCurrentDirectory(out MonoIOError error); // 0x004A44C4
	public static bool SetCurrentDirectory(string path, out MonoIOError error); // 0x004A44C8
	public static bool MoveFile(string path, string dest, out MonoIOError error); // 0x00491FBC
	public static bool CopyFile(string path, string dest, bool overwrite, out MonoIOError error); // 0x00490AB4
	public static bool DeleteFile(string path, out MonoIOError error); // 0x00491004
	public static bool ReplaceFile(string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors, out MonoIOError error); // 0x004930A0
	public static FileAttributes GetFileAttributes(string path, out MonoIOError error); // 0x004910C4
	public static bool SetFileAttributes(string path, FileAttributes attrs, out MonoIOError error); // 0x004931A8
	public static MonoFileType GetFileType(IntPtr handle, out MonoIOError error); // 0x00496FE8
	public static bool Exists(string path, out MonoIOError error); // 0x0049027C
	public static bool ExistsFile(string path, out MonoIOError error); // 0x00491008
	public static bool ExistsDirectory(string path, out MonoIOError error); // 0x00492FB4
	public static bool ExistsSymlink(string path, out MonoIOError error); // 0x004A44CC
	public static bool GetFileStat(string path, out MonoIOStat stat, out MonoIOError error); // 0x0049146C
	public static IntPtr Open(string filename, FileMode mode, FileAccess access, FileShare share, FileOptions options, out MonoIOError error); // 0x00497F80
	public static bool Close(IntPtr handle, out MonoIOError error); // 0x0049BEF8
	public static int Read(IntPtr handle, byte[] dest, int dest_offset, int count, out MonoIOError error); // 0x0049BEFC
	public static int Write(IntPtr handle, byte[] src, int src_offset, int count, out MonoIOError error); // 0x00499FD8
	public static long Seek(IntPtr handle, long offset, SeekOrigin origin, out MonoIOError error); // 0x00497100
	public static bool Flush(IntPtr handle, out MonoIOError error); // 0x004A4578
	public static long GetLength(IntPtr handle, out MonoIOError error); // 0x00498208
	public static bool SetLength(IntPtr handle, long length, out MonoIOError error); // 0x0049B544
	public static bool SetFileTime(IntPtr handle, long creation_time, long last_access_time, long last_write_time, out MonoIOError error); // 0x004A457C
	public static bool SetFileTime(string path, long creation_time, long last_access_time, long last_write_time, out MonoIOError error); // 0x0049CF90
	public static bool SetCreationTime(string path, DateTime dateTime, out MonoIOError error); // 0x00493354
	public static bool SetLastAccessTime(string path, DateTime dateTime, out MonoIOError error); // 0x00493628
	public static bool SetLastWriteTime(string path, DateTime dateTime, out MonoIOError error); // 0x004938FC
	public static bool SetFileTime(string path, int type, long creation_time, long last_access_time, long last_write_time, DateTime dateTime, out MonoIOError error); // 0x004A4580
	public static void Lock(IntPtr handle, long position, long length, out MonoIOError error); // 0x0049B968
	public static void Unlock(IntPtr handle, long position, long length, out MonoIOError error); // 0x0049BBE0
	public static bool CreatePipe(out IntPtr read_handle, out IntPtr write_handle); // 0x004A4774
	public static bool DuplicateHandle(IntPtr source_process_handle, IntPtr source_handle, IntPtr target_process_handle, out IntPtr target_handle, int access, int inherit, int options); // 0x004A4778
	public static int GetTempPath(out string path); // 0x004A478C
	public static bool RemapPath(string path, out string newPath); // 0x004A4790
}

// Namespace: System.IO
internal enum MonoIOError // TypeDefIndex: 455
{
	ERROR_SUCCESS = 0,
	ERROR_FILE_NOT_FOUND = 2,
	ERROR_PATH_NOT_FOUND = 3,
	ERROR_TOO_MANY_OPEN_FILES = 4,
	ERROR_ACCESS_DENIED = 5,
	ERROR_INVALID_HANDLE = 6,
	ERROR_INVALID_DRIVE = 15,
	ERROR_NOT_SAME_DEVICE = 17,
	ERROR_NO_MORE_FILES = 18,
	ERROR_WRITE_FAULT = 29,
	ERROR_READ_FAULT = 30,
	ERROR_GEN_FAILURE = 31,
	ERROR_SHARING_VIOLATION = 32,
	ERROR_LOCK_VIOLATION = 33,
	ERROR_HANDLE_DISK_FULL = 39,
	ERROR_FILE_EXISTS = 80,
	ERROR_CANNOT_MAKE = 82,
	ERROR_INVALID_PARAMETER = 87,
	ERROR_BROKEN_PIPE = 109,
	ERROR_INVALID_NAME = 123,
	ERROR_DIR_NOT_EMPTY = 145,
	ERROR_ALREADY_EXISTS = 183,
	ERROR_FILENAME_EXCED_RANGE = 206,
	ERROR_ENCRYPTION_FAILED = 6000
}

// Namespace: System.IO
internal struct MonoIOStat // TypeDefIndex: 456
{
	// Fields
	public string Name; // 0x08
	public FileAttributes Attributes; // 0x0C
	public long Length; // 0x10
	public long CreationTime; // 0x18
	public long LastAccessTime; // 0x20
	public long LastWriteTime; // 0x28

}

// Namespace: System.IO
public static class Path // TypeDefIndex: 457
{
	// Fields
	public static readonly char[] InvalidPathChars; // 0x00
	public static readonly char AltDirectorySeparatorChar; // 0x04
	public static readonly char DirectorySeparatorChar; // 0x06
	public static readonly char PathSeparator; // 0x08
	internal static readonly string DirectorySeparatorStr; // 0x0C
	public static readonly char VolumeSeparatorChar; // 0x10
	internal static readonly char[] PathSeparatorChars; // 0x14
	private static readonly bool dirEqualsVolume; // 0x18

	// Constructors
	private static Path(); // 0x004A4878

	// Methods
	public static string ChangeExtension(string path, string extension); // 0x004A4B08
	public static string Combine(string path1, string path2); // 0x0048C1F8
	internal static string CleanPath(string s); // 0x004A4F1C
	public static string GetDirectoryName(string path); // 0x004905CC
	public static string GetExtension(string path); // 0x0049CA58
	public static string GetFileName(string path); // 0x0048B08C
	public static string GetFileNameWithoutExtension(string path); // 0x004A5588
	public static string GetFullPath(string path); // 0x0048B00C
	internal static string WindowsDriveAdjustment(string path); // 0x004A5FA4
	internal static string InsecureGetFullPath(string path); // 0x004A5610
	private static bool IsDsc(char c); // 0x004A635C
	public static string GetPathRoot(string path); // 0x0048B9BC
	public static string GetTempFileName(); // 0x004A7080
	public static string GetTempPath(); // 0x004A7470
	private static string get_temp_path(); // 0x004A7608
	public static bool HasExtension(string path); // 0x004A760C
	public static bool IsPathRooted(string path); // 0x004A25B8
	public static char[] GetInvalidFileNameChars(); // 0x004A779C
	public static char[] GetInvalidPathChars(); // 0x004A4A64
	public static string GetRandomFileName(); // 0x004A7878
	private static int findExtension(string path); // 0x004A4E50
	private static string GetServerAndShare(string path); // 0x004A79EC
	private static bool SameRoot(string root, string path); // 0x004A7BAC
	private static string CanonicalizePath(string path); // 0x004A643C
	internal static bool IsPathSubsetOf(string subset, string path); // 0x004A7FBC
}

// Namespace: System.IO
[Serializable]
public class PathTooLongException : IOException // TypeDefIndex: 458
{
	// Constructors
	public PathTooLongException(); // 0x004A81F8
	public PathTooLongException(string message); // 0x004A44B0
	protected PathTooLongException(SerializationInfo info, StreamingContext context); // 0x004A826C
	public PathTooLongException(string message, Exception innerException); // 0x004A828C

}

// Namespace: System.IO
[Serializable]
public enum SearchOption // TypeDefIndex: 459
{
	TopDirectoryOnly = 0,
	AllDirectories = 1
}

// Namespace: System.IO
internal class SearchPattern // TypeDefIndex: 460
{
	// Fields
	private Op ops; // 0x08
	private bool ignore; // 0x0C
	internal static readonly char[] WildcardChars; // 0x00
	internal static readonly char[] InvalidChars; // 0x04

	// Constructors
	public SearchPattern(string pattern); // 0x004A8294
	public SearchPattern(string pattern, bool ignore); // 0x004A82C4
	private static SearchPattern(); // 0x004A86AC

	// Methods
	public bool IsMatch(string text); // 0x004A8860
	private void Compile(string pattern); // 0x004A82F4
	private bool Match(Op op, string text, int ptr); // 0x004A8884
}

// Namespace: 
private class Op // TypeDefIndex: 461
{
	// Fields
	public OpCode Code; // 0x08
	public string Argument; // 0x0C
	public Op Next; // 0x10

	// Constructors
	public Op(OpCode code); // 0x004A8AA4

}

// Namespace: 
private enum OpCode // TypeDefIndex: 462
{
	ExactString = 0,
	AnyChar = 1,
	AnyString = 2,
	End = 3,
	True = 4
}

// Namespace: System.IO
[Serializable]
public enum SeekOrigin // TypeDefIndex: 463
{
	Begin = 0,
	Current = 1,
	End = 2
}

// Namespace: System.IO
[Serializable]
public abstract class Stream : IDisposable // TypeDefIndex: 464
{
	// Fields
	public static readonly Stream Null; // 0x00

	// Properties
	public abstract bool CanRead { get; }
	public abstract bool CanSeek { get; }
	public abstract bool CanWrite { get; }
	public virtual bool CanTimeout { get; } // 0x004A8B4C 
	public abstract long Length { get; }
	public abstract long Position { get; set; }
	public virtual int ReadTimeout { get; set; } // 0x004A8B7C 0x004A8C18
	public virtual int WriteTimeout { get; set; } // 0x004A8CB4 0x004A8D50

	// Constructors
	protected Stream(); // 0x00496FE0
	private static Stream(); // 0x004A8AD0

	// Methods
	public void Dispose(); // 0x004A8B54
	protected virtual void Dispose(bool disposing); // 0x004A8B64
	public virtual void Close(); // 0x004A8B68
	public static Stream Synchronized(Stream stream); // 0x004A8DEC
	protected virtual WaitHandle CreateWaitHandle(); // 0x004A8E74
	public abstract void Flush();
	public abstract int Read(out byte[] buffer, int offset, int count);
	public virtual int ReadByte(); // 0x004A8EE4
	public abstract long Seek(long offset, SeekOrigin origin);
	public abstract void SetLength(long value);
	public abstract void Write(byte[] buffer, int offset, int count);
	public virtual void WriteByte(byte value); // 0x004A8FB8
	public virtual IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback callback, object state); // 0x00499424
	public virtual IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback callback, object state); // 0x0049A4C8
	public virtual int EndRead(IAsyncResult asyncResult); // 0x004998F0
	public virtual void EndWrite(IAsyncResult asyncResult); // 0x0049ACD0
}

// Namespace: System.IO
internal class NullStream : Stream // TypeDefIndex: 465
{
	// Properties
	public override bool CanRead { get; } // 0x004A4818 
	public override bool CanSeek { get; } // 0x004A4820 
	public override bool CanWrite { get; } // 0x004A4828 
	public override long Length { get; } // 0x004A4830 
	public override long Position { get; set; } // 0x004A483C 0x004A4848

	// Constructors
	public NullStream(); // 0x004A4794

	// Methods
	public override void Flush(); // 0x004A484C
	public override int Read(byte[] buffer, int offset, int count); // 0x004A4850
	public override int ReadByte(); // 0x004A4858
	public override long Seek(long offset, SeekOrigin origin); // 0x004A4860
	public override void SetLength(long value); // 0x004A486C
	public override void Write(byte[] buffer, int offset, int count); // 0x004A4870
	public override void WriteByte(byte value); // 0x004A4874
}

// Namespace: System.IO
internal class StreamAsyncResult : IAsyncResult // TypeDefIndex: 466
{
	// Fields
	private object state; // 0x08
	private bool completed; // 0x0C
	private bool done; // 0x0D
	private Exception exc; // 0x10
	private int nbytes; // 0x14
	private ManualResetEvent wh; // 0x18

	// Properties
	public object AsyncState { get; } // 0x004A9140 
	public WaitHandle AsyncWaitHandle { get; } // 0x004A9148 
	public virtual bool CompletedSynchronously { get; } // 0x004A9244 
	public bool IsCompleted { get; } // 0x004A924C 
	public Exception Exception { get; } // 0x004A9254 
	public int NBytes { get; } // 0x004A925C 
	public bool Done { get; set; } // 0x004A9264 0x004A926C

	// Constructors
	public StreamAsyncResult(object state); // 0x004A9080

	// Methods
	public void SetComplete(Exception e); // 0x004A90B4
	public void SetComplete(Exception e, int nbytes); // 0x004A90AC
}

// Namespace: System.IO
[Serializable]
public class StreamReader : TextReader // TypeDefIndex: 467
{
	// Fields
	private const int DefaultBufferSize = 1024; // 0x00
	private const int DefaultFileBufferSize = 4096; // 0x00
	private const int MinimumBufferSize = 128; // 0x00
	private byte[] input_buffer; // 0x08
	private char[] decoded_buffer; // 0x0C
	private int decoded_count; // 0x10
	private int pos; // 0x14
	private int buffer_size; // 0x18
	private int do_checks; // 0x1C
	private Encoding encoding; // 0x20
	private Decoder decoder; // 0x24
	private Stream base_stream; // 0x28
	private bool mayBlock; // 0x2C
	private StringBuilder line_builder; // 0x30
	public static readonly StreamReader Null; // 0x00
	private bool foundCR; // 0x34

	// Properties
	public virtual Stream BaseStream { get; } // 0x004A9B90 
	public virtual Encoding CurrentEncoding { get; } // 0x004A9B98 
	public bool EndOfStream { get; } // 0x0049411C 

	// Constructors
	internal StreamReader(); // 0x004A9274
	public StreamReader(Stream stream); // 0x00495358
	public StreamReader(Stream stream, bool detectEncodingFromByteOrderMarks); // 0x004A93AC
	public StreamReader(Stream stream, Encoding encoding); // 0x004A9458
	public StreamReader(Stream stream, Encoding encoding, bool detectEncodingFromByteOrderMarks); // 0x004A947C
	public StreamReader(Stream stream, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize); // 0x004A92F8
	public StreamReader(string path); // 0x00492444
	public StreamReader(string path, bool detectEncodingFromByteOrderMarks); // 0x004A9A44
	public StreamReader(string path, Encoding encoding); // 0x0048EC48
	public StreamReader(string path, Encoding encoding, bool detectEncodingFromByteOrderMarks); // 0x004A9AF0
	public StreamReader(string path, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize); // 0x004A9748
	private static StreamReader(); // 0x004A9B10

	// Methods
	internal void Initialize(Stream stream, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize); // 0x004A949C
	public override void Close(); // 0x004A9C30
	protected override void Dispose(bool disposing); // 0x004A9C44
	private int DoChecks(int count); // 0x004A9CA4
	public void DiscardBufferedData(); // 0x004AA2E0
	private int ReadBuffer(); // 0x004AA32C
	public override int Peek(); // 0x004AA554
	internal bool DataAvailable(); // 0x004AA678
	public override int Read(); // 0x004AA690
	public override int Read(out char[] buffer, int index, int count); // 0x004AA7BC
	private int FindNextEOL(); // 0x004AAA80
	public override string ReadLine(); // 0x004AAB6C
	public override string ReadToEnd(); // 0x004AAE80
}

// Namespace: 
private class NullStreamReader : StreamReader // TypeDefIndex: 468
{
	// Properties
	public override Stream BaseStream { get; } // 0x001CDFE8 
	public override Encoding CurrentEncoding { get; } // 0x001CE074 

	// Constructors
	public NullStreamReader(); // 0x001CDEB8

	// Methods
	public override int Peek(); // 0x001CDF3C
	public override int Read(); // 0x001CDF44
	public override int Read(out char[] buffer, int index, int count); // 0x001CDF4C
	public override string ReadLine(); // 0x001CDF54
	public override string ReadToEnd(); // 0x001CDF5C
}

// Namespace: System.IO
[Serializable]
public class StreamWriter : TextWriter // TypeDefIndex: 469
{
	// Fields
	private const int DefaultBufferSize = 1024; // 0x00
	private const int DefaultFileBufferSize = 4096; // 0x00
	private const int MinimumBufferSize = 256; // 0x00
	private Encoding internalEncoding; // 0x10
	private Stream internalStream; // 0x14
	private bool iflush; // 0x18
	private byte[] byte_buf; // 0x1C
	private int byte_pos; // 0x20
	private char[] decode_buf; // 0x24
	private int decode_pos; // 0x28
	private bool DisposedAlready; // 0x2C
	private bool preamble_done; // 0x2D
	public static readonly StreamWriter Null; // 0x00

	// Properties
	public virtual bool AutoFlush { get; set; } // 0x001CE9C4 0x001CE9CC
	public virtual Stream BaseStream { get; } // 0x001CE9E8 
	public override Encoding Encoding { get; } // 0x001CE9F0 

	// Constructors
	public StreamWriter(Stream stream); // 0x001CE0F0
	public StreamWriter(Stream stream, Encoding encoding); // 0x001CE388
	public StreamWriter(Stream stream, Encoding encoding, int bufferSize); // 0x001CE190
	public StreamWriter(string path); // 0x001CE51C
	public StreamWriter(string path, bool append); // 0x001CE7EC
	public StreamWriter(string path, bool append, Encoding encoding); // 0x001CE898
	public StreamWriter(string path, bool append, Encoding encoding, int bufferSize); // 0x001CE5C4
	private static StreamWriter(); // 0x001CE8B8

	// Methods
	internal void Initialize(Encoding encoding, int bufferSize); // 0x001CE3E8
	protected override void Dispose(bool disposing); // 0x001CE9F8
	public override void Flush(); // 0x001CEC08
	private void FlushBytes(); // 0x001CED90
	private void Decode(); // 0x001CECFC
	public override void Write(char[] buffer, int index, int count); // 0x001CEE90
	private void LowLevelWrite(char[] buffer, int index, int count); // 0x001CF0E8
	private void LowLevelWrite(string s); // 0x001CF1A0
	public override void Write(char value); // 0x001CF2E8
	public override void Write(char[] buffer); // 0x001CF428
	public override void Write(string value); // 0x001CF524
	public override void Close(); // 0x001CF608
	protected override void Finalize(); // 0x001CF61C
}

// Namespace: System.IO
[Serializable]
public class StringReader : TextReader // TypeDefIndex: 470
{
	// Fields
	private string source; // 0x08
	private int nextChar; // 0x0C
	private int sourceLength; // 0x10

	// Constructors
	public StringReader(string s); // 0x001CF694

	// Methods
	public override void Close(); // 0x001CF794
	protected override void Dispose(bool disposing); // 0x001CF7A8
	public override int Peek(); // 0x001CF7D0
	public override int Read(); // 0x001CF8E8
	public override int Read(out char[] buffer, int index, int count); // 0x001CF93C
	public override string ReadLine(); // 0x001CFAD8
	public override string ReadToEnd(); // 0x001CFC08
	private void CheckObjectDisposedException(); // 0x001CF81C
}

// Namespace: System.IO
[Serializable]
public class StringWriter : TextWriter // TypeDefIndex: 471
{
	// Fields
	private StringBuilder internalString; // 0x10
	private bool disposed; // 0x14

	// Properties
	public override Encoding Encoding { get; } // 0x001CFE40 

	// Constructors
	public StringWriter(); // 0x001CFC50
	public StringWriter(IFormatProvider formatProvider); // 0x001CFCD4
	public StringWriter(StringBuilder sb); // 0x001CFCCC
	public StringWriter(StringBuilder sb, IFormatProvider formatProvider); // 0x001CFD54

	// Methods
	public override void Close(); // 0x001CFEBC
	protected override void Dispose(bool disposing); // 0x001CFEEC
	public virtual StringBuilder GetStringBuilder(); // 0x001CFF28
	public override string ToString(); // 0x001CFF30
	public override void Write(char value); // 0x001CFF5C
	public override void Write(string value); // 0x001D0054
	public override void Write(char[] buffer, int index, int count); // 0x001D014C
}

// Namespace: System.IO
[Serializable]
public abstract class TextReader : IDisposable // TypeDefIndex: 472
{
	// Fields
	public static readonly TextReader Null; // 0x00

	// Constructors
	protected TextReader(); // 0x001CF78C
	private static TextReader(); // 0x001D2380

	// Methods
	public virtual void Close(); // 0x001D2480
	public void Dispose(); // 0x001D2494
	protected virtual void Dispose(bool disposing); // 0x001CF7C0
	public virtual int Peek(); // 0x001D24A8
	public virtual int Read(); // 0x001D24B0
	public virtual int Read(out char[] buffer, int index, int count); // 0x001D24B8
	public virtual int ReadBlock(out char[] buffer, int index, int count); // 0x001D255C
	public virtual string ReadLine(); // 0x001D25C8
	public virtual string ReadToEnd(); // 0x001D2654
	public static TextReader Synchronized(TextReader reader); // 0x001D26E0
}

// Namespace: 
private class NullTextReader : TextReader // TypeDefIndex: 473
{
	// Constructors
	public NullTextReader(); // 0x001D23FC

	// Methods
	public override string ReadLine(); // 0x001D27E0
}

// Namespace: System.IO
[Serializable]
internal class SynchronizedReader : TextReader // TypeDefIndex: 474
{
	// Fields
	private TextReader reader; // 0x08

	// Constructors
	public SynchronizedReader(TextReader reader); // 0x001D03C0

	// Methods
	public override void Close(); // 0x001D044C
	public override int Peek(); // 0x001D04DC
	public override int ReadBlock(char[] buffer, int index, int count); // 0x001D057C
	public override string ReadLine(); // 0x001D0640
	public override string ReadToEnd(); // 0x001D06E0
	public override int Read(); // 0x001D0780
	public override int Read(char[] buffer, int index, int count); // 0x001D0820
}

// Namespace: System.IO
[Serializable]
public abstract class TextWriter : IDisposable // TypeDefIndex: 475
{
	// Fields
	protected char[] CoreNewLine; // 0x08
	internal IFormatProvider internalFormatProvider; // 0x0C
	public static readonly TextWriter Null; // 0x00

	// Properties
	public abstract Encoding Encoding { get; }
	public virtual IFormatProvider FormatProvider { get; } // 0x001D2930 
	public virtual string NewLine { get; set; } // 0x001D2938 0x001D2948

	// Constructors
	protected TextWriter(); // 0x001CE3A4
	protected TextWriter(IFormatProvider formatProvider); // 0x001D27E8
	private static TextWriter(); // 0x001D2834

	// Methods
	public virtual void Close(); // 0x001D2990
	protected virtual void Dispose(bool disposing); // 0x001CFF18
	public void Dispose(); // 0x001D29A4
	public virtual void Flush(); // 0x001D29D8
	public static TextWriter Synchronized(TextWriter writer); // 0x001D29DC
	internal static TextWriter Synchronized(TextWriter writer, bool neverClose); // 0x001D2A60
	public virtual void Write(bool value); // 0x001D2B68
	public virtual void Write(char value); // 0x001D2BA8
	public virtual void Write(char[] buffer); // 0x001D2BAC
	public virtual void Write(Decimal value); // 0x001D2BE4
	public virtual void Write(double value); // 0x001D2C30
	public virtual void Write(int value); // 0x001D2C74
	public virtual void Write(long value); // 0x001D2D40
	public virtual void Write(object value); // 0x001D2E14
	public virtual void Write(float value); // 0x001D2E5C
	public virtual void Write(string value); // 0x001D2EA0
	public virtual void Write(uint value); // 0x001D2EDC
	public virtual void Write(ulong value); // 0x001D2F20
	public virtual void Write(string format, object arg0); // 0x001D2F64
	public virtual void Write(string format, object[] arg); // 0x001D300C
	public virtual void Write(char[] buffer, int index, int count); // 0x001D30B4
	public virtual void Write(string format, object arg0, object arg1); // 0x001D3270
	public virtual void Write(string format, object arg0, object arg1, object arg2); // 0x001D3320
	public virtual void WriteLine(); // 0x001D33E4
	public virtual void WriteLine(bool value); // 0x001D33F8
	public virtual void WriteLine(char value); // 0x001D3430
	public virtual void WriteLine(char[] buffer); // 0x001D3468
	public virtual void WriteLine(Decimal value); // 0x001D34A0
	public virtual void WriteLine(double value); // 0x001D34E8
	public virtual void WriteLine(int value); // 0x001D352C
	public virtual void WriteLine(long value); // 0x001D3564
	public virtual void WriteLine(object value); // 0x001D35A8
	public virtual void WriteLine(float value); // 0x001D35E0
	public virtual void WriteLine(string value); // 0x001D3618
	public virtual void WriteLine(uint value); // 0x001D3650
	public virtual void WriteLine(ulong value); // 0x001D3688
	public virtual void WriteLine(string format, object arg0); // 0x001D36CC
	public virtual void WriteLine(string format, object[] arg); // 0x001D3704
	public virtual void WriteLine(char[] buffer, int index, int count); // 0x001D373C
	public virtual void WriteLine(string format, object arg0, object arg1); // 0x001D3780
	public virtual void WriteLine(string format, object arg0, object arg1, object arg2); // 0x001D37C4
}

// Namespace: 
private sealed class NullTextWriter : TextWriter // TypeDefIndex: 476
{
	// Properties
	public override Encoding Encoding { get; } // 0x001D380C 

	// Constructors
	public NullTextWriter(); // 0x001D28B0

	// Methods
	public override void Write(string s); // 0x001D3888
	public override void Write(char value); // 0x001D388C
	public override void Write(char[] value, int index, int count); // 0x001D3890
}

// Namespace: System.IO
[Serializable]
internal class SynchronizedWriter : TextWriter // TypeDefIndex: 477
{
	// Fields
	private TextWriter writer; // 0x10
	private bool neverClose; // 0x14

	// Properties
	public override Encoding Encoding { get; } // 0x001D2108 
	public override IFormatProvider FormatProvider { get; } // 0x001D21A8 
	public override string NewLine { get; set; } // 0x001D2248 0x001D22E8

	// Constructors
	public SynchronizedWriter(TextWriter writer); // 0x001D08E4
	public SynchronizedWriter(TextWriter writer, bool neverClose); // 0x001D08EC

	// Methods
	public override void Close(); // 0x001D097C
	public override void Flush(); // 0x001D0A20
	public override void Write(bool value); // 0x001D0AB0
	public override void Write(char value); // 0x001D0B48
	public override void Write(char[] value); // 0x001D0BE0
	public override void Write(Decimal value); // 0x001D0C78
	public override void Write(int value); // 0x001D0D40
	public override void Write(long value); // 0x001D0DD8
	public override void Write(object value); // 0x001D0E90
	public override void Write(float value); // 0x001D0F28
	public override void Write(string value); // 0x001D0FC0
	public override void Write(uint value); // 0x001D1058
	public override void Write(ulong value); // 0x001D10F0
	public override void Write(string format, object value); // 0x001D11A8
	public override void Write(string format, object[] value); // 0x001D124C
	public override void Write(char[] buffer, int index, int count); // 0x001D12F0
	public override void Write(string format, object arg0, object arg1); // 0x001D13B0
	public override void Write(string format, object arg0, object arg1, object arg2); // 0x001D1470
	public override void WriteLine(); // 0x001D1538
	public override void WriteLine(bool value); // 0x001D15C8
	public override void WriteLine(char value); // 0x001D1660
	public override void WriteLine(char[] value); // 0x001D16F8
	public override void WriteLine(Decimal value); // 0x001D1790
	public override void WriteLine(double value); // 0x001D1858
	public override void WriteLine(int value); // 0x001D1910
	public override void WriteLine(long value); // 0x001D19A8
	public override void WriteLine(object value); // 0x001D1A60
	public override void WriteLine(float value); // 0x001D1AF8
	public override void WriteLine(string value); // 0x001D1B90
	public override void WriteLine(uint value); // 0x001D1C28
	public override void WriteLine(ulong value); // 0x001D1CC0
	public override void WriteLine(string format, object value); // 0x001D1D78
	public override void WriteLine(string format, object[] value); // 0x001D1E1C
	public override void WriteLine(char[] buffer, int index, int count); // 0x001D1EC0
	public override void WriteLine(string format, object arg0, object arg1); // 0x001D1F80
	public override void WriteLine(string format, object arg0, object arg1, object arg2); // 0x001D2040
}

// Namespace: System.IO
internal class UnexceptionalStreamReader : StreamReader // TypeDefIndex: 478
{
	// Fields
	private static bool[] newline; // 0x00
	private static char newlineChar; // 0x04

	// Constructors
	public UnexceptionalStreamReader(Stream stream); // 0x001D3894
	public UnexceptionalStreamReader(Stream stream, bool detect_encoding_from_bytemarks); // 0x001D3920
	public UnexceptionalStreamReader(Stream stream, Encoding encoding); // 0x001D39B4
	public UnexceptionalStreamReader(Stream stream, Encoding encoding, bool detect_encoding_from_bytemarks); // 0x001D3A48
	public UnexceptionalStreamReader(Stream stream, Encoding encoding, bool detect_encoding_from_bytemarks, int buffer_size); // 0x001D3AF0
	public UnexceptionalStreamReader(string path); // 0x001D3BA0
	public UnexceptionalStreamReader(string path, bool detect_encoding_from_bytemarks); // 0x001D3C2C
	public UnexceptionalStreamReader(string path, Encoding encoding); // 0x001D3CC0
	public UnexceptionalStreamReader(string path, Encoding encoding, bool detect_encoding_from_bytemarks); // 0x001D3D54
	public UnexceptionalStreamReader(string path, Encoding encoding, bool detect_encoding_from_bytemarks, int buffer_size); // 0x001D3DFC
	private static UnexceptionalStreamReader(); // 0x001D3EAC

	// Methods
	public override int Peek(); // 0x001D3F90
	public override int Read(); // 0x001D4074
	public override int Read(out char[] dest_buffer, int index, int count); // 0x001D4158
	private bool CheckEOL(char current); // 0x001D44A4
	public override string ReadLine(); // 0x001D47DC
	public override string ReadToEnd(); // 0x001D48C0
}

// Namespace: System.IO
internal class UnexceptionalStreamWriter : StreamWriter // TypeDefIndex: 479
{
	// Constructors
	public UnexceptionalStreamWriter(Stream stream); // 0x001D49A4
	public UnexceptionalStreamWriter(Stream stream, Encoding encoding); // 0x001D4A2C
	public UnexceptionalStreamWriter(Stream stream, Encoding encoding, int bufferSize); // 0x001D4AC8
	public UnexceptionalStreamWriter(string path); // 0x001D4B68
	public UnexceptionalStreamWriter(string path, bool append); // 0x001D4BF0
	public UnexceptionalStreamWriter(string path, bool append, Encoding encoding); // 0x001D4C80
	public UnexceptionalStreamWriter(string path, bool append, Encoding encoding, int bufferSize); // 0x001D4D28

	// Methods
	public override void Flush(); // 0x001D4DD0
	public override void Write(char[] buffer, int index, int count); // 0x001D4EAC
	public override void Write(char value); // 0x001D4FAC
	public override void Write(char[] value); // 0x001D5090
	public override void Write(string value); // 0x001D5174
}

// Namespace: System.IO
public class UnmanagedMemoryStream : Stream // TypeDefIndex: 480
{
	// Fields
	private long length; // 0x08
	private bool closed; // 0x10
	private long capacity; // 0x18
	private FileAccess fileaccess; // 0x20
	private IntPtr initial_pointer; // 0x24
	private long initial_position; // 0x28
	private long current_position; // 0x30
	private EventHandler Closed; // 0x38

	// Properties
	public override bool CanRead { get; } // 0x001D57E4 
	public override bool CanSeek { get; } // 0x001D580C 
	public override bool CanWrite { get; } // 0x001D5820 
	public long Capacity { get; } // 0x001D5848 
	public override long Length { get; } // 0x001D58F8 
	public override long Position { get; set; } // 0x001D59A8 0x001D5A58
	public void * PositionPointer { get; set; } // 0x001D5BD0 0x001D5CE8

	// Events
	internal event EventHandler Closed {
		add; // 0x001D56C4
		remove; // 0x001D5754
	}

	// Constructors
	protected UnmanagedMemoryStream(); // 0x001D5258
	public UnmanagedMemoryStream(void * pointer, long length); // 0x001D52E4
	public UnmanagedMemoryStream(void * pointer, long length, long capacity, FileAccess access); // 0x001D5604

	// Methods
	public override int Read(out byte[] buffer, int offset, int count); // 0x001D5E14
	public override int ReadByte(); // 0x001D6150
	public override long Seek(long offset, SeekOrigin loc); // 0x001D62B8
	public override void SetLength(long value); // 0x001D6490
	public override void Flush(); // 0x001D6664
	protected override void Dispose(bool disposing); // 0x001D6710
	public override void Write(byte[] buffer, int offset, int count); // 0x001D6744
	public override void WriteByte(byte value); // 0x001D6ADC
	protected void Initialize(void * pointer, long length, long capacity, FileAccess access); // 0x001D53A0
}

// Namespace: System.Reflection.Emit
internal enum NativeResourceType // TypeDefIndex: 481
{
	None = 0,
	Unmanaged = 1,
	Assembly = 2,
	Explicit = 3
}

// Namespace: System.Reflection.Emit
internal struct RefEmitPermissionSet // TypeDefIndex: 482
{
	// Fields
	public SecurityAction action; // 0x08
	public string pset; // 0x0C

	// Constructors
	public RefEmitPermissionSet(SecurityAction action, string pset); // 0x0008C884

}

// Namespace: System.Reflection.Emit
internal struct MonoResource // TypeDefIndex: 483
{
	// Fields
	public byte[] data; // 0x08
	public string name; // 0x0C
	public string filename; // 0x10
	public ResourceAttributes attrs; // 0x14
	public int offset; // 0x18
	public Stream stream; // 0x1C

}

// Namespace: System.Reflection.Emit
internal struct MonoWin32Resource // TypeDefIndex: 484
{
	// Fields
	public int res_type; // 0x08
	public int res_id; // 0x0C
	public int lang_id; // 0x10
	public byte[] data; // 0x14

	// Constructors
	public MonoWin32Resource(int res_type, int res_id, int lang_id, byte[] data); // 0x0008C2FC

}

// Namespace: System.Reflection.Emit
public sealed class AssemblyBuilder : Assembly, _AssemblyBuilder // TypeDefIndex: 485
{
	// Fields
	private const AssemblyBuilderAccess COMPILER_ACCESS = 2048; // 0x00
	private UIntPtr dynamic_assembly; // 0x30
	private MethodInfo entry_point; // 0x34
	private ModuleBuilder[] modules; // 0x38
	private string name; // 0x3C
	private string dir; // 0x40
	private CustomAttributeBuilder[] cattrs; // 0x44
	private MonoResource[] resources; // 0x48
	private byte[] public_key; // 0x4C
	private string version; // 0x50
	private string culture; // 0x54
	private uint algid; // 0x58
	private uint flags; // 0x5C
	private PEFileKinds pekind; // 0x60
	private bool delay_sign; // 0x64
	private uint access; // 0x68
	private Module[] loaded_modules; // 0x6C
	private MonoWin32Resource[] win32_resources; // 0x70
	private RefEmitPermissionSet[] permissions_minimum; // 0x74
	private RefEmitPermissionSet[] permissions_optional; // 0x78
	private RefEmitPermissionSet[] permissions_refused; // 0x7C
	private PortableExecutableKinds peKind; // 0x80
	private ImageFileMachine machine; // 0x84
	private bool corlib_internal; // 0x88
	private Type[] type_forwarders; // 0x8C
	private byte[] pktoken; // 0x90
	internal Type corlib_object_type; // 0x94
	internal Type corlib_value_type; // 0x98
	internal Type corlib_enum_type; // 0x9C
	internal Type corlib_void_type; // 0xA0
	private ArrayList resource_writers; // 0xA4
	private Win32VersionResource version_res; // 0xA8
	private bool created; // 0xAC
	private bool is_module_only; // 0xAD
	private StrongName sn; // 0xB0
	private NativeResourceType native_resource; // 0xB4
	private readonly bool is_compiler_context; // 0xB8
	private string versioninfo_culture; // 0xBC
	private ModuleBuilder manifest_module; // 0xC0

	// Properties
	public override string CodeBase { get; } // 0x001BDAD4 
	public override MethodInfo EntryPoint { get; } // 0x001BDBBC 
	public override string Location { get; } // 0x001BDBC4 
	public override string ImageRuntimeVersion { get; } // 0x001BDC2C 
	public override bool ReflectionOnly { get; } // 0x001BDC30 
	internal bool IsCompilerContext { get; } // 0x001C1CD4 
	internal bool IsSave { get; } // 0x001BD89C 
	internal bool IsRun { get; } // 0x001C1CDC 
	internal string AssemblyDir { get; } // 0x001C1CF4 
	internal bool IsModuleOnly { get; set; } // 0x001C1CFC 0x001C1D04

	// Constructors
	internal AssemblyBuilder(AssemblyName n, string directory, AssemblyBuilderAccess access, bool corlib_internal); // 0x001BD250

	// Methods
	private void System.Runtime.InteropServices._AssemblyBuilder.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x001BD8B4
	private void System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x001BD93C
	private void System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfoCount(out uint pcTInfo); // 0x001BD9C4
	private void System.Runtime.InteropServices._AssemblyBuilder.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x001BDA4C
	private static void basic_init(AssemblyBuilder ab); // 0x001BD8B0
	public void AddResourceFile(string name, string fileName); // 0x001BDC34
	public void AddResourceFile(string name, string fileName, ResourceAttributes attribute); // 0x001BDC58
	private void AddResourceFile(string name, string fileName, ResourceAttributes attribute, bool fileNeedsToExists); // 0x001BDC78
	internal void AddPermissionRequests(PermissionSet required, PermissionSet optional, PermissionSet refused); // 0x001BE788
	internal void EmbedResourceFile(string name, string fileName); // 0x001BE78C
	internal void EmbedResourceFile(string name, string fileName, ResourceAttributes attribute); // 0x001BE7A8
	internal void EmbedResource(string name, byte[] blob, ResourceAttributes attribute); // 0x001BEAFC
	internal void AddTypeForwarder(Type t); // 0x001BEC8C
	public ModuleBuilder DefineDynamicModule(string name); // 0x001BEE74
	public ModuleBuilder DefineDynamicModule(string name, bool emitSymbolInfo); // 0x001BF268
	public ModuleBuilder DefineDynamicModule(string name, string fileName); // 0x001BF290
	public ModuleBuilder DefineDynamicModule(string name, string fileName, bool emitSymbolInfo); // 0x001BF2B4
	private ModuleBuilder DefineDynamicModule(string name, string fileName, bool emitSymbolInfo, bool transient); // 0x001BEE9C
	private Module InternalAddModule(string fileName); // 0x001BF2D4
	internal Module AddModule(string fileName); // 0x001BF2D8
	public IResourceWriter DefineResource(string name, string description, string fileName); // 0x001BF464
	public IResourceWriter DefineResource(string name, string description, string fileName, ResourceAttributes attribute); // 0x001BF484
	private void AddUnmanagedResource(Win32Resource res); // 0x001BF584
	public void DefineUnmanagedResource(byte[] resource); // 0x001BF770
	public void DefineUnmanagedResource(string resourceFileName); // 0x001BF8A4
	public void DefineVersionInfoResource(); // 0x001C0070
	public void DefineVersionInfoResource(string product, string productVersion, string company, string copyright, string trademark); // 0x001C016C
	internal void DefineIconResource(string iconFileName); // 0x001C03D0
	private void DefineVersionInfoResourceImpl(string fileName); // 0x001C0898
	public ModuleBuilder GetDynamicModule(string name); // 0x001C143C
	public override Type[] GetExportedTypes(); // 0x001C1650
	public override FileStream GetFile(string name); // 0x001C16B8
	public override FileStream[] GetFiles(bool getResourceModules); // 0x001C1720
	internal override Module[] GetModulesInternal(); // 0x001C1788
	internal override Type[] GetTypes(bool exportedOnly); // 0x001C1854
	public override ManifestResourceInfo GetManifestResourceInfo(string resourceName); // 0x001C1B34
	public override string[] GetManifestResourceNames(); // 0x001C1B9C
	public override Stream GetManifestResourceStream(string name); // 0x001C1C04
	public override Stream GetManifestResourceStream(Type type, string name); // 0x001C1C6C
	internal override Module GetManifestModule(); // 0x001C1D0C
	public void Save(string assemblyFileName, PortableExecutableKinds portableExecutableKind, ImageFileMachine imageFileMachine); // 0x001C1D98
	public void Save(string assemblyFileName); // 0x001C2900
	public void SetEntryPoint(MethodInfo entryMethod); // 0x001C2920
	public void SetEntryPoint(MethodInfo entryMethod, PEFileKinds fileKind); // 0x001C2928
	public void SetCustomAttribute(CustomAttributeBuilder customBuilder); // 0x001C2A68
	public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute); // 0x001C3B88
	internal void SetCorlibTypeBuilders(Type corlib_object_type, Type corlib_value_type, Type corlib_enum_type); // 0x001C3D78
	internal void SetCorlibTypeBuilders(Type corlib_object_type, Type corlib_value_type, Type corlib_enum_type, Type corlib_void_type); // 0x001C3D84
	private Exception not_supported(); // 0x001BDB3C
	private void check_name_and_filename(string name, string fileName, bool fileNeedsToExists); // 0x001BDE6C
	private string create_assembly_version(string version); // 0x001C2F9C
	private string GetCultureString(string str); // 0x001C3AA4
	internal override AssemblyName UnprotectedGetName(); // 0x001C3D94
}

// Namespace: System.Reflection.Emit
[Serializable]
public enum AssemblyBuilderAccess // TypeDefIndex: 486
{
	Run = 1,
	Save = 2,
	RunAndSave = 3,
	ReflectionOnly = 6
}

// Namespace: System.Reflection.Emit
public sealed class ConstructorBuilder : ConstructorInfo, _ConstructorBuilder // TypeDefIndex: 487
{
	// Fields
	private RuntimeMethodHandle mhandle; // 0x08
	private ILGenerator ilgen; // 0x0C
	internal Type[] parameters; // 0x10
	private MethodAttributes attrs; // 0x14
	private MethodImplAttributes iattrs; // 0x18
	private int table_idx; // 0x1C
	private CallingConventions call_conv; // 0x20
	private TypeBuilder type; // 0x24
	internal ParameterBuilder[] pinfo; // 0x28
	private CustomAttributeBuilder[] cattrs; // 0x2C
	private bool init_locals; // 0x30
	private Type[][] paramModReq; // 0x34
	private Type[][] paramModOpt; // 0x38
	private RefEmitPermissionSet[] permissions; // 0x3C

	// Properties
	public override CallingConventions CallingConvention { get; } // 0x001C46D4 
	public bool InitLocals { get; set; } // 0x001C46DC 0x001C46E4
	internal TypeBuilder TypeBuilder { get; } // 0x001C46EC 
	public override RuntimeMethodHandle MethodHandle { get; } // 0x001C4C50 
	public override MethodAttributes Attributes { get; } // 0x001C4CB8 
	public override Type ReflectedType { get; } // 0x001C4CC0 
	public override Type DeclaringType { get; } // 0x001C4CC8 
	public Type ReturnType { get; } // 0x001C4CD0 
	public override string Name { get; } // 0x001C4CD8 
	public string Signature { get; } // 0x001C4DAC 
	public override Module Module { get; } // 0x001C59CC 
	private bool IsCompilerContext { get; } // 0x001C47AC 

	// Constructors
	internal ConstructorBuilder(TypeBuilder tb, MethodAttributes attributes, CallingConventions callingConvention, Type[] parameterTypes, Type[][] paramModReq, Type[][] paramModOpt); // 0x001C41C4

	// Methods
	private void System.Runtime.InteropServices._ConstructorBuilder.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x001C44B4
	private void System.Runtime.InteropServices._ConstructorBuilder.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x001C453C
	private void System.Runtime.InteropServices._ConstructorBuilder.GetTypeInfoCount(out uint pcTInfo); // 0x001C45C4
	private void System.Runtime.InteropServices._ConstructorBuilder.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x001C464C
	public override MethodImplAttributes GetMethodImplementationFlags(); // 0x001C46F4
	public override ParameterInfo[] GetParameters(); // 0x001C46FC
	internal ParameterInfo[] GetParametersInternal(); // 0x001C4908
	internal override int GetParameterCount(); // 0x001C4AEC
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x001C4B00
	public override object Invoke(BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x001C4BE8
	public void AddDeclarativeSecurity(SecurityAction action, PermissionSet pset); // 0x001C4E08
	public ParameterBuilder DefineParameter(int iSequence, ParameterAttributes attributes, string strParamName); // 0x001C4E0C
	public override bool IsDefined(Type attributeType, bool inherit); // 0x001C5088
	public override object[] GetCustomAttributes(bool inherit); // 0x001C50F0
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x001C51D8
	public ILGenerator GetILGenerator(); // 0x001C52C8
	public ILGenerator GetILGenerator(int streamSize); // 0x001C52D0
	public void SetCustomAttribute(CustomAttributeBuilder customBuilder); // 0x001C5458
	public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute); // 0x001C57E4
	public void SetImplementationFlags(MethodImplAttributes attributes); // 0x001C5748
	public Module GetModule(); // 0x001C5914
	public MethodToken GetToken(); // 0x001C44A8
	public void SetSymCustomAttribute(string name, byte[] data); // 0x001C5938
	public override string ToString(); // 0x001C59D4
	internal void fixup(); // 0x001C5A90
	internal void GenerateDebugInfo(ISymbolWriter symbolWriter); // 0x001C5C00
	internal override int get_next_table_index(object obj, int table, bool inc); // 0x001C4458
	private void RejectIfCreated(); // 0x001C5ED8
	private Exception not_supported(); // 0x001C4B68
	private Exception not_after_created(); // 0x001C5008
	private Exception not_created(); // 0x001C4888
}

// Namespace: System.Reflection.Emit
internal class ConstructorOnTypeBuilderInst : ConstructorInfo // TypeDefIndex: 488
{
	// Fields
	private MonoGenericClass instantiation; // 0x08
	private ConstructorBuilder cb; // 0x0C

	// Properties
	public override Type DeclaringType { get; } // 0x001C6034 
	public override string Name { get; } // 0x001C603C 
	public override Type ReflectedType { get; } // 0x001C6064 
	public override int MetadataToken { get; } // 0x001C64D4 
	public override RuntimeMethodHandle MethodHandle { get; } // 0x001C6688 
	public override MethodAttributes Attributes { get; } // 0x001C66A4 
	public override CallingConventions CallingConvention { get; } // 0x001C66C8 
	public override bool ContainsGenericParameters { get; } // 0x001C6720 
	public override bool IsGenericMethodDefinition { get; } // 0x001C6728 
	public override bool IsGenericMethod { get; } // 0x001C6730 

	// Constructors
	public ConstructorOnTypeBuilderInst(MonoGenericClass instantiation, ConstructorBuilder cb); // 0x001C5FA0

	// Methods
	public override bool IsDefined(Type attributeType, bool inherit); // 0x001C606C
	public override object[] GetCustomAttributes(bool inherit); // 0x001C608C
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x001C60BC
	public override MethodImplAttributes GetMethodImplementationFlags(); // 0x001C60F4
	public override ParameterInfo[] GetParameters(); // 0x001C6118
	internal override int GetParameterCount(); // 0x001C6630
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x001C6660
	public override Type[] GetGenericArguments(); // 0x001C66EC
	public override object Invoke(BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x001C6738
}

// Namespace: System.Reflection.Emit
public class CustomAttributeBuilder : _CustomAttributeBuilder // TypeDefIndex: 489
{
	// Fields
	private ConstructorInfo ctor; // 0x08
	private byte[] data; // 0x0C
	private static Dictionary`2<string, int> <>f__switch$map1C; // 0x00

	// Properties
	internal ConstructorInfo Ctor { get; } // 0x001C837C 
	internal byte[] Data { get; } // 0x001C8384 

	// Constructors
	internal CustomAttributeBuilder(ConstructorInfo con, byte[] cdata); // 0x001C3CB8
	public CustomAttributeBuilder(ConstructorInfo con, object[] constructorArgs); // 0x001C67C0
	public CustomAttributeBuilder(ConstructorInfo con, object[] constructorArgs, FieldInfo[] namedFields, object[] fieldValues); // 0x001C7FC8
	public CustomAttributeBuilder(ConstructorInfo con, object[] constructorArgs, PropertyInfo[] namedProperties, object[] propertyValues); // 0x001C8078
	public CustomAttributeBuilder(ConstructorInfo con, object[] constructorArgs, PropertyInfo[] namedProperties, object[] propertyValues, FieldInfo[] namedFields, object[] fieldValues); // 0x001C8130

	// Methods
	private void System.Runtime.InteropServices._CustomAttributeBuilder.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x001C815C
	private void System.Runtime.InteropServices._CustomAttributeBuilder.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x001C81E4
	private void System.Runtime.InteropServices._CustomAttributeBuilder.GetTypeInfoCount(out uint pcTInfo); // 0x001C826C
	private void System.Runtime.InteropServices._CustomAttributeBuilder.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x001C82F4
	private static byte[] GetBlob(Assembly asmb, ConstructorInfo con, object[] constructorArgs, PropertyInfo[] namedProperties, object[] propertyValues, FieldInfo[] namedFields, object[] fieldValues); // 0x001C838C
	private bool IsValidType(Type t); // 0x001C8390
	private void Initialize(ConstructorInfo con, object[] constructorArgs, PropertyInfo[] namedProperties, object[] propertyValues, FieldInfo[] namedFields, object[] fieldValues); // 0x001C6898
	internal static int decode_len(byte[] data, int pos, out int rpos); // 0x001C855C
	internal static string string_from_bytes(byte[] data, int pos, int len); // 0x001C86D8
	internal string string_arg(); // 0x001C13FC
	internal static UnmanagedMarshal get_umarshal(CustomAttributeBuilder customBuilder, bool is_field); // 0x001C87A0
	private static Type elementTypeToType(int elementType); // 0x001C95C4
	private static object decode_cattr_value(Type t, byte[] data, int pos, out int rpos); // 0x001C98C4
	internal static CustomAttributeInfo decode_cattr(CustomAttributeBuilder customBuilder); // 0x001C9CFC
	private static ParameterInfo[] GetParameters(ConstructorInfo ctor); // 0x001C84C4
}

// Namespace: 
internal struct CustomAttributeInfo // TypeDefIndex: 490
{
	// Fields
	public ConstructorInfo ctor; // 0x08
	public object[] ctorArgs; // 0x0C
	public string[] namedParamNames; // 0x10
	public object[] namedParamValues; // 0x14

}

// Namespace: System.Reflection.Emit
internal enum TypeKind // TypeDefIndex: 491
{
	ARRAY = 20,
	SZARRAY = 29
}

// Namespace: System.Reflection.Emit
internal abstract class DerivedType : Type // TypeDefIndex: 492
{
	// Fields
	internal Type elementType; // 0x0C

	// Properties
	public override bool ContainsGenericParameters { get; } // 0x001CB13C 
	public override GenericParameterAttributes GenericParameterAttributes { get; } // 0x001CB468 
	public override StructLayoutAttribute StructLayoutAttribute { get; } // 0x001CB4F0 
	public override Assembly Assembly { get; } // 0x001CB578 
	public override string AssemblyQualifiedName { get; } // 0x001CB5AC 
	public override string FullName { get; } // 0x001CB6EC 
	public override string Name { get; } // 0x001CB73C 
	public override Guid GUID { get; } // 0x001CB78C 
	public override Module Module { get; } // 0x001CB814 
	public override string Namespace { get; } // 0x001CB848 
	public override RuntimeTypeHandle TypeHandle { get; } // 0x001CB87C 
	public override Type UnderlyingSystemType { get; } // 0x001CB904 

	// Constructors
	internal DerivedType(Type elementType); // 0x001BCE30

	// Methods
	internal static void create_unmanaged_type(Type type); // 0x001CA7BC
	internal abstract string FormatName(string elementName);
	public override Type GetInterface(string name, bool ignoreCase); // 0x001CA7C0
	public override Type[] GetInterfaces(); // 0x001CA848
	public override Type GetElementType(); // 0x001CA8D0
	public override EventInfo GetEvent(string name, BindingFlags bindingAttr); // 0x001CA8D8
	public override EventInfo[] GetEvents(BindingFlags bindingAttr); // 0x001CA960
	public override FieldInfo GetField(string name, BindingFlags bindingAttr); // 0x001CA9E8
	public override FieldInfo[] GetFields(BindingFlags bindingAttr); // 0x001CAA70
	public override MemberInfo[] GetMembers(BindingFlags bindingAttr); // 0x001CAAF8
	protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x001CAB80
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr); // 0x001CAC08
	public override Type GetNestedType(string name, BindingFlags bindingAttr); // 0x001CAC90
	public override Type[] GetNestedTypes(BindingFlags bindingAttr); // 0x001CAD18
	public override PropertyInfo[] GetProperties(BindingFlags bindingAttr); // 0x001CADA0
	protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x001CAE28
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x001CAEB0
	protected override TypeAttributes GetAttributeFlagsImpl(); // 0x001CAF38
	protected override bool HasElementTypeImpl(); // 0x001CAF64
	protected override bool IsArrayImpl(); // 0x001CAF6C
	protected override bool IsByRefImpl(); // 0x001CAF74
	protected override bool IsCOMObjectImpl(); // 0x001CAF7C
	protected override bool IsPointerImpl(); // 0x001CAF84
	protected override bool IsPrimitiveImpl(); // 0x001CAF8C
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr); // 0x001CAF94
	public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters); // 0x001CB01C
	public override InterfaceMapping GetInterfaceMap(Type interfaceType); // 0x001CB0A4
	public override bool IsInstanceOfType(object o); // 0x001CB12C
	public override bool IsAssignableFrom(Type c); // 0x001CB134
	public override Type MakeGenericType(Type[] typeArguments); // 0x001CB170
	public override Type MakeArrayType(); // 0x001CB1F8
	public override Type MakeArrayType(int rank); // 0x001CB270
	public override Type MakeByRefType(); // 0x001CB334
	public override Type MakePointerType(); // 0x001CB3A4
	public override string ToString(); // 0x001CB418
	public override bool IsDefined(Type attributeType, bool inherit); // 0x001CB91C
	public override object[] GetCustomAttributes(bool inherit); // 0x001CB9A4
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x001CBA2C
}

// Namespace: System.Reflection.Emit
internal class ArrayType : DerivedType // TypeDefIndex: 493
{
	// Fields
	private int rank; // 0x10

	// Properties
	public override Type BaseType { get; } // 0x001BCED4 

	// Constructors
	internal ArrayType(Type elementType, int rank); // 0x001BCE14

	// Methods
	protected override bool IsArrayImpl(); // 0x001BCEBC
	public override int GetArrayRank(); // 0x001BCEC4
	protected override TypeAttributes GetAttributeFlagsImpl(); // 0x001BCF64
	internal override string FormatName(string elementName); // 0x001BD0C0
}

// Namespace: System.Reflection.Emit
internal class ByRefType : DerivedType // TypeDefIndex: 494
{
	// Properties
	public override Type BaseType { get; } // 0x001C3E20 

	// Constructors
	internal ByRefType(Type elementType); // 0x001C3E14

	// Methods
	protected override bool IsByRefImpl(); // 0x001C3E18
	internal override string FormatName(string elementName); // 0x001C3EB0
	public override Type MakeArrayType(); // 0x001C3F54
	public override Type MakeArrayType(int rank); // 0x001C3FF0
	public override Type MakeByRefType(); // 0x001C408C
	public override Type MakePointerType(); // 0x001C4128
}

// Namespace: System.Reflection.Emit
internal class PointerType : DerivedType // TypeDefIndex: 495
{
	// Properties
	public override Type BaseType { get; } // 0x0022FFF8 

	// Constructors
	internal PointerType(Type elementType); // 0x00213288

	// Methods
	protected override bool IsPointerImpl(); // 0x0022FFF0
	internal override string FormatName(string elementName); // 0x00230088
}

// Namespace: System.Reflection.Emit
public class DynamicILInfo // TypeDefIndex: 496
{
	// Properties
	public DynamicMethod DynamicMethod { get; } // 0x001CBAB8 

	// Constructors
	internal DynamicILInfo(); // 0x001CBAB4

	// Methods
	public int GetTokenFor(byte[] signature); // 0x001CBB40
	public int GetTokenFor(DynamicMethod method); // 0x001CBBC8
	public int GetTokenFor(RuntimeFieldHandle field); // 0x001CBC50
	public int GetTokenFor(RuntimeMethodHandle method); // 0x001CBCD8
	public int GetTokenFor(RuntimeTypeHandle type); // 0x001CBD60
	public int GetTokenFor(string literal); // 0x001CBDE8
	public int GetTokenFor(RuntimeMethodHandle method, RuntimeTypeHandle contextType); // 0x001CBE70
	public void SetCode(byte[] code, int maxStackSize); // 0x001CBEF8
	public void SetCode(void * code, int codeSize, int maxStackSize); // 0x001CBF80
	public void SetExceptions(byte[] exceptions); // 0x001CC008
	public void SetExceptions(void * exceptions, int exceptionsSize); // 0x001CC090
	public void SetLocalSignature(byte[] localSignature); // 0x001CC118
	public void SetLocalSignature(void * localSignature, int signatureSize); // 0x001CC1A0
}

// Namespace: System.Reflection.Emit
public sealed class DynamicMethod : MethodInfo // TypeDefIndex: 497
{
	// Fields
	private RuntimeMethodHandle mhandle; // 0x08
	private string name; // 0x0C
	private Type returnType; // 0x10
	private Type[] parameters; // 0x14
	private MethodAttributes attributes; // 0x18
	private CallingConventions callingConvention; // 0x1C
	private Module module; // 0x20
	private bool skipVisibility; // 0x24
	private bool init_locals; // 0x25
	private ILGenerator ilgen; // 0x28
	private int nrefs; // 0x2C
	private object[] refs; // 0x30
	private IntPtr referenced_by; // 0x34
	private Type owner; // 0x38
	private Delegate deleg; // 0x3C
	private MonoMethod method; // 0x40
	private ParameterBuilder[] pinfo; // 0x44
	internal bool creating; // 0x48

	// Properties
	public override MethodAttributes Attributes { get; } // 0x001CDB9C 
	public override CallingConventions CallingConvention { get; } // 0x001CDBA4 
	public override Type DeclaringType { get; } // 0x001CDBAC 
	public bool InitLocals { get; set; } // 0x001CDBB4 0x001CDBBC
	public override RuntimeMethodHandle MethodHandle { get; } // 0x001CDBC4 
	public override Module Module { get; } // 0x001CDBCC 
	public override string Name { get; } // 0x001CDBD4 
	public override Type ReflectedType { get; } // 0x001CDBDC 
	public override ParameterInfo ReturnParameter { get; } // 0x001CDBE4 
	public override Type ReturnType { get; } // 0x001CDC6C 
	public override ICustomAttributeProvider ReturnTypeCustomAttributes { get; } // 0x001CDC74 

	// Constructors
	public DynamicMethod(string name, Type returnType, Type[] parameterTypes, Module m); // 0x001CC228
	public DynamicMethod(string name, Type returnType, Type[] parameterTypes, Type owner); // 0x001CC294
	public DynamicMethod(string name, Type returnType, Type[] parameterTypes, Module m, bool skipVisibility); // 0x001CC260
	public DynamicMethod(string name, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility); // 0x001CC2C0
	public DynamicMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility); // 0x001CC32C
	public DynamicMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Module m, bool skipVisibility); // 0x001CC2EC
	public DynamicMethod(string name, Type returnType, Type[] parameterTypes); // 0x001CC75C
	public DynamicMethod(string name, Type returnType, Type[] parameterTypes, bool restrictedSkipVisibility); // 0x001CC794
	private DynamicMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type owner, Module m, bool skipVisibility, bool anonHosted); // 0x001CC3B0

	// Methods
	private void create_dynamic_method(DynamicMethod m); // 0x001CC7CC
	private void destroy_dynamic_method(DynamicMethod m); // 0x001CC820
	private void CreateDynMethod(); // 0x001CC874
	protected override void Finalize(); // 0x001CCBB4
	public Delegate CreateDelegate(Type delegateType); // 0x001CCC3C
	public Delegate CreateDelegate(Type delegateType, object target); // 0x001CCD14
	public ParameterBuilder DefineParameter(int position, ParameterAttributes attributes, string parameterName); // 0x001CCDE4
	public override MethodInfo GetBaseDefinition(); // 0x001CD06C
	public override object[] GetCustomAttributes(bool inherit); // 0x001CD070
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x001CD0F8
	public DynamicILInfo GetDynamicILInfo(); // 0x001CD180
	public ILGenerator GetILGenerator(); // 0x001CD208
	public ILGenerator GetILGenerator(int streamSize); // 0x001CD210
	public override MethodImplAttributes GetMethodImplementationFlags(); // 0x001CD2D4
	public override ParameterInfo[] GetParameters(); // 0x001CD2DC
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x001CD4C0
	public override bool IsDefined(Type attributeType, bool inherit); // 0x001CD668
	public override string ToString(); // 0x001CD6F0
	private void RejectIfCreated(); // 0x001CCFB4
	internal int AddRef(object reference); // 0x001CDCFC
}

// Namespace: 
private class AnonHostModuleHolder // TypeDefIndex: 498
{
	// Fields
	public static Module anon_host_module; // 0x00

	// Constructors
	public AnonHostModuleHolder(); // 0x00212128
	private static AnonHostModuleHolder(); // 0x00212130

}

// Namespace: System.Reflection.Emit
internal class DynamicMethodTokenGenerator : TokenGenerator // TypeDefIndex: 499
{
	// Fields
	private DynamicMethod m; // 0x08

	// Constructors
	public DynamicMethodTokenGenerator(DynamicMethod m); // 0x00212224

	// Methods
	public int GetToken(string str); // 0x00212244
	public int GetToken(MethodInfo method, Type[] opt_param_types); // 0x00212278
	public int GetToken(MemberInfo member); // 0x00212300
	public int GetToken(SignatureHelper helper); // 0x00212334
}

// Namespace: System.Reflection.Emit
public sealed class EnumBuilder : Type, _EnumBuilder // TypeDefIndex: 500
{
	// Fields
	private TypeBuilder _tb; // 0x0C
	private FieldBuilder _underlyingField; // 0x10
	private Type _underlyingType; // 0x14

	// Properties
	public override Assembly Assembly { get; } // 0x002126D8 
	public override string AssemblyQualifiedName { get; } // 0x00212704 
	public override Type BaseType { get; } // 0x00212730 
	public override Type DeclaringType { get; } // 0x00212754 
	public override string FullName { get; } // 0x00212778 
	public override Guid GUID { get; } // 0x0021279C 
	public override Module Module { get; } // 0x002127D0 
	public override string Name { get; } // 0x002127F4 
	public override string Namespace { get; } // 0x00212818 
	public override Type ReflectedType { get; } // 0x0021283C 
	public override RuntimeTypeHandle TypeHandle { get; } // 0x00212860 
	public TypeToken TypeToken { get; } // 0x0021288C 
	public FieldBuilder UnderlyingField { get; } // 0x002128B8 
	public override Type UnderlyingSystemType { get; } // 0x002128C0 

	// Constructors
	internal EnumBuilder(ModuleBuilder mb, string name, TypeAttributes visibility, Type underlyingType); // 0x00212368

	// Methods
	private void System.Runtime.InteropServices._EnumBuilder.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x002124B0
	private void System.Runtime.InteropServices._EnumBuilder.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x00212538
	private void System.Runtime.InteropServices._EnumBuilder.GetTypeInfoCount(out uint pcTInfo); // 0x002125C0
	private void System.Runtime.InteropServices._EnumBuilder.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x00212648
	internal TypeBuilder GetTypeBuilder(); // 0x002126D0
	public Type CreateType(); // 0x002128C8
	private void setup_enum_type(Type t); // 0x002124AC
	public FieldBuilder DefineLiteral(string literalName, object literalValue); // 0x002128F4
	protected override TypeAttributes GetAttributeFlagsImpl(); // 0x00212984
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x002129A8
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr); // 0x00212A08
	public override object[] GetCustomAttributes(bool inherit); // 0x00212A3C
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00212A70
	public override Type GetElementType(); // 0x00212AAC
	public override EventInfo GetEvent(string name, BindingFlags bindingAttr); // 0x00212AD8
	public override EventInfo[] GetEvents(); // 0x00212B14
	public override EventInfo[] GetEvents(BindingFlags bindingAttr); // 0x00212B40
	public override FieldInfo GetField(string name, BindingFlags bindingAttr); // 0x00212B74
	public override FieldInfo[] GetFields(BindingFlags bindingAttr); // 0x00212BB0
	public override Type GetInterface(string name, bool ignoreCase); // 0x00212BE4
	public override InterfaceMapping GetInterfaceMap(Type interfaceType); // 0x00212C20
	public override Type[] GetInterfaces(); // 0x00212C5C
	public override MemberInfo[] GetMember(string name, MemberTypes type, BindingFlags bindingAttr); // 0x00212C88
	public override MemberInfo[] GetMembers(BindingFlags bindingAttr); // 0x00212CD8
	protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x00212D0C
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr); // 0x00212D8C
	public override Type GetNestedType(string name, BindingFlags bindingAttr); // 0x00212DC0
	public override Type[] GetNestedTypes(BindingFlags bindingAttr); // 0x00212DFC
	public override PropertyInfo[] GetProperties(BindingFlags bindingAttr); // 0x00212E30
	protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x00212E64
	protected override bool HasElementTypeImpl(); // 0x00212F4C
	public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters); // 0x00212F78
	protected override bool IsArrayImpl(); // 0x00212FF4
	protected override bool IsByRefImpl(); // 0x00212FFC
	protected override bool IsCOMObjectImpl(); // 0x00213004
	protected override bool IsPointerImpl(); // 0x0021300C
	protected override bool IsPrimitiveImpl(); // 0x00213014
	protected override bool IsValueTypeImpl(); // 0x0021301C
	public override bool IsDefined(Type attributeType, bool inherit); // 0x00213024
	public override Type MakeArrayType(); // 0x00213060
	public override Type MakeArrayType(int rank); // 0x002130D8
	public override Type MakeByRefType(); // 0x002131A0
	public override Type MakePointerType(); // 0x00213214
	public void SetCustomAttribute(CustomAttributeBuilder customBuilder); // 0x00213290
	public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute); // 0x002132C4
	private Exception CreateNotSupportedException(); // 0x00212ECC
}

// Namespace: System.Reflection.Emit
public sealed class EventBuilder : _EventBuilder // TypeDefIndex: 501
{
	// Fields
	internal string name; // 0x08
	private Type type; // 0x0C
	private TypeBuilder typeb; // 0x10
	private CustomAttributeBuilder[] cattrs; // 0x14
	internal MethodBuilder add_method; // 0x18
	internal MethodBuilder remove_method; // 0x1C
	internal MethodBuilder raise_method; // 0x20
	internal MethodBuilder[] other_methods; // 0x24
	internal EventAttributes attrs; // 0x28
	private int table_idx; // 0x2C

	// Constructors
	internal EventBuilder(TypeBuilder tb, string eventName, EventAttributes eventAttrs, Type eventType); // 0x0021334C

	// Methods
	private void System.Runtime.InteropServices._EventBuilder.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x002133F4
	private void System.Runtime.InteropServices._EventBuilder.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x0021347C
	private void System.Runtime.InteropServices._EventBuilder.GetTypeInfoCount(out uint pcTInfo); // 0x00213504
	private void System.Runtime.InteropServices._EventBuilder.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x0021358C
	internal int get_next_table_index(object obj, int table, bool inc); // 0x002133A4
	public void AddOtherMethod(MethodBuilder mdBuilder); // 0x00213614
	public EventToken GetEventToken(); // 0x00213864
	public void SetAddOnMethod(MethodBuilder mdBuilder); // 0x00213870
	public void SetRaiseMethod(MethodBuilder mdBuilder); // 0x0021392C
	public void SetRemoveOnMethod(MethodBuilder mdBuilder); // 0x002139E8
	public void SetCustomAttribute(CustomAttributeBuilder customBuilder); // 0x00213AA4
	public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute); // 0x00213D48
	private void RejectIfCreated(); // 0x0021379C
}

// Namespace: System.Reflection.Emit
internal class EventOnTypeBuilderInst : EventInfo // TypeDefIndex: 502
{
	// Fields
	private MonoGenericClass instantiation; // 0x0C
	private EventBuilder evt; // 0x10

	// Properties
	public override EventAttributes Attributes { get; } // 0x00213EA4 
	public override Type DeclaringType { get; } // 0x002142B0 
	public override string Name { get; } // 0x002142B8 
	public override Type ReflectedType { get; } // 0x002142DC 

	// Constructors
	internal EventOnTypeBuilderInst(MonoGenericClass instantiation, EventBuilder evt); // 0x00213E7C

	// Methods
	public override MethodInfo GetAddMethod(bool nonPublic); // 0x00213EC8
	public override MethodInfo GetRaiseMethod(bool nonPublic); // 0x00213F70
	public override MethodInfo GetRemoveMethod(bool nonPublic); // 0x00214018
	public override MethodInfo[] GetOtherMethods(bool nonPublic); // 0x002140C0
	public override bool IsDefined(Type attributeType, bool inherit); // 0x002142E4
	public override object[] GetCustomAttributes(bool inherit); // 0x0021436C
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x002143F4
}

// Namespace: System.Reflection.Emit
[Serializable]
public struct EventToken // TypeDefIndex: 503
{
	// Fields
	internal int tokValue; // 0x08
	public static readonly EventToken Empty; // 0x00

	// Properties
	public int Token { get; } // 0x0008BF94 

	// Constructors
	internal EventToken(int val); // 0x0008BF68
	private static EventToken(); // 0x00214484

	// Methods
	public override bool Equals(object obj); // 0x0008BF70
	public bool Equals(EventToken obj); // 0x0008BF78
	public override int GetHashCode(); // 0x0008BF8C
	public static bool op_Equality(EventToken a, EventToken b); // 0x002145A4
	public static bool op_Inequality(EventToken a, EventToken b); // 0x0021463C
}

// Namespace: System.Reflection.Emit
public sealed class FieldBuilder : FieldInfo, _FieldBuilder // TypeDefIndex: 504
{
	// Fields
	private FieldAttributes attrs; // 0x08
	private Type type; // 0x0C
	private string name; // 0x10
	private object def_value; // 0x14
	private int offset; // 0x18
	private int table_idx; // 0x1C
	internal TypeBuilder typeb; // 0x20
	private byte[] rva_data; // 0x24
	private CustomAttributeBuilder[] cattrs; // 0x28
	private UnmanagedMarshal marshal_info; // 0x2C
	private RuntimeFieldHandle handle; // 0x30
	private Type[] modReq; // 0x34
	private Type[] modOpt; // 0x38

	// Properties
	public override FieldAttributes Attributes { get; } // 0x00214A20 
	public override Type DeclaringType { get; } // 0x00214A28 
	public override RuntimeFieldHandle FieldHandle { get; } // 0x00214A30 
	public override Type FieldType { get; } // 0x00214B18 
	public override string Name { get; } // 0x00214B20 
	public override Type ReflectedType { get; } // 0x00214B28 
	internal override UnmanagedMarshal UMarshal { get; } // 0x002154B8 
	public override Module Module { get; } // 0x002154C0 

	// Constructors
	internal FieldBuilder(TypeBuilder tb, string fieldName, Type type, FieldAttributes attributes, Type[] modReq, Type[] modOpt); // 0x002146D8

	// Methods
	private void System.Runtime.InteropServices._FieldBuilder.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x00214800
	private void System.Runtime.InteropServices._FieldBuilder.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x00214888
	private void System.Runtime.InteropServices._FieldBuilder.GetTypeInfoCount(out uint pcTInfo); // 0x00214910
	private void System.Runtime.InteropServices._FieldBuilder.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x00214998
	public override object[] GetCustomAttributes(bool inherit); // 0x00214B30
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00214C08
	public FieldToken GetToken(); // 0x00214CE8
	public override object GetValue(object obj); // 0x00214CF8
	public override bool IsDefined(Type attributeType, bool inherit); // 0x00214D60
	internal override int GetFieldOffset(); // 0x00214DC8
	internal void SetRVAData(byte[] data); // 0x00214DD0
	public void SetConstant(object defaultValue); // 0x00212968
	public void SetCustomAttribute(CustomAttributeBuilder customBuilder); // 0x00214F50
	public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute); // 0x0021537C
	public void SetMarshal(UnmanagedMarshal unmanagedMarshal); // 0x0021540C
	public void SetOffset(int iOffset); // 0x00215434
	public override void SetValue(object obj, object val, BindingFlags invokeAttr, Binder binder, CultureInfo culture); // 0x00215450
	private Exception CreateNotSupportedException(); // 0x00214A98
	private void RejectIfCreated(); // 0x00214E88
}

// Namespace: System.Reflection.Emit
internal class FieldOnTypeBuilderInst : FieldInfo // TypeDefIndex: 505
{
	// Fields
	internal MonoGenericClass instantiation; // 0x08
	internal FieldBuilder fb; // 0x0C

	// Properties
	public override Type DeclaringType { get; } // 0x002154F0 
	public override string Name { get; } // 0x002154F8 
	public override Type ReflectedType { get; } // 0x0021551C 
	public override FieldAttributes Attributes { get; } // 0x00215920 
	public override RuntimeFieldHandle FieldHandle { get; } // 0x00215944 
	public override int MetadataToken { get; } // 0x002159CC 
	public override Type FieldType { get; } // 0x00215B64 

	// Constructors
	public FieldOnTypeBuilderInst(MonoGenericClass instantiation, FieldBuilder fb); // 0x002154C8

	// Methods
	public override bool IsDefined(Type attributeType, bool inherit); // 0x00215524
	public override object[] GetCustomAttributes(bool inherit); // 0x002155AC
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00215634
	public override string ToString(); // 0x002156BC
	public override object GetValue(object obj); // 0x00215D10
	public override void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, CultureInfo culture); // 0x00215D98
}

// Namespace: System.Reflection.Emit
[Serializable]
public struct FieldToken // TypeDefIndex: 506
{
	// Fields
	internal int tokValue; // 0x08
	public static readonly FieldToken Empty; // 0x00

	// Properties
	public int Token { get; } // 0x0008BFC8 

	// Constructors
	internal FieldToken(int val); // 0x0008BF9C
	private static FieldToken(); // 0x00215E28

	// Methods
	public override bool Equals(object obj); // 0x0008BFA4
	public bool Equals(FieldToken obj); // 0x0008BFAC
	public override int GetHashCode(); // 0x0008BFC0
	public static bool op_Equality(FieldToken a, FieldToken b); // 0x00215F48
	public static bool op_Inequality(FieldToken a, FieldToken b); // 0x00215FE0
}

// Namespace: System.Reflection.Emit
[Serializable]
public enum FlowControl // TypeDefIndex: 507
{
	Branch = 0,
	Break = 1,
	Call = 2,
	Cond_Branch = 3,
	Meta = 4,
	Next = 5,
	Phi = 6,
	Return = 7,
	Throw = 8
}

// Namespace: System.Reflection.Emit
public sealed class GenericTypeParameterBuilder : Type // TypeDefIndex: 508
{
	// Fields
	private TypeBuilder tbuilder; // 0x0C
	private MethodBuilder mbuilder; // 0x10
	private string name; // 0x14
	private int index; // 0x18
	private Type base_type; // 0x1C
	private Type[] iface_constraints; // 0x20
	private CustomAttributeBuilder[] cattrs; // 0x24
	private GenericParameterAttributes attrs; // 0x28

	// Properties
	public override Type UnderlyingSystemType { get; } // 0x00216DE4 
	public override Assembly Assembly { get; } // 0x00216DE8 
	public override string AssemblyQualifiedName { get; } // 0x00216E14 
	public override Type BaseType { get; } // 0x00216E1C 
	public override string FullName { get; } // 0x00216E24 
	public override Guid GUID { get; } // 0x00216E2C 
	public override string Name { get; } // 0x00217034 
	public override string Namespace { get; } // 0x0021703C 
	public override Module Module { get; } // 0x00217044 
	public override Type DeclaringType { get; } // 0x00217068 
	public override Type ReflectedType { get; } // 0x00217080 
	public override RuntimeTypeHandle TypeHandle { get; } // 0x00217098 
	public override bool ContainsGenericParameters { get; } // 0x00217210 
	public override bool IsGenericParameter { get; } // 0x00217218 
	public override bool IsGenericType { get; } // 0x00217220 
	public override bool IsGenericTypeDefinition { get; } // 0x00217228 
	public override GenericParameterAttributes GenericParameterAttributes { get; } // 0x00217230 
	public override int GenericParameterPosition { get; } // 0x0021738C 
	public override MethodBase DeclaringMethod { get; } // 0x0021767C 

	// Constructors
	internal GenericTypeParameterBuilder(TypeBuilder tbuilder, MethodBuilder mbuilder, string name, int index); // 0x0021607C

	// Methods
	public void SetBaseTypeConstraint(Type baseTypeConstraint); // 0x0021612C
	public void SetInterfaceConstraints(Type[] interfaceConstraints); // 0x002161E4
	public void SetGenericParameterAttributes(GenericParameterAttributes genericParameterAttributes); // 0x002161EC
	private void initialize(); // 0x00216128
	public override bool IsSubclassOf(Type c); // 0x002161F4
	protected override TypeAttributes GetAttributeFlagsImpl(); // 0x002163D8
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x00216514
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr); // 0x0021657C
	public override EventInfo GetEvent(string name, BindingFlags bindingAttr); // 0x002165E4
	public override EventInfo[] GetEvents(); // 0x0021664C
	public override EventInfo[] GetEvents(BindingFlags bindingAttr); // 0x002166B4
	public override FieldInfo GetField(string name, BindingFlags bindingAttr); // 0x0021671C
	public override FieldInfo[] GetFields(BindingFlags bindingAttr); // 0x00216784
	public override Type GetInterface(string name, bool ignoreCase); // 0x002167EC
	public override Type[] GetInterfaces(); // 0x00216854
	public override MemberInfo[] GetMembers(BindingFlags bindingAttr); // 0x002168BC
	public override MemberInfo[] GetMember(string name, MemberTypes type, BindingFlags bindingAttr); // 0x00216924
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr); // 0x0021698C
	protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x002169F4
	public override Type GetNestedType(string name, BindingFlags bindingAttr); // 0x00216A5C
	public override Type[] GetNestedTypes(BindingFlags bindingAttr); // 0x00216AC4
	public override PropertyInfo[] GetProperties(BindingFlags bindingAttr); // 0x00216B2C
	protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x00216B94
	protected override bool HasElementTypeImpl(); // 0x00216BFC
	public override bool IsAssignableFrom(Type c); // 0x00216C04
	public override bool IsInstanceOfType(object o); // 0x00216C6C
	protected override bool IsArrayImpl(); // 0x00216CD4
	protected override bool IsByRefImpl(); // 0x00216CDC
	protected override bool IsCOMObjectImpl(); // 0x00216CE4
	protected override bool IsPointerImpl(); // 0x00216CEC
	protected override bool IsPrimitiveImpl(); // 0x00216CF4
	protected override bool IsValueTypeImpl(); // 0x00216CFC
	public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters); // 0x00216D14
	public override Type GetElementType(); // 0x00216D7C
	public override bool IsDefined(Type attributeType, bool inherit); // 0x00216E94
	public override object[] GetCustomAttributes(bool inherit); // 0x00216EFC
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00216F64
	public override InterfaceMapping GetInterfaceMap(Type interfaceType); // 0x00216FCC
	public override Type[] GetGenericArguments(); // 0x00217100
	public override Type GetGenericTypeDefinition(); // 0x00217188
	public override Type[] GetGenericParameterConstraints(); // 0x00217394
	public void SetCustomAttribute(CustomAttributeBuilder customBuilder); // 0x00217684
	public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute); // 0x0021786C
	private Exception not_supported(); // 0x0021636C
	public override string ToString(); // 0x002178F4
	public override bool Equals(object o); // 0x002178FC
	public override int GetHashCode(); // 0x00217904
	public override Type MakeArrayType(); // 0x0021790C
	public override Type MakeArrayType(int rank); // 0x00217984
	public override Type MakeByRefType(); // 0x00217A4C
	public override Type MakeGenericType(Type[] typeArguments); // 0x00217AC0
	public override Type MakePointerType(); // 0x00217AC8
}

// Namespace: System.Reflection.Emit
internal struct ILExceptionBlock // TypeDefIndex: 509
{
	// Fields
	public const int CATCH = 0; // 0x00
	public const int FILTER = 1; // 0x00
	public const int FINALLY = 2; // 0x00
	public const int FAULT = 4; // 0x00
	public const int FILTER_START = -1; // 0x00
	internal Type extype; // 0x08
	internal int type; // 0x0C
	internal int start; // 0x10
	internal int len; // 0x14
	internal int filter_offset; // 0x18

	// Methods
	internal void Debug(); // 0x0008C02C
}

// Namespace: System.Reflection.Emit
internal struct ILExceptionInfo // TypeDefIndex: 510
{
	// Fields
	private ILExceptionBlock[] handlers; // 0x08
	internal int start; // 0x0C
	private int len; // 0x10
	internal Label end; // 0x14

	// Methods
	internal int NumHandlers(); // 0x0008C08C
	internal void AddCatch(Type extype, int offset); // 0x0008C0B0
	internal void AddFinally(int offset); // 0x0008C0B8
	internal void AddFault(int offset); // 0x0008C0C0
	internal void AddFilter(int offset); // 0x0008C0C8
	internal void End(int offset); // 0x0008C0D0
	internal int LastClauseType(); // 0x0008C0D8
	internal void PatchFilterClause(int start); // 0x0008C0E0
	internal void Debug(int b); // 0x0008C0E8
	private void add_block(int offset); // 0x0008C0EC
}

// Namespace: System.Reflection.Emit
internal struct ILTokenInfo // TypeDefIndex: 511
{
	// Fields
	public MemberInfo member; // 0x08
	public int code_pos; // 0x0C

}

// Namespace: System.Reflection.Emit
internal interface TokenGenerator // TypeDefIndex: 512
{
	// Methods
	int GetToken(string str);
	int GetToken(MemberInfo member);
	int GetToken(MethodInfo method, Type[] opt_param_types);
	int GetToken(SignatureHelper helper);
}

// Namespace: System.Reflection.Emit
public class ILGenerator : _ILGenerator // TypeDefIndex: 513
{
	// Fields
	private const int defaultFixupSize = 4; // 0x00
	private const int defaultLabelsSize = 4; // 0x00
	private const int defaultExceptionStackSize = 2; // 0x00
	private static readonly Type void_type; // 0x00
	private byte[] code; // 0x08
	private int code_len; // 0x0C
	private int max_stack; // 0x10
	private int cur_stack; // 0x14
	private LocalBuilder[] locals; // 0x18
	private ILExceptionInfo[] ex_handlers; // 0x1C
	private int num_token_fixups; // 0x20
	private ILTokenInfo[] token_fixups; // 0x24
	private LabelData[] labels; // 0x28
	private int num_labels; // 0x2C
	private LabelFixup[] fixups; // 0x30
	private int num_fixups; // 0x34
	internal Module module; // 0x38
	private int cur_block; // 0x3C
	private Stack open_blocks; // 0x40
	private TokenGenerator token_gen; // 0x44
	private ArrayList sequencePointLists; // 0x48
	private SequencePointList currentSequence; // 0x4C

	// Properties
	internal bool HasDebugInfo { get; } // 0x0021D9F0 

	// Constructors
	internal ILGenerator(Module m, TokenGenerator token_gen, int size); // 0x002181D8
	private static ILGenerator(); // 0x00218284

	// Methods
	private void System.Runtime.InteropServices._ILGenerator.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x0021832C
	private void System.Runtime.InteropServices._ILGenerator.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x002183B4
	private void System.Runtime.InteropServices._ILGenerator.GetTypeInfoCount(out uint pcTInfo); // 0x0021843C
	private void System.Runtime.InteropServices._ILGenerator.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x002184C4
	private void add_token_fixup(MemberInfo mi); // 0x0021854C
	private void make_room(int nbytes); // 0x00218694
	private void emit_int(int val); // 0x00218774
	private void ll_emit(OpCode opcode); // 0x002188A4
	private static int target_len(OpCode opcode); // 0x002189FC
	private void InternalEndClause(); // 0x00218A0C
	public virtual void BeginCatchBlock(Type exceptionType); // 0x00218BC4
	public virtual void BeginExceptFilterBlock(); // 0x00218ED4
	public virtual Label BeginExceptionBlock(); // 0x0021902C
	public virtual void BeginFaultBlock(); // 0x0021920C
	public virtual void BeginFinallyBlock(); // 0x002194A0
	public virtual void BeginScope(); // 0x00219734
	public virtual LocalBuilder DeclareLocal(Type localType); // 0x00219738
	public virtual LocalBuilder DeclareLocal(Type localType, bool pinned); // 0x0021974C
	public virtual Label DefineLabel(); // 0x00219A1C
	public virtual void Emit(OpCode opcode); // 0x00219B50
	public virtual void Emit(OpCode opcode, byte arg); // 0x00219B80
	public virtual void Emit(OpCode opcode, ConstructorInfo con); // 0x00219BF8
	public virtual void Emit(OpCode opcode, double arg); // 0x00219DA4
	public virtual void Emit(OpCode opcode, FieldInfo field); // 0x0021A1E4
	public virtual void Emit(OpCode opcode, short arg); // 0x0021A364
	public virtual void Emit(OpCode opcode, int arg); // 0x0021A424
	public virtual void Emit(OpCode opcode, long arg); // 0x0021A464
	public virtual void Emit(OpCode opcode, Label label); // 0x0021A6E0
	public virtual void Emit(OpCode opcode, Label[] labels); // 0x0021A97C
	public virtual void Emit(OpCode opcode, LocalBuilder local); // 0x0021AD20
	public virtual void Emit(OpCode opcode, MethodInfo meth); // 0x0021B1C0
	private void Emit(OpCode opcode, MethodInfo method, int token); // 0x0021B5B0
	public void Emit(OpCode opcode, sbyte arg); // 0x0021B720
	public virtual void Emit(OpCode opcode, SignatureHelper signature); // 0x0021B798
	public virtual void Emit(OpCode opcode, float arg); // 0x0021B8B4
	public virtual void Emit(OpCode opcode, string str); // 0x0021BB5C
	public virtual void Emit(OpCode opcode, Type cls); // 0x0021BC78
	public virtual void EmitCall(OpCode opcode, MethodInfo methodInfo, Type[] optionalParameterTypes); // 0x0021BD88
	public virtual void EmitCalli(OpCode opcode, CallingConvention unmanagedCallConv, Type returnType, Type[] parameterTypes); // 0x0021C0F8
	public virtual void EmitCalli(OpCode opcode, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type[] optionalParameterTypes); // 0x0021C160
	public virtual void EmitWriteLine(FieldInfo fld); // 0x0021C254
	public virtual void EmitWriteLine(LocalBuilder localBuilder); // 0x0021C580
	public virtual void EmitWriteLine(string value); // 0x0021C844
	public virtual void EndExceptionBlock(); // 0x0021CA54
	public virtual void EndScope(); // 0x0021CD94
	public virtual void MarkLabel(Label loc); // 0x0021CD98
	public virtual void MarkSequencePoint(ISymbolDocumentWriter document, int startLine, int startColumn, int endLine, int endColumn); // 0x0021CF94
	internal void GenerateDebugInfo(ISymbolWriter symbolWriter); // 0x0021D0E0
	public virtual void ThrowException(Type excType); // 0x0021DA00
	public virtual void UsingNamespace(string usingNamespace); // 0x0021DD08
	internal void label_fixup(); // 0x0021DD90
	internal static int Mono_GetCurrentOffset(ILGenerator ig); // 0x0021E0C8
}

// Namespace: 
private struct LabelFixup // TypeDefIndex: 514
{
	// Fields
	public int offset; // 0x08
	public int pos; // 0x0C
	public int label_idx; // 0x10

}

// Namespace: 
private struct LabelData // TypeDefIndex: 515
{
	// Fields
	public int addr; // 0x08
	public int maxStack; // 0x0C

	// Constructors
	public LabelData(int addr, int maxStack); // 0x0008C0F4

}

// Namespace: System.Reflection.Emit
internal class SequencePointList // TypeDefIndex: 516
{
	// Fields
	private const int arrayGrow = 10; // 0x00
	private ISymbolDocumentWriter doc; // 0x08
	private SequencePoint[] points; // 0x0C
	private int count; // 0x10

	// Properties
	public ISymbolDocumentWriter Document { get; } // 0x00273D80 
	public int StartLine { get; } // 0x00274274 
	public int EndLine { get; } // 0x002742B4 
	public int StartColumn { get; } // 0x00274304 
	public int EndColumn { get; } // 0x00274344 

	// Constructors
	public SequencePointList(ISymbolDocumentWriter doc); // 0x00273D60

	// Methods
	public int[] GetOffsets(); // 0x00273D88
	public int[] GetLines(); // 0x00273E84
	public int[] GetColumns(); // 0x00273F80
	public int[] GetEndLines(); // 0x0027407C
	public int[] GetEndColumns(); // 0x00274178
	public void AddSequencePoint(int offset, int line, int col, int endLine, int endCol); // 0x00274394
}

// Namespace: System.Reflection.Emit
internal struct SequencePoint // TypeDefIndex: 517
{
	// Fields
	public int Offset; // 0x08
	public int Line; // 0x0C
	public int Col; // 0x10
	public int EndLine; // 0x14
	public int EndCol; // 0x18

}

// Namespace: System.Reflection.Emit
[Serializable]
public struct Label // TypeDefIndex: 518
{
	// Fields
	internal int label; // 0x08

	// Constructors
	internal Label(int val); // 0x0008C15C

	// Methods
	public override bool Equals(object obj); // 0x0008C164
	public bool Equals(Label obj); // 0x0008C16C
	public override int GetHashCode(); // 0x0008C180
	public static bool op_Equality(Label a, Label b); // 0x0021E1A4
	public static bool op_Inequality(Label a, Label b); // 0x0021E1B8
}

// Namespace: System.Reflection.Emit
public sealed class LocalBuilder : LocalVariableInfo, _LocalBuilder // TypeDefIndex: 519
{
	// Fields
	private string name; // 0x10
	internal ILGenerator ilgen; // 0x14
	private int startOffset; // 0x18
	private int endOffset; // 0x1C

	// Properties
	public override Type LocalType { get; } // 0x0021E410 
	public override bool IsPinned { get; } // 0x0021E418 
	public override int LocalIndex { get; } // 0x0021E420 
	internal string Name { get; } // 0x0021E44C 
	internal int StartOffset { get; } // 0x0021E454 
	internal int EndOffset { get; } // 0x0021E45C 

	// Constructors
	internal LocalBuilder(Type t, ILGenerator ilgen); // 0x002199F4

	// Methods
	private void System.Runtime.InteropServices._LocalBuilder.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x0021E1CC
	private void System.Runtime.InteropServices._LocalBuilder.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x0021E254
	private void System.Runtime.InteropServices._LocalBuilder.GetTypeInfoCount(out uint pcTInfo); // 0x0021E2DC
	private void System.Runtime.InteropServices._LocalBuilder.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x0021E364
	public void SetLocalSymInfo(string name, int startOffset, int endOffset); // 0x0021E3EC
	public void SetLocalSymInfo(string name); // 0x0021E3FC
	internal static int Mono_GetLocalIndex(LocalBuilder builder); // 0x0021E428
}

// Namespace: System.Reflection.Emit
public sealed class MethodBuilder : MethodInfo, _MethodBuilder // TypeDefIndex: 520
{
	// Fields
	private RuntimeMethodHandle mhandle; // 0x08
	private Type rtype; // 0x0C
	internal Type[] parameters; // 0x10
	private MethodAttributes attrs; // 0x14
	private MethodImplAttributes iattrs; // 0x18
	private string name; // 0x1C
	private int table_idx; // 0x20
	private byte[] code; // 0x24
	private ILGenerator ilgen; // 0x28
	private TypeBuilder type; // 0x2C
	internal ParameterBuilder[] pinfo; // 0x30
	private CustomAttributeBuilder[] cattrs; // 0x34
	private MethodInfo override_method; // 0x38
	private string pi_dll; // 0x3C
	private string pi_entry; // 0x40
	private CharSet charset; // 0x44
	private uint extra_flags; // 0x48
	private CallingConvention native_cc; // 0x4C
	private CallingConventions call_conv; // 0x50
	private bool init_locals; // 0x54
	private IntPtr generic_container; // 0x58
	internal GenericTypeParameterBuilder[] generic_params; // 0x5C
	private Type[] returnModReq; // 0x60
	private Type[] returnModOpt; // 0x64
	private Type[][] paramModReq; // 0x68
	private Type[][] paramModOpt; // 0x6C
	private RefEmitPermissionSet[] permissions; // 0x70
	private static Dictionary`2<string, int> <>f__switch$map1D; // 0x00

	// Properties
	public override bool ContainsGenericParameters { get; } // 0x0021E9FC 
	public bool InitLocals { get; set; } // 0x0021EA84 0x0021EA8C
	internal TypeBuilder TypeBuilder { get; } // 0x0021EA94 
	public override RuntimeMethodHandle MethodHandle { get; } // 0x0021EA9C 
	public override Type ReturnType { get; } // 0x0021EB84 
	public override Type ReflectedType { get; } // 0x0021EB8C 
	public override Type DeclaringType { get; } // 0x0021EB94 
	public override string Name { get; } // 0x0021EB9C 
	public override MethodAttributes Attributes { get; } // 0x0021EBA4 
	public override ICustomAttributeProvider ReturnTypeCustomAttributes { get; } // 0x0021EBAC 
	public override CallingConventions CallingConvention { get; } // 0x0021EBB4 
	public string Signature { get; } // 0x0021EBBC 
	internal bool BestFitMapping { set; } // 0x0021EC44
	internal bool ThrowOnUnmappableChar { set; } // 0x0021EC80
	internal bool ExactSpelling { set; } // 0x0021ECBC
	internal bool SetLastError { set; } // 0x0021ECF0
	public override bool IsGenericMethodDefinition { get; } // 0x002210D0 
	public override bool IsGenericMethod { get; } // 0x002210E0 
	public override Module Module { get; } // 0x00221704 

	// Constructors
	internal MethodBuilder(TypeBuilder tb, string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] returnModReq, Type[] returnModOpt, Type[] parameterTypes, Type[][] paramModReq, Type[][] paramModOpt); // 0x0021E464
	internal MethodBuilder(TypeBuilder tb, string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] returnModReq, Type[] returnModOpt, Type[] parameterTypes, Type[][] paramModReq, Type[][] paramModOpt, string dllName, string entryName, CallingConvention nativeCConv, CharSet nativeCharset); // 0x0021E768

	// Methods
	private void System.Runtime.InteropServices._MethodBuilder.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x0021E7DC
	private void System.Runtime.InteropServices._MethodBuilder.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x0021E864
	private void System.Runtime.InteropServices._MethodBuilder.GetTypeInfoCount(out uint pcTInfo); // 0x0021E8EC
	private void System.Runtime.InteropServices._MethodBuilder.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x0021E974
	public MethodToken GetToken(); // 0x0021E758
	public override MethodInfo GetBaseDefinition(); // 0x0021ED2C
	public override MethodImplAttributes GetMethodImplementationFlags(); // 0x0021ED30
	public override ParameterInfo[] GetParameters(); // 0x0021ED38
	internal override int GetParameterCount(); // 0x0021EF5C
	public Module GetModule(); // 0x0021EF70
	public void CreateMethodBody(byte[] il, int count); // 0x0021EF94
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x0021F114
	public override bool IsDefined(Type attributeType, bool inherit); // 0x0021F17C
	public override object[] GetCustomAttributes(bool inherit); // 0x0021F1E4
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x0021F2BC
	public ILGenerator GetILGenerator(); // 0x0021F39C
	public ILGenerator GetILGenerator(int size); // 0x0021F3A4
	public ParameterBuilder DefineParameter(int position, ParameterAttributes attributes, string strParamName); // 0x0021F608
	internal void check_override(); // 0x0021F974
	internal void fixup(); // 0x0021FA90
	internal void GenerateDebugInfo(ISymbolWriter symbolWriter); // 0x0021FC28
	public void SetCustomAttribute(CustomAttributeBuilder customBuilder); // 0x0021FEEC
	public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute); // 0x00220B64
	public void SetImplementationFlags(MethodImplAttributes attributes); // 0x00220C98
	public void AddDeclarativeSecurity(SecurityAction action, PermissionSet pset); // 0x00220CB4
	public void SetMarshal(UnmanagedMarshal unmanagedMarshal); // 0x00220CB8
	public void SetSymCustomAttribute(string name, byte[] data); // 0x00220D4C
	public override string ToString(); // 0x00220DE0
	public override bool Equals(object obj); // 0x00221090
	public override int GetHashCode(); // 0x00221098
	internal override int get_next_table_index(object obj, int table, bool inc); // 0x0021E708
	internal void set_override(MethodInfo mdecl); // 0x002210C4
	private void RejectIfCreated(); // 0x0021F7CC
	private Exception NotSupported(); // 0x0021EB04
	public override MethodInfo MakeGenericMethod(Type[] typeArguments); // 0x002210CC
	public override MethodInfo GetGenericMethodDefinition(); // 0x002210F0
	public override Type[] GetGenericArguments(); // 0x0022118C
	public GenericTypeParameterBuilder[] DefineGenericParameters(string[] names); // 0x00221310
	public void SetReturnType(Type returnType); // 0x00221588
	public void SetParameters(Type[] parameterTypes); // 0x00221590
	public void SetSignature(Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers); // 0x002216C4
}

// Namespace: System.Reflection.Emit
internal class MethodOnTypeBuilderInst : MethodInfo // TypeDefIndex: 521
{
	// Fields
	private MonoGenericClass instantiation; // 0x08
	internal MethodBuilder mb; // 0x0C
	private Type[] method_arguments; // 0x10
	private MethodOnTypeBuilderInst generic_method_definition; // 0x14

	// Properties
	public override Type DeclaringType { get; } // 0x00221824 
	public override string Name { get; } // 0x0022182C 
	public override Type ReflectedType { get; } // 0x00221850 
	public override Type ReturnType { get; } // 0x00221858 
	public override int MetadataToken { get; } // 0x00222290 
	public override RuntimeMethodHandle MethodHandle { get; } // 0x002224A4 
	public override MethodAttributes Attributes { get; } // 0x0022252C 
	public override CallingConventions CallingConvention { get; } // 0x00222550 
	public override bool ContainsGenericParameters { get; } // 0x002228A4 
	public override bool IsGenericMethodDefinition { get; } // 0x002229D8 
	public override bool IsGenericMethod { get; } // 0x00222A20 
	public override ICustomAttributeProvider ReturnTypeCustomAttributes { get; } // 0x00222AD4 

	// Constructors
	public MethodOnTypeBuilderInst(MonoGenericClass instantiation, MethodBuilder mb); // 0x0022170C
	internal MethodOnTypeBuilderInst(MethodOnTypeBuilderInst gmd, Type[] typeArguments); // 0x00221734

	// Methods
	public override bool IsDefined(Type attributeType, bool inherit); // 0x002219DC
	public override object[] GetCustomAttributes(bool inherit); // 0x00221A64
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00221AEC
	public override string ToString(); // 0x00221B74
	public override MethodImplAttributes GetMethodImplementationFlags(); // 0x00221ED8
	public override ParameterInfo[] GetParameters(); // 0x00221EFC
	internal override int GetParameterCount(); // 0x002223EC
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x0022241C
	public override MethodInfo MakeGenericMethod(Type[] typeArguments); // 0x00222574
	public override Type[] GetGenericArguments(); // 0x002227B0
	public override MethodInfo GetGenericMethodDefinition(); // 0x00222890
	public override MethodInfo GetBaseDefinition(); // 0x00222A4C
}

// Namespace: System.Reflection.Emit
public sealed class MethodRental : _MethodRental // TypeDefIndex: 522
{
	// Fields
	public const int JitImmediate = 1; // 0x00
	public const int JitOnDemand = 0; // 0x00

	// Constructors
	private MethodRental(); // 0x00222B5C

	// Methods
	private void System.Runtime.InteropServices._MethodRental.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x00222B64
	private void System.Runtime.InteropServices._MethodRental.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x00222BEC
	private void System.Runtime.InteropServices._MethodRental.GetTypeInfoCount(out uint pcTInfo); // 0x00222C74
	private void System.Runtime.InteropServices._MethodRental.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x00222CFC
	public static void SwapMethodBody(Type cls, int methodtoken, IntPtr rgIL, int methodSize, int flags); // 0x00222D84
}

// Namespace: System.Reflection.Emit
[Serializable]
public struct MethodToken // TypeDefIndex: 523
{
	// Fields
	internal int tokValue; // 0x08
	public static readonly MethodToken Empty; // 0x00

	// Properties
	public int Token { get; } // 0x0008C1B8 

	// Constructors
	internal MethodToken(int val); // 0x0008C18C
	private static MethodToken(); // 0x00222F98

	// Methods
	public override bool Equals(object obj); // 0x0008C194
	public bool Equals(MethodToken obj); // 0x0008C19C
	public override int GetHashCode(); // 0x0008C1B0
	public static bool op_Equality(MethodToken a, MethodToken b); // 0x002230B8
	public static bool op_Inequality(MethodToken a, MethodToken b); // 0x00223150
}

// Namespace: System.Reflection.Emit
public class ModuleBuilder : Module, _ModuleBuilder // TypeDefIndex: 524
{
	// Fields
	private UIntPtr dynamic_image; // 0x24
	private int num_types; // 0x28
	private TypeBuilder[] types; // 0x2C
	private CustomAttributeBuilder[] cattrs; // 0x30
	private byte[] guid; // 0x34
	private int table_idx; // 0x38
	internal AssemblyBuilder assemblyb; // 0x3C
	private MethodBuilder[] global_methods; // 0x40
	private FieldBuilder[] global_fields; // 0x44
	private bool is_main; // 0x48
	private MonoResource[] resources; // 0x4C
	private TypeBuilder global_type; // 0x50
	private Type global_type_created; // 0x54
	private Hashtable name_cache; // 0x58
	private Hashtable us_string_cache; // 0x5C
	private int[] table_indexes; // 0x60
	private bool transient; // 0x64
	private ModuleBuilderTokenGenerator token_gen; // 0x68
	private Hashtable resource_writers; // 0x6C
	private ISymbolWriter symbolWriter; // 0x70
	private static readonly char[] type_modifiers; // 0x00

	// Properties
	public override string FullyQualifiedName { get; } // 0x00223C10 
	internal string FileName { get; } // 0x00228034 
	internal bool IsMain { set; } // 0x0022803C

	// Constructors
	internal ModuleBuilder(AssemblyBuilder assb, string name, string fullyqname, bool emitSymbolInfo, bool transient); // 0x002231EC
	private static ModuleBuilder(); // 0x002238F8

	// Methods
	private void System.Runtime.InteropServices._ModuleBuilder.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x002239F0
	private void System.Runtime.InteropServices._ModuleBuilder.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x00223A78
	private void System.Runtime.InteropServices._ModuleBuilder.GetTypeInfoCount(out uint pcTInfo); // 0x00223B00
	private void System.Runtime.InteropServices._ModuleBuilder.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x00223B88
	private static void basic_init(ModuleBuilder ab); // 0x00223858
	private static void set_wrappers_type(ModuleBuilder mb, Type ab); // 0x002238F4
	public bool IsTransient(); // 0x00223C18
	public void CreateGlobalFunctions(); // 0x00223C20
	public FieldBuilder DefineInitializedData(string name, byte[] data, FieldAttributes attributes); // 0x00223CE8
	public FieldBuilder DefineUninitializedData(string name, int size, FieldAttributes attributes); // 0x00223DE0
	private void addGlobalMethod(MethodBuilder mb); // 0x0022434C
	public MethodBuilder DefineGlobalMethod(string name, MethodAttributes attributes, Type returnType, Type[] parameterTypes); // 0x002244E4
	public MethodBuilder DefineGlobalMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes); // 0x0022451C
	public MethodBuilder DefineGlobalMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] requiredReturnTypeCustomModifiers, Type[] optionalReturnTypeCustomModifiers, Type[] parameterTypes, Type[][] requiredParameterTypeCustomModifiers, Type[][] optionalParameterTypeCustomModifiers); // 0x00224558
	public MethodBuilder DefinePInvokeMethod(string name, string dllName, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, CallingConvention nativeCallConv, CharSet nativeCharSet); // 0x00224730
	public MethodBuilder DefinePInvokeMethod(string name, string dllName, string entryName, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, CallingConvention nativeCallConv, CharSet nativeCharSet); // 0x00224770
	public TypeBuilder DefineType(string name); // 0x00224944
	public TypeBuilder DefineType(string name, TypeAttributes attr); // 0x0022494C
	public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent); // 0x00224A48
	private void AddType(TypeBuilder tb); // 0x00224A70
	private TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, Type[] interfaces, PackingSize packingSize, int typesize); // 0x002241CC
	internal void RegisterTypeName(TypeBuilder tb, string name); // 0x00224BB0
	internal TypeBuilder GetRegisteredType(string name); // 0x00224BF4
	public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, Type[] interfaces); // 0x00224A20
	public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, int typesize); // 0x00224CA8
	public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, PackingSize packsize); // 0x00224CD0
	public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, PackingSize packingSize, int typesize); // 0x00224CF8
	public MethodInfo GetArrayMethod(Type arrayClass, string methodName, CallingConventions callingConvention, Type returnType, Type[] parameterTypes); // 0x00224D20
	public EnumBuilder DefineEnum(string name, TypeAttributes visibility, Type underlyingType); // 0x00224DC4
	public override Type GetType(string className); // 0x00224F30
	public override Type GetType(string className, bool ignoreCase); // 0x00224F60
	private TypeBuilder search_in_array(TypeBuilder[] arr, int validElementsInArray, string className); // 0x00224F90
	private TypeBuilder search_nested_in_array(TypeBuilder[] arr, int validElementsInArray, string className); // 0x00225108
	private static Type create_modified_type(TypeBuilder tb, string modifiers); // 0x00225280
	private TypeBuilder GetMaybeNested(TypeBuilder t, string className); // 0x00225284
	public override Type GetType(string className, bool throwOnError, bool ignoreCase); // 0x0022539C
	internal int get_next_table_index(object obj, int table, bool inc); // 0x002236F8
	public void SetCustomAttribute(CustomAttributeBuilder customBuilder); // 0x002257C0
	public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute); // 0x00225958
	public ISymbolWriter GetSymWriter(); // 0x002259E0
	public ISymbolDocumentWriter DefineDocument(string url, Guid language, Guid languageVendor, Guid documentType); // 0x002259E8
	public override Type[] GetTypes(); // 0x00225B48
	public IResourceWriter DefineResource(string name, string description, ResourceAttributes attribute); // 0x00225D48
	public IResourceWriter DefineResource(string name, string description); // 0x002260FC
	public void DefineUnmanagedResource(byte[] resource); // 0x00226118
	public void DefineUnmanagedResource(string resourceFileName); // 0x002261F0
	public void DefineManifestResource(string name, Stream stream, ResourceAttributes attribute); // 0x00226424
	public void SetSymCustomAttribute(string name, byte[] data); // 0x002267B8
	public void SetUserEntryPoint(MethodInfo entryPoint); // 0x00226840
	public MethodToken GetMethodToken(MethodInfo method); // 0x002269A4
	public MethodToken GetArrayMethodToken(Type arrayClass, string methodName, CallingConventions callingConvention, Type returnType, Type[] parameterTypes); // 0x00226B70
	public MethodToken GetConstructorToken(ConstructorInfo con); // 0x00226BA4
	public FieldToken GetFieldToken(FieldInfo field); // 0x00226C60
	public SignatureToken GetSignatureToken(byte[] sigBytes, int sigLength); // 0x00226DA4
	public SignatureToken GetSignatureToken(SignatureHelper sigHelper); // 0x00226E2C
	public StringToken GetStringConstant(string str); // 0x00226F70
	public TypeToken GetTypeToken(Type type); // 0x002271CC
	public TypeToken GetTypeToken(string name); // 0x0022744C
	private static int getUSIndex(ModuleBuilder mb, string str); // 0x0022747C
	private static int getToken(ModuleBuilder mb, object obj); // 0x00227480
	private static int getMethodToken(ModuleBuilder mb, MethodInfo method, Type[] opt_param_types); // 0x00227484
	internal int GetToken(string str); // 0x0022702C
	internal int GetToken(MemberInfo member); // 0x00226AE8
	internal int GetToken(MethodInfo method, Type[] opt_param_types); // 0x00227488
	internal int GetToken(SignatureHelper helper); // 0x00226EE8
	internal void RegisterToken(object obj, int token); // 0x0021E764
	internal TokenGenerator GetTokenGenerator(); // 0x0021F584
	private static void build_metadata(ModuleBuilder mb); // 0x00227538
	private void WriteToFile(IntPtr handle); // 0x0022753C
	internal void Save(); // 0x00227540
	internal void CreateGlobalType(); // 0x0022385C
	internal override Guid GetModuleVersionId(); // 0x00228044
	internal static Guid Mono_GetGuid(ModuleBuilder mb); // 0x00228064
}

// Namespace: System.Reflection.Emit
internal class ModuleBuilderTokenGenerator : TokenGenerator // TypeDefIndex: 525
{
	// Fields
	private ModuleBuilder mb; // 0x08

	// Constructors
	public ModuleBuilderTokenGenerator(ModuleBuilder mb); // 0x00227518

	// Methods
	public int GetToken(string str); // 0x002280A0
	public int GetToken(MemberInfo member); // 0x002280D0
	public int GetToken(MethodInfo method, Type[] opt_param_types); // 0x00228100
	public int GetToken(SignatureHelper helper); // 0x00228138
}

// Namespace: System.Reflection
internal class MonoArrayMethod : MethodInfo // TypeDefIndex: 526
{
	// Fields
	internal RuntimeMethodHandle mhandle; // 0x08
	internal Type parent; // 0x0C
	internal Type ret; // 0x10
	internal Type[] parameters; // 0x14
	internal string name; // 0x18
	internal int table_idx; // 0x1C
	internal CallingConventions call_conv; // 0x20

	// Properties
	public override Type ReturnType { get; } // 0x00285B64 
	public override ICustomAttributeProvider ReturnTypeCustomAttributes { get; } // 0x00285B6C 
	public override RuntimeMethodHandle MethodHandle { get; } // 0x00285C64 
	public override MethodAttributes Attributes { get; } // 0x00285C6C 
	public override Type ReflectedType { get; } // 0x00285C74 
	public override Type DeclaringType { get; } // 0x00285C7C 
	public override string Name { get; } // 0x00285C84 

	// Constructors
	internal MonoArrayMethod(Type arrayClass, string methodName, CallingConventions callingConvention, Type returnType, Type[] parameterTypes); // 0x00285A74

	// Methods
	public override MethodInfo GetBaseDefinition(); // 0x00285B60
	public override MethodImplAttributes GetMethodImplementationFlags(); // 0x00285B74
	public override ParameterInfo[] GetParameters(); // 0x00285B7C
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x00285BDC
	public override bool IsDefined(Type attributeType, bool inherit); // 0x00285C8C
	public override object[] GetCustomAttributes(bool inherit); // 0x00285D20
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00285DAC
	public override string ToString(); // 0x00285E40
}

// Namespace: System.Reflection.Emit
public struct OpCode // TypeDefIndex: 527
{
	// Fields
	internal byte op1; // 0x08
	internal byte op2; // 0x09
	private byte push; // 0x0A
	private byte pop; // 0x0B
	private byte size; // 0x0C
	private byte type; // 0x0D
	private byte args; // 0x0E
	private byte flow; // 0x0F

	// Properties
	public string Name { get; } // 0x0008C390 
	public int Size { get; } // 0x0008C398 
	public OpCodeType OpCodeType { get; } // 0x0008C3A0 
	public OperandType OperandType { get; } // 0x0008C3A8 
	public FlowControl FlowControl { get; } // 0x0008C3B0 
	public StackBehaviour StackBehaviourPop { get; } // 0x0008C3B8 
	public StackBehaviour StackBehaviourPush { get; } // 0x0008C3C0 
	public short Value { get; } // 0x0008C3C8 

	// Constructors
	internal OpCode(int p, int q); // 0x0008C30C

	// Methods
	public override int GetHashCode(); // 0x0008C348
	public override bool Equals(object obj); // 0x0008C350
	public bool Equals(OpCode obj); // 0x0008C358
	public override string ToString(); // 0x0008C388
	public static bool op_Equality(OpCode a, OpCode b); // 0x0021B580
	public static bool op_Inequality(OpCode a, OpCode b); // 0x00228438
}

// Namespace: System.Reflection.Emit
internal class OpCodeNames // TypeDefIndex: 528
{
	// Fields
	internal static readonly string[] names; // 0x00

	// Constructors
	public OpCodeNames(); // 0x00228468
	private static OpCodeNames(); // 0x00228470

}

// Namespace: System.Reflection.Emit
[Serializable]
public enum OpCodeType // TypeDefIndex: 529
{
	Annotation = 0,
	Macro = 1,
	Nternal = 2,
	Objmodel = 3,
	Prefix = 4,
	Primitive = 5
}

// Namespace: System.Reflection.Emit
public class OpCodes // TypeDefIndex: 530
{
	// Fields
	public static readonly OpCode Nop; // 0x00
	public static readonly OpCode Break; // 0x08
	public static readonly OpCode Ldarg_0; // 0x10
	public static readonly OpCode Ldarg_1; // 0x18
	public static readonly OpCode Ldarg_2; // 0x20
	public static readonly OpCode Ldarg_3; // 0x28
	public static readonly OpCode Ldloc_0; // 0x30
	public static readonly OpCode Ldloc_1; // 0x38
	public static readonly OpCode Ldloc_2; // 0x40
	public static readonly OpCode Ldloc_3; // 0x48
	public static readonly OpCode Stloc_0; // 0x50
	public static readonly OpCode Stloc_1; // 0x58
	public static readonly OpCode Stloc_2; // 0x60
	public static readonly OpCode Stloc_3; // 0x68
	public static readonly OpCode Ldarg_S; // 0x70
	public static readonly OpCode Ldarga_S; // 0x78
	public static readonly OpCode Starg_S; // 0x80
	public static readonly OpCode Ldloc_S; // 0x88
	public static readonly OpCode Ldloca_S; // 0x90
	public static readonly OpCode Stloc_S; // 0x98
	public static readonly OpCode Ldnull; // 0xA0
	public static readonly OpCode Ldc_I4_M1; // 0xA8
	public static readonly OpCode Ldc_I4_0; // 0xB0
	public static readonly OpCode Ldc_I4_1; // 0xB8
	public static readonly OpCode Ldc_I4_2; // 0xC0
	public static readonly OpCode Ldc_I4_3; // 0xC8
	public static readonly OpCode Ldc_I4_4; // 0xD0
	public static readonly OpCode Ldc_I4_5; // 0xD8
	public static readonly OpCode Ldc_I4_6; // 0xE0
	public static readonly OpCode Ldc_I4_7; // 0xE8
	public static readonly OpCode Ldc_I4_8; // 0xF0
	public static readonly OpCode Ldc_I4_S; // 0xF8
	public static readonly OpCode Ldc_I4; // 0x100
	public static readonly OpCode Ldc_I8; // 0x108
	public static readonly OpCode Ldc_R4; // 0x110
	public static readonly OpCode Ldc_R8; // 0x118
	public static readonly OpCode Dup; // 0x120
	public static readonly OpCode Pop; // 0x128
	public static readonly OpCode Jmp; // 0x130
	public static readonly OpCode Call; // 0x138
	public static readonly OpCode Calli; // 0x140
	public static readonly OpCode Ret; // 0x148
	public static readonly OpCode Br_S; // 0x150
	public static readonly OpCode Brfalse_S; // 0x158
	public static readonly OpCode Brtrue_S; // 0x160
	public static readonly OpCode Beq_S; // 0x168
	public static readonly OpCode Bge_S; // 0x170
	public static readonly OpCode Bgt_S; // 0x178
	public static readonly OpCode Ble_S; // 0x180
	public static readonly OpCode Blt_S; // 0x188
	public static readonly OpCode Bne_Un_S; // 0x190
	public static readonly OpCode Bge_Un_S; // 0x198
	public static readonly OpCode Bgt_Un_S; // 0x1A0
	public static readonly OpCode Ble_Un_S; // 0x1A8
	public static readonly OpCode Blt_Un_S; // 0x1B0
	public static readonly OpCode Br; // 0x1B8
	public static readonly OpCode Brfalse; // 0x1C0
	public static readonly OpCode Brtrue; // 0x1C8
	public static readonly OpCode Beq; // 0x1D0
	public static readonly OpCode Bge; // 0x1D8
	public static readonly OpCode Bgt; // 0x1E0
	public static readonly OpCode Ble; // 0x1E8
	public static readonly OpCode Blt; // 0x1F0
	public static readonly OpCode Bne_Un; // 0x1F8
	public static readonly OpCode Bge_Un; // 0x200
	public static readonly OpCode Bgt_Un; // 0x208
	public static readonly OpCode Ble_Un; // 0x210
	public static readonly OpCode Blt_Un; // 0x218
	public static readonly OpCode Switch; // 0x220
	public static readonly OpCode Ldind_I1; // 0x228
	public static readonly OpCode Ldind_U1; // 0x230
	public static readonly OpCode Ldind_I2; // 0x238
	public static readonly OpCode Ldind_U2; // 0x240
	public static readonly OpCode Ldind_I4; // 0x248
	public static readonly OpCode Ldind_U4; // 0x250
	public static readonly OpCode Ldind_I8; // 0x258
	public static readonly OpCode Ldind_I; // 0x260
	public static readonly OpCode Ldind_R4; // 0x268
	public static readonly OpCode Ldind_R8; // 0x270
	public static readonly OpCode Ldind_Ref; // 0x278
	public static readonly OpCode Stind_Ref; // 0x280
	public static readonly OpCode Stind_I1; // 0x288
	public static readonly OpCode Stind_I2; // 0x290
	public static readonly OpCode Stind_I4; // 0x298
	public static readonly OpCode Stind_I8; // 0x2A0
	public static readonly OpCode Stind_R4; // 0x2A8
	public static readonly OpCode Stind_R8; // 0x2B0
	public static readonly OpCode Add; // 0x2B8
	public static readonly OpCode Sub; // 0x2C0
	public static readonly OpCode Mul; // 0x2C8
	public static readonly OpCode Div; // 0x2D0
	public static readonly OpCode Div_Un; // 0x2D8
	public static readonly OpCode Rem; // 0x2E0
	public static readonly OpCode Rem_Un; // 0x2E8
	public static readonly OpCode And; // 0x2F0
	public static readonly OpCode Or; // 0x2F8
	public static readonly OpCode Xor; // 0x300
	public static readonly OpCode Shl; // 0x308
	public static readonly OpCode Shr; // 0x310
	public static readonly OpCode Shr_Un; // 0x318
	public static readonly OpCode Neg; // 0x320
	public static readonly OpCode Not; // 0x328
	public static readonly OpCode Conv_I1; // 0x330
	public static readonly OpCode Conv_I2; // 0x338
	public static readonly OpCode Conv_I4; // 0x340
	public static readonly OpCode Conv_I8; // 0x348
	public static readonly OpCode Conv_R4; // 0x350
	public static readonly OpCode Conv_R8; // 0x358
	public static readonly OpCode Conv_U4; // 0x360
	public static readonly OpCode Conv_U8; // 0x368
	public static readonly OpCode Callvirt; // 0x370
	public static readonly OpCode Cpobj; // 0x378
	public static readonly OpCode Ldobj; // 0x380
	public static readonly OpCode Ldstr; // 0x388
	public static readonly OpCode Newobj; // 0x390
	public static readonly OpCode Castclass; // 0x398
	public static readonly OpCode Isinst; // 0x3A0
	public static readonly OpCode Conv_R_Un; // 0x3A8
	public static readonly OpCode Unbox; // 0x3B0
	public static readonly OpCode Throw; // 0x3B8
	public static readonly OpCode Ldfld; // 0x3C0
	public static readonly OpCode Ldflda; // 0x3C8
	public static readonly OpCode Stfld; // 0x3D0
	public static readonly OpCode Ldsfld; // 0x3D8
	public static readonly OpCode Ldsflda; // 0x3E0
	public static readonly OpCode Stsfld; // 0x3E8
	public static readonly OpCode Stobj; // 0x3F0
	public static readonly OpCode Conv_Ovf_I1_Un; // 0x3F8
	public static readonly OpCode Conv_Ovf_I2_Un; // 0x400
	public static readonly OpCode Conv_Ovf_I4_Un; // 0x408
	public static readonly OpCode Conv_Ovf_I8_Un; // 0x410
	public static readonly OpCode Conv_Ovf_U1_Un; // 0x418
	public static readonly OpCode Conv_Ovf_U2_Un; // 0x420
	public static readonly OpCode Conv_Ovf_U4_Un; // 0x428
	public static readonly OpCode Conv_Ovf_U8_Un; // 0x430
	public static readonly OpCode Conv_Ovf_I_Un; // 0x438
	public static readonly OpCode Conv_Ovf_U_Un; // 0x440
	public static readonly OpCode Box; // 0x448
	public static readonly OpCode Newarr; // 0x450
	public static readonly OpCode Ldlen; // 0x458
	public static readonly OpCode Ldelema; // 0x460
	public static readonly OpCode Ldelem_I1; // 0x468
	public static readonly OpCode Ldelem_U1; // 0x470
	public static readonly OpCode Ldelem_I2; // 0x478
	public static readonly OpCode Ldelem_U2; // 0x480
	public static readonly OpCode Ldelem_I4; // 0x488
	public static readonly OpCode Ldelem_U4; // 0x490
	public static readonly OpCode Ldelem_I8; // 0x498
	public static readonly OpCode Ldelem_I; // 0x4A0
	public static readonly OpCode Ldelem_R4; // 0x4A8
	public static readonly OpCode Ldelem_R8; // 0x4B0
	public static readonly OpCode Ldelem_Ref; // 0x4B8
	public static readonly OpCode Stelem_I; // 0x4C0
	public static readonly OpCode Stelem_I1; // 0x4C8
	public static readonly OpCode Stelem_I2; // 0x4D0
	public static readonly OpCode Stelem_I4; // 0x4D8
	public static readonly OpCode Stelem_I8; // 0x4E0
	public static readonly OpCode Stelem_R4; // 0x4E8
	public static readonly OpCode Stelem_R8; // 0x4F0
	public static readonly OpCode Stelem_Ref; // 0x4F8
	public static readonly OpCode Ldelem; // 0x500
	public static readonly OpCode Stelem; // 0x508
	public static readonly OpCode Unbox_Any; // 0x510
	public static readonly OpCode Conv_Ovf_I1; // 0x518
	public static readonly OpCode Conv_Ovf_U1; // 0x520
	public static readonly OpCode Conv_Ovf_I2; // 0x528
	public static readonly OpCode Conv_Ovf_U2; // 0x530
	public static readonly OpCode Conv_Ovf_I4; // 0x538
	public static readonly OpCode Conv_Ovf_U4; // 0x540
	public static readonly OpCode Conv_Ovf_I8; // 0x548
	public static readonly OpCode Conv_Ovf_U8; // 0x550
	public static readonly OpCode Refanyval; // 0x558
	public static readonly OpCode Ckfinite; // 0x560
	public static readonly OpCode Mkrefany; // 0x568
	public static readonly OpCode Ldtoken; // 0x570
	public static readonly OpCode Conv_U2; // 0x578
	public static readonly OpCode Conv_U1; // 0x580
	public static readonly OpCode Conv_I; // 0x588
	public static readonly OpCode Conv_Ovf_I; // 0x590
	public static readonly OpCode Conv_Ovf_U; // 0x598
	public static readonly OpCode Add_Ovf; // 0x5A0
	public static readonly OpCode Add_Ovf_Un; // 0x5A8
	public static readonly OpCode Mul_Ovf; // 0x5B0
	public static readonly OpCode Mul_Ovf_Un; // 0x5B8
	public static readonly OpCode Sub_Ovf; // 0x5C0
	public static readonly OpCode Sub_Ovf_Un; // 0x5C8
	public static readonly OpCode Endfinally; // 0x5D0
	public static readonly OpCode Leave; // 0x5D8
	public static readonly OpCode Leave_S; // 0x5E0
	public static readonly OpCode Stind_I; // 0x5E8
	public static readonly OpCode Conv_U; // 0x5F0
	public static readonly OpCode Prefix7; // 0x5F8
	public static readonly OpCode Prefix6; // 0x600
	public static readonly OpCode Prefix5; // 0x608
	public static readonly OpCode Prefix4; // 0x610
	public static readonly OpCode Prefix3; // 0x618
	public static readonly OpCode Prefix2; // 0x620
	public static readonly OpCode Prefix1; // 0x628
	public static readonly OpCode Prefixref; // 0x630
	public static readonly OpCode Arglist; // 0x638
	public static readonly OpCode Ceq; // 0x640
	public static readonly OpCode Cgt; // 0x648
	public static readonly OpCode Cgt_Un; // 0x650
	public static readonly OpCode Clt; // 0x658
	public static readonly OpCode Clt_Un; // 0x660
	public static readonly OpCode Ldftn; // 0x668
	public static readonly OpCode Ldvirtftn; // 0x670
	public static readonly OpCode Ldarg; // 0x678
	public static readonly OpCode Ldarga; // 0x680
	public static readonly OpCode Starg; // 0x688
	public static readonly OpCode Ldloc; // 0x690
	public static readonly OpCode Ldloca; // 0x698
	public static readonly OpCode Stloc; // 0x6A0
	public static readonly OpCode Localloc; // 0x6A8
	public static readonly OpCode Endfilter; // 0x6B0
	public static readonly OpCode Unaligned; // 0x6B8
	public static readonly OpCode Volatile; // 0x6C0
	public static readonly OpCode Tailcall; // 0x6C8
	public static readonly OpCode Initobj; // 0x6D0
	public static readonly OpCode Constrained; // 0x6D8
	public static readonly OpCode Cpblk; // 0x6E0
	public static readonly OpCode Initblk; // 0x6E8
	public static readonly OpCode Rethrow; // 0x6F0
	public static readonly OpCode Sizeof; // 0x6F8
	public static readonly OpCode Refanytype; // 0x700
	public static readonly OpCode Readonly; // 0x708

	// Constructors
	internal OpCodes(); // 0x0022E4BC
	private static OpCodes(); // 0x0022E4C4

	// Methods
	public static bool TakesSingleByteArgument(OpCode inst); // 0x0022F630
}

// Namespace: System.Reflection.Emit
[Serializable]
public enum OperandType // TypeDefIndex: 531
{
	InlineBrTarget = 0,
	InlineField = 1,
	InlineI = 2,
	InlineI8 = 3,
	InlineMethod = 4,
	InlineNone = 5,
	InlinePhi = 6,
	InlineR = 7,
	InlineSig = 9,
	InlineString = 10,
	InlineSwitch = 11,
	InlineTok = 12,
	InlineType = 13,
	InlineVar = 14,
	ShortInlineBrTarget = 15,
	ShortInlineI = 16,
	ShortInlineR = 17,
	ShortInlineVar = 18
}

// Namespace: System.Reflection.Emit
[Serializable]
public enum PEFileKinds // TypeDefIndex: 532
{
	Dll = 1,
	ConsoleApplication = 2,
	WindowApplication = 3
}

// Namespace: System.Reflection.Emit
[Serializable]
public enum PackingSize // TypeDefIndex: 533
{
	Unspecified = 0,
	Size1 = 1,
	Size2 = 2,
	Size4 = 4,
	Size8 = 8,
	Size16 = 16,
	Size32 = 32,
	Size64 = 64,
	Size128 = 128
}

// Namespace: System.Reflection.Emit
public class ParameterBuilder : _ParameterBuilder // TypeDefIndex: 534
{
	// Fields
	private MethodBase methodb; // 0x08
	private string name; // 0x0C
	private CustomAttributeBuilder[] cattrs; // 0x10
	private UnmanagedMarshal marshal_info; // 0x14
	private ParameterAttributes attrs; // 0x18
	private int position; // 0x1C
	private int table_idx; // 0x20
	private object def_value; // 0x24

	// Properties
	public virtual int Attributes { get; } // 0x0022F868 
	public bool IsIn { get; } // 0x0022F870 
	public bool IsOut { get; } // 0x0022F87C 
	public bool IsOptional { get; } // 0x0022F888 
	public virtual string Name { get; } // 0x0022F894 
	public virtual int Position { get; } // 0x0022F89C 

	// Constructors
	internal ParameterBuilder(MethodBase mb, int pos, ParameterAttributes attributes, string strParamName); // 0x0021F894

	// Methods
	private void System.Runtime.InteropServices._ParameterBuilder.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x0022F648
	private void System.Runtime.InteropServices._ParameterBuilder.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x0022F6D0
	private void System.Runtime.InteropServices._ParameterBuilder.GetTypeInfoCount(out uint pcTInfo); // 0x0022F758
	private void System.Runtime.InteropServices._ParameterBuilder.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x0022F7E0
	public virtual ParameterToken GetToken(); // 0x0022F8A4
	public virtual void SetConstant(object defaultValue); // 0x0022F8B0
	public void SetCustomAttribute(CustomAttributeBuilder customBuilder); // 0x0022F8C4
	public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute); // 0x0022FCF8
	public virtual void SetMarshal(UnmanagedMarshal unmanagedMarshal); // 0x0022FD80
}

// Namespace: System.Reflection.Emit
[Serializable]
public struct ParameterToken // TypeDefIndex: 535
{
	// Fields
	internal int tokValue; // 0x08
	public static readonly ParameterToken Empty; // 0x00

	// Properties
	public int Token { get; } // 0x0008C41C 

	// Constructors
	internal ParameterToken(int val); // 0x0008C3F0
	private static ParameterToken(); // 0x0022FD9C

	// Methods
	public override bool Equals(object obj); // 0x0008C3F8
	public bool Equals(ParameterToken obj); // 0x0008C400
	public override int GetHashCode(); // 0x0008C414
	public static bool op_Equality(ParameterToken a, ParameterToken b); // 0x0022FEBC
	public static bool op_Inequality(ParameterToken a, ParameterToken b); // 0x0022FF54
}

// Namespace: System.Reflection.Emit
public sealed class PropertyBuilder : PropertyInfo, _PropertyBuilder // TypeDefIndex: 536
{
	// Fields
	private PropertyAttributes attrs; // 0x08
	private string name; // 0x0C
	private Type type; // 0x10
	private Type[] parameters; // 0x14
	private CustomAttributeBuilder[] cattrs; // 0x18
	private object def_value; // 0x1C
	private MethodBuilder set_method; // 0x20
	private MethodBuilder get_method; // 0x24
	private int table_idx; // 0x28
	internal TypeBuilder typeb; // 0x2C
	private Type[] returnModReq; // 0x30
	private Type[] returnModOpt; // 0x34
	private Type[][] paramModReq; // 0x38
	private Type[][] paramModOpt; // 0x3C

	// Properties
	public override PropertyAttributes Attributes { get; } // 0x00230468 
	public override bool CanRead { get; } // 0x00230470 
	public override bool CanWrite { get; } // 0x00230480 
	public override Type DeclaringType { get; } // 0x00230490 
	public override string Name { get; } // 0x00230498 
	public PropertyToken PropertyToken { get; } // 0x002304A0 
	public override Type PropertyType { get; } // 0x002304A8 
	public override Type ReflectedType { get; } // 0x002304B0 
	public override Module Module { get; } // 0x00230A58 

	// Constructors
	internal PropertyBuilder(TypeBuilder tb, string name, PropertyAttributes attributes, Type returnType, Type[] returnModReq, Type[] returnModOpt, Type[] parameterTypes, Type[][] paramModReq, Type[][] paramModOpt); // 0x0023012C

	// Methods
	private void System.Runtime.InteropServices._PropertyBuilder.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x00230248
	private void System.Runtime.InteropServices._PropertyBuilder.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x002302D0
	private void System.Runtime.InteropServices._PropertyBuilder.GetTypeInfoCount(out uint pcTInfo); // 0x00230358
	private void System.Runtime.InteropServices._PropertyBuilder.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x002303E0
	public void AddOtherMethod(MethodBuilder mdBuilder); // 0x002304B8
	public override MethodInfo[] GetAccessors(bool nonPublic); // 0x002304BC
	public override object[] GetCustomAttributes(bool inherit); // 0x002304C4
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x002305AC
	public override MethodInfo GetGetMethod(bool nonPublic); // 0x00230614
	public override ParameterInfo[] GetIndexParameters(); // 0x0023061C
	public override MethodInfo GetSetMethod(bool nonPublic); // 0x00230684
	public override object GetValue(object obj, object[] index); // 0x0023068C
	public override object GetValue(object obj, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture); // 0x00230694
	public override bool IsDefined(Type attributeType, bool inherit); // 0x002306FC
	public void SetConstant(object defaultValue); // 0x00230764
	public void SetCustomAttribute(CustomAttributeBuilder customBuilder); // 0x0023076C
	public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute); // 0x002309B8
	public void SetGetMethod(MethodBuilder mdBuilder); // 0x00230A40
	public void SetSetMethod(MethodBuilder mdBuilder); // 0x00230A48
	public override void SetValue(object obj, object value, object[] index); // 0x00230A50
	public override void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture); // 0x00230A54
	private Exception not_supported(); // 0x0023052C
}

// Namespace: System.Reflection.Emit
internal class PropertyOnTypeBuilderInst : PropertyInfo // TypeDefIndex: 537
{
	// Fields
	private MonoGenericClass instantiation; // 0x08
	private PropertyInfo prop; // 0x0C

	// Properties
	public override PropertyAttributes Attributes { get; } // 0x00272DE4 
	public override bool CanRead { get; } // 0x00272E6C 
	public override bool CanWrite { get; } // 0x00272EF4 
	public override Type PropertyType { get; } // 0x00272F7C 
	public override Type DeclaringType { get; } // 0x00272FE0 
	public override Type ReflectedType { get; } // 0x0027303C 
	public override string Name { get; } // 0x00273044 

	// Constructors
	internal PropertyOnTypeBuilderInst(MonoGenericClass instantiation, PropertyInfo prop); // 0x00272DBC

	// Methods
	public override MethodInfo[] GetAccessors(bool nonPublic); // 0x00273078
	public override MethodInfo GetGetMethod(bool nonPublic); // 0x00273208
	public override ParameterInfo[] GetIndexParameters(); // 0x00273644
	public override MethodInfo GetSetMethod(bool nonPublic); // 0x002736DC
	public override string ToString(); // 0x0027378C
	public override object GetValue(object obj, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture); // 0x00273854
	public override void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture); // 0x002738DC
	public override bool IsDefined(Type attributeType, bool inherit); // 0x00273964
	public override object[] GetCustomAttributes(bool inherit); // 0x002739EC
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00273A74
}

// Namespace: System.Reflection.Emit
[Serializable]
public struct PropertyToken // TypeDefIndex: 538
{
	// Fields
	internal int tokValue; // 0x08
	public static readonly PropertyToken Empty; // 0x00

	// Properties
	public int Token { get; } // 0x0008C814 

	// Constructors
	internal PropertyToken(int val); // 0x0008C7E8
	private static PropertyToken(); // 0x00273B04

	// Methods
	public override bool Equals(object obj); // 0x0008C7F0
	public bool Equals(PropertyToken obj); // 0x0008C7F8
	public override int GetHashCode(); // 0x0008C80C
	public static bool op_Equality(PropertyToken a, PropertyToken b); // 0x00273C24
	public static bool op_Inequality(PropertyToken a, PropertyToken b); // 0x00273CBC
}

// Namespace: System.Reflection.Emit
public sealed class SignatureHelper : _SignatureHelper // TypeDefIndex: 539
{
	// Fields
	private ModuleBuilder module; // 0x08
	private Type[] arguments; // 0x0C
	private SignatureHelperType type; // 0x10
	private Type returnType; // 0x14
	private CallingConventions callConv; // 0x18
	private CallingConvention unmanagedCallConv; // 0x1C
	private Type[][] modreqs; // 0x20
	private Type[][] modopts; // 0x24

	// Constructors
	internal SignatureHelper(ModuleBuilder module, SignatureHelperType type); // 0x002744E8

	// Methods
	private void System.Runtime.InteropServices._SignatureHelper.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x00274510
	private void System.Runtime.InteropServices._SignatureHelper.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x00274598
	private void System.Runtime.InteropServices._SignatureHelper.GetTypeInfoCount(out uint pcTInfo); // 0x00274620
	private void System.Runtime.InteropServices._SignatureHelper.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x002746A8
	public static SignatureHelper GetFieldSigHelper(Module mod); // 0x00274730
	public static SignatureHelper GetLocalVarSigHelper(Module mod); // 0x002748A0
	public static SignatureHelper GetLocalVarSigHelper(); // 0x00274A0C
	public static SignatureHelper GetMethodSigHelper(CallingConventions callingConvention, Type returnType); // 0x00274A88
	public static SignatureHelper GetMethodSigHelper(CallingConvention unmanagedCallingConvention, Type returnType); // 0x00274ED0
	public static SignatureHelper GetMethodSigHelper(Module mod, CallingConventions callingConvention, Type returnType); // 0x00274F00
	public static SignatureHelper GetMethodSigHelper(Module mod, CallingConvention unmanagedCallConv, Type returnType); // 0x00274F28
	public static SignatureHelper GetMethodSigHelper(Module mod, Type returnType, Type[] parameterTypes); // 0x00274F54
	public static SignatureHelper GetPropertySigHelper(Module mod, Type returnType, Type[] parameterTypes); // 0x00274F7C
	private static int AppendArray(Type[] array, Type t); // 0x00275004
	private static void AppendArrayAt(Type[][] array, Type[] t, int pos); // 0x002751A8
	private static void ValidateParameterModifiers(string name, Type[] parameter_modifiers); // 0x002752BC
	private static void ValidateCustomModifier(int n, Type[][] custom_modifiers, string name); // 0x00275480
	private static Exception MissingFeature(); // 0x002755E8
	public void AddArguments(Type[] arguments, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers); // 0x00275684
	public void AddArgument(Type argument, bool pinned); // 0x00275928
	public void AddArgument(Type argument, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers); // 0x002757F0
	public static SignatureHelper GetPropertySigHelper(Module mod, Type returnType, Type[] requiredReturnTypeCustomModifiers, Type[] optionalReturnTypeCustomModifiers, Type[] parameterTypes, Type[][] requiredParameterTypeCustomModifiers, Type[][] optionalParameterTypeCustomModifiers); // 0x002759E8
	public void AddArgument(Type clsArgument); // 0x0027592C
	public void AddSentinel(); // 0x00275A70
	private static bool CompareOK(Type[][] one, Type[][] two); // 0x00275AF8
	public override bool Equals(object obj); // 0x00275C94
	public override int GetHashCode(); // 0x00275E78
	internal byte[] get_signature_local(); // 0x00275E80
	internal byte[] get_signature_field(); // 0x00275E84
	public byte[] GetSignature(); // 0x00275E88
	public override string ToString(); // 0x00275F40
	internal static SignatureHelper GetMethodSigHelper(Module mod, CallingConventions callingConvention, CallingConvention unmanagedCallingConvention, Type returnType, Type[] parameters); // 0x00274AB8
}

// Namespace: 
internal enum SignatureHelperType // TypeDefIndex: 540
{
	HELPER_FIELD = 0,
	HELPER_LOCAL = 1,
	HELPER_METHOD = 2,
	HELPER_PROPERTY = 3
}

// Namespace: System.Reflection.Emit
public struct SignatureToken // TypeDefIndex: 541
{
	// Fields
	internal int tokValue; // 0x08
	public static readonly SignatureToken Empty; // 0x00

	// Properties
	public int Token { get; } // 0x0008C8BC 

	// Constructors
	internal SignatureToken(int val); // 0x0008C890
	private static SignatureToken(); // 0x00275FA4

	// Methods
	public override bool Equals(object obj); // 0x0008C898
	public bool Equals(SignatureToken obj); // 0x0008C8A0
	public override int GetHashCode(); // 0x0008C8B4
	public static bool op_Equality(SignatureToken a, SignatureToken b); // 0x002760C4
	public static bool op_Inequality(SignatureToken a, SignatureToken b); // 0x0027615C
}

// Namespace: System.Reflection.Emit
[Serializable]
public enum StackBehaviour // TypeDefIndex: 542
{
	Pop0 = 0,
	Pop1 = 1,
	Pop1_pop1 = 2,
	Popi = 3,
	Popi_pop1 = 4,
	Popi_popi = 5,
	Popi_popi8 = 6,
	Popi_popi_popi = 7,
	Popi_popr4 = 8,
	Popi_popr8 = 9,
	Popref = 10,
	Popref_pop1 = 11,
	Popref_popi = 12,
	Popref_popi_popi = 13,
	Popref_popi_popi8 = 14,
	Popref_popi_popr4 = 15,
	Popref_popi_popr8 = 16,
	Popref_popi_popref = 17,
	Push0 = 18,
	Push1 = 19,
	Push1_push1 = 20,
	Pushi = 21,
	Pushi8 = 22,
	Pushr4 = 23,
	Pushr8 = 24,
	Pushref = 25,
	Varpop = 26,
	Varpush = 27,
	Popref_popi_pop1 = 28
}

// Namespace: System.Reflection.Emit
[Serializable]
public struct StringToken // TypeDefIndex: 543
{
	// Fields
	internal int tokValue; // 0x08

	// Properties
	public int Token { get; } // 0x0008C8F0 

	// Constructors
	internal StringToken(int val); // 0x0008C8C4
	private static StringToken(); // 0x00276200

	// Methods
	public override bool Equals(object obj); // 0x0008C8CC
	public bool Equals(StringToken obj); // 0x0008C8D4
	public override int GetHashCode(); // 0x0008C8E8
	public static bool op_Equality(StringToken a, StringToken b); // 0x002762BC
	public static bool op_Inequality(StringToken a, StringToken b); // 0x00276354
}

// Namespace: System.Reflection.Emit
public sealed class TypeBuilder : Type, _TypeBuilder // TypeDefIndex: 544
{
	// Fields
	public const int UnspecifiedTypeSize = 0; // 0x00
	private string tname; // 0x0C
	private string nspace; // 0x10
	private Type parent; // 0x14
	private Type nesting_type; // 0x18
	internal Type[] interfaces; // 0x1C
	internal int num_methods; // 0x20
	internal MethodBuilder[] methods; // 0x24
	internal ConstructorBuilder[] ctors; // 0x28
	internal PropertyBuilder[] properties; // 0x2C
	internal int num_fields; // 0x30
	internal FieldBuilder[] fields; // 0x34
	internal EventBuilder[] events; // 0x38
	private CustomAttributeBuilder[] cattrs; // 0x3C
	internal TypeBuilder[] subtypes; // 0x40
	internal TypeAttributes attrs; // 0x44
	private int table_idx; // 0x48
	private ModuleBuilder pmodule; // 0x4C
	private int class_size; // 0x50
	private PackingSize packing_size; // 0x54
	private IntPtr generic_container; // 0x58
	private GenericTypeParameterBuilder[] generic_params; // 0x5C
	private RefEmitPermissionSet[] permissions; // 0x60
	private Type created; // 0x64
	private string fullname; // 0x68
	private bool createTypeCalled; // 0x6C
	private Type underlying_type; // 0x70
	private static Dictionary`2<string, int> <>f__switch$map1E; // 0x00

	// Properties
	public override Assembly Assembly { get; } // 0x00276D6C 
	public override string AssemblyQualifiedName { get; } // 0x00276D90 
	public override Type BaseType { get; } // 0x00276E6C 
	public override Type DeclaringType { get; } // 0x00276E74 
	public override Type UnderlyingSystemType { get; } // 0x00276E7C 
	public override string FullName { get; } // 0x00276F80 
	public override Guid GUID { get; } // 0x00276F88 
	public override Module Module { get; } // 0x00277048 
	public override string Name { get; } // 0x00277050 
	public override string Namespace { get; } // 0x00277058 
	public PackingSize PackingSize { get; } // 0x00277060 
	public int Size { get; } // 0x00277068 
	public override Type ReflectedType { get; } // 0x00277070 
	public override RuntimeTypeHandle TypeHandle { get; } // 0x0027C3DC 
	public TypeToken TypeToken { get; } // 0x0027D554 
	internal bool IsCompilerContext { get; } // 0x002769E0 
	internal bool is_created { get; } // 0x00276F70 
	public override bool ContainsGenericParameters { get; } // 0x0027D9F0 
	public override bool IsGenericParameter { get; } // 0x0027DA00 
	public override GenericParameterAttributes GenericParameterAttributes { get; } // 0x0027DA04 
	public override bool IsGenericTypeDefinition { get; } // 0x0027DA0C 
	public override bool IsGenericType { get; } // 0x0027DA1C 
	public override int GenericParameterPosition { get; } // 0x0027DA2C 
	public override MethodBase DeclaringMethod { get; } // 0x0027DA34 

	// Constructors
	internal TypeBuilder(ModuleBuilder mb, TypeAttributes attr, int table_idx); // 0x002763F0
	internal TypeBuilder(ModuleBuilder mb, string name, TypeAttributes attr, Type parent, Type[] interfaces, PackingSize packing_size, int type_size, Type nesting_type); // 0x00276584

	// Methods
	private void System.Runtime.InteropServices._TypeBuilder.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x00276B34
	private void System.Runtime.InteropServices._TypeBuilder.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x00276BBC
	private void System.Runtime.InteropServices._TypeBuilder.GetTypeInfoCount(out uint pcTInfo); // 0x00276C44
	private void System.Runtime.InteropServices._TypeBuilder.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x00276CCC
	protected override TypeAttributes GetAttributeFlagsImpl(); // 0x00276D54
	private void setup_internal_class(TypeBuilder tb); // 0x00276580
	private void create_internal_class(TypeBuilder tb); // 0x00276D5C
	private void setup_generic_class(); // 0x00276D60
	private void create_generic_class(); // 0x00276D64
	private EventInfo get_event_info(EventBuilder eb); // 0x00276D68
	private string GetFullName(); // 0x00276A18
	public void AddDeclarativeSecurity(SecurityAction action, PermissionSet pset); // 0x00277078
	public void AddInterfaceImplementation(Type interfaceType); // 0x0027707C
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x00277388
	public override bool IsDefined(Type attributeType, bool inherit); // 0x00277858
	public override object[] GetCustomAttributes(bool inherit); // 0x0027794C
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00277990
	public TypeBuilder DefineNestedType(string name); // 0x002779DC
	public TypeBuilder DefineNestedType(string name, TypeAttributes attr); // 0x00277A6C
	public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent); // 0x00277AD8
	private TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent, Type[] interfaces, PackingSize packSize, int typeSize); // 0x00277B00
	public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent, Type[] interfaces); // 0x00277A44
	public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent, int typeSize); // 0x00277E14
	public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent, PackingSize packSize); // 0x00277E40
	public ConstructorBuilder DefineConstructor(MethodAttributes attributes, CallingConventions callingConvention, Type[] parameterTypes); // 0x00277E68
	public ConstructorBuilder DefineConstructor(MethodAttributes attributes, CallingConventions callingConvention, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers); // 0x00277E8C
	public ConstructorBuilder DefineDefaultConstructor(MethodAttributes attributes); // 0x00278084
	private void append_method(MethodBuilder mb); // 0x00278380
	public MethodBuilder DefineMethod(string name, MethodAttributes attributes, Type returnType, Type[] parameterTypes); // 0x002784C0
	public MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes); // 0x002784F8
	public MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers); // 0x00278534
	public MethodBuilder DefinePInvokeMethod(string name, string dllName, string entryName, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, CallingConvention nativeCallConv, CharSet nativeCharSet); // 0x002786E8
	public MethodBuilder DefinePInvokeMethod(string name, string dllName, string entryName, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers, CallingConvention nativeCallConv, CharSet nativeCharSet); // 0x00278740
	public MethodBuilder DefinePInvokeMethod(string name, string dllName, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, CallingConvention nativeCallConv, CharSet nativeCharSet); // 0x00278940
	public MethodBuilder DefineMethod(string name, MethodAttributes attributes); // 0x00278994
	public MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callingConvention); // 0x002789CC
	public void DefineMethodOverride(MethodInfo methodInfoBody, MethodInfo methodInfoDeclaration); // 0x00278A00
	public FieldBuilder DefineField(string fieldName, Type type, FieldAttributes attributes); // 0x00278B84
	public FieldBuilder DefineField(string fieldName, Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers, FieldAttributes attributes); // 0x00278BAC
	public PropertyBuilder DefineProperty(string name, PropertyAttributes attributes, Type returnType, Type[] parameterTypes); // 0x00278EC4
	public PropertyBuilder DefineProperty(string name, PropertyAttributes attributes, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers); // 0x00278EF8
	public ConstructorBuilder DefineTypeInitializer(); // 0x002791C8
	private Type create_runtime_class(TypeBuilder tb); // 0x002791F8
	private bool is_nested_in(Type t); // 0x002791FC
	private bool has_ctor_method(); // 0x0027924C
	public Type CreateType(); // 0x002793B8
	internal void GenerateDebugInfo(ISymbolWriter symbolWriter); // 0x0027A014
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr); // 0x0027A2FC
	internal ConstructorInfo[] GetConstructorsInternal(BindingFlags bindingAttr); // 0x0027A3D0
	public override Type GetElementType(); // 0x0027A590
	public override EventInfo GetEvent(string name, BindingFlags bindingAttr); // 0x0027A618
	public override EventInfo[] GetEvents(); // 0x0027A664
	public override EventInfo[] GetEvents(BindingFlags bindingAttr); // 0x0027A66C
	internal EventInfo[] GetEvents_internal(BindingFlags bindingAttr); // 0x0027A74C
	public override FieldInfo GetField(string name, BindingFlags bindingAttr); // 0x0027A970
	public override FieldInfo[] GetFields(BindingFlags bindingAttr); // 0x0027AAFC
	public override Type GetInterface(string name, bool ignoreCase); // 0x0027ACEC
	public override Type[] GetInterfaces(); // 0x0027AD38
	public override MemberInfo[] GetMember(string name, MemberTypes type, BindingFlags bindingAttr); // 0x0027AE40
	public override MemberInfo[] GetMembers(BindingFlags bindingAttr); // 0x0027AEA0
	private MethodInfo[] GetMethodsByName(string name, BindingFlags bindingAttr, bool ignoreCase, Type reflected_type); // 0x0027AEE4
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr); // 0x0027B3F0
	protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x0027B414
	public override Type GetNestedType(string name, BindingFlags bindingAttr); // 0x0027B898
	public override Type[] GetNestedTypes(BindingFlags bindingAttr); // 0x0027B9F0
	public override PropertyInfo[] GetProperties(BindingFlags bindingAttr); // 0x0027BC14
	protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x0027BE48
	protected override bool HasElementTypeImpl(); // 0x0027BF30
	public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters); // 0x0027BF48
	protected override bool IsArrayImpl(); // 0x0027BFE0
	protected override bool IsByRefImpl(); // 0x0027BFE8
	protected override bool IsCOMObjectImpl(); // 0x0027BFF0
	protected override bool IsPointerImpl(); // 0x0027BFFC
	protected override bool IsPrimitiveImpl(); // 0x0027C004
	protected override bool IsValueTypeImpl(); // 0x0027C00C
	public override Type MakeArrayType(); // 0x0027C1AC
	public override Type MakeArrayType(int rank); // 0x0027C224
	public override Type MakeByRefType(); // 0x0027C2EC
	public override Type MakeGenericType(Type[] typeArguments); // 0x0027C360
	public override Type MakePointerType(); // 0x0027C368
	internal void SetCharSet(TypeAttributes ta); // 0x0027C418
	public void SetCustomAttribute(CustomAttributeBuilder customBuilder); // 0x0027C420
	public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute); // 0x0027CE9C
	public EventBuilder DefineEvent(string name, EventAttributes attributes, Type eventtype); // 0x0027CF24
	public FieldBuilder DefineInitializedData(string name, byte[] data, FieldAttributes attributes); // 0x0027D188
	public FieldBuilder DefineUninitializedData(string name, int size, FieldAttributes attributes); // 0x0027D284
	public void SetParent(Type parent); // 0x00279EA4
	internal int get_next_table_index(object obj, int table, bool inc); // 0x0027D560
	public override InterfaceMapping GetInterfaceMap(Type interfaceType); // 0x0027D5B0
	private Exception not_supported(); // 0x0027BEB0
	private void check_not_created(); // 0x002772DC
	private void check_created(); // 0x00276FD0
	private void check_name(string argName, string name); // 0x00276890
	public override string ToString(); // 0x0027D680
	public override bool IsAssignableFrom(Type c); // 0x0027D688
	public override bool IsSubclassOf(Type c); // 0x0027D690
	internal bool IsAssignableTo(Type c); // 0x0027D698
	public bool IsCreated(); // 0x0027D888
	public override Type[] GetGenericArguments(); // 0x0027D898
	public override Type GetGenericTypeDefinition(); // 0x0027D940
	public GenericTypeParameterBuilder[] DefineGenericParameters(string[] names); // 0x0027DA3C
	public static ConstructorInfo GetConstructor(Type type, ConstructorInfo constructor); // 0x0027DCA4
	private static bool IsValidGetMethodType(Type type); // 0x0027DDC4
	public static MethodInfo GetMethod(Type type, MethodInfo method); // 0x002732B8
	public static FieldInfo GetField(Type type, FieldInfo field); // 0x0027DF68
}

// Namespace: System.Reflection.Emit
[Serializable]
public struct TypeToken // TypeDefIndex: 545
{
	// Fields
	internal int tokValue; // 0x08
	public static readonly TypeToken Empty; // 0x00

	// Properties
	public int Token { get; } // 0x0008C924 

	// Constructors
	internal TypeToken(int val); // 0x0008C8F8
	private static TypeToken(); // 0x0027E044

	// Methods
	public override bool Equals(object obj); // 0x0008C900
	public bool Equals(TypeToken obj); // 0x0008C908
	public override int GetHashCode(); // 0x0008C91C
	public static bool op_Equality(TypeToken a, TypeToken b); // 0x0027E164
	public static bool op_Inequality(TypeToken a, TypeToken b); // 0x0027E1FC
}

// Namespace: System.Reflection.Emit
[Serializable]
public sealed class UnmanagedMarshal // TypeDefIndex: 546
{
	// Fields
	private int count; // 0x08
	private UnmanagedType t; // 0x0C
	private UnmanagedType tbase; // 0x10
	private string guid; // 0x14
	private string mcookie; // 0x18
	private string marshaltype; // 0x1C
	private Type marshaltyperef; // 0x20
	private int param_num; // 0x24
	private bool has_size; // 0x28

	// Properties
	public UnmanagedType BaseType { get; } // 0x0027E2F4 
	public int ElementCount { get; } // 0x0027E398 
	public UnmanagedType GetUnmanagedType { get; } // 0x0027E3A0 
	public Guid IIDGuid { get; } // 0x0027E3A8 

	// Constructors
	private UnmanagedMarshal(UnmanagedType maint, int cnt); // 0x0027E298
	private UnmanagedMarshal(UnmanagedType maint, UnmanagedType elemt); // 0x0027E2C4

	// Methods
	public static UnmanagedMarshal DefineByValArray(int elemCount); // 0x0027E3C8
	public static UnmanagedMarshal DefineByValTStr(int elemCount); // 0x0027E448
	public static UnmanagedMarshal DefineLPArray(UnmanagedType elemType); // 0x0027E4C8
	public static UnmanagedMarshal DefineSafeArray(UnmanagedType elemType); // 0x0027E54C
	public static UnmanagedMarshal DefineUnmanagedMarshal(UnmanagedType unmanagedType); // 0x0027E5D0
	public static UnmanagedMarshal DefineCustom(Type typeref, string cookie, string mtype, Guid id); // 0x0027E650
	internal static UnmanagedMarshal DefineLPArrayInternal(UnmanagedType elemType, int sizeConst, int sizeParamIndex); // 0x0027E818
	internal MarshalAsAttribute ToMarshalAsAttribute(); // 0x0027E8E4
}

// Namespace: System.Reflection
[Serializable]
public sealed class AmbiguousMatchException : SystemException // TypeDefIndex: 547
{
	// Constructors
	public AmbiguousMatchException(); // 0x001B2370
	public AmbiguousMatchException(string message); // 0x001B23D8
	public AmbiguousMatchException(string message, Exception inner); // 0x001B23E0
	internal AmbiguousMatchException(SerializationInfo info, StreamingContext context); // 0x001B23E8

}

// Namespace: System.Reflection
[Serializable]
public class Assembly : ICustomAttributeProvider, _Assembly // TypeDefIndex: 548
{
	// Fields
	private IntPtr _mono_assembly; // 0x08
	private ResolveEventHolder resolve_event_holder; // 0x0C
	private Evidence _evidence; // 0x10
	internal PermissionSet _minimum; // 0x14
	internal PermissionSet _optional; // 0x18
	internal PermissionSet _refuse; // 0x1C
	private PermissionSet _granted; // 0x20
	private PermissionSet _denied; // 0x24
	private bool fromByteArray; // 0x28
	private string assemblyName; // 0x2C

	// Properties
	public virtual string CodeBase { get; } // 0x001B2604 
	public virtual string EscapedCodeBase { get; } // 0x001B260C 
	public virtual string FullName { get; } // 0x001B2614 
	public virtual MethodInfo EntryPoint { get; } // 0x001B2624 
	public virtual Evidence Evidence { get; } // 0x001B2628 
	public bool GlobalAssemblyCache { get; } // 0x001B26BC 
	internal bool FromByteArray { set; } // 0x001B26C0
	public virtual string Location { get; } // 0x001B26C8 
	public virtual string ImageRuntimeVersion { get; } // 0x001B2770 
	public long HostContext { get; } // 0x001B4E84 
	public Module ManifestModule { get; } // 0x001B4E90 
	public virtual bool ReflectionOnly { get; } // 0x001B4EA8 
	internal PermissionSet GrantedPermissionSet { get; } // 0x001B5324 
	internal PermissionSet DeniedPermissionSet { get; } // 0x001B553C 

	// Events
	public event ModuleResolveEventHandler ModuleResolve {
		add; // 0x001B2470
		remove; // 0x001B2530
	}

	// Constructors
	internal Assembly(); // 0x001B2408

	// Methods
	private string get_code_base(bool escaped); // 0x001B25F0
	private string get_fullname(); // 0x001B25F4
	private string get_location(); // 0x001B25F8
	private string InternalImageRuntimeVersion(); // 0x001B25FC
	private string GetCodeBase(bool escaped); // 0x001B2600
	internal Evidence UnprotectedGetEvidence(); // 0x001B262C
	private bool get_global_assembly_cache(); // 0x001B26B8
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x001B2774
	public virtual bool IsDefined(Type attributeType, bool inherit); // 0x001B2850
	public virtual object[] GetCustomAttributes(bool inherit); // 0x001B28E4
	public virtual object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x001B2970
	private object GetFilesInternal(string name, bool getResourceModules); // 0x001B2A04
	public virtual FileStream[] GetFiles(); // 0x001B2A08
	public virtual FileStream[] GetFiles(bool getResourceModules); // 0x001B2A1C
	public virtual FileStream GetFile(string name); // 0x001B2DD0
	internal IntPtr GetManifestResourceInternal(string name, out int size, out Module module); // 0x001B2F5C
	public virtual Stream GetManifestResourceStream(string name); // 0x001B2F60
	public virtual Stream GetManifestResourceStream(Type type, string name); // 0x001B336C
	internal virtual Type[] GetTypes(bool exportedOnly); // 0x001B34BC
	public virtual Type[] GetTypes(); // 0x001B34C0
	public virtual Type[] GetExportedTypes(); // 0x001B34D4
	public virtual Type GetType(string name, bool throwOnError); // 0x001B34E8
	public virtual Type GetType(string name); // 0x001B362C
	internal Type InternalGetType(Module module, string name, bool throwOnError, bool ignoreCase); // 0x001B364C
	public Type GetType(string name, bool throwOnError, bool ignoreCase); // 0x001B3504
	internal static void InternalGetAssemblyName(string assemblyFile, AssemblyName aname); // 0x001B366C
	private static void FillName(Assembly ass, AssemblyName aname); // 0x001B3670
	public virtual AssemblyName GetName(bool copiedName); // 0x001B3674
	public virtual AssemblyName GetName(); // 0x001B371C
	internal virtual AssemblyName UnprotectedGetName(); // 0x001B3730
	public override string ToString(); // 0x001B37B8
	public static string CreateQualifiedName(string assemblyName, string typeName); // 0x001B37E0
	public static Assembly GetAssembly(Type type); // 0x001B387C
	public static Assembly GetEntryAssembly(); // 0x001B393C
	public Assembly GetSatelliteAssembly(CultureInfo culture); // 0x001B3940
	public Assembly GetSatelliteAssembly(CultureInfo culture, Version version); // 0x001B3CB8
	internal Assembly GetSatelliteAssemblyNoThrow(CultureInfo culture, Version version); // 0x001B3CD4
	private Assembly GetSatelliteAssembly(CultureInfo culture, Version version, bool throwOnError); // 0x001B3960
	private static Assembly LoadFrom(string assemblyFile, bool refonly); // 0x001B3DA8
	public static Assembly LoadFrom(string assemblyFile); // 0x001B3DA0
	public static Assembly LoadFrom(string assemblyFile, Evidence securityEvidence); // 0x001B3DAC
	public static Assembly LoadFrom(string assemblyFile, Evidence securityEvidence, byte[] hashValue, AssemblyHashAlgorithm hashAlgorithm); // 0x001B3DB4
	public static Assembly LoadFile(string path, Evidence securityEvidence); // 0x001B3F38
	public static Assembly LoadFile(string path); // 0x001B409C
	public static Assembly Load(string assemblyString); // 0x001B40A0
	public static Assembly Load(string assemblyString, Evidence assemblySecurity); // 0x001B40DC
	public static Assembly Load(AssemblyName assemblyRef); // 0x001B4120
	public static Assembly Load(AssemblyName assemblyRef, Evidence assemblySecurity); // 0x001B415C
	public static Assembly Load(byte[] rawAssembly); // 0x001B41A0
	public static Assembly Load(byte[] rawAssembly, byte[] rawSymbolStore); // 0x001B41DC
	public static Assembly Load(byte[] rawAssembly, byte[] rawSymbolStore, Evidence securityEvidence); // 0x001B4220
	public static Assembly ReflectionOnlyLoad(byte[] rawAssembly); // 0x001B4278
	public static Assembly ReflectionOnlyLoad(string assemblyString); // 0x001B42CC
	public static Assembly ReflectionOnlyLoadFrom(string assemblyFile); // 0x001B431C
	public static Assembly LoadWithPartialName(string partialName); // 0x001B43D4
	public Module LoadModule(string moduleName, byte[] rawModule); // 0x001B43E8
	public Module LoadModule(string moduleName, byte[] rawModule, byte[] rawSymbolStore); // 0x001B4470
	private static Assembly load_with_partial_name(string name, Evidence e); // 0x001B44F8
	public static Assembly LoadWithPartialName(string partialName, Evidence securityEvidence); // 0x001B43E0
	internal static Assembly LoadWithPartialName(string partialName, Evidence securityEvidence, bool oldBehavior); // 0x001B44FC
	public object CreateInstance(string typeName); // 0x001B45E0
	public object CreateInstance(string typeName, bool ignoreCase); // 0x001B45E8
	public object CreateInstance(string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes); // 0x001B4750
	public Module[] GetLoadedModules(); // 0x001B48D4
	public Module[] GetLoadedModules(bool getResourceModules); // 0x001B48DC
	public Module[] GetModules(); // 0x001B4AC8
	public Module GetModule(string name); // 0x001B4AD0
	internal virtual Module[] GetModulesInternal(); // 0x001B4CD4
	public Module[] GetModules(bool getResourceModules); // 0x001B48E0
	internal string[] GetNamespaces(); // 0x001B4CD8
	public virtual string[] GetManifestResourceNames(); // 0x001B4CDC
	public static Assembly GetExecutingAssembly(); // 0x001B4CE0
	public static Assembly GetCallingAssembly(); // 0x001B4D3C
	public AssemblyName[] GetReferencedAssemblies(); // 0x001B4D40
	private bool GetManifestResourceInfoInternal(string name, ManifestResourceInfo info); // 0x001B4D44
	public virtual ManifestResourceInfo GetManifestResourceInfo(string resourceName); // 0x001B4D48
	internal static int MonoDebugger_GetMethodToken(MethodBase method); // 0x001B4E80
	internal virtual Module GetManifestModule(); // 0x001B4EA0
	internal Module GetManifestModuleInternal(); // 0x001B4EA4
	internal void Resolve(); // 0x001B4EAC
	internal static bool LoadPermissions(Assembly a, IntPtr minimum, int minLength, IntPtr optional, int optLength, IntPtr refused, int refLength); // 0x001B5754
	private void LoadAssemblyPermissions(); // 0x001B5070
	virtual Type System.Runtime.InteropServices._Assembly.GetType(); // 0x001B5758
}

// Namespace: 
internal class ResolveEventHolder // TypeDefIndex: 549
{
	// Fields
	private ModuleResolveEventHandler ModuleResolve; // 0x08

	// Events
	public event ModuleResolveEventHandler ModuleResolve {
		add; // 0x001B24A0
		remove; // 0x001B2560
	}

	// Constructors
	public ResolveEventHolder(); // 0x001B246C

}

// Namespace: 
private class ResourceCloseHandler // TypeDefIndex: 550
{
	// Fields
	private Module module; // 0x08

	// Constructors
	public ResourceCloseHandler(Module module); // 0x001B3364

	// Methods
	public void OnClose(object sender, EventArgs e); // 0x001B575C
}

// Namespace: System.Reflection
public sealed class AssemblyAlgorithmIdAttribute : Attribute // TypeDefIndex: 551
{
	// Fields
	private uint id; // 0x08

	// Properties
	public uint AlgorithmId { get; } // 0x001B57A8 

	// Constructors
	public AssemblyAlgorithmIdAttribute(AssemblyHashAlgorithm algorithmId); // 0x001B5768
	public AssemblyAlgorithmIdAttribute(uint algorithmId); // 0x001B5788

}

// Namespace: System.Reflection
public sealed class AssemblyCompanyAttribute : Attribute // TypeDefIndex: 552
{
	// Fields
	private string name; // 0x08

	// Properties
	public string Company { get; } // 0x001B57D0 

	// Constructors
	public AssemblyCompanyAttribute(string company); // 0x001B57B0

}

// Namespace: System.Reflection
public sealed class AssemblyConfigurationAttribute : Attribute // TypeDefIndex: 553
{
	// Fields
	private string name; // 0x08

	// Properties
	public string Configuration { get; } // 0x001B57F8 

	// Constructors
	public AssemblyConfigurationAttribute(string configuration); // 0x001B57D8

}

// Namespace: System.Reflection
public sealed class AssemblyCopyrightAttribute : Attribute // TypeDefIndex: 554
{
	// Fields
	private string name; // 0x08

	// Properties
	public string Copyright { get; } // 0x001B5820 

	// Constructors
	public AssemblyCopyrightAttribute(string copyright); // 0x001B5800

}

// Namespace: System.Reflection
public sealed class AssemblyDefaultAliasAttribute : Attribute // TypeDefIndex: 555
{
	// Fields
	private string name; // 0x08

	// Properties
	public string DefaultAlias { get; } // 0x001B5870 

	// Constructors
	public AssemblyDefaultAliasAttribute(string defaultAlias); // 0x001B5850

}

// Namespace: System.Reflection
public sealed class AssemblyDelaySignAttribute : Attribute // TypeDefIndex: 556
{
	// Fields
	private bool delay; // 0x08

	// Properties
	public bool DelaySign { get; } // 0x001B5898 

	// Constructors
	public AssemblyDelaySignAttribute(bool delaySign); // 0x001B5878

}

// Namespace: System.Reflection
public sealed class AssemblyDescriptionAttribute : Attribute // TypeDefIndex: 557
{
	// Fields
	private string name; // 0x08

	// Properties
	public string Description { get; } // 0x001B58C0 

	// Constructors
	public AssemblyDescriptionAttribute(string description); // 0x001B58A0

}

// Namespace: System.Reflection
public sealed class AssemblyFileVersionAttribute : Attribute // TypeDefIndex: 558
{
	// Fields
	private string name; // 0x08

	// Properties
	public string Version { get; } // 0x001B5984 

	// Constructors
	public AssemblyFileVersionAttribute(string version); // 0x001B58C8

}

// Namespace: System.Reflection
public sealed class AssemblyFlagsAttribute : Attribute // TypeDefIndex: 559
{
	// Fields
	private uint flags; // 0x08

	// Properties
	public uint Flags { get; } // 0x001B59EC 
	public int AssemblyFlags { get; } // 0x001B59F4 

	// Constructors
	public AssemblyFlagsAttribute(uint flags); // 0x001B598C
	public AssemblyFlagsAttribute(int assemblyFlags); // 0x001B59AC
	public AssemblyFlagsAttribute(AssemblyNameFlags assemblyFlags); // 0x001B59CC

}

// Namespace: System.Reflection
public sealed class AssemblyInformationalVersionAttribute : Attribute // TypeDefIndex: 560
{
	// Fields
	private string name; // 0x08

	// Properties
	public string InformationalVersion { get; } // 0x001B5A1C 

	// Constructors
	public AssemblyInformationalVersionAttribute(string informationalVersion); // 0x001B59FC

}

// Namespace: System.Reflection
public sealed class AssemblyKeyFileAttribute : Attribute // TypeDefIndex: 561
{
	// Fields
	private string name; // 0x08

	// Properties
	public string KeyFile { get; } // 0x001B5A44 

	// Constructors
	public AssemblyKeyFileAttribute(string keyFile); // 0x001B5A24

}

// Namespace: System.Reflection
public sealed class AssemblyKeyNameAttribute : Attribute // TypeDefIndex: 562
{
	// Fields
	private string name; // 0x08

	// Properties
	public string KeyName { get; } // 0x001B5A6C 

	// Constructors
	public AssemblyKeyNameAttribute(string keyName); // 0x001B5A4C

}

// Namespace: System.Reflection
[Serializable]
public sealed class AssemblyName : ICloneable, ISerializable, _AssemblyName, IDeserializationCallback // TypeDefIndex: 563
{
	// Fields
	private string name; // 0x08
	private string codebase; // 0x0C
	private int major; // 0x10
	private int minor; // 0x14
	private int build; // 0x18
	private int revision; // 0x1C
	private CultureInfo cultureinfo; // 0x20
	private AssemblyNameFlags flags; // 0x24
	private AssemblyHashAlgorithm hashalg; // 0x28
	private StrongNameKeyPair keypair; // 0x2C
	private byte[] publicKey; // 0x30
	private byte[] keyToken; // 0x34
	private AssemblyVersionCompatibility versioncompat; // 0x38
	private Version version; // 0x3C
	private ProcessorArchitecture processor_architecture; // 0x40

	// Properties
	public ProcessorArchitecture ProcessorArchitecture { get; set; } // 0x001B6368 0x001B6370
	public string Name { get; set; } // 0x001B6378 0x001B6380
	public string CodeBase { get; set; } // 0x001B6388 0x001B6390
	public string EscapedCodeBase { get; } // 0x001B6398 
	public CultureInfo CultureInfo { get; set; } // 0x001B644C 0x001B6454
	public AssemblyNameFlags Flags { get; set; } // 0x001B645C 0x001B6464
	public string FullName { get; } // 0x001B646C 
	public AssemblyHashAlgorithm HashAlgorithm { get; set; } // 0x001B6960 0x001B6968
	public StrongNameKeyPair KeyPair { get; set; } // 0x001B6970 0x001B6978
	public Version Version { get; set; } // 0x001B6980 0x001B3CF0
	public AssemblyVersionCompatibility VersionCompatibility { get; set; } // 0x001B6988 0x001B6990
	private bool IsPublicKeyValid { get; } // 0x001B6ACC 

	// Constructors
	public AssemblyName(); // 0x001B37AC
	public AssemblyName(string assemblyName); // 0x001B5A74
	internal AssemblyName(SerializationInfo si, StreamingContext sc); // 0x001B5BCC

	// Methods
	private void System.Runtime.InteropServices._AssemblyName.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x001B6148
	private void System.Runtime.InteropServices._AssemblyName.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x001B61D0
	private void System.Runtime.InteropServices._AssemblyName.GetTypeInfoCount(out uint pcTInfo); // 0x001B6258
	private void System.Runtime.InteropServices._AssemblyName.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x001B62E0
	private static bool ParseName(AssemblyName aname, string assemblyName); // 0x001B5BC8
	public override string ToString(); // 0x001B6998
	public byte[] GetPublicKey(); // 0x001B69BC
	public byte[] GetPublicKeyToken(); // 0x001B69C4
	private byte[] InternalGetPublicKeyToken(); // 0x001B685C
	private byte[] ComputePublicKeyToken(); // 0x001B6D80
	public static bool ReferenceMatchesDefinition(AssemblyName reference, AssemblyName definition); // 0x001B6E74
	public void SetPublicKey(byte[] publicKey); // 0x001B6FEC
	public void SetPublicKeyToken(byte[] publicKeyToken); // 0x001B7008
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x001B7010
	public object Clone(); // 0x001B72E4
	public void OnDeserialization(object sender); // 0x001B74DC
	public static AssemblyName GetAssemblyName(string assemblyFile); // 0x001B74E4
}

// Namespace: System.Reflection
[Serializable]
public enum AssemblyNameFlags // TypeDefIndex: 564
{
	None = 0,
	PublicKey = 1,
	Retargetable = 256,
	EnableJITcompileOptimizer = 16384,
	EnableJITcompileTracking = 32768
}

// Namespace: System.Reflection
public class AssemblyNameProxy : MarshalByRefObject // TypeDefIndex: 565
{
	// Constructors
	public AssemblyNameProxy(); // 0x001B75F4

	// Methods
	public AssemblyName GetAssemblyName(string assemblyFile); // 0x001B75FC
}

// Namespace: System.Reflection
public sealed class AssemblyProductAttribute : Attribute // TypeDefIndex: 566
{
	// Fields
	private string name; // 0x08

	// Properties
	public string Product { get; } // 0x001B7624 

	// Constructors
	public AssemblyProductAttribute(string product); // 0x001B7604

}

// Namespace: System.Reflection
public sealed class AssemblyTitleAttribute : Attribute // TypeDefIndex: 567
{
	// Fields
	private string name; // 0x08

	// Properties
	public string Title { get; } // 0x001B764C 

	// Constructors
	public AssemblyTitleAttribute(string title); // 0x001B762C

}

// Namespace: System.Reflection
public sealed class AssemblyTrademarkAttribute : Attribute // TypeDefIndex: 568
{
	// Fields
	private string name; // 0x08

	// Properties
	public string Trademark { get; } // 0x001B7674 

	// Constructors
	public AssemblyTrademarkAttribute(string trademark); // 0x001B7654

}

// Namespace: System.Reflection
[Serializable]
public abstract class Binder // TypeDefIndex: 569
{
	// Fields
	private static Binder default_binder; // 0x00

	// Properties
	internal static Binder DefaultBinder { get; } // 0x001B779C 

	// Constructors
	protected Binder(); // 0x001B76A4
	private static Binder(); // 0x001B76A8

	// Methods
	public abstract FieldInfo BindToField(BindingFlags bindingAttr, FieldInfo[] match, object value, CultureInfo culture);
	public abstract MethodBase BindToMethod(BindingFlags bindingAttr, MethodBase[] match, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] names, out object state);
	public abstract object ChangeType(object value, Type type, CultureInfo culture);
	public abstract void ReorderArgumentArray(object[] args, object state);
	public abstract MethodBase SelectMethod(BindingFlags bindingAttr, MethodBase[] match, Type[] types, ParameterModifier[] modifiers);
	public abstract PropertyInfo SelectProperty(BindingFlags bindingAttr, PropertyInfo[] match, Type returnType, Type[] indexes, ParameterModifier[] modifiers);
	internal static bool ConvertArgs(Binder binder, object[] args, ParameterInfo[] pinfo, CultureInfo culture); // 0x001B7828
	internal static int GetDerivedLevel(Type type); // 0x001B7A94
	internal static MethodBase FindMostDerivedMatch(MethodBase[] match); // 0x001B7AF8
}

// Namespace: 
internal sealed class Default : Binder // TypeDefIndex: 570
{
	// Constructors
	public Default(); // 0x001B7724

	// Methods
	public override FieldInfo BindToField(BindingFlags bindingAttr, FieldInfo[] match, object value, CultureInfo culture); // 0x001B7E3C
	public override MethodBase BindToMethod(BindingFlags bindingAttr, MethodBase[] match, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] names, out object state); // 0x001B8808
	private void ReorderParameters(string[] names, object[] args, MethodBase selected); // 0x001B8FDC
	private static bool IsArrayAssignable(Type object_type, Type target_type); // 0x001B92C0
	public override object ChangeType(object value, Type type, CultureInfo culture); // 0x001B9398
	public override void ReorderArgumentArray(object[] args, object state); // 0x001B97E4
	private static bool check_type(Type from, Type to); // 0x001B7F88
	private static bool check_arguments(Type[] types, ParameterInfo[] args, bool allowByRefMatch); // 0x001B97E8
	public override MethodBase SelectMethod(BindingFlags bindingAttr, MethodBase[] match, Type[] types, ParameterModifier[] modifiers); // 0x001B99A4
	private MethodBase SelectMethod(BindingFlags bindingAttr, MethodBase[] match, Type[] types, ParameterModifier[] modifiers, bool allowByRefMatch); // 0x001B8A54
	private MethodBase GetBetterMethod(MethodBase m1, MethodBase m2, Type[] types); // 0x001B99C4
	private int CompareCloserType(Type t1, Type t2); // 0x001B9DC0
	public override PropertyInfo SelectProperty(BindingFlags bindingAttr, PropertyInfo[] match, Type returnType, Type[] indexes, ParameterModifier[] modifiers); // 0x001BA040
	private static int check_arguments_with_score(Type[] types, ParameterInfo[] args); // 0x001BA314
	private static int check_type_with_score(Type from, Type to); // 0x001BA404
}

// Namespace: System.Reflection
[Serializable]
public enum BindingFlags // TypeDefIndex: 571
{
	Default = 0,
	IgnoreCase = 1,
	DeclaredOnly = 2,
	Instance = 4,
	Static = 8,
	Public = 16,
	NonPublic = 32,
	FlattenHierarchy = 64,
	InvokeMethod = 256,
	CreateInstance = 512,
	GetField = 1024,
	SetField = 2048,
	GetProperty = 4096,
	SetProperty = 8192,
	PutDispProperty = 16384,
	PutRefDispProperty = 32768,
	ExactBinding = 65536,
	SuppressChangeType = 131072,
	OptionalParamBinding = 262144,
	IgnoreReturn = 16777216
}

// Namespace: System.Reflection
[Serializable]
public enum CallingConventions // TypeDefIndex: 572
{
	Standard = 1,
	VarArgs = 2,
	Any = 3,
	HasThis = 32,
	ExplicitThis = 64
}

// Namespace: System.Reflection
[Serializable]
public abstract class ConstructorInfo : MethodBase, _ConstructorInfo // TypeDefIndex: 573
{
	// Fields
	public static readonly string ConstructorName; // 0x00
	public static readonly string TypeConstructorName; // 0x04

	// Properties
	public override MemberTypes MemberType { get; } // 0x001BAC44 

	// Constructors
	protected ConstructorInfo(); // 0x001BA874
	private static ConstructorInfo(); // 0x001BA87C

	// Methods
	private void System.Runtime.InteropServices._ConstructorInfo.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x001BA90C
	private void System.Runtime.InteropServices._ConstructorInfo.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x001BA994
	private void System.Runtime.InteropServices._ConstructorInfo.GetTypeInfoCount(out uint pcTInfo); // 0x001BAA1C
	private void System.Runtime.InteropServices._ConstructorInfo.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x001BAAA4
	private object System.Runtime.InteropServices._ConstructorInfo.Invoke_2(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x001BAB2C
	private object System.Runtime.InteropServices._ConstructorInfo.Invoke_3(object obj, object[] parameters); // 0x001BAB64
	private object System.Runtime.InteropServices._ConstructorInfo.Invoke_4(BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x001BAB6C
	private object System.Runtime.InteropServices._ConstructorInfo.Invoke_5(object[] parameters); // 0x001BAB98
	public object Invoke(object[] parameters); // 0x001BAB9C
	public abstract object Invoke(BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture);
	virtual Type System.Runtime.InteropServices._ConstructorInfo.GetType(); // 0x001BAC4C
}

// Namespace: System.Reflection
[Serializable]
public sealed class CustomAttributeData // TypeDefIndex: 574
{
	// Fields
	private ConstructorInfo ctorInfo; // 0x08
	private IList`1<CustomAttributeTypedArgument> ctorArgs; // 0x0C
	private IList`1<CustomAttributeNamedArgument> namedArgs; // 0x10

	// Properties
	public ConstructorInfo Constructor { get; } // 0x001BAD54 
	public IList`1<CustomAttributeTypedArgument> ConstructorArguments { get; } // 0x001BAD5C 
	public IList`1<CustomAttributeNamedArgument> NamedArguments { get; } // 0x001BAD64 

	// Constructors
	internal CustomAttributeData(ConstructorInfo ctorInfo, object[] ctorArgs, object[] namedArgs); // 0x001BAC50

	// Methods
	public static IList`1<CustomAttributeData> GetCustomAttributes(Assembly target); // 0x001BAD6C
	public static IList`1<CustomAttributeData> GetCustomAttributes(MemberInfo target); // 0x001BADF0
	public static IList`1<CustomAttributeData> GetCustomAttributes(Module target); // 0x001BAE74
	public static IList`1<CustomAttributeData> GetCustomAttributes(ParameterInfo target); // 0x001BAEF8
	public override string ToString(); // 0x001BAF7C
	private static T[] UnboxValues(object[] values);
	public override bool Equals(object obj); // 0x001BBA4C
	public override int GetHashCode(); // 0x001BC454
}

// Namespace: System.Reflection
[Serializable]
public class CustomAttributeFormatException : FormatException // TypeDefIndex: 575
{
	// Constructors
	public CustomAttributeFormatException(); // 0x001BC85C
	public CustomAttributeFormatException(string message); // 0x001BC8D0
	public CustomAttributeFormatException(string message, Exception inner); // 0x001BC8D8
	protected CustomAttributeFormatException(SerializationInfo info, StreamingContext context); // 0x001BC8E0

}

// Namespace: System.Reflection
[Serializable]
public struct CustomAttributeNamedArgument // TypeDefIndex: 576
{
	// Fields
	private CustomAttributeTypedArgument typedArgument; // 0x08
	private MemberInfo memberInfo; // 0x10

	// Properties
	public MemberInfo MemberInfo { get; } // 0x0008B39C 
	public CustomAttributeTypedArgument TypedValue { get; } // 0x0008B3A4 

	// Constructors
	internal CustomAttributeNamedArgument(MemberInfo memberInfo, object typedArgument); // 0x0008B394

	// Methods
	public override string ToString(); // 0x0008B3B8
	public override bool Equals(object obj); // 0x0008B3C0
	public override int GetHashCode(); // 0x0008B3C8
	public static bool op_Equality(CustomAttributeNamedArgument left, CustomAttributeNamedArgument right); // 0x001BC9B8
	public static bool op_Inequality(CustomAttributeNamedArgument left, CustomAttributeNamedArgument right); // 0x001BCA48
}

// Namespace: System.Reflection
[Serializable]
public struct CustomAttributeTypedArgument // TypeDefIndex: 577
{
	// Fields
	private Type argumentType; // 0x08
	private object value; // 0x0C

	// Properties
	public Type ArgumentType { get; } // 0x0008B434 
	public object Value { get; } // 0x0008B43C 

	// Constructors
	internal CustomAttributeTypedArgument(Type argumentType, object value); // 0x0008B42C

	// Methods
	public override string ToString(); // 0x0008B444
	public override bool Equals(object obj); // 0x0008B44C
	public override int GetHashCode(); // 0x0008B454
	public static bool op_Equality(CustomAttributeTypedArgument left, CustomAttributeTypedArgument right); // 0x001BCCD0
	public static bool op_Inequality(CustomAttributeTypedArgument left, CustomAttributeTypedArgument right); // 0x001BCD5C
}

// Namespace: System.Reflection
[Serializable]
public enum EventAttributes // TypeDefIndex: 578
{
	None = 0,
	SpecialName = 512,
	ReservedMask = 1024,
	RTSpecialName = 1024
}

// Namespace: System.Reflection
[Serializable]
public abstract class EventInfo : MemberInfo, _EventInfo // TypeDefIndex: 579
{
	// Fields
	private AddEventAdapter cached_add_event; // 0x08

	// Properties
	public abstract EventAttributes Attributes { get; }
	public Type EventHandlerType { get; } // 0x0027EC1C 
	public bool IsMulticast { get; } // 0x0027ECB4 
	public bool IsSpecialName { get; } // 0x0027ECBC 
	public override MemberTypes MemberType { get; } // 0x0027ECDC 

	// Constructors
	protected EventInfo(); // 0x0027E9EC

	// Methods
	private void System.Runtime.InteropServices._EventInfo.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x0027E9FC
	private void System.Runtime.InteropServices._EventInfo.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x0027EA84
	private void System.Runtime.InteropServices._EventInfo.GetTypeInfoCount(out uint pcTInfo); // 0x0027EB0C
	private void System.Runtime.InteropServices._EventInfo.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x0027EB94
	public void AddEventHandler(object target, Delegate handler); // 0x0027ECE4
	public MethodInfo GetAddMethod(); // 0x0027EF5C
	public abstract MethodInfo GetAddMethod(bool nonPublic);
	public MethodInfo GetRaiseMethod(); // 0x0027F874
	public abstract MethodInfo GetRaiseMethod(bool nonPublic);
	public MethodInfo GetRemoveMethod(); // 0x0027F888
	public abstract MethodInfo GetRemoveMethod(bool nonPublic);
	public virtual MethodInfo[] GetOtherMethods(bool nonPublic); // 0x0027F89C
	public MethodInfo[] GetOtherMethods(); // 0x0027F8FC
	public void RemoveEventHandler(object target, Delegate handler); // 0x0027F910
	private static void AddEventFrame(AddEvent`2<T, T> addEvent, object obj, object dele);
	private static void StaticAddEventAdapterFrame(StaticAddEvent`1<T> addEvent, object obj, object dele);
	private static AddEventAdapter CreateAddEventDelegate(MethodInfo method); // 0x0027EFA8
	virtual Type System.Runtime.InteropServices._EventInfo.GetType(); // 0x0027FA94
}

// Namespace: 
private delegate void AddEventAdapter(object _this, Delegate dele); // TypeDefIndex: 580; 0x0027F4C8

// Namespace: 
private delegate void AddEvent`2(T _this, T dele); // TypeDefIndex: 581; 0x00000000

// Namespace: 
private delegate void StaticAddEvent`1(T dele); // TypeDefIndex: 582; 0x00000000

// Namespace: System.Reflection
public sealed class ExceptionHandlingClause // TypeDefIndex: 583
{
	// Fields
	internal Type catch_type; // 0x08
	internal int filter_offset; // 0x0C
	internal ExceptionHandlingClauseOptions flags; // 0x10
	internal int try_offset; // 0x14
	internal int try_length; // 0x18
	internal int handler_offset; // 0x1C
	internal int handler_length; // 0x20

	// Properties
	public Type CatchType { get; } // 0x0027FAFC 
	public int FilterOffset { get; } // 0x0027FB04 
	public ExceptionHandlingClauseOptions Flags { get; } // 0x0027FB0C 
	public int HandlerLength { get; } // 0x0027FB14 
	public int HandlerOffset { get; } // 0x0027FB1C 
	public int TryLength { get; } // 0x0027FB24 
	public int TryOffset { get; } // 0x0027FB2C 

	// Constructors
	internal ExceptionHandlingClause(); // 0x0027FAF4

	// Methods
	public override string ToString(); // 0x0027FB34
}

// Namespace: System.Reflection
public enum ExceptionHandlingClauseOptions // TypeDefIndex: 584
{
	Clause = 0,
	Filter = 1,
	Finally = 2,
	Fault = 4
}

// Namespace: System.Reflection
[Serializable]
public enum FieldAttributes // TypeDefIndex: 585
{
	PrivateScope = 0,
	Private = 1,
	FamANDAssem = 2,
	Assembly = 3,
	Family = 4,
	FamORAssem = 5,
	Public = 6,
	FieldAccessMask = 7,
	Static = 16,
	InitOnly = 32,
	Literal = 64,
	NotSerialized = 128,
	HasFieldRVA = 256,
	SpecialName = 512,
	RTSpecialName = 1024,
	HasFieldMarshal = 4096,
	PinvokeImpl = 8192,
	HasDefault = 32768,
	ReservedMask = 38144
}

// Namespace: System.Reflection
[Serializable]
public abstract class FieldInfo : MemberInfo, _FieldInfo // TypeDefIndex: 586
{
	// Properties
	public abstract FieldAttributes Attributes { get; }
	public abstract RuntimeFieldHandle FieldHandle { get; }
	public abstract Type FieldType { get; }
	public override MemberTypes MemberType { get; } // 0x00280250 
	public bool IsLiteral { get; } // 0x00280258 
	public bool IsStatic { get; } // 0x00279FD4 
	public bool IsInitOnly { get; } // 0x00280278 
	public bool IsPublic { get; } // 0x00280298 
	public bool IsPrivate { get; } // 0x002802C4 
	public bool IsFamily { get; } // 0x002802EC 
	public bool IsAssembly { get; } // 0x00280318 
	public bool IsFamilyAndAssembly { get; } // 0x00280344 
	public bool IsFamilyOrAssembly { get; } // 0x00280370 
	public bool IsPinvokeImpl { get; } // 0x0028039C 
	public bool IsSpecialName { get; } // 0x002803BC 
	public bool IsNotSerialized { get; } // 0x002803DC 
	internal virtual UnmanagedMarshal UMarshal { get; } // 0x002807C4 

	// Constructors
	protected FieldInfo(); // 0x00280028

	// Methods
	private void System.Runtime.InteropServices._FieldInfo.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x00280030
	private void System.Runtime.InteropServices._FieldInfo.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x002800B8
	private void System.Runtime.InteropServices._FieldInfo.GetTypeInfoCount(out uint pcTInfo); // 0x00280140
	private void System.Runtime.InteropServices._FieldInfo.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x002801C8
	public abstract object GetValue(object obj);
	public abstract void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, CultureInfo culture);
	public void SetValue(object obj, object value); // 0x002803FC
	private static FieldInfo internal_from_handle_type(IntPtr field_handle, IntPtr type_handle); // 0x00280434
	public static FieldInfo GetFieldFromHandle(RuntimeFieldHandle handle); // 0x00280438
	public static FieldInfo GetFieldFromHandle(RuntimeFieldHandle handle, RuntimeTypeHandle declaringType); // 0x00280500
	internal virtual int GetFieldOffset(); // 0x00280614
	public virtual object GetValueDirect(TypedReference obj); // 0x002806B0
	public virtual void SetValueDirect(TypedReference obj, object value); // 0x00280738
	private UnmanagedMarshal GetUnmanagedMarshal(); // 0x002807C0
	internal object[] GetPseudoCustomAttributes(); // 0x002807C8
	private Type[] GetTypeModifiers(bool optional); // 0x00280AB4
	public virtual Type[] GetOptionalCustomModifiers(); // 0x00280AB8
	public virtual Type[] GetRequiredCustomModifiers(); // 0x00280B5C
	public virtual object GetRawConstantValue(); // 0x00280C00
	virtual Type System.Runtime.InteropServices._FieldInfo.GetType(); // 0x00280C9C
}

// Namespace: System.Reflection
public enum GenericParameterAttributes // TypeDefIndex: 587
{
	None = 0,
	Covariant = 1,
	Contravariant = 2,
	VarianceMask = 3,
	ReferenceTypeConstraint = 4,
	NotNullableValueTypeConstraint = 8,
	DefaultConstructorConstraint = 16,
	SpecialConstraintMask = 28
}

// Namespace: System.Reflection
[Serializable]
public enum ImageFileMachine // TypeDefIndex: 588
{
	I386 = 332,
	IA64 = 512,
	AMD64 = 34404
}

// Namespace: System.Reflection
public struct InterfaceMapping // TypeDefIndex: 589
{
	// Fields
	public MethodInfo[] InterfaceMethods; // 0x08
	public Type InterfaceType; // 0x0C
	public MethodInfo[] TargetMethods; // 0x10
	public Type TargetType; // 0x14

}

// Namespace: System.Reflection
[Serializable]
public class InvalidFilterCriteriaException : ApplicationException // TypeDefIndex: 590
{
	// Constructors
	public InvalidFilterCriteriaException(); // 0x00281080
	public InvalidFilterCriteriaException(string message); // 0x002810F4
	public InvalidFilterCriteriaException(string message, Exception inner); // 0x002810FC
	protected InvalidFilterCriteriaException(SerializationInfo info, StreamingContext context); // 0x00281104

}

// Namespace: System.Reflection
public class LocalVariableInfo // TypeDefIndex: 591
{
	// Fields
	internal Type type; // 0x08
	internal bool is_pinned; // 0x0C
	internal ushort position; // 0x0E

	// Properties
	public virtual bool IsPinned { get; } // 0x0028112C 
	public virtual int LocalIndex { get; } // 0x00281134 
	public virtual Type LocalType { get; } // 0x0028113C 

	// Constructors
	internal LocalVariableInfo(); // 0x00281124

	// Methods
	public override string ToString(); // 0x00281144
}

// Namespace: System.Reflection
public class ManifestResourceInfo // TypeDefIndex: 592
{
	// Fields
	private Assembly _assembly; // 0x08
	private string _filename; // 0x0C
	private ResourceLocation _location; // 0x10

	// Properties
	public virtual string FileName { get; } // 0x002812AC 
	public virtual Assembly ReferencedAssembly { get; } // 0x002812B4 
	public virtual ResourceLocation ResourceLocation { get; } // 0x002812BC 

	// Constructors
	internal ManifestResourceInfo(); // 0x00281274
	internal ManifestResourceInfo(Assembly assembly, string filename, ResourceLocation location); // 0x0028127C

}

// Namespace: System.Reflection
[Serializable]
internal class MemberInfoSerializationHolder : ISerializable, IObjectReference // TypeDefIndex: 593
{
	// Fields
	private const BindingFlags DefaultBinding = 60; // 0x00
	private readonly string _memberName; // 0x08
	private readonly string _memberSignature; // 0x0C
	private readonly MemberTypes _memberType; // 0x10
	private readonly Type _reflectedType; // 0x14
	private readonly Type[] _genericArguments; // 0x18

	// Constructors
	private MemberInfoSerializationHolder(SerializationInfo info, StreamingContext ctx); // 0x00281964

	// Methods
	public static void Serialize(SerializationInfo info, string name, Type klass, string signature, MemberTypes type); // 0x00281B4C
	public static void Serialize(SerializationInfo info, string name, Type klass, string signature, MemberTypes type, Type[] genericArguments); // 0x00281B70
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00281EB4
	public object GetRealObject(StreamingContext context); // 0x00281F3C
}

// Namespace: System.Reflection
[Serializable]
public enum MemberTypes // TypeDefIndex: 594
{
	Constructor = 1,
	Event = 2,
	Field = 4,
	Method = 8,
	Property = 16,
	TypeInfo = 32,
	Custom = 64,
	NestedType = 128,
	All = 191
}

// Namespace: System.Reflection
[Serializable]
public enum MethodAttributes // TypeDefIndex: 595
{
	PrivateScope = 0,
	ReuseSlot = 0,
	Private = 1,
	FamANDAssem = 2,
	Assembly = 3,
	Family = 4,
	FamORAssem = 5,
	Public = 6,
	MemberAccessMask = 7,
	UnmanagedExport = 8,
	Static = 16,
	Final = 32,
	Virtual = 64,
	HideBySig = 128,
	VtableLayoutMask = 256,
	NewSlot = 256,
	CheckAccessOnOverride = 512,
	Abstract = 1024,
	SpecialName = 2048,
	RTSpecialName = 4096,
	PinvokeImpl = 8192,
	HasSecurity = 16384,
	RequireSecObject = 32768,
	ReservedMask = 53248
}

// Namespace: System.Reflection
[Serializable]
public abstract class MethodBase : MemberInfo, _MethodBase // TypeDefIndex: 596
{
	// Properties
	public abstract RuntimeMethodHandle MethodHandle { get; }
	public abstract MethodAttributes Attributes { get; }
	public virtual CallingConventions CallingConvention { get; } // 0x00282CD8 
	public bool IsPublic { get; } // 0x00282CE0 
	public bool IsPrivate { get; } // 0x00282D0C 
	public bool IsFamily { get; } // 0x00282D34 
	public bool IsAssembly { get; } // 0x00282D60 
	public bool IsFamilyAndAssembly { get; } // 0x00282D8C 
	public bool IsFamilyOrAssembly { get; } // 0x00282DB8 
	public bool IsStatic { get; } // 0x0027B3D0 
	public bool IsFinal { get; } // 0x00282DE4 
	public bool IsVirtual { get; } // 0x00282E04 
	public bool IsHideBySig { get; } // 0x00282E24 
	public bool IsAbstract { get; } // 0x00279FF4 
	public bool IsSpecialName { get; } // 0x00282E44 
	public bool IsConstructor { get; } // 0x00282E64 
	public virtual bool ContainsGenericParameters { get; } // 0x002830EC 
	public virtual bool IsGenericMethodDefinition { get; } // 0x002830F4 
	public virtual bool IsGenericMethod { get; } // 0x002830FC 

	// Constructors
	protected MethodBase(); // 0x00282780

	// Methods
	private void System.Runtime.InteropServices._MethodBase.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x00282788
	private void System.Runtime.InteropServices._MethodBase.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x00282810
	private void System.Runtime.InteropServices._MethodBase.GetTypeInfoCount(out uint pcTInfo); // 0x00282898
	private void System.Runtime.InteropServices._MethodBase.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x00282920
	public static MethodBase GetCurrentMethod(); // 0x002829A8
	internal static MethodBase GetMethodFromHandleNoGenericCheck(RuntimeMethodHandle handle); // 0x00282A18
	private static MethodBase GetMethodFromIntPtr(IntPtr handle, IntPtr declaringType); // 0x00282A70
	public static MethodBase GetMethodFromHandle(RuntimeMethodHandle handle); // 0x00282B88
	private static MethodBase GetMethodFromHandleInternalType(IntPtr method_handle, IntPtr type_handle); // 0x00282B84
	public static MethodBase GetMethodFromHandle(RuntimeMethodHandle handle, RuntimeTypeHandle declaringType); // 0x00282CAC
	public abstract MethodImplAttributes GetMethodImplementationFlags();
	public abstract ParameterInfo[] GetParameters();
	internal virtual int GetParameterCount(); // 0x00282CB0
	public object Invoke(object obj, object[] parameters); // 0x0027EF70
	public abstract object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture);
	internal virtual int get_next_table_index(object obj, int table, bool inc); // 0x00282F30
	public virtual Type[] GetGenericArguments(); // 0x00283064
	internal static MethodBody GetMethodBodyInternal(IntPtr handle); // 0x00283104
	internal static MethodBody GetMethodBody(IntPtr handle); // 0x00283108
	public virtual MethodBody GetMethodBody(); // 0x0028310C
	virtual Type System.Runtime.InteropServices._MethodBase.GetType(); // 0x00283194
}

// Namespace: System.Reflection
public sealed class MethodBody // TypeDefIndex: 597
{
	// Fields
	private ExceptionHandlingClause[] clauses; // 0x08
	private LocalVariableInfo[] locals; // 0x0C
	private byte[] il; // 0x10
	private bool init_locals; // 0x14
	private int sig_token; // 0x18
	private int max_stack; // 0x1C

	// Properties
	public IList`1<ExceptionHandlingClause> ExceptionHandlingClauses { get; } // 0x002831A4 
	public IList`1<LocalVariableInfo> LocalVariables { get; } // 0x00283208 
	public bool InitLocals { get; } // 0x0028326C 
	public int LocalSignatureMetadataToken { get; } // 0x00283274 
	public int MaxStackSize { get; } // 0x0028327C 

	// Constructors
	internal MethodBody(); // 0x0028319C

	// Methods
	public byte[] GetILAsByteArray(); // 0x00283284
}

// Namespace: System.Reflection
[Serializable]
public enum MethodImplAttributes // TypeDefIndex: 598
{
	IL = 0,
	Managed = 0,
	Native = 1,
	OPTIL = 2,
	CodeTypeMask = 3,
	Runtime = 3,
	ManagedMask = 4,
	Unmanaged = 4,
	NoInlining = 8,
	ForwardRef = 16,
	Synchronized = 32,
	PreserveSig = 128,
	InternalCall = 4096,
	MaxMethodImplVal = 65535
}

// Namespace: System.Reflection
[Serializable]
public abstract class MethodInfo : MethodBase, _MethodInfo // TypeDefIndex: 599
{
	// Properties
	public override MemberTypes MemberType { get; } // 0x002834B4 
	public virtual Type ReturnType { get; } // 0x002834BC 
	public abstract ICustomAttributeProvider ReturnTypeCustomAttributes { get; }
	public override bool IsGenericMethod { get; } // 0x00283698 
	public override bool IsGenericMethodDefinition { get; } // 0x002836A0 
	public override bool ContainsGenericParameters { get; } // 0x002836A8 
	public virtual ParameterInfo ReturnParameter { get; } // 0x002836B0 

	// Constructors
	protected MethodInfo(); // 0x0028328C

	// Methods
	private void System.Runtime.InteropServices._MethodInfo.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x00283294
	private void System.Runtime.InteropServices._MethodInfo.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x0028331C
	private void System.Runtime.InteropServices._MethodInfo.GetTypeInfoCount(out uint pcTInfo); // 0x002833A4
	private void System.Runtime.InteropServices._MethodInfo.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x0028342C
	public abstract MethodInfo GetBaseDefinition();
	public virtual MethodInfo GetGenericMethodDefinition(); // 0x002834C4
	public virtual MethodInfo MakeGenericMethod(Type[] typeArguments); // 0x0028354C
	public override Type[] GetGenericArguments(); // 0x0028360C
	virtual Type System.Runtime.InteropServices._MethodInfo.GetType(); // 0x00283738
}

// Namespace: System.Reflection
[Serializable]
public sealed class Missing : ISerializable // TypeDefIndex: 600
{
	// Fields
	public static readonly Missing Value; // 0x00

	// Constructors
	internal Missing(); // 0x00283740
	private static Missing(); // 0x00283748

	// Methods
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x002837BC
}

// Namespace: System.Reflection
internal enum ResolveTokenError // TypeDefIndex: 601
{
	OutOfRange = 0,
	BadTable = 1,
	Other = 2
}

// Namespace: System.Reflection
[Serializable]
public class Module : ISerializable, ICustomAttributeProvider, _Module // TypeDefIndex: 602
{
	// Fields
	private const BindingFlags defaultBindingFlags = 28; // 0x00
	public static readonly TypeFilter FilterTypeName; // 0x00
	public static readonly TypeFilter FilterTypeNameIgnoreCase; // 0x04
	private IntPtr _impl; // 0x08
	internal Assembly assembly; // 0x0C
	internal string fqname; // 0x10
	internal string name; // 0x14
	internal string scopename; // 0x18
	internal bool is_resource; // 0x1C
	internal int token; // 0x20

	// Properties
	public Assembly Assembly { get; } // 0x00283AB8 
	public virtual string FullyQualifiedName { get; } // 0x00283AC0 
	public string Name { get; } // 0x00283AC8 
	public string ScopeName { get; } // 0x00283AD0 
	public ModuleHandle ModuleHandle { get; } // 0x00283AD8 
	public int MetadataToken { get; } // 0x00283AE0 
	public int MDStreamVersion { get; } // 0x00283AE4 
	internal Guid MvId { get; } // 0x002846AC 
	public Guid ModuleVersionId { get; } // 0x002846C8 

	// Constructors
	internal Module(); // 0x002837C0
	private static Module(); // 0x002837C8

	// Methods
	private void System.Runtime.InteropServices._Module.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x00283898
	private void System.Runtime.InteropServices._Module.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x00283920
	private void System.Runtime.InteropServices._Module.GetTypeInfoCount(out uint pcTInfo); // 0x002839A8
	private void System.Runtime.InteropServices._Module.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x00283A30
	internal static int GetMDStreamVersion(IntPtr module_handle); // 0x00283BC4
	public virtual Type[] FindTypes(TypeFilter filter, object filterCriteria); // 0x00283BC8
	public virtual object[] GetCustomAttributes(bool inherit); // 0x00283DB8
	public virtual object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00283E44
	public FieldInfo GetField(string name); // 0x00283ED8
	public FieldInfo GetField(string name, BindingFlags bindingAttr); // 0x00283F24
	public FieldInfo[] GetFields(); // 0x00283F70
	public MethodInfo GetMethod(string name); // 0x00284018
	public MethodInfo GetMethod(string name, Type[] types); // 0x00284054
	public MethodInfo GetMethod(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x00284094
	protected virtual MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x002840D0
	public MethodInfo[] GetMethods(); // 0x00284140
	public MethodInfo[] GetMethods(BindingFlags bindingFlags); // 0x002841DC
	public FieldInfo[] GetFields(BindingFlags bindingFlags); // 0x00284288
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00284334
	public virtual Type GetType(string className); // 0x00284410
	public virtual Type GetType(string className, bool ignoreCase); // 0x00284440
	public virtual Type GetType(string className, bool throwOnError, bool ignoreCase); // 0x00284470
	private Type[] InternalGetTypes(); // 0x00284600
	public virtual Type[] GetTypes(); // 0x00284604
	public virtual bool IsDefined(Type attributeType, bool inherit); // 0x00284608
	public bool IsResource(); // 0x0028469C
	public override string ToString(); // 0x002846A4
	public void GetPEKind(out PortableExecutableKinds peKind, out ImageFileMachine machine); // 0x002846E4
	private Exception resolve_token_exception(int metadataToken, ResolveTokenError error, string tokenType); // 0x0028470C
	private IntPtr[] ptrs_from_types(Type[] types); // 0x002848DC
	public FieldInfo ResolveField(int metadataToken); // 0x00284A60
	public FieldInfo ResolveField(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments); // 0x00284A80
	public MemberInfo ResolveMember(int metadataToken); // 0x00284BB0
	public MemberInfo ResolveMember(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments); // 0x00284BD0
	public MethodBase ResolveMethod(int metadataToken); // 0x00284CE4
	public MethodBase ResolveMethod(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments); // 0x00284D04
	public string ResolveString(int metadataToken); // 0x00284E34
	public Type ResolveType(int metadataToken); // 0x00284F1C
	public Type ResolveType(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments); // 0x00284F3C
	public byte[] ResolveSignature(int metadataToken); // 0x0028509C
	internal static Type MonoDebugger_ResolveType(Module module, int token); // 0x00285184
	internal static Guid Mono_GetGuid(Module module); // 0x0028529C
	internal virtual Guid GetModuleVersionId(); // 0x002852D8
	private static bool filter_by_type_name(Type m, object filterCriteria); // 0x0028530C
	private static bool filter_by_type_name_ignore_case(Type m, object filterCriteria); // 0x00285490
	internal IntPtr GetHINSTANCE(); // 0x00285668
	private string GetGuidInternal(); // 0x00285308
	private Type GetGlobalType(); // 0x00283F20
	internal static IntPtr ResolveTypeToken(IntPtr module, int token, IntPtr[] type_args, IntPtr[] method_args, out ResolveTokenError error); // 0x00285098
	internal static IntPtr ResolveMethodToken(IntPtr module, int token, IntPtr[] type_args, IntPtr[] method_args, out ResolveTokenError error); // 0x00284E30
	internal static IntPtr ResolveFieldToken(IntPtr module, int token, IntPtr[] type_args, IntPtr[] method_args, out ResolveTokenError error); // 0x00284BAC
	internal static string ResolveStringToken(IntPtr module, int token, out ResolveTokenError error); // 0x00284F18
	internal static MemberInfo ResolveMemberToken(IntPtr module, int token, IntPtr[] type_args, IntPtr[] method_args, out ResolveTokenError error); // 0x00284CE0
	internal static byte[] ResolveSignature(IntPtr module, int metadataToken, out ResolveTokenError error); // 0x00285180
	internal static void GetPEKind(IntPtr module, out PortableExecutableKinds peKind, out ImageFileMachine machine); // 0x0028566C
}

// Namespace: System.Reflection
internal struct MonoEventInfo // TypeDefIndex: 603
{
	// Fields
	public Type declaring_type; // 0x08
	public Type reflected_type; // 0x0C
	public string name; // 0x10
	public MethodInfo add_method; // 0x14
	public MethodInfo remove_method; // 0x18
	public MethodInfo raise_method; // 0x1C
	public EventAttributes attrs; // 0x20
	public MethodInfo[] other_methods; // 0x24

	// Methods
	private static void get_event_info(MonoEvent ev, out MonoEventInfo info); // 0x00287B38
	internal static MonoEventInfo GetEventInfo(MonoEvent ev); // 0x002873F0
}

// Namespace: System.Reflection
[Serializable]
internal sealed class MonoEvent : EventInfo, ISerializable // TypeDefIndex: 604
{
	// Fields
	private IntPtr klass; // 0x0C
	private IntPtr handle; // 0x10

	// Properties
	public override EventAttributes Attributes { get; } // 0x002873C0 
	public override Type DeclaringType { get; } // 0x00287798 
	public override Type ReflectedType { get; } // 0x002877C8 
	public override string Name { get; } // 0x002877F8 

	// Constructors
	public MonoEvent(); // 0x002873B8

	// Methods
	public override MethodInfo GetAddMethod(bool nonPublic); // 0x00287438
	public override MethodInfo GetRaiseMethod(bool nonPublic); // 0x002874AC
	public override MethodInfo GetRemoveMethod(bool nonPublic); // 0x00287520
	public override MethodInfo[] GetOtherMethods(bool nonPublic); // 0x00287594
	public override string ToString(); // 0x00287828
	public override bool IsDefined(Type attributeType, bool inherit); // 0x002878F4
	public override object[] GetCustomAttributes(bool inherit); // 0x00287988
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00287A14
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00287AA8
}

// Namespace: System.Reflection
[Serializable]
internal class MonoField : FieldInfo, ISerializable // TypeDefIndex: 605
{
	// Fields
	internal IntPtr klass; // 0x08
	internal RuntimeFieldHandle fhandle; // 0x0C
	private string name; // 0x10
	private Type type; // 0x14
	private FieldAttributes attrs; // 0x18

	// Properties
	public override FieldAttributes Attributes { get; } // 0x00287B44 
	public override RuntimeFieldHandle FieldHandle { get; } // 0x00287B4C 
	public override Type FieldType { get; } // 0x00287B54 
	public override Type ReflectedType { get; } // 0x00287B60 
	public override Type DeclaringType { get; } // 0x00287B68 
	public override string Name { get; } // 0x00287B70 

	// Constructors
	public MonoField(); // 0x00287B3C

	// Methods
	private Type GetParentType(bool declaring); // 0x00287B5C
	public override bool IsDefined(Type attributeType, bool inherit); // 0x00287B78
	public override object[] GetCustomAttributes(bool inherit); // 0x00287C0C
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00287C98
	internal override int GetFieldOffset(); // 0x00287D2C
	private object GetValueInternal(object obj); // 0x00287D30
	public override object GetValue(object obj); // 0x00287D34
	public override string ToString(); // 0x00288058
	private static void SetValueInternal(FieldInfo fi, object obj, object value); // 0x002880F8
	public override void SetValue(object obj, object val, BindingFlags invokeAttr, Binder binder, CultureInfo culture); // 0x002880FC
	internal MonoField Clone(string newName); // 0x002886CC
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x002887C8
	public override object GetRawConstantValue(); // 0x0028884C
	private void CheckGeneric(); // 0x00287F74
}

// Namespace: System.Reflection
internal class MonoGenericClass : MonoType // TypeDefIndex: 606
{
	// Fields
	private const BindingFlags flags = 62; // 0x00
	internal TypeBuilder generic_type; // 0x10
	private Type[] type_arguments; // 0x14
	private bool initialized; // 0x18
	private Hashtable fields; // 0x1C
	private Hashtable ctors; // 0x20
	private Hashtable methods; // 0x24
	private int event_count; // 0x28

	// Properties
	public override Type BaseType { get; } // 0x00289020 
	public override Type UnderlyingSystemType { get; } // 0x0028B41C 
	public override string Name { get; } // 0x0028B420 
	public override string Namespace { get; } // 0x0028B444 
	public override string FullName { get; } // 0x0028B468 
	public override string AssemblyQualifiedName { get; } // 0x0028B8A8 
	public override Guid GUID { get; } // 0x0028B8B4 

	// Constructors
	internal MonoGenericClass(); // 0x002888E8
	internal MonoGenericClass(TypeBuilder tb, Type[] args); // 0x00288984

	// Methods
	private void initialize(MethodInfo[] methods, ConstructorInfo[] ctors, FieldInfo[] fields, PropertyInfo[] properties, EventInfo[] events); // 0x002889B0
	private void initialize(); // 0x002889B4
	private Type GetParentType(); // 0x00288B4C
	internal Type InflateType(Type type); // 0x00272FD8
	internal Type InflateType(Type type, Type[] method_args); // 0x00288B80
	private Type[] GetInterfacesInternal(); // 0x00289054
	public override Type[] GetInterfaces(); // 0x002891FC
	protected override bool IsValueTypeImpl(); // 0x002892B8
	internal override MethodInfo GetMethod(MethodInfo fromNoninstanciated); // 0x002892E4
	internal override ConstructorInfo GetConstructor(ConstructorInfo fromNoninstanciated); // 0x00289548
	internal override FieldInfo GetField(FieldInfo fromNoninstanciated); // 0x002897AC
	public override MethodInfo[] GetMethods(BindingFlags bf); // 0x00289A10
	private MethodInfo[] GetMethodsInternal(BindingFlags bf, MonoGenericClass reftype); // 0x00289CB4
	public override ConstructorInfo[] GetConstructors(BindingFlags bf); // 0x00289ED0
	private ConstructorInfo[] GetConstructorsInternal(BindingFlags bf, MonoGenericClass reftype); // 0x0028A164
	public override FieldInfo[] GetFields(BindingFlags bf); // 0x0028A394
	private FieldInfo[] GetFieldsInternal(BindingFlags bf, MonoGenericClass reftype); // 0x0028A628
	public override PropertyInfo[] GetProperties(BindingFlags bf); // 0x0028A844
	private PropertyInfo[] GetPropertiesInternal(BindingFlags bf, MonoGenericClass reftype); // 0x0028AAEC
	public override EventInfo[] GetEvents(BindingFlags bf); // 0x0028AD64
	private EventInfo[] GetEventsInternal(BindingFlags bf, MonoGenericClass reftype); // 0x0028AFF8
	public override Type[] GetNestedTypes(BindingFlags bf); // 0x0028B240
	public override bool IsAssignableFrom(Type c); // 0x0028B270
	private string format_name(bool full_name, bool assembly_qualified); // 0x0028B474
	public override string ToString(); // 0x0028B93C
	public override Type MakeArrayType(); // 0x0028B948
	public override Type MakeArrayType(int rank); // 0x0028B9C0
	public override Type MakeByRefType(); // 0x0028BA88
	public override Type MakePointerType(); // 0x0028BAFC
	protected override bool IsCOMObjectImpl(); // 0x0028BB70
	protected override bool IsPrimitiveImpl(); // 0x0028BB78
	protected override TypeAttributes GetAttributeFlagsImpl(); // 0x0028BB80
	public override Type GetInterface(string name, bool ignoreCase); // 0x0028BBAC
	public override EventInfo GetEvent(string name, BindingFlags bindingAttr); // 0x0028BC34
	public override FieldInfo GetField(string name, BindingFlags bindingAttr); // 0x0028BDD0
	public override MemberInfo[] GetMembers(BindingFlags bindingAttr); // 0x0028BE58
	public override Type GetNestedType(string name, BindingFlags bindingAttr); // 0x0028BEE0
	public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters); // 0x0028BF68
	protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x0028BFF0
	protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x0028C078
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x0028C100
	public override bool IsDefined(Type attributeType, bool inherit); // 0x0028C188
	public override object[] GetCustomAttributes(bool inherit); // 0x0028C210
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x0028C298
}

// Namespace: System.Reflection
[Serializable]
internal class MonoGenericMethod : MonoMethod // TypeDefIndex: 607
{
	// Properties
	public override Type ReflectedType { get; } // 0x0028C3C0 

	// Constructors
	internal MonoGenericMethod(); // 0x0028C320

}

// Namespace: System.Reflection
[Serializable]
internal class MonoGenericCMethod : MonoCMethod // TypeDefIndex: 608
{
	// Properties
	public override Type ReflectedType { get; } // 0x002888E4 

	// Constructors
	internal MonoGenericCMethod(); // 0x00288850

}

// Namespace: System.Reflection
internal struct MonoMethodInfo // TypeDefIndex: 609
{
	// Fields
	private Type parent; // 0x08
	private Type ret; // 0x0C
	internal MethodAttributes attrs; // 0x10
	internal MethodImplAttributes iattrs; // 0x14
	private CallingConventions callconv; // 0x18

	// Methods
	private static void get_method_info(IntPtr handle, out MonoMethodInfo info); // 0x0028DB68
	internal static MonoMethodInfo GetMethodInfo(IntPtr handle); // 0x0028D00C
	internal static Type GetDeclaringType(IntPtr handle); // 0x00286E58
	internal static Type GetReturnType(IntPtr handle); // 0x0028C4FC
	internal static MethodAttributes GetAttributes(IntPtr handle); // 0x00286D78
	internal static CallingConventions GetCallingConvention(IntPtr handle); // 0x00286DE4
	internal static MethodImplAttributes GetMethodImplementationFlags(IntPtr handle); // 0x00286624
	private static ParameterInfo[] get_parameter_info(IntPtr handle, MemberInfo member); // 0x0028DB6C
	internal static ParameterInfo[] GetParametersInfo(IntPtr handle, MemberInfo member); // 0x00286664
	private static UnmanagedMarshal get_retval_marshal(IntPtr handle); // 0x0028DB70
	internal static ParameterInfo GetReturnParameterInfo(MonoMethod method); // 0x0028C3F0
}

// Namespace: System.Reflection
[Serializable]
internal class MonoMethod : MethodInfo, ISerializable // TypeDefIndex: 610
{
	// Fields
	internal IntPtr mhandle; // 0x08
	private string name; // 0x0C
	private Type reftype; // 0x10

	// Properties
	public override ParameterInfo ReturnParameter { get; } // 0x0028C3EC 
	public override Type ReturnType { get; } // 0x0028C4C4 
	public override ICustomAttributeProvider ReturnTypeCustomAttributes { get; } // 0x0028C530 
	public override RuntimeMethodHandle MethodHandle { get; } // 0x0028CB58 
	public override MethodAttributes Attributes { get; } // 0x0028CB60 
	public override CallingConventions CallingConvention { get; } // 0x0028CB98 
	public override Type ReflectedType { get; } // 0x0028CBD0 
	public override Type DeclaringType { get; } // 0x0028CBD8 
	public override string Name { get; } // 0x0028CC10 
	public override bool IsGenericMethodDefinition { get; } // 0x0028DA60 
	public override bool IsGenericMethod { get; } // 0x0028DA64 
	public override bool ContainsGenericParameters { get; } // 0x0028DA68 

	// Constructors
	internal MonoMethod(); // 0x0028C3B8
	internal MonoMethod(RuntimeMethodHandle mhandle); // 0x0028C3C4

	// Methods
	internal static string get_name(MethodBase method); // 0x00286EB4
	internal static MonoMethod get_base_definition(MonoMethod method); // 0x0028C3E4
	public override MethodInfo GetBaseDefinition(); // 0x0028C3E8
	public override MethodImplAttributes GetMethodImplementationFlags(); // 0x0028C534
	public override ParameterInfo[] GetParameters(); // 0x0028C56C
	internal object InternalInvoke(object obj, object[] parameters, out Exception exc); // 0x0028C61C
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x0028C620
	public override bool IsDefined(Type attributeType, bool inherit); // 0x0028CC38
	public override object[] GetCustomAttributes(bool inherit); // 0x0028CCCC
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x0028CD58
	internal static DllImportAttribute GetDllImportAttribute(IntPtr mhandle); // 0x0028CDEC
	internal object[] GetPseudoCustomAttributes(); // 0x0028CDF0
	private static bool ShouldPrintFullName(Type type); // 0x0028D058
	public override string ToString(); // 0x0028D144
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0028D6B8
	public override MethodInfo MakeGenericMethod(Type[] methodInstantiation); // 0x0028D788
	private MethodInfo MakeGenericMethod_impl(Type[] types); // 0x0028D9B8
	public override Type[] GetGenericArguments(); // 0x0028D9BC
	private MethodInfo GetGenericMethodDefinition_impl(); // 0x0028D9C0
	public override MethodInfo GetGenericMethodDefinition(); // 0x0028D9C4
	public override MethodBody GetMethodBody(); // 0x0028DB60
}

// Namespace: System.Reflection
internal class MonoCMethod : ConstructorInfo, ISerializable // TypeDefIndex: 611
{
	// Fields
	internal IntPtr mhandle; // 0x08
	private string name; // 0x0C
	private Type reftype; // 0x10

	// Properties
	public override RuntimeMethodHandle MethodHandle { get; } // 0x00286D38 
	public override MethodAttributes Attributes { get; } // 0x00286D40 
	public override CallingConventions CallingConvention { get; } // 0x00286DAC 
	public override Type ReflectedType { get; } // 0x00286E18 
	public override Type DeclaringType { get; } // 0x00286E20 
	public override string Name { get; } // 0x00286E8C 

	// Constructors
	public MonoCMethod(); // 0x00286568

	// Methods
	public override MethodImplAttributes GetMethodImplementationFlags(); // 0x002865EC
	public override ParameterInfo[] GetParameters(); // 0x00286658
	internal object InternalInvoke(object obj, object[] parameters, out Exception exc); // 0x00286668
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x0028666C
	public override object Invoke(BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x00286CF8
	public override bool IsDefined(Type attributeType, bool inherit); // 0x00286EB8
	public override object[] GetCustomAttributes(bool inherit); // 0x00286F4C
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00286FD8
	public override MethodBody GetMethodBody(); // 0x0028706C
	public override string ToString(); // 0x00287074
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00287334
}

// Namespace: System.Reflection
internal struct MonoPropertyInfo // TypeDefIndex: 612
{
	// Fields
	public Type parent; // 0x08
	public string name; // 0x0C
	public MethodInfo get_method; // 0x10
	public MethodInfo set_method; // 0x14
	public PropertyAttributes attrs; // 0x18

	// Methods
	internal static void get_property_info(MonoProperty prop, MonoPropertyInfo info, PInfo req_info); // 0x00366F24
	internal static Type[] GetTypeModifiers(MonoProperty prop, bool optional); // 0x00366F28
}

// Namespace: System.Reflection
internal enum PInfo // TypeDefIndex: 613
{
	Attributes = 1,
	GetMethod = 2,
	SetMethod = 4,
	ReflectedType = 8,
	DeclaringType = 16,
	Name = 32
}

// Namespace: System.Reflection
[Serializable]
internal class MonoProperty : PropertyInfo, ISerializable // TypeDefIndex: 614
{
	// Fields
	internal IntPtr klass; // 0x08
	internal IntPtr prop; // 0x0C
	private MonoPropertyInfo info; // 0x10
	private PInfo cached; // 0x24
	private GetterAdapter cached_getter; // 0x28

	// Properties
	public override PropertyAttributes Attributes { get; } // 0x0028DBC0 
	public override bool CanRead { get; } // 0x0028DC00 
	public override bool CanWrite { get; } // 0x0028DC48 
	public override Type PropertyType { get; } // 0x0028DC90 
	public override Type ReflectedType { get; } // 0x0028DD80 
	public override Type DeclaringType { get; } // 0x0028DDC0 
	public override string Name { get; } // 0x0028DE00 

	// Constructors
	public MonoProperty(); // 0x0028DB74

	// Methods
	private void CachePropertyInfo(PInfo flags); // 0x0028DB7C
	public override MethodInfo[] GetAccessors(bool nonPublic); // 0x0028DE40
	public override MethodInfo GetGetMethod(bool nonPublic); // 0x0028E048
	public override ParameterInfo[] GetIndexParameters(); // 0x0028E0BC
	public override MethodInfo GetSetMethod(bool nonPublic); // 0x0028E2BC
	public override bool IsDefined(Type attributeType, bool inherit); // 0x0028E330
	public override object[] GetCustomAttributes(bool inherit); // 0x0028E3C0
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x0028E448
	private static object GetterAdapterFrame(Getter`2<T, T> getter, object obj);
	private static object StaticGetterAdapterFrame(StaticGetter`1<T> getter, object obj);
	private static GetterAdapter CreateGetterDelegate(MethodInfo method); // 0x0028E4D8
	public override object GetValue(object obj, object[] index); // 0x0028E948
	public override object GetValue(object obj, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture); // 0x0028E980
	public override void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture); // 0x0028EBE0
	public override string ToString(); // 0x0028EE7C
	public override Type[] GetOptionalCustomModifiers(); // 0x0028EF6C
	public override Type[] GetRequiredCustomModifiers(); // 0x0028F014
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0028F0BC
}

// Namespace: 
private delegate object GetterAdapter(object _this); // TypeDefIndex: 615; 0x00366B5C

// Namespace: 
private delegate T Getter`2(T _this); // TypeDefIndex: 616; 0x00000000

// Namespace: 
private delegate T StaticGetter`1(); // TypeDefIndex: 617; 0x00000000

// Namespace: System.Reflection
public sealed class ObfuscateAssemblyAttribute : Attribute // TypeDefIndex: 618
{
	// Fields
	private bool is_private; // 0x08
	private bool strip; // 0x09

	// Properties
	public bool AssemblyIsPrivate { get; } // 0x00366F54 
	public bool StripAfterObfuscation { get; set; } // 0x00366F5C 0x00366F64

	// Constructors
	public ObfuscateAssemblyAttribute(bool assemblyIsPrivate); // 0x00366F2C

}

// Namespace: System.Reflection
public sealed class ObfuscationAttribute : Attribute // TypeDefIndex: 619
{
	// Fields
	private bool exclude; // 0x08
	private bool strip; // 0x09
	private bool applyToMembers; // 0x0A
	private string feature; // 0x0C

	// Properties
	public bool Exclude { get; set; } // 0x00366FE8 0x00366FF0
	public bool StripAfterObfuscation { get; set; } // 0x00366FF8 0x00367000
	public bool ApplyToMembers { get; set; } // 0x00367008 0x00367010
	public string Feature { get; set; } // 0x00367018 0x00367020

	// Constructors
	public ObfuscationAttribute(); // 0x00366F6C

}

// Namespace: System.Reflection
[Serializable]
public enum ParameterAttributes // TypeDefIndex: 620
{
	None = 0,
	In = 1,
	Out = 2,
	Lcid = 4,
	Retval = 8,
	Optional = 16,
	HasDefault = 4096,
	HasFieldMarshal = 8192,
	Reserved3 = 16384,
	Reserved4 = 32768,
	ReservedMask = 61440
}

// Namespace: System.Reflection
[Serializable]
public class ParameterInfo : ICustomAttributeProvider, _ParameterInfo // TypeDefIndex: 621
{
	// Fields
	protected Type ClassImpl; // 0x08
	protected object DefaultValueImpl; // 0x0C
	protected MemberInfo MemberImpl; // 0x10
	protected string NameImpl; // 0x14
	protected int PositionImpl; // 0x18
	protected ParameterAttributes AttrsImpl; // 0x1C
	private UnmanagedMarshal marshalAs; // 0x20

	// Properties
	public virtual Type ParameterType { get; } // 0x00367758 
	public virtual ParameterAttributes Attributes { get; } // 0x00367760 
	public virtual object DefaultValue { get; } // 0x00367768 
	public bool IsIn { get; } // 0x00367ACC 
	public bool IsLcid { get; } // 0x00367AEC 
	public bool IsOptional { get; } // 0x00367B0C 
	public bool IsOut { get; } // 0x00367B2C 
	public bool IsRetval { get; } // 0x00367738 
	public virtual MemberInfo Member { get; } // 0x00367B4C 
	public virtual string Name { get; } // 0x00367B54 
	public virtual int Position { get; } // 0x00367B5C 
	public int MetadataToken { get; } // 0x00367B68 
	public virtual object RawDefaultValue { get; } // 0x003683F8 

	// Constructors
	protected ParameterInfo(); // 0x00367028
	internal ParameterInfo(ParameterBuilder pb, Type type, MemberInfo member, int position); // 0x00367030
	internal ParameterInfo(ParameterInfo pinfo, MemberInfo member); // 0x003670CC
	internal ParameterInfo(Type type, MemberInfo member, UnmanagedMarshal marshalAs); // 0x003671A4

	// Methods
	private void System.Runtime.InteropServices._ParameterInfo.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x00367264
	private void System.Runtime.InteropServices._ParameterInfo.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x003672EC
	private void System.Runtime.InteropServices._ParameterInfo.GetTypeInfoCount(out uint pcTInfo); // 0x00367374
	private void System.Runtime.InteropServices._ParameterInfo.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x003673FC
	public override string ToString(); // 0x00367484
	private int GetMetadataToken(); // 0x00367B64
	public virtual object[] GetCustomAttributes(bool inherit); // 0x00367DA8
	public virtual object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00367E34
	public virtual bool IsDefined(Type attributeType, bool inherit); // 0x00367EC8
	internal object[] GetPseudoCustomAttributes(); // 0x00367F5C
	private Type[] GetTypeModifiers(bool optional); // 0x003682AC
	public virtual Type[] GetOptionalCustomModifiers(); // 0x003682B0
	public virtual Type[] GetRequiredCustomModifiers(); // 0x00368354
}

// Namespace: System.Reflection
[Serializable]
public struct ParameterModifier // TypeDefIndex: 622
{
	// Fields
	private bool[] _byref; // 0x08

	// Properties
	public bool Item { get; set; } // 0x000A651C 0x000A6524

	// Constructors
	public ParameterModifier(int parameterCount); // 0x000A6514

}

// Namespace: System.Reflection
[Serializable]
public sealed class Pointer : ISerializable // TypeDefIndex: 623
{
	// Fields
	private void * data; // 0x08
	private Type type; // 0x0C

	// Constructors
	private Pointer(); // 0x00368568

	// Methods
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00368570
	public static object Box(void * ptr, Type type); // 0x0036860C
	public static void * Unbox(object ptr); // 0x00368764
}

// Namespace: System.Reflection
[Serializable]
public enum PortableExecutableKinds // TypeDefIndex: 624
{
	NotAPortableExecutableImage = 0,
	ILOnly = 1,
	Required32Bit = 2,
	PE32Plus = 4,
	Unmanaged32Bit = 8
}

// Namespace: System.Reflection
[Serializable]
public enum ProcessorArchitecture // TypeDefIndex: 625
{
	None = 0,
	MSIL = 1,
	X86 = 2,
	IA64 = 3,
	Amd64 = 4
}

// Namespace: System.Reflection
[Serializable]
public enum PropertyAttributes // TypeDefIndex: 626
{
	None = 0,
	SpecialName = 512,
	RTSpecialName = 1024,
	HasDefault = 4096,
	Reserved2 = 8192,
	Reserved3 = 16384,
	Reserved4 = 32768,
	ReservedMask = 62464
}

// Namespace: System.Reflection
[Serializable]
public abstract class PropertyInfo : MemberInfo, _PropertyInfo // TypeDefIndex: 627
{
	// Properties
	public abstract PropertyAttributes Attributes { get; }
	public abstract bool CanRead { get; }
	public abstract bool CanWrite { get; }
	public bool IsSpecialName { get; } // 0x00368A54 
	public override MemberTypes MemberType { get; } // 0x00368A74 
	public abstract Type PropertyType { get; }

	// Constructors
	protected PropertyInfo(); // 0x0036882C

	// Methods
	private void System.Runtime.InteropServices._PropertyInfo.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x00368834
	private void System.Runtime.InteropServices._PropertyInfo.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x003688BC
	private void System.Runtime.InteropServices._PropertyInfo.GetTypeInfoCount(out uint pcTInfo); // 0x00368944
	private void System.Runtime.InteropServices._PropertyInfo.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x003689CC
	public MethodInfo[] GetAccessors(); // 0x00368A7C
	public abstract MethodInfo[] GetAccessors(bool nonPublic);
	public MethodInfo GetGetMethod(); // 0x00368A90
	public abstract MethodInfo GetGetMethod(bool nonPublic);
	public abstract ParameterInfo[] GetIndexParameters();
	public MethodInfo GetSetMethod(); // 0x00368AA4
	public abstract MethodInfo GetSetMethod(bool nonPublic);
	public virtual object GetValue(object obj, object[] index); // 0x00368AB8
	public abstract object GetValue(object obj, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture);
	public virtual void SetValue(object obj, object value, object[] index); // 0x00368AF0
	public abstract void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture);
	public virtual Type[] GetOptionalCustomModifiers(); // 0x00368B24
	public virtual Type[] GetRequiredCustomModifiers(); // 0x00368BB0
	public virtual object GetConstantValue(); // 0x00368C3C
	public virtual object GetRawConstantValue(); // 0x00368CC4
	virtual Type System.Runtime.InteropServices._PropertyInfo.GetType(); // 0x00368D4C
}

// Namespace: System.Reflection
[Serializable]
public sealed class ReflectionTypeLoadException : SystemException // TypeDefIndex: 628
{
	// Fields
	private Exception[] loaderExceptions; // 0x34
	private Type[] types; // 0x38

	// Properties
	public Type[] Types { get; } // 0x00368FE0 
	public Exception[] LoaderExceptions { get; } // 0x00368FE8 

	// Constructors
	public ReflectionTypeLoadException(Type[] classes, Exception[] exceptions); // 0x00368D54
	public ReflectionTypeLoadException(Type[] classes, Exception[] exceptions, string message); // 0x00368DD8
	private ReflectionTypeLoadException(SerializationInfo info, StreamingContext sc); // 0x00368E04

	// Methods
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00368FF0
}

// Namespace: System.Reflection
[Serializable]
public enum ResourceAttributes // TypeDefIndex: 629
{
	Public = 1,
	Private = 2
}

// Namespace: System.Reflection
[Serializable]
public enum ResourceLocation // TypeDefIndex: 630
{
	Embedded = 1,
	ContainedInAnotherAssembly = 2,
	ContainedInManifestFile = 4
}

// Namespace: System.Reflection
[Serializable]
public class StrongNameKeyPair : ISerializable, IDeserializationCallback // TypeDefIndex: 631
{
	// Fields
	private byte[] _publicKey; // 0x08
	private string _keyPairContainer; // 0x0C
	private bool _keyPairExported; // 0x10
	private byte[] _keyPairArray; // 0x14
	[NonSerialized]	private RSA _rsa; // 0x18

	// Properties
	public byte[] PublicKey { get; } // 0x00369A6C 

	// Constructors
	public StrongNameKeyPair(byte[] keyPairArray); // 0x003690D4
	public StrongNameKeyPair(FileStream keyPairFile); // 0x0036945C
	public StrongNameKeyPair(string keyPairContainer); // 0x003695C0
	protected StrongNameKeyPair(SerializationInfo info, StreamingContext context); // 0x00369688

	// Methods
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x003698C0
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender); // 0x00369A68
	private RSA GetRSA(); // 0x00369350
	private void LoadKey(byte[] key); // 0x003691A4
	internal StrongName StrongName(); // 0x00369E40
}

// Namespace: System.Reflection
[Serializable]
public class TargetException : Exception // TypeDefIndex: 632
{
	// Constructors
	public TargetException(); // 0x00369F04
	public TargetException(string message); // 0x00369F78
	public TargetException(string message, Exception inner); // 0x00369F80
	protected TargetException(SerializationInfo info, StreamingContext context); // 0x00369F88

}

// Namespace: System.Reflection
[Serializable]
public sealed class TargetInvocationException : Exception // TypeDefIndex: 633
{
	// Constructors
	public TargetInvocationException(Exception inner); // 0x00369FA8
	public TargetInvocationException(string message, Exception inner); // 0x0036A018
	internal TargetInvocationException(SerializationInfo info, StreamingContext sc); // 0x0036A020

}

// Namespace: System.Reflection
[Serializable]
public sealed class TargetParameterCountException : Exception // TypeDefIndex: 634
{
	// Constructors
	public TargetParameterCountException(); // 0x0036A040
	public TargetParameterCountException(string message); // 0x0036A0B4
	public TargetParameterCountException(string message, Exception inner); // 0x0036A0BC
	internal TargetParameterCountException(SerializationInfo info, StreamingContext context); // 0x0036A0C4

}

// Namespace: System.Reflection
[Serializable]
public enum TypeAttributes // TypeDefIndex: 635
{
	NotPublic = 0,
	AutoLayout = 0,
	Class = 0,
	AnsiClass = 0,
	Public = 1,
	NestedPublic = 2,
	NestedPrivate = 3,
	NestedFamily = 4,
	NestedAssembly = 5,
	NestedFamANDAssem = 6,
	VisibilityMask = 7,
	NestedFamORAssem = 7,
	SequentialLayout = 8,
	ExplicitLayout = 16,
	LayoutMask = 24,
	ClassSemanticsMask = 32,
	Interface = 32,
	Abstract = 128,
	Sealed = 256,
	SpecialName = 1024,
	RTSpecialName = 2048,
	Import = 4096,
	Serializable = 8192,
	UnicodeClass = 65536,
	AutoClass = 131072,
	StringFormatMask = 196608,
	CustomFormatClass = 196608,
	HasSecurity = 262144,
	ReservedMask = 264192,
	BeforeFieldInit = 1048576,
	CustomFormatMask = 12582912
}

// Namespace: System.Reflection
[Serializable]
public class TypeDelegator : Type // TypeDefIndex: 636
{
	// Fields
	protected Type typeImpl; // 0x0C

	// Properties
	public override Assembly Assembly { get; } // 0x0036A250 
	public override string AssemblyQualifiedName { get; } // 0x0036A284 
	public override Type BaseType { get; } // 0x0036A2B8 
	public override string FullName { get; } // 0x0036A2EC 
	public override Guid GUID { get; } // 0x0036A320 
	public override Module Module { get; } // 0x0036A35C 
	public override string Name { get; } // 0x0036A390 
	public override string Namespace { get; } // 0x0036A3C4 
	public override RuntimeTypeHandle TypeHandle { get; } // 0x0036A3F8 
	public override Type UnderlyingSystemType { get; } // 0x0036A42C 
	public override int MetadataToken { get; } // 0x0036AC10 

	// Constructors
	protected TypeDelegator(); // 0x0036A0E4
	public TypeDelegator(Type delegatingType); // 0x0036A168

	// Methods
	protected override TypeAttributes GetAttributeFlagsImpl(); // 0x0036A460
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x0036A48C
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr); // 0x0036A4EC
	public override object[] GetCustomAttributes(bool inherit); // 0x0036A528
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x0036A564
	public override Type GetElementType(); // 0x0036A5A8
	public override EventInfo GetEvent(string name, BindingFlags bindingAttr); // 0x0036A5DC
	public override EventInfo[] GetEvents(); // 0x0036A620
	public override EventInfo[] GetEvents(BindingFlags bindingAttr); // 0x0036A634
	public override FieldInfo GetField(string name, BindingFlags bindingAttr); // 0x0036A670
	public override FieldInfo[] GetFields(BindingFlags bindingAttr); // 0x0036A6B4
	public override Type GetInterface(string name, bool ignoreCase); // 0x0036A6F0
	public override InterfaceMapping GetInterfaceMap(Type interfaceType); // 0x0036A734
	public override Type[] GetInterfaces(); // 0x0036A778
	public override MemberInfo[] GetMember(string name, MemberTypes type, BindingFlags bindingAttr); // 0x0036A7AC
	public override MemberInfo[] GetMembers(BindingFlags bindingAttr); // 0x0036A804
	protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x0036A840
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr); // 0x0036A8A8
	public override Type GetNestedType(string name, BindingFlags bindingAttr); // 0x0036A8E4
	public override Type[] GetNestedTypes(BindingFlags bindingAttr); // 0x0036A928
	public override PropertyInfo[] GetProperties(BindingFlags bindingAttr); // 0x0036A964
	protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x0036A9A0
	protected override bool HasElementTypeImpl(); // 0x0036AA08
	public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters); // 0x0036AA34
	protected override bool IsArrayImpl(); // 0x0036AAC4
	protected override bool IsByRefImpl(); // 0x0036AAF0
	protected override bool IsCOMObjectImpl(); // 0x0036AB1C
	public override bool IsDefined(Type attributeType, bool inherit); // 0x0036AB48
	protected override bool IsPointerImpl(); // 0x0036AB8C
	protected override bool IsPrimitiveImpl(); // 0x0036ABB8
	protected override bool IsValueTypeImpl(); // 0x0036ABE4
}

// Namespace: System.Resources
public interface IResourceReader : IEnumerable, IDisposable // TypeDefIndex: 637
{
	// Methods
	void Close();
	IDictionaryEnumerator GetEnumerator();
}

// Namespace: System.Resources
public interface IResourceWriter : IDisposable // TypeDefIndex: 638
{
	// Methods
	void AddResource(string name, byte[] value);
	void AddResource(string name, object value);
	void AddResource(string name, string value);
	void Close();
	void Generate();
}

// Namespace: System.Resources
[Serializable]
public class MissingManifestResourceException : SystemException // TypeDefIndex: 639
{
	// Constructors
	public MissingManifestResourceException(); // 0x0036B8D8
	public MissingManifestResourceException(string message); // 0x0036B94C
	protected MissingManifestResourceException(SerializationInfo info, StreamingContext context); // 0x0036B954
	public MissingManifestResourceException(string message, Exception inner); // 0x0036B974

}

// Namespace: System.Resources
[Serializable]
public class MissingSatelliteAssemblyException : SystemException // TypeDefIndex: 640
{
	// Fields
	private string culture; // 0x34

	// Properties
	public string CultureName { get; } // 0x0036BA40 

	// Constructors
	public MissingSatelliteAssemblyException(); // 0x0036B97C
	public MissingSatelliteAssemblyException(string message); // 0x0036B9F0
	public MissingSatelliteAssemblyException(string message, string cultureName); // 0x0036B9F8
	protected MissingSatelliteAssemblyException(SerializationInfo info, StreamingContext context); // 0x0036BA18
	public MissingSatelliteAssemblyException(string message, Exception inner); // 0x0036BA38

}

// Namespace: System.Resources
public sealed class NeutralResourcesLanguageAttribute : Attribute // TypeDefIndex: 641
{
	// Fields
	private string culture; // 0x08
	private UltimateResourceFallbackLocation loc; // 0x0C

	// Properties
	public string CultureName { get; } // 0x0036BD64 
	public UltimateResourceFallbackLocation Location { get; } // 0x0036BD6C 

	// Constructors
	public NeutralResourcesLanguageAttribute(string cultureName); // 0x0036BBE4
	public NeutralResourcesLanguageAttribute(string cultureName, UltimateResourceFallbackLocation location); // 0x0036BCA0

}

// Namespace: System.Resources
[Serializable]
public class ResourceManager // TypeDefIndex: 642
{
	// Fields
	private static Hashtable ResourceCache; // 0x00
	private static Hashtable NonExistent; // 0x04
	public static readonly int HeaderVersionNumber; // 0x08
	public static readonly int MagicNumber; // 0x0C
	protected string BaseNameField; // 0x08
	protected Assembly MainAssembly; // 0x0C
	protected Hashtable ResourceSets; // 0x10
	private bool ignoreCase; // 0x14
	private Type resourceSource; // 0x18
	private Type resourceSetType; // 0x1C
	private string resourceDir; // 0x20
	private CultureInfo neutral_culture; // 0x24
	private UltimateResourceFallbackLocation fallbackLocation; // 0x28

	// Properties
	public virtual string BaseName { get; } // 0x0036CE1C 
	public virtual bool IgnoreCase { get; set; } // 0x0036CE24 0x0036CE2C
	public virtual Type ResourceSetType { get; } // 0x0036CE34 
	protected UltimateResourceFallbackLocation FallbackLocation { get; set; } // 0x0036F1AC 0x0036F1B4

	// Constructors
	protected ResourceManager(); // 0x0036BD74
	public ResourceManager(Type resourceSource); // 0x0036BE18
	public ResourceManager(string baseName, Assembly assembly); // 0x0036C5F0
	public ResourceManager(string baseName, Assembly assembly, Type usingResourceSet); // 0x0036C79C
	private ResourceManager(string baseName, string resourceDir, Type usingResourceSet); // 0x0036CAB0
	private static ResourceManager(); // 0x0036CCA0

	// Methods
	private static Hashtable GetResourceSets(Assembly assembly, string basename); // 0x0036BFA8
	private Type CheckResourceSetType(Type usingResourceSet, bool verifyType); // 0x0036C960
	public static ResourceManager CreateFileBasedResourceManager(string baseName, string resourceDir, Type usingResourceSet); // 0x0036CD94
	public virtual object GetObject(string name); // 0x0036CE3C
	public virtual object GetObject(string name, CultureInfo culture); // 0x0036CE50
	public virtual ResourceSet GetResourceSet(CultureInfo culture, bool createIfNotExists, bool tryParents); // 0x0036D124
	public virtual string GetString(string name); // 0x0036D274
	public virtual string GetString(string name, CultureInfo culture); // 0x0036D288
	protected virtual string GetResourceFileName(CultureInfo culture); // 0x0036D55C
	private string GetResourceFilePath(CultureInfo culture); // 0x0036D6E8
	private Stream GetManifestResourceStreamNoCase(Assembly ass, string fn); // 0x0036D7A4
	public UnmanagedMemoryStream GetStream(string name); // 0x0036DA7C
	public UnmanagedMemoryStream GetStream(string name, CultureInfo culture); // 0x0036DA84
	protected virtual ResourceSet InternalGetResourceSet(CultureInfo culture, bool createIfNotExists, bool tryParents); // 0x0036DFBC
	public virtual void ReleaseAllResources(); // 0x0036ECF0
	protected static CultureInfo GetNeutralResourcesLanguage(Assembly a); // 0x0036C470
	protected static Version GetSatelliteContractVersion(Assembly a); // 0x0036EA28
	private MissingManifestResourceException AssemblyResourceMissing(string fileName); // 0x0036EB80
	private string GetManifestResourceName(string fn); // 0x0036D940
}

// Namespace: System.Resources
internal enum PredefinedResourceType // TypeDefIndex: 643
{
	Null = 0,
	String = 1,
	Bool = 2,
	Char = 3,
	Byte = 4,
	SByte = 5,
	Int16 = 6,
	UInt16 = 7,
	Int32 = 8,
	UInt32 = 9,
	Int64 = 10,
	UInt64 = 11,
	Single = 12,
	Double = 13,
	Decimal = 14,
	DateTime = 15,
	TimeSpan = 16,
	ByteArray = 32,
	Stream = 33,
	FistCustom = 64
}

// Namespace: System.Resources
public sealed class ResourceReader : IEnumerable, IDisposable, IResourceReader // TypeDefIndex: 644
{
	// Fields
	private BinaryReader reader; // 0x08
	private object readerLock; // 0x0C
	private IFormatter formatter; // 0x10
	internal int resourceCount; // 0x14
	private int typeCount; // 0x18
	private string[] typeNames; // 0x1C
	private int[] hashes; // 0x20
	private ResourceInfo[] infos; // 0x24
	private int dataSectionOffset; // 0x28
	private long nameSectionOffset; // 0x30
	private int resource_ver; // 0x38
	private ResourceCacheItem[] cache; // 0x3C
	private object cache_lock; // 0x40

	// Constructors
	public ResourceReader(Stream stream); // 0x0036F1BC
	public ResourceReader(string fileName); // 0x0037017C

	// Methods
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x003702CC
	private void System.IDisposable.Dispose(); // 0x00370390
	private void ReadHeaders(); // 0x0036F3D4
	private void CreateResourceInfo(long position, ResourceInfo info); // 0x00370420
	private int Read7BitEncodedInt(); // 0x003706B0
	private object ReadValueVer2(int type_index); // 0x00370720
	private object ReadValueVer1(Type type); // 0x00370F48
	private object ReadNonPredefinedValue(Type exp_type); // 0x00370DBC
	private void LoadResourceValues(ResourceCacheItem[] store); // 0x00371780
	internal UnmanagedMemoryStream ResourceValueAsStream(string name, int index); // 0x00371AF8
	public void Close(); // 0x003720E8
	public IDictionaryEnumerator GetEnumerator(); // 0x0037212C
	public void GetResourceData(string resourceName, out string resourceType, out byte[] resourceData); // 0x0037224C
	private void GetResourceDataAt(int index, out string resourceType, out byte[] data); // 0x00372608
	private void Dispose(bool disposing); // 0x003703D4
}

// Namespace: 
private struct ResourceInfo // TypeDefIndex: 645
{
	// Fields
	public readonly long ValuePosition; // 0x08
	public readonly string ResourceName; // 0x10
	public readonly int TypeIndex; // 0x14

	// Constructors
	public ResourceInfo(string resourceName, long valuePosition, int type_index); // 0x000A6720

}

// Namespace: 
private struct ResourceCacheItem // TypeDefIndex: 646
{
	// Fields
	public readonly string ResourceName; // 0x08
	public readonly object ResourceValue; // 0x0C

	// Constructors
	public ResourceCacheItem(string name, object value); // 0x000A6694

}

// Namespace: 
internal sealed class ResourceEnumerator : IEnumerator, IDictionaryEnumerator // TypeDefIndex: 647
{
	// Fields
	private ResourceReader reader; // 0x08
	private int index; // 0x0C
	private bool finished; // 0x10

	// Properties
	public int Index { get; } // 0x00372ED0 
	public DictionaryEntry Entry { get; } // 0x00372ED8 
	public object Key { get; } // 0x003724A4 
	public object Value { get; } // 0x00373024 
	public UnmanagedMemoryStream ValueAsStream { get; } // 0x00373188 
	public object Current { get; } // 0x00373308 

	// Constructors
	internal ResourceEnumerator(ResourceReader readerToEnumerate); // 0x00372218

	// Methods
	public bool MoveNext(); // 0x00372BC0
	public void Reset(); // 0x0037338C
	private void FillCache(); // 0x00372D54
}

// Namespace: 
private sealed class <ResourceValueAsStream>c__AnonStorey2 // TypeDefIndex: 648
{
	// Fields
	internal IntPtr ptr; // 0x08

	// Constructors
	public <ResourceValueAsStream>c__AnonStorey2(); // 0x003720E0

	// Methods
	internal void <>m__1(object o, EventArgs e); // 0x00372CCC
}

// Namespace: System.Resources
[Serializable]
public class ResourceSet : IEnumerable, IDisposable // TypeDefIndex: 649
{
	// Fields
	[NonSerialized]	protected IResourceReader Reader; // 0x08
	protected Hashtable Table; // 0x0C
	private bool resources_read; // 0x10
	[NonSerialized]	private bool disposed; // 0x11

	// Constructors
	protected ResourceSet(); // 0x0037345C
	public ResourceSet(IResourceReader reader); // 0x003734E0
	public ResourceSet(Stream stream); // 0x003735C4
	internal ResourceSet(UnmanagedMemoryStream stream); // 0x00373668
	public ResourceSet(string fileName); // 0x0037370C

	// Methods
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x003737B0
	public virtual void Close(); // 0x003737C0
	public void Dispose(); // 0x003737F4
	protected virtual void Dispose(bool disposing); // 0x00373828
	public virtual Type GetDefaultReader(); // 0x00373918
	public virtual Type GetDefaultWriter(); // 0x003739A8
	public virtual IDictionaryEnumerator GetEnumerator(); // 0x00373A38
	private object GetObjectInternal(string name, bool ignoreCase); // 0x00373B24
	public virtual object GetObject(string name); // 0x00374070
	public virtual object GetObject(string name, bool ignoreCase); // 0x00374078
	private string GetStringInternal(string name, bool ignoreCase); // 0x0037407C
	public virtual string GetString(string name); // 0x0037419C
	public virtual string GetString(string name, bool ignoreCase); // 0x003741A4
	protected virtual void ReadResources(); // 0x003741A8
	internal UnmanagedMemoryStream GetStream(string name, bool ignoreCase); // 0x0036DBD4
}

// Namespace: System.Resources
public sealed class ResourceWriter : IDisposable, IResourceWriter // TypeDefIndex: 650
{
	// Fields
	private SortedList resources; // 0x08
	private Stream stream; // 0x0C

	// Properties
	internal Stream Stream { get; } // 0x00378400 

	// Constructors
	public ResourceWriter(Stream stream); // 0x0037461C
	public ResourceWriter(string fileName); // 0x00374808

	// Methods
	public void AddResource(string name, byte[] value); // 0x003749D0
	public void AddResource(string name, object value); // 0x00374BA8
	public void AddResource(string name, string value); // 0x00374D80
	public void Close(); // 0x00374F58
	public void Dispose(); // 0x00374FBC
	private void Dispose(bool disposing); // 0x00374F60
	public void AddResourceData(string name, string typeName, byte[] serializedData); // 0x00378100
	public void Generate(); // 0x00374FC4
	private int GetHash(string name); // 0x00378350
	private void Write7BitEncodedInt(BinaryWriter writer, int value); // 0x003783A8
}

// Namespace: 
private class TypeByNameObject // TypeDefIndex: 651
{
	// Fields
	public readonly string TypeName; // 0x08
	public readonly byte[] Value; // 0x0C

	// Constructors
	public TypeByNameObject(string typeName, byte[] value); // 0x00378284

}

// Namespace: System.Resources
[Serializable]
internal class RuntimeResourceSet : ResourceSet // TypeDefIndex: 652
{
	// Constructors
	public RuntimeResourceSet(UnmanagedMemoryStream stream); // 0x00378408
	public RuntimeResourceSet(Stream stream); // 0x0037840C
	public RuntimeResourceSet(string fileName); // 0x00378410

	// Methods
	public override object GetObject(string name); // 0x00378414
	public override object GetObject(string name, bool ignoreCase); // 0x003785F0
	private object CloneDisposableObjectIfPossible(object value); // 0x003784E0
}

// Namespace: System.Resources
public sealed class SatelliteContractVersionAttribute : Attribute // TypeDefIndex: 653
{
	// Fields
	private Version ver; // 0x08

	// Properties
	public string Version { get; } // 0x0036F180 

	// Constructors
	public SatelliteContractVersionAttribute(string version); // 0x003786C0

}

// Namespace: System.Resources
[Serializable]
public enum UltimateResourceFallbackLocation // TypeDefIndex: 654
{
	MainAssembly = 0,
	Satellite = 1
}

// Namespace: System.Resources
internal enum Win32ResourceType // TypeDefIndex: 655
{
	RT_CURSOR = 1,
	RT_BITMAP = 2,
	RT_ICON = 3,
	RT_MENU = 4,
	RT_DIALOG = 5,
	RT_STRING = 6,
	RT_FONTDIR = 7,
	RT_FONT = 8,
	RT_ACCELERATOR = 9,
	RT_RCDATA = 10,
	RT_MESSAGETABLE = 11,
	RT_GROUP_CURSOR = 12,
	RT_GROUP_ICON = 14,
	RT_VERSION = 16,
	RT_DLGINCLUDE = 17,
	RT_PLUGPLAY = 19,
	RT_VXD = 20,
	RT_ANICURSOR = 21,
	RT_ANIICON = 22,
	RT_HTML = 23
}

// Namespace: System.Resources
internal class NameOrId // TypeDefIndex: 656
{
	// Fields
	private string name; // 0x08
	private int id; // 0x0C

	// Properties
	public bool IsName { get; } // 0x0036BA88 
	public string Name { get; } // 0x0036BA98 
	public int Id { get; } // 0x0036BAA0 

	// Constructors
	public NameOrId(string name); // 0x0036BA48
	public NameOrId(int id); // 0x0036BA68

	// Methods
	public override string ToString(); // 0x0036BAA8
}

// Namespace: System.Resources
internal abstract class Win32Resource // TypeDefIndex: 657
{
	// Fields
	private NameOrId type; // 0x08
	private NameOrId name; // 0x0C
	private int language; // 0x10

	// Properties
	public Win32ResourceType ResourceType { get; } // 0x0037997C 
	public NameOrId Name { get; } // 0x003799C8 
	public NameOrId Type { get; } // 0x003799D0 
	public int Language { get; } // 0x003799D8 

	// Constructors
	internal Win32Resource(NameOrId type, NameOrId name, int language); // 0x0037877C
	internal Win32Resource(Win32ResourceType type, int name, int language); // 0x00378844

	// Methods
	public abstract void WriteTo(Stream s);
	public override string ToString(); // 0x003799E0
}

// Namespace: System.Resources
internal class Win32EncodedResource : Win32Resource // TypeDefIndex: 658
{
	// Fields
	private byte[] data; // 0x14

	// Properties
	public byte[] Data { get; } // 0x003787AC 

	// Constructors
	internal Win32EncodedResource(NameOrId type, NameOrId name, int language, byte[] data); // 0x00378744

	// Methods
	public override void WriteTo(Stream s); // 0x003787B4
}

// Namespace: System.Resources
internal class Win32IconResource : Win32Resource // TypeDefIndex: 659
{
	// Fields
	private ICONDIRENTRY icon; // 0x14

	// Properties
	public ICONDIRENTRY Icon { get; } // 0x00379388 

	// Constructors
	public Win32IconResource(int id, int language, ICONDIRENTRY icon); // 0x00379358

	// Methods
	public override void WriteTo(Stream s); // 0x00379390
}

// Namespace: System.Resources
internal class Win32GroupIconResource : Win32Resource // TypeDefIndex: 660
{
	// Fields
	private Win32IconResource[] icons; // 0x14

	// Constructors
	public Win32GroupIconResource(int id, int language, Win32IconResource[] icons); // 0x00378814

	// Methods
	public override void WriteTo(Stream s); // 0x003788F0
}

// Namespace: System.Resources
internal class Win32VersionResource : Win32Resource // TypeDefIndex: 661
{
	// Fields
	public string[] WellKnownProperties; // 0x14
	private long signature; // 0x18
	private int struct_version; // 0x20
	private long file_version; // 0x28
	private long product_version; // 0x30
	private int file_flags_mask; // 0x38
	private int file_flags; // 0x3C
	private int file_os; // 0x40
	private int file_type; // 0x44
	private int file_subtype; // 0x48
	private long file_date; // 0x50
	private int file_lang; // 0x58
	private int file_codepage; // 0x5C
	private Hashtable properties; // 0x60

	// Properties
	public string Version { get; set; } // 0x0037A26C 0x0037A6C4
	public virtual string Item { set; } // 0x0037A9D8
	public virtual string Comments { get; set; } // 0x0037AA1C 0x0037AAD8
	public virtual string CompanyName { get; set; } // 0x0037ABD0 0x0037AC8C
	public virtual string LegalCopyright { get; set; } // 0x0037AD84 0x0037AE40
	public virtual string LegalTrademarks { get; set; } // 0x0037AF38 0x0037AFF4
	public virtual string OriginalFilename { get; set; } // 0x0037B0EC 0x0037B1A8
	public virtual string ProductName { get; set; } // 0x0037B2A0 0x0037B35C
	public virtual string ProductVersion { get; set; } // 0x0037B454 0x0037B510
	public virtual string InternalName { get; set; } // 0x0037B844 0x0037B900
	public virtual string FileDescription { get; set; } // 0x0037B9F8 0x0037BAB4
	public virtual int FileLanguage { get; set; } // 0x0037BBAC 0x0037BBB4
	public virtual string FileVersion { get; set; } // 0x0037BBBC 0x0037BC78

	// Constructors
	public Win32VersionResource(int id, int language, bool compilercontext); // 0x00379CB0

	// Methods
	private void emit_padding(BinaryWriter w); // 0x0037BFAC
	private void patch_length(BinaryWriter w, long len_pos); // 0x0037C028
	public override void WriteTo(Stream ms); // 0x0037C118
}

// Namespace: System.Resources
internal class Win32ResFileReader // TypeDefIndex: 662
{
	// Fields
	private Stream res_file; // 0x08

	// Constructors
	public Win32ResFileReader(Stream s); // 0x00379428

	// Methods
	private int read_int16(); // 0x00379448
	private int read_int32(); // 0x003794C4
	private void read_padding(); // 0x003794FC
	private NameOrId read_ordinal(); // 0x00379544
	public ICollection ReadResources(); // 0x003797A4
}

// Namespace: System.Resources
internal class ICONDIRENTRY // TypeDefIndex: 663
{
	// Fields
	public byte bWidth; // 0x08
	public byte bHeight; // 0x09
	public byte bColorCount; // 0x0A
	public byte bReserved; // 0x0B
	public short wPlanes; // 0x0C
	public short wBitCount; // 0x0E
	public int dwBytesInRes; // 0x10
	public int dwImageOffset; // 0x14
	public byte[] image; // 0x18

	// Constructors
	public ICONDIRENTRY(); // 0x0036B50C

	// Methods
	public override string ToString(); // 0x0036B514
}

// Namespace: System.Resources
internal class Win32IconFileReader // TypeDefIndex: 664
{
	// Fields
	private Stream iconFile; // 0x08

	// Constructors
	public Win32IconFileReader(Stream s); // 0x00378C50

	// Methods
	public ICONDIRENTRY[] ReadIcons(); // 0x00378C70
}

// Namespace: System.Runtime.CompilerServices
public sealed class AccessedThroughPropertyAttribute : Attribute // TypeDefIndex: 665
{
	// Fields
	private string name; // 0x08

	// Properties
	public string PropertyName { get; } // 0x0037D03C 

	// Constructors
	public AccessedThroughPropertyAttribute(string propertyName); // 0x0037D01C

}

// Namespace: System.Runtime.CompilerServices
public class CallConvCdecl // TypeDefIndex: 666
{
	// Constructors
	public CallConvCdecl(); // 0x0037D044

}

// Namespace: System.Runtime.CompilerServices
public class CallConvFastcall // TypeDefIndex: 667
{
	// Constructors
	public CallConvFastcall(); // 0x0037D04C

}

// Namespace: System.Runtime.CompilerServices
public class CallConvStdcall // TypeDefIndex: 668
{
	// Constructors
	public CallConvStdcall(); // 0x0037D054

}

// Namespace: System.Runtime.CompilerServices
public class CallConvThiscall // TypeDefIndex: 669
{
	// Constructors
	public CallConvThiscall(); // 0x0037D05C

}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public enum CompilationRelaxations // TypeDefIndex: 670
{
	NoStringInterning = 8
}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public class CompilationRelaxationsAttribute : Attribute // TypeDefIndex: 671
{
	// Fields
	private int relax; // 0x08

	// Properties
	public int CompilationRelaxations { get; } // 0x0037D0A4 

	// Constructors
	public CompilationRelaxationsAttribute(int relaxations); // 0x0037D064
	public CompilationRelaxationsAttribute(CompilationRelaxations relaxations); // 0x0037D084

}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public class CompilerGlobalScopeAttribute : Attribute // TypeDefIndex: 672
{
	// Constructors
	public CompilerGlobalScopeAttribute(); // 0x0037D0B4

}

// Namespace: System.Runtime.CompilerServices
public static class CompilerMarshalOverride // TypeDefIndex: 673
{
}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public abstract class CustomConstantAttribute : Attribute // TypeDefIndex: 674
{
	// Properties
	public abstract object Value { get; }

	// Constructors
	protected CustomConstantAttribute(); // 0x0037D0BC

}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class DateTimeConstantAttribute : CustomConstantAttribute // TypeDefIndex: 675
{
	// Fields
	private long ticks; // 0x08

	// Properties
	internal long Ticks { get; } // 0x0037D0EC 
	public override object Value { get; } // 0x0037D0F4 

	// Constructors
	public DateTimeConstantAttribute(long ticks); // 0x0037D0C4

}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class DefaultDependencyAttribute : Attribute // TypeDefIndex: 676
{
	// Fields
	private LoadHint hint; // 0x08

	// Properties
	public LoadHint LoadHint { get; } // 0x0037D2F8 

	// Constructors
	public DefaultDependencyAttribute(LoadHint loadHintArgument); // 0x0037D2D8

}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class DependencyAttribute : Attribute // TypeDefIndex: 677
{
	// Fields
	private string dependentAssembly; // 0x08
	private LoadHint hint; // 0x0C

	// Properties
	public string DependentAssembly { get; } // 0x0037D328 
	public LoadHint LoadHint { get; } // 0x0037D330 

	// Constructors
	public DependencyAttribute(string dependentAssemblyArgument, LoadHint loadHintArgument); // 0x0037D300

}

// Namespace: System.Runtime.CompilerServices
public class DiscardableAttribute : Attribute // TypeDefIndex: 678
{
	// Constructors
	public DiscardableAttribute(); // 0x0037D338

}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class FixedAddressValueTypeAttribute : Attribute // TypeDefIndex: 679
{
	// Constructors
	public FixedAddressValueTypeAttribute(); // 0x0037D340

}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class HasCopySemanticsAttribute : Attribute // TypeDefIndex: 680
{
	// Constructors
	public HasCopySemanticsAttribute(); // 0x0037D380

}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class IDispatchConstantAttribute : CustomConstantAttribute // TypeDefIndex: 681
{
	// Properties
	public override object Value { get; } // 0x0037D390 

	// Constructors
	public IDispatchConstantAttribute(); // 0x0037D388

}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class IUnknownConstantAttribute : CustomConstantAttribute // TypeDefIndex: 682
{
	// Properties
	public override object Value { get; } // 0x0037D3A0 

	// Constructors
	public IUnknownConstantAttribute(); // 0x0037D398

}

// Namespace: System.Runtime.CompilerServices
public static class IsBoxed // TypeDefIndex: 683
{
}

// Namespace: System.Runtime.CompilerServices
public static class IsByValue // TypeDefIndex: 684
{
}

// Namespace: System.Runtime.CompilerServices
public static class IsConst // TypeDefIndex: 685
{
}

// Namespace: System.Runtime.CompilerServices
public static class IsCopyConstructed // TypeDefIndex: 686
{
}

// Namespace: System.Runtime.CompilerServices
public static class IsExplicitlyDereferenced // TypeDefIndex: 687
{
}

// Namespace: System.Runtime.CompilerServices
public static class IsImplicitlyDereferenced // TypeDefIndex: 688
{
}

// Namespace: System.Runtime.CompilerServices
public static class IsJitIntrinsic // TypeDefIndex: 689
{
}

// Namespace: System.Runtime.CompilerServices
public static class IsLong // TypeDefIndex: 690
{
}

// Namespace: System.Runtime.CompilerServices
public static class IsPinned // TypeDefIndex: 691
{
}

// Namespace: System.Runtime.CompilerServices
public static class IsSignUnspecifiedByte // TypeDefIndex: 692
{
}

// Namespace: System.Runtime.CompilerServices
public static class IsUdtReturn // TypeDefIndex: 693
{
}

// Namespace: System.Runtime.CompilerServices
public static class IsVolatile // TypeDefIndex: 694
{
}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public enum LoadHint // TypeDefIndex: 695
{
	Default = 0,
	Always = 1,
	Sometimes = 2
}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public enum MethodCodeType // TypeDefIndex: 696
{
	IL = 0,
	Native = 1,
	OPTIL = 2,
	Runtime = 3
}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public enum MethodImplOptions // TypeDefIndex: 697
{
	Unmanaged = 4,
	NoInlining = 8,
	ForwardRef = 16,
	Synchronized = 32,
	NoOptimization = 64,
	PreserveSig = 128,
	InternalCall = 4096
}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class NativeCppClassAttribute : Attribute // TypeDefIndex: 698
{
	// Constructors
	public NativeCppClassAttribute(); // 0x0037D444

}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class RuntimeWrappedException : Exception // TypeDefIndex: 699
{
	// Fields
	private object wrapped_exception; // 0x34

	// Properties
	public object WrappedException { get; } // 0x0037E194 

	// Constructors
	private RuntimeWrappedException(); // 0x0037E18C

	// Methods
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0037E19C
}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class ScopelessEnumAttribute : Attribute // TypeDefIndex: 700
{
	// Constructors
	public ScopelessEnumAttribute(); // 0x0037E24C

}

// Namespace: System.Runtime.CompilerServices
public sealed class SpecialNameAttribute : Attribute // TypeDefIndex: 701
{
	// Constructors
	public SpecialNameAttribute(); // 0x0037E254

}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class StringFreezingAttribute : Attribute // TypeDefIndex: 702
{
	// Constructors
	public StringFreezingAttribute(); // 0x0037E25C

}

// Namespace: System.Runtime.CompilerServices
public sealed class SuppressIldasmAttribute : Attribute // TypeDefIndex: 703
{
	// Constructors
	public SuppressIldasmAttribute(); // 0x0037E264

}

// Namespace: System.Runtime.ConstrainedExecution
[Serializable]
public enum Cer // TypeDefIndex: 704
{
	None = 0,
	MayFail = 1,
	Success = 2
}

// Namespace: System.Runtime.ConstrainedExecution
[Serializable]
public enum Consistency // TypeDefIndex: 705
{
	MayCorruptProcess = 0,
	MayCorruptAppDomain = 1,
	MayCorruptInstance = 2,
	WillNotCorruptState = 3
}

// Namespace: System.Runtime.ConstrainedExecution
public abstract class CriticalFinalizerObject // TypeDefIndex: 706
{
	// Constructors
	protected CriticalFinalizerObject(); // 0x0037E29C

	// Methods
	protected override void Finalize(); // 0x0037E2A4
}

// Namespace: System.Runtime.ConstrainedExecution
public sealed class PrePrepareMethodAttribute : Attribute // TypeDefIndex: 707
{
	// Constructors
	public PrePrepareMethodAttribute(); // 0x0037E2AC

}

// Namespace: System.Runtime.ConstrainedExecution
public sealed class ReliabilityContractAttribute : Attribute // TypeDefIndex: 708
{
	// Fields
	private Consistency consistency; // 0x08
	private Cer cer; // 0x0C

	// Properties
	public Cer Cer { get; } // 0x0037E2DC 
	public Consistency ConsistencyGuarantee { get; } // 0x0037E2E4 

	// Constructors
	public ReliabilityContractAttribute(Consistency consistencyGuarantee, Cer cer); // 0x0037E2B4

}

// Namespace: System.Runtime.Hosting
[Serializable]
public sealed class ActivationArguments // TypeDefIndex: 709
{
	// Fields
	private ActivationContext _context; // 0x08
	private ApplicationIdentity _identity; // 0x0C
	private string[] _data; // 0x10

	// Properties
	public ActivationContext ActivationContext { get; } // 0x0037E610 
	public string[] ActivationData { get; } // 0x0037E618 
	public ApplicationIdentity ApplicationIdentity { get; } // 0x0037E620 

	// Constructors
	public ActivationArguments(ActivationContext activationData); // 0x0037E300
	public ActivationArguments(ApplicationIdentity applicationIdentity); // 0x0037E3C4
	public ActivationArguments(ActivationContext activationContext, string[] activationData); // 0x0037E480
	public ActivationArguments(ApplicationIdentity applicationIdentity, string[] activationData); // 0x0037E54C

}

// Namespace: System.Runtime.Hosting
public class ApplicationActivator // TypeDefIndex: 710
{
	// Constructors
	public ApplicationActivator(); // 0x0037E628

	// Methods
	public virtual ObjectHandle CreateInstance(ActivationContext activationContext); // 0x0037E630
	public virtual ObjectHandle CreateInstance(ActivationContext activationContext, string[] activationCustomData); // 0x0037E644
	protected static ObjectHandle CreateInstanceHelper(AppDomainSetup adSetup); // 0x0037E71C
}

// Namespace: System.Runtime.InteropServices.ComTypes
public struct BINDPTR // TypeDefIndex: 711
{
	// Fields
	public IntPtr lpfuncdesc; // 0x08
	public IntPtr lptcomp; // 0x08
	public IntPtr lpvardesc; // 0x08

}

// Namespace: System.Runtime.InteropServices.ComTypes
public struct BIND_OPTS // TypeDefIndex: 712
{
	// Fields
	public int cbStruct; // 0x08
	public int grfFlags; // 0x0C
	public int grfMode; // 0x10
	public int dwTickCountDeadline; // 0x14

}

// Namespace: System.Runtime.InteropServices.ComTypes
[Serializable]
public enum CALLCONV // TypeDefIndex: 713
{
	CC_CDECL = 1,
	CC_PASCAL = 2,
	CC_MSCPASCAL = 2,
	CC_MACPASCAL = 3,
	CC_STDCALL = 4,
	CC_RESERVED = 5,
	CC_SYSCALL = 6,
	CC_MPWCDECL = 7,
	CC_MPWPASCAL = 8,
	CC_MAX = 9
}

// Namespace: System.Runtime.InteropServices.ComTypes
public struct CONNECTDATA // TypeDefIndex: 714
{
	// Fields
	public object pUnk; // 0x08
	public int dwCookie; // 0x0C

}

// Namespace: System.Runtime.InteropServices.ComTypes
[Serializable]
public enum DESCKIND // TypeDefIndex: 715
{
	DESCKIND_NONE = 0,
	DESCKIND_FUNCDESC = 1,
	DESCKIND_VARDESC = 2,
	DESCKIND_TYPECOMP = 3,
	DESCKIND_IMPLICITAPPOBJ = 4,
	DESCKIND_MAX = 5
}

// Namespace: System.Runtime.InteropServices.ComTypes
public struct DISPPARAMS // TypeDefIndex: 716
{
	// Fields
	public IntPtr rgvarg; // 0x08
	public IntPtr rgdispidNamedArgs; // 0x0C
	public int cArgs; // 0x10
	public int cNamedArgs; // 0x14

}

// Namespace: System.Runtime.InteropServices.ComTypes
public struct ELEMDESC // TypeDefIndex: 717
{
	// Fields
	public TYPEDESC tdesc; // 0x08
	public DESCUNION desc; // 0x10

}

// Namespace: 
public struct DESCUNION // TypeDefIndex: 718
{
	// Fields
	public IDLDESC idldesc; // 0x08
	public PARAMDESC paramdesc; // 0x08

}

// Namespace: System.Runtime.InteropServices.ComTypes
public struct EXCEPINFO // TypeDefIndex: 719
{
	// Fields
	public short wCode; // 0x08
	public short wReserved; // 0x0A
	public string bstrSource; // 0x0C
	public string bstrDescription; // 0x10
	public string bstrHelpFile; // 0x14
	public int dwHelpContext; // 0x18
	public IntPtr pvReserved; // 0x1C
	public IntPtr pfnDeferredFillIn; // 0x20
	public int scode; // 0x24

}

// Namespace: System.Runtime.InteropServices.ComTypes
public struct FILETIME // TypeDefIndex: 720
{
	// Fields
	public int dwLowDateTime; // 0x08
	public int dwHighDateTime; // 0x0C

}

// Namespace: System.Runtime.InteropServices.ComTypes
public struct FUNCDESC // TypeDefIndex: 721
{
	// Fields
	public int memid; // 0x08
	public IntPtr lprgscode; // 0x0C
	public IntPtr lprgelemdescParam; // 0x10
	public FUNCKIND funckind; // 0x14
	public INVOKEKIND invkind; // 0x18
	public CALLCONV callconv; // 0x1C
	public short cParams; // 0x20
	public short cParamsOpt; // 0x22
	public short oVft; // 0x24
	public short cScodes; // 0x26
	public ELEMDESC elemdescFunc; // 0x28
	public short wFuncFlags; // 0x38

}

// Namespace: System.Runtime.InteropServices.ComTypes
[Serializable]
public enum FUNCFLAGS // TypeDefIndex: 722
{
	FUNCFLAG_FRESTRICTED = 1,
	FUNCFLAG_FSOURCE = 2,
	FUNCFLAG_FBINDABLE = 4,
	FUNCFLAG_FREQUESTEDIT = 8,
	FUNCFLAG_FDISPLAYBIND = 16,
	FUNCFLAG_FDEFAULTBIND = 32,
	FUNCFLAG_FHIDDEN = 64,
	FUNCFLAG_FUSESGETLASTERROR = 128,
	FUNCFLAG_FDEFAULTCOLLELEM = 256,
	FUNCFLAG_FUIDEFAULT = 512,
	FUNCFLAG_FNONBROWSABLE = 1024,
	FUNCFLAG_FREPLACEABLE = 2048,
	FUNCFLAG_FIMMEDIATEBIND = 4096
}

// Namespace: System.Runtime.InteropServices.ComTypes
[Serializable]
public enum FUNCKIND // TypeDefIndex: 723
{
	FUNC_VIRTUAL = 0,
	FUNC_PUREVIRTUAL = 1,
	FUNC_NONVIRTUAL = 2,
	FUNC_STATIC = 3,
	FUNC_DISPATCH = 4
}

// Namespace: System.Runtime.InteropServices.ComTypes
[ComImport]public interface IBindCtx // TypeDefIndex: 724
{
	// Methods
	void RegisterObjectBound(object punk); // 0x0037F5AC
	void RevokeObjectBound(object punk); // 0x0037F674
	void ReleaseBoundObjects(); // 0x0037F73C
	void SetBindOptions(BIND_OPTS pbindopts); // 0x0037F778
	void GetBindOptions(BIND_OPTS pbindopts); // 0x0037F7BC
	void GetRunningObjectTable(out IRunningObjectTable pprot); // 0x0037F800
	void RegisterObjectParam(string pszKey, object punk); // 0x0037F914
	void GetObjectParam(string pszKey, out object ppunk); // 0x0037F9EC
	void EnumObjectParam(out IEnumString ppenum); // 0x0037FB10
	int RevokeObjectParam(string pszKey); // 0x0037FC24
}

// Namespace: System.Runtime.InteropServices.ComTypes
[ComImport]public interface IConnectionPoint // TypeDefIndex: 725
{
	// Methods
	void GetConnectionInterface(out Guid pIID); // 0x0037FC88
	void GetConnectionPointContainer(out IConnectionPointContainer ppCPC); // 0x0037FCCC
	void Advise(object pUnkSink, out int pdwCookie); // 0x0037FDE0
	void Unadvise(int dwCookie); // 0x0037FEB0
	void EnumConnections(out IEnumConnections ppEnum); // 0x0037FEF4
}

// Namespace: System.Runtime.InteropServices.ComTypes
[ComImport]public interface IConnectionPointContainer // TypeDefIndex: 726
{
	// Methods
	void EnumConnectionPoints(out IEnumConnectionPoints ppEnum); // 0x00380008
	void FindConnectionPoint(Guid riid, out IConnectionPoint ppCP); // 0x0038011C
}

// Namespace: System.Runtime.InteropServices.ComTypes
public struct IDLDESC // TypeDefIndex: 727
{
	// Fields
	public IntPtr dwReserved; // 0x08
	public IDLFLAG wIDLFlags; // 0x0C

}

// Namespace: System.Runtime.InteropServices.ComTypes
[Serializable]
public enum IDLFLAG // TypeDefIndex: 728
{
	IDLFLAG_NONE = 0,
	IDLFLAG_FIN = 1,
	IDLFLAG_FOUT = 2,
	IDLFLAG_FLCID = 4,
	IDLFLAG_FRETVAL = 8
}

// Namespace: System.Runtime.InteropServices.ComTypes
[ComImport]public interface IEnumConnectionPoints // TypeDefIndex: 729
{
	// Methods
	int Next(int celt, out IConnectionPoint[] rgelt, IntPtr pceltFetched); // 0x00380238
	int Skip(int celt); // 0x00380264
	void Reset(); // 0x003802C0
	void Clone(out IEnumConnectionPoints ppenum); // 0x003802FC
}

// Namespace: System.Runtime.InteropServices.ComTypes
[ComImport]public interface IEnumConnections // TypeDefIndex: 730
{
	// Methods
	int Next(int celt, out CONNECTDATA[] rgelt, IntPtr pceltFetched); // 0x00380410
	int Skip(int celt); // 0x00380554
	void Reset(); // 0x003805B0
	void Clone(out IEnumConnections ppenum); // 0x003805EC
}

// Namespace: System.Runtime.InteropServices.ComTypes
[ComImport]public interface IEnumMoniker // TypeDefIndex: 731
{
	// Methods
	int Next(int celt, out IMoniker[] rgelt, IntPtr pceltFetched); // 0x00380700
	int Skip(int celt); // 0x0038072C
	void Reset(); // 0x00380788
	void Clone(out IEnumMoniker ppenum); // 0x003807C4
}

// Namespace: System.Runtime.InteropServices.ComTypes
[ComImport]public interface IEnumString // TypeDefIndex: 732
{
	// Methods
	int Next(int celt, out string[] rgelt, IntPtr pceltFetched); // 0x003808D8
	int Skip(int celt); // 0x003809E8
	void Reset(); // 0x00380A44
	void Clone(out IEnumString ppenum); // 0x00380A80
}

// Namespace: System.Runtime.InteropServices.ComTypes
[ComImport]public interface IEnumVARIANT // TypeDefIndex: 733
{
	// Methods
	int Next(int celt, out object[] rgVar, IntPtr pceltFetched); // 0x00380B94
	int Skip(int celt); // 0x00380BE0
	int Reset(); // 0x00380C3C
	IEnumVARIANT Clone(); // 0x00380C90
}

// Namespace: System.Runtime.InteropServices.ComTypes
[Serializable]
public enum IMPLTYPEFLAGS // TypeDefIndex: 734
{
	IMPLTYPEFLAG_FDEFAULT = 1,
	IMPLTYPEFLAG_FSOURCE = 2,
	IMPLTYPEFLAG_FRESTRICTED = 4,
	IMPLTYPEFLAG_FDEFAULTVTABLE = 8
}

// Namespace: System.Runtime.InteropServices.ComTypes
[ComImport]public interface IMoniker // TypeDefIndex: 735
{
	// Methods
	void GetClassID(out Guid pClassID); // 0x00380D94
	int IsDirty(); // 0x00380DD8
	void Load(IStream pStm); // 0x00380E2C
	void Save(IStream pStm, bool fClearDirty); // 0x00380EF4
	void GetSizeMax(out long pcbSize); // 0x00380FC4
	void BindToObject(IBindCtx pbc, IMoniker pmkToLeft, Guid riidResult, out object ppvResult); // 0x00381008
	void BindToStorage(IBindCtx pbc, IMoniker pmkToLeft, Guid riid, out object ppvObj); // 0x00381230
	void Reduce(IBindCtx pbc, int dwReduceHowFar, IMoniker ppmkToLeft, out IMoniker ppmkReduced); // 0x00381458
	void ComposeWith(IMoniker pmkRight, bool fOnlyIfNotGeneric, out IMoniker ppmkComposite); // 0x003816E4
	void Enum(bool fForward, out IEnumMoniker ppenumMoniker); // 0x00381888
	int IsEqual(IMoniker pmkOtherMoniker); // 0x003819A4
	void Hash(out int pdwHash); // 0x00381A80
	int IsRunning(IBindCtx pbc, IMoniker pmkToLeft, IMoniker pmkNewlyRunning); // 0x00381AC4
	void GetTimeOfLastChange(IBindCtx pbc, IMoniker pmkToLeft, out FILETIME pFileTime); // 0x00381CA4
	void Inverse(out IMoniker ppmk); // 0x00381DF4
	void CommonPrefixWith(IMoniker pmkOther, out IMoniker ppmkPrefix); // 0x00381F08
	void RelativePathTo(IMoniker pmkOther, out IMoniker ppmkRelPath); // 0x003820A4
	void GetDisplayName(IBindCtx pbc, IMoniker pmkToLeft, out string ppszDisplayName); // 0x00382240
	void ParseDisplayName(IBindCtx pbc, IMoniker pmkToLeft, string pszDisplayName, out int pchEaten, out IMoniker ppmkOut); // 0x003823B0
	int IsSystemMoniker(out int pdwMksys); // 0x003825E8
}

// Namespace: System.Runtime.InteropServices.ComTypes
[Serializable]
public enum INVOKEKIND // TypeDefIndex: 736
{
	INVOKE_FUNC = 1,
	INVOKE_PROPERTYGET = 2,
	INVOKE_PROPERTYPUT = 4,
	INVOKE_PROPERTYPUTREF = 8
}

// Namespace: System.Runtime.InteropServices.ComTypes
[ComImport]public interface IPersistFile // TypeDefIndex: 737
{
	// Methods
	void GetClassID(out Guid pClassID); // 0x00382644
	int IsDirty(); // 0x00382688
	void Load(string pszFileName, int dwMode); // 0x003826DC
	void Save(string pszFileName, bool fRemember); // 0x00382730
	void SaveCompleted(string pszFileName); // 0x00382784
	void GetCurFile(out string ppszFileName); // 0x003827D0
}

// Namespace: System.Runtime.InteropServices.ComTypes
[ComImport]public interface IRunningObjectTable // TypeDefIndex: 738
{
	// Methods
	int Register(int grfFlags, object punkObject, IMoniker pmkObjectName); // 0x00382838
	void Revoke(int dwRegister); // 0x003829A0
	int IsRunning(IMoniker pmkObjectName); // 0x003829E4
	int GetObject(IMoniker pmkObjectName, out object ppunkObject); // 0x00382AC0
	void NoteChangeTime(int dwRegister, FILETIME pfiletime); // 0x00382C68
	int GetTimeOfLastChange(IMoniker pmkObjectName, out FILETIME pfiletime); // 0x00382CB4
	void EnumRunning(out IEnumMoniker ppenumMoniker); // 0x00382D98
}

// Namespace: System.Runtime.InteropServices.ComTypes
[ComImport]public interface IStream // TypeDefIndex: 739
{
	// Methods
	void Read(out byte[] pv, int cb, IntPtr pcbRead); // 0x00382EAC
	void Write(byte[] pv, int cb, IntPtr pcbWritten); // 0x00382F64
	void Seek(long dlibMove, int dwOrigin, IntPtr plibNewPosition); // 0x00382FC0
	void SetSize(long libNewSize); // 0x00383024
	void CopyTo(IStream pstm, long cb, IntPtr pcbRead, IntPtr pcbWritten); // 0x00383070
	void Commit(int grfCommitFlags); // 0x00383164
	void Revert(); // 0x003831A8
	void LockRegion(long libOffset, long cb, int dwLockType); // 0x003831E4
	void UnlockRegion(long libOffset, long cb, int dwLockType); // 0x00383250
	void Stat(out STATSTG pstatstg, int grfStatFlag); // 0x003832BC
	void Clone(out IStream ppstm); // 0x00383360
}

// Namespace: System.Runtime.InteropServices.ComTypes
[ComImport]public interface ITypeComp // TypeDefIndex: 740
{
	// Methods
	void Bind(string szName, int lHashVal, short wFlags, out ITypeInfo ppTInfo, out DESCKIND pDescKind, out BINDPTR pBindPtr); // 0x00383474
	void BindType(string szName, int lHashVal, out ITypeInfo ppTInfo, out ITypeComp ppTComp); // 0x003835B8
}

// Namespace: System.Runtime.InteropServices.ComTypes
[ComImport]public interface ITypeInfo // TypeDefIndex: 741
{
	// Methods
	void GetTypeAttr(out IntPtr ppTypeAttr); // 0x00383770
	void GetTypeComp(out ITypeComp ppTComp); // 0x003837B4
	void GetFuncDesc(int index, out IntPtr ppFuncDesc); // 0x003838C8
	void GetVarDesc(int index, out IntPtr ppVarDesc); // 0x00383914
	void GetNames(int memid, out string[] rgBstrNames, int cMaxNames, out int pcNames); // 0x00383960
	void GetRefTypeOfImplType(int index, out int href); // 0x00383A64
	void GetImplTypeFlags(int index, out IMPLTYPEFLAGS pImplTypeFlags); // 0x00383AB0
	void GetIDsOfNames(string[] rgszNames, int cNames, out int[] pMemId); // 0x00383AFC
	void Invoke(object pvInstance, int memid, short wFlags, DISPPARAMS pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, out int puArgErr); // 0x00383C68
	void GetDocumentation(int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile); // 0x00383D64
	void GetDllEntry(int memid, INVOKEKIND invKind, IntPtr pBstrDllName, IntPtr pBstrName, IntPtr pwOrdinal); // 0x00383E24
	void GetRefTypeInfo(int hRef, out ITypeInfo ppTI); // 0x00383E94
	void AddressOfMember(int memid, INVOKEKIND invKind, out IntPtr ppv); // 0x00383FB0
	void CreateInstance(object pUnkOuter, Guid riid, out object ppvObj); // 0x00384004
	void GetMops(int memid, out string pBstrMops); // 0x003841A8
	void GetContainingTypeLib(out ITypeLib ppTLB, out int pIndex); // 0x00384218
	void ReleaseTypeAttr(IntPtr pTypeAttr); // 0x00384334
	void ReleaseFuncDesc(IntPtr pFuncDesc); // 0x00384378
	void ReleaseVarDesc(IntPtr pVarDesc); // 0x003843BC
}

// Namespace: System.Runtime.InteropServices.ComTypes
[ComImport]public interface ITypeInfo2 : ITypeInfo // TypeDefIndex: 742
{
	// Methods
	void AddressOfMember(int memid, INVOKEKIND invKind, out IntPtr ppv); // 0x00384400
	void CreateInstance(object pUnkOuter, Guid riid, out object ppvObj); // 0x00384454
	void GetContainingTypeLib(out ITypeLib ppTLB, out int pIndex); // 0x003845F8
	void GetDllEntry(int memid, INVOKEKIND invKind, IntPtr pBstrDllName, IntPtr pBstrName, IntPtr pwOrdinal); // 0x00384714
	void GetDocumentation(int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile); // 0x00384784
	void GetIDsOfNames(string[] rgszNames, int cNames, out int[] pMemId); // 0x00384844
	void GetImplTypeFlags(int index, out IMPLTYPEFLAGS pImplTypeFlags); // 0x003849B0
	void GetTypeKind(out TYPEKIND pTypeKind); // 0x003849FC
	void GetTypeFlags(out int pTypeFlags); // 0x00384A40
	void GetFuncDesc(int index, out IntPtr ppFuncDesc); // 0x00384A84
	void GetMops(int memid, out string pBstrMops); // 0x00384AD0
	void GetNames(int memid, out string[] rgBstrNames, int cMaxNames, out int pcNames); // 0x00384B40
	void GetRefTypeInfo(int hRef, out ITypeInfo ppTI); // 0x00384C44
	void GetRefTypeOfImplType(int index, out int href); // 0x00384D60
	void GetTypeAttr(out IntPtr ppTypeAttr); // 0x00384DAC
	void GetTypeComp(out ITypeComp ppTComp); // 0x00384DF0
	void GetVarDesc(int index, out IntPtr ppVarDesc); // 0x00384F04
	void GetFuncIndexOfMemId(int memid, INVOKEKIND invKind, out int pFuncIndex); // 0x00384F50
	void GetVarIndexOfMemId(int memid, out int pVarIndex); // 0x00384FA4
	void GetCustData(Guid guid, out object pVarVal); // 0x00384FF0
	void GetFuncCustData(int index, Guid guid, out object pVarVal); // 0x00385064
	void GetParamCustData(int indexFunc, int indexParam, Guid guid, out object pVarVal); // 0x003850E0
	void GetVarCustData(int index, Guid guid, out object pVarVal); // 0x00385168
	void GetImplTypeCustData(int index, Guid guid, out object pVarVal); // 0x003851E4
	void GetDocumentation2(int memid, out string pbstrHelpString, out int pdwHelpStringContext, out string pbstrHelpStringDll); // 0x00385260
	void GetAllCustData(IntPtr pCustData); // 0x00385300
	void GetAllFuncCustData(int index, IntPtr pCustData); // 0x00385344
	void GetAllParamCustData(int indexFunc, int indexParam, IntPtr pCustData); // 0x00385390
	void GetAllVarCustData(int index, IntPtr pCustData); // 0x003853E4
	void GetAllImplTypeCustData(int index, IntPtr pCustData); // 0x00385430
	void Invoke(object pvInstance, int memid, short wFlags, DISPPARAMS pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, out int puArgErr); // 0x0038547C
	void ReleaseTypeAttr(IntPtr pTypeAttr); // 0x00385578
	void ReleaseFuncDesc(IntPtr pFuncDesc); // 0x003855BC
	void ReleaseVarDesc(IntPtr pVarDesc); // 0x00385600
}

// Namespace: System.Runtime.InteropServices.ComTypes
[ComImport]public interface ITypeLib // TypeDefIndex: 743
{
	// Methods
	int GetTypeInfoCount(); // 0x002B51AC
	void GetTypeInfo(int index, out ITypeInfo ppTI); // 0x002B5200
	void GetTypeInfoType(int index, out TYPEKIND pTKind); // 0x002B531C
	void GetTypeInfoOfGuid(Guid guid, out ITypeInfo ppTInfo); // 0x002B5368
	void GetLibAttr(out IntPtr ppTLibAttr); // 0x002B5484
	void GetTypeComp(out ITypeComp ppTComp); // 0x002B54C8
	void GetDocumentation(int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile); // 0x002B55DC
	bool IsName(string szNameBuf, int lHashVal); // 0x002B569C
	void FindName(string szNameBuf, int lHashVal, out ITypeInfo[] ppTInfo, out int[] rgMemId, short pcFound); // 0x002B5710
	void ReleaseTLibAttr(IntPtr pTLibAttr); // 0x002B573C
}

// Namespace: System.Runtime.InteropServices.ComTypes
[ComImport]public interface ITypeLib2 : ITypeLib // TypeDefIndex: 744
{
	// Methods
	void FindName(string szNameBuf, int lHashVal, out ITypeInfo[] ppTInfo, out int[] rgMemId, short pcFound); // 0x002B5780
	void GetCustData(Guid guid, out object pVarVal); // 0x002B57AC
	void GetDocumentation(int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile); // 0x002B5820
	void GetLibAttr(out IntPtr ppTLibAttr); // 0x002B58E0
	void GetLibStatistics(IntPtr pcUniqueNames, out int pcchUniqueNames); // 0x002B5924
	void GetDocumentation2(int index, out string pbstrHelpString, out int pdwHelpStringContext, out string pbstrHelpStringDll); // 0x002B5970
	void GetAllCustData(IntPtr pCustData); // 0x002B5A10
	void GetTypeComp(out ITypeComp ppTComp); // 0x002B5A54
	void GetTypeInfo(int index, out ITypeInfo ppTI); // 0x002B5B68
	void GetTypeInfoOfGuid(Guid guid, out ITypeInfo ppTInfo); // 0x002B5C84
	void GetTypeInfoType(int index, out TYPEKIND pTKind); // 0x002B5DA0
	bool IsName(string szNameBuf, int lHashVal); // 0x002B5DEC
	void ReleaseTLibAttr(IntPtr pTLibAttr); // 0x002B5E60
	int GetTypeInfoCount(); // 0x002B5EA4
}

// Namespace: System.Runtime.InteropServices.ComTypes
[Serializable]
public enum LIBFLAGS // TypeDefIndex: 745
{
	LIBFLAG_FRESTRICTED = 1,
	LIBFLAG_FCONTROL = 2,
	LIBFLAG_FHIDDEN = 4,
	LIBFLAG_FHASDISKIMAGE = 8
}

// Namespace: System.Runtime.InteropServices.ComTypes
public struct PARAMDESC // TypeDefIndex: 746
{
	// Fields
	public IntPtr lpVarValue; // 0x08
	public PARAMFLAG wParamFlags; // 0x0C

}

// Namespace: System.Runtime.InteropServices.ComTypes
[Serializable]
public enum PARAMFLAG // TypeDefIndex: 747
{
	PARAMFLAG_NONE = 0,
	PARAMFLAG_FIN = 1,
	PARAMFLAG_FOUT = 2,
	PARAMFLAG_FLCID = 4,
	PARAMFLAG_FRETVAL = 8,
	PARAMFLAG_FOPT = 16,
	PARAMFLAG_FHASDEFAULT = 32,
	PARAMFLAG_FHASCUSTDATA = 64
}

// Namespace: System.Runtime.InteropServices.ComTypes
public struct STATSTG // TypeDefIndex: 748
{
	// Fields
	public string pwcsName; // 0x08
	public int type; // 0x0C
	public long cbSize; // 0x10
	public FILETIME mtime; // 0x18
	public FILETIME ctime; // 0x20
	public FILETIME atime; // 0x28
	public int grfMode; // 0x30
	public int grfLocksSupported; // 0x34
	public Guid clsid; // 0x38
	public int grfStateBits; // 0x48
	public int reserved; // 0x4C

}

// Namespace: System.Runtime.InteropServices.ComTypes
[Serializable]
public enum SYSKIND // TypeDefIndex: 749
{
	SYS_WIN16 = 0,
	SYS_WIN32 = 1,
	SYS_MAC = 2,
	SYS_WIN64 = 3
}

// Namespace: System.Runtime.InteropServices.ComTypes
public struct TYPEATTR // TypeDefIndex: 750
{
	// Fields
	public const int MEMBER_ID_NIL = -1; // 0x00
	public Guid guid; // 0x08
	public int lcid; // 0x18
	public int dwReserved; // 0x1C
	public int memidConstructor; // 0x20
	public int memidDestructor; // 0x24
	public IntPtr lpstrSchema; // 0x28
	public int cbSizeInstance; // 0x2C
	public TYPEKIND typekind; // 0x30
	public short cFuncs; // 0x34
	public short cVars; // 0x36
	public short cImplTypes; // 0x38
	public short cbSizeVft; // 0x3A
	public short cbAlignment; // 0x3C
	public TYPEFLAGS wTypeFlags; // 0x40
	public short wMajorVerNum; // 0x44
	public short wMinorVerNum; // 0x46
	public TYPEDESC tdescAlias; // 0x48
	public IDLDESC idldescType; // 0x50

}

// Namespace: System.Runtime.InteropServices.ComTypes
public struct TYPEDESC // TypeDefIndex: 751
{
	// Fields
	public IntPtr lpValue; // 0x08
	public short vt; // 0x0C

}

// Namespace: System.Runtime.InteropServices.ComTypes
[Serializable]
public enum TYPEFLAGS // TypeDefIndex: 752
{
	TYPEFLAG_FAPPOBJECT = 1,
	TYPEFLAG_FCANCREATE = 2,
	TYPEFLAG_FLICENSED = 4,
	TYPEFLAG_FPREDECLID = 8,
	TYPEFLAG_FHIDDEN = 16,
	TYPEFLAG_FCONTROL = 32,
	TYPEFLAG_FDUAL = 64,
	TYPEFLAG_FNONEXTENSIBLE = 128,
	TYPEFLAG_FOLEAUTOMATION = 256,
	TYPEFLAG_FRESTRICTED = 512,
	TYPEFLAG_FAGGREGATABLE = 1024,
	TYPEFLAG_FREPLACEABLE = 2048,
	TYPEFLAG_FDISPATCHABLE = 4096,
	TYPEFLAG_FREVERSEBIND = 8192,
	TYPEFLAG_FPROXY = 16384
}

// Namespace: System.Runtime.InteropServices.ComTypes
[Serializable]
public enum TYPEKIND // TypeDefIndex: 753
{
	TKIND_ENUM = 0,
	TKIND_RECORD = 1,
	TKIND_MODULE = 2,
	TKIND_INTERFACE = 3,
	TKIND_DISPATCH = 4,
	TKIND_COCLASS = 5,
	TKIND_ALIAS = 6,
	TKIND_UNION = 7,
	TKIND_MAX = 8
}

// Namespace: System.Runtime.InteropServices.ComTypes
[Serializable]
public struct TYPELIBATTR // TypeDefIndex: 754
{
	// Fields
	public Guid guid; // 0x08
	public int lcid; // 0x18
	public SYSKIND syskind; // 0x1C
	public short wMajorVerNum; // 0x20
	public short wMinorVerNum; // 0x22
	public LIBFLAGS wLibFlags; // 0x24

}

// Namespace: System.Runtime.InteropServices.ComTypes
public struct VARDESC // TypeDefIndex: 755
{
	// Fields
	public int memid; // 0x08
	public string lpstrSchema; // 0x0C
	public DESCUNION desc; // 0x10
	public ELEMDESC elemdescVar; // 0x14
	public short wVarFlags; // 0x24
	public VARKIND varkind; // 0x28

}

// Namespace: 
public struct DESCUNION // TypeDefIndex: 756
{
	// Fields
	public IntPtr lpvarValue; // 0x08
	public int oInst; // 0x08

}

// Namespace: System.Runtime.InteropServices.ComTypes
[Serializable]
public enum VARFLAGS // TypeDefIndex: 757
{
	VARFLAG_FREADONLY = 1,
	VARFLAG_FSOURCE = 2,
	VARFLAG_FBINDABLE = 4,
	VARFLAG_FREQUESTEDIT = 8,
	VARFLAG_FDISPLAYBIND = 16,
	VARFLAG_FDEFAULTBIND = 32,
	VARFLAG_FHIDDEN = 64,
	VARFLAG_FRESTRICTED = 128,
	VARFLAG_FDEFAULTCOLLELEM = 256,
	VARFLAG_FUIDEFAULT = 512,
	VARFLAG_FNONBROWSABLE = 1024,
	VARFLAG_FREPLACEABLE = 2048,
	VARFLAG_FIMMEDIATEBIND = 4096
}

// Namespace: System.Runtime.InteropServices.ComTypes
[Serializable]
public enum VARKIND // TypeDefIndex: 758
{
	VAR_PERINSTANCE = 0,
	VAR_STATIC = 1,
	VAR_CONST = 2,
	VAR_DISPATCH = 3
}

// Namespace: System.Runtime.InteropServices.Expando
public interface IExpando : IReflect // TypeDefIndex: 759
{
	// Methods
	FieldInfo AddField(string name);
	MethodInfo AddMethod(string name, Delegate method);
	PropertyInfo AddProperty(string name);
	void RemoveMember(MemberInfo m);
}

// Namespace: System.Runtime.InteropServices
public sealed class AllowReversePInvokeCallsAttribute : Attribute // TypeDefIndex: 760
{
	// Constructors
	public AllowReversePInvokeCallsAttribute(); // 0x0037EAA8

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public struct ArrayWithOffset // TypeDefIndex: 761
{
	// Fields
	private object array; // 0x08
	private int offset; // 0x0C

	// Constructors
	public ArrayWithOffset(object array, int offset); // 0x000A688C

	// Methods
	public override bool Equals(object obj); // 0x000A6898
	public bool Equals(ArrayWithOffset obj); // 0x000A68A0
	public override int GetHashCode(); // 0x000A68C8
	public object GetArray(); // 0x000A68D0
	public int GetOffset(); // 0x000A68D8
	public static bool op_Equality(ArrayWithOffset a, ArrayWithOffset b); // 0x0037EBA0
	public static bool op_Inequality(ArrayWithOffset a, ArrayWithOffset b); // 0x0037EBB8
}

// Namespace: System.Runtime.InteropServices
public enum AssemblyRegistrationFlags // TypeDefIndex: 762
{
	None = 0,
	SetCodeBase = 1
}

// Namespace: System.Runtime.InteropServices
public sealed class AutomationProxyAttribute : Attribute // TypeDefIndex: 763
{
	// Fields
	private bool val; // 0x08

	// Properties
	public bool Value { get; } // 0x0037EBEC 

	// Constructors
	public AutomationProxyAttribute(bool val); // 0x0037EBCC

}

// Namespace: System.Runtime.InteropServices
public struct BINDPTR // TypeDefIndex: 764
{
	// Fields
	public IntPtr lpfuncdesc; // 0x08
	public IntPtr lptcomp; // 0x08
	public IntPtr lpvardesc; // 0x08

}

// Namespace: System.Runtime.InteropServices
public struct BIND_OPTS // TypeDefIndex: 765
{
	// Fields
	public int cbStruct; // 0x08
	public int grfFlags; // 0x0C
	public int grfMode; // 0x10
	public int dwTickCountDeadline; // 0x14

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public sealed class BStrWrapper // TypeDefIndex: 766
{
	// Fields
	private string _value; // 0x08

	// Properties
	public string WrappedObject { get; } // 0x0037EC14 

	// Constructors
	public BStrWrapper(string value); // 0x0037EBF4

}

// Namespace: System.Runtime.InteropServices
public sealed class BestFitMappingAttribute : Attribute // TypeDefIndex: 767
{
	// Fields
	private bool bfm; // 0x08
	public bool ThrowOnUnmappableChar; // 0x09

	// Properties
	public bool BestFitMapping { get; } // 0x0037EC3C 

	// Constructors
	public BestFitMappingAttribute(bool BestFitMapping); // 0x0037EC1C

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum CALLCONV // TypeDefIndex: 768
{
	CC_CDECL = 1,
	CC_PASCAL = 2,
	CC_MSCPASCAL = 2,
	CC_MACPASCAL = 3,
	CC_STDCALL = 4,
	CC_RESERVED = 5,
	CC_SYSCALL = 6,
	CC_MPWCDECL = 7,
	CC_MPWPASCAL = 8,
	CC_MAX = 9
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public class COMException : ExternalException // TypeDefIndex: 769
{
	// Constructors
	public COMException(); // 0x0037EC44
	public COMException(string message); // 0x0037EC4C
	public COMException(string message, Exception inner); // 0x0037EC54
	public COMException(string message, int errorCode); // 0x0037EC5C
	protected COMException(SerializationInfo info, StreamingContext context); // 0x0037EC64

	// Methods
	public override string ToString(); // 0x0037EC84
}

// Namespace: System.Runtime.InteropServices
public struct CONNECTDATA // TypeDefIndex: 770
{
	// Fields
	public object pUnk; // 0x08
	public int dwCookie; // 0x0C

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum CallingConvention // TypeDefIndex: 771
{
	Winapi = 1,
	Cdecl = 2,
	StdCall = 3,
	ThisCall = 4,
	FastCall = 5
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum CharSet // TypeDefIndex: 772
{
	None = 1,
	Ansi = 2,
	Unicode = 3,
	Auto = 4
}

// Namespace: System.Runtime.InteropServices
public sealed class ClassInterfaceAttribute : Attribute // TypeDefIndex: 773
{
	// Fields
	private ClassInterfaceType ciType; // 0x08

	// Properties
	public ClassInterfaceType Value { get; } // 0x0037F0AC 

	// Constructors
	public ClassInterfaceAttribute(short classInterfaceType); // 0x0037F06C
	public ClassInterfaceAttribute(ClassInterfaceType classInterfaceType); // 0x0037F08C

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum ClassInterfaceType // TypeDefIndex: 774
{
	None = 0,
	AutoDispatch = 1,
	AutoDual = 2
}

// Namespace: System.Runtime.InteropServices
public sealed class ComAliasNameAttribute : Attribute // TypeDefIndex: 775
{
	// Fields
	private string val; // 0x08

	// Properties
	public string Value { get; } // 0x0037F0FC 

	// Constructors
	public ComAliasNameAttribute(string alias); // 0x0037F0DC

}

// Namespace: System.Runtime.InteropServices
public sealed class ComCompatibleVersionAttribute : Attribute // TypeDefIndex: 776
{
	// Fields
	private int major; // 0x08
	private int minor; // 0x0C
	private int build; // 0x10
	private int revision; // 0x14

	// Properties
	public int MajorVersion { get; } // 0x0037F13C 
	public int MinorVersion { get; } // 0x0037F144 
	public int BuildNumber { get; } // 0x0037F14C 
	public int RevisionNumber { get; } // 0x0037F154 

	// Constructors
	public ComCompatibleVersionAttribute(int major, int minor, int build, int revision); // 0x0037F104

}

// Namespace: System.Runtime.InteropServices
public sealed class ComConversionLossAttribute : Attribute // TypeDefIndex: 777
{
	// Constructors
	public ComConversionLossAttribute(); // 0x0037F15C

}

// Namespace: System.Runtime.InteropServices
public sealed class ComDefaultInterfaceAttribute : Attribute // TypeDefIndex: 778
{
	// Fields
	private Type _type; // 0x08

	// Properties
	public Type Value { get; } // 0x0037F184 

	// Constructors
	public ComDefaultInterfaceAttribute(Type defaultInterface); // 0x0037F164

}

// Namespace: System.Runtime.InteropServices
public sealed class ComEventInterfaceAttribute : Attribute // TypeDefIndex: 779
{
	// Fields
	private Type si; // 0x08
	private Type ep; // 0x0C

	// Properties
	public Type EventProvider { get; } // 0x0037F1B4 
	public Type SourceInterface { get; } // 0x0037F1BC 

	// Constructors
	public ComEventInterfaceAttribute(Type SourceInterface, Type EventProvider); // 0x0037F18C

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum ComInterfaceType // TypeDefIndex: 780
{
	InterfaceIsDual = 0,
	InterfaceIsIUnknown = 1,
	InterfaceIsIDispatch = 2
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum ComMemberType // TypeDefIndex: 781
{
	Method = 0,
	PropGet = 1,
	PropSet = 2
}

// Namespace: System.Runtime.InteropServices
public sealed class ComRegisterFunctionAttribute : Attribute // TypeDefIndex: 782
{
	// Constructors
	public ComRegisterFunctionAttribute(); // 0x0037F1CC

}

// Namespace: System.Runtime.InteropServices
public sealed class ComSourceInterfacesAttribute : Attribute // TypeDefIndex: 783
{
	// Fields
	private string internalValue; // 0x08

	// Properties
	public string Value { get; } // 0x0037F5A4 

	// Constructors
	public ComSourceInterfacesAttribute(string sourceInterfaces); // 0x0037F1D4
	public ComSourceInterfacesAttribute(Type sourceInterface); // 0x0037F1F4
	public ComSourceInterfacesAttribute(Type sourceInterface1, Type sourceInterface2); // 0x0037F238
	public ComSourceInterfacesAttribute(Type sourceInterface1, Type sourceInterface2, Type sourceInterface3); // 0x0037F328
	public ComSourceInterfacesAttribute(Type sourceInterface1, Type sourceInterface2, Type sourceInterface3, Type sourceInterface4); // 0x0037F448

}

// Namespace: System.Runtime.InteropServices
public sealed class ComUnregisterFunctionAttribute : Attribute // TypeDefIndex: 784
{
	// Constructors
	public ComUnregisterFunctionAttribute(); // 0x002B5EF8

}

// Namespace: System.Runtime.InteropServices
public abstract class CriticalHandle : CriticalFinalizerObject, IDisposable // TypeDefIndex: 785
{
	// Fields
	protected IntPtr handle; // 0x08
	private bool _disposed; // 0x0C

	// Properties
	public bool IsClosed { get; } // 0x002B6090 
	public abstract bool IsInvalid { get; }

	// Constructors
	protected CriticalHandle(IntPtr invalidHandleValue); // 0x002B5F28

	// Methods
	protected override void Finalize(); // 0x002B5F48
	public void Close(); // 0x002B5FC0
	public void Dispose(); // 0x002B5FD4
	protected virtual void Dispose(bool disposing); // 0x002B5FE8
	protected abstract bool ReleaseHandle();
	protected void SetHandle(IntPtr handle); // 0x002B607C
	public void SetHandleAsInvalid(); // 0x002B6084
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public sealed class CurrencyWrapper // TypeDefIndex: 786
{
	// Fields
	private Decimal currency; // 0x08

	// Properties
	public Decimal WrappedObject { get; } // 0x002B624C 

	// Constructors
	public CurrencyWrapper(Decimal obj); // 0x002B6098
	public CurrencyWrapper(object obj); // 0x002B60D0

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum DESCKIND // TypeDefIndex: 787
{
	DESCKIND_NONE = 0,
	DESCKIND_FUNCDESC = 1,
	DESCKIND_VARDESC = 2,
	DESCKIND_TYPECOMP = 3,
	DESCKIND_IMPLICITAPPOBJ = 4,
	DESCKIND_MAX = 5
}

// Namespace: System.Runtime.InteropServices
public struct DISPPARAMS // TypeDefIndex: 788
{
	// Fields
	public IntPtr rgvarg; // 0x08
	public IntPtr rgdispidNamedArgs; // 0x0C
	public int cArgs; // 0x10
	public int cNamedArgs; // 0x14

}

// Namespace: System.Runtime.InteropServices
public sealed class DispIdAttribute : Attribute // TypeDefIndex: 789
{
	// Fields
	private int id; // 0x08

	// Properties
	public int Value { get; } // 0x002B62A4 

	// Constructors
	public DispIdAttribute(int dispId); // 0x002B6284

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public sealed class DispatchWrapper // TypeDefIndex: 790
{
	// Fields
	private object wrappedObject; // 0x08

	// Properties
	public object WrappedObject { get; } // 0x002B63CC 

	// Constructors
	public DispatchWrapper(object obj); // 0x002B62AC

}

// Namespace: System.Runtime.InteropServices
public struct ELEMDESC // TypeDefIndex: 791
{
	// Fields
	public TYPEDESC tdesc; // 0x08
	public DESCUNION desc; // 0x10

}

// Namespace: 
public struct DESCUNION // TypeDefIndex: 792
{
	// Fields
	public IDLDESC idldesc; // 0x08
	public PARAMDESC paramdesc; // 0x08

}

// Namespace: System.Runtime.InteropServices
public struct EXCEPINFO // TypeDefIndex: 793
{
	// Fields
	public short wCode; // 0x08
	public short wReserved; // 0x0A
	public string bstrSource; // 0x0C
	public string bstrDescription; // 0x10
	public string bstrHelpFile; // 0x14
	public int dwHelpContext; // 0x18
	public IntPtr pvReserved; // 0x1C
	public IntPtr pfnDeferredFillIn; // 0x20

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public sealed class ErrorWrapper // TypeDefIndex: 794
{
	// Fields
	private int errorCode; // 0x08

	// Properties
	public int ErrorCode { get; } // 0x002B6634 

	// Constructors
	public ErrorWrapper(Exception e); // 0x002B63FC
	public ErrorWrapper(int errorCode); // 0x002B649C
	public ErrorWrapper(object errorCode); // 0x002B64BC

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum ExporterEventKind // TypeDefIndex: 795
{
	NOTIF_TYPECONVERTED = 0,
	NOTIF_CONVERTWARNING = 1,
	ERROR_REFTOINVALIDASSEMBLY = 2
}

// Namespace: System.Runtime.InteropServices
public sealed class ExtensibleClassFactory // TypeDefIndex: 796
{
	// Fields
	private static Hashtable hashtable; // 0x00

	// Constructors
	private ExtensibleClassFactory(); // 0x002B663C
	private static ExtensibleClassFactory(); // 0x002B6644

	// Methods
	internal static ObjectCreationDelegate GetObjectCreationCallback(Type t); // 0x002B66C4
	public static void RegisterObjectCreationCallback(ObjectCreationDelegate callback); // 0x002B67A8
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public class ExternalException : SystemException // TypeDefIndex: 797
{
	// Properties
	public virtual int ErrorCode { get; } // 0x002B6ABC 

	// Constructors
	public ExternalException(); // 0x002B69B4
	public ExternalException(string message); // 0x002B6A34
	protected ExternalException(SerializationInfo info, StreamingContext context); // 0x002B6A58
	public ExternalException(string message, Exception inner); // 0x002B6A78
	public ExternalException(string message, int errorCode); // 0x002B6A9C

}

// Namespace: System.Runtime.InteropServices
public struct FILETIME // TypeDefIndex: 798
{
	// Fields
	public int dwLowDateTime; // 0x08
	public int dwHighDateTime; // 0x0C

}

// Namespace: System.Runtime.InteropServices
public struct FUNCDESC // TypeDefIndex: 799
{
	// Fields
	public int memid; // 0x08
	public IntPtr lprgscode; // 0x0C
	public IntPtr lprgelemdescParam; // 0x10
	public FUNCKIND funckind; // 0x14
	public INVOKEKIND invkind; // 0x18
	public CALLCONV callconv; // 0x1C
	public short cParams; // 0x20
	public short cParamsOpt; // 0x22
	public short oVft; // 0x24
	public short cScodes; // 0x26
	public ELEMDESC elemdescFunc; // 0x28
	public short wFuncFlags; // 0x38

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum FUNCFLAGS // TypeDefIndex: 800
{
	FUNCFLAG_FRESTRICTED = 1,
	FUNCFLAG_FSOURCE = 2,
	FUNCFLAG_FBINDABLE = 4,
	FUNCFLAG_FREQUESTEDIT = 8,
	FUNCFLAG_FDISPLAYBIND = 16,
	FUNCFLAG_FDEFAULTBIND = 32,
	FUNCFLAG_FHIDDEN = 64,
	FUNCFLAG_FUSESGETLASTERROR = 128,
	FUNCFLAG_FDEFAULTCOLLELEM = 256,
	FUNCFLAG_FUIDEFAULT = 512,
	FUNCFLAG_FNONBROWSABLE = 1024,
	FUNCFLAG_FREPLACEABLE = 2048,
	FUNCFLAG_FIMMEDIATEBIND = 4096
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum FUNCKIND // TypeDefIndex: 801
{
	FUNC_VIRTUAL = 0,
	FUNC_PUREVIRTUAL = 1,
	FUNC_NONVIRTUAL = 2,
	FUNC_STATIC = 3,
	FUNC_DISPATCH = 4
}

// Namespace: System.Runtime.InteropServices
public struct GCHandle // TypeDefIndex: 802
{
	// Fields
	private int handle; // 0x08

	// Properties
	public bool IsAllocated { get; } // 0x0008CE6C 
	public object Target { get; set; } // 0x0008CE7C 0x0008CE84

	// Constructors
	private GCHandle(IntPtr h); // 0x0008CE00
	private GCHandle(object obj); // 0x0008CE20
	private GCHandle(object value, GCHandleType type); // 0x0008CE44

	// Methods
	public IntPtr AddrOfPinnedObject(); // 0x0008CEAC
	public static GCHandle Alloc(object value); // 0x002B6D98
	public static GCHandle Alloc(object value, GCHandleType type); // 0x002B6DA4
	public void Free(); // 0x0008CEB4
	private static bool CheckCurrentDomain(int handle); // 0x002B6DDC
	private static object GetTarget(int handle); // 0x002B6C2C
	private static int GetTargetHandle(object obj, int handle, GCHandleType type); // 0x002B6B58
	private static void FreeHandle(int handle); // 0x002B6DD8
	private static IntPtr GetAddrOfPinnedObject(int handle); // 0x002B6D94
	public override bool Equals(object o); // 0x0008CED4
	public override int GetHashCode(); // 0x0008CEDC
	public static GCHandle FromIntPtr(IntPtr value); // 0x002B6E7C
	public static IntPtr ToIntPtr(GCHandle value); // 0x002B6FA4
	public static IntPtr op_Explicit(GCHandle value); // 0x002B6FAC
	public static GCHandle op_Explicit(IntPtr value); // 0x002B6E80
	public static bool op_Equality(GCHandle a, GCHandle b); // 0x002B6FB4
	public static bool op_Inequality(GCHandle a, GCHandle b); // 0x002B7034
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum GCHandleType // TypeDefIndex: 803
{
	Weak = 0,
	WeakTrackResurrection = 1,
	Normal = 2,
	Pinned = 3
}

// Namespace: System.Runtime.InteropServices
public struct HandleRef // TypeDefIndex: 804
{
	// Fields
	private object wrapper; // 0x08
	private IntPtr handle; // 0x0C

	// Properties
	public IntPtr Handle { get; } // 0x0008CEF4 
	public object Wrapper { get; } // 0x0008CEFC 

	// Constructors
	public HandleRef(object wrapper, IntPtr handle); // 0x0008CEE8

	// Methods
	public static IntPtr ToIntPtr(HandleRef value); // 0x002B70F8
	public static IntPtr op_Explicit(HandleRef value); // 0x002B7100
}

// Namespace: System.Runtime.InteropServices
public interface ICustomAdapter // TypeDefIndex: 805
{
	// Methods
	object GetUnderlyingObject();
}

// Namespace: System.Runtime.InteropServices
public interface ICustomFactory // TypeDefIndex: 806
{
	// Methods
	MarshalByRefObject CreateInstance(Type serverType);
}

// Namespace: System.Runtime.InteropServices
public interface ICustomMarshaler // TypeDefIndex: 807
{
	// Methods
	void CleanUpManagedData(object ManagedObj);
	void CleanUpNativeData(IntPtr pNativeData);
	int GetNativeDataSize();
	IntPtr MarshalManagedToNative(object ManagedObj);
	object MarshalNativeToManaged(IntPtr pNativeData);
}

// Namespace: System.Runtime.InteropServices
public struct IDLDESC // TypeDefIndex: 808
{
	// Fields
	public int dwReserved; // 0x08
	public IDLFLAG wIDLFlags; // 0x0C

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum IDLFLAG // TypeDefIndex: 809
{
	IDLFLAG_NONE = 0,
	IDLFLAG_FIN = 1,
	IDLFLAG_FOUT = 2,
	IDLFLAG_FLCID = 4,
	IDLFLAG_FRETVAL = 8
}

// Namespace: System.Runtime.InteropServices
public sealed class IDispatchImplAttribute : Attribute // TypeDefIndex: 810
{
	// Fields
	private IDispatchImplType Impl; // 0x08

	// Properties
	public IDispatchImplType Value { get; } // 0x002B7148 

	// Constructors
	public IDispatchImplAttribute(IDispatchImplType implType); // 0x002B7108
	public IDispatchImplAttribute(short implType); // 0x002B7128

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum IDispatchImplType // TypeDefIndex: 811
{
	SystemDefinedImpl = 0,
	InternalImpl = 1,
	CompatibleImpl = 2
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum IMPLTYPEFLAGS // TypeDefIndex: 812
{
	IMPLTYPEFLAG_FDEFAULT = 1,
	IMPLTYPEFLAG_FSOURCE = 2,
	IMPLTYPEFLAG_FRESTRICTED = 4,
	IMPLTYPEFLAG_FDEFAULTVTABLE = 8
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum INVOKEKIND // TypeDefIndex: 813
{
	INVOKE_FUNC = 1,
	INVOKE_PROPERTYGET = 2,
	INVOKE_PROPERTYPUT = 4,
	INVOKE_PROPERTYPUTREF = 8
}

// Namespace: System.Runtime.InteropServices
public interface IRegistrationServices // TypeDefIndex: 814
{
	// Methods
	Guid GetManagedCategoryGuid();
	string GetProgIdForType(Type type);
	Type[] GetRegistrableTypesInAssembly(Assembly assembly);
	bool RegisterAssembly(Assembly assembly, AssemblyRegistrationFlags flags);
	void RegisterTypeForComClients(Type type, Guid g);
	bool TypeRepresentsComType(Type type);
	bool TypeRequiresRegistration(Type type);
	bool UnregisterAssembly(Assembly assembly);
}

// Namespace: System.Runtime.InteropServices
public interface ITypeLibConverter // TypeDefIndex: 815
{
	// Methods
	object ConvertAssemblyToTypeLib(Assembly assembly, string typeLibName, TypeLibExporterFlags flags, ITypeLibExporterNotifySink notifySink);
	AssemblyBuilder ConvertTypeLibToAssembly(object typeLib, string asmFileName, int flags, ITypeLibImporterNotifySink notifySink, byte[] publicKey, StrongNameKeyPair keyPair, bool unsafeInterfaces);
	AssemblyBuilder ConvertTypeLibToAssembly(object typeLib, string asmFileName, TypeLibImporterFlags flags, ITypeLibImporterNotifySink notifySink, byte[] publicKey, StrongNameKeyPair keyPair, string asmNamespace, Version asmVersion);
	bool GetPrimaryInteropAssembly(Guid g, int major, int minor, int lcid, out string asmName, out string asmCodeBase);
}

// Namespace: System.Runtime.InteropServices
public interface ITypeLibExporterNameProvider // TypeDefIndex: 816
{
	// Methods
	string[] GetNames();
}

// Namespace: System.Runtime.InteropServices
public interface ITypeLibExporterNotifySink // TypeDefIndex: 817
{
	// Methods
	void ReportEvent(ExporterEventKind eventKind, int eventCode, string eventMsg);
	object ResolveRef(Assembly assembly);
}

// Namespace: System.Runtime.InteropServices
public interface ITypeLibImporterNotifySink // TypeDefIndex: 818
{
	// Methods
	void ReportEvent(ImporterEventKind eventKind, int eventCode, string eventMsg);
	Assembly ResolveRef(object typeLib);
}

// Namespace: System.Runtime.InteropServices
public sealed class ImportedFromTypeLibAttribute : Attribute // TypeDefIndex: 819
{
	// Fields
	private string TlbFile; // 0x08

	// Properties
	public string Value { get; } // 0x002B7170 

	// Constructors
	public ImportedFromTypeLibAttribute(string tlbFile); // 0x002B7150

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum ImporterEventKind // TypeDefIndex: 820
{
	NOTIF_TYPECONVERTED = 0,
	NOTIF_CONVERTWARNING = 1,
	ERROR_REFTOINVALIDTYPELIB = 2
}

// Namespace: System.Runtime.InteropServices
public sealed class InterfaceTypeAttribute : Attribute // TypeDefIndex: 821
{
	// Fields
	private ComInterfaceType intType; // 0x08

	// Properties
	public ComInterfaceType Value { get; } // 0x002B71C0 

	// Constructors
	public InterfaceTypeAttribute(ComInterfaceType interfaceType); // 0x002B7180
	public InterfaceTypeAttribute(short interfaceType); // 0x002B71A0

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public class InvalidComObjectException : SystemException // TypeDefIndex: 822
{
	// Fields
	private const int ErrorCode = -2146233049; // 0x00

	// Constructors
	public InvalidComObjectException(); // 0x002B71C8
	public InvalidComObjectException(string message); // 0x002B7248
	public InvalidComObjectException(string message, Exception inner); // 0x002B726C
	protected InvalidComObjectException(SerializationInfo info, StreamingContext context); // 0x002B7290

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public class InvalidOleVariantTypeException : SystemException // TypeDefIndex: 823
{
	// Fields
	private const int ErrorCode = -2146233039; // 0x00

	// Constructors
	public InvalidOleVariantTypeException(); // 0x002B72B0
	public InvalidOleVariantTypeException(string message); // 0x002B7330
	public InvalidOleVariantTypeException(string message, Exception inner); // 0x002B7354
	protected InvalidOleVariantTypeException(SerializationInfo info, StreamingContext context); // 0x002B7378

}

// Namespace: System.Runtime.InteropServices
public sealed class LCIDConversionAttribute : Attribute // TypeDefIndex: 824
{
	// Fields
	private int id; // 0x08

	// Properties
	public int Value { get; } // 0x002B73B8 

	// Constructors
	public LCIDConversionAttribute(int lcid); // 0x002B7398

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum LIBFLAGS // TypeDefIndex: 825
{
	LIBFLAG_FRESTRICTED = 1,
	LIBFLAG_FCONTROL = 2,
	LIBFLAG_FHIDDEN = 4,
	LIBFLAG_FHASDISKIMAGE = 8
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum LayoutKind // TypeDefIndex: 826
{
	Sequential = 0,
	Explicit = 2,
	Auto = 3
}

// Namespace: System.Runtime.InteropServices
public static class Marshal // TypeDefIndex: 827
{
	// Fields
	public static readonly int SystemMaxDBCSCharSize; // 0x00
	public static readonly int SystemDefaultCharSize; // 0x04

	// Constructors
	private static Marshal(); // 0x002B73C0

	// Methods
	private static int AddRefInternal(IntPtr pUnk); // 0x002B7464
	public static int AddRef(IntPtr pUnk); // 0x002B7468
	public static IntPtr AllocCoTaskMem(int cb); // 0x002B7568
	public static IntPtr AllocHGlobal(IntPtr cb); // 0x002B756C
	public static IntPtr AllocHGlobal(int cb); // 0x002B7570
	public static object BindToMoniker(string monikerName); // 0x002B7600
	public static void ChangeWrapperHandleStrength(object otp, bool fIsWeak); // 0x002B7688
	private static void copy_to_unmanaged(Array source, int startIndex, IntPtr destination, int length); // 0x002B7710
	private static void copy_from_unmanaged(IntPtr source, int startIndex, Array destination, int length); // 0x002B7714
	public static void Copy(byte[] source, int startIndex, IntPtr destination, int length); // 0x002B7718
	public static void Copy(char[] source, int startIndex, IntPtr destination, int length); // 0x002B77B0
	public static void Copy(short[] source, int startIndex, IntPtr destination, int length); // 0x002B7848
	public static void Copy(int[] source, int startIndex, IntPtr destination, int length); // 0x002B78E0
	public static void Copy(long[] source, int startIndex, IntPtr destination, int length); // 0x002B7978
	public static void Copy(float[] source, int startIndex, IntPtr destination, int length); // 0x002B7A10
	public static void Copy(double[] source, int startIndex, IntPtr destination, int length); // 0x002B7AA8
	public static void Copy(IntPtr[] source, int startIndex, IntPtr destination, int length); // 0x002B7B40
	public static void Copy(IntPtr source, byte[] destination, int startIndex, int length); // 0x002B7BD8
	public static void Copy(IntPtr source, char[] destination, int startIndex, int length); // 0x002B7C70
	public static void Copy(IntPtr source, short[] destination, int startIndex, int length); // 0x002B7D08
	public static void Copy(IntPtr source, int[] destination, int startIndex, int length); // 0x002B7DA0
	public static void Copy(IntPtr source, long[] destination, int startIndex, int length); // 0x002B7E38
	public static void Copy(IntPtr source, float[] destination, int startIndex, int length); // 0x002B7ED0
	public static void Copy(IntPtr source, double[] destination, int startIndex, int length); // 0x002B7F68
	public static void Copy(IntPtr source, IntPtr[] destination, int startIndex, int length); // 0x002B8000
	public static IntPtr CreateAggregatedObject(IntPtr pOuter, object o); // 0x002B8098
	public static object CreateWrapperOfType(object o, Type t); // 0x002B8120
	public static void DestroyStructure(IntPtr ptr, Type structuretype); // 0x002B839C
	public static void FreeBSTR(IntPtr ptr); // 0x002B83A0
	public static void FreeCoTaskMem(IntPtr ptr); // 0x002B83A4
	public static void FreeHGlobal(IntPtr hglobal); // 0x002B83A8
	private static void ClearBSTR(IntPtr ptr); // 0x002B83AC
	public static void ZeroFreeBSTR(IntPtr s); // 0x002B8490
	private static void ClearAnsi(IntPtr ptr); // 0x002B8518
	private static void ClearUnicode(IntPtr ptr); // 0x002B85F0
	public static void ZeroFreeCoTaskMemAnsi(IntPtr s); // 0x002B86CC
	public static void ZeroFreeCoTaskMemUnicode(IntPtr s); // 0x002B8754
	public static void ZeroFreeGlobalAllocAnsi(IntPtr s); // 0x002B87DC
	public static void ZeroFreeGlobalAllocUnicode(IntPtr s); // 0x002B8864
	public static Guid GenerateGuidForType(Type type); // 0x002B88EC
	public static string GenerateProgIdForType(Type type); // 0x002B8928
	public static object GetActiveObject(string progID); // 0x002B89B0
	private static IntPtr GetCCW(object o, Type T); // 0x002B8A38
	private static IntPtr GetComInterfaceForObjectInternal(object o, Type T); // 0x002B8A3C
	public static IntPtr GetComInterfaceForObject(object o, Type T); // 0x002B8BBC
	public static IntPtr GetComInterfaceForObjectInContext(object o, Type t); // 0x002B8C50
	public static object GetComObjectData(object obj, object key); // 0x002B8CD8
	private static int GetComSlotForMethodInfoInternal(MemberInfo m); // 0x002B8D74
	public static int GetComSlotForMethodInfo(MemberInfo m); // 0x002B8D78
	public static int GetEndComSlot(Type t); // 0x002B8F70
	public static int GetExceptionCode(); // 0x002B8FF8
	public static IntPtr GetExceptionPointers(); // 0x002B9080
	public static IntPtr GetHINSTANCE(Module m); // 0x002B9108
	public static int GetHRForException(Exception e); // 0x002B91C0
	public static int GetHRForLastWin32Error(); // 0x002B91E4
	private static IntPtr GetIDispatchForObjectInternal(object o); // 0x002B926C
	public static IntPtr GetIDispatchForObject(object o); // 0x002B6340
	public static IntPtr GetIDispatchForObjectInContext(object o); // 0x002B9270
	public static IntPtr GetITypeInfoForType(Type t); // 0x002B92F8
	private static IntPtr GetIUnknownForObjectInternal(object o); // 0x002B9380
	public static IntPtr GetIUnknownForObject(object o); // 0x002B9384
	public static IntPtr GetIUnknownForObjectInContext(object o); // 0x002B9410
	public static IntPtr GetManagedThunkForUnmanagedMethodPtr(IntPtr pfnMethodToWrap, IntPtr pbSignature, int cbSignature); // 0x002B9498
	public static MemberInfo GetMethodInfoForComSlot(Type t, int slot, ComMemberType memberType); // 0x002B9520
	public static void GetNativeVariantForObject(object obj, IntPtr pDstNativeVariant); // 0x002B95A8
	private static object GetObjectForCCW(IntPtr pUnk); // 0x002B9680
	public static object GetObjectForIUnknown(IntPtr pUnk); // 0x002B9684
	public static object GetObjectForNativeVariant(IntPtr pSrcNativeVariant); // 0x002B978C
	public static object[] GetObjectsForNativeVariants(IntPtr aSrcNativeVariant, int cVars); // 0x002B98DC
	public static int GetStartComSlot(Type t); // 0x002B9B0C
	public static Thread GetThreadFromFiberCookie(int cookie); // 0x002B9B94
	public static object GetTypedObjectForIUnknown(IntPtr pUnk, Type t); // 0x002B9C1C
	public static Type GetTypeForITypeInfo(IntPtr piTypeInfo); // 0x002B9DDC
	public static string GetTypeInfoName(UCOMITypeInfo pTI); // 0x002B9E64
	public static string GetTypeInfoName(ITypeInfo typeInfo); // 0x002B9EEC
	public static Guid GetTypeLibGuid(UCOMITypeLib pTLB); // 0x002B9F74
	public static Guid GetTypeLibGuid(ITypeLib typelib); // 0x002B9FFC
	public static Guid GetTypeLibGuidForAssembly(Assembly asm); // 0x002BA084
	public static int GetTypeLibLcid(UCOMITypeLib pTLB); // 0x002BA10C
	public static int GetTypeLibLcid(ITypeLib typelib); // 0x002BA194
	public static string GetTypeLibName(UCOMITypeLib pTLB); // 0x002BA21C
	public static string GetTypeLibName(ITypeLib typelib); // 0x002BA2A4
	public static void GetTypeLibVersionForAssembly(Assembly inputAssembly, out int majorVersion, out int minorVersion); // 0x002BA32C
	public static object GetUniqueObjectForIUnknown(IntPtr unknown); // 0x002BA3B4
	public static IntPtr GetUnmanagedThunkForManagedMethodPtr(IntPtr pfnMethodToWrap, IntPtr pbSignature, int cbSignature); // 0x002BA43C
	public static bool IsComObject(object o); // 0x002B8BB8
	public static bool IsTypeVisibleFromCom(Type t); // 0x002BA4C4
	public static int NumParamBytes(MethodInfo m); // 0x002BA54C
	public static int GetLastWin32Error(); // 0x002BA5D4
	public static IntPtr OffsetOf(Type t, string fieldName); // 0x002BA5D8
	public static void Prelink(MethodInfo m); // 0x002BA5DC
	public static void PrelinkAll(Type c); // 0x002BA5E0
	public static string PtrToStringAnsi(IntPtr ptr); // 0x002BA5E4
	public static string PtrToStringAnsi(IntPtr ptr, int len); // 0x002BA5E8
	public static string PtrToStringAuto(IntPtr ptr); // 0x002BA5EC
	public static string PtrToStringAuto(IntPtr ptr, int len); // 0x002BA6D4
	public static string PtrToStringUni(IntPtr ptr); // 0x002BA6D0
	public static string PtrToStringUni(IntPtr ptr, int len); // 0x002BA7C4
	public static string PtrToStringBSTR(IntPtr ptr); // 0x002BA7C8
	public static void PtrToStructure(IntPtr ptr, object structure); // 0x002BA7CC
	public static object PtrToStructure(IntPtr ptr, Type structureType); // 0x002B98D8
	private static int QueryInterfaceInternal(IntPtr pUnk, Guid iid, out IntPtr ppv); // 0x002BA7D0
	public static int QueryInterface(IntPtr pUnk, Guid iid, out IntPtr ppv); // 0x002BA7D4
	public static byte ReadByte(IntPtr ptr); // 0x002BA8E4
	public static byte ReadByte(IntPtr ptr, int ofs); // 0x002B85EC
	public static byte ReadByte(object ptr, int ofs); // 0x002BA968
	public static short ReadInt16(IntPtr ptr); // 0x002BA9F0
	public static short ReadInt16(IntPtr ptr, int ofs); // 0x002B86C8
	public static short ReadInt16(object ptr, int ofs); // 0x002BAA74
	public static int ReadInt32(IntPtr ptr); // 0x002BAAFC
	public static int ReadInt32(IntPtr ptr, int ofs); // 0x002B8488
	public static int ReadInt32(object ptr, int ofs); // 0x002BAB80
	public static long ReadInt64(IntPtr ptr); // 0x002BAC08
	public static long ReadInt64(IntPtr ptr, int ofs); // 0x002BAC8C
	public static long ReadInt64(object ptr, int ofs); // 0x002BAC90
	public static IntPtr ReadIntPtr(IntPtr ptr); // 0x002BAD18
	public static IntPtr ReadIntPtr(IntPtr ptr, int ofs); // 0x002BAD9C
	public static IntPtr ReadIntPtr(object ptr, int ofs); // 0x002BADA0
	public static IntPtr ReAllocCoTaskMem(IntPtr pv, int cb); // 0x002BAE28
	public static IntPtr ReAllocHGlobal(IntPtr pv, IntPtr cb); // 0x002BAE2C
	private static int ReleaseInternal(IntPtr pUnk); // 0x002BAE30
	public static int Release(IntPtr pUnk); // 0x002BAE34
	private static int ReleaseComObjectInternal(object co); // 0x002BAF34
	public static int ReleaseComObject(object o); // 0x002BAF38
	public static void ReleaseThreadCache(); // 0x002BB0B8
	public static bool SetComObjectData(object obj, object key, object data); // 0x002BB140
	public static int SizeOf(object structure); // 0x002BB1DC
	public static int SizeOf(Type t); // 0x002B9B08
	public static IntPtr StringToBSTR(string s); // 0x002BB27C
	public static IntPtr StringToCoTaskMemAnsi(string s); // 0x002BB280
	public static IntPtr StringToCoTaskMemAuto(string s); // 0x002BB440
	public static IntPtr StringToCoTaskMemUni(string s); // 0x002BB524
	public static IntPtr StringToHGlobalAnsi(string s); // 0x002BB658
	public static IntPtr StringToHGlobalAuto(string s); // 0x002BB65C
	public static IntPtr StringToHGlobalUni(string s); // 0x002BB740
	public static IntPtr SecureStringToBSTR(SecureString s); // 0x002BB744
	public static IntPtr SecureStringToCoTaskMemAnsi(SecureString s); // 0x002BBA84
	public static IntPtr SecureStringToCoTaskMemUnicode(SecureString s); // 0x002BBDE8
	public static IntPtr SecureStringToGlobalAllocAnsi(SecureString s); // 0x002BC0FC
	public static IntPtr SecureStringToGlobalAllocUnicode(SecureString s); // 0x002BC1DC
	public static void StructureToPtr(object structure, IntPtr ptr, bool fDeleteOld); // 0x002B967C
	public static void ThrowExceptionForHR(int errorCode); // 0x002BC2BC
	public static void ThrowExceptionForHR(int errorCode, IntPtr errorInfo); // 0x002BC3E0
	public static IntPtr UnsafeAddrOfPinnedArrayElement(Array arr, int index); // 0x002BC5B4
	public static void WriteByte(IntPtr ptr, byte val); // 0x002BC5B8
	public static void WriteByte(IntPtr ptr, int ofs, byte val); // 0x002B848C
	public static void WriteByte(out object ptr, int ofs, byte val); // 0x002BC644
	public static void WriteInt16(IntPtr ptr, short val); // 0x002BC6CC
	public static void WriteInt16(IntPtr ptr, int ofs, short val); // 0x002B86C4
	public static void WriteInt16(out object ptr, int ofs, short val); // 0x002BC758
	public static void WriteInt16(IntPtr ptr, char val); // 0x002BC7E0
	public static void WriteInt16(IntPtr ptr, int ofs, char val); // 0x002BC86C
	public static void WriteInt16(out object ptr, int ofs, char val); // 0x002BC874
	public static void WriteInt32(IntPtr ptr, int val); // 0x002BC8FC
	public static void WriteInt32(IntPtr ptr, int ofs, int val); // 0x002BBA80
	public static void WriteInt32(out object ptr, int ofs, int val); // 0x002BC988
	public static void WriteInt64(IntPtr ptr, long val); // 0x002BCA10
	public static void WriteInt64(IntPtr ptr, int ofs, long val); // 0x002BCAA4
	public static void WriteInt64(out object ptr, int ofs, long val); // 0x002BCAA8
	public static void WriteIntPtr(IntPtr ptr, IntPtr val); // 0x002BCB30
	public static void WriteIntPtr(IntPtr ptr, int ofs, IntPtr val); // 0x002BCBBC
	public static void WriteIntPtr(out object ptr, int ofs, IntPtr val); // 0x002BCBC0
	public static Exception GetExceptionForHR(int errorCode); // 0x002BC360
	public static Exception GetExceptionForHR(int errorCode, IntPtr errorInfo); // 0x002BC484
	public static int FinalReleaseComObject(object o); // 0x002BCC48
	private static Delegate GetDelegateForFunctionPointerInternal(IntPtr ptr, Type t); // 0x002BCCD4
	public static Delegate GetDelegateForFunctionPointer(IntPtr ptr, Type t); // 0x002BCCD8
	private static IntPtr GetFunctionPointerForDelegateInternal(Delegate d); // 0x002BCF28
	public static IntPtr GetFunctionPointerForDelegate(Delegate d); // 0x002BCF2C
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public class MarshalDirectiveException : SystemException // TypeDefIndex: 828
{
	// Fields
	private const int ErrorCode = -2146233035; // 0x00

	// Constructors
	public MarshalDirectiveException(); // 0x002BD054
	public MarshalDirectiveException(string message); // 0x002BD0D4
	public MarshalDirectiveException(string message, Exception inner); // 0x002BD0F8
	protected MarshalDirectiveException(SerializationInfo info, StreamingContext context); // 0x002BD11C

}

// Namespace: System.Runtime.InteropServices
public struct PARAMDESC // TypeDefIndex: 829
{
	// Fields
	public IntPtr lpVarValue; // 0x08
	public PARAMFLAG wParamFlags; // 0x0C

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum PARAMFLAG // TypeDefIndex: 830
{
	PARAMFLAG_NONE = 0,
	PARAMFLAG_FIN = 1,
	PARAMFLAG_FOUT = 2,
	PARAMFLAG_FLCID = 4,
	PARAMFLAG_FRETVAL = 8,
	PARAMFLAG_FOPT = 16,
	PARAMFLAG_FHASDEFAULT = 32,
	PARAMFLAG_FHASCUSTDATA = 64
}

// Namespace: System.Runtime.InteropServices
public sealed class PreserveSigAttribute : Attribute // TypeDefIndex: 831
{
	// Constructors
	public PreserveSigAttribute(); // 0x002BD444

}

// Namespace: System.Runtime.InteropServices
public sealed class PrimaryInteropAssemblyAttribute : Attribute // TypeDefIndex: 832
{
	// Fields
	private int major; // 0x08
	private int minor; // 0x0C

	// Properties
	public int MajorVersion { get; } // 0x002BD474 
	public int MinorVersion { get; } // 0x002BD47C 

	// Constructors
	public PrimaryInteropAssemblyAttribute(int major, int minor); // 0x002BD44C

}

// Namespace: System.Runtime.InteropServices
public sealed class ProgIdAttribute : Attribute // TypeDefIndex: 833
{
	// Fields
	private string pid; // 0x08

	// Properties
	public string Value { get; } // 0x002BD4A4 

	// Constructors
	public ProgIdAttribute(string progId); // 0x002BD484

}

// Namespace: System.Runtime.InteropServices
public enum RegistrationClassContext // TypeDefIndex: 834
{
	InProcessServer = 1,
	InProcessHandler = 2,
	LocalServer = 4,
	InProcessServer16 = 8,
	RemoteServer = 16,
	InProcessHandler16 = 32,
	Reserved1 = 64,
	Reserved2 = 128,
	Reserved3 = 256,
	Reserved4 = 512,
	NoCodeDownload = 1024,
	Reserved5 = 2048,
	NoCustomMarshal = 4096,
	EnableCodeDownload = 8192,
	NoFailureLog = 16384,
	DisableActivateAsActivator = 32768,
	EnableActivateAsActivator = 65536,
	FromDefaultContext = 131072
}

// Namespace: System.Runtime.InteropServices
public enum RegistrationConnectionType // TypeDefIndex: 835
{
	SingleUse = 0,
	MultipleUse = 1,
	MultiSeparate = 2,
	Suspended = 4,
	Surrogate = 8
}

// Namespace: System.Runtime.InteropServices
public class RegistrationServices : IRegistrationServices // TypeDefIndex: 836
{
	// Constructors
	public RegistrationServices(); // 0x002BD4AC

	// Methods
	public virtual Guid GetManagedCategoryGuid(); // 0x002BD4B4
	public virtual string GetProgIdForType(Type type); // 0x002BD53C
	public virtual Type[] GetRegistrableTypesInAssembly(Assembly assembly); // 0x002BD5C4
	public virtual bool RegisterAssembly(Assembly assembly, AssemblyRegistrationFlags flags); // 0x002BD64C
	public virtual void RegisterTypeForComClients(Type type, Guid g); // 0x002BD6D4
	public virtual bool TypeRepresentsComType(Type type); // 0x002BD75C
	public virtual bool TypeRequiresRegistration(Type type); // 0x002BD7E4
	public virtual bool UnregisterAssembly(Assembly assembly); // 0x002BD86C
	public virtual int RegisterTypeForComClients(Type type, RegistrationClassContext classContext, RegistrationConnectionType flags); // 0x002BD8F4
	public virtual void UnregisterTypeForComClients(int cookie); // 0x002BD97C
}

// Namespace: System.Runtime.InteropServices
public class RuntimeEnvironment // TypeDefIndex: 837
{
	// Properties
	public static string SystemConfigurationFile { get; } // 0x002BDA0C 

	// Constructors
	public RuntimeEnvironment(); // 0x002BDA04

	// Methods
	public static bool FromGlobalAccessCache(Assembly a); // 0x002BDAE4
	public static string GetRuntimeDirectory(); // 0x002BDB10
	public static string GetSystemVersion(); // 0x002BDC2C
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public class SEHException : ExternalException // TypeDefIndex: 838
{
	// Constructors
	public SEHException(); // 0x002BDFD4
	public SEHException(string message); // 0x002BDFD8
	public SEHException(string message, Exception inner); // 0x002BDFFC
	protected SEHException(SerializationInfo info, StreamingContext context); // 0x002BE020

	// Methods
	public virtual bool CanResume(); // 0x002BE040
}

// Namespace: System.Runtime.InteropServices
public struct STATSTG // TypeDefIndex: 839
{
	// Fields
	public string pwcsName; // 0x08
	public int type; // 0x0C
	public long cbSize; // 0x10
	public FILETIME mtime; // 0x18
	public FILETIME ctime; // 0x20
	public FILETIME atime; // 0x28
	public int grfMode; // 0x30
	public int grfLocksSupported; // 0x34
	public Guid clsid; // 0x38
	public int grfStateBits; // 0x48
	public int reserved; // 0x4C

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum SYSKIND // TypeDefIndex: 840
{
	SYS_WIN16 = 0,
	SYS_WIN32 = 1,
	SYS_MAC = 2
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public class SafeArrayRankMismatchException : SystemException // TypeDefIndex: 841
{
	// Fields
	private const int ErrorCode = -2146233032; // 0x00

	// Constructors
	public SafeArrayRankMismatchException(); // 0x002BE048
	public SafeArrayRankMismatchException(string message); // 0x002BE0C8
	public SafeArrayRankMismatchException(string message, Exception inner); // 0x002BE0EC
	protected SafeArrayRankMismatchException(SerializationInfo info, StreamingContext context); // 0x002BE110

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public class SafeArrayTypeMismatchException : SystemException // TypeDefIndex: 842
{
	// Fields
	private const int ErrorCode = -2146233037; // 0x00

	// Constructors
	public SafeArrayTypeMismatchException(); // 0x002BE130
	public SafeArrayTypeMismatchException(string message); // 0x002BE1B0
	public SafeArrayTypeMismatchException(string message, Exception inner); // 0x002BE1D4
	protected SafeArrayTypeMismatchException(SerializationInfo info, StreamingContext context); // 0x002BE1F8

}

// Namespace: System.Runtime.InteropServices
public abstract class SafeHandle : CriticalFinalizerObject, IDisposable // TypeDefIndex: 843
{
	// Fields
	protected IntPtr handle; // 0x08
	private IntPtr invalid_handle_value; // 0x0C
	private int refcount; // 0x10
	private bool owns_handle; // 0x14

	// Properties
	public bool IsClosed { get; } // 0x002BE800 
	public abstract bool IsInvalid { get; }

	// Constructors
	protected SafeHandle(); // 0x002BE218
	protected SafeHandle(IntPtr invalidHandleValue, bool ownsHandle); // 0x002BE2B0

	// Methods
	public void Close(); // 0x002BE2E0
	public void DangerousAddRef(bool success); // 0x002BE42C
	public IntPtr DangerousGetHandle(); // 0x002BE598
	public void DangerousRelease(); // 0x002BE668
	public void Dispose(); // 0x002BE7AC
	public void SetHandleAsInvalid(); // 0x002BE7E0
	protected virtual void Dispose(bool disposing); // 0x002BE7EC
	protected abstract bool ReleaseHandle();
	protected void SetHandle(IntPtr handle); // 0x002BE7F8
	protected override void Finalize(); // 0x002BE814
}

// Namespace: System.Runtime.InteropServices
public sealed class SetWin32ContextInIDispatchAttribute : Attribute // TypeDefIndex: 844
{
	// Constructors
	public SetWin32ContextInIDispatchAttribute(); // 0x002BE8B8

}

// Namespace: System.Runtime.InteropServices
public struct TYPEATTR // TypeDefIndex: 845
{
	// Fields
	public const int MEMBER_ID_NIL = -1; // 0x00
	public Guid guid; // 0x08
	public int lcid; // 0x18
	public int dwReserved; // 0x1C
	public int memidConstructor; // 0x20
	public int memidDestructor; // 0x24
	public IntPtr lpstrSchema; // 0x28
	public int cbSizeInstance; // 0x2C
	public TYPEKIND typekind; // 0x30
	public short cFuncs; // 0x34
	public short cVars; // 0x36
	public short cImplTypes; // 0x38
	public short cbSizeVft; // 0x3A
	public short cbAlignment; // 0x3C
	public TYPEFLAGS wTypeFlags; // 0x40
	public short wMajorVerNum; // 0x44
	public short wMinorVerNum; // 0x46
	public TYPEDESC tdescAlias; // 0x48
	public IDLDESC idldescType; // 0x50

}

// Namespace: System.Runtime.InteropServices
public struct TYPEDESC // TypeDefIndex: 846
{
	// Fields
	public IntPtr lpValue; // 0x08
	public short vt; // 0x0C

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum TYPEFLAGS // TypeDefIndex: 847
{
	TYPEFLAG_FAPPOBJECT = 1,
	TYPEFLAG_FCANCREATE = 2,
	TYPEFLAG_FLICENSED = 4,
	TYPEFLAG_FPREDECLID = 8,
	TYPEFLAG_FHIDDEN = 16,
	TYPEFLAG_FCONTROL = 32,
	TYPEFLAG_FDUAL = 64,
	TYPEFLAG_FNONEXTENSIBLE = 128,
	TYPEFLAG_FOLEAUTOMATION = 256,
	TYPEFLAG_FRESTRICTED = 512,
	TYPEFLAG_FAGGREGATABLE = 1024,
	TYPEFLAG_FREPLACEABLE = 2048,
	TYPEFLAG_FDISPATCHABLE = 4096,
	TYPEFLAG_FREVERSEBIND = 8192,
	TYPEFLAG_FPROXY = 16384
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum TYPEKIND // TypeDefIndex: 848
{
	TKIND_ENUM = 0,
	TKIND_RECORD = 1,
	TKIND_MODULE = 2,
	TKIND_INTERFACE = 3,
	TKIND_DISPATCH = 4,
	TKIND_COCLASS = 5,
	TKIND_ALIAS = 6,
	TKIND_UNION = 7,
	TKIND_MAX = 8
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public struct TYPELIBATTR // TypeDefIndex: 849
{
	// Fields
	public Guid guid; // 0x08
	public int lcid; // 0x18
	public SYSKIND syskind; // 0x1C
	public short wMajorVerNum; // 0x20
	public short wMinorVerNum; // 0x22
	public LIBFLAGS wLibFlags; // 0x24

}

// Namespace: System.Runtime.InteropServices
public sealed class TypeLibConverter : ITypeLibConverter // TypeDefIndex: 850
{
	// Constructors
	public TypeLibConverter(); // 0x002BE930

	// Methods
	public object ConvertAssemblyToTypeLib(Assembly assembly, string strTypeLibName, TypeLibExporterFlags flags, ITypeLibExporterNotifySink notifySink); // 0x002BE938
	public AssemblyBuilder ConvertTypeLibToAssembly(object typeLib, string asmFileName, int flags, ITypeLibImporterNotifySink notifySink, byte[] publicKey, StrongNameKeyPair keyPair, bool unsafeInterfaces); // 0x002BE9C0
	public AssemblyBuilder ConvertTypeLibToAssembly(object typeLib, string asmFileName, TypeLibImporterFlags flags, ITypeLibImporterNotifySink notifySink, byte[] publicKey, StrongNameKeyPair keyPair, string asmNamespace, Version asmVersion); // 0x002BEA48
	public bool GetPrimaryInteropAssembly(Guid g, int major, int minor, int lcid, out string asmName, out string asmCodeBase); // 0x002BEAD0
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum TypeLibExporterFlags // TypeDefIndex: 851
{
	None = 0,
	OnlyReferenceRegistered = 1,
	CallerResolvedReferences = 2,
	OldNames = 4,
	ExportAs32Bit = 16,
	ExportAs64Bit = 32
}

// Namespace: System.Runtime.InteropServices
public sealed class TypeLibFuncAttribute : Attribute // TypeDefIndex: 852
{
	// Fields
	private TypeLibFuncFlags flags; // 0x08

	// Properties
	public TypeLibFuncFlags Value { get; } // 0x002BEB98 

	// Constructors
	public TypeLibFuncAttribute(short flags); // 0x002BEB58
	public TypeLibFuncAttribute(TypeLibFuncFlags flags); // 0x002BEB78

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum TypeLibFuncFlags // TypeDefIndex: 853
{
	FRestricted = 1,
	FSource = 2,
	FBindable = 4,
	FRequestEdit = 8,
	FDisplayBind = 16,
	FDefaultBind = 32,
	FHidden = 64,
	FUsesGetLastError = 128,
	FDefaultCollelem = 256,
	FUiDefault = 512,
	FNonBrowsable = 1024,
	FReplaceable = 2048,
	FImmediateBind = 4096
}

// Namespace: System.Runtime.InteropServices
public sealed class TypeLibImportClassAttribute : Attribute // TypeDefIndex: 854
{
	// Fields
	private string _importClass; // 0x08

	// Properties
	public string Value { get; } // 0x002BEBE4 

	// Constructors
	public TypeLibImportClassAttribute(Type importClass); // 0x002BEBA0

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum TypeLibImporterFlags // TypeDefIndex: 855
{
	None = 0,
	PrimaryInteropAssembly = 1,
	UnsafeInterfaces = 2,
	SafeArrayAsSystemArray = 4,
	TransformDispRetVals = 8,
	PreventClassMembers = 16,
	SerializableValueClasses = 32,
	ImportAsX86 = 256,
	ImportAsX64 = 512,
	ImportAsItanium = 1024,
	ImportAsAgnostic = 2048,
	ReflectionOnlyLoading = 4096
}

// Namespace: System.Runtime.InteropServices
public sealed class TypeLibTypeAttribute : Attribute // TypeDefIndex: 856
{
	// Fields
	private TypeLibTypeFlags flags; // 0x08

	// Properties
	public TypeLibTypeFlags Value { get; } // 0x002BEC2C 

	// Constructors
	public TypeLibTypeAttribute(short flags); // 0x002BEBEC
	public TypeLibTypeAttribute(TypeLibTypeFlags flags); // 0x002BEC0C

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum TypeLibTypeFlags // TypeDefIndex: 857
{
	FAppObject = 1,
	FCanCreate = 2,
	FLicensed = 4,
	FPreDeclId = 8,
	FHidden = 16,
	FControl = 32,
	FDual = 64,
	FNonExtensible = 128,
	FOleAutomation = 256,
	FRestricted = 512,
	FAggregatable = 1024,
	FReplaceable = 2048,
	FDispatchable = 4096,
	FReverseBind = 8192
}

// Namespace: System.Runtime.InteropServices
public sealed class TypeLibVarAttribute : Attribute // TypeDefIndex: 858
{
	// Fields
	private TypeLibVarFlags flags; // 0x08

	// Properties
	public TypeLibVarFlags Value { get; } // 0x002BEC74 

	// Constructors
	public TypeLibVarAttribute(short flags); // 0x002BEC34
	public TypeLibVarAttribute(TypeLibVarFlags flags); // 0x002BEC54

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum TypeLibVarFlags // TypeDefIndex: 859
{
	FReadOnly = 1,
	FSource = 2,
	FBindable = 4,
	FRequestEdit = 8,
	FDisplayBind = 16,
	FDefaultBind = 32,
	FHidden = 64,
	FRestricted = 128,
	FDefaultCollelem = 256,
	FUiDefault = 512,
	FNonBrowsable = 1024,
	FReplaceable = 2048,
	FImmediateBind = 4096
}

// Namespace: System.Runtime.InteropServices
public sealed class TypeLibVersionAttribute : Attribute // TypeDefIndex: 860
{
	// Fields
	private int major; // 0x08
	private int minor; // 0x0C

	// Properties
	public int MajorVersion { get; } // 0x002BECA4 
	public int MinorVersion { get; } // 0x002BECAC 

	// Constructors
	public TypeLibVersionAttribute(int major, int minor); // 0x002BEC7C

}

// Namespace: System.Runtime.InteropServices
[ComImport]public interface UCOMIBindCtx // TypeDefIndex: 861
{
	// Methods
	void RegisterObjectBound(object punk); // 0x002BECB4
	void RevokeObjectBound(object punk); // 0x002BED7C
	void ReleaseBoundObjects(); // 0x002BEE44
	void SetBindOptions(BIND_OPTS pbindopts); // 0x002BEE80
	void GetBindOptions(BIND_OPTS pbindopts); // 0x002BEEC4
	void GetRunningObjectTable(out UCOMIRunningObjectTable pprot); // 0x002BEF08
	void RegisterObjectParam(string pszKey, object punk); // 0x002BF01C
	void GetObjectParam(string pszKey, out object ppunk); // 0x002BF0F4
	void EnumObjectParam(out UCOMIEnumString ppenum); // 0x002BF218
	void RevokeObjectParam(string pszKey); // 0x002BF32C
}

// Namespace: System.Runtime.InteropServices
[ComImport]public interface UCOMIConnectionPoint // TypeDefIndex: 862
{
	// Methods
	void GetConnectionInterface(out Guid pIID); // 0x002BF378
	void GetConnectionPointContainer(out UCOMIConnectionPointContainer ppCPC); // 0x002BF3BC
	void Advise(object pUnkSink, out int pdwCookie); // 0x002BF4D0
	void Unadvise(int dwCookie); // 0x002BF5A0
	void EnumConnections(out UCOMIEnumConnections ppEnum); // 0x002BF5E4
}

// Namespace: System.Runtime.InteropServices
[ComImport]public interface UCOMIConnectionPointContainer // TypeDefIndex: 863
{
	// Methods
	void EnumConnectionPoints(out UCOMIEnumConnectionPoints ppEnum); // 0x002BF6F8
	void FindConnectionPoint(Guid riid, out UCOMIConnectionPoint ppCP); // 0x002BF80C
}

// Namespace: System.Runtime.InteropServices
[ComImport]public interface UCOMIEnumConnectionPoints // TypeDefIndex: 864
{
	// Methods
	int Next(int celt, out UCOMIConnectionPoint[] rgelt, out int pceltFetched); // 0x002BF928
	int Skip(int celt); // 0x002BF954
	int Reset(); // 0x002BF9B0
	void Clone(out UCOMIEnumConnectionPoints ppenum); // 0x002BFA04
}

// Namespace: System.Runtime.InteropServices
[ComImport]public interface UCOMIEnumConnections // TypeDefIndex: 865
{
	// Methods
	int Next(int celt, out CONNECTDATA[] rgelt, out int pceltFetched); // 0x002BFB18
	int Skip(int celt); // 0x002BFC44
	void Reset(); // 0x002BFCA0
	void Clone(out UCOMIEnumConnections ppenum); // 0x002BFCDC
}

// Namespace: System.Runtime.InteropServices
[ComImport]public interface UCOMIEnumMoniker // TypeDefIndex: 866
{
	// Methods
	int Next(int celt, out UCOMIMoniker[] rgelt, out int pceltFetched); // 0x002BFDF0
	int Skip(int celt); // 0x002BFE1C
	int Reset(); // 0x002BFE78
	void Clone(out UCOMIEnumMoniker ppenum); // 0x002BFECC
}

// Namespace: System.Runtime.InteropServices
[ComImport]public interface UCOMIEnumString // TypeDefIndex: 867
{
	// Methods
	int Next(int celt, out string[] rgelt, out int pceltFetched); // 0x002BFFE0
	int Skip(int celt); // 0x002C00F0
	int Reset(); // 0x002C014C
	void Clone(out UCOMIEnumString ppenum); // 0x002C01A0
}

// Namespace: System.Runtime.InteropServices
[ComImport]public interface UCOMIEnumVARIANT // TypeDefIndex: 868
{
	// Methods
	int Next(int celt, int rgvar, int pceltFetched); // 0x002C02B4
	int Skip(int celt); // 0x002C0324
	int Reset(); // 0x002C0380
	void Clone(int ppenum); // 0x002C03D4
}

// Namespace: System.Runtime.InteropServices
[ComImport]public interface UCOMIMoniker // TypeDefIndex: 869
{
	// Methods
	void GetClassID(out Guid pClassID); // 0x002C0418
	int IsDirty(); // 0x002C045C
	void Load(UCOMIStream pStm); // 0x002C04B0
	void Save(UCOMIStream pStm, bool fClearDirty); // 0x002C0578
	void GetSizeMax(out long pcbSize); // 0x002C0648
	void BindToObject(UCOMIBindCtx pbc, UCOMIMoniker pmkToLeft, Guid riidResult, out object ppvResult); // 0x002C068C
	void BindToStorage(UCOMIBindCtx pbc, UCOMIMoniker pmkToLeft, Guid riid, out object ppvObj); // 0x002C08B4
	void Reduce(UCOMIBindCtx pbc, int dwReduceHowFar, UCOMIMoniker ppmkToLeft, out UCOMIMoniker ppmkReduced); // 0x002C0ADC
	void ComposeWith(UCOMIMoniker pmkRight, bool fOnlyIfNotGeneric, out UCOMIMoniker ppmkComposite); // 0x002C0D68
	void Enum(bool fForward, out UCOMIEnumMoniker ppenumMoniker); // 0x002C0F0C
	void IsEqual(UCOMIMoniker pmkOtherMoniker); // 0x002C1028
	void Hash(out int pdwHash); // 0x002C10F0
	void IsRunning(UCOMIBindCtx pbc, UCOMIMoniker pmkToLeft, UCOMIMoniker pmkNewlyRunning); // 0x002C1134
	void GetTimeOfLastChange(UCOMIBindCtx pbc, UCOMIMoniker pmkToLeft, out FILETIME pFileTime); // 0x002C1300
	void Inverse(out UCOMIMoniker ppmk); // 0x002C1450
	void CommonPrefixWith(UCOMIMoniker pmkOther, out UCOMIMoniker ppmkPrefix); // 0x002C1564
	void RelativePathTo(UCOMIMoniker pmkOther, out UCOMIMoniker ppmkRelPath); // 0x002C1700
	void GetDisplayName(UCOMIBindCtx pbc, UCOMIMoniker pmkToLeft, out string ppszDisplayName); // 0x002C189C
	void ParseDisplayName(UCOMIBindCtx pbc, UCOMIMoniker pmkToLeft, string pszDisplayName, out int pchEaten, out UCOMIMoniker ppmkOut); // 0x002C1A0C
	void IsSystemMoniker(out int pdwMksys); // 0x002C1C44
}

// Namespace: System.Runtime.InteropServices
[ComImport]public interface UCOMIPersistFile // TypeDefIndex: 870
{
	// Methods
	void GetClassID(out Guid pClassID); // 0x002C1C88
	int IsDirty(); // 0x002C1CCC
	void Load(string pszFileName, int dwMode); // 0x002C1D20
	void Save(string pszFileName, bool fRemember); // 0x002C1D74
	void SaveCompleted(string pszFileName); // 0x002C1DC8
	void GetCurFile(out string ppszFileName); // 0x002C1E14
}

// Namespace: System.Runtime.InteropServices
[ComImport]public interface UCOMIRunningObjectTable // TypeDefIndex: 871
{
	// Methods
	void Register(int grfFlags, object punkObject, UCOMIMoniker pmkObjectName, out int pdwRegister); // 0x002C1E7C
	void Revoke(int dwRegister); // 0x002C1FE0
	void IsRunning(UCOMIMoniker pmkObjectName); // 0x002C2024
	void GetObject(UCOMIMoniker pmkObjectName, out object ppunkObject); // 0x002C20EC
	void NoteChangeTime(int dwRegister, FILETIME pfiletime); // 0x002C2288
	void GetTimeOfLastChange(UCOMIMoniker pmkObjectName, out FILETIME pfiletime); // 0x002C22D4
	void EnumRunning(out UCOMIEnumMoniker ppenumMoniker); // 0x002C23A4
}

// Namespace: System.Runtime.InteropServices
[ComImport]public interface UCOMIStream // TypeDefIndex: 872
{
	// Methods
	void Read(out byte[] pv, int cb, IntPtr pcbRead); // 0x002C24B8
	void Write(byte[] pv, int cb, IntPtr pcbWritten); // 0x002C2570
	void Seek(long dlibMove, int dwOrigin, IntPtr plibNewPosition); // 0x002C25CC
	void SetSize(long libNewSize); // 0x002C2630
	void CopyTo(UCOMIStream pstm, long cb, IntPtr pcbRead, IntPtr pcbWritten); // 0x002C267C
	void Commit(int grfCommitFlags); // 0x002C2770
	void Revert(); // 0x002C27B4
	void LockRegion(long libOffset, long cb, int dwLockType); // 0x002C27F0
	void UnlockRegion(long libOffset, long cb, int dwLockType); // 0x002C285C
	void Stat(out STATSTG pstatstg, int grfStatFlag); // 0x002C28C8
	void Clone(out UCOMIStream ppstm); // 0x002C2988
}

// Namespace: System.Runtime.InteropServices
[ComImport]public interface UCOMITypeComp // TypeDefIndex: 873
{
	// Methods
	void Bind(string szName, int lHashVal, short wFlags, out UCOMITypeInfo ppTInfo, out DESCKIND pDescKind, out BINDPTR pBindPtr); // 0x002C2A9C
	void BindType(string szName, int lHashVal, out UCOMITypeInfo ppTInfo, out UCOMITypeComp ppTComp); // 0x002C2BE0
}

// Namespace: System.Runtime.InteropServices
[ComImport]public interface UCOMITypeInfo // TypeDefIndex: 874
{
	// Methods
	void GetTypeAttr(out IntPtr ppTypeAttr); // 0x002C2D98
	void GetTypeComp(out UCOMITypeComp ppTComp); // 0x002C2DDC
	void GetFuncDesc(int index, out IntPtr ppFuncDesc); // 0x002C2EF0
	void GetVarDesc(int index, out IntPtr ppVarDesc); // 0x002C2F3C
	void GetNames(int memid, out string[] rgBstrNames, int cMaxNames, out int pcNames); // 0x002C2F88
	void GetRefTypeOfImplType(int index, out int href); // 0x002C308C
	void GetImplTypeFlags(int index, out int pImplTypeFlags); // 0x002C30D8
	void GetIDsOfNames(string[] rgszNames, int cNames, out int[] pMemId); // 0x002C3124
	void Invoke(object pvInstance, int memid, short wFlags, DISPPARAMS pDispParams, out object pVarResult, out EXCEPINFO pExcepInfo, out int puArgErr); // 0x002C3290
	void GetDocumentation(int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile); // 0x002C341C
	void GetDllEntry(int memid, INVOKEKIND invKind, out string pBstrDllName, out string pBstrName, out short pwOrdinal); // 0x002C34DC
	void GetRefTypeInfo(int hRef, out UCOMITypeInfo ppTI); // 0x002C3584
	void AddressOfMember(int memid, INVOKEKIND invKind, out IntPtr ppv); // 0x002C36A0
	void CreateInstance(object pUnkOuter, Guid riid, out object ppvObj); // 0x002C36F4
	void GetMops(int memid, out string pBstrMops); // 0x002C3898
	void GetContainingTypeLib(out UCOMITypeLib ppTLB, out int pIndex); // 0x002C3908
	void ReleaseTypeAttr(IntPtr pTypeAttr); // 0x002C3A24
	void ReleaseFuncDesc(IntPtr pFuncDesc); // 0x002C3A68
	void ReleaseVarDesc(IntPtr pVarDesc); // 0x002C3AAC
}

// Namespace: System.Runtime.InteropServices
[ComImport]public interface UCOMITypeLib // TypeDefIndex: 875
{
	// Methods
	int GetTypeInfoCount(); // 0x002C3AF0
	void GetTypeInfo(int index, out UCOMITypeInfo ppTI); // 0x002C3B44
	void GetTypeInfoType(int index, out TYPEKIND pTKind); // 0x002C3C60
	void GetTypeInfoOfGuid(Guid guid, out UCOMITypeInfo ppTInfo); // 0x002C3CAC
	void GetLibAttr(out IntPtr ppTLibAttr); // 0x002C3DC8
	void GetTypeComp(out UCOMITypeComp ppTComp); // 0x002C3E0C
	void GetDocumentation(int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile); // 0x002C3F20
	bool IsName(string szNameBuf, int lHashVal); // 0x002C3FE0
	void FindName(string szNameBuf, int lHashVal, out UCOMITypeInfo[] ppTInfo, out int[] rgMemId, short pcFound); // 0x002C4054
	void ReleaseTLibAttr(IntPtr pTLibAttr); // 0x002C4080
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public sealed class UnknownWrapper // TypeDefIndex: 876
{
	// Fields
	private object InternalObject; // 0x08

	// Properties
	public object WrappedObject { get; } // 0x002C40E4 

	// Constructors
	public UnknownWrapper(object obj); // 0x002C40C4

}

// Namespace: System.Runtime.InteropServices
public sealed class UnmanagedFunctionPointerAttribute : Attribute // TypeDefIndex: 877
{
	// Fields
	private CallingConvention call_conv; // 0x08
	public CharSet CharSet; // 0x0C
	public bool SetLastError; // 0x10
	public bool BestFitMapping; // 0x11
	public bool ThrowOnUnmappableChar; // 0x12

	// Properties
	public CallingConvention CallingConvention { get; } // 0x002C410C 

	// Constructors
	public UnmanagedFunctionPointerAttribute(CallingConvention callingConvention); // 0x002C40EC

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum UnmanagedType // TypeDefIndex: 878
{
	Bool = 2,
	I1 = 3,
	U1 = 4,
	I2 = 5,
	U2 = 6,
	I4 = 7,
	U4 = 8,
	I8 = 9,
	U8 = 10,
	R4 = 11,
	R8 = 12,
	Currency = 15,
	BStr = 19,
	LPStr = 20,
	LPWStr = 21,
	LPTStr = 22,
	ByValTStr = 23,
	IUnknown = 25,
	IDispatch = 26,
	Struct = 27,
	Interface = 28,
	SafeArray = 29,
	ByValArray = 30,
	SysInt = 31,
	SysUInt = 32,
	VBByRefStr = 34,
	AnsiBStr = 35,
	TBStr = 36,
	VariantBool = 37,
	FunctionPtr = 38,
	AsAny = 40,
	LPArray = 42,
	LPStruct = 43,
	CustomMarshaler = 44,
	Error = 45
}

// Namespace: System.Runtime.InteropServices
public struct VARDESC // TypeDefIndex: 879
{
	// Fields
	public int memid; // 0x08
	public string lpstrSchema; // 0x0C
	public ELEMDESC elemdescVar; // 0x10
	public short wVarFlags; // 0x20
	public VarEnum varkind; // 0x24

}

// Namespace: 
public struct DESCUNION // TypeDefIndex: 880
{
	// Fields
	public IntPtr lpvarValue; // 0x08
	public int oInst; // 0x08

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum VARFLAGS // TypeDefIndex: 881
{
	VARFLAG_FREADONLY = 1,
	VARFLAG_FSOURCE = 2,
	VARFLAG_FBINDABLE = 4,
	VARFLAG_FREQUESTEDIT = 8,
	VARFLAG_FDISPLAYBIND = 16,
	VARFLAG_FDEFAULTBIND = 32,
	VARFLAG_FHIDDEN = 64,
	VARFLAG_FRESTRICTED = 128,
	VARFLAG_FDEFAULTCOLLELEM = 256,
	VARFLAG_FUIDEFAULT = 512,
	VARFLAG_FNONBROWSABLE = 1024,
	VARFLAG_FREPLACEABLE = 2048,
	VARFLAG_FIMMEDIATEBIND = 4096
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum VarEnum // TypeDefIndex: 882
{
	VT_EMPTY = 0,
	VT_NULL = 1,
	VT_I2 = 2,
	VT_I4 = 3,
	VT_R4 = 4,
	VT_R8 = 5,
	VT_CY = 6,
	VT_DATE = 7,
	VT_BSTR = 8,
	VT_DISPATCH = 9,
	VT_ERROR = 10,
	VT_BOOL = 11,
	VT_VARIANT = 12,
	VT_UNKNOWN = 13,
	VT_DECIMAL = 14,
	VT_I1 = 16,
	VT_UI1 = 17,
	VT_UI2 = 18,
	VT_UI4 = 19,
	VT_I8 = 20,
	VT_UI8 = 21,
	VT_INT = 22,
	VT_UINT = 23,
	VT_VOID = 24,
	VT_HRESULT = 25,
	VT_PTR = 26,
	VT_SAFEARRAY = 27,
	VT_CARRAY = 28,
	VT_USERDEFINED = 29,
	VT_LPSTR = 30,
	VT_LPWSTR = 31,
	VT_RECORD = 36,
	VT_FILETIME = 64,
	VT_BLOB = 65,
	VT_STREAM = 66,
	VT_STORAGE = 67,
	VT_STREAMED_OBJECT = 68,
	VT_STORED_OBJECT = 69,
	VT_BLOB_OBJECT = 70,
	VT_CF = 71,
	VT_CLSID = 72,
	VT_VECTOR = 4096,
	VT_ARRAY = 8192,
	VT_BYREF = 16384
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public sealed class VariantWrapper // TypeDefIndex: 883
{
	// Fields
	private object _wrappedObject; // 0x08

	// Properties
	public object WrappedObject { get; } // 0x002C4134 

	// Constructors
	public VariantWrapper(object obj); // 0x002C4114

}

// Namespace: System.Runtime.InteropServices
public interface _Activator // TypeDefIndex: 884
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Runtime.InteropServices
public interface _Assembly // TypeDefIndex: 885
{
	// Properties
	string CodeBase { get; }
	string EscapedCodeBase { get; }
	string FullName { get; }
	MethodInfo EntryPoint { get; }
	string Location { get; }

	// Events
	event ModuleResolveEventHandler ModuleResolve {
		add; // 0x00000000
		remove; // 0x00000000
	}

	// Methods
	string ToString();
	bool Equals(object other);
	int GetHashCode();
	Type GetType();
	AssemblyName GetName();
	AssemblyName GetName(bool copiedName);
	Type GetType(string name);
	Type GetType(string name, bool throwOnError);
	Type[] GetExportedTypes();
	Type[] GetTypes();
	Stream GetManifestResourceStream(Type type, string name);
	Stream GetManifestResourceStream(string name);
	FileStream GetFile(string name);
	FileStream[] GetFiles();
	FileStream[] GetFiles(bool getResourceModules);
	string[] GetManifestResourceNames();
	ManifestResourceInfo GetManifestResourceInfo(string resourceName);
	object[] GetCustomAttributes(Type attributeType, bool inherit);
	object[] GetCustomAttributes(bool inherit);
	bool IsDefined(Type attributeType, bool inherit);
	void GetObjectData(SerializationInfo info, StreamingContext context);
	Type GetType(string name, bool throwOnError, bool ignoreCase);
	Assembly GetSatelliteAssembly(CultureInfo culture);
	Assembly GetSatelliteAssembly(CultureInfo culture, Version version);
	Module LoadModule(string moduleName, byte[] rawModule);
	Module LoadModule(string moduleName, byte[] rawModule, byte[] rawSymbolStore);
	object CreateInstance(string typeName);
	object CreateInstance(string typeName, bool ignoreCase);
	object CreateInstance(string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes);
	Module[] GetLoadedModules();
	Module[] GetLoadedModules(bool getResourceModules);
	Module[] GetModules();
	Module[] GetModules(bool getResourceModules);
	Module GetModule(string name);
	AssemblyName[] GetReferencedAssemblies();
}

// Namespace: System.Runtime.InteropServices
public interface _AssemblyBuilder // TypeDefIndex: 886
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Runtime.InteropServices
public interface _AssemblyName // TypeDefIndex: 887
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Runtime.InteropServices
public interface _ConstructorBuilder // TypeDefIndex: 888
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Runtime.InteropServices
public interface _ConstructorInfo // TypeDefIndex: 889
{
	// Properties
	MethodAttributes Attributes { get; }
	CallingConventions CallingConvention { get; }
	Type DeclaringType { get; }
	bool IsAbstract { get; }
	bool IsAssembly { get; }
	bool IsConstructor { get; }
	bool IsFamily { get; }
	bool IsFamilyAndAssembly { get; }
	bool IsFamilyOrAssembly { get; }
	bool IsFinal { get; }
	bool IsHideBySig { get; }
	bool IsPrivate { get; }
	bool IsPublic { get; }
	bool IsSpecialName { get; }
	bool IsStatic { get; }
	bool IsVirtual { get; }
	MemberTypes MemberType { get; }
	RuntimeMethodHandle MethodHandle { get; }
	string Name { get; }
	Type ReflectedType { get; }

	// Methods
	bool Equals(object other);
	object[] GetCustomAttributes(bool inherit);
	object[] GetCustomAttributes(Type attributeType, bool inherit);
	int GetHashCode();
	MethodImplAttributes GetMethodImplementationFlags();
	ParameterInfo[] GetParameters();
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
	Type GetType();
	object Invoke_5(object[] parameters);
	object Invoke_3(object obj, object[] parameters);
	object Invoke_4(BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture);
	object Invoke_2(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture);
	bool IsDefined(Type attributeType, bool inherit);
	string ToString();
}

// Namespace: System.Runtime.InteropServices
public interface _CustomAttributeBuilder // TypeDefIndex: 890
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Runtime.InteropServices
public interface _EnumBuilder // TypeDefIndex: 891
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Runtime.InteropServices
public interface _EventBuilder // TypeDefIndex: 892
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Runtime.InteropServices
public interface _EventInfo // TypeDefIndex: 893
{
	// Properties
	EventAttributes Attributes { get; }
	Type DeclaringType { get; }
	Type EventHandlerType { get; }
	bool IsMulticast { get; }
	bool IsSpecialName { get; }
	MemberTypes MemberType { get; }
	string Name { get; }
	Type ReflectedType { get; }

	// Methods
	void AddEventHandler(object target, Delegate handler);
	bool Equals(object other);
	MethodInfo GetAddMethod();
	MethodInfo GetAddMethod(bool nonPublic);
	object[] GetCustomAttributes(bool inherit);
	object[] GetCustomAttributes(Type attributeType, bool inherit);
	int GetHashCode();
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
	MethodInfo GetRaiseMethod();
	MethodInfo GetRaiseMethod(bool nonPublic);
	MethodInfo GetRemoveMethod();
	MethodInfo GetRemoveMethod(bool nonPublic);
	Type GetType();
	bool IsDefined(Type attributeType, bool inherit);
	void RemoveEventHandler(object target, Delegate handler);
	string ToString();
}

// Namespace: System.Runtime.InteropServices
public interface _FieldBuilder // TypeDefIndex: 894
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Runtime.InteropServices
public interface _FieldInfo // TypeDefIndex: 895
{
	// Properties
	FieldAttributes Attributes { get; }
	Type DeclaringType { get; }
	RuntimeFieldHandle FieldHandle { get; }
	Type FieldType { get; }
	bool IsAssembly { get; }
	bool IsFamily { get; }
	bool IsFamilyAndAssembly { get; }
	bool IsFamilyOrAssembly { get; }
	bool IsInitOnly { get; }
	bool IsLiteral { get; }
	bool IsNotSerialized { get; }
	bool IsPinvokeImpl { get; }
	bool IsPrivate { get; }
	bool IsPublic { get; }
	bool IsSpecialName { get; }
	bool IsStatic { get; }
	MemberTypes MemberType { get; }
	string Name { get; }
	Type ReflectedType { get; }

	// Methods
	bool Equals(object other);
	object[] GetCustomAttributes(bool inherit);
	object[] GetCustomAttributes(Type attributeType, bool inherit);
	int GetHashCode();
	Type GetType();
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
	object GetValue(object obj);
	object GetValueDirect(TypedReference obj);
	bool IsDefined(Type attributeType, bool inherit);
	void SetValue(object obj, object value);
	void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, CultureInfo culture);
	void SetValueDirect(TypedReference obj, object value);
	string ToString();
}

// Namespace: System.Runtime.InteropServices
public interface _ILGenerator // TypeDefIndex: 896
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Runtime.InteropServices
public interface _LocalBuilder // TypeDefIndex: 897
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Runtime.InteropServices
public interface _MethodBase // TypeDefIndex: 898
{
	// Properties
	MethodAttributes Attributes { get; }
	CallingConventions CallingConvention { get; }
	Type DeclaringType { get; }
	bool IsAbstract { get; }
	bool IsAssembly { get; }
	bool IsConstructor { get; }
	bool IsFamily { get; }
	bool IsFamilyAndAssembly { get; }
	bool IsFamilyOrAssembly { get; }
	bool IsFinal { get; }
	bool IsHideBySig { get; }
	bool IsPrivate { get; }
	bool IsPublic { get; }
	bool IsSpecialName { get; }
	bool IsStatic { get; }
	bool IsVirtual { get; }
	MemberTypes MemberType { get; }
	RuntimeMethodHandle MethodHandle { get; }
	string Name { get; }
	Type ReflectedType { get; }

	// Methods
	bool Equals(object other);
	object[] GetCustomAttributes(bool inherit);
	object[] GetCustomAttributes(Type attributeType, bool inherit);
	int GetHashCode();
	MethodImplAttributes GetMethodImplementationFlags();
	ParameterInfo[] GetParameters();
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
	Type GetType();
	object Invoke(object obj, object[] parameters);
	object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture);
	bool IsDefined(Type attributeType, bool inherit);
	string ToString();
}

// Namespace: System.Runtime.InteropServices
public interface _MethodBuilder // TypeDefIndex: 899
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Runtime.InteropServices
public interface _MethodInfo // TypeDefIndex: 900
{
	// Properties
	MethodAttributes Attributes { get; }
	CallingConventions CallingConvention { get; }
	Type DeclaringType { get; }
	bool IsAbstract { get; }
	bool IsAssembly { get; }
	bool IsConstructor { get; }
	bool IsFamily { get; }
	bool IsFamilyAndAssembly { get; }
	bool IsFamilyOrAssembly { get; }
	bool IsFinal { get; }
	bool IsHideBySig { get; }
	bool IsPrivate { get; }
	bool IsPublic { get; }
	bool IsSpecialName { get; }
	bool IsStatic { get; }
	bool IsVirtual { get; }
	MemberTypes MemberType { get; }
	RuntimeMethodHandle MethodHandle { get; }
	string Name { get; }
	Type ReflectedType { get; }
	Type ReturnType { get; }
	ICustomAttributeProvider ReturnTypeCustomAttributes { get; }

	// Methods
	bool Equals(object other);
	MethodInfo GetBaseDefinition();
	object[] GetCustomAttributes(bool inherit);
	object[] GetCustomAttributes(Type attributeType, bool inherit);
	int GetHashCode();
	MethodImplAttributes GetMethodImplementationFlags();
	ParameterInfo[] GetParameters();
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
	Type GetType();
	object Invoke(object obj, object[] parameters);
	object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture);
	bool IsDefined(Type attributeType, bool inherit);
	string ToString();
}

// Namespace: System.Runtime.InteropServices
public interface _MethodRental // TypeDefIndex: 901
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Runtime.InteropServices
public interface _Module // TypeDefIndex: 902
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Runtime.InteropServices
public interface _ModuleBuilder // TypeDefIndex: 903
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Runtime.InteropServices
public interface _ParameterBuilder // TypeDefIndex: 904
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Runtime.InteropServices
public interface _ParameterInfo // TypeDefIndex: 905
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Runtime.InteropServices
public interface _PropertyBuilder // TypeDefIndex: 906
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Runtime.InteropServices
public interface _PropertyInfo // TypeDefIndex: 907
{
	// Properties
	PropertyAttributes Attributes { get; }
	bool CanRead { get; }
	bool CanWrite { get; }
	Type DeclaringType { get; }
	bool IsSpecialName { get; }
	MemberTypes MemberType { get; }
	string Name { get; }
	Type PropertyType { get; }
	Type ReflectedType { get; }

	// Methods
	bool Equals(object other);
	MethodInfo[] GetAccessors();
	MethodInfo[] GetAccessors(bool nonPublic);
	object[] GetCustomAttributes(bool inherit);
	object[] GetCustomAttributes(Type attributeType, bool inherit);
	MethodInfo GetGetMethod();
	MethodInfo GetGetMethod(bool nonPublic);
	int GetHashCode();
	ParameterInfo[] GetIndexParameters();
	MethodInfo GetSetMethod();
	MethodInfo GetSetMethod(bool nonPublic);
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
	Type GetType();
	object GetValue(object obj, object[] index);
	object GetValue(object obj, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture);
	bool IsDefined(Type attributeType, bool inherit);
	void SetValue(object obj, object value, object[] index);
	void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture);
	string ToString();
}

// Namespace: System.Runtime.InteropServices
public interface _SignatureHelper // TypeDefIndex: 908
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Runtime.InteropServices
public interface _Thread // TypeDefIndex: 909
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Runtime.InteropServices
public interface _TypeBuilder // TypeDefIndex: 910
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Runtime.Remoting.Activation
internal class ActivationServices // TypeDefIndex: 911
{
	// Fields
	private static IActivator _constructionActivator; // 0x00

	// Properties
	private static IActivator ConstructionActivator { get; } // 0x002C4798 

	// Constructors
	public ActivationServices(); // 0x002C4790

	// Methods
	public static IMessage Activate(RemotingProxy proxy, ConstructionCall ctorCall); // 0x002C484C
	public static IMessage RemoteActivate(IConstructionCallMessage ctorCall); // 0x002C4BB4
	public static object CreateProxyFromAttributes(Type type, object[] activationAttributes); // 0x002C4DD4
	public static ConstructionCall CreateConstructionCall(Type type, string activationUrl, object[] activationAttributes); // 0x002C5058
	public static IMessage CreateInstanceFromMessage(IConstructionCallMessage ctorCall); // 0x002C5D60
	public static object CreateProxyForType(Type type); // 0x002C62C0
	public static object AllocateUninitializedClassInstance(Type type); // 0x002C62BC
	public static void EnableProxyActivation(Type type, bool enable); // 0x002C6474
}

// Namespace: System.Runtime.Remoting.Activation
[Serializable]
public enum ActivatorLevel // TypeDefIndex: 912
{
	Construction = 4,
	Context = 8,
	AppDomain = 12,
	Process = 16,
	Machine = 20
}

// Namespace: System.Runtime.Remoting.Activation
internal class AppDomainLevelActivator : IActivator // TypeDefIndex: 913
{
	// Fields
	private string _activationUrl; // 0x08
	private IActivator _next; // 0x0C

	// Properties
	public ActivatorLevel Level { get; } // 0x002C6478 
	public IActivator NextActivator { get; set; } // 0x002C6480 0x002C6488

	// Constructors
	public AppDomainLevelActivator(string activationUrl, IActivator next); // 0x002C5D18

	// Methods
	public IConstructionReturnMessage Activate(IConstructionCallMessage ctorCall); // 0x002C6490
}

// Namespace: System.Runtime.Remoting.Activation
[Serializable]
internal class ConstructionLevelActivator : IActivator // TypeDefIndex: 914
{
	// Properties
	public ActivatorLevel Level { get; } // 0x002C6A8C 
	public IActivator NextActivator { get; set; } // 0x002C6A94 0x002C6A9C

	// Constructors
	public ConstructionLevelActivator(); // 0x002C4844

	// Methods
	public IConstructionReturnMessage Activate(IConstructionCallMessage msg); // 0x002C6AA0
}

// Namespace: System.Runtime.Remoting.Activation
[Serializable]
internal class ContextLevelActivator : IActivator // TypeDefIndex: 915
{
	// Fields
	private IActivator m_NextActivator; // 0x08

	// Properties
	public ActivatorLevel Level { get; } // 0x002C6C14 
	public IActivator NextActivator { get; set; } // 0x002C6C1C 0x002C6C24

	// Constructors
	public ContextLevelActivator(IActivator next); // 0x002C5D40

	// Methods
	public IConstructionReturnMessage Activate(IConstructionCallMessage ctorCall); // 0x002C6C2C
}

// Namespace: System.Runtime.Remoting.Activation
public interface IActivator // TypeDefIndex: 916
{
	// Properties
	ActivatorLevel Level { get; }
	IActivator NextActivator { get; set; }

	// Methods
	IConstructionReturnMessage Activate(IConstructionCallMessage msg);
}

// Namespace: System.Runtime.Remoting.Activation
public interface IConstructionCallMessage : IMessage, IMethodCallMessage, IMethodMessage // TypeDefIndex: 917
{
	// Properties
	Type ActivationType { get; }
	string ActivationTypeName { get; }
	IActivator Activator { get; set; }
	object[] CallSiteActivationAttributes { get; }
	IList ContextProperties { get; }

}

// Namespace: System.Runtime.Remoting.Activation
public interface IConstructionReturnMessage : IMessage, IMethodMessage, IMethodReturnMessage // TypeDefIndex: 918
{
}

// Namespace: System.Runtime.Remoting.Activation
internal class RemoteActivationAttribute : Attribute, IContextAttribute // TypeDefIndex: 919
{
	// Fields
	private IList _contextProperties; // 0x08

	// Constructors
	public RemoteActivationAttribute(); // 0x002C7008
	public RemoteActivationAttribute(IList contextProperties); // 0x002C7010

	// Methods
	public bool IsContextOK(Context ctx, IConstructionCallMessage ctor); // 0x002C7030
	public void GetPropertiesForNewContext(IConstructionCallMessage ctor); // 0x002C7038
}

// Namespace: System.Runtime.Remoting.Activation
internal class RemoteActivator : MarshalByRefObject, IActivator // TypeDefIndex: 920
{
	// Properties
	public ActivatorLevel Level { get; } // 0x002C7D5C 
	public IActivator NextActivator { get; set; } // 0x002C7DE4 0x002C7E6C

	// Constructors
	public RemoteActivator(); // 0x002C746C

	// Methods
	public IConstructionReturnMessage Activate(IConstructionCallMessage msg); // 0x002C7474
	public override object InitializeLifetimeService(); // 0x002C79D8
}

// Namespace: System.Runtime.Remoting.Activation
[Serializable]
public sealed class UrlAttribute : ContextAttribute // TypeDefIndex: 921
{
	// Fields
	private string url; // 0x0C

	// Properties
	public string UrlValue { get; } // 0x002C7F14 

	// Constructors
	public UrlAttribute(string callsiteURL); // 0x002C7EF4

	// Methods
	public override bool Equals(object o); // 0x002C7F1C
	public override int GetHashCode(); // 0x002C7FDC
	public override void GetPropertiesForNewContext(IConstructionCallMessage ctorMsg); // 0x002C8008
	public override bool IsContextOK(Context ctx, IConstructionCallMessage msg); // 0x002C800C
}

// Namespace: System.Runtime.Remoting.Channels
internal class AggregateDictionary : IEnumerable, ICollection, IDictionary // TypeDefIndex: 922
{
	// Fields
	private IDictionary[] dictionaries; // 0x08
	private ArrayList _values; // 0x0C
	private ArrayList _keys; // 0x10

	// Properties
	public bool IsFixedSize { get; } // 0x002C9524 
	public bool IsReadOnly { get; } // 0x002C952C 
	public object Item { get; set; } // 0x002C9534 0x002C96FC
	public ICollection Keys { get; } // 0x002C9784 
	public ICollection Values { get; } // 0x002C9928 
	public int Count { get; } // 0x002CA0D8 
	public bool IsSynchronized { get; } // 0x002CA214 
	public object SyncRoot { get; } // 0x002CA21C 

	// Constructors
	public AggregateDictionary(IDictionary[] dics); // 0x002C945C

	// Methods
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x002C947C
	public void Add(object key, object value); // 0x002C9ACC
	public void Clear(); // 0x002C9B54
	public bool Contains(object ob); // 0x002C9BDC
	public IDictionaryEnumerator GetEnumerator(); // 0x002C9D1C
	public void Remove(object ob); // 0x002C9D9C
	public void CopyTo(Array array, int index); // 0x002C9E24
}

// Namespace: System.Runtime.Remoting.Channels
internal class AggregateEnumerator : IEnumerator, IDictionaryEnumerator // TypeDefIndex: 923
{
	// Fields
	private IDictionary[] dictionaries; // 0x08
	private int pos; // 0x0C
	private IDictionaryEnumerator currente; // 0x10

	// Properties
	public DictionaryEntry Entry { get; } // 0x002CA354 
	public object Key { get; } // 0x002CA434 
	public object Value { get; } // 0x002CA50C 
	public object Current { get; } // 0x002CA5E4 

	// Constructors
	public AggregateEnumerator(IDictionary[] dics); // 0x002C94FC

	// Methods
	public bool MoveNext(); // 0x002CA6BC
	public void Reset(); // 0x002CA220
}

// Namespace: System.Runtime.Remoting.Channels
public abstract class BaseChannelObjectWithProperties : IEnumerable, ICollection, IDictionary // TypeDefIndex: 924
{
	// Fields
	private Hashtable table; // 0x08

	// Properties
	public virtual int Count { get; } // 0x002CA9C0 
	public virtual bool IsFixedSize { get; } // 0x002CA9F4 
	public virtual bool IsReadOnly { get; } // 0x002CA9FC 
	public virtual bool IsSynchronized { get; } // 0x002CAA04 
	public virtual object Item { get; set; } // 0x002CAA0C 0x002CAA94
	public virtual ICollection Keys { get; } // 0x002CAB1C 
	public virtual IDictionary Properties { get; } // 0x002CAB50 
	public virtual object SyncRoot { get; } // 0x002CAB54 
	public virtual ICollection Values { get; } // 0x002CAB58 

	// Constructors
	protected BaseChannelObjectWithProperties(); // 0x002CA910

	// Methods
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x002CA98C
	public virtual void Add(object key, object value); // 0x002CAB8C
	public virtual void Clear(); // 0x002CAC14
	public virtual bool Contains(object key); // 0x002CAC9C
	public virtual void CopyTo(Array array, int index); // 0x002CACD8
	public virtual IDictionaryEnumerator GetEnumerator(); // 0x002CAD60
	public virtual void Remove(object key); // 0x002CAD94
}

// Namespace: System.Runtime.Remoting.Channels
public abstract class BaseChannelSinkWithProperties : BaseChannelObjectWithProperties // TypeDefIndex: 925
{
	// Constructors
	protected BaseChannelSinkWithProperties(); // 0x002CAE1C

}

// Namespace: System.Runtime.Remoting.Channels
public abstract class BaseChannelWithProperties : BaseChannelObjectWithProperties // TypeDefIndex: 926
{
	// Fields
	protected IChannelSinkBase SinksWithProperties; // 0x0C

	// Properties
	public override IDictionary Properties { get; } // 0x002CAE24 

	// Constructors
	protected BaseChannelWithProperties(); // 0x002CAE20

}

// Namespace: System.Runtime.Remoting.Channels
[Serializable]
public class ChannelDataStore : IChannelDataStore // TypeDefIndex: 927
{
	// Fields
	private string[] _channelURIs; // 0x08
	private DictionaryEntry[] _extraData; // 0x0C

	// Properties
	public string[] ChannelUris { get; set; } // 0x002CB53C 0x002CB544
	public object Item { get; set; } // 0x002CB54C 0x002CB5E8

	// Constructors
	public ChannelDataStore(string[] channelURIs); // 0x002CB51C

}

// Namespace: System.Runtime.Remoting
[Serializable]
internal class ChannelInfo : IChannelInfo // TypeDefIndex: 928
{
	// Fields
	private object[] channelData; // 0x08

	// Properties
	public object[] ChannelData { get; set; } // 0x002C944C 0x002C9454

	// Constructors
	public ChannelInfo(); // 0x002C8DB0
	public ChannelInfo(object remoteChannelData); // 0x002C9370

}

// Namespace: System.Runtime.Remoting.Channels
public sealed class ChannelServices // TypeDefIndex: 929
{
	// Fields
	private static ArrayList registeredChannels; // 0x00
	private static ArrayList delayedClientChannels; // 0x04
	private static CrossContextChannel _crossContextSink; // 0x08
	internal static string CrossContextUrl; // 0x0C
	private static IList oldStartModeTypes; // 0x10

	// Properties
	internal static CrossContextChannel CrossContextChannel { get; } // 0x002CB9BC 
	public static IChannel[] RegisteredChannels { get; } // 0x002CC710 

	// Constructors
	private ChannelServices(); // 0x002CB7B4
	private static ChannelServices(); // 0x002CB7BC

	// Methods
	internal static IMessageSink CreateClientChannelSinkChain(string url, object remoteChannelData, out string objectUri); // 0x002CBA48
	internal static IMessageSink CreateClientChannelSinkChain(IChannelSender sender, string url, object[] channelDataArray, out string objectUri); // 0x002CC450
	public static IServerChannelSink CreateServerChannelSinkChain(IServerChannelSinkProvider provider, IChannelReceiver channel); // 0x002CCAF0
	public static ServerProcessing DispatchMessage(IServerChannelSinkStack sinkStack, IMessage msg, out IMessage replyMsg); // 0x002CCDB0
	public static IChannel GetChannel(string name); // 0x002CD0D0
	public static IDictionary GetChannelSinkProperties(object obj); // 0x002CD698
	public static string[] GetUrlsForObject(MarshalByRefObject obj); // 0x002CDB58
	public static void RegisterChannel(IChannel chnl); // 0x002CC68C
	public static void RegisterChannel(IChannel chnl, bool ensureSecurity); // 0x002CE1D8
	internal static void RegisterChannelConfig(ChannelData channel); // 0x002CEE14
	private static object CreateProvider(ProviderData prov); // 0x002CFF54
	public static IMessage SyncDispatchMessage(IMessage msg); // 0x002CCFB0
	public static IMessageCtrl AsyncDispatchMessage(IMessage msg, IMessageSink replySink); // 0x002D09D4
	private static ReturnMessage CheckIncomingMessage(IMessage msg); // 0x002D0480
	internal static IMessage CheckReturnMessage(IMessage callMsg, IMessage retMsg); // 0x002D07CC
	private static bool IsLocalCall(IMessage callMsg); // 0x002D0C28
	public static void UnregisterChannel(IChannel chnl); // 0x002D0C58
	internal static object[] GetCurrentChannelInfo(); // 0x002C8E3C
}

// Namespace: System.Runtime.Remoting.Channels
internal class ExceptionFilterSink : IMessageSink // TypeDefIndex: 930
{
	// Fields
	private IMessageSink _next; // 0x08
	private IMessage _call; // 0x0C

	// Properties
	public IMessageSink NextSink { get; } // 0x002D2AB0 

	// Constructors
	public ExceptionFilterSink(IMessage call, IMessageSink next); // 0x002D0C30

	// Methods
	public IMessage SyncProcessMessage(IMessage msg); // 0x002D2908
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x002D2A28
}

// Namespace: System.Runtime.Remoting.Channels
internal class ChanelSinkStackEntry // TypeDefIndex: 931
{
	// Fields
	public IChannelSinkBase Sink; // 0x08
	public object State; // 0x0C
	public ChanelSinkStackEntry Next; // 0x10

	// Constructors
	public ChanelSinkStackEntry(IChannelSinkBase sink, object state, ChanelSinkStackEntry next); // 0x002CB4EC

}

// Namespace: System.Runtime.Remoting.Channels
public class ClientChannelSinkStack : IClientChannelSinkStack, IClientResponseChannelSinkStack // TypeDefIndex: 932
{
	// Fields
	private IMessageSink _replySink; // 0x08
	private ChanelSinkStackEntry _sinkStack; // 0x0C

	// Constructors
	public ClientChannelSinkStack(); // 0x002D103C
	public ClientChannelSinkStack(IMessageSink replySink); // 0x002D1044

	// Methods
	public void AsyncProcessResponse(ITransportHeaders headers, Stream stream); // 0x002D1064
	public void DispatchException(Exception e); // 0x002D1230
	public void DispatchReplyMessage(IMessage msg); // 0x002D12B4
	public object Pop(IClientChannelSink sink); // 0x002D1390
	public void Push(IClientChannelSink sink, object state); // 0x002D1460
}

// Namespace: System.Runtime.Remoting.Channels
[Serializable]
internal class CrossAppDomainData // TypeDefIndex: 933
{
	// Fields
	private object _ContextID; // 0x08
	private int _DomainID; // 0x0C
	private string _processGuid; // 0x10

	// Properties
	internal int DomainID { get; } // 0x002D1E84 
	internal string ProcessID { get; } // 0x002D1E8C 

	// Constructors
	internal CrossAppDomainData(int domainId); // 0x002D17CC

}

// Namespace: System.Runtime.Remoting.Channels
[Serializable]
internal class CrossAppDomainChannel : IChannel, IChannelReceiver, IChannelSender // TypeDefIndex: 934
{
	// Fields
	private const string _strName = "MONOCAD"; // 0x00
	private const string _strBaseURI = "MONOCADURI"; // 0x00
	private static object s_lock; // 0x00

	// Properties
	public virtual string ChannelName { get; } // 0x002D16B8 
	public virtual int ChannelPriority { get; } // 0x002D1714 
	public virtual object ChannelData { get; } // 0x002D1728 

	// Constructors
	public CrossAppDomainChannel(); // 0x002D14E8
	private static CrossAppDomainChannel(); // 0x002D14F0

	// Methods
	internal static void RegisterCrossAppDomainChannel(); // 0x002D1570
	public string Parse(string url, out string objectURI); // 0x002D171C
	public virtual string[] GetUrlsForUri(string objectURI); // 0x002D1890
	public virtual void StartListening(object data); // 0x002D192C
	public virtual void StopListening(object data); // 0x002D1930
	public virtual IMessageSink CreateMessageSink(string url, object data, out string uri); // 0x002D1934
}

// Namespace: System.Runtime.Remoting.Channels
internal class CrossAppDomainSink : IMessageSink // TypeDefIndex: 935
{
	// Fields
	private static Hashtable s_sinks; // 0x00
	private static MethodInfo processMessageMethod; // 0x04
	private int _domainID; // 0x08

	// Properties
	internal int TargetDomainId { get; } // 0x002D1FC8 
	public IMessageSink NextSink { get; } // 0x002D2900 

	// Constructors
	internal CrossAppDomainSink(int domainID); // 0x002D1E94
	private static CrossAppDomainSink(); // 0x002D1EB4

	// Methods
	internal static CrossAppDomainSink GetSink(int domainID); // 0x002D1B1C
	private static ProcessMessageRes ProcessMessageInDomain(byte[] arrRequest, CADMethodCallMessage cadMsg); // 0x002D1FD0
	public virtual IMessage SyncProcessMessage(IMessage msgRequest); // 0x002D218C
	public virtual IMessageCtrl AsyncProcessMessage(IMessage reqMsg, IMessageSink replySink); // 0x002D26CC
	public void SendAsyncMessage(object data); // 0x002D2794
}

// Namespace: 
private struct ProcessMessageRes // TypeDefIndex: 936
{
	// Fields
	public byte[] arrResponse; // 0x08
	public CADMethodReturnMessage cadMrm; // 0x0C

}

// Namespace: System.Runtime.Remoting.Channels
internal class CADSerializer // TypeDefIndex: 937
{
	// Constructors
	public CADSerializer(); // 0x002CB090

	// Methods
	internal static IMessage DeserializeMessage(MemoryStream mem, IMethodCallMessage msg); // 0x002CB098
	internal static MemoryStream SerializeMessage(IMessage msg); // 0x002CB1D8
	internal static MemoryStream SerializeObject(object obj); // 0x002CB2FC
	internal static object DeserializeObject(MemoryStream mem); // 0x002CB420
}

// Namespace: System.Runtime.Remoting.Channels
internal class AsyncRequest // TypeDefIndex: 938
{
	// Fields
	internal IMessageSink ReplySink; // 0x08
	internal IMessage MsgRequest; // 0x0C

	// Constructors
	public AsyncRequest(IMessage msgRequest, IMessageSink replySink); // 0x002CA8E8

}

// Namespace: System.Runtime.Remoting.Channels
public interface IChannel // TypeDefIndex: 939
{
	// Properties
	string ChannelName { get; }
	int ChannelPriority { get; }

	// Methods
	string Parse(string url, out string objectURI);
}

// Namespace: System.Runtime.Remoting.Channels
public interface IChannelDataStore // TypeDefIndex: 940
{
	// Properties
	string[] ChannelUris { get; }
	object Item { get; set; }

}

// Namespace: System.Runtime.Remoting.Channels
public interface IChannelReceiver : IChannel // TypeDefIndex: 941
{
	// Properties
	object ChannelData { get; }

	// Methods
	string[] GetUrlsForUri(string objectURI);
	void StartListening(object data);
	void StopListening(object data);
}

// Namespace: System.Runtime.Remoting.Channels
public interface IChannelReceiverHook // TypeDefIndex: 942
{
	// Properties
	string ChannelScheme { get; }
	IServerChannelSink ChannelSinkChain { get; }
	bool WantsToListen { get; }

	// Methods
	void AddHookChannelUri(string channelUri);
}

// Namespace: System.Runtime.Remoting.Channels
public interface IChannelSender : IChannel // TypeDefIndex: 943
{
	// Methods
	IMessageSink CreateMessageSink(string url, object remoteChannelData, out string objectURI);
}

// Namespace: System.Runtime.Remoting.Channels
public interface IChannelSinkBase // TypeDefIndex: 944
{
	// Properties
	IDictionary Properties { get; }

}

// Namespace: System.Runtime.Remoting.Channels
public interface IClientChannelSink : IChannelSinkBase // TypeDefIndex: 945
{
	// Properties
	IClientChannelSink NextChannelSink { get; }

	// Methods
	void AsyncProcessRequest(IClientChannelSinkStack sinkStack, IMessage msg, ITransportHeaders headers, Stream stream);
	void AsyncProcessResponse(IClientResponseChannelSinkStack sinkStack, object state, ITransportHeaders headers, Stream stream);
	Stream GetRequestStream(IMessage msg, ITransportHeaders headers);
	void ProcessMessage(IMessage msg, ITransportHeaders requestHeaders, Stream requestStream, out ITransportHeaders responseHeaders, out Stream responseStream);
}

// Namespace: System.Runtime.Remoting.Channels
public interface IClientChannelSinkProvider // TypeDefIndex: 946
{
	// Properties
	IClientChannelSinkProvider Next { get; set; }

	// Methods
	IClientChannelSink CreateSink(IChannelSender channel, string url, object remoteChannelData);
}

// Namespace: System.Runtime.Remoting.Channels
public interface IClientChannelSinkStack : IClientResponseChannelSinkStack // TypeDefIndex: 947
{
	// Methods
	object Pop(IClientChannelSink sink);
	void Push(IClientChannelSink sink, object state);
}

// Namespace: System.Runtime.Remoting.Channels
public interface IClientFormatterSink : IChannelSinkBase, IClientChannelSink, IMessageSink // TypeDefIndex: 948
{
}

// Namespace: System.Runtime.Remoting.Channels
public interface IClientFormatterSinkProvider : IClientChannelSinkProvider // TypeDefIndex: 949
{
}

// Namespace: System.Runtime.Remoting.Channels
public interface IClientResponseChannelSinkStack // TypeDefIndex: 950
{
	// Methods
	void AsyncProcessResponse(ITransportHeaders headers, Stream stream);
	void DispatchException(Exception e);
	void DispatchReplyMessage(IMessage msg);
}

// Namespace: System.Runtime.Remoting.Channels
public interface ISecurableChannel // TypeDefIndex: 951
{
	// Properties
	bool IsSecured { get; set; }

}

// Namespace: System.Runtime.Remoting.Channels
public interface IServerChannelSink : IChannelSinkBase // TypeDefIndex: 952
{
	// Properties
	IServerChannelSink NextChannelSink { get; }

	// Methods
	void AsyncProcessResponse(IServerResponseChannelSinkStack sinkStack, object state, IMessage msg, ITransportHeaders headers, Stream stream);
	Stream GetResponseStream(IServerResponseChannelSinkStack sinkStack, object state, IMessage msg, ITransportHeaders headers);
	ServerProcessing ProcessMessage(IServerChannelSinkStack sinkStack, IMessage requestMsg, ITransportHeaders requestHeaders, Stream requestStream, out IMessage responseMsg, out ITransportHeaders responseHeaders, out Stream responseStream);
}

// Namespace: System.Runtime.Remoting.Channels
public interface IServerChannelSinkProvider // TypeDefIndex: 953
{
	// Properties
	IServerChannelSinkProvider Next { get; set; }

	// Methods
	IServerChannelSink CreateSink(IChannelReceiver channel);
	void GetChannelData(IChannelDataStore channelData);
}

// Namespace: System.Runtime.Remoting.Channels
public interface IServerChannelSinkStack : IServerResponseChannelSinkStack // TypeDefIndex: 954
{
	// Methods
	object Pop(IServerChannelSink sink);
	void Push(IServerChannelSink sink, object state);
	void ServerCallback(IAsyncResult ar);
	void Store(IServerChannelSink sink, object state);
	void StoreAndDispatch(IServerChannelSink sink, object state);
}

// Namespace: System.Runtime.Remoting.Channels
public interface IServerFormatterSinkProvider : IServerChannelSinkProvider // TypeDefIndex: 955
{
}

// Namespace: System.Runtime.Remoting.Channels
public interface IServerResponseChannelSinkStack // TypeDefIndex: 956
{
	// Methods
	void AsyncProcessResponse(IMessage msg, ITransportHeaders headers, Stream stream);
	Stream GetResponseStream(IMessage msg, ITransportHeaders headers);
}

// Namespace: System.Runtime.Remoting.Channels
public interface ITransportHeaders // TypeDefIndex: 957
{
	// Properties
	object Item { get; set; }

	// Methods
	IEnumerator GetEnumerator();
}

// Namespace: System.Runtime.Remoting.Channels
public class ServerChannelSinkStack : IServerChannelSinkStack, IServerResponseChannelSinkStack // TypeDefIndex: 958
{
	// Fields
	private ChanelSinkStackEntry _sinkStack; // 0x08

	// Constructors
	public ServerChannelSinkStack(); // 0x002D2AB8

	// Methods
	public Stream GetResponseStream(IMessage msg, ITransportHeaders headers); // 0x002D2AC0
	public object Pop(IServerChannelSink sink); // 0x002D2C84
	public void Push(IServerChannelSink sink, object state); // 0x002D2D54
	public void ServerCallback(IAsyncResult ar); // 0x002D2DDC
	public void Store(IServerChannelSink sink, object state); // 0x002D2E64
	public void StoreAndDispatch(IServerChannelSink sink, object state); // 0x002D2EEC
	public void AsyncProcessResponse(IMessage msg, ITransportHeaders headers, Stream stream); // 0x002D2F74
}

// Namespace: System.Runtime.Remoting.Channels
internal class ServerDispatchSink : IChannelSinkBase, IServerChannelSink // TypeDefIndex: 959
{
	// Properties
	public IServerChannelSink NextChannelSink { get; } // 0x002D3150 
	public IDictionary Properties { get; } // 0x002D3158 

	// Constructors
	public ServerDispatchSink(); // 0x002D3148

	// Methods
	public void AsyncProcessResponse(IServerResponseChannelSinkStack sinkStack, object state, IMessage msg, ITransportHeaders headers, Stream stream); // 0x002D3160
	public Stream GetResponseStream(IServerResponseChannelSinkStack sinkStack, object state, IMessage msg, ITransportHeaders headers); // 0x002D31E8
	public ServerProcessing ProcessMessage(IServerChannelSinkStack sinkStack, IMessage requestMsg, ITransportHeaders requestHeaders, Stream requestStream, out IMessage responseMsg, out ITransportHeaders responseHeaders, out Stream responseStream); // 0x002D31F0
}

// Namespace: System.Runtime.Remoting.Channels
internal class ServerDispatchSinkProvider : IServerChannelSinkProvider, IServerFormatterSinkProvider // TypeDefIndex: 960
{
	// Properties
	public IServerChannelSinkProvider Next { get; set; } // 0x002D3294 0x002D329C

	// Constructors
	public ServerDispatchSinkProvider(); // 0x002CCDA8
	public ServerDispatchSinkProvider(IDictionary properties, ICollection providerData); // 0x002D328C

	// Methods
	public IServerChannelSink CreateSink(IChannelReceiver channel); // 0x002D3324
	public void GetChannelData(IChannelDataStore channelData); // 0x002D3390
}

// Namespace: System.Runtime.Remoting.Channels
[Serializable]
public enum ServerProcessing // TypeDefIndex: 961
{
	Complete = 0,
	OneWay = 1,
	Async = 2
}

// Namespace: System.Runtime.Remoting.Channels
public class SinkProviderData // TypeDefIndex: 962
{
	// Fields
	private string sinkName; // 0x08
	private ArrayList children; // 0x0C
	private Hashtable properties; // 0x10

	// Properties
	public IList Children { get; } // 0x002D343C 
	public string Name { get; } // 0x002D3444 
	public IDictionary Properties { get; } // 0x002D344C 

	// Constructors
	public SinkProviderData(string name); // 0x002D3394

}

// Namespace: System.Runtime.Remoting.Channels
[Serializable]
public class TransportHeaders : ITransportHeaders // TypeDefIndex: 963
{
	// Fields
	private Hashtable hash_table; // 0x08

	// Properties
	public object Item { get; set; } // 0x002D3628 0x002D3664

	// Constructors
	public TransportHeaders(); // 0x002D3454

	// Methods
	public IEnumerator GetEnumerator(); // 0x002D36A8
}

// Namespace: System.Runtime.Remoting.Contexts
public class Context // TypeDefIndex: 964
{
	// Fields
	private int domain_id; // 0x08
	private int context_id; // 0x0C
	private UIntPtr static_data; // 0x10
	private static IMessageSink default_server_context_sink; // 0x00
	private IMessageSink server_context_sink_chain; // 0x14
	private IMessageSink client_context_sink_chain; // 0x18
	private object[] datastore; // 0x1C
	private ArrayList context_properties; // 0x20
	private bool frozen; // 0x24
	private static int global_count; // 0x04
	private static Hashtable namedSlots; // 0x08
	private static DynamicPropertyCollection global_dynamic_properties; // 0x0C
	private DynamicPropertyCollection context_dynamic_properties; // 0x28
	private ContextCallbackObject callback_object; // 0x2C

	// Properties
	public static Context DefaultContext { get; } // 0x002FD06C 
	public virtual int ContextID { get; } // 0x002FD074 
	public virtual IContextProperty[] ContextProperties { get; } // 0x002FD07C 
	internal bool IsDefaultContext { get; } // 0x002FD1A0 
	internal bool NeedsContextSink { get; } // 0x002FD1B4 
	internal static bool HasGlobalDynamicSinks { get; } // 0x002FE658 
	internal bool HasDynamicSinks { get; } // 0x002FE804 
	internal bool HasExitSinks { get; } // 0x002FE858 

	// Constructors
	public Context(); // 0x002FCF04
	private static Context(); // 0x002FCFE4

	// Methods
	protected override void Finalize(); // 0x002FD064
	public static bool RegisterDynamicProperty(IDynamicProperty prop, ContextBoundObject obj, Context ctx); // 0x002FD368
	public static bool UnregisterDynamicProperty(string name, ContextBoundObject obj, Context ctx); // 0x002FD9E8
	private static DynamicPropertyCollection GetDynamicPropertyCollection(ContextBoundObject obj, Context ctx); // 0x002FD414
	internal static void NotifyGlobalDynamicSinks(bool start, IMessage req_msg, bool client_site, bool async); // 0x002FDDC0
	internal void NotifyDynamicSinks(bool start, IMessage req_msg, bool client_site, bool async); // 0x002FE774
	public virtual IContextProperty GetProperty(string name); // 0x002FED10
	public virtual void SetProperty(IContextProperty prop); // 0x002FF128
	public virtual void Freeze(); // 0x002FF304
	public override string ToString(); // 0x002FF670
	internal IMessageSink GetServerContextSinkChain(); // 0x002FF730
	internal IMessageSink GetClientContextSinkChain(); // 0x002FE934
	internal IMessageSink CreateServerObjectSinkChain(MarshalByRefObject obj, bool forceInternalExecute); // 0x002FF9C4
	internal IMessageSink CreateEnvoySink(MarshalByRefObject serverObject); // 0x002FFC10
	internal static Context SwitchToContext(Context newContext); // 0x002FFFEC
	internal static Context CreateNewContext(IConstructionCallMessage msg); // 0x002FFFF4
	public void DoCallBack(CrossContextDelegate deleg); // 0x003009CC
	public static LocalDataStoreSlot AllocateDataSlot(); // 0x00300B1C
	public static LocalDataStoreSlot AllocateNamedDataSlot(string name); // 0x00300B8C
	public static void FreeNamedDataSlot(string name); // 0x00300D24
	public static object GetData(LocalDataStoreSlot slot); // 0x00300EA4
	public static LocalDataStoreSlot GetNamedDataSlot(string name); // 0x00301038
	public static void SetData(LocalDataStoreSlot slot, object data); // 0x00301228
}

// Namespace: System.Runtime.Remoting.Contexts
internal class DynamicPropertyCollection // TypeDefIndex: 965
{
	// Fields
	private ArrayList _properties; // 0x08

	// Properties
	public bool HasProperties { get; } // 0x002FD324 

	// Constructors
	public DynamicPropertyCollection(); // 0x002FDD44

	// Methods
	public bool RegisterDynamicProperty(IDynamicProperty prop); // 0x002FD6C8
	public bool UnregisterDynamicProperty(string name); // 0x002FDA94
	public void NotifyMessage(bool start, IMessage msg, bool client_site, bool async); // 0x002FDF50
	private int FindProperty(string name); // 0x00302C64
}

// Namespace: 
private class DynamicPropertyReg // TypeDefIndex: 966
{
	// Fields
	public IDynamicProperty Property; // 0x08
	public IDynamicMessageSink Sink; // 0x0C

	// Constructors
	public DynamicPropertyReg(); // 0x00302EB0

}

// Namespace: System.Runtime.Remoting.Contexts
internal class ContextCallbackObject : ContextBoundObject // TypeDefIndex: 967
{
	// Constructors
	public ContextCallbackObject(); // 0x00300B10

	// Methods
	public void DoCallBack(CrossContextDelegate deleg); // 0x00300B18
}

// Namespace: System.Runtime.Remoting.Contexts
[Serializable]
public class ContextAttribute : Attribute, IContextAttribute, IContextProperty // TypeDefIndex: 968
{
	// Fields
	protected string AttributeName; // 0x08

	// Properties
	public virtual string Name { get; } // 0x00301494 

	// Constructors
	public ContextAttribute(string name); // 0x00301474

	// Methods
	public override bool Equals(object o); // 0x0030149C
	public virtual void Freeze(Context newContext); // 0x0030157C
	public override int GetHashCode(); // 0x00301580
	public virtual void GetPropertiesForNewContext(IConstructionCallMessage ctorMsg); // 0x00301598
	public virtual bool IsContextOK(Context ctx, IConstructionCallMessage ctorMsg); // 0x00301750
	public virtual bool IsNewContextOK(Context newCtx); // 0x0030192C
}

// Namespace: System.Runtime.Remoting.Contexts
public class ContextProperty // TypeDefIndex: 969
{
	// Fields
	private string name; // 0x08
	private object prop; // 0x0C

	// Properties
	public virtual string Name { get; } // 0x0030195C 
	public virtual object Property { get; } // 0x00301964 

	// Constructors
	private ContextProperty(string name, object prop); // 0x00301934

}

// Namespace: System.Runtime.Remoting.Contexts
internal class CrossContextChannel : IMessageSink // TypeDefIndex: 970
{
	// Properties
	public IMessageSink NextSink { get; } // 0x00302614 

	// Constructors
	public CrossContextChannel(); // 0x0030196C

	// Methods
	public IMessage SyncProcessMessage(IMessage msg); // 0x00301974
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x00302018
}

// Namespace: 
private class ContextRestoreSink : IMessageSink // TypeDefIndex: 971
{
	// Fields
	private IMessageSink _next; // 0x08
	private Context _context; // 0x0C
	private IMessage _call; // 0x10

	// Properties
	public IMessageSink NextSink { get; } // 0x00302A1C 

	// Constructors
	public ContextRestoreSink(IMessageSink next, Context context, IMessage call); // 0x003025E4

	// Methods
	public IMessage SyncProcessMessage(IMessage msg); // 0x0030261C
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x00302994
}

// Namespace: System.Runtime.Remoting.Contexts
public interface IContextAttribute // TypeDefIndex: 972
{
	// Methods
	void GetPropertiesForNewContext(IConstructionCallMessage msg);
	bool IsContextOK(Context ctx, IConstructionCallMessage msg);
}

// Namespace: System.Runtime.Remoting.Contexts
public interface IContextProperty // TypeDefIndex: 973
{
	// Properties
	string Name { get; }

	// Methods
	void Freeze(Context newContext);
	bool IsNewContextOK(Context newCtx);
}

// Namespace: System.Runtime.Remoting.Contexts
public interface IContextPropertyActivator // TypeDefIndex: 974
{
	// Methods
	void CollectFromClientContext(IConstructionCallMessage msg);
	void CollectFromServerContext(IConstructionReturnMessage msg);
	bool DeliverClientContextToServerContext(IConstructionCallMessage msg);
	bool DeliverServerContextToClientContext(IConstructionReturnMessage msg);
	bool IsOKToActivate(IConstructionCallMessage msg);
}

// Namespace: System.Runtime.Remoting.Contexts
public interface IContributeClientContextSink // TypeDefIndex: 975
{
	// Methods
	IMessageSink GetClientContextSink(IMessageSink nextSink);
}

// Namespace: System.Runtime.Remoting.Contexts
public interface IContributeDynamicSink // TypeDefIndex: 976
{
	// Methods
	IDynamicMessageSink GetDynamicSink();
}

// Namespace: System.Runtime.Remoting.Contexts
public interface IContributeEnvoySink // TypeDefIndex: 977
{
	// Methods
	IMessageSink GetEnvoySink(MarshalByRefObject obj, IMessageSink nextSink);
}

// Namespace: System.Runtime.Remoting.Contexts
public interface IContributeObjectSink // TypeDefIndex: 978
{
	// Methods
	IMessageSink GetObjectSink(MarshalByRefObject obj, IMessageSink nextSink);
}

// Namespace: System.Runtime.Remoting.Contexts
public interface IContributeServerContextSink // TypeDefIndex: 979
{
	// Methods
	IMessageSink GetServerContextSink(IMessageSink nextSink);
}

// Namespace: System.Runtime.Remoting.Contexts
public interface IDynamicMessageSink // TypeDefIndex: 980
{
	// Methods
	void ProcessMessageFinish(IMessage replyMsg, bool bCliSide, bool bAsync);
	void ProcessMessageStart(IMessage reqMsg, bool bCliSide, bool bAsync);
}

// Namespace: System.Runtime.Remoting.Contexts
public interface IDynamicProperty // TypeDefIndex: 981
{
	// Properties
	string Name { get; }

}

// Namespace: System.Runtime.Remoting.Contexts
[Serializable]
public class SynchronizationAttribute : ContextAttribute, IContributeClientContextSink, IContributeServerContextSink // TypeDefIndex: 982
{
	// Fields
	public const int NOT_SUPPORTED = 1; // 0x00
	public const int SUPPORTED = 2; // 0x00
	public const int REQUIRED = 4; // 0x00
	public const int REQUIRES_NEW = 8; // 0x00
	private bool _bReEntrant; // 0x0C
	private int _flavor; // 0x10
	[NonSerialized]	private bool _locked; // 0x14
	[NonSerialized]	private int _lockCount; // 0x18
	[NonSerialized]	private Mutex _mutex; // 0x1C
	[NonSerialized]	private Thread _ownerThread; // 0x20

	// Properties
	public virtual bool IsReEntrant { get; } // 0x00302FE8 
	public virtual bool Locked { get; set; } // 0x00302FF0 0x00302FF8

	// Constructors
	public SynchronizationAttribute(); // 0x00302EB8
	public SynchronizationAttribute(bool reEntrant); // 0x00302FD4
	public SynchronizationAttribute(int flag); // 0x00302FE0
	public SynchronizationAttribute(int flag, bool reEntrant); // 0x00302EC4

	// Methods
	internal void AcquireLock(); // 0x003032F8
	internal void ReleaseLock(); // 0x003031CC
	public override void GetPropertiesForNewContext(IConstructionCallMessage ctorMsg); // 0x0030340C
	public virtual IMessageSink GetClientContextSink(IMessageSink nextSink); // 0x00303580
	public virtual IMessageSink GetServerContextSink(IMessageSink nextSink); // 0x00303624
	public override bool IsContextOK(Context ctx, IConstructionCallMessage msg); // 0x003036C8
	internal static void ExitContext(); // 0x003037DC
	internal static void EnterContext(); // 0x00303958
}

// Namespace: System.Runtime.Remoting.Contexts
internal class SynchronizedClientContextSink : IMessageSink // TypeDefIndex: 983
{
	// Fields
	private IMessageSink _next; // 0x08
	private SynchronizationAttribute _att; // 0x0C

	// Properties
	public IMessageSink NextSink { get; } // 0x00303AD4 

	// Constructors
	public SynchronizedClientContextSink(IMessageSink next, SynchronizationAttribute att); // 0x003035FC

	// Methods
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x00303ADC
	public IMessage SyncProcessMessage(IMessage msg); // 0x00303C7C
}

// Namespace: System.Runtime.Remoting.Contexts
internal class SynchronizedServerContextSink : IMessageSink // TypeDefIndex: 984
{
	// Fields
	private IMessageSink _next; // 0x08
	private SynchronizationAttribute _att; // 0x0C

	// Properties
	public IMessageSink NextSink { get; } // 0x003040CC 

	// Constructors
	public SynchronizedServerContextSink(IMessageSink next, SynchronizationAttribute att); // 0x003036A0

	// Methods
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x003040D4
	public IMessage SyncProcessMessage(IMessage msg); // 0x0030420C
}

// Namespace: System.Runtime.Remoting.Contexts
internal class SynchronizedContextReplySink : IMessageSink // TypeDefIndex: 985
{
	// Fields
	private IMessageSink _next; // 0x08
	private bool _newLock; // 0x0C
	private SynchronizationAttribute _att; // 0x10

	// Properties
	public IMessageSink NextSink { get; } // 0x00303E7C 

	// Constructors
	public SynchronizedContextReplySink(IMessageSink next, SynchronizationAttribute att, bool newLock); // 0x00303C4C

	// Methods
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x00303E84
	public IMessage SyncProcessMessage(IMessage msg); // 0x00303F0C
}

// Namespace: System.Runtime.Remoting.Lifetime
public class ClientSponsor : MarshalByRefObject, ISponsor // TypeDefIndex: 986
{
	// Fields
	private TimeSpan renewal_time; // 0x10
	private Hashtable registered_objects; // 0x18

	// Properties
	public TimeSpan RenewalTime { get; set; } // 0x0030526C 0x00305278

	// Constructors
	public ClientSponsor(); // 0x00305130
	public ClientSponsor(TimeSpan renewalTime); // 0x003051E4

	// Methods
	public void Close(); // 0x00305288
	protected override void Finalize(); // 0x003056FC
	public override object InitializeLifetimeService(); // 0x00305760
	public bool Register(MarshalByRefObject obj); // 0x00305768
	public TimeSpan Renewal(ILease lease); // 0x003058E4
	public void Unregister(MarshalByRefObject obj); // 0x003058F0
}

// Namespace: System.Runtime.Remoting.Lifetime
public interface ILease // TypeDefIndex: 987
{
	// Properties
	TimeSpan CurrentLeaseTime { get; }
	LeaseState CurrentState { get; }
	TimeSpan InitialLeaseTime { get; set; }
	TimeSpan RenewOnCallTime { get; set; }
	TimeSpan SponsorshipTimeout { get; set; }

	// Methods
	void Register(ISponsor obj);
	void Register(ISponsor obj, TimeSpan renewalTime);
	TimeSpan Renew(TimeSpan renewalTime);
	void Unregister(ISponsor obj);
}

// Namespace: System.Runtime.Remoting.Lifetime
public interface ISponsor // TypeDefIndex: 988
{
	// Methods
	TimeSpan Renewal(ILease lease);
}

// Namespace: System.Runtime.Remoting.Lifetime
internal class Lease : MarshalByRefObject, ILease // TypeDefIndex: 989
{
	// Fields
	private DateTime _leaseExpireTime; // 0x10
	private LeaseState _currentState; // 0x20
	private TimeSpan _initialLeaseTime; // 0x28
	private TimeSpan _renewOnCallTime; // 0x30
	private TimeSpan _sponsorshipTimeout; // 0x38
	private ArrayList _sponsors; // 0x40
	private Queue _renewingSponsors; // 0x44
	private RenewalDelegate _renewalDelegate; // 0x48

	// Properties
	public TimeSpan CurrentLeaseTime { get; } // 0x00305CF8 
	public LeaseState CurrentState { get; } // 0x00305DC0 
	public TimeSpan InitialLeaseTime { get; set; } // 0x00305DD4 0x00305DE0
	public TimeSpan RenewOnCallTime { get; set; } // 0x00305FEC 0x00305FF8
	public TimeSpan SponsorshipTimeout { get; set; } // 0x00306128 0x00306134

	// Constructors
	public Lease(); // 0x00305A60

	// Methods
	public void Activate(); // 0x00305DC8
	public void Register(ISponsor obj); // 0x00306264
	public void Register(ISponsor obj, TimeSpan renewalTime); // 0x0030630C
	public TimeSpan Renew(TimeSpan renewalTime); // 0x003064A4
	public void Unregister(ISponsor obj); // 0x003065C8
	internal void UpdateState(); // 0x003066E8
	private void CheckNextSponsor(); // 0x0030686C
	private void ProcessSponsorResponse(object state, bool timedOut); // 0x00306B7C
}

// Namespace: 
private delegate TimeSpan RenewalDelegate(ILease lease); // TypeDefIndex: 990; 0x00306E28

// Namespace: System.Runtime.Remoting.Lifetime
internal class LeaseManager // TypeDefIndex: 991
{
	// Fields
	private ArrayList _objects; // 0x08
	private Timer _timer; // 0x0C

	// Constructors
	public LeaseManager(); // 0x003071F0

	// Methods
	public void SetPollTime(TimeSpan timeSpan); // 0x0030726C
	public void TrackLifetime(ServerIdentity identity); // 0x00307340
	public void StopTrackingLifetime(ServerIdentity identity); // 0x00307658
	public void StartManager(); // 0x00307450
	public void StopManager(); // 0x0030771C
	public void ManageLeases(object state); // 0x00307750
}

// Namespace: System.Runtime.Remoting.Lifetime
internal class LeaseSink : IMessageSink // TypeDefIndex: 992
{
	// Fields
	private IMessageSink _nextSink; // 0x08

	// Properties
	public IMessageSink NextSink { get; } // 0x00307ED0 

	// Constructors
	public LeaseSink(IMessageSink nextSink); // 0x002FFBF0

	// Methods
	public IMessage SyncProcessMessage(IMessage msg); // 0x003079BC
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x00307DE0
	private void RenewLease(IMessage msg); // 0x00307AA4
}

// Namespace: System.Runtime.Remoting.Lifetime
[Serializable]
public enum LeaseState // TypeDefIndex: 993
{
	Null = 0,
	Initial = 1,
	Active = 2,
	Renewing = 3,
	Expired = 4
}

// Namespace: System.Runtime.Remoting.Lifetime
public sealed class LifetimeServices // TypeDefIndex: 994
{
	// Fields
	private static TimeSpan _leaseManagerPollTime; // 0x00
	private static TimeSpan _leaseTime; // 0x08
	private static TimeSpan _renewOnCallTime; // 0x10
	private static TimeSpan _sponsorshipTimeout; // 0x18
	private static LeaseManager _leaseManager; // 0x20

	// Properties
	public static TimeSpan LeaseManagerPollTime { get; set; } // 0x00308048 0x002FC95C
	public static TimeSpan LeaseTime { get; set; } // 0x003080DC 0x00308170
	public static TimeSpan RenewOnCallTime { get; set; } // 0x00308204 0x00308298
	public static TimeSpan SponsorshipTimeout { get; set; } // 0x0030832C 0x003083C0

	// Constructors
	public LifetimeServices(); // 0x00307ED8
	private static LifetimeServices(); // 0x00307EE0

	// Methods
	internal static void TrackLifetime(ServerIdentity identity); // 0x00308454
	internal static void StopTrackingLifetime(ServerIdentity identity); // 0x00308500
}

// Namespace: System.Runtime.Remoting.Messaging
internal enum ArgInfoType : byte // TypeDefIndex: 995
{
	In = 0,
	Out = 1
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ArgInfo // TypeDefIndex: 996
{
	// Fields
	private int[] _paramMap; // 0x08
	private int _inoutArgCount; // 0x0C
	private MethodBase _method; // 0x10

	// Constructors
	public ArgInfo(MethodBase method, ArgInfoType type); // 0x003085AC

	// Methods
	public int GetInOutArgIndex(int inoutArgNum); // 0x00308858
	public virtual string GetInOutArgName(int index); // 0x003088A0
	public int GetInOutArgCount(); // 0x00308970
	public object[] GetInOutArgs(object[] args); // 0x00308978
}

// Namespace: System.Runtime.Remoting.Messaging
public class AsyncResult : IAsyncResult, IMessageSink // TypeDefIndex: 997
{
	// Fields
	private object async_state; // 0x08
	private WaitHandle handle; // 0x0C
	private object async_delegate; // 0x10
	private IntPtr data; // 0x14
	private object object_data; // 0x18
	private bool sync_completed; // 0x1C
	private bool completed; // 0x1D
	private bool endinvoke_called; // 0x1E
	private object async_callback; // 0x20
	private ExecutionContext current; // 0x24
	private ExecutionContext original; // 0x28
	private int gchandle; // 0x2C
	private MonoMethodMessage call_message; // 0x30
	private IMessageCtrl message_ctrl; // 0x34
	private IMessage reply_message; // 0x38

	// Properties
	public virtual object AsyncState { get; } // 0x00308AE4 
	public virtual WaitHandle AsyncWaitHandle { get; } // 0x00308AEC 
	public virtual bool CompletedSynchronously { get; } // 0x00308BE8 
	public virtual bool IsCompleted { get; } // 0x00308BF0 
	public bool EndInvokeCalled { get; set; } // 0x00308BF8 0x00308C00
	public virtual object AsyncDelegate { get; } // 0x00308C08 
	public IMessageSink NextSink { get; } // 0x00308C10 
	internal MonoMethodMessage CallMessage { get; set; } // 0x00308EEC 0x00308EF4

	// Constructors
	internal AsyncResult(); // 0x00308ADC

	// Methods
	public virtual IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x00308C18
	public virtual IMessage GetReplyMessage(); // 0x00308CA0
	public virtual void SetMessageCtrl(IMessageCtrl mc); // 0x00308CA8
	internal void SetCompletedSynchronously(bool completed); // 0x00308CB0
	internal IMessage EndInvoke(); // 0x00308CB8
	public virtual IMessage SyncProcessMessage(IMessage msg); // 0x00308D40
}

// Namespace: System.Runtime.Remoting.Messaging
internal class CADArgHolder // TypeDefIndex: 998
{
	// Fields
	public int index; // 0x08

	// Constructors
	public CADArgHolder(int i); // 0x00308EFC

}

// Namespace: System.Runtime.Remoting.Messaging
internal class CADObjRef // TypeDefIndex: 999
{
	// Fields
	private ObjRef objref; // 0x08
	public int SourceDomain; // 0x0C

	// Properties
	public string TypeName { get; } // 0x0030A968 
	public string URI { get; } // 0x0030AA68 

	// Constructors
	public CADObjRef(ObjRef o, int sourceDomain); // 0x00309FA4

}

// Namespace: System.Runtime.Remoting.Messaging
internal class CADMessageBase // TypeDefIndex: 1000
{
	// Fields
	protected object[] _args; // 0x08
	protected byte[] _serializedArgs; // 0x0C
	protected int _propertyCount; // 0x10
	protected CADArgHolder _callContext; // 0x14

	// Constructors
	public CADMessageBase(); // 0x00308F1C

	// Methods
	internal static int MarshalProperties(IDictionary dict, ArrayList args); // 0x00308F24
	internal static void UnmarshalProperties(IDictionary dict, int count, ArrayList args); // 0x00309948
	private static bool IsPossibleToIgnoreMarshal(object obj); // 0x00309AE8
	protected object MarshalArgument(object arg, ArrayList args); // 0x00309D68
	protected object UnmarshalArgument(object arg, ArrayList args); // 0x00309FCC
	internal object[] MarshalArguments(object[] arguments, ArrayList args); // 0x0030AA9C
	internal object[] UnmarshalArguments(object[] arguments, ArrayList args); // 0x0030ABE8
	protected void SaveLogicalCallContext(IMethodMessage msg, ArrayList serializeList); // 0x0030AD34
	internal LogicalCallContext GetLogicalCallContext(ArrayList args); // 0x0030B054
}

// Namespace: System.Runtime.Remoting.Messaging
internal class CADMethodCallMessage : CADMessageBase // TypeDefIndex: 1001
{
	// Fields
	private string _uri; // 0x18
	internal RuntimeMethodHandle MethodHandle; // 0x1C
	internal string FullTypeName; // 0x20

	// Properties
	internal string Uri { get; } // 0x0030B53C 
	internal int PropertiesCount { get; } // 0x0030B6F4 

	// Constructors
	internal CADMethodCallMessage(IMethodCallMessage callMsg); // 0x0030B11C

	// Methods
	internal static CADMethodCallMessage Create(IMessage callMsg); // 0x0030B544
	internal ArrayList GetArguments(); // 0x0030B5E0
	internal object[] GetArgs(ArrayList args); // 0x0030B6E8
	private static Type[] GetSignature(MethodBase methodBase, bool load); // 0x0030B6FC
	internal MethodBase GetMethod(); // 0x0030B920
}

// Namespace: System.Runtime.Remoting.Messaging
internal class CADMethodReturnMessage : CADMessageBase // TypeDefIndex: 1002
{
	// Fields
	private object _returnValue; // 0x18
	private CADArgHolder _exception; // 0x1C

	// Properties
	internal int PropertiesCount { get; } // 0x0030C768 

	// Constructors
	internal CADMethodReturnMessage(IMethodReturnMessage retMsg); // 0x0030C070

	// Methods
	internal static CADMethodReturnMessage Create(IMessage callMsg); // 0x0030C4C8
	internal ArrayList GetArguments(); // 0x0030C564
	internal object[] GetArgs(ArrayList args); // 0x0030C66C
	internal object GetReturnValue(ArrayList args); // 0x0030C678
	internal Exception GetException(ArrayList args); // 0x0030C684
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
public sealed class CallContext // TypeDefIndex: 1003
{
	// Fields
	private static Header[] Headers; // 0x80000000
	private static Hashtable datastore; // 0x80000004

	// Properties
	public static object HostContext { get; set; } // 0x0030C778 0x0030C800
	private static Hashtable Datastore { get; } // 0x0030C8C8 

	// Constructors
	private CallContext(); // 0x0030C770

	// Methods
	public static void FreeNamedDataSlot(string name); // 0x0030C888
	public static object GetData(string name); // 0x0030C96C
	public static void SetData(string name, object data); // 0x0030C9AC
	public static object LogicalGetData(string name); // 0x0030C9F4
	public static void LogicalSetData(string name, object data); // 0x0030CA7C
	public static Header[] GetHeaders(); // 0x0030CB04
	public static void SetHeaders(Header[] headers); // 0x0030CB64
	internal static LogicalCallContext CreateLogicalCallContext(bool createEmpty); // 0x0030CBC8
	internal static object SetCurrentCallContext(LogicalCallContext ctx); // 0x0030D174
	internal static void UpdateCurrentCallContext(LogicalCallContext ctx); // 0x0030D2C0
	internal static void RestoreCallContext(object oldContext); // 0x0030D60C
}

// Namespace: System.Runtime.Remoting.Messaging
public interface ILogicalThreadAffinative // TypeDefIndex: 1004
{
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ClientContextTerminatorSink : IMessageSink // TypeDefIndex: 1005
{
	// Fields
	private Context _context; // 0x08

	// Properties
	public IMessageSink NextSink { get; } // 0x0030DF28 

	// Constructors
	public ClientContextTerminatorSink(Context ctx); // 0x002FF9A4

	// Methods
	public IMessage SyncProcessMessage(IMessage msg); // 0x0030D978
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x0030DC00
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ClientContextReplySink : IMessageSink // TypeDefIndex: 1006
{
	// Fields
	private IMessageSink _replySink; // 0x08
	private Context _context; // 0x0C

	// Properties
	public IMessageSink NextSink { get; } // 0x0030D970 

	// Constructors
	public ClientContextReplySink(Context ctx, IMessageSink replySink); // 0x0030D768

	// Methods
	public IMessage SyncProcessMessage(IMessage msg); // 0x0030D790
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x0030D8E8
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
public class ConstructionCall : MethodCall, IConstructionCallMessage, IMessage, IMethodCallMessage, IMethodMessage // TypeDefIndex: 1007
{
	// Fields
	private IActivator _activator; // 0x38
	private object[] _activationAttributes; // 0x3C
	private IList _contextProperties; // 0x40
	private Type _activationType; // 0x44
	private string _activationTypeName; // 0x48
	private bool _isContextOk; // 0x4C
	[NonSerialized]	private RemotingProxy _sourceProxy; // 0x50
	private static Dictionary`2<string, int> <>f__switch$map20; // 0x00

	// Properties
	internal bool IsContextOk { get; set; } // 0x0030E82C 0x0030E834
	public Type ActivationType { get; } // 0x0030E83C 
	public string ActivationTypeName { get; } // 0x0030E8F0 
	public IActivator Activator { get; set; } // 0x0030E8F8 0x0030E900
	public object[] CallSiteActivationAttributes { get; } // 0x0030E908 
	public IList ContextProperties { get; } // 0x0030E918 
	public override IDictionary Properties { get; } // 0x0030FB34 
	internal RemotingProxy SourceProxy { get; set; } // 0x0030FB9C 0x0030FBA4

	// Constructors
	public ConstructionCall(IMessage m); // 0x0030DF30
	internal ConstructionCall(Type type); // 0x0030E49C
	public ConstructionCall(Header[] headers); // 0x0030E4F4
	internal ConstructionCall(SerializationInfo info, StreamingContext context); // 0x0030E5D0

	// Methods
	internal override void InitDictionary(); // 0x0030E6A8
	internal void SetActivationAttributes(object[] attributes); // 0x0030E910
	internal override void InitMethodProperty(string key, object value); // 0x0030E998
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0030F3DC
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ConstructionCallDictionary : MethodDictionary // TypeDefIndex: 1008
{
	// Fields
	public static string[] InternalKeys; // 0x00
	private static Dictionary`2<string, int> <>f__switch$map23; // 0x04
	private static Dictionary`2<string, int> <>f__switch$map24; // 0x08

	// Constructors
	public ConstructionCallDictionary(IConstructionCallMessage message); // 0x0030E750
	private static ConstructionCallDictionary(); // 0x0030FBCC

	// Methods
	protected override object GetMethodProperty(string key); // 0x003100FC
	protected override void SetMethodProperty(string key, object value); // 0x003111C0
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
public class ConstructionResponse : MethodResponse, IConstructionReturnMessage, IMessage, IMethodMessage, IMethodReturnMessage // TypeDefIndex: 1009
{
	// Properties
	public override IDictionary Properties { get; } // 0x00312354 

	// Constructors
	public ConstructionResponse(Header[] h, IMethodCallMessage mcm); // 0x00311BF4
	internal ConstructionResponse(object resultObject, LogicalCallContext callCtx, IMethodCallMessage msg); // 0x00312014
	internal ConstructionResponse(Exception e, IMethodCallMessage msg); // 0x00312140
	internal ConstructionResponse(SerializationInfo info, StreamingContext context); // 0x0031229C

}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
internal class EnvoyTerminatorSink : IMessageSink // TypeDefIndex: 1010
{
	// Fields
	public static EnvoyTerminatorSink Instance; // 0x00

	// Properties
	public IMessageSink NextSink { get; } // 0x003126F0 

	// Constructors
	public EnvoyTerminatorSink(); // 0x00312414
	private static EnvoyTerminatorSink(); // 0x0031241C

	// Methods
	public IMessage SyncProcessMessage(IMessage msg); // 0x00312490
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x003125BC
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
internal class ErrorMessage : IMessage, IMethodCallMessage, IMethodMessage // TypeDefIndex: 1011
{
	// Fields
	private string _uri; // 0x08

	// Properties
	public int ArgCount { get; } // 0x00312764 
	public object[] Args { get; } // 0x0031276C 
	public bool HasVarArgs { get; } // 0x00312774 
	public MethodBase MethodBase { get; } // 0x0031277C 
	public string MethodName { get; } // 0x00312784 
	public object MethodSignature { get; } // 0x003127E0 
	public virtual IDictionary Properties { get; } // 0x003127E8 
	public string TypeName { get; } // 0x003127F0 
	public string Uri { get; set; } // 0x0031284C 0x00312854
	public int InArgCount { get; } // 0x003128C0 
	public object[] InArgs { get; } // 0x003128D8 
	public LogicalCallContext LogicalCallContext { get; } // 0x003128E0 

	// Constructors
	public ErrorMessage(); // 0x003126F8

	// Methods
	public object GetArg(int arg_num); // 0x0031285C
	public string GetArgName(int arg_num); // 0x00312864
	public string GetInArgName(int index); // 0x003128C8
	public object GetInArg(int argNum); // 0x003128D0
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
public class Header // TypeDefIndex: 1012
{
	// Fields
	public string HeaderNamespace; // 0x08
	public bool MustUnderstand; // 0x0C
	public string Name; // 0x10
	public object Value; // 0x14

	// Constructors
	public Header(string _Name, object _Value); // 0x003128E8
	public Header(string _Name, object _Value, bool _MustUnderstand); // 0x00312920
	public Header(string _Name, object _Value, bool _MustUnderstand, string _HeaderNamespace); // 0x00312958

}

// Namespace: System.Runtime.Remoting.Messaging
internal interface IInternalMessage // TypeDefIndex: 1013
{
	// Properties
	Identity TargetIdentity { get; set; }
	string Uri { get; set; }

}

// Namespace: System.Runtime.Remoting.Messaging
public interface IMessage // TypeDefIndex: 1014
{
	// Properties
	IDictionary Properties { get; }

}

// Namespace: System.Runtime.Remoting.Messaging
public interface IMessageCtrl // TypeDefIndex: 1015
{
	// Methods
	void Cancel(int msToCancel);
}

// Namespace: System.Runtime.Remoting.Messaging
public interface IMessageSink // TypeDefIndex: 1016
{
	// Properties
	IMessageSink NextSink { get; }

	// Methods
	IMessage SyncProcessMessage(IMessage msg);
	IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink);
}

// Namespace: System.Runtime.Remoting.Messaging
public interface IMethodCallMessage : IMessage, IMethodMessage // TypeDefIndex: 1017
{
	// Properties
	int InArgCount { get; }
	object[] InArgs { get; }

	// Methods
	object GetInArg(int argNum);
	string GetInArgName(int index);
}

// Namespace: System.Runtime.Remoting.Messaging
public interface IMethodMessage : IMessage // TypeDefIndex: 1018
{
	// Properties
	int ArgCount { get; }
	object[] Args { get; }
	bool HasVarArgs { get; }
	LogicalCallContext LogicalCallContext { get; }
	MethodBase MethodBase { get; }
	string MethodName { get; }
	object MethodSignature { get; }
	string TypeName { get; }
	string Uri { get; }

	// Methods
	object GetArg(int argNum);
	string GetArgName(int index);
}

// Namespace: System.Runtime.Remoting.Messaging
public interface IMethodReturnMessage : IMessage, IMethodMessage // TypeDefIndex: 1019
{
	// Properties
	Exception Exception { get; }
	int OutArgCount { get; }
	object[] OutArgs { get; }
	object ReturnValue { get; }

	// Methods
	object GetOutArg(int argNum);
	string GetOutArgName(int index);
}

// Namespace: System.Runtime.Remoting.Messaging
public interface IRemotingFormatter : IFormatter // TypeDefIndex: 1020
{
	// Methods
	object Deserialize(Stream serializationStream, HeaderHandler handler);
	void Serialize(Stream serializationStream, object graph, Header[] headers);
}

// Namespace: System.Runtime.Remoting.Messaging
internal interface ISerializationRootObject // TypeDefIndex: 1021
{
	// Methods
	void RootSetObjectData(SerializationInfo info, StreamingContext context);
}

// Namespace: System.Runtime.Remoting.Messaging
public class InternalMessageWrapper // TypeDefIndex: 1022
{
	// Fields
	protected IMessage WrappedMessage; // 0x08

	// Constructors
	public InternalMessageWrapper(IMessage msg); // 0x00312D6C

}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
public sealed class LogicalCallContext : ICloneable, ISerializable // TypeDefIndex: 1023
{
	// Fields
	private Hashtable _data; // 0x08
	private CallContextRemotingData _remotingData; // 0x0C

	// Properties
	public bool HasInfo { get; } // 0x0030B018 
	internal Hashtable Datastore { get; } // 0x00313738 

	// Constructors
	internal LogicalCallContext(); // 0x0030D044
	internal LogicalCallContext(SerializationInfo info, StreamingContext context); // 0x00312D8C

	// Methods
	public void FreeNamedDataSlot(string name); // 0x00312F50
	public object GetData(string name); // 0x00312F6C
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00312F8C
	public void SetData(string name, object data); // 0x0030D0C0
	public object Clone(); // 0x00313318
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
internal class CallContextRemotingData : ICloneable // TypeDefIndex: 1024
{
	// Fields
	private string _logicalCallID; // 0x08

	// Properties
	public string LogicalCallID { get; set; } // 0x0030D6D0 0x0030D6D8

	// Constructors
	public CallContextRemotingData(); // 0x0030D6C8

	// Methods
	public object Clone(); // 0x0030D6E0
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
public class MethodCall : ISerializable, IInternalMessage, IMessage, IMethodCallMessage, IMethodMessage, ISerializationRootObject // TypeDefIndex: 1025
{
	// Fields
	private string _uri; // 0x08
	private string _typeName; // 0x0C
	private string _methodName; // 0x10
	private object[] _args; // 0x14
	private Type[] _methodSignature; // 0x18
	private MethodBase _methodBase; // 0x1C
	private LogicalCallContext _callContext; // 0x20
	private ArgInfo _inArgInfo; // 0x24
	private Identity _targetIdentity; // 0x28
	private Type[] _genericArguments; // 0x2C
	protected IDictionary ExternalProperties; // 0x30
	protected IDictionary InternalProperties; // 0x34
	private static Dictionary`2<string, int> <>f__switch$map1F; // 0x00

	// Properties
	private string System.Runtime.Remoting.Messaging.IInternalMessage.Uri { get; set; } // 0x00314D84 0x00314D8C
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.TargetIdentity { get; set; } // 0x00314D94 0x00314D9C
	public int ArgCount { get; } // 0x00314DA4 
	public object[] Args { get; } // 0x00314DC8 
	public bool HasVarArgs { get; } // 0x00314DD0 
	public int InArgCount { get; } // 0x00314E4C 
	public object[] InArgs { get; } // 0x00314EE8 
	public LogicalCallContext LogicalCallContext { get; } // 0x00314FA0 
	public MethodBase MethodBase { get; } // 0x00314E24 
	public string MethodName { get; } // 0x0031501C 
	public object MethodSignature { get; } // 0x00315064 
	public virtual IDictionary Properties { get; } // 0x0030FB68 
	public string TypeName { get; } // 0x0030E42C 
	public string Uri { get; set; } // 0x00315340 0x00315348
	private Type[] GenericArguments { get; } // 0x003158A0 

	// Constructors
	public MethodCall(Header[] h1); // 0x0030E4F8
	internal MethodCall(SerializationInfo info, StreamingContext context); // 0x0030E5E8
	internal MethodCall(CADMethodCallMessage msg); // 0x00314768
	public MethodCall(IMessage msg); // 0x0030DF58
	internal MethodCall(string uri, string typeName, string methodName, object[] args); // 0x00314D30
	internal MethodCall(); // 0x0030E4EC

	// Methods
	internal void CopyFrom(IMethodMessage call); // 0x003148B4
	internal virtual void InitMethodProperty(string key, object value); // 0x0030EDE8
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0030F608
	internal virtual void InitDictionary(); // 0x003151F0
	public object GetArg(int argNum); // 0x00315350
	public string GetArgName(int index); // 0x00315398
	public object GetInArg(int argNum); // 0x0031542C
	public string GetInArgName(int index); // 0x00315520
	public virtual object HeaderHandler(Header[] h); // 0x003155D4
	public virtual void Init(); // 0x0031565C
	public void ResolveMethod(); // 0x00313B70
	private Type CastTo(string clientType, Type serverType); // 0x00315660
	private static string GetTypeNameFromAssemblyQualifiedName(string aqname); // 0x003158FC
	public void RootSetObjectData(SerializationInfo info, StreamingContext ctx); // 0x003159FC
}

// Namespace: System.Runtime.Remoting.Messaging
internal class MethodCallDictionary : MethodDictionary // TypeDefIndex: 1026
{
	// Fields
	public static string[] InternalKeys; // 0x00

	// Constructors
	public MethodCallDictionary(IMethodMessage message); // 0x00315298
	private static MethodCallDictionary(); // 0x00315A84

}

// Namespace: System.Runtime.Remoting.Messaging
public class MethodCallMessageWrapper : InternalMessageWrapper, IMessage, IMethodCallMessage, IMethodMessage // TypeDefIndex: 1027
{
	// Fields
	private object[] _args; // 0x0C
	private ArgInfo _inArgInfo; // 0x10
	private DictionaryWrapper _properties; // 0x14

	// Properties
	public virtual int ArgCount { get; } // 0x00315FC4 
	public virtual object[] Args { get; set; } // 0x00316108 0x00316110
	public virtual bool HasVarArgs { get; } // 0x00316118 
	public virtual int InArgCount { get; } // 0x0031625C 
	public virtual object[] InArgs { get; } // 0x00316280 
	public virtual LogicalCallContext LogicalCallContext { get; } // 0x003162B0 
	public virtual MethodBase MethodBase { get; } // 0x003163F4 
	public virtual string MethodName { get; } // 0x00316538 
	public virtual object MethodSignature { get; } // 0x0031667C 
	public virtual IDictionary Properties { get; } // 0x003167C0 
	public virtual string TypeName { get; } // 0x003169AC 
	public virtual string Uri { get; set; } // 0x00316AF0 0x00316C34

	// Constructors
	public MethodCallMessageWrapper(IMethodCallMessage msg); // 0x00315D98

	// Methods
	public virtual object GetArg(int argNum); // 0x00316DE0
	public virtual string GetArgName(int index); // 0x00316E28
	public virtual object GetInArg(int argNum); // 0x00316F74
	public virtual string GetInArgName(int index); // 0x00316FE0
}

// Namespace: 
private class DictionaryWrapper : MethodCallDictionary // TypeDefIndex: 1028
{
	// Fields
	private IDictionary _wrappedDictionary; // 0x18
	private static string[] _keys; // 0x00

	// Constructors
	public DictionaryWrapper(IMethodMessage message, IDictionary wrappedDictionary); // 0x003168D4
	private static DictionaryWrapper(); // 0x0031701C

	// Methods
	protected override IDictionary AllocInternalProperties(); // 0x00317114
	protected override void SetMethodProperty(string key, object value); // 0x0031711C
	protected override object GetMethodProperty(string key); // 0x003172C0
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
internal class MethodDictionary : IEnumerable, ICollection, IDictionary // TypeDefIndex: 1029
{
	// Fields
	private IDictionary _internalProperties; // 0x08
	protected IMethodMessage _message; // 0x0C
	private string[] _methodKeys; // 0x10
	private bool _ownProperties; // 0x14
	private static Dictionary`2<string, int> <>f__switch$map21; // 0x00
	private static Dictionary`2<string, int> <>f__switch$map22; // 0x04

	// Properties
	internal bool HasInternalProperties { get; } // 0x00309780 
	internal IDictionary InternalProperties { get; } // 0x003098A8 
	public string[] MethodKeys { get; set; } // 0x003175D8 0x003175E0
	public bool IsFixedSize { get; } // 0x00317758 
	public bool IsReadOnly { get; } // 0x00317760 
	public object Item { get; set; } // 0x00317768 0x00317940
	public ICollection Keys { get; } // 0x00317B58 
	public ICollection Values { get; } // 0x00318004 
	public int Count { get; } // 0x00318944 
	public bool IsSynchronized { get; } // 0x00318A50 
	public object SyncRoot { get; } // 0x00318A58 

	// Constructors
	public MethodDictionary(IMethodMessage message); // 0x0030FBAC
	public MethodDictionary(string[] keys); // 0x00317408

	// Methods
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x00317428
	protected virtual IDictionary AllocInternalProperties(); // 0x003175E8
	public IDictionary GetInternalProperties(); // 0x0030E7F8
	private bool IsOverridenKey(string key); // 0x00317660
	protected virtual object GetMethodProperty(string key); // 0x00310928
	protected virtual void SetMethodProperty(string key, object value); // 0x003116A8
	public void Add(object key, object value); // 0x00317944
	public void Clear(); // 0x003184A0
	public bool Contains(object key); // 0x00318570
	public void Remove(object key); // 0x00318734
	public void CopyTo(Array array, int index); // 0x00318A5C
	public IDictionaryEnumerator GetEnumerator(); // 0x00318B4C
}

// Namespace: 
private class DictionaryEnumerator : IEnumerator, IDictionaryEnumerator // TypeDefIndex: 1030
{
	// Fields
	private MethodDictionary _methodDictionary; // 0x08
	private IDictionaryEnumerator _hashtableEnum; // 0x0C
	private int _posMethod; // 0x10

	// Properties
	public object Current { get; } // 0x00318BBC 
	public DictionaryEntry Entry { get; } // 0x00318BE0 
	public object Key { get; } // 0x00319130 
	public object Value { get; } // 0x00319154 

	// Constructors
	public DictionaryEnumerator(MethodDictionary methodDictionary); // 0x00317498

	// Methods
	public bool MoveNext(); // 0x00318DF8
	public void Reset(); // 0x00319050
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
public class MethodResponse : ISerializable, IInternalMessage, IMessage, IMethodMessage, IMethodReturnMessage, ISerializationRootObject // TypeDefIndex: 1031
{
	// Fields
	private string _methodName; // 0x08
	private string _uri; // 0x0C
	private string _typeName; // 0x10
	private MethodBase _methodBase; // 0x14
	private object _returnValue; // 0x18
	private Exception _exception; // 0x1C
	private Type[] _methodSignature; // 0x20
	private ArgInfo _inArgInfo; // 0x24
	private object[] _args; // 0x28
	private object[] _outArgs; // 0x2C
	private IMethodCallMessage _callMsg; // 0x30
	private LogicalCallContext _callContext; // 0x34
	private Identity _targetIdentity; // 0x38
	protected IDictionary ExternalProperties; // 0x3C
	protected IDictionary InternalProperties; // 0x40
	private static Dictionary`2<string, int> <>f__switch$map25; // 0x00

	// Properties
	private string System.Runtime.Remoting.Messaging.IInternalMessage.Uri { get; set; } // 0x00319B1C 0x00319C08
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.TargetIdentity { get; set; } // 0x00319C10 0x00319C18
	public int ArgCount { get; } // 0x00319C20 
	public object[] Args { get; } // 0x00319C34 
	public Exception Exception { get; } // 0x00319C3C 
	public bool HasVarArgs { get; } // 0x00319C44 
	public LogicalCallContext LogicalCallContext { get; } // 0x00319DC0 
	public MethodBase MethodBase { get; } // 0x00319C80 
	public string MethodName { get; } // 0x00319E3C 
	public object MethodSignature { get; } // 0x0031A00C 
	public int OutArgCount { get; } // 0x0031A138 
	public object[] OutArgs { get; } // 0x0031A1F4 
	public virtual IDictionary Properties { get; } // 0x00312358 
	public object ReturnValue { get; } // 0x0031A43C 
	public string TypeName { get; } // 0x00319F24 
	public string Uri { get; set; } // 0x00319B20 0x0031A444

	// Constructors
	public MethodResponse(Header[] h1, IMethodCallMessage mcm); // 0x00311BF8
	internal MethodResponse(Exception e, IMethodCallMessage msg); // 0x00312144
	internal MethodResponse(object returnValue, object[] outArgs, LogicalCallContext callCtx, IMethodCallMessage msg); // 0x00312034
	internal MethodResponse(IMethodCallMessage msg, CADMethodReturnMessage retmsg); // 0x003197F0
	internal MethodResponse(SerializationInfo info, StreamingContext context); // 0x003122B4

	// Methods
	internal void InitMethodProperty(string key, object value); // 0x00319178
	public object GetArg(int argNum); // 0x0031A44C
	public string GetArgName(int index); // 0x0031A494
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0031A52C
	public object GetOutArg(int argNum); // 0x0031AA84
	public string GetOutArgName(int index); // 0x0031AB98
	public virtual object HeaderHandler(Header[] h); // 0x0031ACD8
	public void RootSetObjectData(SerializationInfo info, StreamingContext ctx); // 0x0031AD60
}

// Namespace: System.Runtime.Remoting.Messaging
internal class MethodReturnDictionary : MethodDictionary // TypeDefIndex: 1032
{
	// Fields
	public static string[] InternalReturnKeys; // 0x00
	public static string[] InternalExceptionKeys; // 0x04

	// Constructors
	public MethodReturnDictionary(IMethodReturnMessage message); // 0x0031A2C8
	private static MethodReturnDictionary(); // 0x0031ADE8

}

// Namespace: System.Runtime.Remoting.Messaging
public class MethodReturnMessageWrapper : InternalMessageWrapper, IMessage, IMethodMessage, IMethodReturnMessage // TypeDefIndex: 1033
{
	// Fields
	private object[] _args; // 0x0C
	private ArgInfo _outArgInfo; // 0x10
	private DictionaryWrapper _properties; // 0x14
	private Exception _exception; // 0x18
	private object _return; // 0x1C

	// Properties
	public virtual int ArgCount { get; } // 0x0031B604 
	public virtual object[] Args { get; set; } // 0x0031B628 0x0031B630
	public virtual Exception Exception { get; set; } // 0x0031B638 0x0031B640
	public virtual bool HasVarArgs { get; } // 0x0031B648 
	public virtual LogicalCallContext LogicalCallContext { get; } // 0x0031B78C 
	public virtual MethodBase MethodBase { get; } // 0x0031B8D0 
	public virtual string MethodName { get; } // 0x0031BA14 
	public virtual object MethodSignature { get; } // 0x0031BB58 
	public virtual int OutArgCount { get; } // 0x0031BC9C 
	public virtual object[] OutArgs { get; } // 0x0031BCB0 
	public virtual IDictionary Properties { get; } // 0x0031BCC8 
	public virtual object ReturnValue { get; set; } // 0x0031BEB4 0x0031BEBC
	public virtual string TypeName { get; } // 0x0031BEC4 
	public string Uri { get; set; } // 0x0031C008 0x0031C14C

	// Constructors
	public MethodReturnMessageWrapper(IMethodReturnMessage msg); // 0x0031B218

	// Methods
	public virtual object GetArg(int argNum); // 0x0031C254
	public virtual string GetArgName(int index); // 0x0031C29C
	public virtual object GetOutArg(int argNum); // 0x0031C3E8
	public virtual string GetOutArgName(int index); // 0x0031C454
}

// Namespace: 
private class DictionaryWrapper : MethodReturnDictionary // TypeDefIndex: 1034
{
	// Fields
	private IDictionary _wrappedDictionary; // 0x18
	private static string[] _keys; // 0x00

	// Constructors
	public DictionaryWrapper(IMethodReturnMessage message, IDictionary wrappedDictionary); // 0x0031BDDC
	private static DictionaryWrapper(); // 0x0031C490

	// Methods
	protected override IDictionary AllocInternalProperties(); // 0x0031C5F4
	protected override void SetMethodProperty(string key, object value); // 0x0031C5FC
	protected override object GetMethodProperty(string key); // 0x0031C88C
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
internal class MonoMethodMessage : IInternalMessage, IMessage, IMethodCallMessage, IMethodMessage, IMethodReturnMessage // TypeDefIndex: 1035
{
	// Fields
	private MonoMethod method; // 0x08
	private object[] args; // 0x0C
	private string[] names; // 0x10
	private byte[] arg_types; // 0x14
	public LogicalCallContext ctx; // 0x18
	public object rval; // 0x1C
	public Exception exc; // 0x20
	private AsyncResult asyncResult; // 0x24
	private CallType call_type; // 0x28
	private string uri; // 0x2C
	private MethodCallDictionary properties; // 0x30
	private Type[] methodSignature; // 0x34
	private Identity identity; // 0x38

	// Properties
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.TargetIdentity { get; set; } // 0x0031CD30 0x0031CD38
	public IDictionary Properties { get; } // 0x0031CD40 
	public int ArgCount { get; } // 0x0031CDC0 
	public object[] Args { get; } // 0x0031CEA4 
	public bool HasVarArgs { get; } // 0x0031CEAC 
	public LogicalCallContext LogicalCallContext { get; set; } // 0x0031CEB4 0x0031CEBC
	public MethodBase MethodBase { get; } // 0x0031CEC4 
	public string MethodName { get; } // 0x0031CECC 
	public object MethodSignature { get; } // 0x0031CF7C 
	public string TypeName { get; } // 0x0031D108 
	public string Uri { get; set; } // 0x0031D1E0 0x0031D1E8
	public int InArgCount { get; } // 0x0031D314 
	public object[] InArgs { get; } // 0x0031D3A4 
	public Exception Exception { get; } // 0x0031D68C 
	public int OutArgCount { get; } // 0x0031D694 
	public object[] OutArgs { get; } // 0x0031D710 
	public object ReturnValue { get; } // 0x0031D89C 
	public bool IsAsync { get; } // 0x0031DA14 
	public AsyncResult AsyncResult { get; } // 0x0031DA24 
	internal CallType CallType { get; } // 0x0031CDFC 

	// Constructors
	public MonoMethodMessage(MethodBase method, object[] out_args); // 0x0031CAB8
	public MonoMethodMessage(Type type, string method_name, object[] in_args); // 0x0031CB84

	// Methods
	internal void InitMessage(MonoMethod method, object[] out_args); // 0x0031CB80
	public object GetArg(int arg_num); // 0x0031D1F0
	public string GetArgName(int arg_num); // 0x0031D238
	public object GetInArg(int arg_num); // 0x0031D51C
	public string GetInArgName(int arg_num); // 0x0031D5D4
	public object GetOutArg(int arg_num); // 0x0031D8A4
	public string GetOutArgName(int arg_num); // 0x0031D95C
	public bool NeedsOutProcessing(out int outCount); // 0x0031DA2C
}

// Namespace: System.Runtime.Remoting.Messaging
internal enum CallType // TypeDefIndex: 1036
{
	Sync = 0,
	BeginInvoke = 1,
	EndInvoke = 2,
	OneWay = 3
}

// Namespace: System.Runtime.Remoting.Messaging
public class OneWayAttribute : Attribute // TypeDefIndex: 1037
{
	// Constructors
	public OneWayAttribute(); // 0x0031DCEC

}

// Namespace: System.Runtime.Remoting.Messaging
internal class RemotingSurrogate : ISerializationSurrogate // TypeDefIndex: 1038
{
	// Constructors
	public RemotingSurrogate(); // 0x0031DCF4

	// Methods
	public virtual void GetObjectData(object obj, SerializationInfo si, StreamingContext sc); // 0x0031DCFC
	public virtual object SetObjectData(object obj, SerializationInfo si, StreamingContext sc, ISurrogateSelector selector); // 0x0031DEA0
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ObjRefSurrogate : ISerializationSurrogate // TypeDefIndex: 1039
{
	// Constructors
	public ObjRefSurrogate(); // 0x0031DAC8

	// Methods
	public virtual void GetObjectData(object obj, SerializationInfo si, StreamingContext sc); // 0x0031DAD0
	public virtual object SetObjectData(object obj, SerializationInfo si, StreamingContext sc, ISurrogateSelector selector); // 0x0031DC50
}

// Namespace: System.Runtime.Remoting.Messaging
public class RemotingSurrogateSelector : ISurrogateSelector // TypeDefIndex: 1040
{
	// Fields
	private static Type s_cachedTypeObjRef; // 0x00
	private static ObjRefSurrogate _objRefSurrogate; // 0x04
	private static RemotingSurrogate _objRemotingSurrogate; // 0x08
	private object _rootObj; // 0x08
	private MessageSurrogateFilter _filter; // 0x0C
	private ISurrogateSelector _next; // 0x10

	// Properties
	public MessageSurrogateFilter Filter { get; set; } // 0x0031E030 0x0031E038

	// Constructors
	public RemotingSurrogateSelector(); // 0x0031DF28
	private static RemotingSurrogateSelector(); // 0x0031DF30

	// Methods
	public virtual void ChainSelector(ISurrogateSelector selector); // 0x0031E040
	public virtual ISurrogateSelector GetNextSelector(); // 0x0031E12C
	public object GetRootObject(); // 0x0031E134
	public virtual ISerializationSurrogate GetSurrogate(Type type, StreamingContext context, out ISurrogateSelector ssout); // 0x0031E13C
	public void SetRootObject(object obj); // 0x0031E374
	public virtual void UseSoapFormat(); // 0x0031E410
}

// Namespace: System.Runtime.Remoting.Messaging
public class ReturnMessage : IInternalMessage, IMessage, IMethodMessage, IMethodReturnMessage // TypeDefIndex: 1041
{
	// Fields
	private object[] _outArgs; // 0x08
	private object[] _args; // 0x0C
	private int _outArgsCount; // 0x10
	private LogicalCallContext _callCtx; // 0x14
	private object _returnValue; // 0x18
	private string _uri; // 0x1C
	private Exception _exception; // 0x20
	private MethodBase _methodBase; // 0x24
	private string _methodName; // 0x28
	private Type[] _methodSignature; // 0x2C
	private string _typeName; // 0x30
	private MethodReturnDictionary _properties; // 0x34
	private Identity _targetIdentity; // 0x38
	private ArgInfo _inArgInfo; // 0x3C

	// Properties
	private string System.Runtime.Remoting.Messaging.IInternalMessage.Uri { get; set; } // 0x0031E63C 0x0031E644
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.TargetIdentity { get; set; } // 0x0031E64C 0x0031E654
	public int ArgCount { get; } // 0x0031E65C 
	public object[] Args { get; } // 0x0031E680 
	public bool HasVarArgs { get; } // 0x0031E688 
	public LogicalCallContext LogicalCallContext { get; } // 0x0031E6B8 
	public MethodBase MethodBase { get; } // 0x0031E734 
	public string MethodName { get; } // 0x0031E73C 
	public object MethodSignature { get; } // 0x0031E77C 
	public virtual IDictionary Properties { get; } // 0x0031E8FC 
	public string TypeName { get; } // 0x0031E97C 
	public string Uri { get; set; } // 0x0031E9E4 0x0031E9EC
	public Exception Exception { get; } // 0x0031EAD0 
	public int OutArgCount { get; } // 0x0031EAD8 
	public object[] OutArgs { get; } // 0x0031EB8C 
	public virtual object ReturnValue { get; } // 0x0031EC58 

	// Constructors
	public ReturnMessage(object ret, object[] outArgs, int outArgsCount, LogicalCallContext callCtx, IMethodCallMessage mcm); // 0x0031E498
	public ReturnMessage(Exception e, IMethodCallMessage mcm); // 0x00301E98

	// Methods
	public object GetArg(int argNum); // 0x0031E9F4
	public string GetArgName(int index); // 0x0031EA3C
	public object GetOutArg(int argNum); // 0x0031EC60
	public string GetOutArgName(int index); // 0x0031ED4C
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ServerContextTerminatorSink : IMessageSink // TypeDefIndex: 1042
{
	// Properties
	public IMessageSink NextSink { get; } // 0x0031F044 

	// Constructors
	public ServerContextTerminatorSink(); // 0x002FF99C

	// Methods
	public IMessage SyncProcessMessage(IMessage msg); // 0x0031EE00
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x0031EF54
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ServerObjectTerminatorSink : IMessageSink // TypeDefIndex: 1043
{
	// Fields
	private IMessageSink _nextSink; // 0x08

	// Properties
	public IMessageSink NextSink { get; } // 0x0028F978 

	// Constructors
	public ServerObjectTerminatorSink(IMessageSink nextSink); // 0x0028F140

	// Methods
	public IMessage SyncProcessMessage(IMessage msg); // 0x0028F160
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x0028F728
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ServerObjectReplySink : IMessageSink // TypeDefIndex: 1044
{
	// Fields
	private IMessageSink _replySink; // 0x08
	private ServerIdentity _identity; // 0x0C

	// Properties
	public IMessageSink NextSink { get; } // 0x0031F214 

	// Constructors
	public ServerObjectReplySink(ServerIdentity identity, IMessageSink replySink); // 0x0031F04C

	// Methods
	public IMessage SyncProcessMessage(IMessage msg); // 0x0031F074
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x0031F18C
}

// Namespace: System.Runtime.Remoting.Messaging
internal class StackBuilderSink : IMessageSink // TypeDefIndex: 1045
{
	// Fields
	private MarshalByRefObject _target; // 0x08
	private RealProxy _rp; // 0x0C

	// Properties
	public IMessageSink NextSink { get; } // 0x00291540 

	// Constructors
	public StackBuilderSink(MarshalByRefObject obj, bool forceInternalExecute); // 0x0028F980

	// Methods
	public IMessage SyncProcessMessage(IMessage msg); // 0x0028FBD8
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x0029117C
	private void ExecuteAsyncMessage(object ob); // 0x002912E8
	private void CheckParameters(IMessage msg); // 0x0028FCD0
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
public interface ISoapXsd // TypeDefIndex: 1046
{
	// Methods
	string GetXsdType();
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapAnyUri : ISoapXsd // TypeDefIndex: 1047
{
	// Fields
	private string _value; // 0x08

	// Properties
	public string Value { get; set; } // 0x00292228 0x00292230
	public static string XsdType { get; } // 0x00292238 

	// Constructors
	public SoapAnyUri(); // 0x00292200
	public SoapAnyUri(string value); // 0x00292208

	// Methods
	public string GetXsdType(); // 0x00292294
	public static SoapAnyUri Parse(string value); // 0x002922F0
	public override string ToString(); // 0x00292364
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapBase64Binary : ISoapXsd // TypeDefIndex: 1048
{
	// Fields
	private byte[] _value; // 0x08

	// Properties
	public byte[] Value { get; set; } // 0x00292394 0x0029239C
	public static string XsdType { get; } // 0x002923A4 

	// Constructors
	public SoapBase64Binary(); // 0x0029236C
	public SoapBase64Binary(byte[] value); // 0x00292374

	// Methods
	public string GetXsdType(); // 0x00292400
	public static SoapBase64Binary Parse(string value); // 0x0029245C
	public override string ToString(); // 0x0029250C
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapDate : ISoapXsd // TypeDefIndex: 1049
{
	// Fields
	private static readonly string[] _datetimeFormats; // 0x00
	private int _sign; // 0x08
	private DateTime _value; // 0x10

	// Properties
	public int Sign { get; set; } // 0x00292928 0x00292930
	public DateTime Value { get; set; } // 0x00292938 0x00292948
	public static string XsdType { get; } // 0x00292960 

	// Constructors
	public SoapDate(); // 0x00292594
	public SoapDate(DateTime value); // 0x0029259C
	public SoapDate(DateTime value, int sign); // 0x002925D4
	private static SoapDate(); // 0x00292614

	// Methods
	public string GetXsdType(); // 0x002929BC
	public static SoapDate Parse(string value); // 0x00292A7C
	public override string ToString(); // 0x00292BE4
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
public sealed class SoapDateTime // TypeDefIndex: 1050
{
	// Fields
	private static readonly string[] _datetimeFormats; // 0x00

	// Properties
	public static string XsdType { get; } // 0x002937B4 

	// Constructors
	public SoapDateTime(); // 0x00292D00
	private static SoapDateTime(); // 0x00292D08

	// Methods
	public static DateTime Parse(string value); // 0x00293810
	public static string ToString(DateTime value); // 0x002938F8
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapDay : ISoapXsd // TypeDefIndex: 1051
{
	// Fields
	private static readonly string[] _datetimeFormats; // 0x00
	private DateTime _value; // 0x08

	// Properties
	public DateTime Value { get; set; } // 0x00293B48 0x00293B58
	public static string XsdType { get; } // 0x00293B70 

	// Constructors
	public SoapDay(); // 0x002939A4
	public SoapDay(DateTime value); // 0x002939AC
	private static SoapDay(); // 0x002939E4

	// Methods
	public string GetXsdType(); // 0x00293BCC
	public static SoapDay Parse(string value); // 0x00293C8C
	public override string ToString(); // 0x00293DAC
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
public sealed class SoapDuration // TypeDefIndex: 1052
{
	// Properties
	public static string XsdType { get; } // 0x00293E58 

	// Constructors
	public SoapDuration(); // 0x00293E50

	// Methods
	public static TimeSpan Parse(string value); // 0x00293EB4
	public static string ToString(TimeSpan timeSpan); // 0x002944F8
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapEntities : ISoapXsd // TypeDefIndex: 1053
{
	// Fields
	private string _value; // 0x08

	// Properties
	public string Value { get; set; } // 0x002949C0 0x002949C8
	public static string XsdType { get; } // 0x002949D0 

	// Constructors
	public SoapEntities(); // 0x00294994
	public SoapEntities(string value); // 0x0029499C

	// Methods
	public string GetXsdType(); // 0x00294A2C
	public static SoapEntities Parse(string value); // 0x00294A88
	public override string ToString(); // 0x00294AFC
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapEntity : ISoapXsd // TypeDefIndex: 1054
{
	// Fields
	private string _value; // 0x08

	// Properties
	public string Value { get; set; } // 0x00294B2C 0x00294B34
	public static string XsdType { get; } // 0x00294B3C 

	// Constructors
	public SoapEntity(); // 0x00294B04
	public SoapEntity(string value); // 0x00294B0C

	// Methods
	public string GetXsdType(); // 0x00294B98
	public static SoapEntity Parse(string value); // 0x00294BF4
	public override string ToString(); // 0x00294C68
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
internal class SoapHelper // TypeDefIndex: 1055
{
	// Constructors
	public SoapHelper(); // 0x00294C70

	// Methods
	public static Exception GetException(ISoapXsd type, string msg); // 0x00294C78
	public static string Normalize(string s); // 0x002949BC
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapHexBinary : ISoapXsd // TypeDefIndex: 1056
{
	// Fields
	private byte[] _value; // 0x08
	private StringBuilder sb; // 0x0C

	// Properties
	public byte[] Value { get; set; } // 0x00294EE8 0x00294EF0
	public static string XsdType { get; } // 0x00294EF8 

	// Constructors
	public SoapHexBinary(); // 0x00294DE8
	public SoapHexBinary(byte[] value); // 0x00294E64

	// Methods
	public string GetXsdType(); // 0x00294F54
	public static SoapHexBinary Parse(string value); // 0x00294FB0
	internal static byte[] FromBinHexString(string value); // 0x0029502C
	private static byte FromHex(char hexDigit, string value); // 0x00295470
	private static Exception CreateInvalidValueException(string value); // 0x0029525C
	public override string ToString(); // 0x002955D4
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapId : ISoapXsd // TypeDefIndex: 1057
{
	// Fields
	private string _value; // 0x08

	// Properties
	public string Value { get; set; } // 0x0029572C 0x00295734
	public static string XsdType { get; } // 0x0029573C 

	// Constructors
	public SoapId(); // 0x00295704
	public SoapId(string value); // 0x0029570C

	// Methods
	public string GetXsdType(); // 0x00295798
	public static SoapId Parse(string value); // 0x002957F4
	public override string ToString(); // 0x00295868
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapIdref : ISoapXsd // TypeDefIndex: 1058
{
	// Fields
	private string _value; // 0x08

	// Properties
	public string Value { get; set; } // 0x00295898 0x002958A0
	public static string XsdType { get; } // 0x002958A8 

	// Constructors
	public SoapIdref(); // 0x00295870
	public SoapIdref(string value); // 0x00295878

	// Methods
	public string GetXsdType(); // 0x00295904
	public static SoapIdref Parse(string value); // 0x00295960
	public override string ToString(); // 0x002959D4
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapIdrefs : ISoapXsd // TypeDefIndex: 1059
{
	// Fields
	private string _value; // 0x08

	// Properties
	public string Value { get; set; } // 0x00295A04 0x00295A0C
	public static string XsdType { get; } // 0x00295A14 

	// Constructors
	public SoapIdrefs(); // 0x002959DC
	public SoapIdrefs(string value); // 0x002959E4

	// Methods
	public string GetXsdType(); // 0x00295A70
	public static SoapIdrefs Parse(string value); // 0x00295ACC
	public override string ToString(); // 0x00295B40
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapInteger : ISoapXsd // TypeDefIndex: 1060
{
	// Fields
	private Decimal _value; // 0x08

	// Properties
	public Decimal Value { get; set; } // 0x00295B88 0x00295B98
	public static string XsdType { get; } // 0x00295BA8 

	// Constructors
	public SoapInteger(); // 0x00295B48
	public SoapInteger(Decimal value); // 0x00295B50

	// Methods
	public string GetXsdType(); // 0x00295C04
	public static SoapInteger Parse(string value); // 0x00295C60
	public override string ToString(); // 0x00295D30
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapLanguage : ISoapXsd // TypeDefIndex: 1061
{
	// Fields
	private string _value; // 0x08

	// Properties
	public string Value { get; set; } // 0x00295D64 0x00295D6C
	public static string XsdType { get; } // 0x00295D74 

	// Constructors
	public SoapLanguage(); // 0x00295D3C
	public SoapLanguage(string value); // 0x00295D44

	// Methods
	public string GetXsdType(); // 0x00295DD0
	public static SoapLanguage Parse(string value); // 0x00295E2C
	public override string ToString(); // 0x00295EA0
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapMonth : ISoapXsd // TypeDefIndex: 1062
{
	// Fields
	private static readonly string[] _datetimeFormats; // 0x00
	private DateTime _value; // 0x08

	// Properties
	public DateTime Value { get; set; } // 0x0029604C 0x0029605C
	public static string XsdType { get; } // 0x00296074 

	// Constructors
	public SoapMonth(); // 0x00295EA8
	public SoapMonth(DateTime value); // 0x00295EB0
	private static SoapMonth(); // 0x00295EE8

	// Methods
	public string GetXsdType(); // 0x002960D0
	public static SoapMonth Parse(string value); // 0x00296190
	public override string ToString(); // 0x002962B0
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapMonthDay : ISoapXsd // TypeDefIndex: 1063
{
	// Fields
	private static readonly string[] _datetimeFormats; // 0x00
	private DateTime _value; // 0x08

	// Properties
	public DateTime Value { get; set; } // 0x002964F8 0x00296508
	public static string XsdType { get; } // 0x00296520 

	// Constructors
	public SoapMonthDay(); // 0x00296354
	public SoapMonthDay(DateTime value); // 0x0029635C
	private static SoapMonthDay(); // 0x00296394

	// Methods
	public string GetXsdType(); // 0x0029657C
	public static SoapMonthDay Parse(string value); // 0x0029663C
	public override string ToString(); // 0x0029675C
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapName : ISoapXsd // TypeDefIndex: 1064
{
	// Fields
	private string _value; // 0x08

	// Properties
	public string Value { get; set; } // 0x00296828 0x00296830
	public static string XsdType { get; } // 0x00296838 

	// Constructors
	public SoapName(); // 0x00296800
	public SoapName(string value); // 0x00296808

	// Methods
	public string GetXsdType(); // 0x00296894
	public static SoapName Parse(string value); // 0x002968F0
	public override string ToString(); // 0x00296964
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapNcName : ISoapXsd // TypeDefIndex: 1065
{
	// Fields
	private string _value; // 0x08

	// Properties
	public string Value { get; set; } // 0x00296994 0x0029699C
	public static string XsdType { get; } // 0x002969A4 

	// Constructors
	public SoapNcName(); // 0x0029696C
	public SoapNcName(string value); // 0x00296974

	// Methods
	public string GetXsdType(); // 0x00296A00
	public static SoapNcName Parse(string value); // 0x00296A5C
	public override string ToString(); // 0x00296AD0
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapNegativeInteger : ISoapXsd // TypeDefIndex: 1066
{
	// Fields
	private Decimal _value; // 0x08

	// Properties
	public Decimal Value { get; set; } // 0x00296C6C 0x00296C7C
	public static string XsdType { get; } // 0x00296C8C 

	// Constructors
	public SoapNegativeInteger(); // 0x00296AD8
	public SoapNegativeInteger(Decimal value); // 0x00296AE0

	// Methods
	public string GetXsdType(); // 0x00296CE8
	public static SoapNegativeInteger Parse(string value); // 0x00296D44
	public override string ToString(); // 0x00296E08
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapNmtoken : ISoapXsd // TypeDefIndex: 1067
{
	// Fields
	private string _value; // 0x08

	// Properties
	public string Value { get; set; } // 0x00296E3C 0x00296E44
	public static string XsdType { get; } // 0x00296E4C 

	// Constructors
	public SoapNmtoken(); // 0x00296E14
	public SoapNmtoken(string value); // 0x00296E1C

	// Methods
	public string GetXsdType(); // 0x00296EA8
	public static SoapNmtoken Parse(string value); // 0x00296F04
	public override string ToString(); // 0x00296F78
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapNmtokens : ISoapXsd // TypeDefIndex: 1068
{
	// Fields
	private string _value; // 0x08

	// Properties
	public string Value { get; set; } // 0x00296FA8 0x00296FB0
	public static string XsdType { get; } // 0x00296FB8 

	// Constructors
	public SoapNmtokens(); // 0x00296F80
	public SoapNmtokens(string value); // 0x00296F88

	// Methods
	public string GetXsdType(); // 0x00297014
	public static SoapNmtokens Parse(string value); // 0x00297070
	public override string ToString(); // 0x002970E4
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapNonNegativeInteger : ISoapXsd // TypeDefIndex: 1069
{
	// Fields
	private Decimal _value; // 0x08

	// Properties
	public Decimal Value { get; set; } // 0x00297280 0x00297290
	public static string XsdType { get; } // 0x002972A0 

	// Constructors
	public SoapNonNegativeInteger(); // 0x002970EC
	public SoapNonNegativeInteger(Decimal value); // 0x002970F4

	// Methods
	public string GetXsdType(); // 0x002972FC
	public static SoapNonNegativeInteger Parse(string value); // 0x00297358
	public override string ToString(); // 0x0029741C
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapNonPositiveInteger : ISoapXsd // TypeDefIndex: 1070
{
	// Fields
	private Decimal _value; // 0x08

	// Properties
	public Decimal Value { get; set; } // 0x002975BC 0x002975CC
	public static string XsdType { get; } // 0x002975DC 

	// Constructors
	public SoapNonPositiveInteger(); // 0x00297428
	public SoapNonPositiveInteger(Decimal value); // 0x00297430

	// Methods
	public string GetXsdType(); // 0x00297638
	public static SoapNonPositiveInteger Parse(string value); // 0x00297694
	public override string ToString(); // 0x00297758
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapNormalizedString : ISoapXsd // TypeDefIndex: 1071
{
	// Fields
	private string _value; // 0x08

	// Properties
	public string Value { get; set; } // 0x0029778C 0x00297794
	public static string XsdType { get; } // 0x0029779C 

	// Constructors
	public SoapNormalizedString(); // 0x00297764
	public SoapNormalizedString(string value); // 0x0029776C

	// Methods
	public string GetXsdType(); // 0x002977F8
	public static SoapNormalizedString Parse(string value); // 0x00297854
	public override string ToString(); // 0x002978C8
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapNotation : ISoapXsd // TypeDefIndex: 1072
{
	// Fields
	private string _value; // 0x08

	// Properties
	public string Value { get; set; } // 0x002978F8 0x00297900
	public static string XsdType { get; } // 0x00297908 

	// Constructors
	public SoapNotation(); // 0x002978D0
	public SoapNotation(string value); // 0x002978D8

	// Methods
	public string GetXsdType(); // 0x00297964
	public static SoapNotation Parse(string value); // 0x002979C0
	public override string ToString(); // 0x00297A34
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapPositiveInteger : ISoapXsd // TypeDefIndex: 1073
{
	// Fields
	private Decimal _value; // 0x08

	// Properties
	public Decimal Value { get; set; } // 0x00297BD0 0x00297BE0
	public static string XsdType { get; } // 0x00297BF0 

	// Constructors
	public SoapPositiveInteger(); // 0x00297A3C
	public SoapPositiveInteger(Decimal value); // 0x00297A44

	// Methods
	public string GetXsdType(); // 0x00297C4C
	public static SoapPositiveInteger Parse(string value); // 0x00297CA8
	public override string ToString(); // 0x00297D6C
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapQName : ISoapXsd // TypeDefIndex: 1074
{
	// Fields
	private string _name; // 0x08
	private string _key; // 0x0C
	private string _namespace; // 0x10

	// Properties
	public string Key { get; set; } // 0x00297DF8 0x00297E00
	public string Name { get; set; } // 0x00297E08 0x00297E10
	public string Namespace { get; set; } // 0x00297E18 0x00297E20
	public static string XsdType { get; } // 0x00297E28 

	// Constructors
	public SoapQName(); // 0x00297D78
	public SoapQName(string value); // 0x00297D80
	public SoapQName(string key, string name); // 0x00297DA0
	public SoapQName(string key, string name, string namespaceValue); // 0x00297DC8

	// Methods
	public string GetXsdType(); // 0x00297E84
	public static SoapQName Parse(string value); // 0x00297EE0
	public override string ToString(); // 0x00297FF4
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapTime : ISoapXsd // TypeDefIndex: 1075
{
	// Fields
	private static readonly string[] _datetimeFormats; // 0x00
	private DateTime _value; // 0x08

	// Properties
	public DateTime Value { get; set; } // 0x00298BEC 0x00298BFC
	public static string XsdType { get; } // 0x00298C14 

	// Constructors
	public SoapTime(); // 0x00298100
	public SoapTime(DateTime value); // 0x00298108
	private static SoapTime(); // 0x00298140

	// Methods
	public string GetXsdType(); // 0x00298C70
	public static SoapTime Parse(string value); // 0x00298D30
	public override string ToString(); // 0x00298E50
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapToken : ISoapXsd // TypeDefIndex: 1076
{
	// Fields
	private string _value; // 0x08

	// Properties
	public string Value { get; set; } // 0x00298F1C 0x00298F24
	public static string XsdType { get; } // 0x00298F2C 

	// Constructors
	public SoapToken(); // 0x00298EF4
	public SoapToken(string value); // 0x00298EFC

	// Methods
	public string GetXsdType(); // 0x00298F88
	public static SoapToken Parse(string value); // 0x00298FE4
	public override string ToString(); // 0x00299058
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapYear : ISoapXsd // TypeDefIndex: 1077
{
	// Fields
	private static readonly string[] _datetimeFormats; // 0x00
	private int _sign; // 0x08
	private DateTime _value; // 0x10

	// Properties
	public int Sign { get; set; } // 0x002993F4 0x002993FC
	public DateTime Value { get; set; } // 0x00299404 0x00299414
	public static string XsdType { get; } // 0x0029942C 

	// Constructors
	public SoapYear(); // 0x00299060
	public SoapYear(DateTime value); // 0x00299068
	public SoapYear(DateTime value, int sign); // 0x002990A0
	private static SoapYear(); // 0x002990E0

	// Methods
	public string GetXsdType(); // 0x00299488
	public static SoapYear Parse(string value); // 0x00299548
	public override string ToString(); // 0x002996B0
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapYearMonth : ISoapXsd // TypeDefIndex: 1078
{
	// Fields
	private static readonly string[] _datetimeFormats; // 0x00
	private int _sign; // 0x08
	private DateTime _value; // 0x10

	// Properties
	public int Sign { get; set; } // 0x00299B60 0x00299B68
	public DateTime Value { get; set; } // 0x00299B70 0x00299B80
	public static string XsdType { get; } // 0x00299B98 

	// Constructors
	public SoapYearMonth(); // 0x002997CC
	public SoapYearMonth(DateTime value); // 0x002997D4
	public SoapYearMonth(DateTime value, int sign); // 0x0029980C
	private static SoapYearMonth(); // 0x0029984C

	// Methods
	public string GetXsdType(); // 0x00299BF4
	public static SoapYearMonth Parse(string value); // 0x00299CB4
	public override string ToString(); // 0x00299E1C
}

// Namespace: System.Runtime.Remoting.Metadata
public class SoapAttribute : Attribute // TypeDefIndex: 1079
{
	// Fields
	private bool _nested; // 0x08
	private bool _useAttribute; // 0x09
	protected string ProtXmlNamespace; // 0x0C
	protected object ReflectInfo; // 0x10

	// Properties
	public virtual bool Embedded { get; set; } // 0x00291558 0x00291560
	public virtual bool UseAttribute { get; set; } // 0x00291568 0x00291570
	public virtual string XmlNamespace { get; set; } // 0x00291578 0x00291580

	// Constructors
	public SoapAttribute(); // 0x00291550

	// Methods
	internal virtual void SetReflectionObject(object reflectionObject); // 0x00291588
}

// Namespace: System.Runtime.Remoting.Metadata
public sealed class SoapFieldAttribute : SoapAttribute // TypeDefIndex: 1080
{
	// Fields
	private int _order; // 0x14
	private string _elementName; // 0x18
	private bool _isElement; // 0x1C

	// Properties
	public int Order { get; set; } // 0x00291598 0x002915A0
	public string XmlElementName { get; set; } // 0x002915A8 0x002915B0

	// Constructors
	public SoapFieldAttribute(); // 0x00291590

	// Methods
	public bool IsInteropXmlElement(); // 0x002915C4
	internal override void SetReflectionObject(object reflectionObject); // 0x002915CC
}

// Namespace: System.Runtime.Remoting.Metadata
public sealed class SoapMethodAttribute : SoapAttribute // TypeDefIndex: 1081
{
	// Fields
	private string _responseElement; // 0x14
	private string _responseNamespace; // 0x18
	private string _returnElement; // 0x1C
	private string _soapAction; // 0x20
	private bool _useAttribute; // 0x24
	private string _namespace; // 0x28

	// Properties
	public string ResponseXmlElementName { get; set; } // 0x002916AC 0x002916B4
	public string ResponseXmlNamespace { get; set; } // 0x002916BC 0x002916C4
	public string ReturnXmlElementName { get; set; } // 0x002916CC 0x002916D4
	public string SoapAction { get; set; } // 0x002916DC 0x002916E4
	public override bool UseAttribute { get; set; } // 0x002916EC 0x002916F4
	public override string XmlNamespace { get; set; } // 0x002916FC 0x00291704

	// Constructors
	public SoapMethodAttribute(); // 0x002916A4

	// Methods
	internal override void SetReflectionObject(object reflectionObject); // 0x0029170C
}

// Namespace: System.Runtime.Remoting.Metadata
[Serializable]
public enum SoapOption // TypeDefIndex: 1082
{
	None = 0,
	AlwaysIncludeTypes = 1,
	XsdString = 2,
	EmbedAll = 4,
	Option1 = 8,
	Option2 = 16
}

// Namespace: System.Runtime.Remoting.Metadata
public sealed class SoapParameterAttribute : SoapAttribute // TypeDefIndex: 1083
{
	// Constructors
	public SoapParameterAttribute(); // 0x00291B4C

}

// Namespace: System.Runtime.Remoting.Metadata
public sealed class SoapTypeAttribute : SoapAttribute // TypeDefIndex: 1084
{
	// Fields
	private SoapOption _soapOption; // 0x14
	private bool _useAttribute; // 0x18
	private string _xmlElementName; // 0x1C
	private XmlFieldOrderOption _xmlFieldOrder; // 0x20
	private string _xmlNamespace; // 0x24
	private string _xmlTypeName; // 0x28
	private string _xmlTypeNamespace; // 0x2C
	private bool _isType; // 0x30
	private bool _isElement; // 0x31

	// Properties
	public SoapOption SoapOptions { get; set; } // 0x00291B5C 0x00291B64
	public override bool UseAttribute { get; set; } // 0x00291B6C 0x00291B74
	public string XmlElementName { get; set; } // 0x00291B7C 0x00291B84
	public XmlFieldOrderOption XmlFieldOrder { get; set; } // 0x00291B98 0x00291BA0
	public override string XmlNamespace { get; set; } // 0x00291BA8 0x00291BB0
	public string XmlTypeName { get; set; } // 0x00291BC4 0x00291BCC
	public string XmlTypeNamespace { get; set; } // 0x00291BE0 0x00291BE8
	internal bool IsInteropXmlElement { get; } // 0x00291BFC 
	internal bool IsInteropXmlType { get; } // 0x00291C04 

	// Constructors
	public SoapTypeAttribute(); // 0x00291B54

	// Methods
	internal override void SetReflectionObject(object reflectionObject); // 0x00291C0C
}

// Namespace: System.Runtime.Remoting.Metadata
[Serializable]
public enum XmlFieldOrderOption // TypeDefIndex: 1085
{
	All = 0,
	Sequence = 1,
	Choice = 2
}

// Namespace: System.Runtime.Remoting.Proxies
public class ProxyAttribute : Attribute, IContextAttribute // TypeDefIndex: 1086
{
	// Constructors
	public ProxyAttribute(); // 0x0029CA40

	// Methods
	public virtual MarshalByRefObject CreateInstance(Type serverType); // 0x0029CA48
	public virtual RealProxy CreateProxy(ObjRef objRef, Type serverType, object serverObject, Context serverContext); // 0x0029CBCC
	public void GetPropertiesForNewContext(IConstructionCallMessage msg); // 0x0029CD84
	public bool IsContextOK(Context ctx, IConstructionCallMessage msg); // 0x0029CD88
}

// Namespace: System.Runtime.Remoting.Proxies
internal class TransparentProxy // TypeDefIndex: 1087
{
	// Fields
	public RealProxy _rp; // 0x08
	private IntPtr _class; // 0x0C
	private bool _custom_type_info; // 0x10

	// Constructors
	public TransparentProxy(); // 0x002A0E84

}

// Namespace: System.Runtime.Remoting.Proxies
public abstract class RealProxy // TypeDefIndex: 1088
{
	// Fields
	private Type class_to_proxy; // 0x08
	internal Context _targetContext; // 0x0C
	private MarshalByRefObject _server; // 0x10
	private int _targetDomainId; // 0x14
	internal string _targetUri; // 0x18
	internal Identity _objectIdentity; // 0x1C
	private object _objTP; // 0x20
	private object _stubData; // 0x24

	// Properties
	internal Identity ObjectIdentity { get; set; } // 0x0029D994 0x0029D99C

	// Constructors
	protected RealProxy(); // 0x0029CD90
	protected RealProxy(Type classToProxy); // 0x0029CDA0
	internal RealProxy(Type classToProxy, ClientIdentity identity); // 0x0029CF6C
	protected RealProxy(Type classToProxy, IntPtr stub, object stubData); // 0x0029CE08

	// Methods
	private static Type InternalGetProxyType(object transparentProxy); // 0x0029CFDC
	public Type GetProxiedType(); // 0x0029CFE0
	public virtual ObjRef CreateObjRef(Type requestedType); // 0x0029D0B4
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0029D76C
	public virtual IntPtr GetCOMIUnknown(bool fIsMarshalled); // 0x0029D9A4
	public virtual void SetCOMIUnknown(IntPtr i); // 0x0029DA2C
	public virtual IntPtr SupportsInterface(Guid iid); // 0x0029DAB4
	public static object GetStubData(RealProxy rp); // 0x0029DB3C
	public static void SetStubData(RealProxy rp, object stubData); // 0x0029DB60
	public abstract IMessage Invoke(IMessage msg);
	internal static object PrivateInvoke(RealProxy rp, IMessage msg, out Exception exc, out object[] out_args); // 0x0029DB88
	internal virtual object InternalGetTransparentProxy(string className); // 0x0029F350
	public virtual object GetTransparentProxy(); // 0x0029F354
	public IConstructionReturnMessage InitializeServerObject(IConstructionCallMessage ctorMsg); // 0x0029F558
	protected void AttachServer(MarshalByRefObject s); // 0x0029F5E0
	protected MarshalByRefObject DetachServer(); // 0x0029F5E8
	protected MarshalByRefObject GetUnwrappedServer(); // 0x0029F5FC
	internal void SetTargetDomain(int domainId); // 0x0029F604
	internal object GetAppDomainTarget(); // 0x0029F60C
	private static object[] ProcessResponse(IMethodReturnMessage mrm, MonoMethodMessage call); // 0x0029E8F4
}

// Namespace: System.Runtime.Remoting.Proxies
internal class RemotingProxy : RealProxy, IRemotingTypeInfo // TypeDefIndex: 1089
{
	// Fields
	private static MethodInfo _cache_GetTypeMethod; // 0x00
	private static MethodInfo _cache_GetHashCodeMethod; // 0x04
	private IMessageSink _sink; // 0x28
	private bool _hasEnvoySink; // 0x2C
	private ConstructionCall _ctorCall; // 0x30

	// Properties
	public string TypeName { get; set; } // 0x002A0694 0x002A0838

	// Constructors
	internal RemotingProxy(Type type, ClientIdentity identity); // 0x0029F9F8
	internal RemotingProxy(Type type, string activationUrl, object[] activationAttributes); // 0x0029CB8C
	private static RemotingProxy(); // 0x0029FA60

	// Methods
	public override IMessage Invoke(IMessage request); // 0x0029FB98
	internal void AttachIdentity(Identity identity); // 0x002A0328
	internal IMessage ActivateRemoteObject(IMethodMessage request); // 0x0029E7F4
	public bool CanCastTo(Type fromType, object o); // 0x002A08C0
	protected override void Finalize(); // 0x002A0B20
}

// Namespace: System.Runtime.Remoting.Services
public sealed class EnterpriseServicesHelper // TypeDefIndex: 1090
{
	// Constructors
	public EnterpriseServicesHelper(); // 0x002AB808

	// Methods
	public static IConstructionReturnMessage CreateConstructionReturnMessage(IConstructionCallMessage ctorMsg, MarshalByRefObject retObj); // 0x002AB810
	public static void SwitchWrappers(RealProxy oldcp, RealProxy newcp); // 0x002AB8A0
	public static object WrapIUnknownWithComObject(IntPtr punk); // 0x002AB928
}

// Namespace: System.Runtime.Remoting.Services
public interface ITrackingHandler // TypeDefIndex: 1091
{
	// Methods
	void DisconnectedObject(object obj);
	void MarshaledObject(object obj, ObjRef or);
	void UnmarshaledObject(object obj, ObjRef or);
}

// Namespace: System.Runtime.Remoting.Services
public class TrackingServices // TypeDefIndex: 1092
{
	// Fields
	private static ArrayList _handlers; // 0x00

	// Properties
	public static ITrackingHandler[] RegisteredHandlers { get; } // 0x002ABFA4 

	// Constructors
	public TrackingServices(); // 0x002AB9B0
	private static TrackingServices(); // 0x002AB9B8

	// Methods
	public static void RegisterTrackingHandler(ITrackingHandler handler); // 0x002ABA38
	public static void UnregisterTrackingHandler(ITrackingHandler handler); // 0x002ABCEC
	internal static void NotifyMarshaledObject(object obj, ObjRef or); // 0x002A79E4
	internal static void NotifyUnmarshaledObject(object obj, ObjRef or); // 0x002A6DA4
	internal static void NotifyDisconnectedObject(object obj); // 0x002A6528
}

// Namespace: System.Runtime.Remoting
public class ActivatedClientTypeEntry : TypeEntry // TypeDefIndex: 1093
{
	// Fields
	private string applicationUrl; // 0x10
	private Type obj_type; // 0x14

	// Properties
	public string ApplicationUrl { get; } // 0x002C4454 
	public IContextAttribute[] ContextAttributes { get; set; } // 0x002C445C 0x002C4464
	public Type ObjectType { get; } // 0x002C4468 

	// Constructors
	public ActivatedClientTypeEntry(Type type, string appUrl); // 0x002C4264
	public ActivatedClientTypeEntry(string typeName, string assemblyName, string appUrl); // 0x002C42F4

	// Methods
	public override string ToString(); // 0x002C4470
}

// Namespace: System.Runtime.Remoting
public class ActivatedServiceTypeEntry : TypeEntry // TypeDefIndex: 1094
{
	// Fields
	private Type obj_type; // 0x10

	// Properties
	public IContextAttribute[] ContextAttributes { get; set; } // 0x002C46EC 0x002C46F4
	public Type ObjectType { get; } // 0x002C46F8 

	// Constructors
	public ActivatedServiceTypeEntry(Type type); // 0x002C4508
	public ActivatedServiceTypeEntry(string typeName, string assemblyName); // 0x002C4590

	// Methods
	public override string ToString(); // 0x002C4700
}

// Namespace: System.Runtime.Remoting
public enum CustomErrorsModes // TypeDefIndex: 1095
{
	On = 0,
	Off = 1,
	RemoteOnly = 2
}

// Namespace: System.Runtime.Remoting
[Serializable]
internal class EnvoyInfo : IEnvoyInfo // TypeDefIndex: 1096
{
	// Fields
	private IMessageSink envoySinks; // 0x08

	// Properties
	public IMessageSink EnvoySinks { get; set; } // 0x003045F0 0x003045F8

	// Constructors
	public EnvoyInfo(IMessageSink sinks); // 0x003045D0

}

// Namespace: System.Runtime.Remoting
public interface IChannelInfo // TypeDefIndex: 1097
{
	// Properties
	object[] ChannelData { get; set; }

}

// Namespace: System.Runtime.Remoting
public interface IEnvoyInfo // TypeDefIndex: 1098
{
	// Properties
	IMessageSink EnvoySinks { get; set; }

}

// Namespace: System.Runtime.Remoting
public interface IObjectHandle // TypeDefIndex: 1099
{
	// Methods
	object Unwrap();
}

// Namespace: System.Runtime.Remoting
public interface IRemotingTypeInfo // TypeDefIndex: 1100
{
	// Properties
	string TypeName { get; set; }

	// Methods
	bool CanCastTo(Type fromType, object o);
}

// Namespace: System.Runtime.Remoting
internal abstract class Identity // TypeDefIndex: 1101
{
	// Fields
	protected string _objectUri; // 0x08
	protected IMessageSink _channelSink; // 0x0C
	protected IMessageSink _envoySink; // 0x10
	private DynamicPropertyCollection _clientDynamicProperties; // 0x14
	private DynamicPropertyCollection _serverDynamicProperties; // 0x18
	protected ObjRef _objRef; // 0x1C
	private bool _disposed; // 0x20

	// Properties
	public bool IsFromThisAppDomain { get; } // 0x00304620 
	public IMessageSink ChannelSink { get; set; } // 0x00304634 0x0030463C
	public IMessageSink EnvoySink { get; } // 0x00304644 
	public string ObjectUri { get; set; } // 0x0030464C 0x00304654
	public bool IsConnected { get; } // 0x0030465C 
	public bool Disposed { get; set; } // 0x0030466C 0x00304674
	public DynamicPropertyCollection ClientDynamicProperties { get; } // 0x002FDC4C 
	public DynamicPropertyCollection ServerDynamicProperties { get; } // 0x002FDCC8 
	public bool HasClientDynamicSinks { get; } // 0x0030467C 
	public bool HasServerDynamicSinks { get; } // 0x003046D0 

	// Constructors
	public Identity(string objectUri); // 0x00304600

	// Methods
	public abstract ObjRef CreateObjRef(Type requestedType);
	public void NotifyClientDynamicSinks(bool start, IMessage req_msg, bool client_site, bool async); // 0x00304724
	public void NotifyServerDynamicSinks(bool start, IMessage req_msg, bool client_site, bool async); // 0x003047B4
}

// Namespace: System.Runtime.Remoting
internal class ClientIdentity : Identity // TypeDefIndex: 1102
{
	// Fields
	private WeakReference _proxyReference; // 0x24

	// Properties
	public MarshalByRefObject ClientProxy { get; set; } // 0x002D3BA8 0x002D3C70
	public string TargetUri { get; } // 0x002D3CF0 

	// Constructors
	public ClientIdentity(string objectUri, ObjRef objRef); // 0x002D3A44

	// Methods
	public override ObjRef CreateObjRef(Type requestedType); // 0x002D3CE8
}

// Namespace: System.Runtime.Remoting
public class InternalRemotingServices // TypeDefIndex: 1103
{
	// Fields
	private static Hashtable _soapAttributes; // 0x00

	// Constructors
	public InternalRemotingServices(); // 0x00304844
	private static InternalRemotingServices(); // 0x0030484C

	// Methods
	public static void DebugOutChnl(string s); // 0x003048CC
	public static SoapAttribute GetCachedSoapAttribute(object reflectionObject); // 0x00304954
	public static void RemotingAssert(bool condition, string message); // 0x00304EFC
	public static void RemotingTrace(object[] messages); // 0x00304F84
	public static void SetServerIdentity(MethodCall m, object srvID); // 0x0030500C
}

// Namespace: System.Runtime.Remoting
[Serializable]
public class ObjRef : ISerializable, IObjectReference // TypeDefIndex: 1104
{
	// Fields
	private IChannelInfo channel_info; // 0x08
	private string uri; // 0x0C
	private IRemotingTypeInfo typeInfo; // 0x10
	private IEnvoyInfo envoyInfo; // 0x14
	private int flags; // 0x18
	private Type _serverType; // 0x1C
	private static int MarshalledObjectRef; // 0x00
	private static int WellKnowObjectRef; // 0x04
	private static Dictionary`2<string, int> <>f__switch$map26; // 0x08

	// Properties
	internal bool IsReferenceToWellKnow { get; } // 0x0029B4F8 
	public virtual IChannelInfo ChannelInfo { get; set; } // 0x0029B59C 0x0029B5A4
	public virtual IEnvoyInfo EnvoyInfo { get; set; } // 0x0029B5AC 0x0029B5B4
	public virtual IRemotingTypeInfo TypeInfo { get; set; } // 0x0029B5BC 0x0029B5C4
	public virtual string URI { get; set; } // 0x0029B5CC 0x0029B5D4
	internal Type ServerType { get; } // 0x0029BFCC 

	// Constructors
	public ObjRef(); // 0x00299F38
	internal ObjRef(string typeName, string uri, IChannelInfo cinfo); // 0x00299FC8
	internal ObjRef(ObjRef o, bool unmarshalAsProxy); // 0x0029A5D8
	public ObjRef(MarshalByRefObject o, Type requestedType); // 0x0029A718
	internal ObjRef(Type type, string url, object remoteChannelData); // 0x0029AA20
	protected ObjRef(SerializationInfo info, StreamingContext context); // 0x0029AB2C
	private static ObjRef(); // 0x0029B478

	// Methods
	internal bool IsPossibleToCAD(); // 0x0029B4F0
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0029B5DC
	public virtual object GetRealObject(StreamingContext context); // 0x0029B810
	public bool IsFromThisAppDomain(); // 0x0029B970
	public bool IsFromThisProcess(); // 0x0029BCD4
	internal void UpdateChannelInfo(); // 0x00299F58
}

// Namespace: System.Runtime.Remoting
public class ObjectHandle : MarshalByRefObject, IObjectHandle // TypeDefIndex: 1105
{
	// Fields
	private object _wrapped; // 0x0C

	// Constructors
	public ObjectHandle(object o); // 0x0029C10C

	// Methods
	public override object InitializeLifetimeService(); // 0x0029C12C
	public object Unwrap(); // 0x0029C134
}

// Namespace: System.Runtime.Remoting
public static class RemotingConfiguration // TypeDefIndex: 1106
{
	// Fields
	private static string applicationID; // 0x00
	private static string applicationName; // 0x04
	private static string processGuid; // 0x08
	private static bool defaultConfigRead; // 0x0C
	private static bool defaultDelayedConfigRead; // 0x0D
	private static string _errorMode; // 0x10
	private static Hashtable wellKnownClientEntries; // 0x14
	private static Hashtable activatedClientEntries; // 0x18
	private static Hashtable wellKnownServiceEntries; // 0x1C
	private static Hashtable activatedServiceEntries; // 0x20
	private static Hashtable channelTemplates; // 0x24
	private static Hashtable clientProviderTemplates; // 0x28
	private static Hashtable serverProviderTemplates; // 0x2C

	// Properties
	public static string ApplicationId { get; } // 0x002A1000 
	public static string ApplicationName { get; set; } // 0x002A110C 0x002A1198
	public static CustomErrorsModes CustomErrorsMode { get; set; } // 0x002A1228 0x002A12B0
	public static string ProcessId { get; } // 0x0029BEB4 

	// Constructors
	private static RemotingConfiguration(); // 0x002A0E8C

	// Methods
	public static void Configure(string filename, bool ensureSecurity); // 0x002A1338
	public static void Configure(string filename); // 0x002A187C
	private static void ReadConfigFile(string filename); // 0x002A1500
	internal static void LoadDefaultDelayedChannels(); // 0x002A1908
	public static ActivatedClientTypeEntry[] GetRegisteredActivatedClientTypes(); // 0x002A1CE0
	public static ActivatedServiceTypeEntry[] GetRegisteredActivatedServiceTypes(); // 0x002A1F38
	public static WellKnownClientTypeEntry[] GetRegisteredWellKnownClientTypes(); // 0x002A2190
	public static WellKnownServiceTypeEntry[] GetRegisteredWellKnownServiceTypes(); // 0x002A23E8
	public static bool IsActivationAllowed(Type svrType); // 0x002A2640
	public static ActivatedClientTypeEntry IsRemotelyActivatedClientType(Type svrType); // 0x002A27AC
	public static ActivatedClientTypeEntry IsRemotelyActivatedClientType(string typeName, string assemblyName); // 0x002A295C
	public static WellKnownClientTypeEntry IsWellKnownClientType(Type svrType); // 0x002A2A1C
	public static WellKnownClientTypeEntry IsWellKnownClientType(string typeName, string assemblyName); // 0x002A2BCC
	public static void RegisterActivatedClientType(ActivatedClientTypeEntry entry); // 0x002A2C8C
	public static void RegisterActivatedClientType(Type type, string appUrl); // 0x002A2FF8
	public static void RegisterActivatedServiceType(ActivatedServiceTypeEntry entry); // 0x002A3150
	public static void RegisterActivatedServiceType(Type type); // 0x002A32CC
	public static void RegisterWellKnownClientType(Type type, string objectUrl); // 0x002A3370
	public static void RegisterWellKnownClientType(WellKnownClientTypeEntry entry); // 0x002A3554
	public static void RegisterWellKnownServiceType(Type type, string objectUri, WellKnownObjectMode mode); // 0x002A38C0
	public static void RegisterWellKnownServiceType(WellKnownServiceTypeEntry entry); // 0x002A3A10
	internal static void RegisterChannelTemplate(ChannelData channel); // 0x002A3D08
	internal static void RegisterClientProviderTemplate(ProviderData prov); // 0x002A3DD8
	internal static void RegisterServerProviderTemplate(ProviderData prov); // 0x002A3EA8
	internal static void RegisterChannels(ArrayList channels, bool onlyDelayed); // 0x002A3F78
	internal static void RegisterTypes(ArrayList types); // 0x002A5060
	public static bool CustomErrorsEnabled(bool isLocalRequest); // 0x002A5688
	internal static void SetCustomErrorsMode(string mode); // 0x002A5800
}

// Namespace: System.Runtime.Remoting
internal class ConfigHandler : IContentHandler // TypeDefIndex: 1107
{
	// Fields
	private ArrayList typeEntries; // 0x08
	private ArrayList channelInstances; // 0x0C
	private ChannelData currentChannel; // 0x10
	private Stack currentProviderData; // 0x14
	private string currentClientUrl; // 0x18
	private string appName; // 0x1C
	private string currentXmlPath; // 0x20
	private bool onlyDelayedChannels; // 0x24
	private static Dictionary`2<string, int> <>f__switch$map27; // 0x00
	private static Dictionary`2<string, int> <>f__switch$map28; // 0x04

	// Constructors
	public ConfigHandler(bool onlyDelayedChannels); // 0x002F7A7C

	// Methods
	private void ValidatePath(string element, string[] paths); // 0x002F7B60
	private bool CheckPath(string path); // 0x002F7CAC
	public void OnStartParsing(SmallXmlParser parser); // 0x002F7E18
	public void OnProcessingInstruction(string name, string text); // 0x002F7E1C
	public void OnIgnorableWhitespace(string s); // 0x002F7E20
	public void OnStartElement(string name, IAttrList attrs); // 0x002F7E24
	public void ParseElement(string name, IAttrList attrs); // 0x002F8080
	public void OnEndElement(string name); // 0x002FC26C
	private void ReadCustomProviderData(string name, IAttrList attrs); // 0x002F9ADC
	private void ReadLifetine(IAttrList attrs); // 0x002F9F8C
	private TimeSpan ParseTime(string s); // 0x002FC318
	private void ReadChannel(IAttrList attrs, bool isTemplate); // 0x002FAAC0
	private ProviderData ReadProvider(string name, IAttrList attrs, bool isTemplate); // 0x002FB104
	private void ReadClientActivated(IAttrList attrs); // 0x002FBA6C
	private void ReadServiceActivated(IAttrList attrs); // 0x002FBC0C
	private void ReadClientWellKnown(IAttrList attrs); // 0x002FB708
	private void ReadServiceWellKnown(IAttrList attrs); // 0x002FB808
	private void ReadInteropXml(IAttrList attrs, bool isElement); // 0x002FBCE4
	private void ReadPreload(IAttrList attrs); // 0x002FBF50
	private string GetNotNull(IAttrList attrs, string name); // 0x002FCA3C
	private string ExtractAssembly(string type); // 0x002FCC10
	public void OnChars(string ch); // 0x002FCD6C
	public void OnEndParsing(SmallXmlParser parser); // 0x002FCD70
}

// Namespace: System.Runtime.Remoting
internal class ChannelData // TypeDefIndex: 1108
{
	// Fields
	internal string Ref; // 0x08
	internal string Type; // 0x0C
	internal string Id; // 0x10
	internal string DelayLoadAsClientChannel; // 0x14
	private ArrayList _serverProviders; // 0x18
	private ArrayList _clientProviders; // 0x1C
	private Hashtable _customProperties; // 0x20

	// Properties
	internal ArrayList ServerProviders { get; } // 0x002C80CC 
	public ArrayList ClientProviders { get; } // 0x002C814C 
	public Hashtable CustomProperties { get; } // 0x002C81CC 

	// Constructors
	public ChannelData(); // 0x002C8014

	// Methods
	public void CopyFrom(ChannelData other); // 0x002C824C
}

// Namespace: System.Runtime.Remoting
internal class ProviderData // TypeDefIndex: 1109
{
	// Fields
	internal string Ref; // 0x08
	internal string Type; // 0x0C
	internal string Id; // 0x10
	internal Hashtable CustomProperties; // 0x14
	internal IList CustomData; // 0x18

	// Constructors
	public ProviderData(); // 0x0029C13C

	// Methods
	public void CopyFrom(ProviderData other); // 0x0029C1B8
}

// Namespace: System.Runtime.Remoting
internal class FormatterData : ProviderData // TypeDefIndex: 1110
{
	// Constructors
	public FormatterData(); // 0x002FCA34

}

// Namespace: System.Runtime.Remoting
[Serializable]
public class RemotingException : SystemException // TypeDefIndex: 1111
{
	// Constructors
	public RemotingException(); // 0x002A5A78
	public RemotingException(string message); // 0x00291548
	protected RemotingException(SerializationInfo info, StreamingContext context); // 0x002A5A80
	public RemotingException(string message, Exception InnerException); // 0x002A1900

}

// Namespace: System.Runtime.Remoting
public sealed class RemotingServices // TypeDefIndex: 1112
{
	// Fields
	private static Hashtable uri_hash; // 0x00
	private static BinaryFormatter _serializationFormatter; // 0x04
	private static BinaryFormatter _deserializationFormatter; // 0x08
	internal static string app_id; // 0x0C
	private static int next_id; // 0x10
	private static readonly BindingFlags methodBindings; // 0x14
	private static readonly MethodInfo FieldSetterMethod; // 0x18
	private static readonly MethodInfo FieldGetterMethod; // 0x1C

	// Constructors
	private RemotingServices(); // 0x002A5AA0
	private static RemotingServices(); // 0x002A5AA8

	// Methods
	internal static object InternalExecute(MethodBase method, object obj, object[] parameters, out object[] out_args); // 0x002A5EE0
	internal static MethodBase GetVirtualMethod(Type type, MethodBase method); // 0x002A5EE4
	public static bool IsTransparentProxy(object proxy); // 0x0028FA60
	internal static IMethodReturnMessage InternalExecuteMessage(MarshalByRefObject target, IMethodCallMessage reqMsg); // 0x00290384
	public static IMethodReturnMessage ExecuteMessage(MarshalByRefObject target, IMethodCallMessage reqMsg); // 0x002A5EE8
	public static object Connect(Type classToProxy, string url); // 0x002A6048
	public static object Connect(Type classToProxy, string url, object data); // 0x002A61A0
	public static bool Disconnect(MarshalByRefObject obj); // 0x002A625C
	public static Type GetServerTypeForUri(string URI); // 0x002A68AC
	public static string GetObjectUri(MarshalByRefObject obj); // 0x0029A948
	public static object Unmarshal(ObjRef objectRef); // 0x0029B8EC
	public static object Unmarshal(ObjRef objectRef, bool fRefine); // 0x002A6A80
	public static ObjRef Marshal(MarshalByRefObject Obj); // 0x002A712C
	public static ObjRef Marshal(MarshalByRefObject Obj, string URI); // 0x002A71B4
	public static ObjRef Marshal(MarshalByRefObject Obj, string ObjURI, Type RequestedType); // 0x0029D1AC
	private static string NewUri(); // 0x002A7240
	public static RealProxy GetRealProxy(object proxy); // 0x0028FA64
	public static MethodBase GetMethodBaseFromMethodMessage(IMethodMessage msg); // 0x002A7EFC
	internal static MethodBase GetMethodBaseFromName(Type type, string methodName, Type[] signature); // 0x002A82D4
	private static MethodBase FindInterfaceMethod(Type type, string methodName, Type[] signature); // 0x002A86C0
	public static void GetObjectData(object obj, SerializationInfo info, StreamingContext context); // 0x0029D824
	public static ObjRef GetObjRefForProxy(MarshalByRefObject obj); // 0x002A88B8
	public static object GetLifetimeService(MarshalByRefObject obj); // 0x002A895C
	public static IMessageSink GetEnvoyChainForProxy(MarshalByRefObject obj); // 0x002A8970
	public static void LogRemotingStage(int stage); // 0x002A8B40
	public static string GetSessionIdForMethodMessage(IMethodMessage msg); // 0x002A8BC8
	public static bool IsMethodOverloaded(IMethodMessage msg); // 0x002A8C9C
	public static bool IsObjectOutOfAppDomain(object tp); // 0x002A8ED0
	public static bool IsObjectOutOfContext(object tp); // 0x002A8FE8
	public static bool IsOneWay(MethodBase method); // 0x002A915C
	internal static bool IsAsyncMessage(IMessage msg); // 0x002A9220
	public static void SetObjectUriForMarshal(MarshalByRefObject obj, string uri); // 0x002A9394
	internal static object CreateClientProxy(ActivatedClientTypeEntry entry, object[] activationAttributes); // 0x002A956C
	internal static object CreateClientProxy(Type objectType, string url, object[] activationAttributes); // 0x002A979C
	internal static object CreateClientProxy(WellKnownClientTypeEntry entry); // 0x002A9B10
	internal static object CreateClientProxyForContextBound(Type type, object[] activationAttributes); // 0x002A9BC4
	internal static Identity GetIdentityForUri(string uri); // 0x0029BA0C
	private static string RemoveAppNameFromUri(string uri); // 0x002A9E38
	internal static Identity GetObjectIdentity(MarshalByRefObject obj); // 0x002A6990
	internal static ClientIdentity GetOrCreateClientIdentity(ObjRef objRef, Type proxyType, out object clientProxy); // 0x002A9FE8
	private static IMessageSink GetClientChannelSinkChain(string url, object channelData, out string objectUri); // 0x002A996C
	internal static ClientActivatedIdentity CreateContextBoundObjectIdentity(Type objectType); // 0x002AA588
	internal static ClientActivatedIdentity CreateClientActivatedServerIdentity(MarshalByRefObject realObject, Type objectType, string objectUri); // 0x002A7D6C
	internal static ServerIdentity CreateWellKnownServerIdentity(Type objectType, string objectUri, WellKnownObjectMode mode); // 0x002A3BD8
	private static void RegisterServerIdentity(ServerIdentity identity); // 0x002A7578
	internal static object GetProxyForRemoteObject(ObjRef objref, Type classToProxy); // 0x0029CC58
	internal static object GetRemoteObject(ObjRef objRef, Type proxyType); // 0x002A6100
	internal static object GetServerObject(string uri); // 0x002AA86C
	internal static byte[] SerializeCallData(object obj); // 0x002AA9D0
	internal static object DeserializeCallData(byte[] array); // 0x002AAB48
	internal static byte[] SerializeExceptionData(Exception ex); // 0x002AACB8
	internal static object GetDomainProxy(AppDomain domain); // 0x002AB098
	private static void RegisterInternalChannels(); // 0x002A5E64
	internal static void DisposeIdentity(Identity ident); // 0x002A0C34
	internal static Identity GetMessageTargetIdentity(IMessage msg); // 0x0028F338
	internal static void SetMessageTargetIdentity(IMessage msg, Identity ident); // 0x002AB38C
	internal static bool UpdateOutArgObject(ParameterInfo pi, object local, object remote); // 0x0029F78C
	private static string GetNormalizedUri(string uri); // 0x002A9D94
}

// Namespace: 
[Serializable]
private class CACD // TypeDefIndex: 1113
{
	// Fields
	public object d; // 0x08
	public object c; // 0x0C

	// Constructors
	public CACD(); // 0x002AAB40

}

// Namespace: System.Runtime.Remoting
[Serializable]
public class RemotingTimeoutException : RemotingException // TypeDefIndex: 1114
{
	// Constructors
	public RemotingTimeoutException(); // 0x002AB508
	public RemotingTimeoutException(string message); // 0x002AB510
	public RemotingTimeoutException(string message, Exception InnerException); // 0x002AB518
	internal RemotingTimeoutException(SerializationInfo info, StreamingContext context); // 0x002AB520

}

// Namespace: System.Runtime.Remoting
[Serializable]
public class ServerException : SystemException // TypeDefIndex: 1115
{
	// Constructors
	public ServerException(); // 0x002AB540
	public ServerException(string message); // 0x002AB548
	public ServerException(string message, Exception InnerException); // 0x002AB550
	internal ServerException(SerializationInfo info, StreamingContext context); // 0x002AB558

}

// Namespace: System.Runtime.Remoting
internal abstract class ServerIdentity : Identity // TypeDefIndex: 1116
{
	// Fields
	protected Type _objectType; // 0x24
	protected MarshalByRefObject _serverObject; // 0x28
	protected IMessageSink _serverSink; // 0x2C
	protected Context _context; // 0x30
	protected Lease _lease; // 0x34

	// Properties
	public Type ObjectType { get; } // 0x002AB5A0 
	public Lease Lease { get; } // 0x002AB7F0 
	public Context Context { get; set; } // 0x002AB7F8 0x002AB800

	// Constructors
	public ServerIdentity(string objectUri, Context context, Type objectType); // 0x002AB578

	// Methods
	public void StartTrackingLifetime(ILease lease); // 0x002A7828
	public virtual void OnLifetimeExpired(); // 0x002AB5A8
	public override ObjRef CreateObjRef(Type requestedType); // 0x002AB648
	public void AttachServerObject(MarshalByRefObject serverObject, Context context); // 0x002AA6BC
	public abstract IMessage SyncObjectProcessMessage(IMessage msg);
	public abstract IMessageCtrl AsyncObjectProcessMessage(IMessage msg, IMessageSink replySink);
	protected void DisposeServerObject(); // 0x002AB5AC
}

// Namespace: System.Runtime.Remoting
internal class ClientActivatedIdentity : ServerIdentity // TypeDefIndex: 1117
{
	// Fields
	private MarshalByRefObject _targetThis; // 0x38

	// Constructors
	public ClientActivatedIdentity(string objectUri, Type objectType); // 0x002D36DC

	// Methods
	public MarshalByRefObject GetServerObject(); // 0x002D3704
	public MarshalByRefObject GetClientProxy(); // 0x002D370C
	public void SetClientProxy(MarshalByRefObject obj); // 0x002D3714
	public override void OnLifetimeExpired(); // 0x002D371C
	public override IMessage SyncObjectProcessMessage(IMessage msg); // 0x002D37AC
	public override IMessageCtrl AsyncObjectProcessMessage(IMessage msg, IMessageSink replySink); // 0x002D38EC
}

// Namespace: System.Runtime.Remoting
internal class SingletonIdentity : ServerIdentity // TypeDefIndex: 1118
{
	// Constructors
	public SingletonIdentity(string objectUri, Context context, Type objectType); // 0x002AA844

	// Methods
	public MarshalByRefObject GetServerObject(); // 0x002AC6EC
	public override IMessage SyncObjectProcessMessage(IMessage msg); // 0x002AC8DC
	public override IMessageCtrl AsyncObjectProcessMessage(IMessage msg, IMessageSink replySink); // 0x002ACA0C
}

// Namespace: System.Runtime.Remoting
internal class SingleCallIdentity : ServerIdentity // TypeDefIndex: 1119
{
	// Constructors
	public SingleCallIdentity(string objectUri, Context context, Type objectType); // 0x002AA81C

	// Methods
	public override IMessage SyncObjectProcessMessage(IMessage msg); // 0x002AC25C
	public override IMessageCtrl AsyncObjectProcessMessage(IMessage msg, IMessageSink replySink); // 0x002AC4DC
}

// Namespace: System.Runtime.Remoting
internal class DisposerReplySink : IMessageSink // TypeDefIndex: 1120
{
	// Fields
	private IMessageSink _next; // 0x08
	private IDisposable _disposable; // 0x0C

	// Properties
	public IMessageSink NextSink { get; } // 0x003045C8 

	// Constructors
	public DisposerReplySink(IMessageSink next, IDisposable disposable); // 0x003043AC

	// Methods
	public IMessage SyncProcessMessage(IMessage msg); // 0x003043D4
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x00304540
}

// Namespace: System.Runtime.Remoting
public class SoapServices // TypeDefIndex: 1121
{
	// Fields
	private static Hashtable _xmlTypes; // 0x00
	private static Hashtable _xmlElements; // 0x04
	private static Hashtable _soapActions; // 0x08
	private static Hashtable _soapActionsMethods; // 0x0C
	private static Hashtable _typeInfos; // 0x10

	// Properties
	public static string XmlNsForClrType { get; } // 0x002ACC54 
	public static string XmlNsForClrTypeWithAssembly { get; } // 0x002ACCB0 
	public static string XmlNsForClrTypeWithNs { get; } // 0x002ACD0C 
	public static string XmlNsForClrTypeWithNsAndAssembly { get; } // 0x002ACD68 

	// Constructors
	private SoapServices(); // 0x002ACB4C
	private static SoapServices(); // 0x002ACB54

	// Methods
	public static string CodeXmlNamespaceForClrTypeNamespace(string typeNamespace, string assemblyName); // 0x00291EC0
	public static bool DecodeXmlNamespaceForClrTypeNamespace(string inNamespace, out string typeNamespace, out string assemblyName); // 0x002ACECC
	public static void GetInteropFieldTypeAndNameFromXmlAttribute(Type containingType, string xmlAttribute, string xmlNamespace, out Type type, out string name); // 0x002AD4CC
	public static void GetInteropFieldTypeAndNameFromXmlElement(Type containingType, string xmlElement, string xmlNamespace, out Type type, out string name); // 0x002AD768
	private static void GetInteropFieldInfo(Hashtable fields, string xmlName, string xmlNamespace, out Type type, out string name); // 0x002AD630
	private static string GetNameKey(string name, string namspace); // 0x002AD8CC
	public static Type GetInteropTypeFromXmlElement(string xmlElement, string xmlNamespace); // 0x002AD978
	public static Type GetInteropTypeFromXmlType(string xmlType, string xmlTypeNamespace); // 0x002ADBB0
	private static string GetAssemblyName(MethodBase mb); // 0x002ADDE8
	public static string GetSoapActionFromMethodBase(MethodBase mb); // 0x002ADFC0
	public static bool GetTypeAndMethodNameFromSoapAction(string soapAction, out string typeName, out string methodName); // 0x002AE344
	public static bool GetXmlElementForInteropType(Type type, out string xmlElement, out string xmlNamespace); // 0x002AE7CC
	public static string GetXmlNamespaceForMethodCall(MethodBase mb); // 0x00291A70
	public static string GetXmlNamespaceForMethodResponse(MethodBase mb); // 0x00291994
	public static bool GetXmlTypeForInteropType(Type type, out string xmlType, out string xmlTypeNamespace); // 0x002AE8BC
	public static bool IsClrTypeNamespace(string namespaceString); // 0x002AE9B4
	public static bool IsSoapActionValidForMethodBase(string soapAction, MethodBase mb); // 0x002AEA98
	public static void PreLoad(Assembly assembly); // 0x002AEC34
	public static void PreLoad(Type type); // 0x002AED24
	public static void RegisterInteropXmlElement(string xmlElement, string xmlNamespace, Type type); // 0x002AF57C
	public static void RegisterInteropXmlType(string xmlType, string xmlTypeNamespace, Type type); // 0x002AF398
	public static void RegisterSoapActionForMethodBase(MethodBase mb); // 0x002AF768
	private static string InternalGetSoapAction(MethodBase mb); // 0x002AE040
	public static void RegisterSoapActionForMethodBase(MethodBase mb, string soapAction); // 0x002AF7E8
	private static string EncodeNs(string ns); // 0x002ACDC4
	private static string DecodeNs(string ns); // 0x002AD3C4
}

// Namespace: 
private class TypeInfo // TypeDefIndex: 1122
{
	// Fields
	public Hashtable Attributes; // 0x08
	public Hashtable Elements; // 0x0C

	// Constructors
	public TypeInfo(); // 0x002AF760

}

// Namespace: System.Runtime.Remoting
public class TypeEntry // TypeDefIndex: 1123
{
	// Fields
	private string assembly_name; // 0x08
	private string type_name; // 0x0C

	// Properties
	public string AssemblyName { get; set; } // 0x002AF9C4 0x002AF9CC
	public string TypeName { get; set; } // 0x002AF9D4 0x002AF9DC

	// Constructors
	protected TypeEntry(); // 0x002AF9BC

}

// Namespace: System.Runtime.Remoting
[Serializable]
internal class TypeInfo : IRemotingTypeInfo // TypeDefIndex: 1124
{
	// Fields
	private string serverType; // 0x08
	private string[] serverHierarchy; // 0x0C
	private string[] interfacesImplemented; // 0x10

	// Properties
	public string TypeName { get; set; } // 0x002AF9E4 0x002AF9EC

	// Constructors
	public TypeInfo(Type type); // 0x0029A0BC

	// Methods
	public bool CanCastTo(Type fromType, object o); // 0x002AF9F4
}

// Namespace: System.Runtime.Remoting
public class WellKnownClientTypeEntry : TypeEntry // TypeDefIndex: 1125
{
	// Fields
	private Type obj_type; // 0x10
	private string obj_url; // 0x14
	private string app_url; // 0x18

	// Properties
	public string ApplicationUrl { get; set; } // 0x002AFF58 0x002AFF60
	public Type ObjectType { get; } // 0x002AFF68 
	public string ObjectUrl { get; } // 0x002AFF70 

	// Constructors
	public WellKnownClientTypeEntry(Type type, string objectUrl); // 0x002A34C4
	public WellKnownClientTypeEntry(string typeName, string assemblyName, string objectUrl); // 0x002AFDF4

	// Methods
	public override string ToString(); // 0x002AFF78
}

// Namespace: System.Runtime.Remoting
[Serializable]
public enum WellKnownObjectMode // TypeDefIndex: 1126
{
	Singleton = 1,
	SingleCall = 2
}

// Namespace: System.Runtime.Remoting
public class WellKnownServiceTypeEntry : TypeEntry // TypeDefIndex: 1127
{
	// Fields
	private Type obj_type; // 0x10
	private string obj_uri; // 0x14
	private WellKnownObjectMode obj_mode; // 0x18

	// Properties
	public IContextAttribute[] ContextAttributes { get; set; } // 0x002B01CC 0x002B01D4
	public WellKnownObjectMode Mode { get; } // 0x002B01D8 
	public Type ObjectType { get; } // 0x002B01E0 
	public string ObjectUri { get; } // 0x002B01E8 

	// Constructors
	public WellKnownServiceTypeEntry(Type type, string objectUri, WellKnownObjectMode mode); // 0x002A3978
	public WellKnownServiceTypeEntry(string typeName, string assemblyName, string objectUri, WellKnownObjectMode mode); // 0x002B0064

	// Methods
	public override string ToString(); // 0x002B01F0
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class BinaryCommon // TypeDefIndex: 1128
{
	// Fields
	public static byte[] BinaryHeader; // 0x00
	private static Type[] _typeCodesToType; // 0x04
	private static byte[] _typeCodeMap; // 0x08
	public static bool UseReflectionSerialization; // 0x0C

	// Constructors
	public BinaryCommon(); // 0x002B379C
	private static BinaryCommon(); // 0x002B37A4

	// Methods
	public static bool IsPrimitive(Type type); // 0x002B4744
	public static byte GetTypeCode(Type type); // 0x002B4904
	public static Type GetTypeFromCode(int code); // 0x002B4A5C
	public static void CheckSerializable(Type type, ISurrogateSelector selector, StreamingContext context); // 0x002B4B20
	public static void SwapBytes(byte[] byteArray, int size, int dataSize); // 0x002B4D10
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal enum BinaryElement : byte // TypeDefIndex: 1129
{
	Header = 0,
	RefTypeObject = 1,
	UntypedRuntimeObject = 2,
	UntypedExternalObject = 3,
	RuntimeObject = 4,
	ExternalObject = 5,
	String = 6,
	GenericArray = 7,
	BoxedPrimitiveTypeValue = 8,
	ObjectReference = 9,
	NullValue = 10,
	End = 11,
	Assembly = 12,
	ArrayFiller8b = 13,
	ArrayFiller32b = 14,
	ArrayOfPrimitiveType = 15,
	ArrayOfObject = 16,
	ArrayOfString = 17,
	Method = 18,
	_Unknown4 = 19,
	_Unknown5 = 20,
	MethodCall = 21,
	MethodResponse = 22
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal enum TypeTag : byte // TypeDefIndex: 1130
{
	PrimitiveType = 0,
	String = 1,
	ObjectType = 2,
	RuntimeType = 3,
	GenericType = 4,
	ArrayOfObject = 5,
	ArrayOfString = 6,
	ArrayOfPrimitiveType = 7
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal enum ArrayStructure : byte // TypeDefIndex: 1131
{
	SingleDimensional = 0,
	Jagged = 1,
	MultiDimensional = 2
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal enum MethodFlags // TypeDefIndex: 1132
{
	NoArguments = 1,
	PrimitiveArguments = 2,
	ArgumentsInSimpleArray = 4,
	ArgumentsInMultiArray = 8,
	FormatMask = 15,
	ExcludeLogicalCallContext = 16,
	IncludesLogicalCallContext = 64,
	IncludesSignature = 128,
	GenericArguments = 32768,
	NeedsInfoArrayMask = 32972
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal enum ReturnTypeTag : byte // TypeDefIndex: 1133
{
	Null = 2,
	PrimitiveType = 8,
	ObjectType = 16,
	Exception = 32
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal enum BinaryTypeCode : byte // TypeDefIndex: 1134
{
	Boolean = 1,
	Byte = 2,
	Char = 3,
	Decimal = 5,
	Double = 6,
	Int16 = 7,
	Int32 = 8,
	Int64 = 9,
	SByte = 10,
	Single = 11,
	TimeSpan = 12,
	DateTime = 13,
	UInt16 = 14,
	UInt32 = 15,
	UInt64 = 16,
	Null = 17,
	String = 18
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
public sealed class BinaryFormatter : IRemotingFormatter, IFormatter // TypeDefIndex: 1135
{
	// Fields
	private FormatterAssemblyStyle assembly_format; // 0x08
	private SerializationBinder binder; // 0x0C
	private StreamingContext context; // 0x10
	private ISurrogateSelector surrogate_selector; // 0x18
	private FormatterTypeStyle type_format; // 0x1C
	private TypeFilterLevel filter_level; // 0x20
	private static ISurrogateSelector <DefaultSurrogateSelector>k__BackingField; // 0x00

	// Properties
	public static ISurrogateSelector DefaultSurrogateSelector { get; set; } // 0x001F0738 0x001F079C
	public FormatterAssemblyStyle AssemblyFormat { get; set; } // 0x001F0800 0x001F0808
	public SerializationBinder Binder { get; set; } // 0x001F0810 0x001F0818
	public StreamingContext Context { get; set; } // 0x001F0820 0x001F0834
	public ISurrogateSelector SurrogateSelector { get; set; } // 0x001F0840 0x001F0848
	public FormatterTypeStyle TypeFormat { get; set; } // 0x001F0850 0x001F0858
	public TypeFilterLevel FilterLevel { get; set; } // 0x001F0860 0x001F0868

	// Constructors
	public BinaryFormatter(); // 0x001F065C
	public BinaryFormatter(ISurrogateSelector selector, StreamingContext context); // 0x001F06F4

	// Methods
	public object Deserialize(Stream serializationStream); // 0x001F0870
	public object Deserialize(Stream serializationStream, HeaderHandler handler); // 0x001F0AE0
	private object NoCheckDeserialize(Stream serializationStream, HeaderHandler handler); // 0x001F0878
	public object DeserializeMethodResponse(Stream serializationStream, HeaderHandler handler, IMethodCallMessage methodCallMessage); // 0x001F26D8
	private object NoCheckDeserializeMethodResponse(Stream serializationStream, HeaderHandler handler, IMethodCallMessage methodCallMessage); // 0x001F26F0
	public void Serialize(Stream serializationStream, object graph); // 0x001F28DC
	public void Serialize(Stream serializationStream, object graph, Header[] headers); // 0x001F28F8
	public object UnsafeDeserialize(Stream serializationStream, HeaderHandler handler); // 0x001F543C
	public object UnsafeDeserializeMethodResponse(Stream serializationStream, HeaderHandler handler, IMethodCallMessage methodCallMessage); // 0x001F5440
	private void WriteBinaryHeader(BinaryWriter writer, bool hasHeaders); // 0x001F2B0C
	private void ReadBinaryHeader(BinaryReader reader, out bool hasHeaders); // 0x001F0AEC
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class CodeGenerator // TypeDefIndex: 1136
{
	// Fields
	private static object monitor; // 0x00
	private static ModuleBuilder _module; // 0x04

	// Constructors
	public CodeGenerator(); // 0x001F5500
	private static CodeGenerator(); // 0x001F5508

	// Methods
	public static Type GenerateMetadataType(Type type, StreamingContext context); // 0x001F5674
	public static Type GenerateMetadataTypeInternal(Type type, StreamingContext context); // 0x001F57B4
	public static void LoadFromPtr(ILGenerator ig, Type t); // 0x001F8A9C
	private static void EmitWriteTypeSpec(ILGenerator gen, Type type, string member); // 0x001F8328
	private static void EmitLoadTypeAssembly(ILGenerator gen, Type type, string member); // 0x001F7B24
	private static void EmitWrite(ILGenerator gen, Type type); // 0x001F7D68
	public static void EmitWritePrimitiveValue(ILGenerator gen, Type type); // 0x001F9624
	public static Type EnumToUnderlying(Type t); // 0x001F9D48
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class MessageFormatter // TypeDefIndex: 1137
{
	// Constructors
	public MessageFormatter(); // 0x001FAFC4

	// Methods
	public static void WriteMethodCall(BinaryWriter writer, object obj, Header[] headers, ISurrogateSelector surrogateSelector, StreamingContext context, FormatterAssemblyStyle assemblyFormat, FormatterTypeStyle typeFormat); // 0x001F2BE4
	public static void WriteMethodResponse(BinaryWriter writer, object obj, Header[] headers, ISurrogateSelector surrogateSelector, StreamingContext context, FormatterAssemblyStyle assemblyFormat, FormatterTypeStyle typeFormat); // 0x001F3E08
	public static object ReadMethodCall(BinaryReader reader, bool hasHeaders, HeaderHandler headerHandler, BinaryFormatter formatter); // 0x001FBF28
	public static object ReadMethodCall(BinaryElement elem, BinaryReader reader, bool hasHeaders, HeaderHandler headerHandler, BinaryFormatter formatter); // 0x001F0BE4
	public static object ReadMethodResponse(BinaryReader reader, bool hasHeaders, HeaderHandler headerHandler, IMethodCallMessage methodCallMessage, BinaryFormatter formatter); // 0x001F287C
	public static object ReadMethodResponse(BinaryElement elem, BinaryReader reader, bool hasHeaders, HeaderHandler headerHandler, IMethodCallMessage methodCallMessage, BinaryFormatter formatter); // 0x001F18E4
	private static bool AllTypesArePrimitive(object[] objects); // 0x001FB434
	public static bool IsMethodPrimitive(Type type); // 0x001FBDBC
	private static object[] GetExtraProperties(IDictionary properties, string[] internalKeys); // 0x001FAFCC
	private static bool IsInternalKey(string key, string[] internalKeys); // 0x001FC61C
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class ObjectReader // TypeDefIndex: 1138
{
	// Fields
	private ISurrogateSelector _surrogateSelector; // 0x08
	private StreamingContext _context; // 0x0C
	private SerializationBinder _binder; // 0x14
	private TypeFilterLevel _filterLevel; // 0x18
	private ObjectManager _manager; // 0x1C
	private Hashtable _registeredAssemblies; // 0x20
	private Hashtable _typeMetadataCache; // 0x24
	private object _lastObject; // 0x28
	private long _lastObjectID; // 0x30
	private long _rootObjectID; // 0x38
	private byte[] arrayBuffer; // 0x40
	private int ArrayBufferLength; // 0x44

	// Properties
	public object CurrentObject { get; } // 0x001FCF2C 

	// Constructors
	public ObjectReader(BinaryFormatter formatter); // 0x001F23E0

	// Methods
	public void ReadObjectGraph(BinaryReader reader, bool readHeaders, out object result, out Header[] headers); // 0x001FC5B8
	public void ReadObjectGraph(BinaryElement elem, BinaryReader reader, bool readHeaders, out object result, out Header[] headers); // 0x001F2530
	private bool ReadNextObject(BinaryElement element, BinaryReader reader); // 0x001FC7D0
	public bool ReadNextObject(BinaryReader reader); // 0x001FC8C0
	private void ReadObject(BinaryElement element, BinaryReader reader, out long objectId, out object value, out SerializationInfo info); // 0x001FC9E0
	private void ReadAssembly(BinaryReader reader); // 0x001FD628
	private void ReadObjectInstance(BinaryReader reader, bool isRuntimeObject, bool hasTypeInfo, out long objectId, out object value, out SerializationInfo info); // 0x001FD124
	private void ReadRefTypeObjectInstance(BinaryReader reader, out long objectId, out object value, out SerializationInfo info); // 0x001FCF34
	private void ReadObjectContent(BinaryReader reader, TypeMetadata metadata, long objectId, out object objectInstance, out SerializationInfo info); // 0x001FF01C
	private void RegisterObject(long objectId, object objectInstance, SerializationInfo info, long parentObjectId, MemberInfo parentObjectMemeber, int[] indices); // 0x001FCD8C
	private void ReadStringIntance(BinaryReader reader, out long objectId, out object value); // 0x001FD1B0
	private void ReadGenericArray(BinaryReader reader, out long objectId, out object val); // 0x001FD21C
	private object ReadBoxedPrimitiveTypeValue(BinaryReader reader); // 0x001FD604
	private void ReadArrayOfPrimitiveType(BinaryReader reader, out long objectId, out object val); // 0x001FD748
	private void BlockRead(BinaryReader reader, Array array, int dataSize); // 0x00200064
	private void ReadArrayOfObject(BinaryReader reader, out long objectId, out object array); // 0x001FE380
	private void ReadArrayOfString(BinaryReader reader, out long objectId, out object array); // 0x001FE440
	private void ReadSimpleArray(BinaryReader reader, Type elementType, out long objectId, out object val); // 0x002002B4
	private TypeMetadata ReadTypeMetadata(BinaryReader reader, bool isRuntimeObject, bool hasTypeInfo); // 0x001FE500
	private void ReadValue(BinaryReader reader, object parentObject, long parentObjectId, SerializationInfo info, Type valueType, string fieldName, MemberInfo memberInfo, int[] indices); // 0x001FF614
	private void SetObjectValue(object parentObject, string fieldName, MemberInfo memberInfo, SerializationInfo info, object value, Type valueType, int[] indices); // 0x00200638
	private void RecordFixup(long parentObjectId, long childObjectId, object parentObject, SerializationInfo info, string fieldName, MemberInfo memberInfo, int[] indices); // 0x00200A08
	private Type GetDeserializationType(long assemblyId, string className); // 0x00200444
	public Type ReadType(BinaryReader reader, TypeTag code); // 0x001FFAE0
	public static object ReadPrimitiveTypeValue(BinaryReader reader, Type type); // 0x001FBF84
}

// Namespace: 
private class TypeMetadata // TypeDefIndex: 1139
{
	// Fields
	public Type Type; // 0x08
	public Type[] MemberTypes; // 0x0C
	public string[] MemberNames; // 0x10
	public MemberInfo[] MemberInfos; // 0x14
	public int FieldCount; // 0x18
	public bool NeedsSerializationInfo; // 0x1C

	// Constructors
	public TypeMetadata(); // 0x0020043C

}

// Namespace: 
private class ArrayNullFiller // TypeDefIndex: 1140
{
	// Fields
	public int NullCount; // 0x08

	// Constructors
	public ArrayNullFiller(int count); // 0x001FD728

}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal abstract class TypeMetadata // TypeDefIndex: 1141
{
	// Fields
	public string TypeAssemblyName; // 0x08
	public string InstanceTypeName; // 0x0C

	// Properties
	public abstract bool RequiresTypes { get; }

	// Constructors
	protected TypeMetadata(); // 0x001F54F0

	// Methods
	public abstract void WriteAssemblies(ObjectWriter ow, BinaryWriter writer);
	public abstract void WriteTypeData(ObjectWriter ow, BinaryWriter writer, bool writeTypes);
	public abstract void WriteObjectData(ObjectWriter ow, BinaryWriter writer, object data);
	public virtual bool IsCompatible(TypeMetadata other); // 0x002054B0
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal abstract class ClrTypeMetadata : TypeMetadata // TypeDefIndex: 1142
{
	// Fields
	public Type InstanceType; // 0x10

	// Properties
	public override bool RequiresTypes { get; } // 0x001F54F8 

	// Constructors
	public ClrTypeMetadata(Type instanceType); // 0x001F5458

}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class SerializableTypeMetadata : TypeMetadata // TypeDefIndex: 1143
{
	// Fields
	private Type[] types; // 0x10
	private string[] names; // 0x14

	// Properties
	public override bool RequiresTypes { get; } // 0x002054A8 

	// Constructors
	public SerializableTypeMetadata(Type itype, SerializationInfo info); // 0x0020251C

	// Methods
	public override bool IsCompatible(TypeMetadata other); // 0x00204DA0
	public override void WriteAssemblies(ObjectWriter ow, BinaryWriter writer); // 0x00205074
	public override void WriteTypeData(ObjectWriter ow, BinaryWriter writer, bool writeTypes); // 0x00205168
	public override void WriteObjectData(ObjectWriter ow, BinaryWriter writer, object data); // 0x00205358
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class MemberTypeMetadata : ClrTypeMetadata // TypeDefIndex: 1144
{
	// Fields
	private MemberInfo[] members; // 0x14

	// Constructors
	public MemberTypeMetadata(Type type, StreamingContext context); // 0x001FA1D0

	// Methods
	public override void WriteAssemblies(ObjectWriter ow, BinaryWriter writer); // 0x001FA208
	public override void WriteTypeData(ObjectWriter ow, BinaryWriter writer, bool writeTypes); // 0x001FA3EC
	public override void WriteObjectData(ObjectWriter ow, BinaryWriter writer, object data); // 0x001FAAC4
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class ObjectWriter // TypeDefIndex: 1145
{
	// Fields
	private ObjectIDGenerator _idGenerator; // 0x08
	private Hashtable _cachedMetadata; // 0x0C
	private Queue _pendingObjects; // 0x10
	private Hashtable _assemblyCache; // 0x14
	private static Hashtable _cachedTypes; // 0x00
	internal static Assembly CorlibAssembly; // 0x04
	internal static string CorlibAssemblyName; // 0x08
	private ISurrogateSelector _surrogateSelector; // 0x18
	private StreamingContext _context; // 0x1C
	private FormatterAssemblyStyle _assemblyFormat; // 0x24
	private FormatterTypeStyle _typeFormat; // 0x28
	private byte[] arrayBuffer; // 0x2C
	private int ArrayBufferLength; // 0x30
	private SerializationObjectManager _manager; // 0x34

	// Constructors
	public ObjectWriter(ISurrogateSelector surrogateSelector, StreamingContext context, FormatterAssemblyStyle assemblyFormat, FormatterTypeStyle typeFormat); // 0x001F51A8
	private static ObjectWriter(); // 0x00200F74

	// Methods
	public void WriteObjectGraph(BinaryWriter writer, object obj, Header[] headers); // 0x001F52E0
	public void QueueObject(object obj); // 0x002010FC
	public void WriteQueuedObjects(BinaryWriter writer); // 0x00201138
	public void WriteObjectInstance(BinaryWriter writer, object obj, bool isValueObject); // 0x0020121C
	public static void WriteSerializationEnd(BinaryWriter writer); // 0x002011C4
	private void WriteObject(BinaryWriter writer, long id, object obj); // 0x0020169C
	private void GetObjectData(object obj, out TypeMetadata metadata, out object data); // 0x00201A80
	private TypeMetadata CreateMemberTypeMetadata(Type type); // 0x00202A74
	private void WriteArray(BinaryWriter writer, long id, Array array); // 0x0020142C
	private void WriteGenericArray(BinaryWriter writer, long id, Array array); // 0x00203D00
	private void WriteObjectArray(BinaryWriter writer, long id, Array array); // 0x00202BEC
	private void WriteStringArray(BinaryWriter writer, long id, Array array); // 0x00202D2C
	private void WritePrimitiveTypeArray(BinaryWriter writer, long id, Array array); // 0x00202E6C
	private void BlockWrite(BinaryWriter writer, Array array, int dataSize); // 0x00204580
	private void WriteSingleDimensionArrayElements(BinaryWriter writer, Array array, Type elementType); // 0x0020425C
	private void WriteNullFiller(BinaryWriter writer, int numNulls); // 0x002047B4
	private void WriteObjectReference(BinaryWriter writer, long id); // 0x00204898
	public void WriteValue(BinaryWriter writer, Type valueType, object val); // 0x001FACA8
	private void WriteString(BinaryWriter writer, long id, string str); // 0x00201388
	public int WriteAssembly(BinaryWriter writer, Assembly assembly); // 0x001FA3A0
	public int WriteAssemblyName(BinaryWriter writer, string assembly); // 0x00202334
	public int GetAssemblyId(Assembly assembly); // 0x00204AC4
	public int GetAssemblyNameId(string assembly); // 0x00204B08
	private int RegisterAssembly(string assembly, out bool firstTime); // 0x002048FC
	public static void WritePrimitiveValue(BinaryWriter writer, object value); // 0x001FB4B4
	public static void WriteTypeCode(BinaryWriter writer, Type type); // 0x001FA6FC
	public static TypeTag GetTypeTag(Type type); // 0x001F7F40
	public void WriteTypeSpec(BinaryWriter writer, Type type); // 0x001FA7AC
}

// Namespace: 
private class MetadataReference // TypeDefIndex: 1146
{
	// Fields
	public TypeMetadata Metadata; // 0x08
	public long ObjectID; // 0x10

	// Constructors
	public MetadataReference(TypeMetadata metadata, long id); // 0x00202308

}

// Namespace: System.Runtime.Serialization.Formatters
[Serializable]
public enum FormatterAssemblyStyle // TypeDefIndex: 1147
{
	Simple = 0,
	Full = 1
}

// Namespace: System.Runtime.Serialization.Formatters
[Serializable]
public enum FormatterTypeStyle // TypeDefIndex: 1148
{
	TypesWhenNeeded = 0,
	TypesAlways = 1,
	XsdString = 2
}

// Namespace: System.Runtime.Serialization.Formatters
public interface IFieldInfo // TypeDefIndex: 1149
{
	// Properties
	string[] FieldNames { get; set; }
	Type[] FieldTypes { get; set; }

}

// Namespace: System.Runtime.Serialization.Formatters
public interface ISoapMessage // TypeDefIndex: 1150
{
	// Properties
	Header[] Headers { get; set; }
	string MethodName { get; set; }
	string[] ParamNames { get; set; }
	Type[] ParamTypes { get; set; }
	object[] ParamValues { get; set; }
	string XmlNameSpace { get; set; }

}

// Namespace: System.Runtime.Serialization.Formatters
public sealed class InternalRM // TypeDefIndex: 1151
{
	// Constructors
	public InternalRM(); // 0x002054B8

	// Methods
	public static void InfoSoap(object[] messages); // 0x002054C0
	public static bool SoapCheckEnabled(); // 0x00205548
}

// Namespace: System.Runtime.Serialization.Formatters
public sealed class InternalST // TypeDefIndex: 1152
{
	// Constructors
	private InternalST(); // 0x002055D0

	// Methods
	public static void InfoSoap(object[] messages); // 0x002055D8
	public static Assembly LoadAssemblyFromString(string assemblyString); // 0x00205660
	public static void SerializationSetValue(FieldInfo fi, object target, object value); // 0x002056E8
	public static void Soap(object[] messages); // 0x00205770
	public static void SoapAssert(bool condition, string message); // 0x002057F8
	public static bool SoapCheckEnabled(); // 0x00205880
}

// Namespace: System.Runtime.Serialization.Formatters
[Serializable]
public sealed class ServerFault // TypeDefIndex: 1153
{
	// Fields
	private string exceptionType; // 0x08
	private string message; // 0x0C
	private string stackTrace; // 0x10
	private Exception exception; // 0x14

	// Properties
	public string ExceptionType { get; set; } // 0x00205938 0x00205940
	public string ExceptionMessage { get; set; } // 0x00205948 0x00205950
	public string StackTrace { get; set; } // 0x00205958 0x00205960

	// Constructors
	public ServerFault(string exceptionType, string message, string stackTrace); // 0x00205908

}

// Namespace: System.Runtime.Serialization.Formatters
[Serializable]
public sealed class SoapFault : ISerializable // TypeDefIndex: 1154
{
	// Fields
	private string code; // 0x08
	private string actor; // 0x0C
	private string faultString; // 0x10
	private object detail; // 0x14

	// Properties
	public object Detail { get; set; } // 0x00205F50 0x00205F58
	public string FaultActor { get; set; } // 0x00205F60 0x00205F68
	public string FaultCode { get; set; } // 0x00205F70 0x00205F78
	public string FaultString { get; set; } // 0x00205F80 0x00205F88

	// Constructors
	public SoapFault(); // 0x00205968
	private SoapFault(SerializationInfo info, StreamingContext context); // 0x00205970
	public SoapFault(string faultCode, string faultString, string faultActor, ServerFault serverFault); // 0x00205F18

	// Methods
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00205F90
}

// Namespace: System.Runtime.Serialization.Formatters
[Serializable]
public class SoapMessage : ISoapMessage // TypeDefIndex: 1155
{
	// Fields
	private Header[] headers; // 0x08
	private string methodName; // 0x0C
	private string[] paramNames; // 0x10
	private Type[] paramTypes; // 0x14
	private object[] paramValues; // 0x18
	private string xmlNameSpace; // 0x1C

	// Properties
	public Header[] Headers { get; set; } // 0x00206110 0x00206118
	public string MethodName { get; set; } // 0x00206120 0x00206128
	public string[] ParamNames { get; set; } // 0x00206130 0x00206138
	public Type[] ParamTypes { get; set; } // 0x00206140 0x00206148
	public object[] ParamValues { get; set; } // 0x00206150 0x00206158
	public string XmlNameSpace { get; set; } // 0x00206160 0x00206168

	// Constructors
	public SoapMessage(); // 0x00206108

}

// Namespace: System.Runtime.Serialization.Formatters
public enum TypeFilterLevel // TypeDefIndex: 1156
{
	Low = 2,
	Full = 3
}

// Namespace: System.Runtime.Serialization
[Serializable]
public abstract class Formatter : IFormatter // TypeDefIndex: 1157
{
	// Fields
	protected ObjectIDGenerator m_idGenerator; // 0x08
	protected Queue m_objectQueue; // 0x0C

	// Properties
	public abstract SerializationBinder Binder { get; set; }
	public abstract StreamingContext Context { get; set; }
	public abstract ISurrogateSelector SurrogateSelector { get; set; }

	// Constructors
	protected Formatter(); // 0x002B09BC

	// Methods
	public abstract object Deserialize(Stream serializationStream);
	protected virtual object GetNext(out long objID); // 0x002B0A5C
	protected virtual long Schedule(object obj); // 0x002B0B28
	public abstract void Serialize(Stream serializationStream, object graph);
	protected abstract void WriteArray(object obj, string name, Type memberType);
	protected abstract void WriteBoolean(bool val, string name);
	protected abstract void WriteByte(byte val, string name);
	protected abstract void WriteChar(char val, string name);
	protected abstract void WriteDateTime(DateTime val, string name);
	protected abstract void WriteDecimal(Decimal val, string name);
	protected abstract void WriteDouble(double val, string name);
	protected abstract void WriteInt16(short val, string name);
	protected abstract void WriteInt32(int val, string name);
	protected abstract void WriteInt64(long val, string name);
	protected virtual void WriteMember(string memberName, object data); // 0x002B0BD8
	protected abstract void WriteObjectRef(object obj, string name, Type memberType);
	protected abstract void WriteSByte(sbyte val, string name);
	protected abstract void WriteSingle(float val, string name);
	protected abstract void WriteTimeSpan(TimeSpan val, string name);
	protected abstract void WriteUInt16(ushort val, string name);
	protected abstract void WriteUInt32(uint val, string name);
	protected abstract void WriteUInt64(ulong val, string name);
	protected abstract void WriteValueType(object obj, string name, Type memberType);
}

// Namespace: System.Runtime.Serialization
public class FormatterConverter : IFormatterConverter // TypeDefIndex: 1158
{
	// Constructors
	public FormatterConverter(); // 0x002B1728

	// Methods
	public object Convert(object value, Type type); // 0x002B1730
	public object Convert(object value, TypeCode typeCode); // 0x002B17BC
	public bool ToBoolean(object value); // 0x002B1848
	public byte ToByte(object value); // 0x002B192C
	public char ToChar(object value); // 0x002B1A10
	public DateTime ToDateTime(object value); // 0x002B1AF4
	public Decimal ToDecimal(object value); // 0x002B1BE0
	public double ToDouble(object value); // 0x002B1CCC
	public short ToInt16(object value); // 0x002B1DB0
	public int ToInt32(object value); // 0x002B1E94
	public long ToInt64(object value); // 0x002B1F78
	public float ToSingle(object value); // 0x002B205C
	public string ToString(object value); // 0x002B2140
	public sbyte ToSByte(object value); // 0x002B2224
	public ushort ToUInt16(object value); // 0x002B2308
	public uint ToUInt32(object value); // 0x002B23EC
	public ulong ToUInt64(object value); // 0x002B24D0
}

// Namespace: System.Runtime.Serialization
public sealed class FormatterServices // TypeDefIndex: 1159
{
	// Fields
	private const BindingFlags fieldFlags = 54; // 0x00

	// Constructors
	private FormatterServices(); // 0x002B25B4

	// Methods
	public static object[] GetObjectData(object obj, MemberInfo[] members); // 0x002B25BC
	public static MemberInfo[] GetSerializableMembers(Type type); // 0x002B2964
	public static MemberInfo[] GetSerializableMembers(Type type, StreamingContext context); // 0x002B29A0
	private static void GetFields(Type reflectedType, Type type, ArrayList fields); // 0x002B2BEC
	public static Type GetTypeFromAssembly(Assembly assem, string name); // 0x002B2E2C
	public static object GetUninitializedObject(Type type); // 0x002B2F40
	public static object PopulateObjectMembers(object obj, MemberInfo[] members, object[] data); // 0x002B308C
	public static void CheckTypeSecurity(Type t, TypeFilterLevel securityLevel); // 0x002B3490
	private static void CheckNotAssignable(Type basetype, Type type); // 0x002B3598
	public static object GetSafeUninitializedObject(Type type); // 0x002B3798
}

// Namespace: System.Runtime.Serialization
public interface IDeserializationCallback // TypeDefIndex: 1160
{
	// Methods
	void OnDeserialization(object sender);
}

// Namespace: System.Runtime.Serialization
public interface IFormatter // TypeDefIndex: 1161
{
	// Properties
	SerializationBinder Binder { get; set; }
	StreamingContext Context { get; set; }
	ISurrogateSelector SurrogateSelector { get; set; }

	// Methods
	object Deserialize(Stream serializationStream);
	void Serialize(Stream serializationStream, object graph);
}

// Namespace: System.Runtime.Serialization
public interface IFormatterConverter // TypeDefIndex: 1162
{
	// Methods
	object Convert(object value, Type type);
	object Convert(object value, TypeCode typeCode);
	bool ToBoolean(object value);
	byte ToByte(object value);
	char ToChar(object value);
	DateTime ToDateTime(object value);
	Decimal ToDecimal(object value);
	double ToDouble(object value);
	short ToInt16(object value);
	int ToInt32(object value);
	long ToInt64(object value);
	sbyte ToSByte(object value);
	float ToSingle(object value);
	string ToString(object value);
	ushort ToUInt16(object value);
	uint ToUInt32(object value);
	ulong ToUInt64(object value);
}

// Namespace: System.Runtime.Serialization
public interface IObjectReference // TypeDefIndex: 1163
{
	// Methods
	object GetRealObject(StreamingContext context);
}

// Namespace: System.Runtime.Serialization
public interface ISerializationSurrogate // TypeDefIndex: 1164
{
	// Methods
	void GetObjectData(object obj, SerializationInfo info, StreamingContext context);
	object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector);
}

// Namespace: System.Runtime.Serialization
public interface ISurrogateSelector // TypeDefIndex: 1165
{
	// Methods
	void ChainSelector(ISurrogateSelector selector);
	ISurrogateSelector GetNextSelector();
	ISerializationSurrogate GetSurrogate(Type type, StreamingContext context, out ISurrogateSelector selector);
}

// Namespace: System.Runtime.Serialization
[Serializable]
public class ObjectIDGenerator // TypeDefIndex: 1166
{
	// Fields
	private Hashtable table; // 0x08
	private long current; // 0x10
	private static InstanceComparer comparer; // 0x00

	// Properties
	internal long NextId { get; } // 0x00201364 

	// Constructors
	public ObjectIDGenerator(); // 0x00200E10
	private static ObjectIDGenerator(); // 0x002062FC

	// Methods
	public virtual long GetId(object obj, out bool firstTime); // 0x00206384
	public virtual long HasId(object obj, out bool firstTime); // 0x00206524
}

// Namespace: 
private class InstanceComparer : IComparer, IHashCodeProvider // TypeDefIndex: 1167
{
	// Constructors
	public InstanceComparer(); // 0x0020637C

	// Methods
	private int System.Collections.IComparer.Compare(object o1, object o2); // 0x0020665C
	private int System.Collections.IHashCodeProvider.GetHashCode(object o); // 0x002066F8
}

// Namespace: System.Runtime.Serialization
public class ObjectManager // TypeDefIndex: 1168
{
	// Fields
	private ObjectRecord _objectRecordChain; // 0x08
	private ObjectRecord _lastObjectRecord; // 0x0C
	private ArrayList _deserializedRecords; // 0x10
	private ArrayList _onDeserializedCallbackRecords; // 0x14
	private Hashtable _objectRecords; // 0x18
	private bool _finalFixup; // 0x1C
	private ISurrogateSelector _selector; // 0x20
	private StreamingContext _context; // 0x24
	private int _registeredObjectsCount; // 0x2C

	// Constructors
	public ObjectManager(ISurrogateSelector selector, StreamingContext context); // 0x001FC700

	// Methods
	public virtual void DoFixups(); // 0x00206704
	internal ObjectRecord GetObjectRecord(long objectID); // 0x00207A78
	public virtual object GetObject(long objectID); // 0x00207DAC
	public virtual void RaiseDeserializationEvent(); // 0x00207F24
	public void RaiseOnDeserializingEvent(object obj); // 0x001FF368
	private void RaiseOnDeserializedEvent(object obj); // 0x00208194
	private void AddFixup(BaseFixupRecord record); // 0x002083B8
	public virtual void RecordArrayElementFixup(long arrayToBeFixed, int index, long objectRequired); // 0x00208470
	public virtual void RecordArrayElementFixup(long arrayToBeFixed, int[] indices, long objectRequired); // 0x00208610
	public virtual void RecordDelayedFixup(long objectToBeFixed, string memberName, long objectRequired); // 0x002087F4
	public virtual void RecordFixup(long objectToBeFixed, MemberInfo member, long objectRequired); // 0x002089E0
	private void RegisterObjectInternal(object obj, ObjectRecord record); // 0x00208BCC
	public virtual void RegisterObject(object obj, long objectID); // 0x00208F98
	public void RegisterObject(object obj, long objectID, SerializationInfo info); // 0x002090E8
	public void RegisterObject(object obj, long objectID, SerializationInfo info, long idOfContainingObj, MemberInfo member); // 0x00209254
	public void RegisterObject(object obj, long objectID, SerializationInfo info, long idOfContainingObj, MemberInfo member, int[] arrayIndex); // 0x001FF904
}

// Namespace: System.Runtime.Serialization
internal abstract class BaseFixupRecord // TypeDefIndex: 1169
{
	// Fields
	protected internal ObjectRecord ObjectToBeFixed; // 0x08
	protected internal ObjectRecord ObjectRequired; // 0x0C
	public BaseFixupRecord NextSameContainer; // 0x10
	public BaseFixupRecord NextSameRequired; // 0x14

	// Constructors
	public BaseFixupRecord(ObjectRecord objectToBeFixed, ObjectRecord objectRequired); // 0x002B04A4

	// Methods
	public bool DoFixup(ObjectManager manager, bool strict); // 0x002B05C0
	protected abstract void FixupImpl(ObjectManager manager);
}

// Namespace: System.Runtime.Serialization
internal class ArrayFixupRecord : BaseFixupRecord // TypeDefIndex: 1170
{
	// Fields
	private int _index; // 0x18

	// Constructors
	public ArrayFixupRecord(ObjectRecord objectToBeFixed, int index, ObjectRecord objectRequired); // 0x002B0474

	// Methods
	protected override void FixupImpl(ObjectManager manager); // 0x002B04CC
}

// Namespace: System.Runtime.Serialization
internal class MultiArrayFixupRecord : BaseFixupRecord // TypeDefIndex: 1171
{
	// Fields
	private int[] _indices; // 0x18

	// Constructors
	public MultiArrayFixupRecord(ObjectRecord objectToBeFixed, int[] indices, ObjectRecord objectRequired); // 0x00206170

	// Methods
	protected override void FixupImpl(ObjectManager manager); // 0x00206194
}

// Namespace: System.Runtime.Serialization
internal class FixupRecord : BaseFixupRecord // TypeDefIndex: 1172
{
	// Fields
	public MemberInfo _member; // 0x18

	// Constructors
	public FixupRecord(ObjectRecord objectToBeFixed, MemberInfo member, ObjectRecord objectRequired); // 0x002B0928

	// Methods
	protected override void FixupImpl(ObjectManager manager); // 0x002B0958
}

// Namespace: System.Runtime.Serialization
internal class DelayedFixupRecord : BaseFixupRecord // TypeDefIndex: 1173
{
	// Fields
	public string _memberName; // 0x18

	// Constructors
	public DelayedFixupRecord(ObjectRecord objectToBeFixed, string memberName, ObjectRecord objectRequired); // 0x002B0894

	// Methods
	protected override void FixupImpl(ObjectManager manager); // 0x002B08C4
}

// Namespace: System.Runtime.Serialization
internal enum ObjectRecordStatus : byte // TypeDefIndex: 1174
{
	Unregistered = 0,
	ReferenceUnsolved = 1,
	ReferenceSolvingDelayed = 2,
	ReferenceSolved = 3
}

// Namespace: System.Runtime.Serialization
internal class ObjectRecord // TypeDefIndex: 1175
{
	// Fields
	public ObjectRecordStatus Status; // 0x08
	public object OriginalObject; // 0x0C
	public object ObjectInstance; // 0x10
	public long ObjectID; // 0x18
	public SerializationInfo Info; // 0x20
	public long IdOfContainingObj; // 0x28
	public ISerializationSurrogate Surrogate; // 0x30
	public ISurrogateSelector SurrogateSelector; // 0x34
	public MemberInfo Member; // 0x38
	public int[] ArrayIndex; // 0x3C
	public BaseFixupRecord FixupChainAsContainer; // 0x40
	public BaseFixupRecord FixupChainAsRequired; // 0x44
	public ObjectRecord Next; // 0x48

	// Properties
	public bool IsInstanceReady { get; } // 0x002095BC 
	public bool IsUnsolvedObjectReference { get; } // 0x00206B90 
	public bool IsRegistered { get; } // 0x00207D9C 
	public bool HasPendingFixups { get; } // 0x00209644 

	// Constructors
	public ObjectRecord(); // 0x00207D94

	// Methods
	public void SetMemberValue(ObjectManager manager, MemberInfo member, object value); // 0x00209290
	public void SetArrayValue(ObjectManager manager, object value, int[] indices); // 0x002061EC
	public void SetMemberValue(ObjectManager manager, string memberName, object value); // 0x002094CC
	public bool DoFixups(bool asContainer, ObjectManager manager, bool strict); // 0x00206BA4
	public void RemoveFixup(BaseFixupRecord fixupToRemove, bool asContainer); // 0x002096BC
	private void UnchainFixup(BaseFixupRecord fixup, BaseFixupRecord prevFixup, bool asContainer); // 0x00209654
	public void ChainFixup(BaseFixupRecord fixup, bool asContainer); // 0x00208418
	public bool LoadData(ObjectManager manager, ISurrogateSelector selector, StreamingContext context); // 0x00206C9C
}

// Namespace: System.Runtime.Serialization
public sealed class OnDeserializedAttribute : Attribute // TypeDefIndex: 1176
{
	// Constructors
	public OnDeserializedAttribute(); // 0x00209724

}

// Namespace: System.Runtime.Serialization
public sealed class OnDeserializingAttribute : Attribute // TypeDefIndex: 1177
{
	// Constructors
	public OnDeserializingAttribute(); // 0x0020972C

}

// Namespace: System.Runtime.Serialization
public sealed class OnSerializedAttribute : Attribute // TypeDefIndex: 1178
{
	// Constructors
	public OnSerializedAttribute(); // 0x00209734

}

// Namespace: System.Runtime.Serialization
public sealed class OnSerializingAttribute : Attribute // TypeDefIndex: 1179
{
	// Constructors
	public OnSerializingAttribute(); // 0x0020973C

}

// Namespace: System.Runtime.Serialization
public sealed class OptionalFieldAttribute : Attribute // TypeDefIndex: 1180
{
	// Fields
	private int version_added; // 0x08

	// Properties
	public int VersionAdded { get; set; } // 0x0020974C 0x00209754

	// Constructors
	public OptionalFieldAttribute(); // 0x00209744

}

// Namespace: System.Runtime.Serialization
[Serializable]
public abstract class SerializationBinder // TypeDefIndex: 1181
{
	// Constructors
	protected SerializationBinder(); // 0x0020975C

	// Methods
	public abstract Type BindToType(string assemblyName, string typeName);
}

// Namespace: System.Runtime.Serialization
internal sealed class SerializationCallbacks // TypeDefIndex: 1182
{
	// Fields
	private const BindingFlags DefaultBindingFlags = 54; // 0x00
	private readonly ArrayList onSerializingList; // 0x08
	private readonly ArrayList onSerializedList; // 0x0C
	private readonly ArrayList onDeserializingList; // 0x10
	private readonly ArrayList onDeserializedList; // 0x14
	private static Hashtable cache; // 0x00
	private static object cache_lock; // 0x04

	// Properties
	public bool HasSerializingCallbacks { get; } // 0x00209C78 
	public bool HasSerializedCallbacks { get; } // 0x00209C88 
	public bool HasDeserializingCallbacks { get; } // 0x00209C98 
	public bool HasDeserializedCallbacks { get; } // 0x00207A68 

	// Constructors
	public SerializationCallbacks(Type type); // 0x00209764
	private static SerializationCallbacks(); // 0x00209BCC

	// Methods
	private static ArrayList GetMethodsByAttribute(Type type, Type attr); // 0x002098C0
	private static void Invoke(ArrayList list, object target, StreamingContext context); // 0x00209CA8
	public void RaiseOnSerializing(object target, StreamingContext contex); // 0x0020A2C0
	public void RaiseOnSerialized(object target, StreamingContext contex); // 0x0020A364
	public void RaiseOnDeserializing(object target, StreamingContext contex); // 0x00208270
	public void RaiseOnDeserialized(object target, StreamingContext contex); // 0x00208314
	public static SerializationCallbacks GetSerializationCallbacks(Type t); // 0x002076F4
}

// Namespace: 
public delegate void CallbackHandler(StreamingContext context); // TypeDefIndex: 1183; 0x0020A094

// Namespace: System.Runtime.Serialization
public struct SerializationEntry // TypeDefIndex: 1184
{
	// Fields
	private string name; // 0x08
	private Type objectType; // 0x0C
	private object value; // 0x10

	// Properties
	public string Name { get; } // 0x0008BC10 
	public Type ObjectType { get; } // 0x0008BC18 
	public object Value { get; } // 0x0008BC20 

	// Constructors
	internal SerializationEntry(string name, Type type, object value); // 0x0008BC04

}

// Namespace: System.Runtime.Serialization
[Serializable]
public class SerializationException : SystemException // TypeDefIndex: 1185
{
	// Constructors
	public SerializationException(); // 0x0020A4E8
	public SerializationException(string message); // 0x001F0AE4
	public SerializationException(string message, Exception innerException); // 0x0020A550
	protected SerializationException(SerializationInfo info, StreamingContext context); // 0x0020A558

}

// Namespace: System.Runtime.Serialization
public sealed class SerializationInfo // TypeDefIndex: 1186
{
	// Fields
	private Hashtable serialized; // 0x08
	private ArrayList values; // 0x0C
	private string assemblyName; // 0x10
	private string fullTypeName; // 0x14
	private IFormatterConverter converter; // 0x18

	// Properties
	public string AssemblyName { get; set; } // 0x0020A948 0x0020A950
	public string FullTypeName { get; set; } // 0x0020AA00 0x0020AA08
	public int MemberCount { get; } // 0x00204BD8 

	// Constructors
	private SerializationInfo(Type type); // 0x0020A578
	private SerializationInfo(Type type, SerializationEntry[] data); // 0x0020A6A8
	public SerializationInfo(Type type, IFormatterConverter converter); // 0x001FF444

	// Methods
	public void AddValue(string name, object value, Type type); // 0x00200BE4
	public object GetValue(string name, Type type); // 0x00205C04
	public void SetType(Type type); // 0x0020AAB8
	public SerializationInfoEnumerator GetEnumerator(); // 0x00204C0C
	public void AddValue(string name, short value); // 0x0020AC04
	public void AddValue(string name, ushort value); // 0x0020ACDC
	public void AddValue(string name, int value); // 0x0020ADB4
	public void AddValue(string name, byte value); // 0x0020AE8C
	public void AddValue(string name, bool value); // 0x0020AF64
	public void AddValue(string name, char value); // 0x0020B03C
	public void AddValue(string name, sbyte value); // 0x0020B114
	public void AddValue(string name, double value); // 0x0020B1EC
	public void AddValue(string name, Decimal value); // 0x0020B2CC
	public void AddValue(string name, DateTime value); // 0x0020B3BC
	public void AddValue(string name, float value); // 0x0020B4AC
	public void AddValue(string name, uint value); // 0x0020B58C
	public void AddValue(string name, long value); // 0x0020B664
	public void AddValue(string name, ulong value); // 0x0020B744
	public void AddValue(string name, object value); // 0x0020B824
	public bool GetBoolean(string name); // 0x0020B904
	public byte GetByte(string name); // 0x0020BA40
	public char GetChar(string name); // 0x0020BB7C
	public DateTime GetDateTime(string name); // 0x0020BCB8
	public Decimal GetDecimal(string name); // 0x0020BDFC
	public double GetDouble(string name); // 0x0020BF40
	public short GetInt16(string name); // 0x0020C07C
	public int GetInt32(string name); // 0x0020C1B8
	public long GetInt64(string name); // 0x0020C2F4
	public sbyte GetSByte(string name); // 0x0020C430
	public float GetSingle(string name); // 0x0020C56C
	public string GetString(string name); // 0x00205AB8
	public ushort GetUInt16(string name); // 0x0020C6A8
	public uint GetUInt32(string name); // 0x0020C7E4
	public ulong GetUInt64(string name); // 0x0020C920
	private SerializationEntry[] get_entries(); // 0x0020CA5C
}

// Namespace: System.Runtime.Serialization
public sealed class SerializationInfoEnumerator : IEnumerator // TypeDefIndex: 1187
{
	// Fields
	private IEnumerator enumerator; // 0x08

	// Properties
	private object System.Collections.IEnumerator.Current { get; } // 0x0020CD0C 
	public SerializationEntry Current { get; } // 0x0020CBCC 
	public string Name { get; } // 0x00204CA4 
	public Type ObjectType { get; } // 0x00204C80 
	public object Value { get; } // 0x00205484 

	// Constructors
	internal SerializationInfoEnumerator(ArrayList list); // 0x0020ABC0

	// Methods
	public bool MoveNext(); // 0x00204CC8
	public void Reset(); // 0x0020CDE4
}

// Namespace: System.Runtime.Serialization
public sealed class SerializationObjectManager // TypeDefIndex: 1188
{
	// Fields
	private readonly StreamingContext context; // 0x08
	private readonly Hashtable seen; // 0x10
	private CallbackHandler callbacks; // 0x14

	// Events
	private event CallbackHandler callbacks {
		add; // 0x0020CEBC
		remove; // 0x0020CF4C
	}

	// Constructors
	public SerializationObjectManager(StreamingContext context); // 0x00200EE8

	// Methods
	public void RegisterObject(object obj); // 0x0020279C
	public void RaiseOnSerializedEvent(); // 0x002011FC
}

// Namespace: 
private sealed class <RegisterObject>c__AnonStorey3 // TypeDefIndex: 1189
{
	// Fields
	internal SerializationCallbacks sc; // 0x08
	internal object obj; // 0x0C

	// Constructors
	public <RegisterObject>c__AnonStorey3(); // 0x0020CFDC

	// Methods
	internal void <>m__2(StreamingContext ctx); // 0x0020CFE4
}

// Namespace: System.Runtime.Serialization
[Serializable]
public struct StreamingContext // TypeDefIndex: 1190
{
	// Fields
	private StreamingContextStates state; // 0x08
	private object additional; // 0x0C

	// Properties
	public object Context { get; } // 0x0008BCF0 
	public StreamingContextStates State { get; } // 0x0008BCF8 

	// Constructors
	public StreamingContext(StreamingContextStates state); // 0x0008BCD4
	public StreamingContext(StreamingContextStates state, object additional); // 0x0008BCE4

	// Methods
	public override bool Equals(object obj); // 0x0008BD00
	public override int GetHashCode(); // 0x0008BD08
}

// Namespace: System.Runtime.Serialization
[Serializable]
public enum StreamingContextStates // TypeDefIndex: 1191
{
	CrossProcess = 1,
	CrossMachine = 2,
	File = 4,
	Persistence = 8,
	Remoting = 16,
	Other = 32,
	Clone = 64,
	CrossAppDomain = 128,
	All = 255
}

// Namespace: System.Runtime.Serialization
public class SurrogateSelector : ISurrogateSelector // TypeDefIndex: 1192
{
	// Fields
	private Hashtable Surrogates; // 0x08
	private ISurrogateSelector nextSelector; // 0x0C

	// Constructors
	public SurrogateSelector(); // 0x0020D0F4

	// Methods
	public virtual void AddSurrogate(Type type, StreamingContext context, ISerializationSurrogate surrogate); // 0x0020D170
	public virtual void ChainSelector(ISurrogateSelector selector); // 0x0020D400
	public virtual ISurrogateSelector GetNextSelector(); // 0x0020D53C
	public virtual ISerializationSurrogate GetSurrogate(Type type, StreamingContext context, out ISurrogateSelector selector); // 0x0020D544
	public virtual void RemoveSurrogate(Type type, StreamingContext context); // 0x0020D7D4
}

// Namespace: System.Runtime.Versioning
public sealed class ResourceConsumptionAttribute : Attribute // TypeDefIndex: 1193
{
	// Fields
	private ResourceScope resource; // 0x08
	private ResourceScope consumption; // 0x0C

	// Properties
	public ResourceScope ConsumptionScope { get; } // 0x0020D9C0 
	public ResourceScope ResourceScope { get; } // 0x0020D9C8 

	// Constructors
	public ResourceConsumptionAttribute(ResourceScope resourceScope); // 0x0020D974
	public ResourceConsumptionAttribute(ResourceScope resourceScope, ResourceScope consumptionScope); // 0x0020D998

}

// Namespace: System.Runtime.Versioning
public sealed class ResourceExposureAttribute : Attribute // TypeDefIndex: 1194
{
	// Fields
	private ResourceScope exposure; // 0x08

	// Properties
	public ResourceScope ResourceExposureLevel { get; } // 0x0020D9F0 

	// Constructors
	public ResourceExposureAttribute(ResourceScope exposureLevel); // 0x0020D9D0

}

// Namespace: System.Runtime.Versioning
public enum ResourceScope // TypeDefIndex: 1195
{
	None = 0,
	Machine = 1,
	Process = 2,
	AppDomain = 4,
	Library = 8,
	Private = 16,
	Assembly = 32
}

// Namespace: System.Runtime.Versioning
public static class VersioningHelper // TypeDefIndex: 1196
{
	// Methods
	private static int GetDomainId(); // 0x0020D9F8
	private static int GetProcessId(); // 0x0020DA00
	private static string SafeName(string name, bool process, bool appdomain); // 0x0020DA08
	private static string ConvertFromMachine(string name, ResourceScope to, Type type); // 0x0020DDB4
	private static string ConvertFromProcess(string name, ResourceScope to, Type type); // 0x0020DEDC
	private static string ConvertFromAppDomain(string name, ResourceScope to, Type type); // 0x0020DFA0
	public static string MakeVersionSafeName(string name, ResourceScope from, ResourceScope to); // 0x0020E094
	public static string MakeVersionSafeName(string name, ResourceScope from, ResourceScope to, Type type); // 0x0020E0AC
}

// Namespace: System.Runtime
[Serializable]
public enum GCLatencyMode // TypeDefIndex: 1197
{
	Batch = 0,
	Interactive = 1,
	LowLatency = 2
}

// Namespace: System.Runtime
public static class GCSettings // TypeDefIndex: 1198
{
	// Properties
	public static bool IsServerGC { get; } // 0x0037E2EC 
	public static GCLatencyMode LatencyMode { get; set; } // 0x0037E2F4 0x0037E2FC

}

// Namespace: System.Runtime
public sealed class MemoryFailPoint : CriticalFinalizerObject, IDisposable // TypeDefIndex: 1199
{
	// Constructors
	public MemoryFailPoint(int sizeInMegabytes); // 0x002C413C

	// Methods
	protected override void Finalize(); // 0x002C41D4
	public void Dispose(); // 0x002C41DC
}

// Namespace: System.Security.AccessControl
public enum AccessControlActions // TypeDefIndex: 1200
{
	None = 0,
	View = 1,
	Change = 2
}

// Namespace: System.Security.AccessControl
public enum AccessControlModification // TypeDefIndex: 1201
{
	Add = 0,
	Set = 1,
	Reset = 2,
	Remove = 3,
	RemoveAll = 4,
	RemoveSpecific = 5
}

// Namespace: System.Security.AccessControl
public enum AccessControlSections // TypeDefIndex: 1202
{
	None = 0,
	Audit = 1,
	Access = 2,
	Owner = 4,
	Group = 8,
	All = 15
}

// Namespace: System.Security.AccessControl
public enum AccessControlType // TypeDefIndex: 1203
{
	Allow = 0,
	Deny = 1
}

// Namespace: System.Security.AccessControl
public abstract class AccessRule : AuthorizationRule // TypeDefIndex: 1204
{
	// Fields
	private AccessControlType type; // 0x1C

	// Properties
	public AccessControlType AccessControlType { get; } // 0x00210994 

	// Constructors
	protected AccessRule(IdentityReference identity, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type); // 0x002106DC

}

// Namespace: System.Security.AccessControl
public sealed class AceEnumerator : IEnumerator // TypeDefIndex: 1205
{
	// Fields
	private GenericAcl owner; // 0x08
	private int current; // 0x0C

	// Properties
	private object System.Collections.IEnumerator.Current { get; } // 0x002109C8 
	public GenericAce Current { get; } // 0x002109CC 

	// Constructors
	internal AceEnumerator(GenericAcl owner); // 0x0021099C

	// Methods
	public bool MoveNext(); // 0x00210A18
	public void Reset(); // 0x00210A74
}

// Namespace: System.Security.AccessControl
public enum AceFlags : byte // TypeDefIndex: 1206
{
	None = 0,
	ObjectInherit = 1,
	ContainerInherit = 2,
	NoPropagateInherit = 4,
	InheritOnly = 8,
	InheritanceFlags = 15,
	Inherited = 16,
	SuccessfulAccess = 64,
	FailedAccess = 128,
	AuditFlags = 192
}

// Namespace: System.Security.AccessControl
public enum AceQualifier // TypeDefIndex: 1207
{
	AccessAllowed = 0,
	AccessDenied = 1,
	SystemAudit = 2,
	SystemAlarm = 3
}

// Namespace: System.Security.AccessControl
public enum AceType // TypeDefIndex: 1208
{
	AccessAllowed = 0,
	AccessDenied = 1,
	SystemAudit = 2,
	SystemAlarm = 3,
	AccessAllowedCompound = 4,
	AccessAllowedObject = 5,
	AccessDeniedObject = 6,
	SystemAuditObject = 7,
	SystemAlarmObject = 8,
	AccessAllowedCallback = 9,
	AccessDeniedCallback = 10,
	AccessAllowedCallbackObject = 11,
	AccessDeniedCallbackObject = 12,
	SystemAuditCallback = 13,
	SystemAlarmCallback = 14,
	SystemAuditCallbackObject = 15,
	SystemAlarmCallbackObject = 16,
	MaxDefinedAceType = 16
}

// Namespace: System.Security.AccessControl
public enum AuditFlags // TypeDefIndex: 1209
{
	None = 0,
	Success = 1,
	Failure = 2
}

// Namespace: System.Security.AccessControl
public abstract class AuditRule : AuthorizationRule // TypeDefIndex: 1210
{
	// Fields
	private AuditFlags auditFlags; // 0x1C

	// Properties
	public AuditFlags AuditFlags { get; } // 0x00210BBC 

	// Constructors
	protected AuditRule(IdentityReference identity, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags auditFlags); // 0x00210A80

}

// Namespace: System.Security.AccessControl
public abstract class AuthorizationRule // TypeDefIndex: 1211
{
	// Fields
	private IdentityReference identity; // 0x08
	private int accessMask; // 0x0C
	private bool isInherited; // 0x10
	private InheritanceFlags inheritanceFlags; // 0x14
	private PropagationFlags propagationFlags; // 0x18

	// Properties
	public IdentityReference IdentityReference { get; } // 0x00210BCC 
	public InheritanceFlags InheritanceFlags { get; } // 0x00210BD4 
	public bool IsInherited { get; } // 0x00210BDC 
	public PropagationFlags PropagationFlags { get; } // 0x00210BE4 
	protected internal int AccessMask { get; } // 0x00210BEC 

	// Constructors
	internal AuthorizationRule(); // 0x00210BC4
	protected internal AuthorizationRule(IdentityReference identity, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags); // 0x00210864

}

// Namespace: System.Security.AccessControl
public sealed class AuthorizationRuleCollection : ReadOnlyCollectionBase // TypeDefIndex: 1212
{
	// Properties
	public AuthorizationRule Item { get; } // 0x00210C3C 

	// Constructors
	private AuthorizationRuleCollection(AuthorizationRule[] rules); // 0x00210BF4

	// Methods
	public void CopyTo(AuthorizationRule[] rules, int index); // 0x00210D0C
}

// Namespace: System.Security.AccessControl
public sealed class CommonAce : QualifiedAce // TypeDefIndex: 1213
{
	// Properties
	public override int BinaryLength { get; } // 0x00210D9C 

	// Constructors
	public CommonAce(AceFlags flags, AceQualifier qualifier, int accessMask, SecurityIdentifier sid, bool isCallback, byte[] opaque); // 0x00210D50

	// Methods
	public override void GetBinaryForm(byte[] binaryForm, int offset); // 0x00210E24
	public static int MaxOpaqueLength(bool isCallback); // 0x00210EAC
}

// Namespace: System.Security.AccessControl
public abstract class CommonAcl : GenericAcl // TypeDefIndex: 1214
{
	// Fields
	private const int default_capacity = 10; // 0x00
	private bool is_container; // 0x08
	private bool is_ds; // 0x09
	private byte revision; // 0x0A
	private List`1<GenericAce> list; // 0x0C

	// Properties
	public sealed override int BinaryLength { get; } // 0x0021102C 
	public sealed override int Count { get; } // 0x002110B4 
	public bool IsCanonical { get; } // 0x00211118 
	public bool IsContainer { get; } // 0x002111A0 
	public bool IsDS { get; } // 0x002111A8 
	public sealed override GenericAce Item { get; set; } // 0x002111B0 0x00211230
	public sealed override byte Revision { get; } // 0x002112B8 

	// Constructors
	internal CommonAcl(bool isContainer, bool isDS, byte revision); // 0x00210F34
	internal CommonAcl(bool isContainer, bool isDS, byte revision, int capacity); // 0x00210F54

	// Methods
	public sealed override void GetBinaryForm(byte[] binaryForm, int offset); // 0x002112C0
	public void Purge(SecurityIdentifier sid); // 0x00211348
	public void RemoveInheritedAces(); // 0x002113D0
}

// Namespace: System.Security.AccessControl
public abstract class CommonObjectSecurity : ObjectSecurity // TypeDefIndex: 1215
{
	// Fields
	private List`1<AccessRule> access_rules; // 0x10
	private List`1<AuditRule> audit_rules; // 0x14

	// Constructors
	protected CommonObjectSecurity(bool isContainer); // 0x00211458

	// Methods
	public AuthorizationRuleCollection GetAccessRules(bool includeExplicit, bool includeInherited, Type targetType); // 0x00211524
	public AuthorizationRuleCollection GetAuditRules(bool includeExplicit, bool includeInherited, Type targetType); // 0x002115AC
	protected void AddAccessRule(AccessRule rule); // 0x00211634
	protected bool RemoveAccessRule(AccessRule rule); // 0x002116BC
	protected void RemoveAccessRuleAll(AccessRule rule); // 0x00211744
	protected void RemoveAccessRuleSpecific(AccessRule rule); // 0x002117CC
	protected void ResetAccessRule(AccessRule rule); // 0x00211854
	protected void SetAccessRule(AccessRule rule); // 0x002118DC
	protected override bool ModifyAccess(AccessControlModification modification, AccessRule rule, out bool modified); // 0x00211964
	protected void AddAuditRule(AuditRule rule); // 0x00211BF8
	protected bool RemoveAuditRule(AuditRule rule); // 0x00211C80
	protected void RemoveAuditRuleAll(AuditRule rule); // 0x00211D08
	protected void RemoveAuditRuleSpecific(AuditRule rule); // 0x00211D90
	protected void SetAuditRule(AuditRule rule); // 0x00211E18
	protected override bool ModifyAudit(AccessControlModification modification, AuditRule rule, out bool modified); // 0x00211EA0
}

// Namespace: System.Security.AccessControl
public sealed class CommonSecurityDescriptor : GenericSecurityDescriptor // TypeDefIndex: 1216
{
	// Fields
	private bool isContainer; // 0x08
	private bool isDS; // 0x09
	private ControlFlags flags; // 0x0C
	private SecurityIdentifier owner; // 0x10
	private SecurityIdentifier group; // 0x14
	private SystemAcl systemAcl; // 0x18
	private DiscretionaryAcl discretionaryAcl; // 0x1C

	// Properties
	public override ControlFlags ControlFlags { get; } // 0x0042BDC4 
	public DiscretionaryAcl DiscretionaryAcl { get; set; } // 0x0042BDCC 0x0042BDD4
	public override SecurityIdentifier Group { get; set; } // 0x0042BDDC 0x0042BDE4
	public bool IsContainer { get; } // 0x0042BDEC 
	public bool IsDiscretionaryAclCanonical { get; } // 0x0042BDF4 
	public bool IsDS { get; } // 0x0042BE7C 
	public bool IsSystemAclCanonical { get; } // 0x0042BE84 
	public override SecurityIdentifier Owner { get; set; } // 0x0042BF0C 0x0042BF14
	public SystemAcl SystemAcl { get; set; } // 0x0042BF1C 0x0042BF24

	// Constructors
	public CommonSecurityDescriptor(bool isContainer, bool isDS, RawSecurityDescriptor rawSecurityDescriptor); // 0x0042BB24
	public CommonSecurityDescriptor(bool isContainer, bool isDS, string sddlForm); // 0x0042BBC4
	public CommonSecurityDescriptor(bool isContainer, bool isDS, byte[] binaryForm, int offset); // 0x0042BC5C
	public CommonSecurityDescriptor(bool isContainer, bool isDS, ControlFlags flags, SecurityIdentifier owner, SecurityIdentifier group, SystemAcl systemAcl, DiscretionaryAcl discretionaryAcl); // 0x0042BCF4

	// Methods
	public void PurgeAccessControl(SecurityIdentifier sid); // 0x0042BF2C
	public void PurgeAudit(SecurityIdentifier sid); // 0x0042BFB4
	public void SetDiscretionaryAclProtection(bool isProtected, bool preserveInheritance); // 0x0042C03C
	public void SetSystemAclProtection(bool isProtected, bool preserveInheritance); // 0x0042C0C4
}

// Namespace: System.Security.AccessControl
public sealed class CompoundAce : KnownAce // TypeDefIndex: 1217
{
	// Fields
	private CompoundAceType compound_ace_type; // 0x20

	// Properties
	public override int BinaryLength { get; } // 0x0042C1B8 
	public CompoundAceType CompoundAceType { get; set; } // 0x0042C240 0x0042C248

	// Constructors
	public CompoundAce(AceFlags flags, int accessMask, CompoundAceType compoundAceType, SecurityIdentifier sid); // 0x0042C14C

	// Methods
	public override void GetBinaryForm(byte[] binaryForm, int offset); // 0x0042C250
}

// Namespace: System.Security.AccessControl
public enum CompoundAceType // TypeDefIndex: 1218
{
	Impersonation = 1
}

// Namespace: System.Security.AccessControl
public enum ControlFlags // TypeDefIndex: 1219
{
	None = 0,
	OwnerDefaulted = 1,
	GroupDefaulted = 2,
	DiscretionaryAclPresent = 4,
	DiscretionaryAclDefaulted = 8,
	SystemAclPresent = 16,
	SystemAclDefaulted = 32,
	DiscretionaryAclUntrusted = 64,
	ServerSecurity = 128,
	DiscretionaryAclAutoInheritRequired = 256,
	SystemAclAutoInheritRequired = 512,
	DiscretionaryAclAutoInherited = 1024,
	SystemAclAutoInherited = 2048,
	DiscretionaryAclProtected = 4096,
	SystemAclProtected = 8192,
	RMControlValid = 16384,
	SelfRelative = 32768
}

// Namespace: System.Security.AccessControl
public sealed class CryptoKeyAccessRule : AccessRule // TypeDefIndex: 1220
{
	// Fields
	private CryptoKeyRights rights; // 0x20

	// Properties
	public CryptoKeyRights CryptoKeyRights { get; } // 0x0042C3C8 

	// Constructors
	public CryptoKeyAccessRule(IdentityReference identity, CryptoKeyRights cryptoKeyRights, AccessControlType type); // 0x0042C2D8
	public CryptoKeyAccessRule(string identity, CryptoKeyRights cryptoKeyRights, AccessControlType type); // 0x0042C31C

}

// Namespace: System.Security.AccessControl
public sealed class CryptoKeyAuditRule : AuditRule // TypeDefIndex: 1221
{
	// Fields
	private CryptoKeyRights rights; // 0x20

	// Properties
	public CryptoKeyRights CryptoKeyRights { get; } // 0x0042C4BC 

	// Constructors
	public CryptoKeyAuditRule(IdentityReference identity, CryptoKeyRights cryptoKeyRights, AuditFlags flags); // 0x0042C3D0
	public CryptoKeyAuditRule(string identity, CryptoKeyRights cryptoKeyRights, AuditFlags flags); // 0x0042C410

}

// Namespace: System.Security.AccessControl
public enum CryptoKeyRights // TypeDefIndex: 1222
{
	GenericRead = -2147483648,
	ReadData = 1,
	WriteData = 2,
	ReadExtendedAttributes = 8,
	WriteExtendedAttributes = 16,
	ReadAttributes = 128,
	WriteAttributes = 256,
	Delete = 65536,
	ReadPermissions = 131072,
	ChangePermissions = 262144,
	TakeOwnership = 524288,
	Synchronize = 1048576,
	FullControl = 2032027,
	GenericAll = 268435456,
	GenericExecute = 536870912,
	GenericWrite = 1073741824
}

// Namespace: System.Security.AccessControl
public sealed class CryptoKeySecurity : NativeObjectSecurity // TypeDefIndex: 1223
{
	// Properties
	public override Type AccessRightType { get; } // 0x0042C4E8 
	public override Type AccessRuleType { get; } // 0x0042C578 
	public override Type AuditRuleType { get; } // 0x0042C608 

	// Constructors
	public CryptoKeySecurity(); // 0x0042C4C4
	public CryptoKeySecurity(CommonSecurityDescriptor securityDescriptor); // 0x0042C4DC

	// Methods
	public sealed override AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type); // 0x0042C698
	public void AddAccessRule(CryptoKeyAccessRule rule); // 0x0042C738
	public bool RemoveAccessRule(CryptoKeyAccessRule rule); // 0x0042C7C0
	public void RemoveAccessRuleAll(CryptoKeyAccessRule rule); // 0x0042C848
	public void RemoveAccessRuleSpecific(CryptoKeyAccessRule rule); // 0x0042C8D0
	public void ResetAccessRule(CryptoKeyAccessRule rule); // 0x0042C958
	public void SetAccessRule(CryptoKeyAccessRule rule); // 0x0042C9E0
	public sealed override AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags); // 0x0042CA68
	public void AddAuditRule(CryptoKeyAuditRule rule); // 0x0042CB08
	public bool RemoveAuditRule(CryptoKeyAuditRule rule); // 0x0042CB90
	public void RemoveAuditRuleAll(CryptoKeyAuditRule rule); // 0x0042CC18
	public void RemoveAuditRuleSpecific(CryptoKeyAuditRule rule); // 0x0042CCA0
	public void SetAuditRule(CryptoKeyAuditRule rule); // 0x0042CD28
}

// Namespace: System.Security.AccessControl
public sealed class CustomAce : GenericAce // TypeDefIndex: 1224
{
	// Fields
	private byte[] opaque; // 0x18
	public static readonly int MaxOpaqueLength; // 0x00

	// Properties
	public override int BinaryLength { get; } // 0x0042CFA0 
	public int OpaqueLength { get; } // 0x0042D028 

	// Constructors
	public CustomAce(AceType type, AceFlags flags, byte[] opaque); // 0x0042CDB0

	// Methods
	public override void GetBinaryForm(byte[] binaryForm, int offset); // 0x0042D04C
	public byte[] GetOpaque(); // 0x0042D0D4
	public void SetOpaque(byte[] opaque); // 0x0042CE98
}

// Namespace: System.Security.AccessControl
public abstract class DirectoryObjectSecurity : ObjectSecurity // TypeDefIndex: 1225
{
	// Constructors
	protected DirectoryObjectSecurity(); // 0x0042D18C
	protected DirectoryObjectSecurity(CommonSecurityDescriptor securityDescriptor); // 0x0042D1D4

	// Methods
	public virtual AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type, Guid objectType, Guid inheritedObjectType); // 0x0042D2B4
	public virtual AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags, Guid objectType, Guid inheritedObjectType); // 0x0042D33C
	public AuthorizationRuleCollection GetAccessRules(bool includeExplicit, bool includeInherited, Type targetType); // 0x0042D3C4
	public AuthorizationRuleCollection GetAuditRules(bool includeExplicit, bool includeInherited, Type targetType); // 0x0042D44C
	protected void AddAccessRule(ObjectAccessRule rule); // 0x0042D4D4
	protected void AddAuditRule(ObjectAuditRule rule); // 0x0042D55C
	protected override bool ModifyAccess(AccessControlModification modification, AccessRule rule, out bool modified); // 0x0042D5E4
	protected override bool ModifyAudit(AccessControlModification modification, AuditRule rule, out bool modified); // 0x0042D66C
	protected bool RemoveAccessRule(ObjectAccessRule rule); // 0x0042D6F4
	protected void RemoveAccessRuleAll(ObjectAccessRule rule); // 0x0042D77C
	protected void RemoveAccessRuleSpecific(ObjectAccessRule rule); // 0x0042D804
	protected bool RemoveAuditRule(ObjectAuditRule rule); // 0x0042D88C
	protected void RemoveAuditRuleAll(ObjectAuditRule rule); // 0x0042D914
	protected void RemoveAuditRuleSpecific(ObjectAuditRule rule); // 0x0042D99C
	protected void ResetAccessRule(ObjectAccessRule rule); // 0x0042DA24
	protected void SetAccessRule(ObjectAccessRule rule); // 0x0042DAAC
	protected void SetAuditRule(ObjectAuditRule rule); // 0x0042DB34
}

// Namespace: System.Security.AccessControl
public sealed class DirectorySecurity : FileSystemSecurity // TypeDefIndex: 1226
{
	// Constructors
	public DirectorySecurity(); // 0x0042DBBC
	public DirectorySecurity(string name, AccessControlSections includeSections); // 0x0042DC60

}

// Namespace: System.Security.AccessControl
public sealed class DiscretionaryAcl : CommonAcl // TypeDefIndex: 1227
{
	// Constructors
	public DiscretionaryAcl(bool isContainer, bool isDS, int capacity); // 0x0042DD04
	public DiscretionaryAcl(bool isContainer, bool isDS, RawAcl rawAcl); // 0x0042DDE4
	public DiscretionaryAcl(bool isContainer, bool isDS, byte revision, int capacity); // 0x0042DDC0

	// Methods
	public void AddAccess(AccessControlType accessType, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags); // 0x0042DE08
	public void AddAccess(AccessControlType accessType, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType); // 0x0042DE90
	public bool RemoveAccess(AccessControlType accessType, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags); // 0x0042DF18
	public bool RemoveAccess(AccessControlType accessType, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType); // 0x0042DFA0
	public void RemoveAccessSpecific(AccessControlType accessType, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags); // 0x0042E028
	public void RemoveAccessSpecific(AccessControlType accessType, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType); // 0x0042E0B0
	public void SetAccess(AccessControlType accessType, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags); // 0x0042E138
	public void SetAccess(AccessControlType accessType, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType); // 0x0042E1C0
}

// Namespace: System.Security.AccessControl
public sealed class EventWaitHandleAccessRule : AccessRule // TypeDefIndex: 1228
{
	// Fields
	private EventWaitHandleRights rights; // 0x20

	// Properties
	public EventWaitHandleRights EventWaitHandleRights { get; } // 0x0042E338 

	// Constructors
	public EventWaitHandleAccessRule(IdentityReference identity, EventWaitHandleRights eventRights, AccessControlType type); // 0x0042E248
	public EventWaitHandleAccessRule(string identity, EventWaitHandleRights eventRights, AccessControlType type); // 0x0042E28C

}

// Namespace: System.Security.AccessControl
public sealed class EventWaitHandleAuditRule : AuditRule // TypeDefIndex: 1229
{
	// Fields
	private EventWaitHandleRights rights; // 0x20

	// Properties
	public EventWaitHandleRights EventWaitHandleRights { get; } // 0x0042E58C 

	// Constructors
	public EventWaitHandleAuditRule(IdentityReference identity, EventWaitHandleRights eventRights, AuditFlags flags); // 0x0042E340

}

// Namespace: System.Security.AccessControl
public enum EventWaitHandleRights // TypeDefIndex: 1230
{
	Modify = 2,
	Delete = 65536,
	ReadPermissions = 131072,
	ChangePermissions = 262144,
	TakeOwnership = 524288,
	Synchronize = 1048576,
	FullControl = 2031619
}

// Namespace: System.Security.AccessControl
public sealed class EventWaitHandleSecurity : NativeObjectSecurity // TypeDefIndex: 1231
{
	// Properties
	public override Type AccessRightType { get; } // 0x0042E628 
	public override Type AccessRuleType { get; } // 0x0042E6B8 
	public override Type AuditRuleType { get; } // 0x0042E748 

	// Constructors
	public EventWaitHandleSecurity(); // 0x0042E594

	// Methods
	public override AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type); // 0x0042E7D8
	public void AddAccessRule(EventWaitHandleAccessRule rule); // 0x0042E878
	public bool RemoveAccessRule(EventWaitHandleAccessRule rule); // 0x0042E900
	public void RemoveAccessRuleAll(EventWaitHandleAccessRule rule); // 0x0042E988
	public void RemoveAccessRuleSpecific(EventWaitHandleAccessRule rule); // 0x0042EA10
	public void ResetAccessRule(EventWaitHandleAccessRule rule); // 0x0042EA98
	public void SetAccessRule(EventWaitHandleAccessRule rule); // 0x0042EB20
	public override AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags); // 0x0042EBA8
	public void AddAuditRule(EventWaitHandleAuditRule rule); // 0x0042EC30
	public bool RemoveAuditRule(EventWaitHandleAuditRule rule); // 0x0042ECB8
	public void RemoveAuditRuleAll(EventWaitHandleAuditRule rule); // 0x0042ED40
	public void RemoveAuditRuleSpecific(EventWaitHandleAuditRule rule); // 0x0042EDC8
	public void SetAuditRule(EventWaitHandleAuditRule rule); // 0x0042EE50
}

// Namespace: System.Security.AccessControl
public sealed class FileSecurity : FileSystemSecurity // TypeDefIndex: 1232
{
	// Constructors
	public FileSecurity(); // 0x0042EED8
	public FileSecurity(string fileName, AccessControlSections includeSections); // 0x0042EF74

}

// Namespace: System.Security.AccessControl
public sealed class FileSystemAccessRule : AccessRule // TypeDefIndex: 1233
{
	// Fields
	private FileSystemRights rights; // 0x20

	// Properties
	public FileSystemRights FileSystemRights { get; } // 0x0042F1F4 

	// Constructors
	public FileSystemAccessRule(IdentityReference identity, FileSystemRights fileSystemRights, AccessControlType type); // 0x0042F010
	public FileSystemAccessRule(string identity, FileSystemRights fileSystemRights, AccessControlType type); // 0x0042F094
	public FileSystemAccessRule(IdentityReference identity, FileSystemRights fileSystemRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type); // 0x0042F04C
	public FileSystemAccessRule(string identity, FileSystemRights fileSystemRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type); // 0x0042F140

}

// Namespace: System.Security.AccessControl
public sealed class FileSystemAuditRule : AuditRule // TypeDefIndex: 1234
{
	// Fields
	private FileSystemRights rights; // 0x20

	// Properties
	public FileSystemRights FileSystemRights { get; } // 0x0042F3E4 

	// Constructors
	public FileSystemAuditRule(IdentityReference identity, FileSystemRights fileSystemRights, AuditFlags flags); // 0x0042F1FC
	public FileSystemAuditRule(string identity, FileSystemRights fileSystemRights, AuditFlags flags); // 0x0042F284
	public FileSystemAuditRule(IdentityReference identity, FileSystemRights fileSystemRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags); // 0x0042F23C
	public FileSystemAuditRule(string identity, FileSystemRights fileSystemRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags); // 0x0042F330

}

// Namespace: System.Security.AccessControl
public enum FileSystemRights // TypeDefIndex: 1235
{
	ListDirectory = 1,
	ReadData = 1,
	CreateFiles = 2,
	WriteData = 2,
	AppendData = 4,
	CreateDirectories = 4,
	ReadExtendedAttributes = 8,
	WriteExtendedAttributes = 16,
	ExecuteFile = 32,
	Traverse = 32,
	DeleteSubdirectoriesAndFiles = 64,
	ReadAttributes = 128,
	WriteAttributes = 256,
	Write = 278,
	Delete = 65536,
	ReadPermissions = 131072,
	Read = 131209,
	ReadAndExecute = 131241,
	Modify = 197055,
	ChangePermissions = 262144,
	TakeOwnership = 524288,
	Synchronize = 1048576,
	FullControl = 2032127
}

// Namespace: System.Security.AccessControl
public abstract class FileSystemSecurity : NativeObjectSecurity // TypeDefIndex: 1236
{
	// Properties
	public override Type AccessRightType { get; } // 0x0042F3FC 
	public override Type AccessRuleType { get; } // 0x0042F48C 
	public override Type AuditRuleType { get; } // 0x0042F51C 

	// Constructors
	internal FileSystemSecurity(bool isContainer); // 0x0042DC58
	internal FileSystemSecurity(bool isContainer, string name, AccessControlSections includeSections); // 0x0042DCFC

	// Methods
	public sealed override AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type); // 0x0042F5AC
	public void AddAccessRule(FileSystemAccessRule rule); // 0x0042F654
	public bool RemoveAccessRule(FileSystemAccessRule rule); // 0x0042F6DC
	public void RemoveAccessRuleAll(FileSystemAccessRule rule); // 0x0042F764
	public void RemoveAccessRuleSpecific(FileSystemAccessRule rule); // 0x0042F7EC
	public void ResetAccessRule(FileSystemAccessRule rule); // 0x0042F874
	public void SetAccessRule(FileSystemAccessRule rule); // 0x0042F8FC
	public sealed override AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags); // 0x0042F984
	public void AddAuditRule(FileSystemAuditRule rule); // 0x0042FA2C
	public bool RemoveAuditRule(FileSystemAuditRule rule); // 0x0042FAB4
	public void RemoveAuditRuleAll(FileSystemAuditRule rule); // 0x0042FB3C
	public void RemoveAuditRuleSpecific(FileSystemAuditRule rule); // 0x0042FBC4
	public void SetAuditRule(FileSystemAuditRule rule); // 0x0042FC4C
}

// Namespace: System.Security.AccessControl
public abstract class GenericAce // TypeDefIndex: 1237
{
	// Fields
	private InheritanceFlags inheritance; // 0x08
	private PropagationFlags propagation; // 0x0C
	private AceFlags aceflags; // 0x10
	private AceType ace_type; // 0x14

	// Properties
	public AceFlags AceFlags { get; set; } // 0x0042FCFC 0x0042FD04
	public AceType AceType { get; } // 0x0042FD0C 
	public AuditFlags AuditFlags { get; } // 0x0042FD14 
	public abstract int BinaryLength { get; }
	public InheritanceFlags InheritanceFlags { get; } // 0x0042FD28 
	public bool IsInherited { get; } // 0x0042FD30 
	public PropagationFlags PropagationFlags { get; } // 0x0042FD38 

	// Constructors
	internal GenericAce(InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags); // 0x0042FCD4
	internal GenericAce(AceType type); // 0x0042CDDC

	// Methods
	public GenericAce Copy(); // 0x0042FD40
	public static GenericAce CreateFromBinaryForm(byte[] binaryForm, int offset); // 0x0042FDC8
	public sealed override bool Equals(object o); // 0x0042FE50
	public abstract void GetBinaryForm(byte[] binaryForm, int offset);
	public sealed override int GetHashCode(); // 0x0042FED8
	public static bool op_Equality(GenericAce left, GenericAce right); // 0x0042FF60
	public static bool op_Inequality(GenericAce left, GenericAce right); // 0x0042FFE8
}

// Namespace: System.Security.AccessControl
public abstract class GenericAcl : IEnumerable, ICollection // TypeDefIndex: 1238
{
	// Fields
	public static readonly byte AclRevision; // 0x00
	public static readonly byte AclRevisionDS; // 0x01
	public static readonly int MaxBinaryLength; // 0x04

	// Properties
	public abstract int BinaryLength { get; }
	public abstract int Count { get; }
	public bool IsSynchronized { get; } // 0x00430408 
	public abstract GenericAce Item { get; set; }
	public abstract byte Revision { get; }
	public object SyncRoot { get; } // 0x00430410 

	// Constructors
	protected GenericAcl(); // 0x00430070
	private static GenericAcl(); // 0x00430078

	// Methods
	private void System.Collections.ICollection.CopyTo(Array array, int index); // 0x00430100
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x00430390
	public void CopyTo(GenericAce[] array, int index); // 0x004301A4
	public abstract void GetBinaryForm(byte[] binaryForm, int offset);
	public AceEnumerator GetEnumerator(); // 0x00430394
}

// Namespace: System.Security.AccessControl
public abstract class GenericSecurityDescriptor // TypeDefIndex: 1239
{
	// Properties
	public int BinaryLength { get; } // 0x00430414 
	public abstract ControlFlags ControlFlags { get; }
	public abstract SecurityIdentifier Group { get; set; }
	public abstract SecurityIdentifier Owner { get; set; }
	public static byte Revision { get; } // 0x0043049C 

	// Constructors
	protected GenericSecurityDescriptor(); // 0x0042BBBC

	// Methods
	public void GetBinaryForm(byte[] binaryForm, int offset); // 0x00430524
	public string GetSddlForm(AccessControlSections includeSections); // 0x004305AC
	public static bool IsSddlConversionSupported(); // 0x00430634
}

// Namespace: System.Security.AccessControl
public enum InheritanceFlags // TypeDefIndex: 1240
{
	None = 0,
	ContainerInherit = 1,
	ObjectInherit = 2
}

// Namespace: System.Security.AccessControl
public abstract class KnownAce : GenericAce // TypeDefIndex: 1241
{
	// Fields
	private int access_mask; // 0x18
	private SecurityIdentifier identifier; // 0x1C

	// Properties
	public int AccessMask { get; set; } // 0x004306BC 0x004306C4
	public SecurityIdentifier SecurityIdentifier { get; set; } // 0x004306CC 0x004306D4

	// Constructors
	internal KnownAce(InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags); // 0x0042C190

}

// Namespace: System.Security.AccessControl
public sealed class MutexAccessRule : AccessRule // TypeDefIndex: 1242
{
	// Fields
	private MutexRights rights; // 0x20

	// Properties
	public MutexRights MutexRights { get; } // 0x004307C8 

	// Constructors
	public MutexAccessRule(IdentityReference identity, MutexRights eventRights, AccessControlType type); // 0x004306DC
	public MutexAccessRule(string identity, MutexRights eventRights, AccessControlType type); // 0x0043071C

}

// Namespace: System.Security.AccessControl
public sealed class MutexAuditRule : AuditRule // TypeDefIndex: 1243
{
	// Fields
	private MutexRights rights; // 0x20

	// Properties
	public MutexRights MutexRights { get; } // 0x00430810 

	// Constructors
	public MutexAuditRule(IdentityReference identity, MutexRights eventRights, AuditFlags flags); // 0x004307D0

}

// Namespace: System.Security.AccessControl
public enum MutexRights // TypeDefIndex: 1244
{
	Modify = 1,
	Delete = 65536,
	ReadPermissions = 131072,
	ChangePermissions = 262144,
	TakeOwnership = 524288,
	Synchronize = 1048576,
	FullControl = 2031617
}

// Namespace: System.Security.AccessControl
public sealed class MutexSecurity : NativeObjectSecurity // TypeDefIndex: 1245
{
	// Properties
	public override Type AccessRightType { get; } // 0x00430830 
	public override Type AccessRuleType { get; } // 0x004308C0 
	public override Type AuditRuleType { get; } // 0x00430950 

	// Constructors
	public MutexSecurity(); // 0x00430818
	public MutexSecurity(string name, AccessControlSections includeSections); // 0x00430824

	// Methods
	public override AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type); // 0x004309E0
	public void AddAccessRule(MutexAccessRule rule); // 0x00430A80
	public bool RemoveAccessRule(MutexAccessRule rule); // 0x00430B08
	public void RemoveAccessRuleAll(MutexAccessRule rule); // 0x00430B90
	public void RemoveAccessRuleSpecific(MutexAccessRule rule); // 0x00430C18
	public void ResetAccessRule(MutexAccessRule rule); // 0x00430CA0
	public void SetAccessRule(MutexAccessRule rule); // 0x00430D28
	public override AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags); // 0x00430DB0
	public void AddAuditRule(MutexAuditRule rule); // 0x00430E50
	public bool RemoveAuditRule(MutexAuditRule rule); // 0x00430ED8
	public void RemoveAuditRuleAll(MutexAuditRule rule); // 0x00430F60
	public void RemoveAuditRuleSpecific(MutexAuditRule rule); // 0x00430FE8
	public void SetAuditRule(MutexAuditRule rule); // 0x00431070
}

// Namespace: System.Security.AccessControl
public abstract class NativeObjectSecurity : CommonObjectSecurity // TypeDefIndex: 1246
{
	// Constructors
	internal NativeObjectSecurity(); // 0x0042C4D0
	protected NativeObjectSecurity(bool isContainer, ResourceType resourceType); // 0x0042F3EC
	protected NativeObjectSecurity(bool isContainer, ResourceType resourceType, ExceptionFromErrorCode exceptionFromErrorCode, object exceptionContext); // 0x004310F8
	protected NativeObjectSecurity(bool isContainer, ResourceType resourceType, SafeHandle handle, AccessControlSections includeSections); // 0x00431100
	protected NativeObjectSecurity(bool isContainer, ResourceType resourceType, string name, AccessControlSections includeSections); // 0x0042F3F4
	protected NativeObjectSecurity(bool isContainer, ResourceType resourceType, SafeHandle handle, AccessControlSections includeSections, ExceptionFromErrorCode exceptionFromErrorCode, object exceptionContext); // 0x00431108
	protected NativeObjectSecurity(bool isContainer, ResourceType resourceType, string name, AccessControlSections includeSections, ExceptionFromErrorCode exceptionFromErrorCode, object exceptionContext); // 0x00431110

	// Methods
	protected sealed override void Persist(SafeHandle handle, AccessControlSections includeSections); // 0x00431118
	protected sealed override void Persist(string name, AccessControlSections includeSections); // 0x004311A0
	protected void Persist(SafeHandle handle, AccessControlSections includeSections, object exceptionContext); // 0x00431228
	protected void Persist(string name, AccessControlSections includeSections, object exceptionContext); // 0x004312B0
}

// Namespace: 
protected internal delegate Exception ExceptionFromErrorCode(int errorCode, string name, SafeHandle handle, object context); // TypeDefIndex: 1247; 0x0043134C

// Namespace: System.Security.AccessControl
public abstract class ObjectAccessRule : AccessRule // TypeDefIndex: 1248
{
	// Fields
	private Guid object_type; // 0x20
	private Guid inherited_object_type; // 0x30

	// Properties
	public Guid InheritedObjectType { get; } // 0x004316C8 
	public ObjectAceFlags ObjectFlags { get; } // 0x004316D8 
	public Guid ObjectType { get; } // 0x00431820 

	// Constructors
	protected ObjectAccessRule(IdentityReference identity, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, Guid objectType, Guid inheritedObjectType, AccessControlType type); // 0x0043165C

}

// Namespace: System.Security.AccessControl
public sealed class ObjectAce : QualifiedAce // TypeDefIndex: 1249
{
	// Fields
	private Guid object_ace_type; // 0x2C
	private Guid inherited_object_type; // 0x3C
	private ObjectAceFlags object_ace_flags; // 0x4C

	// Properties
	public override int BinaryLength { get; } // 0x004318FC 
	public Guid InheritedObjectAceType { get; set; } // 0x00431984 0x00431994
	public ObjectAceFlags ObjectAceFlags { get; set; } // 0x004319A4 0x004319AC
	public Guid ObjectAceType { get; set; } // 0x004319B4 0x004319C4

	// Constructors
	public ObjectAce(AceFlags aceFlags, AceQualifier qualifier, int accessMask, SecurityIdentifier sid, ObjectAceFlags flags, Guid type, Guid inheritedType, bool isCallback, byte[] opaque); // 0x00431830

	// Methods
	public override void GetBinaryForm(byte[] binaryForm, int offset); // 0x004319D4
	public static int MaxOpaqueLength(bool isCallback); // 0x00431A5C
}

// Namespace: System.Security.AccessControl
public enum ObjectAceFlags // TypeDefIndex: 1250
{
	None = 0,
	ObjectAceTypePresent = 1,
	InheritedObjectAceTypePresent = 2
}

// Namespace: System.Security.AccessControl
public abstract class ObjectAuditRule : AuditRule // TypeDefIndex: 1251
{
	// Fields
	private Guid inherited_object_type; // 0x20
	private Guid object_type; // 0x30

	// Properties
	public Guid InheritedObjectType { get; } // 0x00431B54 
	public ObjectAceFlags ObjectFlags { get; } // 0x00431B64 
	public Guid ObjectType { get; } // 0x00431CAC 

	// Constructors
	protected ObjectAuditRule(IdentityReference identity, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, Guid objectType, Guid inheritedObjectType, AuditFlags auditFlags); // 0x00431AE4

}

// Namespace: System.Security.AccessControl
public abstract class ObjectSecurity // TypeDefIndex: 1252
{
	// Fields
	private bool is_container; // 0x08
	private bool is_ds; // 0x09
	private bool access_rules_modified; // 0x0A
	private bool audit_rules_modified; // 0x0B
	private bool group_modified; // 0x0C
	private bool owner_modified; // 0x0D

	// Properties
	public abstract Type AccessRightType { get; }
	public abstract Type AccessRuleType { get; }
	public abstract Type AuditRuleType { get; }
	public bool AreAccessRulesCanonical { get; } // 0x00431CC4 
	public bool AreAccessRulesProtected { get; } // 0x00431D4C 
	public bool AreAuditRulesCanonical { get; } // 0x00431DD4 
	public bool AreAuditRulesProtected { get; } // 0x00431E5C 
	protected bool AccessRulesModified { get; set; } // 0x00431EE4 0x00431EEC
	protected bool AuditRulesModified { get; set; } // 0x00431EF4 0x00431EFC
	protected bool GroupModified { get; set; } // 0x00431F04 0x00431F0C
	protected bool IsContainer { get; } // 0x00431F14 
	protected bool IsDS { get; } // 0x00431F1C 
	protected bool OwnerModified { get; set; } // 0x00431F24 0x00431F2C

	// Constructors
	internal ObjectSecurity(); // 0x00431CBC
	protected ObjectSecurity(bool isContainer, bool isDS); // 0x0042D1AC

	// Methods
	public abstract AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
	public abstract AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
	public IdentityReference GetGroup(Type targetType); // 0x00431F34
	public IdentityReference GetOwner(Type targetType); // 0x00431FBC
	public byte[] GetSecurityDescriptorBinaryForm(); // 0x00432044
	public string GetSecurityDescriptorSddlForm(AccessControlSections includeSections); // 0x004320CC
	public static bool IsSddlConversionSupported(); // 0x00432154
	public virtual bool ModifyAccessRule(AccessControlModification modification, AccessRule rule, out bool modified); // 0x004321DC
	public virtual bool ModifyAuditRule(AccessControlModification modification, AuditRule rule, out bool modified); // 0x00432264
	public virtual void PurgeAccessRules(IdentityReference identity); // 0x004322EC
	public virtual void PurgeAuditRules(IdentityReference identity); // 0x00432374
	public void SetAccessRuleProtection(bool isProtected, bool preserveInheritance); // 0x004323FC
	public void SetAuditRuleProtection(bool isProtected, bool preserveInheritance); // 0x00432484
	public void SetGroup(IdentityReference identity); // 0x0043250C
	public void SetOwner(IdentityReference identity); // 0x00432594
	public void SetSecurityDescriptorBinaryForm(byte[] binaryForm); // 0x0043261C
	public void SetSecurityDescriptorBinaryForm(byte[] binaryForm, AccessControlSections includeSections); // 0x004326A4
	public void SetSecurityDescriptorSddlForm(string sddlForm); // 0x0043272C
	public void SetSecurityDescriptorSddlForm(string sddlForm, AccessControlSections includeSections); // 0x004327B4
	protected abstract bool ModifyAccess(AccessControlModification modification, AccessRule rule, out bool modified);
	protected abstract bool ModifyAudit(AccessControlModification modification, AuditRule rule, out bool modified);
	protected virtual void Persist(SafeHandle handle, AccessControlSections includeSections); // 0x0043283C
	protected virtual void Persist(string name, AccessControlSections includeSections); // 0x004328C4
	protected virtual void Persist(bool enableOwnershipPrivilege, string name, AccessControlSections includeSections); // 0x0043294C
	protected void ReadLock(); // 0x004329D4
	protected void ReadUnlock(); // 0x00432A5C
	protected void WriteLock(); // 0x00432AE4
	protected void WriteUnlock(); // 0x00432B6C
}

// Namespace: System.Security.AccessControl
[Serializable]
public sealed class PrivilegeNotHeldException : UnauthorizedAccessException, ISerializable // TypeDefIndex: 1253
{
	// Properties
	public string PrivilegeName { get; } // 0x00432C0C 

	// Constructors
	public PrivilegeNotHeldException(); // 0x00432BF4
	public PrivilegeNotHeldException(string privilege); // 0x00432BFC
	public PrivilegeNotHeldException(string privilege, Exception inner); // 0x00432C04

	// Methods
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00432C94
}

// Namespace: System.Security.AccessControl
public enum PropagationFlags // TypeDefIndex: 1254
{
	None = 0,
	NoPropagateInherit = 1,
	InheritOnly = 2
}

// Namespace: System.Security.AccessControl
public abstract class QualifiedAce : KnownAce // TypeDefIndex: 1255
{
	// Fields
	private AceQualifier ace_qualifier; // 0x20
	private bool is_callback; // 0x24
	private byte[] opaque; // 0x28

	// Properties
	public AceQualifier AceQualifier { get; } // 0x00432E24 
	public bool IsCallback { get; } // 0x00432E2C 
	public int OpaqueLength { get; } // 0x00432E34 

	// Constructors
	internal QualifiedAce(InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AceQualifier aceQualifier, bool isCallback, byte[] opaque); // 0x004318B8

	// Methods
	public byte[] GetOpaque(); // 0x00432E58
	public void SetOpaque(byte[] opaque); // 0x00432D1C
}

// Namespace: System.Security.AccessControl
public sealed class RawAcl : GenericAcl // TypeDefIndex: 1256
{
	// Fields
	private byte revision; // 0x08
	private List`1<GenericAce> list; // 0x0C

	// Properties
	public override int BinaryLength { get; } // 0x00432FE4 
	public override int Count { get; } // 0x0043306C 
	public override GenericAce Item { get; set; } // 0x004330D0 0x00433150
	public override byte Revision { get; } // 0x004331D8 

	// Constructors
	public RawAcl(byte revision, int capacity); // 0x00432F10
	public RawAcl(byte[] binaryForm, int offset); // 0x00432FD8

	// Methods
	public override void GetBinaryForm(byte[] binaryForm, int offset); // 0x004331E0
	public void InsertAce(int index, GenericAce ace); // 0x00433268
	public void RemoveAce(int index); // 0x004332B4
}

// Namespace: System.Security.AccessControl
public sealed class RawSecurityDescriptor : GenericSecurityDescriptor // TypeDefIndex: 1257
{
	// Properties
	public override ControlFlags ControlFlags { get; } // 0x0043334C 
	public RawAcl DiscretionaryAcl { get; set; } // 0x004333D4 0x0043345C
	public override SecurityIdentifier Group { get; set; } // 0x004334E4 0x0043356C
	public override SecurityIdentifier Owner { get; set; } // 0x004335F4 0x0043367C
	public byte ResourceManagerControl { get; set; } // 0x00433704 0x0043378C
	public RawAcl SystemAcl { get; set; } // 0x00433814 0x0043389C

	// Constructors
	public RawSecurityDescriptor(string sddlForm); // 0x00433334
	public RawSecurityDescriptor(byte[] binaryForm, int offset); // 0x0043333C
	public RawSecurityDescriptor(ControlFlags flags, SecurityIdentifier owner, SecurityIdentifier group, RawAcl systemAcl, RawAcl discretionaryAcl); // 0x00433344

	// Methods
	public void SetFlags(ControlFlags flags); // 0x00433924
}

// Namespace: System.Security.AccessControl
public sealed class RegistryAccessRule : AccessRule // TypeDefIndex: 1258
{
	// Fields
	private RegistryRights rights; // 0x20

	// Properties
	public RegistryRights RegistryRights { get; } // 0x00433B94 

	// Constructors
	public RegistryAccessRule(IdentityReference identity, RegistryRights registryRights, AccessControlType type); // 0x004339AC
	public RegistryAccessRule(string identity, RegistryRights registryRights, AccessControlType type); // 0x00433A34
	public RegistryAccessRule(IdentityReference identity, RegistryRights registryRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type); // 0x004339EC
	public RegistryAccessRule(string identity, RegistryRights registryRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type); // 0x00433AE0

}

// Namespace: System.Security.AccessControl
public sealed class RegistryAuditRule : AuditRule // TypeDefIndex: 1259
{
	// Fields
	private RegistryRights rights; // 0x20

	// Properties
	public RegistryRights RegistryRights { get; } // 0x00433C98 

	// Constructors
	public RegistryAuditRule(IdentityReference identity, RegistryRights registryRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags); // 0x00433B9C
	public RegistryAuditRule(string identity, RegistryRights registryRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags); // 0x00433BE4

}

// Namespace: System.Security.AccessControl
public enum RegistryRights // TypeDefIndex: 1260
{
	QueryValues = 1,
	SetValue = 2,
	CreateSubKey = 4,
	EnumerateSubKeys = 8,
	Notify = 16,
	CreateLink = 32,
	Delete = 65536,
	ReadPermissions = 131072,
	WriteKey = 131078,
	ReadKey = 131097,
	ExecuteKey = 131097,
	ChangePermissions = 262144,
	TakeOwnership = 524288,
	FullControl = 983103
}

// Namespace: System.Security.AccessControl
public sealed class RegistrySecurity : NativeObjectSecurity // TypeDefIndex: 1261
{
	// Properties
	public override Type AccessRightType { get; } // 0x00433CAC 
	public override Type AccessRuleType { get; } // 0x00433D3C 
	public override Type AuditRuleType { get; } // 0x00433DCC 

	// Constructors
	public RegistrySecurity(); // 0x00433CA0

	// Methods
	public override AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type); // 0x00433E5C
	public void AddAccessRule(RegistryAccessRule rule); // 0x00433F04
	public void AddAuditRule(RegistryAuditRule rule); // 0x00433F8C
	public override AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags); // 0x00434014
	public bool RemoveAccessRule(RegistryAccessRule rule); // 0x004340BC
	public void RemoveAccessRuleAll(RegistryAccessRule rule); // 0x00434144
	public void RemoveAccessRuleSpecific(RegistryAccessRule rule); // 0x004341CC
	public bool RemoveAuditRule(RegistryAuditRule rule); // 0x00434254
	public void RemoveAuditRuleAll(RegistryAuditRule rule); // 0x004342DC
	public void RemoveAuditRuleSpecific(RegistryAuditRule rule); // 0x00434364
	public void ResetAccessRule(RegistryAccessRule rule); // 0x004343EC
	public void SetAccessRule(RegistryAccessRule rule); // 0x00434474
	public void SetAuditRule(RegistryAuditRule rule); // 0x004344FC
}

// Namespace: System.Security.AccessControl
public enum ResourceType // TypeDefIndex: 1262
{
	Unknown = 0,
	FileObject = 1,
	Service = 2,
	Printer = 3,
	RegistryKey = 4,
	LMShare = 5,
	KernelObject = 6,
	WindowObject = 7,
	DSObject = 8,
	DSObjectAll = 9,
	ProviderDefined = 10,
	WmiGuidObject = 11,
	RegistryWow6432Key = 12
}

// Namespace: System.Security.AccessControl
public enum SecurityInfos // TypeDefIndex: 1263
{
	Owner = 1,
	Group = 2,
	DiscretionaryAcl = 4,
	SystemAcl = 8
}

// Namespace: System.Security.AccessControl
public sealed class SystemAcl : CommonAcl // TypeDefIndex: 1264
{
	// Constructors
	public SystemAcl(bool isContainer, bool isDS, int capacity); // 0x00434584
	public SystemAcl(bool isContainer, bool isDS, RawAcl rawAcl); // 0x004345CC
	public SystemAcl(bool isContainer, bool isDS, byte revision, int capacity); // 0x004345A8

	// Methods
	public void AddAudit(AuditFlags auditFlags, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags); // 0x004345F4
	public void AddAudit(AuditFlags auditFlags, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType); // 0x0043467C
	public bool RemoveAudit(AuditFlags auditFlags, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags); // 0x00434704
	public bool RemoveAudit(AuditFlags auditFlags, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType); // 0x0043478C
	public void RemoveAuditSpecific(AuditFlags auditFlags, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags); // 0x00434814
	public void RemoveAuditSpecific(AuditFlags auditFlags, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType); // 0x0043489C
	public void SetAudit(AuditFlags auditFlags, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags); // 0x00434924
	public void SetAudit(AuditFlags auditFlags, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType); // 0x004349AC
}

// Namespace: System.Security.Cryptography.X509Certificates
[Serializable]
public class X509Certificate : ISerializable, IDeserializationCallback // TypeDefIndex: 1265
{
	// Fields
	private X509Certificate x509; // 0x08
	private bool hideDates; // 0x0C
	private byte[] cachedCertificateHash; // 0x10
	private string issuer_name; // 0x14
	private string subject_name; // 0x18

	// Properties
	public string Issuer { get; } // 0x003D7D9C 
	public string Subject { get; } // 0x003D7C70 
	public IntPtr Handle { get; } // 0x003D7EC8 

	// Constructors
	internal X509Certificate(byte[] data, bool dates); // 0x003D5C18
	public X509Certificate(byte[] data); // 0x003D5C74
	public X509Certificate(IntPtr handle); // 0x003D5C7C
	public X509Certificate(X509Certificate cert); // 0x003D5D74
	public X509Certificate(); // 0x003D5E80
	public X509Certificate(byte[] rawData, string password); // 0x003D5E88
	public X509Certificate(byte[] rawData, SecureString password); // 0x003D5ED4
	public X509Certificate(byte[] rawData, string password, X509KeyStorageFlags keyStorageFlags); // 0x003D5F20
	public X509Certificate(byte[] rawData, SecureString password, X509KeyStorageFlags keyStorageFlags); // 0x003D5F70
	public X509Certificate(string fileName); // 0x003D5FC0
	public X509Certificate(string fileName, string password); // 0x003D6008
	public X509Certificate(string fileName, SecureString password); // 0x003D6054
	public X509Certificate(string fileName, string password, X509KeyStorageFlags keyStorageFlags); // 0x003D60A0
	public X509Certificate(string fileName, SecureString password, X509KeyStorageFlags keyStorageFlags); // 0x003D60F0
	public X509Certificate(SerializationInfo info, StreamingContext context); // 0x003D6140

	// Methods
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender); // 0x003D628C
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x003D6290
	private string tostr(byte[] data); // 0x003D633C
	public static X509Certificate CreateFromCertFile(string filename); // 0x003D6450
	public static X509Certificate CreateFromSignedFile(string filename); // 0x003D66D0
	private void InitFromHandle(IntPtr handle); // 0x003D69B8
	public virtual bool Equals(X509Certificate other); // 0x003D6B64
	public virtual byte[] GetCertHash(); // 0x003D6DBC
	public virtual string GetCertHashString(); // 0x003D6EDC
	public virtual string GetEffectiveDateString(); // 0x003D6F00
	public virtual string GetExpirationDateString(); // 0x003D7030
	public virtual string GetFormat(); // 0x003D7160
	public override int GetHashCode(); // 0x003D71BC
	public virtual string GetIssuerName(); // 0x003D72B4
	public virtual string GetKeyAlgorithm(); // 0x003D7380
	public virtual byte[] GetKeyAlgorithmParameters(); // 0x003D744C
	public virtual string GetKeyAlgorithmParametersString(); // 0x003D756C
	public virtual string GetName(); // 0x003D7590
	public virtual byte[] GetPublicKey(); // 0x003D765C
	public virtual string GetPublicKeyString(); // 0x003D7728
	public virtual byte[] GetRawCertData(); // 0x003D774C
	public virtual string GetRawCertDataString(); // 0x003D7818
	public virtual byte[] GetSerialNumber(); // 0x003D78EC
	public virtual string GetSerialNumberString(); // 0x003D79B8
	public override string ToString(); // 0x003D79E8
	public virtual string ToString(bool fVerbose); // 0x003D79F0
	private static byte[] Load(string fileName); // 0x003D64D0
	public override bool Equals(object obj); // 0x003D7F18
	public virtual byte[] Export(X509ContentType contentType); // 0x003D7FC8
	public virtual byte[] Export(X509ContentType contentType, string password); // 0x003D8314
	public virtual byte[] Export(X509ContentType contentType, SecureString password); // 0x003D83E8
	internal byte[] Export(X509ContentType contentType, byte[] password); // 0x003D7FD0
	public virtual void Import(byte[] rawData); // 0x003D8428
	public virtual void Import(byte[] rawData, string password, X509KeyStorageFlags keyStorageFlags); // 0x003D8458
	public virtual void Import(byte[] rawData, SecureString password, X509KeyStorageFlags keyStorageFlags); // 0x003D889C
	public virtual void Import(string fileName); // 0x003D88C8
	public virtual void Import(string fileName, string password, X509KeyStorageFlags keyStorageFlags); // 0x003D890C
	public virtual void Import(string fileName, SecureString password, X509KeyStorageFlags keyStorageFlags); // 0x003D8958
	public virtual void Reset(); // 0x003D89A0
}

// Namespace: 
internal struct CertificateContext // TypeDefIndex: 1266
{
	// Fields
	public uint dwCertEncodingType; // 0x08
	public IntPtr pbCertEncoded; // 0x0C
	public uint cbCertEncoded; // 0x10
	public IntPtr pCertInfo; // 0x14
	public IntPtr hCertStore; // 0x18

}

// Namespace: System.Security.Cryptography.X509Certificates
public enum X509ContentType // TypeDefIndex: 1267
{
	Unknown = 0,
	Cert = 1,
	SerializedCert = 2,
	Pfx = 3,
	Pkcs12 = 3,
	SerializedStore = 4,
	Pkcs7 = 5,
	Authenticode = 6
}

// Namespace: System.Security.Cryptography.X509Certificates
[Serializable]
public enum X509KeyStorageFlags // TypeDefIndex: 1268
{
	DefaultKeySet = 0,
	UserKeySet = 1,
	MachineKeySet = 2,
	Exportable = 4,
	UserProtected = 8,
	PersistKeySet = 16
}

// Namespace: System.Security.Cryptography
public abstract class AsymmetricAlgorithm : IDisposable // TypeDefIndex: 1269
{
	// Fields
	protected int KeySizeValue; // 0x08
	protected KeySizes[] LegalKeySizesValue; // 0x0C

	// Properties
	public abstract string KeyExchangeAlgorithm { get; }
	public virtual int KeySize { get; set; } // 0x00436490 0x00436498
	public virtual KeySizes[] LegalKeySizes { get; } // 0x00436638 
	public abstract string SignatureAlgorithm { get; }

	// Constructors
	protected AsymmetricAlgorithm(); // 0x00436454

	// Methods
	private void System.IDisposable.Dispose(); // 0x0043645C
	public void Clear(); // 0x00436640
	protected abstract void Dispose(bool disposing);
	public abstract void FromXmlString(string xmlString);
	public abstract string ToXmlString(bool includePrivateParameters);
	public static AsymmetricAlgorithm Create(); // 0x00436654
	public static AsymmetricAlgorithm Create(string algName); // 0x004366B0
	internal static byte[] GetNamedParam(string xml, string param); // 0x00436808
}

// Namespace: System.Security.Cryptography
public abstract class AsymmetricKeyExchangeDeformatter // TypeDefIndex: 1270
{
	// Properties
	public abstract string Parameters { get; set; }

	// Constructors
	protected AsymmetricKeyExchangeDeformatter(); // 0x004369F0

	// Methods
	public abstract byte[] DecryptKeyExchange(byte[] rgb);
	public abstract void SetKey(AsymmetricAlgorithm key);
}

// Namespace: System.Security.Cryptography
public abstract class AsymmetricKeyExchangeFormatter // TypeDefIndex: 1271
{
	// Properties
	public abstract string Parameters { get; }

	// Constructors
	protected AsymmetricKeyExchangeFormatter(); // 0x004369F8

	// Methods
	public abstract byte[] CreateKeyExchange(byte[] data);
	public abstract byte[] CreateKeyExchange(byte[] data, Type symAlgType);
	public abstract void SetKey(AsymmetricAlgorithm key);
}

// Namespace: System.Security.Cryptography
public abstract class AsymmetricSignatureDeformatter // TypeDefIndex: 1272
{
	// Constructors
	protected AsymmetricSignatureDeformatter(); // 0x00436A00

	// Methods
	public abstract void SetHashAlgorithm(string strName);
	public abstract void SetKey(AsymmetricAlgorithm key);
	public abstract bool VerifySignature(byte[] rgbHash, byte[] rgbSignature);
	public virtual bool VerifySignature(HashAlgorithm hash, byte[] rgbSignature); // 0x00436A08
}

// Namespace: System.Security.Cryptography
public abstract class AsymmetricSignatureFormatter // TypeDefIndex: 1273
{
	// Constructors
	protected AsymmetricSignatureFormatter(); // 0x00436B18

	// Methods
	public abstract void SetHashAlgorithm(string strName);
	public abstract void SetKey(AsymmetricAlgorithm key);
	public abstract byte[] CreateSignature(byte[] rgbHash);
	public virtual byte[] CreateSignature(HashAlgorithm hash); // 0x00436B20
}

// Namespace: System.Security.Cryptography
internal static class Base64Constants // TypeDefIndex: 1274
{
	// Fields
	public static readonly byte[] EncodeTable; // 0x00
	public static readonly byte[] DecodeTable; // 0x04

	// Constructors
	private static Base64Constants(); // 0x00436C28

}

// Namespace: System.Security.Cryptography
[Serializable]
public enum CipherMode // TypeDefIndex: 1275
{
	CBC = 1,
	ECB = 2,
	OFB = 3,
	CFB = 4,
	CTS = 5
}

// Namespace: System.Security.Cryptography
public sealed class CryptoAPITransform : IDisposable, ICryptoTransform // TypeDefIndex: 1276
{
	// Fields
	private bool m_disposed; // 0x08

	// Properties
	public bool CanReuseTransform { get; } // 0x00436D44 
	public bool CanTransformMultipleBlocks { get; } // 0x00436D4C 
	public int InputBlockSize { get; } // 0x00436D54 
	public IntPtr KeyHandle { get; } // 0x00436D5C 
	public int OutputBlockSize { get; } // 0x00436DAC 

	// Constructors
	internal CryptoAPITransform(); // 0x00436CF8

	// Methods
	private void System.IDisposable.Dispose(); // 0x00436D18
	public void Clear(); // 0x00436DB4
	private void Dispose(bool disposing); // 0x00436D30
	public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset); // 0x00436DC8
	public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x00436DD0
	public void Reset(); // 0x00436DD8
}

// Namespace: System.Security.Cryptography
public class CryptoConfig // TypeDefIndex: 1277
{
	// Fields
	private const string defaultNamespace = "System.Security.Cryptography."; // 0x00
	private const string defaultSHA1 = "System.Security.Cryptography.SHA1CryptoServiceProvider"; // 0x00
	private const string defaultMD5 = "System.Security.Cryptography.MD5CryptoServiceProvider"; // 0x00
	private const string defaultSHA256 = "System.Security.Cryptography.SHA256Managed"; // 0x00
	private const string defaultSHA384 = "System.Security.Cryptography.SHA384Managed"; // 0x00
	private const string defaultSHA512 = "System.Security.Cryptography.SHA512Managed"; // 0x00
	private const string defaultRSA = "System.Security.Cryptography.RSACryptoServiceProvider"; // 0x00
	private const string defaultDSA = "System.Security.Cryptography.DSACryptoServiceProvider"; // 0x00
	private const string defaultDES = "System.Security.Cryptography.DESCryptoServiceProvider"; // 0x00
	private const string default3DES = "System.Security.Cryptography.TripleDESCryptoServiceProvider"; // 0x00
	private const string defaultRC2 = "System.Security.Cryptography.RC2CryptoServiceProvider"; // 0x00
	private const string defaultAES = "System.Security.Cryptography.RijndaelManaged"; // 0x00
	private const string defaultRNG = "System.Security.Cryptography.RNGCryptoServiceProvider"; // 0x00
	private const string defaultHMAC = "System.Security.Cryptography.HMACSHA1"; // 0x00
	private const string defaultMAC3DES = "System.Security.Cryptography.MACTripleDES"; // 0x00
	private const string defaultDSASigDesc = "System.Security.Cryptography.DSASignatureDescription"; // 0x00
	private const string defaultRSASigDesc = "System.Security.Cryptography.RSAPKCS1SHA1SignatureDescription"; // 0x00
	private const string defaultRIPEMD160 = "System.Security.Cryptography.RIPEMD160Managed"; // 0x00
	private const string defaultHMACMD5 = "System.Security.Cryptography.HMACMD5"; // 0x00
	private const string defaultHMACRIPEMD160 = "System.Security.Cryptography.HMACRIPEMD160"; // 0x00
	private const string defaultHMACSHA256 = "System.Security.Cryptography.HMACSHA256"; // 0x00
	private const string defaultHMACSHA384 = "System.Security.Cryptography.HMACSHA384"; // 0x00
	private const string defaultHMACSHA512 = "System.Security.Cryptography.HMACSHA512"; // 0x00
	private const string defaultC14N = "System.Security.Cryptography.Xml.XmlDsigC14NTransform, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	private const string defaultC14NWithComments = "System.Security.Cryptography.Xml.XmlDsigC14NWithCommentsTransform, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	private const string defaultBase64 = "System.Security.Cryptography.Xml.XmlDsigBase64Transform, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	private const string defaultXPath = "System.Security.Cryptography.Xml.XmlDsigXPathTransform, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	private const string defaultXslt = "System.Security.Cryptography.Xml.XmlDsigXsltTransform, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	private const string defaultEnveloped = "System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	private const string defaultXmlDecryption = "System.Security.Cryptography.Xml.XmlDecryptionTransform, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	private const string defaultExcC14N = "System.Security.Cryptography.Xml.XmlDsigExcC14NTransform, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	private const string defaultExcC14NWithComments = "System.Security.Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	private const string defaultX509Data = "System.Security.Cryptography.Xml.KeyInfoX509Data, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	private const string defaultKeyName = "System.Security.Cryptography.Xml.KeyInfoName, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	private const string defaultKeyValueDSA = "System.Security.Cryptography.Xml.DSAKeyValue, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	private const string defaultKeyValueRSA = "System.Security.Cryptography.Xml.RSAKeyValue, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	private const string defaultRetrievalMethod = "System.Security.Cryptography.Xml.KeyInfoRetrievalMethod, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	private const string managedSHA1 = "System.Security.Cryptography.SHA1Managed"; // 0x00
	private const string oidSHA1 = "1.3.14.3.2.26"; // 0x00
	private const string oidMD5 = "1.2.840.113549.2.5"; // 0x00
	private const string oidSHA256 = "2.16.840.1.101.3.4.2.1"; // 0x00
	private const string oidSHA384 = "2.16.840.1.101.3.4.2.2"; // 0x00
	private const string oidSHA512 = "2.16.840.1.101.3.4.2.3"; // 0x00
	private const string oidDSA = "1.2.840.10040.4.1"; // 0x00
	private const string oidDES = "1.3.14.3.2.7"; // 0x00
	private const string oid3DES = "1.2.840.113549.3.7"; // 0x00
	private const string oidRC2 = "1.2.840.113549.3.2"; // 0x00
	private const string oid3DESKeyWrap = "1.2.840.113549.1.9.16.3.6"; // 0x00
	private const string nameSHA1a = "SHA"; // 0x00
	private const string nameSHA1b = "SHA1"; // 0x00
	private const string nameSHA1c = "System.Security.Cryptography.SHA1"; // 0x00
	private const string nameSHA1d = "System.Security.Cryptography.HashAlgorithm"; // 0x00
	private const string nameMD5a = "MD5"; // 0x00
	private const string nameMD5b = "System.Security.Cryptography.MD5"; // 0x00
	private const string nameSHA256a = "SHA256"; // 0x00
	private const string nameSHA256b = "SHA-256"; // 0x00
	private const string nameSHA256c = "System.Security.Cryptography.SHA256"; // 0x00
	private const string nameSHA384a = "SHA384"; // 0x00
	private const string nameSHA384b = "SHA-384"; // 0x00
	private const string nameSHA384c = "System.Security.Cryptography.SHA384"; // 0x00
	private const string nameSHA512a = "SHA512"; // 0x00
	private const string nameSHA512b = "SHA-512"; // 0x00
	private const string nameSHA512c = "System.Security.Cryptography.SHA512"; // 0x00
	private const string nameRSAa = "RSA"; // 0x00
	private const string nameRSAb = "System.Security.Cryptography.RSA"; // 0x00
	private const string nameRSAc = "System.Security.Cryptography.AsymmetricAlgorithm"; // 0x00
	private const string nameDSAa = "DSA"; // 0x00
	private const string nameDSAb = "System.Security.Cryptography.DSA"; // 0x00
	private const string nameDESa = "DES"; // 0x00
	private const string nameDESb = "System.Security.Cryptography.DES"; // 0x00
	private const string name3DESa = "3DES"; // 0x00
	private const string name3DESb = "TripleDES"; // 0x00
	private const string name3DESc = "Triple DES"; // 0x00
	private const string name3DESd = "System.Security.Cryptography.TripleDES"; // 0x00
	private const string nameRC2a = "RC2"; // 0x00
	private const string nameRC2b = "System.Security.Cryptography.RC2"; // 0x00
	private const string nameAESa = "Rijndael"; // 0x00
	private const string nameAESb = "System.Security.Cryptography.Rijndael"; // 0x00
	private const string nameAESc = "System.Security.Cryptography.SymmetricAlgorithm"; // 0x00
	private const string nameRNGa = "RandomNumberGenerator"; // 0x00
	private const string nameRNGb = "System.Security.Cryptography.RandomNumberGenerator"; // 0x00
	private const string nameKeyHasha = "System.Security.Cryptography.KeyedHashAlgorithm"; // 0x00
	private const string nameHMACSHA1a = "HMACSHA1"; // 0x00
	private const string nameHMACSHA1b = "System.Security.Cryptography.HMACSHA1"; // 0x00
	private const string nameMAC3DESa = "MACTripleDES"; // 0x00
	private const string nameMAC3DESb = "System.Security.Cryptography.MACTripleDES"; // 0x00
	private const string name3DESKeyWrap = "TripleDESKeyWrap"; // 0x00
	private const string nameRIPEMD160a = "RIPEMD160"; // 0x00
	private const string nameRIPEMD160b = "RIPEMD-160"; // 0x00
	private const string nameRIPEMD160c = "System.Security.Cryptography.RIPEMD160"; // 0x00
	private const string nameHMACa = "HMAC"; // 0x00
	private const string nameHMACb = "System.Security.Cryptography.HMAC"; // 0x00
	private const string nameHMACMD5a = "HMACMD5"; // 0x00
	private const string nameHMACMD5b = "System.Security.Cryptography.HMACMD5"; // 0x00
	private const string nameHMACRIPEMD160a = "HMACRIPEMD160"; // 0x00
	private const string nameHMACRIPEMD160b = "System.Security.Cryptography.HMACRIPEMD160"; // 0x00
	private const string nameHMACSHA256a = "HMACSHA256"; // 0x00
	private const string nameHMACSHA256b = "System.Security.Cryptography.HMACSHA256"; // 0x00
	private const string nameHMACSHA384a = "HMACSHA384"; // 0x00
	private const string nameHMACSHA384b = "System.Security.Cryptography.HMACSHA384"; // 0x00
	private const string nameHMACSHA512a = "HMACSHA512"; // 0x00
	private const string nameHMACSHA512b = "System.Security.Cryptography.HMACSHA512"; // 0x00
	private const string urlXmlDsig = "http://www.w3.org/2000/09/xmldsig#"; // 0x00
	private const string urlDSASHA1 = "http://www.w3.org/2000/09/xmldsig#dsa-sha1"; // 0x00
	private const string urlRSASHA1 = "http://www.w3.org/2000/09/xmldsig#rsa-sha1"; // 0x00
	private const string urlSHA1 = "http://www.w3.org/2000/09/xmldsig#sha1"; // 0x00
	private const string urlC14N = "http://www.w3.org/TR/2001/REC-xml-c14n-20010315"; // 0x00
	private const string urlC14NWithComments = "http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments"; // 0x00
	private const string urlBase64 = "http://www.w3.org/2000/09/xmldsig#base64"; // 0x00
	private const string urlXPath = "http://www.w3.org/TR/1999/REC-xpath-19991116"; // 0x00
	private const string urlXslt = "http://www.w3.org/TR/1999/REC-xslt-19991116"; // 0x00
	private const string urlEnveloped = "http://www.w3.org/2000/09/xmldsig#enveloped-signature"; // 0x00
	private const string urlXmlDecryption = "http://www.w3.org/2002/07/decrypt#XML"; // 0x00
	private const string urlExcC14NWithComments = "http://www.w3.org/2001/10/xml-exc-c14n#WithComments"; // 0x00
	private const string urlExcC14N = "http://www.w3.org/2001/10/xml-exc-c14n#"; // 0x00
	private const string urlSHA256 = "http://www.w3.org/2001/04/xmlenc#sha256"; // 0x00
	private const string urlSHA512 = "http://www.w3.org/2001/04/xmlenc#sha512"; // 0x00
	private const string urlHMACSHA256 = "http://www.w3.org/2001/04/xmldsig-more#hmac-sha256"; // 0x00
	private const string urlHMACSHA384 = "http://www.w3.org/2001/04/xmldsig-more#hmac-sha384"; // 0x00
	private const string urlHMACSHA512 = "http://www.w3.org/2001/04/xmldsig-more#hmac-sha512"; // 0x00
	private const string urlHMACRIPEMD160 = "http://www.w3.org/2001/04/xmldsig-more#hmac-ripemd160"; // 0x00
	private const string urlX509Data = "http://www.w3.org/2000/09/xmldsig# X509Data"; // 0x00
	private const string urlKeyName = "http://www.w3.org/2000/09/xmldsig# KeyName"; // 0x00
	private const string urlKeyValueDSA = "http://www.w3.org/2000/09/xmldsig# KeyValue/DSAKeyValue"; // 0x00
	private const string urlKeyValueRSA = "http://www.w3.org/2000/09/xmldsig# KeyValue/RSAKeyValue"; // 0x00
	private const string urlRetrievalMethod = "http://www.w3.org/2000/09/xmldsig# RetrievalMethod"; // 0x00
	private const string oidX509SubjectKeyIdentifier = "2.5.29.14"; // 0x00
	private const string oidX509KeyUsage = "2.5.29.15"; // 0x00
	private const string oidX509BasicConstraints = "2.5.29.19"; // 0x00
	private const string oidX509EnhancedKeyUsage = "2.5.29.37"; // 0x00
	private const string nameX509SubjectKeyIdentifier = "System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"; // 0x00
	private const string nameX509KeyUsage = "System.Security.Cryptography.X509Certificates.X509KeyUsageExtension, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"; // 0x00
	private const string nameX509BasicConstraints = "System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"; // 0x00
	private const string nameX509EnhancedKeyUsage = "System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"; // 0x00
	private const string nameX509Chain = "X509Chain"; // 0x00
	private const string defaultX509Chain = "System.Security.Cryptography.X509Certificates.X509Chain, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"; // 0x00
	private static object lockObject; // 0x00
	private static Hashtable algorithms; // 0x04
	private static Hashtable oid; // 0x08

	// Constructors
	public CryptoConfig(); // 0x00436DDC
	private static CryptoConfig(); // 0x00436DE4

	// Methods
	private static void Initialize(); // 0x00436E64
	private static void LoadConfig(string filename, Hashtable algorithms, Hashtable oid); // 0x004392B0
	public static object CreateFromName(string name); // 0x00436784
	public static object CreateFromName(string name, object[] args); // 0x00439600
	public static string MapNameToOID(string name); // 0x00439960
	public static byte[] EncodeOID(string str); // 0x00439BBC
	private static byte[] EncodeLongNumber(long x); // 0x0043A204
}

// Namespace: 
private class CryptoHandler : IContentHandler // TypeDefIndex: 1278
{
	// Fields
	private Hashtable algorithms; // 0x08
	private Hashtable oid; // 0x0C
	private Hashtable names; // 0x10
	private Hashtable classnames; // 0x14
	private int level; // 0x18

	// Constructors
	public CryptoHandler(Hashtable algorithms, Hashtable oid); // 0x0043955C

	// Methods
	public void OnStartParsing(SmallXmlParser parser); // 0x0043A42C
	public void OnEndParsing(SmallXmlParser parser); // 0x0043A430
	private string Get(IAttrList attrs, string name); // 0x0043A8C0
	public void OnStartElement(string name, IAttrList attrs); // 0x0043ABE0
	public void OnEndElement(string name); // 0x0043B134
	public void OnProcessingInstruction(string name, string text); // 0x0043B354
	public void OnChars(string text); // 0x0043B358
	public void OnIgnorableWhitespace(string text); // 0x0043B35C
}

// Namespace: System.Security.Cryptography
public class CryptoStream : Stream // TypeDefIndex: 1279
{
	// Fields
	private Stream _stream; // 0x08
	private ICryptoTransform _transform; // 0x0C
	private CryptoStreamMode _mode; // 0x10
	private byte[] _currentBlock; // 0x14
	private bool _disposed; // 0x18
	private bool _flushedFinalBlock; // 0x19
	private int _partialCount; // 0x1C
	private bool _endOfStream; // 0x20
	private byte[] _waitingBlock; // 0x24
	private int _waitingCount; // 0x28
	private byte[] _transformedBlock; // 0x2C
	private int _transformedPos; // 0x30
	private int _transformedCount; // 0x34
	private byte[] _workingBlock; // 0x38
	private int _workingCount; // 0x3C

	// Properties
	public override bool CanRead { get; } // 0x0043B858 
	public override bool CanSeek { get; } // 0x0043B86C 
	public override bool CanWrite { get; } // 0x0043B874 
	public override long Length { get; } // 0x0043B884 
	public override long Position { get; set; } // 0x0043B920 0x0043B9BC

	// Constructors
	public CryptoStream(Stream stream, ICryptoTransform transform, CryptoStreamMode mode); // 0x0043B360

	// Methods
	protected override void Finalize(); // 0x0043B7E0
	public void Clear(); // 0x0043BA58
	public override void Close(); // 0x0043BA8C
	public override int Read(out byte[] buffer, int offset, int count); // 0x0043BD90
	public override void Write(byte[] buffer, int offset, int count); // 0x0043CA60
	public override void Flush(); // 0x0043D548
	public void FlushFinalBlock(); // 0x0043BAD4
	public override long Seek(long offset, SeekOrigin origin); // 0x0043D564
	public override void SetLength(long value); // 0x0043D600
	protected override void Dispose(bool disposing); // 0x0043D69C
}

// Namespace: System.Security.Cryptography
[Serializable]
public enum CryptoStreamMode // TypeDefIndex: 1280
{
	Read = 0,
	Write = 1
}

// Namespace: System.Security.Cryptography
[Serializable]
public class CryptographicException : SystemException, _Exception // TypeDefIndex: 1281
{
	// Constructors
	public CryptographicException(); // 0x0043D710
	public CryptographicException(int hr); // 0x0043D790
	public CryptographicException(string message); // 0x00436614
	public CryptographicException(string message, Exception inner); // 0x0043D7B0
	public CryptographicException(string format, string insert); // 0x0043D7D4
	protected CryptographicException(SerializationInfo info, StreamingContext context); // 0x0043D880

}

// Namespace: System.Security.Cryptography
[Serializable]
public class CryptographicUnexpectedOperationException : CryptographicException // TypeDefIndex: 1282
{
	// Constructors
	public CryptographicUnexpectedOperationException(); // 0x0043D8A0
	public CryptographicUnexpectedOperationException(string message); // 0x0043A1E0
	public CryptographicUnexpectedOperationException(string message, Exception inner); // 0x0043D920
	public CryptographicUnexpectedOperationException(string format, string insert); // 0x0043D944
	protected CryptographicUnexpectedOperationException(SerializationInfo info, StreamingContext context); // 0x0043D9F0

}

// Namespace: System.Security.Cryptography
public sealed class CspKeyContainerInfo // TypeDefIndex: 1283
{
	// Fields
	private CspParameters _params; // 0x08
	internal bool _random; // 0x0C

	// Properties
	public bool Accessible { get; } // 0x0043DA38 
	public CryptoKeySecurity CryptoKeySecurity { get; } // 0x0043DA40 
	public bool Exportable { get; } // 0x0043DA48 
	public bool HardwareDevice { get; } // 0x0043DA50 
	public string KeyContainerName { get; } // 0x0043DA58 
	public KeyNumber KeyNumber { get; } // 0x0043DA7C 
	public bool MachineKeyStore { get; } // 0x0043DAA0 
	public bool Protected { get; } // 0x0043DAA8 
	public string ProviderName { get; } // 0x0043DAB0 
	public int ProviderType { get; } // 0x0043DAD4 
	public bool RandomlyGenerated { get; } // 0x0043DAF8 
	public bool Removable { get; } // 0x0043DB00 
	public string UniqueKeyContainerName { get; } // 0x0043DB08 

	// Constructors
	public CspKeyContainerInfo(CspParameters parameters); // 0x0043DA10

}

// Namespace: System.Security.Cryptography
public sealed class CspParameters // TypeDefIndex: 1284
{
	// Fields
	private CspProviderFlags _Flags; // 0x08
	public string KeyContainerName; // 0x0C
	public int KeyNumber; // 0x10
	public string ProviderName; // 0x14
	public int ProviderType; // 0x18
	private SecureString _password; // 0x1C
	private IntPtr _windowHandle; // 0x20

	// Properties
	public CspProviderFlags Flags { get; set; } // 0x0043DDC8 0x0043DDD0
	public CryptoKeySecurity CryptoKeySecurity { get; set; } // 0x0043DDD8 0x0043DCF4
	public SecureString KeyPassword { get; set; } // 0x0043DE60 0x0043DE68
	public IntPtr ParentWindowHandle { get; set; } // 0x0043DE70 0x0043DE78

	// Constructors
	public CspParameters(); // 0x0043DBD8
	public CspParameters(int dwTypeIn); // 0x0043DC0C
	public CspParameters(int dwTypeIn, string strProviderNameIn); // 0x0043DC40
	public CspParameters(int dwTypeIn, string strProviderNameIn, string strContainerNameIn); // 0x0043DC74
	public CspParameters(int providerType, string providerName, string keyContainerName, CryptoKeySecurity cryptoKeySecurity, IntPtr parentWindowHandle); // 0x0043DCA8
	public CspParameters(int providerType, string providerName, string keyContainerName, CryptoKeySecurity cryptoKeySecurity, SecureString keyPassword); // 0x0043DD7C

}

// Namespace: System.Security.Cryptography
[Serializable]
public enum CspProviderFlags // TypeDefIndex: 1285
{
	NoFlags = 0,
	UseMachineKeyStore = 1,
	UseDefaultKeyContainer = 2,
	UseNonExportableKey = 4,
	UseExistingKey = 8,
	UseArchivableKey = 16,
	UseUserProtectedKey = 32,
	NoPrompt = 64
}

// Namespace: System.Security.Cryptography
public abstract class DES : SymmetricAlgorithm // TypeDefIndex: 1286
{
	// Fields
	private const int keySizeByte = 8; // 0x00
	internal static readonly byte[] weakKeys; // 0x00
	internal static readonly byte[] semiWeakKeys; // 0x04

	// Properties
	public override byte[] Key { get; set; } // 0x0043E910 0x0043E9E8

	// Constructors
	protected DES(); // 0x0043DE80
	private static DES(); // 0x0043E080

	// Methods
	public static DES Create(); // 0x0043E174
	public static DES Create(string algName); // 0x0043E1FC
	public static bool IsWeakKey(byte[] rgbKey); // 0x0043E2D0
	public static bool IsSemiWeakKey(byte[] rgbKey); // 0x0043E5F0
}

// Namespace: System.Security.Cryptography
internal class DESTransform : SymmetricTransform // TypeDefIndex: 1287
{
	// Fields
	internal static readonly int KEY_BIT_SIZE; // 0x00
	internal static readonly int KEY_BYTE_SIZE; // 0x04
	internal static readonly int BLOCK_BIT_SIZE; // 0x08
	internal static readonly int BLOCK_BYTE_SIZE; // 0x0C
	private byte[] keySchedule; // 0x34
	private byte[] byteBuff; // 0x38
	private uint[] dwordBuff; // 0x3C
	private static readonly uint[] spBoxes; // 0x10
	private static readonly byte[] PC1; // 0x14
	private static readonly byte[] leftRotTotal; // 0x18
	private static readonly byte[] PC2; // 0x1C
	internal static readonly uint[] ipTab; // 0x20
	internal static readonly uint[] fpTab; // 0x24

	// Constructors
	internal DESTransform(SymmetricAlgorithm symmAlgo, bool encryption, byte[] key, byte[] iv); // 0x0043ED70
	private static DESTransform(); // 0x0043F964

	// Methods
	private uint CipherFunct(uint r, int n); // 0x0043FB6C
	internal static void Permutation(byte[] input, byte[] output, uint[] permTab, bool preSwap); // 0x00440068
	private static void BSwap(byte[] byteBuff); // 0x004406B0
	internal void SetKey(byte[] key); // 0x0043F304
	public void ProcessBlock(byte[] input, byte[] output); // 0x00440920
	protected override void ECB(byte[] input, byte[] output); // 0x00440D94
	internal static byte[] GetStrongKey(); // 0x0043F1E0
}

// Namespace: System.Security.Cryptography
public sealed class DESCryptoServiceProvider : DES // TypeDefIndex: 1288
{
	// Constructors
	public DESCryptoServiceProvider(); // 0x0043EC64

	// Methods
	public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV); // 0x0043ECE4
	public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV); // 0x0043F038
	public override void GenerateIV(); // 0x0043F0C4
	public override void GenerateKey(); // 0x0043F160
}

// Namespace: System.Security.Cryptography
public abstract class DSA : AsymmetricAlgorithm // TypeDefIndex: 1289
{
	// Constructors
	protected DSA(); // 0x00440E7C

	// Methods
	public static DSA Create(); // 0x00440E84
	public static DSA Create(string algName); // 0x00440EE0
	public abstract byte[] CreateSignature(byte[] rgbHash);
	public abstract DSAParameters ExportParameters(bool includePrivateParameters);
	internal void ZeroizePrivateKey(DSAParameters parameters); // 0x00440FB4
	public override void FromXmlString(string xmlString); // 0x00440FD0
	public abstract void ImportParameters(DSAParameters parameters);
	public override string ToXmlString(bool includePrivateParameters); // 0x004413D0
	public abstract bool VerifySignature(byte[] rgbHash, byte[] rgbSignature);
}

// Namespace: System.Security.Cryptography
public sealed class DSACryptoServiceProvider : DSA, ICspAsymmetricAlgorithm // TypeDefIndex: 1290
{
	// Fields
	private const int PROV_DSS_DH = 13; // 0x00
	private KeyPairPersistence store; // 0x10
	private bool persistKey; // 0x14
	private bool persisted; // 0x15
	private bool privateKeyExportable; // 0x16
	private bool m_disposed; // 0x17
	private DSAManaged dsa; // 0x18
	private static bool useMachineKeyStore; // 0x00

	// Properties
	public override string KeyExchangeAlgorithm { get; } // 0x00442150 
	public override int KeySize { get; } // 0x00442158 
	public bool PersistKeyInCsp { get; set; } // 0x0044218C 0x00442194
	public bool PublicOnly { get; } // 0x0044219C 
	public override string SignatureAlgorithm { get; } // 0x004421C8 
	public static bool UseMachineKeyStore { get; set; } // 0x00442224 0x004422B0
	public CspKeyContainerInfo CspKeyContainerInfo { get; } // 0x00442FD8 

	// Constructors
	public DSACryptoServiceProvider(); // 0x00441CFC
	public DSACryptoServiceProvider(CspParameters parameters); // 0x00442054
	public DSACryptoServiceProvider(int dwKeySize); // 0x00442060
	public DSACryptoServiceProvider(int dwKeySize, CspParameters parameters); // 0x00441D08
	private static DSACryptoServiceProvider(); // 0x00442068

	// Methods
	protected override void Finalize(); // 0x0044206C
	public override DSAParameters ExportParameters(bool includePrivateParameters); // 0x00442340
	public override void ImportParameters(DSAParameters parameters); // 0x00442434
	public override byte[] CreateSignature(byte[] rgbHash); // 0x004424C4
	public byte[] SignData(byte[] buffer); // 0x00442500
	public byte[] SignData(byte[] buffer, int offset, int count); // 0x00442638
	public byte[] SignData(Stream inputStream); // 0x00442954
	public byte[] SignHash(byte[] rgbHash, string str); // 0x00442B58
	public bool VerifyData(byte[] rgbData, byte[] rgbSignature); // 0x00442CD4
	public bool VerifyHash(byte[] rgbHash, string str, byte[] rgbSignature); // 0x00442D48
	public override bool VerifySignature(byte[] rgbHash, byte[] rgbSignature); // 0x00442EE4
	protected override void Dispose(bool disposing); // 0x004420D4
	private void OnKeyGenerated(object sender, EventArgs e); // 0x00442F28
	public byte[] ExportCspBlob(bool includePrivateParameters); // 0x00442FE0
	public void ImportCspBlob(byte[] keyBlob); // 0x00442FF8
}

// Namespace: System.Security.Cryptography
[Serializable]
public struct DSAParameters // TypeDefIndex: 1291
{
	// Fields
	public int Counter; // 0x08
	public byte[] G; // 0x0C
	public byte[] J; // 0x10
	public byte[] P; // 0x14
	public byte[] Q; // 0x18
	public byte[] Seed; // 0x1C
	[NonSerialized]	public byte[] X; // 0x20
	public byte[] Y; // 0x24

}

// Namespace: System.Security.Cryptography
public class DSASignatureDeformatter : AsymmetricSignatureDeformatter // TypeDefIndex: 1292
{
	// Fields
	private DSA dsa; // 0x08

	// Constructors
	public DSASignatureDeformatter(); // 0x0044334C
	public DSASignatureDeformatter(AsymmetricAlgorithm key); // 0x00443354

	// Methods
	public override void SetHashAlgorithm(string strName); // 0x00443388
	public override void SetKey(AsymmetricAlgorithm key); // 0x00443518
	public override bool VerifySignature(byte[] rgbHash, byte[] rgbSignature); // 0x00443610
}

// Namespace: System.Security.Cryptography
public class DSASignatureFormatter : AsymmetricSignatureFormatter // TypeDefIndex: 1293
{
	// Fields
	private DSA dsa; // 0x08

	// Constructors
	public DSASignatureFormatter(); // 0x00443790
	public DSASignatureFormatter(AsymmetricAlgorithm key); // 0x00443798

	// Methods
	public override byte[] CreateSignature(byte[] rgbHash); // 0x004437CC
	public override void SetHashAlgorithm(string strName); // 0x0044389C
	public override void SetKey(AsymmetricAlgorithm key); // 0x00443A2C
}

// Namespace: System.Security.Cryptography
public abstract class DeriveBytes // TypeDefIndex: 1294
{
	// Constructors
	protected DeriveBytes(); // 0x00443B24

	// Methods
	public abstract byte[] GetBytes(int cb);
	public abstract void Reset();
}

// Namespace: System.Security.Cryptography
[Serializable]
public enum FromBase64TransformMode // TypeDefIndex: 1295
{
	IgnoreWhiteSpaces = 0,
	DoNotIgnoreWhiteSpaces = 1
}

// Namespace: System.Security.Cryptography
public class FromBase64Transform : IDisposable, ICryptoTransform // TypeDefIndex: 1296
{
	// Fields
	private const byte TerminatorByte = 61; // 0x00
	private FromBase64TransformMode mode; // 0x08
	private byte[] accumulator; // 0x0C
	private int accPtr; // 0x10
	private bool m_disposed; // 0x14
	private byte[] lookupTable; // 0x18

	// Properties
	public bool CanTransformMultipleBlocks { get; } // 0x00443C68 
	public virtual bool CanReuseTransform { get; } // 0x00443C70 
	public int InputBlockSize { get; } // 0x00443C78 
	public int OutputBlockSize { get; } // 0x00443C80 

	// Constructors
	public FromBase64Transform(); // 0x00443B2C
	public FromBase64Transform(FromBase64TransformMode whitespaces); // 0x00443B34

	// Methods
	private void System.IDisposable.Dispose(); // 0x00443BBC
	protected override void Finalize(); // 0x00443BF0
	public void Clear(); // 0x00443C88
	protected virtual void Dispose(bool disposing); // 0x00443C9C
	private byte lookup(byte input); // 0x00443CEC
	private int ProcessBlock(byte[] output, int offset); // 0x00443E4C
	private void CheckInputParameters(byte[] inputBuffer, int inputOffset, int inputCount); // 0x00444318
	public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset); // 0x00444590
	public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x00444854
}

// Namespace: System.Security.Cryptography
public abstract class HMAC : KeyedHashAlgorithm // TypeDefIndex: 1297
{
	// Fields
	private bool _disposed; // 0x1C
	private string _hashName; // 0x20
	private HashAlgorithm _algo; // 0x24
	private BlockProcessor _block; // 0x28
	private int _blockSizeValue; // 0x2C

	// Properties
	protected int BlockSizeValue { get; set; } // 0x00444CA8 0x00444CB0
	public string HashName { get; set; } // 0x00444CB8 0x00444CC0
	public override byte[] Key { get; set; } // 0x00444DB4 0x00444F2C
	internal BlockProcessor Block { get; } // 0x00445168 

	// Constructors
	protected HMAC(); // 0x00444C5C

	// Methods
	private byte[] KeySetup(byte[] key, byte padding); // 0x004451F8
	protected override void Dispose(bool disposing); // 0x00445368
	protected override void HashCore(byte[] rgb, int ib, int cb); // 0x004453DC
	protected override byte[] HashFinal(); // 0x00445500
	public override void Initialize(); // 0x00445C8C
	public static HMAC Create(); // 0x00445E0C
	public static HMAC Create(string algorithmName); // 0x00445E68
}

// Namespace: System.Security.Cryptography
public class HMACMD5 : HMAC // TypeDefIndex: 1298
{
	// Constructors
	public HMACMD5(); // 0x00445F3C
	public HMACMD5(byte[] key); // 0x00445F64

}

// Namespace: System.Security.Cryptography
public class HMACRIPEMD160 : HMAC // TypeDefIndex: 1299
{
	// Constructors
	public HMACRIPEMD160(); // 0x00446010
	public HMACRIPEMD160(byte[] key); // 0x00446038

}

// Namespace: System.Security.Cryptography
public class HMACSHA1 : HMAC // TypeDefIndex: 1300
{
	// Constructors
	public HMACSHA1(); // 0x004460E4
	public HMACSHA1(byte[] key); // 0x0044610C
	public HMACSHA1(byte[] key, bool useManagedSha1); // 0x004461B8

}

// Namespace: System.Security.Cryptography
public class HMACSHA256 : HMAC // TypeDefIndex: 1301
{
	// Constructors
	public HMACSHA256(); // 0x004462C4
	public HMACSHA256(byte[] key); // 0x004462EC

}

// Namespace: System.Security.Cryptography
public class HMACSHA384 : HMAC // TypeDefIndex: 1302
{
	// Fields
	private static bool legacy_mode; // 0x00
	private bool legacy; // 0x30

	// Properties
	public bool ProduceLegacyHmacValues { get; set; } // 0x00446660 0x00446568

	// Constructors
	public HMACSHA384(); // 0x00446398
	public HMACSHA384(byte[] key); // 0x00446464
	private static HMACSHA384(); // 0x0044659C

}

// Namespace: System.Security.Cryptography
public class HMACSHA512 : HMAC // TypeDefIndex: 1303
{
	// Fields
	private static bool legacy_mode; // 0x00
	private bool legacy; // 0x30

	// Properties
	public bool ProduceLegacyHmacValues { get; set; } // 0x00446930 0x00446838

	// Constructors
	public HMACSHA512(); // 0x00446668
	public HMACSHA512(byte[] key); // 0x00446734
	private static HMACSHA512(); // 0x0044686C

}

// Namespace: System.Security.Cryptography
public abstract class HashAlgorithm : IDisposable, ICryptoTransform // TypeDefIndex: 1304
{
	// Fields
	protected internal byte[] HashValue; // 0x08
	protected int HashSizeValue; // 0x0C
	protected int State; // 0x10
	private bool disposed; // 0x14

	// Properties
	public virtual bool CanTransformMultipleBlocks { get; } // 0x0044698C 
	public virtual bool CanReuseTransform { get; } // 0x00446994 
	public virtual byte[] Hash { get; } // 0x00446A0C 
	public virtual int HashSize { get; } // 0x00446AC0 
	public virtual int InputBlockSize { get; } // 0x00446AD4 
	public virtual int OutputBlockSize { get; } // 0x00446ADC 

	// Constructors
	protected HashAlgorithm(); // 0x00446938

	// Methods
	private void System.IDisposable.Dispose(); // 0x00446958
	public void Clear(); // 0x0044699C
	public byte[] ComputeHash(byte[] buffer); // 0x0044256C
	public byte[] ComputeHash(byte[] buffer, int offset, int count); // 0x004426BC
	public byte[] ComputeHash(Stream inputStream); // 0x004429C0
	public static HashAlgorithm Create(); // 0x004469B0
	public static HashAlgorithm Create(string hashName); // 0x00444CE0
	protected abstract void HashCore(byte[] array, int ibStart, int cbSize);
	protected abstract byte[] HashFinal();
	public abstract void Initialize();
	protected virtual void Dispose(bool disposing); // 0x00446AC8
	public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset); // 0x00445760
	public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x00445A74
}

// Namespace: System.Security.Cryptography
public interface ICryptoTransform : IDisposable // TypeDefIndex: 1305
{
	// Properties
	bool CanReuseTransform { get; }
	bool CanTransformMultipleBlocks { get; }
	int InputBlockSize { get; }
	int OutputBlockSize { get; }

	// Methods
	int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
	byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount);
}

// Namespace: System.Security.Cryptography
public interface ICspAsymmetricAlgorithm // TypeDefIndex: 1306
{
	// Properties
	CspKeyContainerInfo CspKeyContainerInfo { get; }

	// Methods
	byte[] ExportCspBlob(bool includePrivateParameters);
	void ImportCspBlob(byte[] rawData);
}

// Namespace: System.Security.Cryptography
[Serializable]
public enum KeyNumber // TypeDefIndex: 1307
{
	Exchange = 1,
	Signature = 2
}

// Namespace: System.Security.Cryptography
public sealed class KeySizes // TypeDefIndex: 1308
{
	// Fields
	private int _maxSize; // 0x08
	private int _minSize; // 0x0C
	private int _skipSize; // 0x10

	// Properties
	public int MaxSize { get; } // 0x00446AE4 
	public int MinSize { get; } // 0x00446AEC 
	public int SkipSize { get; } // 0x00446AF4 

	// Constructors
	public KeySizes(int minSize, int maxSize, int skipSize); // 0x0043E050

	// Methods
	internal bool IsLegal(int keySize); // 0x00446AFC
	internal static bool IsLegalKeySize(KeySizes[] legalKeys, int size); // 0x0043655C
}

// Namespace: System.Security.Cryptography
public abstract class KeyedHashAlgorithm : HashAlgorithm // TypeDefIndex: 1309
{
	// Fields
	protected byte[] KeyValue; // 0x18

	// Properties
	public virtual byte[] Key { get; set; } // 0x00444E74 0x00445028

	// Constructors
	protected KeyedHashAlgorithm(); // 0x00444C88

	// Methods
	protected override void Finalize(); // 0x00446B6C
	protected override void Dispose(bool disposing); // 0x004453A8
	private void ZeroizeKey(); // 0x00446BE4
	public static KeyedHashAlgorithm Create(); // 0x00446C00
	public static KeyedHashAlgorithm Create(string algName); // 0x00446C5C
}

// Namespace: System.Security.Cryptography
public class MACTripleDES : KeyedHashAlgorithm // TypeDefIndex: 1310
{
	// Fields
	private TripleDES tdes; // 0x1C
	private MACAlgorithm mac; // 0x20
	private bool m_disposed; // 0x24

	// Properties
	public PaddingMode Padding { get; set; } // 0x00447158 0x0044718C

	// Constructors
	public MACTripleDES(); // 0x00446D30
	public MACTripleDES(byte[] rgbKey); // 0x00446F10
	public MACTripleDES(string strTripleDES, byte[] rgbKey); // 0x00446FF0

	// Methods
	private void Setup(string strTripleDES, byte[] rgbKey); // 0x00446DAC
	protected override void Finalize(); // 0x004470E8
	protected override void Dispose(bool disposing); // 0x004471C8
	public override void Initialize(); // 0x00447258
	protected override void HashCore(byte[] rgbData, int ibStart, int cbSize); // 0x00447338
	protected override byte[] HashFinal(); // 0x00447454
}

// Namespace: System.Security.Cryptography
public abstract class MD5 : HashAlgorithm // TypeDefIndex: 1311
{
	// Constructors
	protected MD5(); // 0x0044752C

	// Methods
	public static MD5 Create(); // 0x00447554
	public static MD5 Create(string algName); // 0x004475B0
}

// Namespace: System.Security.Cryptography
public sealed class MD5CryptoServiceProvider : MD5 // TypeDefIndex: 1312
{
	// Fields
	private const int BLOCK_SIZE_BYTES = 64; // 0x00
	private const int HASH_SIZE_BYTES = 16; // 0x00
	private uint[] _H; // 0x18
	private uint[] buff; // 0x1C
	private ulong count; // 0x20
	private byte[] _ProcessingBuffer; // 0x28
	private int _ProcessingBufferCount; // 0x2C
	private static readonly uint[] K; // 0x00

	// Constructors
	public MD5CryptoServiceProvider(); // 0x00447684
	private static MD5CryptoServiceProvider(); // 0x0044784C

	// Methods
	protected override void Finalize(); // 0x004478E4
	protected override void Dispose(bool disposing); // 0x004478F4
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x00447980
	protected override byte[] HashFinal(); // 0x0044A6A8
	public override void Initialize(); // 0x0044773C
	private void ProcessBlock(byte[] inputBuffer, int inputOffset); // 0x00447A84
	private void ProcessFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x0044A7D0
	internal void AddLength(ulong length, byte[] buffer, int position); // 0x0044A9F4
}

// Namespace: System.Security.Cryptography
public abstract class MaskGenerationMethod // TypeDefIndex: 1313
{
	// Constructors
	protected MaskGenerationMethod(); // 0x001681C8

	// Methods
	public abstract byte[] GenerateMask(byte[] rgbSeed, int cbReturn);
}

// Namespace: System.Security.Cryptography
public class PKCS1MaskGenerationMethod : MaskGenerationMethod // TypeDefIndex: 1314
{
	// Fields
	private string hashName; // 0x08

	// Properties
	public string HashName { get; set; } // 0x0016823C 0x00168244

	// Constructors
	public PKCS1MaskGenerationMethod(); // 0x001681D0

	// Methods
	public override byte[] GenerateMask(byte[] rgbSeed, int cbReturn); // 0x001682C0
}

// Namespace: System.Security.Cryptography
[Serializable]
public enum PaddingMode // TypeDefIndex: 1315
{
	None = 1,
	PKCS7 = 2,
	Zeros = 3,
	ANSIX923 = 4,
	ISO10126 = 5
}

// Namespace: System.Security.Cryptography
public class PasswordDeriveBytes : DeriveBytes // TypeDefIndex: 1316
{
	// Fields
	private string HashNameValue; // 0x08
	private byte[] SaltValue; // 0x0C
	private int IterationsValue; // 0x10
	private HashAlgorithm hash; // 0x14
	private int state; // 0x18
	private byte[] password; // 0x1C
	private byte[] initial; // 0x20
	private byte[] output; // 0x24
	private int position; // 0x28
	private int hashnumber; // 0x2C

	// Properties
	public string HashName { get; set; } // 0x00168FA4 0x00168D6C
	public int IterationCount { get; set; } // 0x00168FAC 0x00168E80
	public byte[] Salt { get; set; } // 0x00168FB4 0x00168C4C

	// Constructors
	public PasswordDeriveBytes(string strPassword, byte[] rgbSalt); // 0x00168364
	public PasswordDeriveBytes(string strPassword, byte[] rgbSalt, CspParameters cspParams); // 0x00168558
	public PasswordDeriveBytes(string strPassword, byte[] rgbSalt, string strHashName, int iterations); // 0x00168654
	public PasswordDeriveBytes(string strPassword, byte[] rgbSalt, string strHashName, int iterations, CspParameters cspParams); // 0x0016869C
	public PasswordDeriveBytes(byte[] password, byte[] salt); // 0x00168790
	public PasswordDeriveBytes(byte[] password, byte[] salt, CspParameters cspParams); // 0x00168964
	public PasswordDeriveBytes(byte[] password, byte[] salt, string hashName, int iterations); // 0x00168A60
	public PasswordDeriveBytes(byte[] password, byte[] salt, string hashName, int iterations, CspParameters cspParams); // 0x00168AA8

	// Methods
	protected override void Finalize(); // 0x00168B9C
	private void Prepare(string strPassword, byte[] rgbSalt, string strHashName, int iterations); // 0x001683F4
	private void Prepare(byte[] password, byte[] rgbSalt, string strHashName, int iterations); // 0x00168820
	public byte[] CryptDeriveKey(string algname, string alghashname, int keySize, byte[] rgbIV); // 0x00169060
	public override byte[] GetBytes(int cb); // 0x00169164
	public override void Reset(); // 0x00169564
}

// Namespace: System.Security.Cryptography
public abstract class RC2 : SymmetricAlgorithm // TypeDefIndex: 1317
{
	// Fields
	protected int EffectiveKeySizeValue; // 0x30

	// Properties
	public virtual int EffectiveKeySize { get; set; } // 0x001699A0 0x001699B4
	public override int KeySize { get; set; } // 0x001699BC 0x001699C4

	// Constructors
	protected RC2(); // 0x00169690

	// Methods
	public static RC2 Create(); // 0x0016986C
	public static RC2 Create(string AlgName); // 0x001698C8
}

// Namespace: System.Security.Cryptography
public sealed class RC2CryptoServiceProvider : RC2 // TypeDefIndex: 1318
{
	// Fields
	private bool _useSalt; // 0x34

	// Properties
	public override int EffectiveKeySize { get; set; } // 0x001699E8 0x001699FC
	public bool UseSalt { get; set; } // 0x0016A410 0x0016A418

	// Constructors
	public RC2CryptoServiceProvider(); // 0x001699E4

	// Methods
	public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV); // 0x00169ABC
	public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV); // 0x0016A33C
	public override void GenerateIV(); // 0x0016A3C8
	public override void GenerateKey(); // 0x0016A3EC
}

// Namespace: System.Security.Cryptography
internal class RC2Transform : SymmetricTransform // TypeDefIndex: 1319
{
	// Fields
	private ushort R0; // 0x34
	private ushort R1; // 0x36
	private ushort R2; // 0x38
	private ushort R3; // 0x3A
	private ushort[] K; // 0x3C
	private int j; // 0x40
	private static readonly byte[] pitable; // 0x00

	// Constructors
	public RC2Transform(RC2 rc2Algo, bool encryption, byte[] key, byte[] iv); // 0x00169B48
	private static RC2Transform(); // 0x0016A420

	// Methods
	protected override void ECB(byte[] input, byte[] output); // 0x0016A4B8
}

// Namespace: System.Security.Cryptography
public abstract class RIPEMD160 : HashAlgorithm // TypeDefIndex: 1320
{
	// Constructors
	protected RIPEMD160(); // 0x0016B80C

	// Methods
	public static RIPEMD160 Create(); // 0x0016B82C
	public static RIPEMD160 Create(string hashName); // 0x0016B888
}

// Namespace: System.Security.Cryptography
public class RIPEMD160Managed : RIPEMD160 // TypeDefIndex: 1321
{
	// Fields
	private const int BLOCK_SIZE_BYTES = 64; // 0x00
	private byte[] _ProcessingBuffer; // 0x18
	private uint[] _X; // 0x1C
	private uint[] _HashValue; // 0x20
	private ulong _Length; // 0x28
	private int _ProcessingBufferCount; // 0x30

	// Constructors
	public RIPEMD160Managed(); // 0x0016B960

	// Methods
	public override void Initialize(); // 0x0016BA1C
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x0016BBB8
	protected override byte[] HashFinal(); // 0x0016BEFC
	protected override void Finalize(); // 0x0016C288
	private void ProcessBlock(byte[] buffer, int offset); // 0x0016BCCC
	private void Compress(); // 0x0016C300
	private void CompressFinal(ulong length); // 0x0016C090
	private uint ROL(uint x, int n); // 0x00171458
	private uint F(uint x, uint y, uint z); // 0x00171468
	private uint G(uint x, uint y, uint z); // 0x00171474
	private uint H(uint x, uint y, uint z); // 0x00171484
	private uint I(uint x, uint y, uint z); // 0x00171494
	private uint J(uint x, uint y, uint z); // 0x001714A4
	private void FF(uint a, uint b, uint c, uint d, uint e, uint x, int s); // 0x001710D0
	private void GG(uint a, uint b, uint c, uint d, uint e, uint x, int s); // 0x0017111C
	private void HH(uint a, uint b, uint c, uint d, uint e, uint x, int s); // 0x00171178
	private void II(uint a, uint b, uint c, uint d, uint e, uint x, int s); // 0x001711D8
	private void JJ(uint a, uint b, uint c, uint d, uint e, uint x, int s); // 0x00171234
	private void FFF(uint a, uint b, uint c, uint d, uint e, uint x, int s); // 0x0017140C
	private void GGG(uint a, uint b, uint c, uint d, uint e, uint x, int s); // 0x001713B0
	private void HHH(uint a, uint b, uint c, uint d, uint e, uint x, int s); // 0x00171350
	private void III(uint a, uint b, uint c, uint d, uint e, uint x, int s); // 0x001712F4
	private void JJJ(uint a, uint b, uint c, uint d, uint e, uint x, int s); // 0x00171294
}

// Namespace: System.Security.Cryptography
public sealed class RNGCryptoServiceProvider : RandomNumberGenerator // TypeDefIndex: 1322
{
	// Fields
	private static object _lock; // 0x00
	private IntPtr _handle; // 0x08

	// Constructors
	public RNGCryptoServiceProvider(); // 0x001714B4
	private static RNGCryptoServiceProvider(); // 0x0017161C

	// Methods
	private void Check(); // 0x00171558
	private static bool RngOpen(); // 0x001716A8
	private static IntPtr RngInitialize(byte[] seed); // 0x00171554
	private static IntPtr RngGetBytes(IntPtr handle, byte[] data); // 0x001716AC
	private static void RngClose(IntPtr handle); // 0x001716B0
	public override void GetBytes(byte[] data); // 0x001716B4
	public override void GetNonZeroBytes(byte[] data); // 0x001718BC
	protected override void Finalize(); // 0x00171AB0
}

// Namespace: System.Security.Cryptography
public abstract class RSA : AsymmetricAlgorithm // TypeDefIndex: 1323
{
	// Constructors
	protected RSA(); // 0x00171BA8

	// Methods
	public static RSA Create(); // 0x00171BB0
	public static RSA Create(string algName); // 0x00171C0C
	public abstract byte[] EncryptValue(byte[] rgb);
	public abstract byte[] DecryptValue(byte[] rgb);
	public abstract RSAParameters ExportParameters(bool includePrivateParameters);
	public abstract void ImportParameters(RSAParameters parameters);
	internal void ZeroizePrivateKey(RSAParameters parameters); // 0x00171CE4
	public override void FromXmlString(string xmlString); // 0x00171DB0
	public override string ToXmlString(bool includePrivateParameters); // 0x001722EC
}

// Namespace: System.Security.Cryptography
public sealed class RSACryptoServiceProvider : RSA, ICspAsymmetricAlgorithm // TypeDefIndex: 1324
{
	// Fields
	private const int PROV_RSA_FULL = 1; // 0x00
	private KeyPairPersistence store; // 0x10
	private bool persistKey; // 0x14
	private bool persisted; // 0x15
	private bool privateKeyExportable; // 0x16
	private bool m_disposed; // 0x17
	private RSAManaged rsa; // 0x18
	private static bool useMachineKeyStore; // 0x00
	private static Dictionary`2<string, int> <>f__switch$map29; // 0x04

	// Properties
	public static bool UseMachineKeyStore { get; set; } // 0x00172F7C 0x00173008
	public override string KeyExchangeAlgorithm { get; } // 0x00173170 
	public override int KeySize { get; } // 0x00172F58 
	public bool PersistKeyInCsp { get; set; } // 0x001731CC 0x001731D4
	public bool PublicOnly { get; } // 0x00173294 
	public override string SignatureAlgorithm { get; } // 0x001732C0 
	public CspKeyContainerInfo CspKeyContainerInfo { get; } // 0x00174440 

	// Constructors
	public RSACryptoServiceProvider(); // 0x00172B2C
	public RSACryptoServiceProvider(CspParameters parameters); // 0x00172EA8
	public RSACryptoServiceProvider(int dwKeySize); // 0x00172EE0
	public RSACryptoServiceProvider(int dwKeySize, CspParameters parameters); // 0x00172F18
	private static RSACryptoServiceProvider(); // 0x00172F54

	// Methods
	private void Common(int dwKeySize, CspParameters p); // 0x00172B60
	protected override void Finalize(); // 0x00173098
	public byte[] Decrypt(byte[] rgb, bool fOAEP); // 0x0017331C
	public override byte[] DecryptValue(byte[] rgb); // 0x001734B8
	public byte[] Encrypt(byte[] rgb, bool fOAEP); // 0x001735B4
	public override byte[] EncryptValue(byte[] rgb); // 0x00173700
	public override RSAParameters ExportParameters(bool includePrivateParameters); // 0x0017373C
	public override void ImportParameters(RSAParameters parameters); // 0x00173828
	private HashAlgorithm GetHash(object halg); // 0x001738B8
	public byte[] SignData(byte[] buffer, object halg); // 0x00173AA0
	public byte[] SignData(Stream inputStream, object halg); // 0x00173C54
	public byte[] SignData(byte[] buffer, int offset, int count, object halg); // 0x00173B74
	private string GetHashNameFromOID(string oid); // 0x00173D18
	public byte[] SignHash(byte[] rgbHash, string str); // 0x00174014
	public bool VerifyData(byte[] buffer, object halg, byte[] signature); // 0x00174138
	public bool VerifyHash(byte[] rgbHash, string str, byte[] rgbSignature); // 0x001742BC
	protected override void Dispose(bool disposing); // 0x00173100
	private void OnKeyGenerated(object sender, EventArgs e); // 0x001731E4
	public byte[] ExportCspBlob(bool includePrivateParameters); // 0x00174448
	public void ImportCspBlob(byte[] keyBlob); // 0x001744AC
}

// Namespace: System.Security.Cryptography
public class RSAOAEPKeyExchangeDeformatter : AsymmetricKeyExchangeDeformatter // TypeDefIndex: 1325
{
	// Fields
	private RSA rsa; // 0x08

	// Properties
	public override string Parameters { get; set; } // 0x00174808 0x00174810

	// Constructors
	public RSAOAEPKeyExchangeDeformatter(); // 0x00174800
	public RSAOAEPKeyExchangeDeformatter(AsymmetricAlgorithm key); // 0x00173450

	// Methods
	public override byte[] DecryptKeyExchange(byte[] rgbData); // 0x00174814
	public override void SetKey(AsymmetricAlgorithm key); // 0x00174978
}

// Namespace: System.Security.Cryptography
public class RSAOAEPKeyExchangeFormatter : AsymmetricKeyExchangeFormatter // TypeDefIndex: 1326
{
	// Fields
	private RSA rsa; // 0x08
	private RandomNumberGenerator random; // 0x0C
	private byte[] param; // 0x10

	// Properties
	public byte[] Parameter { get; set; } // 0x00174A40 0x00174A48
	public override string Parameters { get; } // 0x00174A50 
	public RandomNumberGenerator Rng { get; set; } // 0x00174A58 0x00174A60

	// Constructors
	public RSAOAEPKeyExchangeFormatter(); // 0x00174A20
	public RSAOAEPKeyExchangeFormatter(AsymmetricAlgorithm key); // 0x001736A4

	// Methods
	public override byte[] CreateKeyExchange(byte[] rgbData); // 0x00174A68
	public override byte[] CreateKeyExchange(byte[] rgbData, Type symAlgType); // 0x00174BFC
	public override void SetKey(AsymmetricAlgorithm key); // 0x00174C0C
}

// Namespace: System.Security.Cryptography
public class RSAPKCS1KeyExchangeDeformatter : AsymmetricKeyExchangeDeformatter // TypeDefIndex: 1327
{
	// Fields
	private RSA rsa; // 0x08
	private RandomNumberGenerator random; // 0x0C

	// Properties
	public override string Parameters { get; set; } // 0x00174CBC 0x00174CC4
	public RandomNumberGenerator RNG { get; set; } // 0x00174CC8 0x00174CD0

	// Constructors
	public RSAPKCS1KeyExchangeDeformatter(); // 0x00174CB4
	public RSAPKCS1KeyExchangeDeformatter(AsymmetricAlgorithm key); // 0x00173484

	// Methods
	public override byte[] DecryptKeyExchange(byte[] rgbIn); // 0x00174CD8
	public override void SetKey(AsymmetricAlgorithm key); // 0x00174E28
}

// Namespace: System.Security.Cryptography
public class RSAPKCS1KeyExchangeFormatter : AsymmetricKeyExchangeFormatter // TypeDefIndex: 1328
{
	// Fields
	private RSA rsa; // 0x08
	private RandomNumberGenerator random; // 0x0C

	// Properties
	public RandomNumberGenerator Rng { get; set; } // 0x00174FD0 0x00174FD8
	public override string Parameters { get; } // 0x00174FE0 

	// Constructors
	public RSAPKCS1KeyExchangeFormatter(); // 0x00174ED0
	public RSAPKCS1KeyExchangeFormatter(AsymmetricAlgorithm key); // 0x001736D8

	// Methods
	public override byte[] CreateKeyExchange(byte[] rgbData); // 0x0017503C
	public override byte[] CreateKeyExchange(byte[] rgbData, Type symAlgType); // 0x001751AC
	private void SetRSAKey(AsymmetricAlgorithm key); // 0x00174ED8
	public override void SetKey(AsymmetricAlgorithm key); // 0x001751BC
}

// Namespace: System.Security.Cryptography
public class RSAPKCS1SignatureDeformatter : AsymmetricSignatureDeformatter // TypeDefIndex: 1329
{
	// Fields
	private RSA rsa; // 0x08
	private string hashName; // 0x0C

	// Constructors
	public RSAPKCS1SignatureDeformatter(); // 0x00175270
	public RSAPKCS1SignatureDeformatter(AsymmetricAlgorithm key); // 0x00175278

	// Methods
	public override void SetHashAlgorithm(string strName); // 0x001752AC
	public override void SetKey(AsymmetricAlgorithm key); // 0x0017535C
	public override bool VerifySignature(byte[] rgbHash, byte[] rgbSignature); // 0x00175454
}

// Namespace: System.Security.Cryptography
public class RSAPKCS1SignatureFormatter : AsymmetricSignatureFormatter // TypeDefIndex: 1330
{
	// Fields
	private RSA rsa; // 0x08
	private HashAlgorithm hash; // 0x0C

	// Constructors
	public RSAPKCS1SignatureFormatter(); // 0x00175670
	public RSAPKCS1SignatureFormatter(AsymmetricAlgorithm key); // 0x00175678

	// Methods
	public override byte[] CreateSignature(byte[] rgbHash); // 0x001756AC
	public override void SetHashAlgorithm(string strName); // 0x0017585C
	public override void SetKey(AsymmetricAlgorithm key); // 0x0017587C
}

// Namespace: System.Security.Cryptography
[Serializable]
public struct RSAParameters // TypeDefIndex: 1331
{
	// Fields
	[NonSerialized]	public byte[] P; // 0x08
	[NonSerialized]	public byte[] Q; // 0x0C
	[NonSerialized]	public byte[] D; // 0x10
	[NonSerialized]	public byte[] DP; // 0x14
	[NonSerialized]	public byte[] DQ; // 0x18
	[NonSerialized]	public byte[] InverseQ; // 0x1C
	public byte[] Modulus; // 0x20
	public byte[] Exponent; // 0x24

}

// Namespace: System.Security.Cryptography
public abstract class RandomNumberGenerator // TypeDefIndex: 1332
{
	// Constructors
	protected RandomNumberGenerator(); // 0x0017154C

	// Methods
	public static RandomNumberGenerator Create(); // 0x00174BA0
	public static RandomNumberGenerator Create(string rngName); // 0x00175974
	public abstract void GetBytes(byte[] data);
	public abstract void GetNonZeroBytes(byte[] data);
}

// Namespace: System.Security.Cryptography
public class Rfc2898DeriveBytes : DeriveBytes // TypeDefIndex: 1333
{
	// Fields
	private const int defaultIterations = 1000; // 0x00
	private int _iteration; // 0x08
	private byte[] _salt; // 0x0C
	private HMACSHA1 _hmac; // 0x10
	private byte[] _buffer; // 0x14
	private int _pos; // 0x18
	private int _f; // 0x1C

	// Properties
	public int IterationCount { get; set; } // 0x001760B8 0x00175D28
	public byte[] Salt { get; set; } // 0x001760C0 0x00175BD0

	// Constructors
	public Rfc2898DeriveBytes(string password, byte[] salt); // 0x00175A4C
	public Rfc2898DeriveBytes(string password, byte[] salt, int iterations); // 0x00175A68
	public Rfc2898DeriveBytes(byte[] password, byte[] salt, int iterations); // 0x00175DD8
	public Rfc2898DeriveBytes(string password, int saltSize); // 0x00175EDC
	public Rfc2898DeriveBytes(string password, int saltSize, int iterations); // 0x00175EF8

	// Methods
	private byte[] F(byte[] s, int c, int i); // 0x00176178
	public override byte[] GetBytes(int cb); // 0x00176374
	public override void Reset(); // 0x001765F4
}

// Namespace: System.Security.Cryptography
public abstract class Rijndael : SymmetricAlgorithm // TypeDefIndex: 1334
{
	// Constructors
	protected Rijndael(); // 0x00176608

	// Methods
	public static Rijndael Create(); // 0x001767E0
	public static Rijndael Create(string algName); // 0x0017683C
}

// Namespace: System.Security.Cryptography
public sealed class RijndaelManaged : Rijndael // TypeDefIndex: 1335
{
	// Constructors
	public RijndaelManaged(); // 0x00176914

	// Methods
	public override void GenerateIV(); // 0x00176918
	public override void GenerateKey(); // 0x0017693C
	public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV); // 0x00176960
	public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV); // 0x00176AB4
}

// Namespace: System.Security.Cryptography
internal class RijndaelTransform : SymmetricTransform // TypeDefIndex: 1336
{
	// Fields
	private uint[] expandedKey; // 0x34
	private int Nb; // 0x38
	private int Nk; // 0x3C
	private int Nr; // 0x40
	private static readonly uint[] Rcon; // 0x00
	private static readonly byte[] SBox; // 0x04
	private static readonly byte[] iSBox; // 0x08
	private static readonly uint[] T0; // 0x0C
	private static readonly uint[] T1; // 0x10
	private static readonly uint[] T2; // 0x14
	private static readonly uint[] T3; // 0x18
	private static readonly uint[] iT0; // 0x1C
	private static readonly uint[] iT1; // 0x20
	private static readonly uint[] iT2; // 0x24
	private static readonly uint[] iT3; // 0x28

	// Constructors
	public RijndaelTransform(Rijndael algo, bool encryption, byte[] key, byte[] iv); // 0x00176B40
	private static RijndaelTransform(); // 0x00177B64

	// Methods
	public void Clear(); // 0x001777B8
	protected override void ECB(byte[] input, byte[] output); // 0x00177E38
	private uint SubByte(uint a); // 0x001779A0
	private void Encrypt128(byte[] indata, byte[] outdata, uint[] ekey); // 0x00177ED0
	private void Encrypt192(byte[] indata, byte[] outdata, uint[] ekey); // 0x0017E1A8
	private void Encrypt256(byte[] indata, byte[] outdata, uint[] ekey); // 0x001875B8
	private void Decrypt128(byte[] indata, byte[] outdata, uint[] ekey); // 0x00193BE8
	private void Decrypt192(byte[] indata, byte[] outdata, uint[] ekey); // 0x00199D24
	private void Decrypt256(byte[] indata, byte[] outdata, uint[] ekey); // 0x001A30B4
}

// Namespace: System.Security.Cryptography
public sealed class RijndaelManagedTransform : IDisposable, ICryptoTransform // TypeDefIndex: 1337
{
	// Fields
	private RijndaelTransform _st; // 0x08
	private int _bs; // 0x0C

	// Properties
	public int BlockSizeValue { get; } // 0x001777CC 
	public bool CanTransformMultipleBlocks { get; } // 0x001777D4 
	public bool CanReuseTransform { get; } // 0x00177808 
	public int InputBlockSize { get; } // 0x0017783C 
	public int OutputBlockSize { get; } // 0x00177870 

	// Constructors
	internal RijndaelManagedTransform(Rijndael algo, bool encryption, byte[] key, byte[] iv); // 0x001769EC

	// Methods
	private void System.IDisposable.Dispose(); // 0x00177780
	public void Clear(); // 0x001778A4
	public void Reset(); // 0x001778DC
	public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset); // 0x001778E0
	public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x00177948
}

// Namespace: System.Security.Cryptography
public abstract class SHA1 : HashAlgorithm // TypeDefIndex: 1338
{
	// Constructors
	protected SHA1(); // 0x003CC368

	// Methods
	public static SHA1 Create(); // 0x003CC388
	public static SHA1 Create(string hashName); // 0x003CC3E4
}

// Namespace: System.Security.Cryptography
internal class SHA1Internal // TypeDefIndex: 1339
{
	// Fields
	private const int BLOCK_SIZE_BYTES = 64; // 0x00
	private const int HASH_SIZE_BYTES = 20; // 0x00
	private uint[] _H; // 0x08
	private ulong count; // 0x10
	private byte[] _ProcessingBuffer; // 0x18
	private int _ProcessingBufferCount; // 0x1C
	private uint[] buff; // 0x20

	// Constructors
	public SHA1Internal(); // 0x003CC53C

	// Methods
	public void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x003CC6A8
	public byte[] HashFinal(); // 0x003CC7D4
	public void Initialize(); // 0x003CC928
	private void ProcessBlock(byte[] inputBuffer, uint inputOffset); // 0x003CCA74
	private static void InitialiseBuff(uint[] buff, byte[] input, uint inputOffset); // 0x003CD750
	private static void FillBuff(uint[] buff); // 0x003CE48C
	private void ProcessFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x003CD51C
	internal void AddLength(ulong length, byte[] buffer, int position); // 0x003CEB18
}

// Namespace: System.Security.Cryptography
public sealed class SHA1CryptoServiceProvider : SHA1 // TypeDefIndex: 1340
{
	// Fields
	private SHA1Internal sha; // 0x18

	// Constructors
	public SHA1CryptoServiceProvider(); // 0x003CC4BC

	// Methods
	protected override void Finalize(); // 0x003CC5E4
	protected override void Dispose(bool disposing); // 0x003CC650
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x003CC658
	protected override byte[] HashFinal(); // 0x003CC7A4
	public override void Initialize(); // 0x003CC900
}

// Namespace: System.Security.Cryptography
public class SHA1Managed : SHA1 // TypeDefIndex: 1341
{
	// Fields
	private SHA1Internal sha; // 0x18

	// Constructors
	public SHA1Managed(); // 0x003CECAC

	// Methods
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x003CED2C
	protected override byte[] HashFinal(); // 0x003CED7C
	public override void Initialize(); // 0x003CEDAC
}

// Namespace: System.Security.Cryptography
public abstract class SHA256 : HashAlgorithm // TypeDefIndex: 1342
{
	// Constructors
	protected SHA256(); // 0x003CEDD4

	// Methods
	public static SHA256 Create(); // 0x003CEDF4
	public static SHA256 Create(string hashName); // 0x003CEE50
}

// Namespace: System.Security.Cryptography
public class SHA256Managed : SHA256 // TypeDefIndex: 1343
{
	// Fields
	private const int BLOCK_SIZE_BYTES = 64; // 0x00
	private const int HASH_SIZE_BYTES = 32; // 0x00
	private uint[] _H; // 0x18
	private ulong count; // 0x20
	private byte[] _ProcessingBuffer; // 0x28
	private int _ProcessingBufferCount; // 0x2C
	private uint[] buff; // 0x30

	// Constructors
	public SHA256Managed(); // 0x003CEF28

	// Methods
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x003CEFE4
	protected override byte[] HashFinal(); // 0x003CF99C
	public override void Initialize(); // 0x003CFCF4
	private void ProcessBlock(byte[] inputBuffer, int inputOffset); // 0x003CF0E8
	private void ProcessFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x003CFAD0
	internal void AddLength(ulong length, byte[] buffer, int position); // 0x003CFEF4
}

// Namespace: System.Security.Cryptography
public abstract class SHA384 : HashAlgorithm // TypeDefIndex: 1344
{
	// Constructors
	protected SHA384(); // 0x003D0088

	// Methods
	public static SHA384 Create(); // 0x003D00A8
	public static SHA384 Create(string hashName); // 0x003D0104
}

// Namespace: System.Security.Cryptography
public class SHA384Managed : SHA384 // TypeDefIndex: 1345
{
	// Fields
	private byte[] xBuf; // 0x18
	private int xBufOff; // 0x1C
	private ulong byteCount1; // 0x20
	private ulong byteCount2; // 0x28
	private ulong H1; // 0x30
	private ulong H2; // 0x38
	private ulong H3; // 0x40
	private ulong H4; // 0x48
	private ulong H5; // 0x50
	private ulong H6; // 0x58
	private ulong H7; // 0x60
	private ulong H8; // 0x68
	private ulong[] W; // 0x70
	private int wOff; // 0x74

	// Constructors
	public SHA384Managed(); // 0x003D01E0

	// Methods
	private void Initialize(bool reuse); // 0x003D0300
	public override void Initialize(); // 0x003D0488
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x003D0490
	protected override byte[] HashFinal(); // 0x003D08E4
	private void update(byte input); // 0x003D0628
	private void processWord(byte[] input, int inOff); // 0x003D06C8
	private void unpackWord(ulong word, byte[] output, int outOff); // 0x003D1268
	private void adjustByteCounts(); // 0x003D0AA8
	private void processLength(ulong lowW, ulong hiW); // 0x003D0AE4
	private void processBlock(); // 0x003D0B80
}

// Namespace: System.Security.Cryptography
public abstract class SHA512 : HashAlgorithm // TypeDefIndex: 1346
{
	// Constructors
	protected SHA512(); // 0x003D13F4

	// Methods
	public static SHA512 Create(); // 0x003D1414
	public static SHA512 Create(string hashName); // 0x003D1470
}

// Namespace: System.Security.Cryptography
public class SHA512Managed : SHA512 // TypeDefIndex: 1347
{
	// Fields
	private byte[] xBuf; // 0x18
	private int xBufOff; // 0x1C
	private ulong byteCount1; // 0x20
	private ulong byteCount2; // 0x28
	private ulong H1; // 0x30
	private ulong H2; // 0x38
	private ulong H3; // 0x40
	private ulong H4; // 0x48
	private ulong H5; // 0x50
	private ulong H6; // 0x58
	private ulong H7; // 0x60
	private ulong H8; // 0x68
	private ulong[] W; // 0x70
	private int wOff; // 0x74

	// Constructors
	public SHA512Managed(); // 0x003D1548

	// Methods
	private void Initialize(bool reuse); // 0x003D1668
	public override void Initialize(); // 0x003D17F0
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x003D17F8
	protected override byte[] HashFinal(); // 0x003D1C4C
	private void update(byte input); // 0x003D1990
	private void processWord(byte[] input, int inOff); // 0x003D1A30
	private void unpackWord(ulong word, byte[] output, int outOff); // 0x003D26B0
	private void adjustByteCounts(); // 0x003D1E48
	private void processLength(ulong lowW, ulong hiW); // 0x003D1E84
	private void processBlock(); // 0x003D1F20
	private ulong rotateRight(ulong x, int n); // 0x003D29A8
	private ulong Ch(ulong x, ulong y, ulong z); // 0x003D28F4
	private ulong Maj(ulong x, ulong y, ulong z); // 0x003D296C
	private ulong Sum0(ulong x); // 0x003D2928
	private ulong Sum1(ulong x); // 0x003D28B0
	private ulong Sigma0(ulong x); // 0x003D2878
	private ulong Sigma1(ulong x); // 0x003D283C
}

// Namespace: System.Security.Cryptography
internal static class SHAConstants // TypeDefIndex: 1348
{
	// Fields
	public static readonly uint[] K1; // 0x00
	public static readonly ulong[] K2; // 0x04

	// Constructors
	private static SHAConstants(); // 0x003D2A14

}

// Namespace: System.Security.Cryptography
public class SignatureDescription // TypeDefIndex: 1349
{
	// Fields
	private string _DeformatterAlgorithm; // 0x08
	private string _DigestAlgorithm; // 0x0C
	private string _FormatterAlgorithm; // 0x10
	private string _KeyAlgorithm; // 0x14

	// Properties
	public string DeformatterAlgorithm { get; set; } // 0x003D2C74 0x003D2C7C
	public string DigestAlgorithm { get; set; } // 0x003D2C84 0x003D2C8C
	public string FormatterAlgorithm { get; set; } // 0x003D2C94 0x003D2C9C
	public string KeyAlgorithm { get; set; } // 0x003D2CA4 0x003D2CAC

	// Constructors
	public SignatureDescription(); // 0x003D2AF0
	public SignatureDescription(SecurityElement el); // 0x003D2AF8

	// Methods
	public virtual AsymmetricSignatureDeformatter CreateDeformatter(AsymmetricAlgorithm key); // 0x003D2CB4
	public virtual HashAlgorithm CreateDigest(); // 0x003D2E6C
	public virtual AsymmetricSignatureFormatter CreateFormatter(AsymmetricAlgorithm key); // 0x003D2FA8
}

// Namespace: System.Security.Cryptography
internal class DSASignatureDescription : SignatureDescription // TypeDefIndex: 1350
{
	// Constructors
	public DSASignatureDescription(); // 0x004436E8

}

// Namespace: System.Security.Cryptography
internal class RSAPKCS1SHA1SignatureDescription : SignatureDescription // TypeDefIndex: 1351
{
	// Constructors
	public RSAPKCS1SHA1SignatureDescription(); // 0x001751C0

	// Methods
	public override AsymmetricSignatureDeformatter CreateDeformatter(AsymmetricAlgorithm key); // 0x00175268
}

// Namespace: System.Security.Cryptography
public abstract class SymmetricAlgorithm : IDisposable // TypeDefIndex: 1352
{
	// Fields
	protected int BlockSizeValue; // 0x08
	protected byte[] IVValue; // 0x0C
	protected int KeySizeValue; // 0x10
	protected byte[] KeyValue; // 0x14
	protected KeySizes[] LegalBlockSizesValue; // 0x18
	protected KeySizes[] LegalKeySizesValue; // 0x1C
	protected int FeedbackSizeValue; // 0x20
	protected CipherMode ModeValue; // 0x24
	protected PaddingMode PaddingValue; // 0x28
	private bool m_disposed; // 0x2C

	// Properties
	public virtual int BlockSize { get; set; } // 0x003D3298 0x003D32A0
	public virtual int FeedbackSize { get; set; } // 0x003D3380 0x003D3388
	public virtual byte[] IV { get; set; } // 0x003D3450 0x003D3528
	public virtual byte[] Key { get; set; } // 0x003D3698 0x003D3770
	public virtual int KeySize { get; set; } // 0x003D38F4 0x003D38FC
	public virtual KeySizes[] LegalBlockSizes { get; } // 0x003D39D0 
	public virtual KeySizes[] LegalKeySizes { get; } // 0x003D39D8 
	public virtual CipherMode Mode { get; set; } // 0x003D39E0 0x003D39E8
	public virtual PaddingMode Padding { get; set; } // 0x003D3B4C 0x003D3B54

	// Constructors
	protected SymmetricAlgorithm(); // 0x003D3160

	// Methods
	private void System.IDisposable.Dispose(); // 0x003D3190
	protected override void Finalize(); // 0x003D31C4
	public void Clear(); // 0x003D323C
	protected virtual void Dispose(bool disposing); // 0x003D3250
	public virtual ICryptoTransform CreateDecryptor(); // 0x003D3CB8
	public abstract ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV);
	public virtual ICryptoTransform CreateEncryptor(); // 0x003D3D10
	public abstract ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV);
	public abstract void GenerateIV();
	public abstract void GenerateKey();
	public bool ValidKeySize(int bitLength); // 0x003D3D68
	public static SymmetricAlgorithm Create(); // 0x003D3D74
	public static SymmetricAlgorithm Create(string algName); // 0x003D3DD0
}

// Namespace: System.Security.Cryptography
public class ToBase64Transform : IDisposable, ICryptoTransform // TypeDefIndex: 1353
{
	// Fields
	private const int inputBlockSize = 3; // 0x00
	private const int outputBlockSize = 4; // 0x00
	private bool m_disposed; // 0x08

	// Properties
	public bool CanTransformMultipleBlocks { get; } // 0x003D3F5C 
	public virtual bool CanReuseTransform { get; } // 0x003D3F64 
	public int InputBlockSize { get; } // 0x003D3F6C 
	public int OutputBlockSize { get; } // 0x003D3F74 

	// Constructors
	public ToBase64Transform(); // 0x003D3EA8

	// Methods
	private void System.IDisposable.Dispose(); // 0x003D3EB0
	protected override void Finalize(); // 0x003D3EE4
	public void Clear(); // 0x003D3F7C
	protected virtual void Dispose(bool disposing); // 0x003D3F90
	public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset); // 0x003D3FA4
	internal static void InternalTransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset); // 0x003D438C
	public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x003D462C
	internal static byte[] InternalTransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x003D4874
}

// Namespace: System.Security.Cryptography
public abstract class TripleDES : SymmetricAlgorithm // TypeDefIndex: 1354
{
	// Properties
	public override byte[] Key { get; set; } // 0x003D4EA0 0x003D5218

	// Constructors
	protected TripleDES(); // 0x003D4CB0

	// Methods
	public static bool IsWeakKey(byte[] rgbKey); // 0x003D4FAC
	public static TripleDES Create(); // 0x003D5388
	public static TripleDES Create(string str); // 0x003D53E4
}

// Namespace: System.Security.Cryptography
public sealed class TripleDESCryptoServiceProvider : TripleDES // TypeDefIndex: 1355
{
	// Constructors
	public TripleDESCryptoServiceProvider(); // 0x003D54BC

	// Methods
	public override void GenerateIV(); // 0x003D54C0
	public override void GenerateKey(); // 0x003D54E4
	public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV); // 0x003D55AC
	public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV); // 0x003D599C
}

// Namespace: System.Security.Cryptography
internal class TripleDESTransform : SymmetricTransform // TypeDefIndex: 1356
{
	// Fields
	private DESTransform E1; // 0x34
	private DESTransform D2; // 0x38
	private DESTransform E3; // 0x3C
	private DESTransform D1; // 0x40
	private DESTransform E2; // 0x44
	private DESTransform D3; // 0x48

	// Constructors
	public TripleDESTransform(TripleDES algo, bool encryption, byte[] key, byte[] iv); // 0x003D5638

	// Methods
	protected override void ECB(byte[] input, byte[] output); // 0x003D5A28
	internal static byte[] GetStrongKey(); // 0x003D54FC
}

// Namespace: System.Security.Permissions
[Serializable]
public abstract class CodeAccessSecurityAttribute : SecurityAttribute // TypeDefIndex: 1357
{
	// Constructors
	protected CodeAccessSecurityAttribute(SecurityAction action); // 0x003DA290

}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class EnvironmentPermission : CodeAccessPermission, IBuiltInPermission, IUnrestrictedPermission // TypeDefIndex: 1358
{
	// Fields
	private const int version = 1; // 0x00
	private PermissionState _state; // 0x08
	private ArrayList readList; // 0x0C
	private ArrayList writeList; // 0x10

	// Constructors
	public EnvironmentPermission(PermissionState state); // 0x003DA298
	public EnvironmentPermission(EnvironmentPermissionAccess flag, string pathList); // 0x003DA344

	// Methods
	private int System.Security.Permissions.IBuiltInPermission.GetTokenIndex(); // 0x003DA838
	public void AddPathList(EnvironmentPermissionAccess flag, string pathList); // 0x003DA840
	public override IPermission Copy(); // 0x003DADF0
	public override void FromXml(SecurityElement esd); // 0x003DAF34
	public string GetPathList(EnvironmentPermissionAccess flag); // 0x003DAED4
	public override IPermission Intersect(IPermission target); // 0x003DB4F0
	public override bool IsSubsetOf(IPermission target); // 0x003DB904
	public bool IsUnrestricted(); // 0x003DB8F4
	public void SetPathList(EnvironmentPermissionAccess flag, string pathList); // 0x003DA3F0
	public override SecurityElement ToXml(); // 0x003DBFA0
	public override IPermission Union(IPermission other); // 0x003DC0D8
	private bool IsEmpty(); // 0x003DC254
	private EnvironmentPermission Cast(IPermission target); // 0x003DB814
	internal void ThrowInvalidFlag(EnvironmentPermissionAccess flag, bool context); // 0x003DACB8
	private string GetPathList(ArrayList list); // 0x003DB070
}

// Namespace: System.Security.Permissions
[Serializable]
public enum EnvironmentPermissionAccess // TypeDefIndex: 1359
{
	NoAccess = 0,
	Read = 1,
	Write = 2,
	AllAccess = 3
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class EnvironmentPermissionAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 1360
{
	// Fields
	private string read; // 0x10
	private string write; // 0x14

	// Properties
	public string All { get; set; } // 0x003DC2E4 0x003DC380
	public string Read { get; set; } // 0x003DC38C 0x003DC394
	public string Write { get; set; } // 0x003DC39C 0x003DC3A4

	// Constructors
	public EnvironmentPermissionAttribute(SecurityAction action); // 0x003DC2DC

	// Methods
	public override IPermission CreatePermission(); // 0x003DC3AC
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class FileDialogPermission : CodeAccessPermission, IBuiltInPermission, IUnrestrictedPermission // TypeDefIndex: 1361
{
	// Fields
	private const int version = 1; // 0x00
	private FileDialogPermissionAccess _access; // 0x08

	// Properties
	public FileDialogPermissionAccess Access { get; set; } // 0x003DC600 0x003DC418

	// Constructors
	public FileDialogPermission(PermissionState state); // 0x003DC3B4
	public FileDialogPermission(FileDialogPermissionAccess access); // 0x003DC3F0

	// Methods
	private int System.Security.Permissions.IBuiltInPermission.GetTokenIndex(); // 0x003DC5F8
	public override IPermission Copy(); // 0x003DC608
	public override void FromXml(SecurityElement esd); // 0x003DC688
	public override IPermission Intersect(IPermission target); // 0x003DC83C
	public override bool IsSubsetOf(IPermission target); // 0x003DC9C0
	public bool IsUnrestricted(); // 0x003DC9FC
	public override SecurityElement ToXml(); // 0x003DCA10
	public override IPermission Union(IPermission target); // 0x003DCB24
	private FileDialogPermission Cast(IPermission target); // 0x003DC8E0
}

// Namespace: System.Security.Permissions
[Serializable]
public enum FileDialogPermissionAccess // TypeDefIndex: 1362
{
	None = 0,
	Open = 1,
	Save = 2,
	OpenSave = 3
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class FileDialogPermissionAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 1363
{
	// Fields
	private bool canOpen; // 0x0D
	private bool canSave; // 0x0E

	// Properties
	public bool Open { get; set; } // 0x003DCC20 0x003DCC28
	public bool Save { get; set; } // 0x003DCC30 0x003DCC38

	// Constructors
	public FileDialogPermissionAttribute(SecurityAction action); // 0x003DCC18

	// Methods
	public override IPermission CreatePermission(); // 0x003DCC40
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class FileIOPermission : CodeAccessPermission, IBuiltInPermission, IUnrestrictedPermission // TypeDefIndex: 1364
{
	// Fields
	private const int version = 1; // 0x00
	private static char[] BadPathNameCharacters; // 0x00
	private static char[] BadFileNameCharacters; // 0x04
	private bool m_Unrestricted; // 0x08
	private FileIOPermissionAccess m_AllFilesAccess; // 0x0C
	private FileIOPermissionAccess m_AllLocalFilesAccess; // 0x10
	private ArrayList readList; // 0x14
	private ArrayList writeList; // 0x18
	private ArrayList appendList; // 0x1C
	private ArrayList pathList; // 0x20

	// Properties
	public FileIOPermissionAccess AllFiles { get; set; } // 0x003DD394 0x003DD39C
	public FileIOPermissionAccess AllLocalFiles { get; set; } // 0x003DD3AC 0x003DD3B4

	// Constructors
	public FileIOPermission(PermissionState state); // 0x003DCD1C
	public FileIOPermission(FileIOPermissionAccess access, string path); // 0x003DCE20
	public FileIOPermission(FileIOPermissionAccess access, string[] pathList); // 0x003DCFC8
	public FileIOPermission(FileIOPermissionAccess access, AccessControlActions control, string path); // 0x003DD1B4
	public FileIOPermission(FileIOPermissionAccess access, AccessControlActions control, string[] pathList); // 0x003DD24C
	private static FileIOPermission(); // 0x003DD2E4

	// Methods
	private int System.Security.Permissions.IBuiltInPermission.GetTokenIndex(); // 0x003DD38C
	internal void CreateLists(); // 0x003DCD68
	public void AddPathList(FileIOPermissionAccess access, string path); // 0x003DCEF8
	public void AddPathList(FileIOPermissionAccess access, string[] pathList); // 0x003DD0A0
	internal void AddPathInternal(FileIOPermissionAccess access, string path); // 0x003DD87C
	public override IPermission Copy(); // 0x003DDAA4
	public override void FromXml(SecurityElement esd); // 0x003DDD44
	public string[] GetPathList(FileIOPermissionAccess access); // 0x003DE090
	public override IPermission Intersect(IPermission target); // 0x003DE2E0
	public override bool IsSubsetOf(IPermission target); // 0x003DEF30
	public bool IsUnrestricted(); // 0x003DF8C0
	public void SetPathList(FileIOPermissionAccess access, string path); // 0x003DF8C8
	public void SetPathList(FileIOPermissionAccess access, string[] pathList); // 0x003DFA78
	public override SecurityElement ToXml(); // 0x003DFB98
	public override IPermission Union(IPermission other); // 0x003DFEC0
	public override bool Equals(object obj); // 0x003E0634
	public override int GetHashCode(); // 0x003E063C
	private bool IsEmpty(); // 0x003DEE48
	private static FileIOPermission Cast(IPermission target); // 0x003DE490
	internal static void ThrowInvalidFlag(FileIOPermissionAccess access, bool context); // 0x003DD3C4
	internal static void ThrowIfInvalidPath(string path); // 0x003DD4FC
	internal static void ThrowIfInvalidPath(string[] paths); // 0x003DD9DC
	internal void Clear(FileIOPermissionAccess access); // 0x003DF9A4
	internal static bool KeyIsSubsetOf(IList local, IList target); // 0x003DF160
	internal static void UnionKeys(IList list, string[] paths); // 0x003E01A4
	internal static void IntersectKeys(IList local, IList target, IList result); // 0x003DE570
}

// Namespace: System.Security.Permissions
[Serializable]
public enum FileIOPermissionAccess // TypeDefIndex: 1365
{
	NoAccess = 0,
	Read = 1,
	Write = 2,
	Append = 4,
	PathDiscovery = 8,
	AllAccess = 15
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class FileIOPermissionAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 1366
{
	// Fields
	private string append; // 0x10
	private string path; // 0x14
	private string read; // 0x18
	private string write; // 0x1C
	private FileIOPermissionAccess allFiles; // 0x20
	private FileIOPermissionAccess allLocalFiles; // 0x24
	private string changeAccessControl; // 0x28
	private string viewAccessControl; // 0x2C

	// Properties
	public string All { get; set; } // 0x003E064C 0x003E06E8
	public string Append { get; set; } // 0x003E06F8 0x003E0700
	public string PathDiscovery { get; set; } // 0x003E0708 0x003E0710
	public string Read { get; set; } // 0x003E0718 0x003E0720
	public string Write { get; set; } // 0x003E0728 0x003E0730
	public FileIOPermissionAccess AllFiles { get; set; } // 0x003E0738 0x003E0740
	public FileIOPermissionAccess AllLocalFiles { get; set; } // 0x003E0748 0x003E0750
	public string ChangeAccessControl { get; set; } // 0x003E0758 0x003E0760
	public string ViewAccessControl { get; set; } // 0x003E0768 0x003E0770
	public string ViewAndModify { get; set; } // 0x003E0778 0x003E0800

	// Constructors
	public FileIOPermissionAttribute(SecurityAction action); // 0x003E0644

	// Methods
	public override IPermission CreatePermission(); // 0x003E0810
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class GacIdentityPermission : CodeAccessPermission, IBuiltInPermission // TypeDefIndex: 1367
{
	// Fields
	private const int version = 1; // 0x00

	// Constructors
	public GacIdentityPermission(); // 0x003E0818
	public GacIdentityPermission(PermissionState state); // 0x003E0820

	// Methods
	private int System.Security.Permissions.IBuiltInPermission.GetTokenIndex(); // 0x003E0848
	public override IPermission Copy(); // 0x003E0850
	public override IPermission Intersect(IPermission target); // 0x003E08BC
	public override bool IsSubsetOf(IPermission target); // 0x003E09BC
	public override IPermission Union(IPermission target); // 0x003E09D4
	public override void FromXml(SecurityElement securityElement); // 0x003E09E8
	public override SecurityElement ToXml(); // 0x003E0A64
	private GacIdentityPermission Cast(IPermission target); // 0x003E08DC
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class GacIdentityPermissionAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 1368
{
	// Constructors
	public GacIdentityPermissionAttribute(SecurityAction action); // 0x003E0A70

	// Methods
	public override IPermission CreatePermission(); // 0x003E0A78
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class HostProtectionAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 1369
{
	// Fields
	private HostProtectionResource _resources; // 0x10

	// Properties
	public bool ExternalProcessMgmt { get; set; } // 0x003E0C38 0x003E0C44
	public bool ExternalThreading { get; set; } // 0x003E0C5C 0x003E0C68
	public bool MayLeakOnAbort { get; set; } // 0x003E0C80 0x003E0C8C
	public bool SecurityInfrastructure { get; set; } // 0x003E0CA4 0x003E0CB0
	public bool SelfAffectingProcessMgmt { get; set; } // 0x003E0CC8 0x003E0CD4
	public bool SelfAffectingThreading { get; set; } // 0x003E0CEC 0x003E0CF8
	public bool SharedState { get; set; } // 0x003E0D10 0x003E0D1C
	public bool Synchronization { get; set; } // 0x003E0D34 0x003E0D40
	public bool UI { get; set; } // 0x003E0D58 0x003E0D64
	public HostProtectionResource Resources { get; set; } // 0x003E0D7C 0x003E0D84

	// Constructors
	public HostProtectionAttribute(); // 0x003E0AE4
	public HostProtectionAttribute(SecurityAction action); // 0x003E0AF0

	// Methods
	public override IPermission CreatePermission(); // 0x003E0D8C
}

// Namespace: System.Security.Permissions
[Serializable]
internal sealed class HostProtectionPermission : CodeAccessPermission, IBuiltInPermission, IUnrestrictedPermission // TypeDefIndex: 1370
{
	// Fields
	private const int version = 1; // 0x00
	private HostProtectionResource _resources; // 0x08

	// Properties
	public HostProtectionResource Resources { get; set; } // 0x003E0FDC 0x003E0DF4

	// Constructors
	public HostProtectionPermission(PermissionState state); // 0x003E0D94
	public HostProtectionPermission(HostProtectionResource resources); // 0x003E0DD0

	// Methods
	private int System.Security.Permissions.IBuiltInPermission.GetTokenIndex(); // 0x003E0FD4
	public override IPermission Copy(); // 0x003E0FE4
	public override IPermission Intersect(IPermission target); // 0x003E105C
	public override IPermission Union(IPermission target); // 0x003E1260
	public override bool IsSubsetOf(IPermission target); // 0x003E1358
	public override void FromXml(SecurityElement e); // 0x003E13B8
	public override SecurityElement ToXml(); // 0x003E1548
	public bool IsUnrestricted(); // 0x003E1248
	private HostProtectionPermission Cast(IPermission target); // 0x003E1168
}

// Namespace: System.Security.Permissions
[Serializable]
public enum HostProtectionResource // TypeDefIndex: 1371
{
	None = 0,
	Synchronization = 1,
	SharedState = 2,
	ExternalProcessMgmt = 4,
	SelfAffectingProcessMgmt = 8,
	ExternalThreading = 16,
	SelfAffectingThreading = 32,
	SecurityInfrastructure = 64,
	UI = 128,
	MayLeakOnAbort = 256,
	All = 511
}

// Namespace: System.Security.Permissions
internal interface IBuiltInPermission // TypeDefIndex: 1372
{
	// Methods
	int GetTokenIndex();
}

// Namespace: System.Security.Permissions
internal enum BuiltInToken // TypeDefIndex: 1373
{
	Environment = 0,
	FileDialog = 1,
	FileIO = 2,
	IsolatedStorageFile = 3,
	Reflection = 4,
	Registry = 5,
	Security = 6,
	UI = 7,
	Principal = 8,
	HostProtection = 9,
	PublisherIdentity = 10,
	SiteIdentity = 11,
	StrongNameIdentity = 12,
	UrlIdentity = 13,
	ZoneIdentity = 14,
	GacIdentity = 15,
	KeyContainer = 16
}

// Namespace: System.Security.Permissions
public interface IUnrestrictedPermission // TypeDefIndex: 1374
{
	// Methods
	bool IsUnrestricted();
}

// Namespace: System.Security.Permissions
[Serializable]
public enum IsolatedStorageContainment // TypeDefIndex: 1375
{
	None = 0,
	DomainIsolationByUser = 16,
	ApplicationIsolationByUser = 21,
	AssemblyIsolationByUser = 32,
	DomainIsolationByMachine = 48,
	AssemblyIsolationByMachine = 64,
	ApplicationIsolationByMachine = 69,
	DomainIsolationByRoamingUser = 80,
	AssemblyIsolationByRoamingUser = 96,
	ApplicationIsolationByRoamingUser = 101,
	AdministerIsolatedStorageByUser = 112,
	UnrestrictedIsolatedStorage = 240
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class IsolatedStorageFilePermission : IsolatedStoragePermission, IBuiltInPermission // TypeDefIndex: 1376
{
	// Fields
	private const int version = 1; // 0x00

	// Constructors
	public IsolatedStorageFilePermission(PermissionState state); // 0x003E1630

	// Methods
	private int System.Security.Permissions.IBuiltInPermission.GetTokenIndex(); // 0x003E1674
	public override IPermission Copy(); // 0x003E167C
	public override IPermission Intersect(IPermission target); // 0x003E17A4
	public override bool IsSubsetOf(IPermission target); // 0x003E1C5C
	public override IPermission Union(IPermission target); // 0x003E1D34
	public override SecurityElement ToXml(); // 0x003E1E88
	private IsolatedStorageFilePermission Cast(IPermission target); // 0x003E1928
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class IsolatedStorageFilePermissionAttribute : IsolatedStoragePermissionAttribute // TypeDefIndex: 1377
{
	// Constructors
	public IsolatedStorageFilePermissionAttribute(SecurityAction action); // 0x003E2008

	// Methods
	public override IPermission CreatePermission(); // 0x003E2018
}

// Namespace: System.Security.Permissions
[Serializable]
public abstract class IsolatedStoragePermission : CodeAccessPermission, IUnrestrictedPermission // TypeDefIndex: 1378
{
	// Fields
	private const int version = 1; // 0x00
	internal long m_userQuota; // 0x08
	internal long m_machineQuota; // 0x10
	internal long m_expirationDays; // 0x18
	internal bool m_permanentData; // 0x20
	internal IsolatedStorageContainment m_allowed; // 0x24

	// Properties
	public long UserQuota { get; set; } // 0x003E20E0 0x003E20E8
	public IsolatedStorageContainment UsageAllowed { get; set; } // 0x003E20F8 0x003E1A38

	// Constructors
	protected IsolatedStoragePermission(PermissionState state); // 0x003E1634

	// Methods
	public bool IsUnrestricted(); // 0x003E1D20
	public override SecurityElement ToXml(); // 0x003E1E8C
	public override void FromXml(SecurityElement esd); // 0x003E2100
	internal bool IsEmpty(); // 0x003E1A08
}

// Namespace: System.Security.Permissions
[Serializable]
public abstract class IsolatedStoragePermissionAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 1379
{
	// Fields
	private IsolatedStorageContainment usage_allowed; // 0x10
	private long user_quota; // 0x18

	// Properties
	public IsolatedStorageContainment UsageAllowed { get; set; } // 0x003E2328 0x003E2330
	public long UserQuota { get; set; } // 0x003E2338 0x003E2340

	// Constructors
	protected IsolatedStoragePermissionAttribute(SecurityAction action); // 0x003E2010

}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class KeyContainerPermission : CodeAccessPermission, IBuiltInPermission, IUnrestrictedPermission // TypeDefIndex: 1380
{
	// Fields
	private const int version = 1; // 0x00
	private KeyContainerPermissionAccessEntryCollection _accessEntries; // 0x08
	private KeyContainerPermissionFlags _flags; // 0x0C

	// Properties
	public KeyContainerPermissionAccessEntryCollection AccessEntries { get; } // 0x003E25E4 
	public KeyContainerPermissionFlags Flags { get; } // 0x003E25EC 

	// Constructors
	public KeyContainerPermission(PermissionState state); // 0x003E2350
	public KeyContainerPermission(KeyContainerPermissionFlags flags); // 0x003E2388
	public KeyContainerPermission(KeyContainerPermissionFlags flags, KeyContainerPermissionAccessEntry[] accessList); // 0x003E24EC

	// Methods
	private int System.Security.Permissions.IBuiltInPermission.GetTokenIndex(); // 0x003E25DC
	public override IPermission Copy(); // 0x003E25F4
	public override void FromXml(SecurityElement securityElement); // 0x003E27F8
	public override IPermission Intersect(IPermission target); // 0x003E29A0
	public override bool IsSubsetOf(IPermission target); // 0x003E29A8
	public bool IsUnrestricted(); // 0x003E29B0
	public override SecurityElement ToXml(); // 0x003E29C8
	public override IPermission Union(IPermission target); // 0x003E2A78
	private void SetFlags(KeyContainerPermissionFlags flags); // 0x003E23B0
	private KeyContainerPermission Cast(IPermission target); // 0x003E2D80
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class KeyContainerPermissionAccessEntry // TypeDefIndex: 1381
{
	// Fields
	private KeyContainerPermissionFlags _flags; // 0x08
	private string _containerName; // 0x0C
	private int _spec; // 0x10
	private string _store; // 0x14
	private string _providerName; // 0x18
	private int _type; // 0x1C

	// Properties
	public KeyContainerPermissionFlags Flags { get; set; } // 0x003E3510 0x003E3358
	public string KeyContainerName { get; set; } // 0x003E3518 0x003E3520
	public int KeySpec { get; set; } // 0x003E3528 0x003E3530
	public string KeyStore { get; set; } // 0x003E3538 0x003E3540
	public string ProviderName { get; set; } // 0x003E3548 0x003E3550
	public int ProviderType { get; set; } // 0x003E3558 0x003E3560

	// Constructors
	public KeyContainerPermissionAccessEntry(CspParameters parameters, KeyContainerPermissionFlags flags); // 0x003E326C
	public KeyContainerPermissionAccessEntry(string keyContainerName, KeyContainerPermissionFlags flags); // 0x003E3494
	public KeyContainerPermissionAccessEntry(string keyStore, string providerName, int providerType, string keyContainerName, int keySpec, KeyContainerPermissionFlags flags); // 0x003E34C4

	// Methods
	public override bool Equals(object o); // 0x003E3568
	public override int GetHashCode(); // 0x003E3704
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class KeyContainerPermissionAccessEntryCollection : IEnumerable, ICollection // TypeDefIndex: 1382
{
	// Fields
	private ArrayList _list; // 0x08

	// Properties
	public int Count { get; } // 0x003E2780 
	public bool IsSynchronized { get; } // 0x003E3900 
	public KeyContainerPermissionAccessEntry Item { get; } // 0x003E3908 
	public object SyncRoot { get; } // 0x003E39BC 

	// Constructors
	internal KeyContainerPermissionAccessEntryCollection(); // 0x003E2E60
	internal KeyContainerPermissionAccessEntryCollection(KeyContainerPermissionAccessEntry[] entries); // 0x003E3774

	// Methods
	private void System.Collections.ICollection.CopyTo(Array array, int index); // 0x003E3804
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x003E3848
	public int Add(KeyContainerPermissionAccessEntry accessEntry); // 0x003E25A0
	public void Clear(); // 0x003E39C0
	public void CopyTo(KeyContainerPermissionAccessEntry[] array, int index); // 0x003E27B4
	public KeyContainerPermissionAccessEntryEnumerator GetEnumerator(); // 0x003E2EDC
	public int IndexOf(KeyContainerPermissionAccessEntry accessEntry); // 0x003E3138
	public void Remove(KeyContainerPermissionAccessEntry accessEntry); // 0x003E39F4
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class KeyContainerPermissionAccessEntryEnumerator : IEnumerator // TypeDefIndex: 1383
{
	// Fields
	private IEnumerator e; // 0x08

	// Properties
	private object System.Collections.IEnumerator.Current { get; } // 0x003E3B4C 
	public KeyContainerPermissionAccessEntry Current { get; } // 0x003E2F50 

	// Constructors
	internal KeyContainerPermissionAccessEntryEnumerator(ArrayList list); // 0x003E38BC

	// Methods
	public bool MoveNext(); // 0x003E3060
	public void Reset(); // 0x003E3C24
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class KeyContainerPermissionAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 1384
{
	// Fields
	private KeyContainerPermissionFlags _flags; // 0x10
	private string _containerName; // 0x14
	private int _spec; // 0x18
	private string _store; // 0x1C
	private string _providerName; // 0x20
	private int _type; // 0x24

	// Properties
	public KeyContainerPermissionFlags Flags { get; set; } // 0x003E3D20 0x003E3D28
	public string KeyContainerName { get; set; } // 0x003E3D30 0x003E3D38
	public int KeySpec { get; set; } // 0x003E3D40 0x003E3D48
	public string KeyStore { get; set; } // 0x003E3D50 0x003E3D58
	public string ProviderName { get; set; } // 0x003E3D60 0x003E3D68
	public int ProviderType { get; set; } // 0x003E3D70 0x003E3D78

	// Constructors
	public KeyContainerPermissionAttribute(SecurityAction action); // 0x003E3CFC

	// Methods
	public override IPermission CreatePermission(); // 0x003E3D80
	private bool EmptyEntry(); // 0x003E3F5C
}

// Namespace: System.Security.Permissions
[Serializable]
public enum KeyContainerPermissionFlags // TypeDefIndex: 1385
{
	NoFlags = 0,
	Create = 1,
	Open = 2,
	Delete = 4,
	Import = 16,
	Export = 32,
	Sign = 256,
	Decrypt = 512,
	ViewAcl = 4096,
	ChangeAcl = 8192,
	AllFlags = 13111
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class PermissionSetAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 1386
{
	// Fields
	private string file; // 0x10
	private string name; // 0x14
	private bool isUnicodeEncoded; // 0x18
	private string xml; // 0x1C
	private string hex; // 0x20

	// Properties
	public string File { get; set; } // 0x003E3FA8 0x003E3FB0
	public string Hex { get; set; } // 0x003E3FB8 0x003E3FC0
	public string Name { get; set; } // 0x003E3FC8 0x003E3FD0
	public bool UnicodeEncoded { get; set; } // 0x003E3FD8 0x003E3FE0
	public string XML { get; set; } // 0x003E3FE8 0x003E3FF0

	// Constructors
	public PermissionSetAttribute(SecurityAction action); // 0x003E3FA0

	// Methods
	public override IPermission CreatePermission(); // 0x003E3FF8
	private PermissionSet CreateFromXml(string xml); // 0x003E4000
	public PermissionSet CreatePermissionSet(); // 0x003E4008
}

// Namespace: System.Security.Permissions
[Serializable]
public enum PermissionState // TypeDefIndex: 1387
{
	None = 0,
	Unrestricted = 1
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class PrincipalPermission : IBuiltInPermission, IUnrestrictedPermission, IPermission, ISecurityEncodable // TypeDefIndex: 1388
{
	// Fields
	private const int version = 1; // 0x00
	private ArrayList principals; // 0x08

	// Constructors
	public PrincipalPermission(PermissionState state); // 0x003E4010
	public PrincipalPermission(string name, string role); // 0x003E4138
	public PrincipalPermission(string name, string role, bool isAuthenticated); // 0x003E4154
	internal PrincipalPermission(ArrayList principals); // 0x003E4234

	// Methods
	private int System.Security.Permissions.IBuiltInPermission.GetTokenIndex(); // 0x003E4308
	public IPermission Copy(); // 0x003E4310
	public void Demand(); // 0x003E4384
	public void FromXml(SecurityElement elem); // 0x003E4B7C
	public IPermission Intersect(IPermission target); // 0x003E55A0
	public bool IsSubsetOf(IPermission target); // 0x003E6310
	public bool IsUnrestricted(); // 0x003E5F9C
	public override string ToString(); // 0x003E6B70
	public SecurityElement ToXml(); // 0x003E6BA0
	public IPermission Union(IPermission other); // 0x003E71B4
	public override bool Equals(object obj); // 0x003E7574
	public override int GetHashCode(); // 0x003E7DD8
	private PrincipalPermission Cast(IPermission target); // 0x003E5EBC
	private bool IsEmpty(); // 0x003E6B2C
	internal int CheckSecurityElement(SecurityElement se, string parameterName, int minimumVersion, int maximumVersion); // 0x003E51A0
}

// Namespace: 
internal class PrincipalInfo // TypeDefIndex: 1389
{
	// Fields
	private string _name; // 0x08
	private string _role; // 0x0C
	private bool _isAuthenticated; // 0x10

	// Properties
	public string Name { get; } // 0x003E7DE0 
	public string Role { get; } // 0x003E7DE8 
	public bool IsAuthenticated { get; } // 0x003E7DF0 

	// Constructors
	public PrincipalInfo(string name, string role, bool isAuthenticated); // 0x003E4108

}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class PrincipalPermissionAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 1390
{
	// Fields
	private bool authenticated; // 0x0D
	private string name; // 0x10
	private string role; // 0x14

	// Properties
	public bool Authenticated { get; set; } // 0x003E7E18 0x003E7E20
	public string Name { get; set; } // 0x003E7E28 0x003E7E30
	public string Role { get; set; } // 0x003E7E38 0x003E7E40

	// Constructors
	public PrincipalPermissionAttribute(SecurityAction action); // 0x003E7DF8

	// Methods
	public override IPermission CreatePermission(); // 0x003E7E48
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class PublisherIdentityPermission : CodeAccessPermission, IBuiltInPermission // TypeDefIndex: 1391
{
	// Fields
	private const int version = 1; // 0x00
	private X509Certificate x509; // 0x08

	// Properties
	public X509Certificate Certificate { get; set; } // 0x003E800C 0x003E7F54

	// Constructors
	public PublisherIdentityPermission(PermissionState state); // 0x003E7F04
	public PublisherIdentityPermission(X509Certificate certificate); // 0x003E7F2C

	// Methods
	private int System.Security.Permissions.IBuiltInPermission.GetTokenIndex(); // 0x003E8004
	public override IPermission Copy(); // 0x003E8014
	public override void FromXml(SecurityElement esd); // 0x003E80BC
	public override IPermission Intersect(IPermission target); // 0x003E81E8
	public override bool IsSubsetOf(IPermission target); // 0x003E8400
	public override SecurityElement ToXml(); // 0x003E8508
	public override IPermission Union(IPermission target); // 0x003E85BC
	private PublisherIdentityPermission Cast(IPermission target); // 0x003E8320
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class PublisherIdentityPermissionAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 1392
{
	// Fields
	private string certFile; // 0x10
	private string signedFile; // 0x14
	private string x509data; // 0x18

	// Properties
	public string CertFile { get; set; } // 0x003E8774 0x003E877C
	public string SignedFile { get; set; } // 0x003E8784 0x003E878C
	public string X509Certificate { get; set; } // 0x003E8794 0x003E879C

	// Constructors
	public PublisherIdentityPermissionAttribute(SecurityAction action); // 0x003E876C

	// Methods
	public override IPermission CreatePermission(); // 0x003E87A4
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class ReflectionPermission : CodeAccessPermission, IBuiltInPermission, IUnrestrictedPermission // TypeDefIndex: 1393
{
	// Fields
	private const int version = 1; // 0x00
	private ReflectionPermissionFlag flags; // 0x08

	// Properties
	public ReflectionPermissionFlag Flags { get; set; } // 0x003E8AB4 0x003E8970

	// Constructors
	public ReflectionPermission(PermissionState state); // 0x003E890C
	public ReflectionPermission(ReflectionPermissionFlag flag); // 0x003E8948

	// Methods
	private int System.Security.Permissions.IBuiltInPermission.GetTokenIndex(); // 0x003E8AAC
	public override IPermission Copy(); // 0x003E8ABC
	public override void FromXml(SecurityElement esd); // 0x003E8B3C
	public override IPermission Intersect(IPermission target); // 0x003E8D18
	public override bool IsSubsetOf(IPermission target); // 0x003E8F3C
	public bool IsUnrestricted(); // 0x003E8F28
	public override SecurityElement ToXml(); // 0x003E8FA4
	public override IPermission Union(IPermission other); // 0x003E92BC
	private ReflectionPermission Cast(IPermission target); // 0x003E8E48
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class ReflectionPermissionAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 1394
{
	// Fields
	private ReflectionPermissionFlag flags; // 0x10
	private bool memberAccess; // 0x14
	private bool reflectionEmit; // 0x15
	private bool typeInfo; // 0x16

	// Properties
	public ReflectionPermissionFlag Flags { get; set; } // 0x003E9414 0x003E941C
	public bool MemberAccess { get; set; } // 0x003E943C 0x003E9444
	public bool ReflectionEmit { get; set; } // 0x003E9460 0x003E9468
	public bool RestrictedMemberAccess { get; set; } // 0x003E9484 0x003E9490
	public bool TypeInformation { get; set; } // 0x003E94A8 0x003E94B0

	// Constructors
	public ReflectionPermissionAttribute(SecurityAction action); // 0x003E940C

	// Methods
	public override IPermission CreatePermission(); // 0x003E94CC
}

// Namespace: System.Security.Permissions
[Serializable]
public enum ReflectionPermissionFlag // TypeDefIndex: 1395
{
	NoFlags = 0,
	TypeInformation = 1,
	MemberAccess = 2,
	ReflectionEmit = 4,
	AllFlags = 7,
	RestrictedMemberAccess = 8
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class RegistryPermission : CodeAccessPermission, IBuiltInPermission, IUnrestrictedPermission // TypeDefIndex: 1396
{
	// Fields
	private const int version = 1; // 0x00
	private PermissionState _state; // 0x08
	private ArrayList createList; // 0x0C
	private ArrayList readList; // 0x10
	private ArrayList writeList; // 0x14

	// Constructors
	public RegistryPermission(PermissionState state); // 0x003E94D4
	public RegistryPermission(RegistryPermissionAccess access, string pathList); // 0x003E9598
	public RegistryPermission(RegistryPermissionAccess access, AccessControlActions control, string pathList); // 0x003E9798

	// Methods
	private int System.Security.Permissions.IBuiltInPermission.GetTokenIndex(); // 0x003E9A14
	public void AddPathList(RegistryPermissionAccess access, string pathList); // 0x003E9664
	public void AddPathList(RegistryPermissionAccess access, AccessControlActions control, string pathList); // 0x003E998C
	public string GetPathList(RegistryPermissionAccess access); // 0x003EA00C
	public void SetPathList(RegistryPermissionAccess access, string pathList); // 0x003EA504
	public override IPermission Copy(); // 0x003EAAB4
	public override void FromXml(SecurityElement esd); // 0x003EABD0
	public override IPermission Intersect(IPermission target); // 0x003EAD70
	public override bool IsSubsetOf(IPermission target); // 0x003EB908
	public bool IsUnrestricted(); // 0x003EAFC0
	public override SecurityElement ToXml(); // 0x003EC0F8
	public override IPermission Union(IPermission other); // 0x003EC278
	private bool IsEmpty(); // 0x003EB850
	private RegistryPermission Cast(IPermission target); // 0x003EAEE0
	internal void ThrowInvalidFlag(RegistryPermissionAccess flag, bool context); // 0x003E9ED4
	private string GetPathList(ArrayList list); // 0x003EA084
	internal bool KeyIsSubsetOf(IList local, IList target); // 0x003EB9BC
	internal void AddWithUnionKey(IList list, string pathList); // 0x003E9A1C
	internal void IntersectKeys(IList local, IList target, IList result); // 0x003EAFD0
}

// Namespace: System.Security.Permissions
[Serializable]
public enum RegistryPermissionAccess // TypeDefIndex: 1397
{
	NoAccess = 0,
	Read = 1,
	Write = 2,
	Create = 4,
	AllAccess = 7
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class RegistryPermissionAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 1398
{
	// Fields
	private string create; // 0x10
	private string read; // 0x14
	private string write; // 0x18
	private string changeAccessControl; // 0x1C
	private string viewAccessControl; // 0x20

	// Properties
	public string All { get; set; } // 0x003AA340 0x003AA3DC
	public string Create { get; set; } // 0x003AA3EC 0x003AA3F4
	public string Read { get; set; } // 0x003AA3FC 0x003AA404
	public string Write { get; set; } // 0x003AA40C 0x003AA414
	public string ChangeAccessControl { get; set; } // 0x003AA41C 0x003AA424
	public string ViewAccessControl { get; set; } // 0x003AA42C 0x003AA434
	public string ViewAndModify { get; set; } // 0x003AA43C 0x003AA4C4

	// Constructors
	public RegistryPermissionAttribute(SecurityAction action); // 0x003AA338

	// Methods
	public override IPermission CreatePermission(); // 0x003AA4D4
}

// Namespace: System.Security.Permissions
[Serializable]
public enum SecurityAction // TypeDefIndex: 1399
{
	Demand = 2,
	Assert = 3,
	Deny = 4,
	PermitOnly = 5,
	LinkDemand = 6,
	InheritanceDemand = 7,
	RequestMinimum = 8,
	RequestOptional = 9,
	RequestRefuse = 10
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class SecurityPermission : CodeAccessPermission, IBuiltInPermission, IUnrestrictedPermission // TypeDefIndex: 1400
{
	// Fields
	private const int version = 1; // 0x00
	private SecurityPermissionFlag flags; // 0x08

	// Properties
	public SecurityPermissionFlag Flags { get; set; } // 0x003AA7E0 0x003AA698

	// Constructors
	public SecurityPermission(PermissionState state); // 0x003AA634
	public SecurityPermission(SecurityPermissionFlag flag); // 0x003AA670

	// Methods
	private int System.Security.Permissions.IBuiltInPermission.GetTokenIndex(); // 0x003AA7D8
	public bool IsUnrestricted(); // 0x003AA7E8
	public override IPermission Copy(); // 0x003AA800
	public override IPermission Intersect(IPermission target); // 0x003AA880
	public override IPermission Union(IPermission target); // 0x003AAA90
	public override bool IsSubsetOf(IPermission target); // 0x003AAB88
	public override void FromXml(SecurityElement esd); // 0x003AABE8
	public override SecurityElement ToXml(); // 0x003AAD9C
	private bool IsEmpty(); // 0x003AAA7C
	private SecurityPermission Cast(IPermission target); // 0x003AA99C
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class SecurityPermissionAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 1401
{
	// Fields
	private SecurityPermissionFlag m_Flags; // 0x10

	// Properties
	public bool Assertion { get; set; } // 0x003AAEE8 0x003AAEF4
	public bool BindingRedirects { get; set; } // 0x003AAF0C 0x003AAF18
	public bool ControlAppDomain { get; set; } // 0x003AAF30 0x003AAF3C
	public bool ControlDomainPolicy { get; set; } // 0x003AAF54 0x003AAF60
	public bool ControlEvidence { get; set; } // 0x003AAF78 0x003AAF84
	public bool ControlPolicy { get; set; } // 0x003AAF9C 0x003AAFA8
	public bool ControlPrincipal { get; set; } // 0x003AAFC0 0x003AAFCC
	public bool ControlThread { get; set; } // 0x003AAFE4 0x003AAFF0
	public bool Execution { get; set; } // 0x003AB008 0x003AB014
	public bool Infrastructure { get; set; } // 0x003AB02C 0x003AB038
	public bool RemotingConfiguration { get; set; } // 0x003AB050 0x003AB05C
	public bool SerializationFormatter { get; set; } // 0x003AB074 0x003AB080
	public bool SkipVerification { get; set; } // 0x003AB098 0x003AB0A4
	public bool UnmanagedCode { get; set; } // 0x003AB0BC 0x003AB0C8
	public SecurityPermissionFlag Flags { get; set; } // 0x003AB0E8 0x003AB0F0

	// Constructors
	public SecurityPermissionAttribute(SecurityAction action); // 0x003AAEC8

	// Methods
	public override IPermission CreatePermission(); // 0x003AB0E0
}

// Namespace: System.Security.Permissions
[Serializable]
public enum SecurityPermissionFlag // TypeDefIndex: 1402
{
	NoFlags = 0,
	Assertion = 1,
	UnmanagedCode = 2,
	SkipVerification = 4,
	Execution = 8,
	ControlThread = 16,
	ControlEvidence = 32,
	ControlPolicy = 64,
	SerializationFormatter = 128,
	ControlDomainPolicy = 256,
	ControlPrincipal = 512,
	ControlAppDomain = 1024,
	RemotingConfiguration = 2048,
	Infrastructure = 4096,
	BindingRedirects = 8192,
	AllFlags = 16383
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class SiteIdentityPermission : CodeAccessPermission, IBuiltInPermission // TypeDefIndex: 1403
{
	// Fields
	private const int version = 1; // 0x00
	private string _site; // 0x08
	private static bool[] valid; // 0x00

	// Properties
	public string Site { get; set; } // 0x003AB2A0 0x003AB148

	// Constructors
	public SiteIdentityPermission(PermissionState state); // 0x003AB0F8
	public SiteIdentityPermission(string site); // 0x003AB120
	private static SiteIdentityPermission(); // 0x003AB200

	// Methods
	private int System.Security.Permissions.IBuiltInPermission.GetTokenIndex(); // 0x003AB298
	public override IPermission Copy(); // 0x003AB4EC
	public override void FromXml(SecurityElement esd); // 0x003AB588
	public override IPermission Intersect(IPermission target); // 0x003AB64C
	public override bool IsSubsetOf(IPermission target); // 0x003AB9B0
	public override SecurityElement ToXml(); // 0x003ABAF8
	public override IPermission Union(IPermission target); // 0x003ABB98
	private bool IsEmpty(); // 0x003AB34C
	private SiteIdentityPermission Cast(IPermission target); // 0x003AB73C
	private bool IsValid(string s); // 0x003AB360
	private bool Match(string target); // 0x003AB81C
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class SiteIdentityPermissionAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 1404
{
	// Fields
	private string site; // 0x10

	// Properties
	public string Site { get; set; } // 0x003ABD24 0x003ABD2C

	// Constructors
	public SiteIdentityPermissionAttribute(SecurityAction action); // 0x003ABD1C

	// Methods
	public override IPermission CreatePermission(); // 0x003ABD34
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class StrongNameIdentityPermission : CodeAccessPermission, IBuiltInPermission // TypeDefIndex: 1405
{
	// Fields
	private const int version = 1; // 0x00
	private static Version defaultVersion; // 0x00
	private PermissionState _state; // 0x08
	private ArrayList _list; // 0x0C

	// Properties
	public string Name { get; set; } // 0x003AC660 0x003AC7A0
	public StrongNamePublicKeyBlob PublicKey { get; set; } // 0x003ACA4C 0x003ACB8C
	public Version Version { get; set; } // 0x003ACD54 0x003ACE94

	// Constructors
	public StrongNameIdentityPermission(PermissionState state); // 0x003ABE04
	public StrongNameIdentityPermission(StrongNamePublicKeyBlob blob, string name, Version version); // 0x003AC040
	internal StrongNameIdentityPermission(StrongNameIdentityPermission snip); // 0x003AC1E4
	private static StrongNameIdentityPermission(); // 0x003AC5D0

	// Methods
	private int System.Security.Permissions.IBuiltInPermission.GetTokenIndex(); // 0x003AC658
	internal void ResetToDefault(); // 0x003AC970
	public override IPermission Copy(); // 0x003ACFFC
	public override void FromXml(SecurityElement e); // 0x003AD1F8
	private SNIP FromSecurityElement(SecurityElement se); // 0x003AD630
	public override IPermission Intersect(IPermission target); // 0x003AD8E8
	public override bool IsSubsetOf(IPermission target); // 0x003ADE44
	public override SecurityElement ToXml(); // 0x003AE714
	private void ToSecurityElement(SecurityElement se, SNIP snip); // 0x003AEBB4
	public override IPermission Union(IPermission target); // 0x003AEF48
	private bool IsUnrestricted(); // 0x003AE64C
	private bool Contains(SNIP snip); // 0x003AF39C
	private bool IsEmpty(SNIP snip); // 0x003AECF0
	private bool IsEmpty(); // 0x003AD08C
	private StrongNameIdentityPermission Cast(IPermission target); // 0x003AE56C
	private bool Match(string target); // 0x003ADB20
}

// Namespace: 
private struct SNIP // TypeDefIndex: 1406
{
	// Fields
	public StrongNamePublicKeyBlob PublicKey; // 0x08
	public string Name; // 0x0C
	public Version AssemblyVersion; // 0x10

	// Constructors
	internal SNIP(StrongNamePublicKeyBlob pk, string name, Version version); // 0x000A76D8

	// Methods
	internal static SNIP CreateDefault(); // 0x003ABEFC
	internal bool IsNameSubsetOf(string target); // 0x000A76E4
	internal bool IsSubsetOf(SNIP target); // 0x000A76EC
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class StrongNameIdentityPermissionAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 1407
{
	// Fields
	private string name; // 0x10
	private string key; // 0x14
	private string version; // 0x18

	// Properties
	public string Name { get; set; } // 0x003AF95C 0x003AF964
	public string PublicKey { get; set; } // 0x003AF96C 0x003AF974
	public string Version { get; set; } // 0x003AF97C 0x003AF984

	// Constructors
	public StrongNameIdentityPermissionAttribute(SecurityAction action); // 0x003AF954

	// Methods
	public override IPermission CreatePermission(); // 0x003AF98C
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class StrongNamePublicKeyBlob // TypeDefIndex: 1408
{
	// Fields
	internal byte[] pubkey; // 0x08

	// Constructors
	public StrongNamePublicKeyBlob(byte[] publicKey); // 0x003AF994

	// Methods
	internal static StrongNamePublicKeyBlob FromString(string s); // 0x003AD768
	private static byte CharToByte(char c); // 0x003AFA50
	public override bool Equals(object obj); // 0x003ADCD4
	public override int GetHashCode(); // 0x003AFAF4
	public override string ToString(); // 0x003AEE20
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class UIPermission : CodeAccessPermission, IBuiltInPermission, IUnrestrictedPermission // TypeDefIndex: 1409
{
	// Fields
	private const int version = 1; // 0x00
	private UIPermissionWindow _window; // 0x08
	private UIPermissionClipboard _clipboard; // 0x0C

	// Properties
	public UIPermissionClipboard Clipboard { get; set; } // 0x003B0020 0x003AFBF8
	public UIPermissionWindow Window { get; set; } // 0x003B0028 0x003AFE00

	// Constructors
	public UIPermission(PermissionState state); // 0x003AFB90
	public UIPermission(UIPermissionClipboard clipboardFlag); // 0x003AFBD0
	public UIPermission(UIPermissionWindow windowFlag); // 0x003AFDD8
	public UIPermission(UIPermissionWindow windowFlag, UIPermissionClipboard clipboardFlag); // 0x003AFFE0

	// Methods
	private int System.Security.Permissions.IBuiltInPermission.GetTokenIndex(); // 0x003B0018
	public override IPermission Copy(); // 0x003B0030
	public override void FromXml(SecurityElement esd); // 0x003B00AC
	public override IPermission Intersect(IPermission target); // 0x003B0388
	public override bool IsSubsetOf(IPermission target); // 0x003B0538
	public bool IsUnrestricted(); // 0x003B05B0
	public override SecurityElement ToXml(); // 0x003B05D8
	public override IPermission Union(IPermission target); // 0x003B0794
	private bool IsEmpty(UIPermissionWindow w, UIPermissionClipboard c); // 0x003B0528
	private UIPermission Cast(IPermission target); // 0x003B0448
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class UIPermissionAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 1410
{
	// Fields
	private UIPermissionClipboard clipboard; // 0x10
	private UIPermissionWindow window; // 0x14

	// Properties
	public UIPermissionClipboard Clipboard { get; set; } // 0x003B086C 0x003B0874
	public UIPermissionWindow Window { get; set; } // 0x003B087C 0x003B0884

	// Constructors
	public UIPermissionAttribute(SecurityAction action); // 0x003B0864

	// Methods
	public override IPermission CreatePermission(); // 0x003B088C
}

// Namespace: System.Security.Permissions
[Serializable]
public enum UIPermissionClipboard // TypeDefIndex: 1411
{
	NoClipboard = 0,
	OwnClipboard = 1,
	AllClipboard = 2
}

// Namespace: System.Security.Permissions
[Serializable]
public enum UIPermissionWindow // TypeDefIndex: 1412
{
	NoWindows = 0,
	SafeSubWindows = 1,
	SafeTopLevelWindows = 2,
	AllWindows = 3
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class UrlIdentityPermission : CodeAccessPermission, IBuiltInPermission // TypeDefIndex: 1413
{
	// Fields
	private const int version = 1; // 0x00
	private string url; // 0x08

	// Properties
	public string Url { get; set; } // 0x003B0AB0 0x003B0AB8

	// Constructors
	public UrlIdentityPermission(PermissionState state); // 0x003B0938
	public UrlIdentityPermission(string site); // 0x003B09EC

	// Methods
	private int System.Security.Permissions.IBuiltInPermission.GetTokenIndex(); // 0x003B0AA8
	public override IPermission Copy(); // 0x003B0B68
	public override void FromXml(SecurityElement esd); // 0x003B0BF0
	public override IPermission Intersect(IPermission target); // 0x003B0D00
	public override bool IsSubsetOf(IPermission target); // 0x003B1014
	public override SecurityElement ToXml(); // 0x003B1198
	public override IPermission Union(IPermission target); // 0x003B1240
	private bool IsEmpty(); // 0x003B0E70
	private UrlIdentityPermission Cast(IPermission target); // 0x003B0D90
	private bool Match(string target); // 0x003B0E94
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class UrlIdentityPermissionAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 1414
{
	// Fields
	private string url; // 0x10

	// Properties
	public string Url { get; set; } // 0x003B13E8 0x003B13F0

	// Constructors
	public UrlIdentityPermissionAttribute(SecurityAction action); // 0x003B13E0

	// Methods
	public override IPermission CreatePermission(); // 0x003B13F8
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class ZoneIdentityPermission : CodeAccessPermission, IBuiltInPermission // TypeDefIndex: 1415
{
	// Fields
	private const int version = 1; // 0x00
	private SecurityZone zone; // 0x08

	// Properties
	public SecurityZone SecurityZone { get; set; } // 0x003B1C6C 0x003B1508

	// Constructors
	public ZoneIdentityPermission(PermissionState state); // 0x003B14AC
	public ZoneIdentityPermission(SecurityZone zone); // 0x003B14E0

	// Methods
	private int System.Security.Permissions.IBuiltInPermission.GetTokenIndex(); // 0x003B16E8
	public override IPermission Copy(); // 0x003B16F0
	public override bool IsSubsetOf(IPermission target); // 0x003B1770
	public override IPermission Union(IPermission target); // 0x003B18A0
	public override IPermission Intersect(IPermission target); // 0x003B199C
	public override void FromXml(SecurityElement esd); // 0x003B19DC
	public override SecurityElement ToXml(); // 0x003B1B7C
	private ZoneIdentityPermission Cast(IPermission target); // 0x003B17C0
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class ZoneIdentityPermissionAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 1416
{
	// Fields
	private SecurityZone zone; // 0x10

	// Properties
	public SecurityZone Zone { get; set; } // 0x003B1C94 0x003B1C9C

	// Constructors
	public ZoneIdentityPermissionAttribute(SecurityAction action); // 0x003B1C74

	// Methods
	public override IPermission CreatePermission(); // 0x003B1CA4
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class AllMembershipCondition : IConstantMembershipCondition, IMembershipCondition, ISecurityEncodable, ISecurityPolicyEncodable // TypeDefIndex: 1417
{
	// Fields
	private readonly int version; // 0x08

	// Constructors
	public AllMembershipCondition(); // 0x003B1D6C

	// Methods
	public bool Check(Evidence evidence); // 0x003B1D7C
	public IMembershipCondition Copy(); // 0x003B1D84
	public override bool Equals(object o); // 0x003B1DFC
	public void FromXml(SecurityElement e); // 0x003B1E78
	public void FromXml(SecurityElement e, PolicyLevel level); // 0x003B1E7C
	public override int GetHashCode(); // 0x003B22A4
	public override string ToString(); // 0x003B235C
	public SecurityElement ToXml(); // 0x003B23B8
	public SecurityElement ToXml(PolicyLevel level); // 0x003B23BC
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class ApplicationDirectory : IBuiltInEvidence // TypeDefIndex: 1418
{
	// Fields
	private string directory; // 0x08

	// Properties
	public string Directory { get; } // 0x003B2818 

	// Constructors
	public ApplicationDirectory(string name); // 0x003B26B4

	// Methods
	private int System.Security.Policy.IBuiltInEvidence.GetRequiredSize(bool verbose); // 0x003B27D4
	private int System.Security.Policy.IBuiltInEvidence.InitFromBuffer(char[] buffer, int position); // 0x003B2808
	private int System.Security.Policy.IBuiltInEvidence.OutputToBuffer(char[] buffer, int position, bool verbose); // 0x003B2810
	public object Copy(); // 0x003B2820
	public override bool Equals(object o); // 0x003B2894
	public override int GetHashCode(); // 0x003B2AEC
	public override string ToString(); // 0x003B2B18
	private void ThrowOnInvalid(string appdir); // 0x003B2980
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class ApplicationDirectoryMembershipCondition : IConstantMembershipCondition, IMembershipCondition, ISecurityEncodable, ISecurityPolicyEncodable // TypeDefIndex: 1419
{
	// Fields
	private readonly int version; // 0x08

	// Constructors
	public ApplicationDirectoryMembershipCondition(); // 0x003B2C60

	// Methods
	public bool Check(Evidence evidence); // 0x003B2C70
	public IMembershipCondition Copy(); // 0x003B3064
	public override bool Equals(object o); // 0x003B30DC
	public void FromXml(SecurityElement e); // 0x003B3158
	public void FromXml(SecurityElement e, PolicyLevel level); // 0x003B315C
	public override int GetHashCode(); // 0x003B3200
	public override string ToString(); // 0x003B32B8
	public SecurityElement ToXml(); // 0x003B3314
	public SecurityElement ToXml(PolicyLevel level); // 0x003B3318
}

// Namespace: System.Security.Policy
public sealed class ApplicationSecurityInfo // TypeDefIndex: 1420
{
	// Fields
	private ActivationContext _context; // 0x08
	private Evidence _evidence; // 0x0C
	private ApplicationId _appid; // 0x10
	private PermissionSet _defaultSet; // 0x14
	private ApplicationId _deployid; // 0x18

	// Properties
	public Evidence ApplicationEvidence { get; set; } // 0x003B34A8 0x003B34B0
	public ApplicationId ApplicationId { get; set; } // 0x003B3560 0x003B3568
	public PermissionSet DefaultRequestSet { get; set; } // 0x003B3618 0x003B3698
	public ApplicationId DeploymentId { get; set; } // 0x003B3748 0x003B3750

	// Constructors
	public ApplicationSecurityInfo(ActivationContext activationContext); // 0x003B33EC

}

// Namespace: System.Security.Policy
public static class ApplicationSecurityManager // TypeDefIndex: 1421
{
	// Fields
	private const string config = "ApplicationTrust.config"; // 0x00
	private static IApplicationTrustManager _appTrustManager; // 0x00
	private static ApplicationTrustCollection _userAppTrusts; // 0x04

	// Properties
	public static IApplicationTrustManager ApplicationTrustManager { get; } // 0x003B3800 
	public static ApplicationTrustCollection UserApplicationTrusts { get; } // 0x003B38B4 

	// Methods
	public static bool DetermineApplicationTrust(ActivationContext activationContext, TrustManagerContext context); // 0x003B39D4
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class ApplicationTrust : ISecurityEncodable // TypeDefIndex: 1422
{
	// Fields
	private ApplicationIdentity _appid; // 0x08
	private PolicyStatement _defaultPolicy; // 0x0C
	private object _xtranfo; // 0x10
	private bool _trustrun; // 0x14
	private bool _persist; // 0x15
	private IList`1<StrongName> fullTrustAssemblies; // 0x18

	// Properties
	public ApplicationIdentity ApplicationIdentity { get; set; } // 0x003B41CC 0x003B41D4
	public PolicyStatement DefaultGrantSet { get; set; } // 0x003B4284 0x003B433C
	public object ExtraInfo { get; set; } // 0x003B4344 0x003B434C
	public bool IsApplicationTrustedToRun { get; set; } // 0x003B4354 0x003B435C
	public bool Persist { get; set; } // 0x003B4364 0x003B436C

	// Constructors
	public ApplicationTrust(); // 0x003B3B34
	public ApplicationTrust(ApplicationIdentity applicationIdentity); // 0x003B3BC4
	internal ApplicationTrust(PermissionSet defaultGrantSet, IEnumerable`1<StrongName> fullTrustAssemblies); // 0x003B3C7C

	// Methods
	public void FromXml(SecurityElement element); // 0x003B4374
	public SecurityElement ToXml(); // 0x003B4BA8
	private PolicyStatement GetDefaultGrantSet(); // 0x003B42A8
}

// Namespace: System.Security.Policy
public sealed class ApplicationTrustCollection : IEnumerable, ICollection // TypeDefIndex: 1423
{
	// Fields
	private ArrayList _list; // 0x08

	// Properties
	public int Count { get; } // 0x003B50FC 
	public bool IsSynchronized { get; } // 0x003B5130 
	public object SyncRoot { get; } // 0x003B5138 
	public ApplicationTrust Item { get; } // 0x003B513C 
	public ApplicationTrust Item { get; } // 0x003B51F0 

	// Constructors
	internal ApplicationTrustCollection(); // 0x003B3958

	// Methods
	private void System.Collections.ICollection.CopyTo(Array array, int index); // 0x003B5010
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x003B5054
	public int Add(ApplicationTrust trust); // 0x003B5348
	public void AddRange(ApplicationTrust[] trusts); // 0x003B549C
	public void AddRange(ApplicationTrustCollection trusts); // 0x003B5640
	public void Clear(); // 0x003B5A48
	public void CopyTo(ApplicationTrust[] array, int index); // 0x003B5A7C
	public ApplicationTrustCollection Find(ApplicationIdentity applicationIdentity, ApplicationVersionMatch versionMatch); // 0x003B5AC0
	public ApplicationTrustEnumerator GetEnumerator(); // 0x003B57F0
	public void Remove(ApplicationTrust trust); // 0x003B5F40
	public void Remove(ApplicationIdentity applicationIdentity, ApplicationVersionMatch versionMatch); // 0x003B6150
	public void RemoveRange(ApplicationTrust[] trusts); // 0x003B61C8
	public void RemoveRange(ApplicationTrustCollection trusts); // 0x003B62C0
	internal void RemoveAllInstances(ApplicationTrust trust); // 0x003B6074
}

// Namespace: System.Security.Policy
public sealed class ApplicationTrustEnumerator : IEnumerator // TypeDefIndex: 1424
{
	// Fields
	private IEnumerator e; // 0x08

	// Properties
	private object System.Collections.IEnumerator.Current { get; } // 0x003B63C0 
	public ApplicationTrust Current { get; } // 0x003B5860 

	// Constructors
	internal ApplicationTrustEnumerator(ApplicationTrustCollection collection); // 0x003B50C4

	// Methods
	public bool MoveNext(); // 0x003B5970
	public void Reset(); // 0x003B6498
}

// Namespace: System.Security.Policy
public enum ApplicationVersionMatch // TypeDefIndex: 1425
{
	MatchExactVersion = 0,
	MatchAllVersions = 1
}

// Namespace: System.Security.Policy
[Serializable]
public class CodeConnectAccess // TypeDefIndex: 1426
{
	// Fields
	public static readonly string AnyScheme; // 0x00
	public static readonly int DefaultPort; // 0x04
	public static readonly int OriginPort; // 0x08
	public static readonly string OriginScheme; // 0x0C
	private string _scheme; // 0x08
	private int _port; // 0x0C

	// Properties
	public int Port { get; } // 0x003B6730 
	public string Scheme { get; } // 0x003B6738 

	// Constructors
	public CodeConnectAccess(string allowScheme, int allowPort); // 0x003B6570
	private static CodeConnectAccess(); // 0x003B6688

	// Methods
	public override bool Equals(object o); // 0x003B6740
	public override int GetHashCode(); // 0x003B6854
	public static CodeConnectAccess CreateAnySchemeAccess(int allowPort); // 0x003B688C
	public static CodeConnectAccess CreateOriginSchemeAccess(int allowPort); // 0x003B6934
}

// Namespace: System.Security.Policy
[Serializable]
public abstract class CodeGroup // TypeDefIndex: 1427
{
	// Fields
	private PolicyStatement m_policy; // 0x08
	private IMembershipCondition m_membershipCondition; // 0x0C
	private string m_description; // 0x10
	private string m_name; // 0x14
	private ArrayList m_children; // 0x18
	private static Dictionary`2<string, int> <>f__switch$map2A; // 0x00

	// Properties
	public abstract string MergeLogic { get; }
	public PolicyStatement PolicyStatement { get; set; } // 0x003B74CC 0x003B74D4
	public string Description { get; set; } // 0x003B74DC 0x003B74E4
	public IMembershipCondition MembershipCondition { get; set; } // 0x003B74EC 0x003B74F4
	public string Name { get; set; } // 0x003B75A4 0x003B75AC
	public IList Children { get; set; } // 0x003B75B4 0x003B75BC
	public virtual string AttributeString { get; } // 0x003B7694 
	public virtual string PermissionSetName { get; } // 0x003B775C 

	// Constructors
	protected CodeGroup(IMembershipCondition membershipCondition, PolicyStatement policy); // 0x003B69DC
	internal CodeGroup(SecurityElement e, PolicyLevel level); // 0x003B6BCC

	// Methods
	public abstract CodeGroup Copy();
	public abstract PolicyStatement Resolve(Evidence evidence);
	public abstract CodeGroup ResolveMatchingCodeGroups(Evidence evidence);
	public void AddChild(CodeGroup group); // 0x003B7908
	public override bool Equals(object o); // 0x003B79FC
	public bool Equals(CodeGroup cg, bool compareChildren); // 0x003B7AA4
	public void RemoveChild(CodeGroup group); // 0x003B805C
	public override int GetHashCode(); // 0x003B80A0
	public void FromXml(SecurityElement e); // 0x003B8138
	public void FromXml(SecurityElement e, PolicyLevel level); // 0x003B6C60
	protected virtual void ParseXml(SecurityElement e, PolicyLevel level); // 0x003B8A48
	public SecurityElement ToXml(); // 0x003B8A4C
	public SecurityElement ToXml(PolicyLevel level); // 0x003B8A54
	protected virtual void CreateXml(SecurityElement element, PolicyLevel level); // 0x003B9098
	internal static CodeGroup CreateFromXml(SecurityElement se, PolicyLevel level); // 0x003B8578
}

// Namespace: System.Security.Policy
internal static class DefaultPolicies // TypeDefIndex: 1428
{
	// Fields
	private const string DnsPermissionClass = "System.Net.DnsPermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"; // 0x00
	private const string EventLogPermissionClass = "System.Diagnostics.EventLogPermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"; // 0x00
	private const string PrintingPermissionClass = "System.Drawing.Printing.PrintingPermission, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	private const string SocketPermissionClass = "System.Net.SocketPermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"; // 0x00
	private const string WebPermissionClass = "System.Net.WebPermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"; // 0x00
	private const string PerformanceCounterPermissionClass = "System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"; // 0x00
	private const string DirectoryServicesPermissionClass = "System.DirectoryServices.DirectoryServicesPermission, System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	private const string MessageQueuePermissionClass = "System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	private const string ServiceControllerPermissionClass = "System.ServiceProcess.ServiceControllerPermission, System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	private const string OleDbPermissionClass = "System.Data.OleDb.OleDbPermission, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"; // 0x00
	private const string SqlClientPermissionClass = "System.Data.SqlClient.SqlClientPermission, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"; // 0x00
	private const string DataProtectionPermissionClass = "System.Security.Permissions.DataProtectionPermission, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	private const string StorePermissionClass = "System.Security.Permissions.StorePermission, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	private static Version _fxVersion; // 0x00
	private static byte[] _ecmaKey; // 0x04
	private static StrongNamePublicKeyBlob _ecma; // 0x08
	private static byte[] _msFinalKey; // 0x0C
	private static StrongNamePublicKeyBlob _msFinal; // 0x10
	private static NamedPermissionSet _fullTrust; // 0x14
	private static NamedPermissionSet _localIntranet; // 0x18
	private static NamedPermissionSet _internet; // 0x1C
	private static NamedPermissionSet _skipVerification; // 0x20
	private static NamedPermissionSet _execution; // 0x24
	private static NamedPermissionSet _nothing; // 0x28
	private static NamedPermissionSet _everything; // 0x2C
	private static Dictionary`2<string, int> <>f__switch$map2B; // 0x30

	// Properties
	public static PermissionSet FullTrust { get; } // 0x003B97D0 
	public static PermissionSet LocalIntranet { get; } // 0x003B98D4 
	public static PermissionSet Internet { get; } // 0x003B99D8 
	public static PermissionSet SkipVerification { get; } // 0x003B9ADC 
	public static PermissionSet Execution { get; } // 0x003B9BE0 
	public static PermissionSet Nothing { get; } // 0x003B9CE4 
	public static PermissionSet Everything { get; } // 0x003B9DE8 

	// Constructors
	private static DefaultPolicies(); // 0x003B912C

	// Methods
	public static PermissionSet GetSpecialPermissionSet(string name); // 0x003B9220
	public static StrongNameMembershipCondition FullTrustMembership(string name, Key key); // 0x003BAE5C
	private static NamedPermissionSet BuildFullTrust(); // 0x003B9EEC
	private static NamedPermissionSet BuildLocalIntranet(); // 0x003B9F70
	private static NamedPermissionSet BuildInternet(); // 0x003BA2FC
	private static NamedPermissionSet BuildSkipVerification(); // 0x003BA5B8
	private static NamedPermissionSet BuildExecution(); // 0x003BA6C0
	private static NamedPermissionSet BuildNothing(); // 0x003BA7C8
	private static NamedPermissionSet BuildEverything(); // 0x003BA84C
	private static SecurityElement PrintingPermission(string level); // 0x003BB1F8
}

// Namespace: 
public static class ReservedNames // TypeDefIndex: 1429
{
	// Fields
	public const string FullTrust = "FullTrust"; // 0x00
	public const string LocalIntranet = "LocalIntranet"; // 0x00
	public const string Internet = "Internet"; // 0x00
	public const string SkipVerification = "SkipVerification"; // 0x00
	public const string Execution = "Execution"; // 0x00
	public const string Nothing = "Nothing"; // 0x00
	public const string Everything = "Everything"; // 0x00
	private static Dictionary`2<string, int> <>f__switch$map2C; // 0x00

	// Methods
	public static bool IsReserved(string name); // 0x003BB370
}

// Namespace: 
public enum Key // TypeDefIndex: 1430
{
	Ecma = 0,
	MsFinal = 1
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class Evidence : IEnumerable, ICollection // TypeDefIndex: 1431
{
	// Fields
	private bool _locked; // 0x08
	private ArrayList hostEvidenceList; // 0x0C
	private ArrayList assemblyEvidenceList; // 0x10
	private int _hashCode; // 0x14

	// Properties
	public int Count { get; } // 0x003BBE3C 
	public bool IsReadOnly { get; } // 0x003BBE98 
	public bool IsSynchronized { get; } // 0x003BBEA0 
	public bool Locked { get; set; } // 0x003BBEA8 0x003BBEB0
	public object SyncRoot { get; } // 0x003BBEB8 
	internal ArrayList HostEvidenceList { get; } // 0x003BBCEC 
	internal ArrayList AssemblyEvidenceList { get; } // 0x003BBD94 

	// Constructors
	public Evidence(); // 0x003BB6B0
	public Evidence(Evidence evidence); // 0x003BB6B8
	public Evidence(object[] hostEvidence, object[] assemblyEvidence); // 0x003BBC54

	// Methods
	public void AddAssembly(object id); // 0x003BBEBC
	public void AddHost(object id); // 0x003BBF08
	public void Clear(); // 0x003BC05C
	public void CopyTo(Array array, int index); // 0x003BC0AC
	public override bool Equals(object obj); // 0x003BC17C
	public IEnumerator GetEnumerator(); // 0x003BC518
	public IEnumerator GetAssemblyEnumerator(); // 0x003BC608
	public override int GetHashCode(); // 0x003BC640
	public IEnumerator GetHostEnumerator(); // 0x003B302C
	public void Merge(Evidence evidence); // 0x003BB6E8
	public void RemoveType(Type t); // 0x003BC7B0
	private static bool IsAuthenticodePresent(Assembly a); // 0x003BC904
	internal static Evidence GetDefaultHostEvidence(Assembly a); // 0x003BC908
}

// Namespace: 
private class EvidenceEnumerator : IEnumerator // TypeDefIndex: 1432
{
	// Fields
	private IEnumerator currentEnum; // 0x08
	private IEnumerator hostEnum; // 0x0C
	private IEnumerator assemblyEnum; // 0x10

	// Properties
	public object Current { get; } // 0x003BCC64 

	// Constructors
	public EvidenceEnumerator(IEnumerator hostenum, IEnumerator assemblyenum); // 0x003BC5DC

	// Methods
	public bool MoveNext(); // 0x003BC974
	public void Reset(); // 0x003BCAF8
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class FileCodeGroup : CodeGroup // TypeDefIndex: 1433
{
	// Fields
	private FileIOPermissionAccess m_access; // 0x1C

	// Properties
	public override string MergeLogic { get; } // 0x003BD154 
	public override string AttributeString { get; } // 0x003BDD14 
	public override string PermissionSetName { get; } // 0x003BDD1C 

	// Constructors
	public FileCodeGroup(IMembershipCondition membershipCondition, FileIOPermissionAccess access); // 0x003BCD3C
	internal FileCodeGroup(SecurityElement e, PolicyLevel level); // 0x003B909C

	// Methods
	public override CodeGroup Copy(); // 0x003BCD5C
	public override PolicyStatement Resolve(Evidence evidence); // 0x003BD1B0
	public override CodeGroup ResolveMatchingCodeGroups(Evidence evidence); // 0x003BD840
	public override bool Equals(object o); // 0x003BDE04
	public override int GetHashCode(); // 0x003BDEE0
	protected override void ParseXml(SecurityElement e, PolicyLevel level); // 0x003BDFA4
	protected override void CreateXml(SecurityElement element, PolicyLevel level); // 0x003BE114
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class FirstMatchCodeGroup : CodeGroup // TypeDefIndex: 1434
{
	// Properties
	public override string MergeLogic { get; } // 0x003BE1EC 

	// Constructors
	public FirstMatchCodeGroup(IMembershipCondition membershipCondition, PolicyStatement policy); // 0x003BE1E8
	internal FirstMatchCodeGroup(SecurityElement e, PolicyLevel level); // 0x003B90A0

	// Methods
	public override CodeGroup Copy(); // 0x003BE248
	public override PolicyStatement Resolve(Evidence evidence); // 0x003BE698
	public override CodeGroup ResolveMatchingCodeGroups(Evidence evidence); // 0x003BEB7C
	private FirstMatchCodeGroup CopyNoChildren(); // 0x003BE5E4
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class GacInstalled : IBuiltInEvidence, IIdentityPermissionFactory // TypeDefIndex: 1435
{
	// Constructors
	public GacInstalled(); // 0x003BF080

	// Methods
	private int System.Security.Policy.IBuiltInEvidence.GetRequiredSize(bool verbose); // 0x003BF088
	private int System.Security.Policy.IBuiltInEvidence.InitFromBuffer(char[] buffer, int position); // 0x003BF090
	private int System.Security.Policy.IBuiltInEvidence.OutputToBuffer(char[] buffer, int position, bool verbose); // 0x003BF098
	public object Copy(); // 0x003BF0E8
	public IPermission CreateIdentityPermission(Evidence evidence); // 0x003BF154
	public override bool Equals(object o); // 0x003BF1C0
	public override int GetHashCode(); // 0x003BF23C
	public override string ToString(); // 0x003BF244
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class GacMembershipCondition : IConstantMembershipCondition, IMembershipCondition, ISecurityEncodable, ISecurityPolicyEncodable // TypeDefIndex: 1436
{
	// Fields
	private readonly int version; // 0x08

	// Constructors
	public GacMembershipCondition(); // 0x003BF36C

	// Methods
	public bool Check(Evidence evidence); // 0x003BF37C
	public IMembershipCondition Copy(); // 0x003BF52C
	public override bool Equals(object o); // 0x003BF5A4
	public void FromXml(SecurityElement e); // 0x003BF620
	public void FromXml(SecurityElement e, PolicyLevel level); // 0x003BF624
	public override int GetHashCode(); // 0x003BF6C8
	public override string ToString(); // 0x003BF6D0
	public SecurityElement ToXml(); // 0x003BF72C
	public SecurityElement ToXml(PolicyLevel level); // 0x003BF730
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class Hash : ISerializable, IBuiltInEvidence // TypeDefIndex: 1437
{
	// Fields
	private Assembly assembly; // 0x08
	private byte[] data; // 0x0C
	internal byte[] _md5; // 0x10
	internal byte[] _sha1; // 0x14

	// Properties
	public byte[] MD5 { get; } // 0x003BFA0C 
	public byte[] SHA1 { get; } // 0x003BFBC0 

	// Constructors
	public Hash(Assembly assembly); // 0x003BF804
	internal Hash(); // 0x003BF8C0
	internal Hash(SerializationInfo info, StreamingContext context); // 0x003BF8C8

	// Methods
	private int System.Security.Policy.IBuiltInEvidence.GetRequiredSize(bool verbose); // 0x003BF9EC
	private int System.Security.Policy.IBuiltInEvidence.InitFromBuffer(char[] buffer, int position); // 0x003BF9FC
	private int System.Security.Policy.IBuiltInEvidence.OutputToBuffer(char[] buffer, int position, bool verbose); // 0x003BFA04
	public byte[] GenerateHash(HashAlgorithm hashAlg); // 0x003BFAF8
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x003BFE7C
	public override string ToString(); // 0x003BFF54
	private byte[] GetData(); // 0x003BFCAC
	public static Hash CreateMD5(byte[] md5); // 0x003C0190
	public static Hash CreateSHA1(byte[] sha1); // 0x003C0274
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class HashMembershipCondition : ISerializable, IDeserializationCallback, IMembershipCondition, ISecurityEncodable, ISecurityPolicyEncodable // TypeDefIndex: 1438
{
	// Fields
	private readonly int version; // 0x08
	private HashAlgorithm hash_algorithm; // 0x0C
	private byte[] hash_value; // 0x10

	// Properties
	public HashAlgorithm HashAlgorithm { get; set; } // 0x003C04E0 0x003C0560
	public byte[] HashValue { get; set; } // 0x003C0610 0x003C0720

	// Constructors
	internal HashMembershipCondition(); // 0x003C0358
	public HashMembershipCondition(HashAlgorithm hashAlg, byte[] value); // 0x003C0368

	// Methods
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender); // 0x003C04D8
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x003C04DC
	public bool Check(Evidence evidence); // 0x003C0828
	public IMembershipCondition Copy(); // 0x003C0AD8
	public override bool Equals(object o); // 0x003C0B54
	public SecurityElement ToXml(); // 0x003C0C18
	public SecurityElement ToXml(PolicyLevel level); // 0x003C0C1C
	public void FromXml(SecurityElement e); // 0x003C0DB8
	public void FromXml(SecurityElement e, PolicyLevel level); // 0x003C0DBC
	public override int GetHashCode(); // 0x003C0F04
	public override string ToString(); // 0x003C0FB4
	private bool Compare(byte[] expected, byte[] actual); // 0x003C0A08
}

// Namespace: System.Security.Policy
public interface IApplicationTrustManager : ISecurityEncodable // TypeDefIndex: 1439
{
	// Methods
	ApplicationTrust DetermineApplicationTrust(ActivationContext activationContext, TrustManagerContext context);
}

// Namespace: System.Security.Policy
internal interface IBuiltInEvidence // TypeDefIndex: 1440
{
	// Methods
	int GetRequiredSize(bool verbose);
	int InitFromBuffer(char[] buffer, int position);
	int OutputToBuffer(char[] buffer, int position, bool verbose);
}

// Namespace: System.Security.Policy
internal interface IConstantMembershipCondition // TypeDefIndex: 1441
{
}

// Namespace: System.Security.Policy
public interface IIdentityPermissionFactory // TypeDefIndex: 1442
{
	// Methods
	IPermission CreateIdentityPermission(Evidence evidence);
}

// Namespace: System.Security.Policy
public interface IMembershipCondition : ISecurityEncodable, ISecurityPolicyEncodable // TypeDefIndex: 1443
{
	// Methods
	bool Check(Evidence evidence);
	IMembershipCondition Copy();
	bool Equals(object obj);
	string ToString();
}

// Namespace: System.Security.Policy
internal sealed class MembershipConditionHelper // TypeDefIndex: 1444
{
	// Fields
	private static readonly string XmlTag; // 0x00

	// Constructors
	public MembershipConditionHelper(); // 0x003C10EC
	private static MembershipConditionHelper(); // 0x003C10F4

	// Methods
	internal static int CheckSecurityElement(SecurityElement se, string parameterName, int minimumVersion, int maximumVersion); // 0x003B1F20
	internal static SecurityElement Element(Type type, int version); // 0x003B2490
}

// Namespace: System.Security.Policy
internal class MonoTrustManager : IApplicationTrustManager, ISecurityEncodable // TypeDefIndex: 1445
{
	// Fields
	private const string tag = "IApplicationTrustManager"; // 0x00

	// Constructors
	public MonoTrustManager(); // 0x003B38AC

	// Methods
	public ApplicationTrust DetermineApplicationTrust(ActivationContext activationContext, TrustManagerContext context); // 0x003C1168
	public void FromXml(SecurityElement e); // 0x003C1214
	public SecurityElement ToXml(); // 0x003C137C
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class NetCodeGroup : CodeGroup // TypeDefIndex: 1446
{
	// Fields
	public static readonly string AbsentOriginScheme; // 0x00
	public static readonly string AnyOtherOriginScheme; // 0x04
	private Hashtable _rules; // 0x1C
	private int _hashcode; // 0x20

	// Properties
	public override string AttributeString { get; } // 0x003C163C 
	public override string MergeLogic { get; } // 0x003C1644 
	public override string PermissionSetName { get; } // 0x003C16A0 

	// Constructors
	public NetCodeGroup(IMembershipCondition membershipCondition); // 0x003C14F8
	internal NetCodeGroup(SecurityElement e, PolicyLevel level); // 0x003B90A4
	private static NetCodeGroup(); // 0x003C157C

	// Methods
	public void AddConnectAccess(string originScheme, CodeConnectAccess connectAccess); // 0x003C16FC
	public override CodeGroup Copy(); // 0x003C1BC8
	private bool Equals(CodeConnectAccess[] rules1, CodeConnectAccess[] rules2); // 0x003C1FD0
	public override bool Equals(object o); // 0x003C20C8
	public DictionaryEntry[] GetConnectAccessRules(); // 0x003C2550
	public override int GetHashCode(); // 0x003C2614
	public override PolicyStatement Resolve(Evidence evidence); // 0x003C29F4
	public void ResetConnectAccess(); // 0x003C2FF4
	public override CodeGroup ResolveMatchingCodeGroups(Evidence evidence); // 0x003C3028
	protected override void CreateXml(SecurityElement element, PolicyLevel level); // 0x003C34DC
	protected override void ParseXml(SecurityElement e, PolicyLevel level); // 0x003C34E0
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class PermissionRequestEvidence : IBuiltInEvidence // TypeDefIndex: 1447
{
	// Fields
	private PermissionSet requested; // 0x08
	private PermissionSet optional; // 0x0C
	private PermissionSet denied; // 0x10

	// Properties
	public PermissionSet DeniedPermissions { get; } // 0x003C3730 
	public PermissionSet OptionalPermissions { get; } // 0x003C3738 
	public PermissionSet RequestedPermissions { get; } // 0x003C3740 

	// Constructors
	public PermissionRequestEvidence(PermissionSet request, PermissionSet optional, PermissionSet denied); // 0x003C34E4

	// Methods
	private int System.Security.Policy.IBuiltInEvidence.GetRequiredSize(bool verbose); // 0x003C35D8
	private int System.Security.Policy.IBuiltInEvidence.InitFromBuffer(char[] buffer, int position); // 0x003C3720
	private int System.Security.Policy.IBuiltInEvidence.OutputToBuffer(char[] buffer, int position, bool verbose); // 0x003C3728
	public PermissionRequestEvidence Copy(); // 0x003C3748
	public override string ToString(); // 0x003C37D4
}

// Namespace: System.Security.Policy
[Serializable]
public class PolicyException : SystemException, _Exception // TypeDefIndex: 1448
{
	// Constructors
	public PolicyException(); // 0x003C3AB0
	public PolicyException(string message); // 0x003C3B24
	protected PolicyException(SerializationInfo info, StreamingContext context); // 0x003C3B2C
	public PolicyException(string message, Exception exception); // 0x003C3B4C

}

// Namespace: System.Security.Policy
[Serializable]
public sealed class PolicyLevel // TypeDefIndex: 1449
{
	// Fields
	private string label; // 0x08
	private CodeGroup root_code_group; // 0x0C
	private ArrayList full_trust_assemblies; // 0x10
	private ArrayList named_permission_sets; // 0x14
	private string _location; // 0x18
	private PolicyLevelType _type; // 0x1C
	private Hashtable fullNames; // 0x20
	private SecurityElement xml; // 0x24

	// Properties
	public IList FullTrustAssemblies { get; } // 0x003C65E0 
	public string Label { get; } // 0x003C65E8 
	public IList NamedPermissionSets { get; } // 0x003C65F0 
	public CodeGroup RootCodeGroup { get; set; } // 0x003C65F8 0x003C6600
	public string StoreLocation { get; } // 0x003C66B0 
	public PolicyLevelType Type { get; } // 0x003C66B8 

	// Constructors
	internal PolicyLevel(string label, PolicyLevelType type); // 0x003C3B54

	// Methods
	internal void LoadFromFile(string filename); // 0x003C3BF8
	internal void LoadFromString(string xml); // 0x003C65C0
	private SecurityElement FromString(string xml); // 0x003C4220
	public void AddFullTrustAssembly(StrongName sn); // 0x003C66C0
	public void AddFullTrustAssembly(StrongNameMembershipCondition snMC); // 0x003C67C4
	public void AddNamedPermissionSet(NamedPermissionSet permSet); // 0x003C6BB4
	public NamedPermissionSet ChangeNamedPermissionSet(string name, PermissionSet pSet); // 0x003C7004
	public static PolicyLevel CreateAppDomainLevel(); // 0x003C7568
	public void FromXml(SecurityElement e); // 0x003C471C
	public NamedPermissionSet GetNamedPermissionSet(string name); // 0x003B8140
	public void Recover(); // 0x003C7888
	public void RemoveFullTrustAssembly(StrongName sn); // 0x003C7AE4
	public void RemoveFullTrustAssembly(StrongNameMembershipCondition snMC); // 0x003C7BE8
	public NamedPermissionSet RemoveNamedPermissionSet(NamedPermissionSet permSet); // 0x003C7E18
	public NamedPermissionSet RemoveNamedPermissionSet(string name); // 0x003C7ED4
	public void Reset(); // 0x003C76F4
	public PolicyStatement Resolve(Evidence evidence); // 0x003C83F8
	public CodeGroup ResolveMatchingCodeGroups(Evidence evidence); // 0x003C84E0
	public SecurityElement ToXml(); // 0x003C85BC
	internal void Save(); // 0x003C61E4
	internal void CreateDefaultLevel(PolicyLevelType type); // 0x003C5CA4
	internal void CreateDefaultFullTrustAssemblies(); // 0x003C5624
	internal void CreateDefaultNamedPermissionSets(); // 0x003C58BC
	internal string ResolveClassName(string className); // 0x003C94F8
	internal bool IsFullTrustAssembly(Assembly a); // 0x003C95A0
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class PolicyStatement : ISecurityEncodable, ISecurityPolicyEncodable // TypeDefIndex: 1450
{
	// Fields
	private PermissionSet perms; // 0x08
	private PolicyStatementAttribute attrs; // 0x0C

	// Properties
	public PermissionSet PermissionSet { get; set; } // 0x003B7864 0x003C9A28
	public PolicyStatementAttribute Attributes { get; set; } // 0x003C9A30 0x003C9A38
	public string AttributeString { get; } // 0x003B76A8 

	// Constructors
	public PolicyStatement(PermissionSet permSet); // 0x003B41C4
	public PolicyStatement(PermissionSet permSet, PolicyStatementAttribute attributes); // 0x003C99C0

	// Methods
	public PolicyStatement Copy(); // 0x003B6B50
	public void FromXml(SecurityElement et); // 0x003C9B40
	public void FromXml(SecurityElement et, PolicyLevel level); // 0x003B48F0
	public SecurityElement ToXml(); // 0x003B500C
	public SecurityElement ToXml(PolicyLevel level); // 0x003C9B44
	public override bool Equals(object obj); // 0x003C9CE4
	public override int GetHashCode(); // 0x003B80F4
	internal static PolicyStatement Empty(); // 0x003BD7AC
}

// Namespace: System.Security.Policy
[Serializable]
public enum PolicyStatementAttribute // TypeDefIndex: 1451
{
	Nothing = 0,
	Exclusive = 1,
	LevelFinal = 2,
	All = 3
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class Publisher : IBuiltInEvidence, IIdentityPermissionFactory // TypeDefIndex: 1452
{
	// Fields
	private X509Certificate m_cert; // 0x08

	// Properties
	public X509Certificate Certificate { get; } // 0x003C9F58 

	// Constructors
	public Publisher(X509Certificate cert); // 0x003C9DD0

	// Methods
	private int System.Security.Policy.IBuiltInEvidence.GetRequiredSize(bool verbose); // 0x003C9EEC
	private int System.Security.Policy.IBuiltInEvidence.InitFromBuffer(char[] buffer, int position); // 0x003C9F48
	private int System.Security.Policy.IBuiltInEvidence.OutputToBuffer(char[] buffer, int position, bool verbose); // 0x003C9F50
	public object Copy(); // 0x003CA02C
	public IPermission CreateIdentityPermission(Evidence evidence); // 0x003CA0A0
	public override bool Equals(object o); // 0x003CA118
	public override int GetHashCode(); // 0x003CA23C
	public override string ToString(); // 0x003CA270
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class PublisherMembershipCondition : IConstantMembershipCondition, IMembershipCondition, ISecurityEncodable, ISecurityPolicyEncodable // TypeDefIndex: 1453
{
	// Fields
	private readonly int version; // 0x08
	private X509Certificate x509; // 0x0C

	// Properties
	public X509Certificate Certificate { get; set; } // 0x003CA530 0x003CA538

	// Constructors
	internal PublisherMembershipCondition(); // 0x003CA3FC
	public PublisherMembershipCondition(X509Certificate certificate); // 0x003CA40C

	// Methods
	public bool Check(Evidence evidence); // 0x003CA5E8
	public IMembershipCondition Copy(); // 0x003CA8E8
	public override bool Equals(object o); // 0x003CA95C
	public void FromXml(SecurityElement e); // 0x003CAA1C
	public void FromXml(SecurityElement e, PolicyLevel level); // 0x003CAA20
	public override int GetHashCode(); // 0x003CAB2C
	public override string ToString(); // 0x003CAB60
	public SecurityElement ToXml(); // 0x003CAC20
	public SecurityElement ToXml(PolicyLevel level); // 0x003CAC24
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class Site : IBuiltInEvidence, IIdentityPermissionFactory // TypeDefIndex: 1454
{
	// Fields
	internal string origin_site; // 0x08

	// Properties
	public string Name { get; } // 0x003CB86C 

	// Constructors
	public Site(string name); // 0x003CAD5C

	// Methods
	private int System.Security.Policy.IBuiltInEvidence.GetRequiredSize(bool verbose); // 0x003CB17C
	private int System.Security.Policy.IBuiltInEvidence.InitFromBuffer(char[] buffer, int position); // 0x003CB1B0
	private int System.Security.Policy.IBuiltInEvidence.OutputToBuffer(char[] buffer, int position, bool verbose); // 0x003CB1B8
	public static Site CreateFromUrl(string url); // 0x003CB1C0
	public object Copy(); // 0x003CB4DC
	public IPermission CreateIdentityPermission(Evidence evidence); // 0x003CB550
	public override bool Equals(object o); // 0x003CB5D0
	public override int GetHashCode(); // 0x003CB700
	public override string ToString(); // 0x003CB72C
	internal static bool IsValid(string name); // 0x003CAE80
	internal static string UrlToSite(string url); // 0x003CB3AC
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class SiteMembershipCondition : IConstantMembershipCondition, IMembershipCondition, ISecurityEncodable, ISecurityPolicyEncodable // TypeDefIndex: 1455
{
	// Fields
	private readonly int version; // 0x08
	private string _site; // 0x0C

	// Properties
	public string Site { get; set; } // 0x003CB9BC 0x003CB8B8

	// Constructors
	internal SiteMembershipCondition(); // 0x003CB874
	public SiteMembershipCondition(string site); // 0x003CB884

	// Methods
	public bool Check(Evidence evidence); // 0x003CB9C4
	public IMembershipCondition Copy(); // 0x003CBF54
	public override bool Equals(object o); // 0x003CBFE0
	public void FromXml(SecurityElement e); // 0x003CC0B4
	public void FromXml(SecurityElement e, PolicyLevel level); // 0x003CC0B8
	public override int GetHashCode(); // 0x003CC18C
	public override string ToString(); // 0x003CC1B8
	public SecurityElement ToXml(); // 0x003CC250
	public SecurityElement ToXml(PolicyLevel level); // 0x003CC254
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class StrongName : IBuiltInEvidence, IIdentityPermissionFactory // TypeDefIndex: 1456
{
	// Fields
	private StrongNamePublicKeyBlob publickey; // 0x08
	private string name; // 0x0C
	private Version version; // 0x10

	// Properties
	public string Name { get; } // 0x00230C90 
	public StrongNamePublicKeyBlob PublicKey { get; } // 0x00230C98 
	public Version Version { get; } // 0x00230CA0 

	// Constructors
	public StrongName(StrongNamePublicKeyBlob blob, string name, Version version); // 0x00230A60

	// Methods
	private int System.Security.Policy.IBuiltInEvidence.GetRequiredSize(bool verbose); // 0x00230C4C
	private int System.Security.Policy.IBuiltInEvidence.InitFromBuffer(char[] buffer, int position); // 0x00230C80
	private int System.Security.Policy.IBuiltInEvidence.OutputToBuffer(char[] buffer, int position, bool verbose); // 0x00230C88
	public object Copy(); // 0x00230CA8
	public IPermission CreateIdentityPermission(Evidence evidence); // 0x00230D34
	public override bool Equals(object o); // 0x00230DCC
	public override int GetHashCode(); // 0x00230F88
	public override string ToString(); // 0x00230FB4
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class StrongNameMembershipCondition : IConstantMembershipCondition, IMembershipCondition, ISecurityEncodable, ISecurityPolicyEncodable // TypeDefIndex: 1457
{
	// Fields
	private readonly int version; // 0x08
	private StrongNamePublicKeyBlob blob; // 0x0C
	private string name; // 0x10
	private Version assemblyVersion; // 0x14

	// Properties
	public string Name { get; set; } // 0x00231620 0x00231628
	public Version Version { get; set; } // 0x00231630 0x00231638
	public StrongNamePublicKeyBlob PublicKey { get; set; } // 0x00231640 0x00231648

	// Constructors
	public StrongNameMembershipCondition(StrongNamePublicKeyBlob blob, string name, Version version); // 0x00231498
	internal StrongNameMembershipCondition(SecurityElement e); // 0x002315D8
	internal StrongNameMembershipCondition(); // 0x00231610

	// Methods
	public bool Check(Evidence evidence); // 0x002316F8
	public IMembershipCondition Copy(); // 0x00231994
	public override bool Equals(object o); // 0x00231A20
	public override int GetHashCode(); // 0x00231B7C
	public void FromXml(SecurityElement e); // 0x0023160C
	public void FromXml(SecurityElement e, PolicyLevel level); // 0x00231BA8
	public override string ToString(); // 0x00231E04
	public SecurityElement ToXml(); // 0x00231F4C
	public SecurityElement ToXml(PolicyLevel level); // 0x00231F50
}

// Namespace: System.Security.Policy
public class TrustManagerContext // TypeDefIndex: 1458
{
	// Fields
	private bool _ignorePersistedDecision; // 0x08
	private bool _noPrompt; // 0x09
	private bool _keepAlive; // 0x0A
	private bool _persist; // 0x0B
	private ApplicationIdentity _previousId; // 0x0C
	private TrustManagerUIContext _ui; // 0x10

	// Properties
	public virtual bool IgnorePersistedDecision { get; set; } // 0x002321B0 0x002321B8
	public virtual bool KeepAlive { get; set; } // 0x002321C0 0x002321C8
	public virtual bool NoPrompt { get; set; } // 0x002321D0 0x002321D8
	public virtual bool Persist { get; set; } // 0x002321E0 0x002321E8
	public virtual ApplicationIdentity PreviousApplicationIdentity { get; set; } // 0x002321F0 0x002321F8
	public virtual TrustManagerUIContext UIContext { get; set; } // 0x00232200 0x00232208

	// Constructors
	public TrustManagerContext(); // 0x00232160
	public TrustManagerContext(TrustManagerUIContext uiContext); // 0x00232188

}

// Namespace: System.Security.Policy
public enum TrustManagerUIContext // TypeDefIndex: 1459
{
	Install = 0,
	Upgrade = 1,
	Run = 2
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class UnionCodeGroup : CodeGroup // TypeDefIndex: 1460
{
	// Properties
	public override string MergeLogic { get; } // 0x0023316C 

	// Constructors
	public UnionCodeGroup(IMembershipCondition membershipCondition, PolicyStatement policy); // 0x00232210
	internal UnionCodeGroup(SecurityElement e, PolicyLevel level); // 0x00232218

	// Methods
	public override CodeGroup Copy(); // 0x00232220
	internal CodeGroup Copy(bool childs); // 0x00232228
	public override PolicyStatement Resolve(Evidence evidence); // 0x00232630
	public override CodeGroup ResolveMatchingCodeGroups(Evidence evidence); // 0x00232C20
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class Url : IBuiltInEvidence, IIdentityPermissionFactory // TypeDefIndex: 1461
{
	// Fields
	private string origin_url; // 0x08

	// Properties
	public string Value { get; } // 0x00234260 

	// Constructors
	public Url(string name); // 0x002331C8
	internal Url(string name, bool validated); // 0x002331D0

	// Methods
	private int System.Security.Policy.IBuiltInEvidence.GetRequiredSize(bool verbose); // 0x00233518
	private int System.Security.Policy.IBuiltInEvidence.InitFromBuffer(char[] buffer, int position); // 0x0023354C
	private int System.Security.Policy.IBuiltInEvidence.OutputToBuffer(char[] buffer, int position, bool verbose); // 0x00233554
	public object Copy(); // 0x0023355C
	public IPermission CreateIdentityPermission(Evidence evidence); // 0x002335E4
	public override bool Equals(object o); // 0x0023365C
	public override int GetHashCode(); // 0x00233CDC
	public override string ToString(); // 0x00233E78
	private string Prepare(string url); // 0x00233218
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class UrlMembershipCondition : IConstantMembershipCondition, IMembershipCondition, ISecurityEncodable, ISecurityPolicyEncodable // TypeDefIndex: 1462
{
	// Fields
	private readonly int version; // 0x08
	private Url url; // 0x0C
	private string userUrl; // 0x10

	// Properties
	public string Url { get; set; } // 0x00234B6C 0x00234BA4

	// Constructors
	public UrlMembershipCondition(string url); // 0x002347C0
	internal UrlMembershipCondition(Url url, string userUrl); // 0x00234AB0

	// Methods
	public bool Check(Evidence evidence); // 0x00234C1C
	public IMembershipCondition Copy(); // 0x002351C0
	public override bool Equals(object o); // 0x0023523C
	public void FromXml(SecurityElement e); // 0x00235414
	public void FromXml(SecurityElement e, PolicyLevel level); // 0x00235418
	public override int GetHashCode(); // 0x00235530
	public override string ToString(); // 0x00235558
	public SecurityElement ToXml(); // 0x00235610
	public SecurityElement ToXml(PolicyLevel level); // 0x00235614
	internal void CheckUrl(string url); // 0x002348B8
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class Zone : IBuiltInEvidence, IIdentityPermissionFactory // TypeDefIndex: 1463
{
	// Fields
	private SecurityZone zone; // 0x08

	// Properties
	public SecurityZone SecurityZone { get; } // 0x00235B60 

	// Constructors
	public Zone(SecurityZone zone); // 0x00235750

	// Methods
	private int System.Security.Policy.IBuiltInEvidence.GetRequiredSize(bool verbose); // 0x00235A40
	private int System.Security.Policy.IBuiltInEvidence.InitFromBuffer(char[] buffer, int position); // 0x00235A48
	private int System.Security.Policy.IBuiltInEvidence.OutputToBuffer(char[] buffer, int position, bool verbose); // 0x00235AB0
	public object Copy(); // 0x00235B68
	public IPermission CreateIdentityPermission(Evidence evidence); // 0x00235BDC
	public static Zone CreateFromUrl(string url); // 0x00235C54
	public override bool Equals(object o); // 0x00235E9C
	public override int GetHashCode(); // 0x00235F44
	public override string ToString(); // 0x00235F4C
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class ZoneMembershipCondition : IConstantMembershipCondition, IMembershipCondition, ISecurityEncodable, ISecurityPolicyEncodable // TypeDefIndex: 1464
{
	// Fields
	private readonly int version; // 0x08
	private SecurityZone zone; // 0x0C

	// Properties
	public SecurityZone SecurityZone { get; set; } // 0x002362D0 0x0023610C

	// Constructors
	internal ZoneMembershipCondition(); // 0x002360C8
	public ZoneMembershipCondition(SecurityZone zone); // 0x002360D8

	// Methods
	public bool Check(Evidence evidence); // 0x002362D8
	public IMembershipCondition Copy(); // 0x002364A4
	public override bool Equals(object o); // 0x00236530
	public void FromXml(SecurityElement e); // 0x002365D8
	public void FromXml(SecurityElement e, PolicyLevel level); // 0x002365DC
	public override int GetHashCode(); // 0x002367A0
	public override string ToString(); // 0x00236864
	public SecurityElement ToXml(); // 0x002369F0
	public SecurityElement ToXml(PolicyLevel level); // 0x002369F4
}

// Namespace: System.Security.Principal
[Serializable]
public class GenericIdentity : IIdentity // TypeDefIndex: 1465
{
	// Fields
	private string m_name; // 0x08
	private string m_type; // 0x0C

	// Properties
	public virtual string AuthenticationType { get; } // 0x00236D04 
	public virtual string Name { get; } // 0x00236D0C 
	public virtual bool IsAuthenticated { get; } // 0x00236D14 

	// Constructors
	public GenericIdentity(string name, string type); // 0x00236B54
	public GenericIdentity(string name); // 0x00236C64

}

// Namespace: System.Security.Principal
[Serializable]
public class GenericPrincipal : IPrincipal // TypeDefIndex: 1466
{
	// Fields
	private IIdentity m_identity; // 0x08
	private string[] m_roles; // 0x0C

	// Properties
	public virtual IIdentity Identity { get; } // 0x00236EDC 

	// Constructors
	public GenericPrincipal(IIdentity identity, string[] roles); // 0x00236D44

	// Methods
	public virtual bool IsInRole(string role); // 0x00236EE4
}

// Namespace: System.Security.Principal
public interface IIdentity // TypeDefIndex: 1467
{
	// Properties
	string AuthenticationType { get; }
	bool IsAuthenticated { get; }
	string Name { get; }

}

// Namespace: System.Security.Principal
public interface IPrincipal // TypeDefIndex: 1468
{
	// Properties
	IIdentity Identity { get; }

	// Methods
	bool IsInRole(string role);
}

// Namespace: System.Security.Principal
[Serializable]
public sealed class IdentityNotMappedException : SystemException // TypeDefIndex: 1469
{
	// Fields
	private IdentityReferenceCollection _coll; // 0x34

	// Properties
	public IdentityReferenceCollection UnmappedIdentities { get; } // 0x0023718C 

	// Constructors
	public IdentityNotMappedException(); // 0x00237108
	public IdentityNotMappedException(string message); // 0x0023717C
	public IdentityNotMappedException(string message, Exception inner); // 0x00237184

	// Methods
	public override void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x00237284
}

// Namespace: System.Security.Principal
public abstract class IdentityReference // TypeDefIndex: 1470
{
	// Properties
	public abstract string Value { get; }

	// Constructors
	internal IdentityReference(); // 0x00237288

	// Methods
	public abstract bool Equals(object o);
	public abstract int GetHashCode();
	public abstract bool IsValidTargetType(Type targetType);
	public abstract string ToString();
	public abstract IdentityReference Translate(Type targetType);
	public static bool op_Equality(IdentityReference left, IdentityReference right); // 0x00237290
	public static bool op_Inequality(IdentityReference left, IdentityReference right); // 0x00237364
}

// Namespace: System.Security.Principal
public class IdentityReferenceCollection : IEnumerable, ICollection`1<IdentityReference>, IEnumerable`1<IdentityReference> // TypeDefIndex: 1471
{
	// Fields
	private ArrayList _list; // 0x08

	// Properties
	public int Count { get; } // 0x00237550 
	public bool IsReadOnly { get; } // 0x00237584 
	public IdentityReference Item { get; set; } // 0x0023758C 0x00237690

	// Constructors
	public IdentityReferenceCollection(); // 0x00237208
	public IdentityReferenceCollection(int capacity); // 0x00237444

	// Methods
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x002374C8
	public void Add(IdentityReference identity); // 0x002376D4
	public void Clear(); // 0x00237710
	public bool Contains(IdentityReference identity); // 0x00237744
	public void CopyTo(IdentityReference[] array, int offset); // 0x00237AC4
	public IEnumerator`1<IdentityReference> GetEnumerator(); // 0x00237B4C
	public bool Remove(IdentityReference identity); // 0x00237BD4
	public IdentityReferenceCollection Translate(Type targetType); // 0x00237F8C
	public IdentityReferenceCollection Translate(Type targetType, bool forceSuccess); // 0x00238014
}

// Namespace: System.Security.Principal
public sealed class NTAccount : IdentityReference // TypeDefIndex: 1472
{
	// Fields
	private string _value; // 0x08

	// Properties
	public override string Value { get; } // 0x0023885C 

	// Constructors
	public NTAccount(string name); // 0x0023809C
	public NTAccount(string domainName, string accountName); // 0x00238268

	// Methods
	public override bool Equals(object o); // 0x00238864
	public override int GetHashCode(); // 0x002389F4
	public override bool IsValidTargetType(Type targetType); // 0x00238A1C
	public override string ToString(); // 0x00238B18
	public override IdentityReference Translate(Type targetType); // 0x00238B20
	public static bool op_Equality(NTAccount left, NTAccount right); // 0x00238948
	public static bool op_Inequality(NTAccount left, NTAccount right); // 0x00238BC8
}

// Namespace: System.Security.Principal
[Serializable]
public enum PrincipalPolicy // TypeDefIndex: 1473
{
	UnauthenticatedPrincipal = 0,
	NoPrincipal = 1,
	WindowsPrincipal = 2
}

// Namespace: System.Security.Principal
public sealed class SecurityIdentifier : IdentityReference, IComparable`1<SecurityIdentifier> // TypeDefIndex: 1474
{
	// Fields
	private string _value; // 0x08
	public static readonly int MaxBinaryLength; // 0x00
	public static readonly int MinBinaryLength; // 0x04

	// Properties
	public SecurityIdentifier AccountDomainSid { get; } // 0x00239270 
	public int BinaryLength { get; } // 0x0023930C 
	public override string Value { get; } // 0x00239314 

	// Constructors
	public SecurityIdentifier(string sddlForm); // 0x00238C80
	public SecurityIdentifier(byte[] binaryForm, int offset); // 0x00238E90
	public SecurityIdentifier(IntPtr binaryForm); // 0x00238FD8
	public SecurityIdentifier(WellKnownSidType sidType, SecurityIdentifier domainSid); // 0x00239070
	private static SecurityIdentifier(); // 0x0023926C

	// Methods
	public int CompareTo(SecurityIdentifier sid); // 0x0023931C
	public override bool Equals(object o); // 0x002393F8
	public bool Equals(SecurityIdentifier sid); // 0x00239480
	public void GetBinaryForm(byte[] binaryForm, int offset); // 0x00239564
	public override int GetHashCode(); // 0x00239664
	public bool IsAccountSid(); // 0x0023968C
	public bool IsEqualDomainSid(SecurityIdentifier sid); // 0x00239714
	public override bool IsValidTargetType(Type targetType); // 0x0023979C
	public bool IsWellKnown(WellKnownSidType type); // 0x00239898
	public override string ToString(); // 0x00239920
	public override IdentityReference Translate(Type targetType); // 0x00239928
	public static bool op_Equality(SecurityIdentifier left, SecurityIdentifier right); // 0x002391C0
	public static bool op_Inequality(SecurityIdentifier left, SecurityIdentifier right); // 0x002399D0
}

// Namespace: System.Security.Principal
[Serializable]
public enum TokenAccessLevels // TypeDefIndex: 1475
{
	AssignPrimary = 1,
	Duplicate = 2,
	Impersonate = 4,
	Query = 8,
	QuerySource = 16,
	AdjustPrivileges = 32,
	AdjustGroups = 64,
	AdjustDefault = 128,
	AdjustSessionId = 256,
	Read = 131080,
	Write = 131296,
	AllAccess = 983551,
	MaximumAllowed = 33554432
}

// Namespace: System.Security.Principal
[Serializable]
public enum TokenImpersonationLevel // TypeDefIndex: 1476
{
	None = 0,
	Anonymous = 1,
	Identification = 2,
	Impersonation = 3,
	Delegation = 4
}

// Namespace: System.Security.Principal
public enum WellKnownSidType // TypeDefIndex: 1477
{
	NullSid = 0,
	WorldSid = 1,
	LocalSid = 2,
	CreatorOwnerSid = 3,
	CreatorGroupSid = 4,
	CreatorOwnerServerSid = 5,
	CreatorGroupServerSid = 6,
	NTAuthoritySid = 7,
	DialupSid = 8,
	NetworkSid = 9,
	BatchSid = 10,
	InteractiveSid = 11,
	ServiceSid = 12,
	AnonymousSid = 13,
	ProxySid = 14,
	EnterpriseControllersSid = 15,
	SelfSid = 16,
	AuthenticatedUserSid = 17,
	RestrictedCodeSid = 18,
	TerminalServerSid = 19,
	RemoteLogonIdSid = 20,
	LogonIdsSid = 21,
	LocalSystemSid = 22,
	LocalServiceSid = 23,
	NetworkServiceSid = 24,
	BuiltinDomainSid = 25,
	BuiltinAdministratorsSid = 26,
	BuiltinUsersSid = 27,
	BuiltinGuestsSid = 28,
	BuiltinPowerUsersSid = 29,
	BuiltinAccountOperatorsSid = 30,
	BuiltinSystemOperatorsSid = 31,
	BuiltinPrintOperatorsSid = 32,
	BuiltinBackupOperatorsSid = 33,
	BuiltinReplicatorSid = 34,
	BuiltinPreWindows2000CompatibleAccessSid = 35,
	BuiltinRemoteDesktopUsersSid = 36,
	BuiltinNetworkConfigurationOperatorsSid = 37,
	AccountAdministratorSid = 38,
	AccountGuestSid = 39,
	AccountKrbtgtSid = 40,
	AccountDomainAdminsSid = 41,
	AccountDomainUsersSid = 42,
	AccountDomainGuestsSid = 43,
	AccountComputersSid = 44,
	AccountControllersSid = 45,
	AccountCertAdminsSid = 46,
	AccountSchemaAdminsSid = 47,
	AccountEnterpriseAdminsSid = 48,
	AccountPolicyAdminsSid = 49,
	AccountRasAndIasServersSid = 50,
	NtlmAuthenticationSid = 51,
	DigestAuthenticationSid = 52,
	SChannelAuthenticationSid = 53,
	ThisOrganizationSid = 54,
	OtherOrganizationSid = 55,
	BuiltinIncomingForestTrustBuildersSid = 56,
	BuiltinPerformanceMonitoringUsersSid = 57,
	BuiltinPerformanceLoggingUsersSid = 58,
	BuiltinAuthorizationAccessSid = 59,
	WinBuiltinTerminalServerLicenseServersSid = 60,
	MaxDefined = 60
}

// Namespace: System.Security.Principal
[Serializable]
public enum WindowsAccountType // TypeDefIndex: 1478
{
	Normal = 0,
	Guest = 1,
	System = 2,
	Anonymous = 3
}

// Namespace: System.Security.Principal
[Serializable]
public enum WindowsBuiltInRole // TypeDefIndex: 1479
{
	Administrator = 544,
	User = 545,
	Guest = 546,
	PowerUser = 547,
	AccountOperator = 548,
	SystemOperator = 549,
	PrintOperator = 550,
	BackupOperator = 551,
	Replicator = 552
}

// Namespace: System.Security.Principal
[Serializable]
public class WindowsIdentity : IDisposable, ISerializable, IDeserializationCallback, IIdentity // TypeDefIndex: 1480
{
	// Fields
	private IntPtr _token; // 0x08
	private string _type; // 0x0C
	private WindowsAccountType _account; // 0x10
	private bool _authenticated; // 0x14
	private string _name; // 0x18
	private SerializationInfo _info; // 0x1C
	private static IntPtr invalidWindows; // 0x00

	// Properties
	public string AuthenticationType { get; } // 0x0023ABBC 
	public virtual bool IsAnonymous { get; } // 0x0023ABC4 
	public virtual bool IsAuthenticated { get; } // 0x0023ABD8 
	public virtual bool IsGuest { get; } // 0x0023ABE0 
	public virtual bool IsSystem { get; } // 0x0023ABF0 
	public virtual string Name { get; } // 0x0023AC04 
	public virtual IntPtr Token { get; } // 0x0023AC98 
	public IdentityReferenceCollection Groups { get; } // 0x0023ACA0 
	public TokenImpersonationLevel ImpersonationLevel { get; } // 0x0023AD28 
	public SecurityIdentifier Owner { get; } // 0x0023ADB0 
	public SecurityIdentifier User { get; } // 0x0023AE38 
	private static bool IsPosix { get; } // 0x00239EEC 

	// Constructors
	public WindowsIdentity(IntPtr userToken); // 0x00239A88
	public WindowsIdentity(IntPtr userToken, string type); // 0x00239B0C
	public WindowsIdentity(IntPtr userToken, string type, WindowsAccountType acctType); // 0x00239B4C
	public WindowsIdentity(IntPtr userToken, string type, WindowsAccountType acctType, bool isAuthenticated); // 0x00239AC4
	public WindowsIdentity(string sUserPrincipalName); // 0x00239D50
	public WindowsIdentity(string sUserPrincipalName, string type); // 0x00239D58
	public WindowsIdentity(SerializationInfo info, StreamingContext context); // 0x00239F1C
	private static WindowsIdentity(); // 0x00239F3C

	// Methods
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender); // 0x00239FA4
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x0023A3E4
	public void Dispose(); // 0x0023A588
	protected virtual void Dispose(bool disposing); // 0x0023A5DC
	public static WindowsIdentity GetAnonymous(); // 0x0023A630
	public static WindowsIdentity GetCurrent(); // 0x0023A830
	public static WindowsIdentity GetCurrent(bool ifImpersonating); // 0x0023A8F8
	public static WindowsIdentity GetCurrent(TokenAccessLevels desiredAccess); // 0x0023A980
	public virtual WindowsImpersonationContext Impersonate(); // 0x0023AA08
	public static WindowsImpersonationContext Impersonate(IntPtr userToken); // 0x0023AB4C
	private void SetToken(IntPtr token); // 0x00239B90
	internal static string[] _GetRoles(IntPtr token); // 0x0023AEC0
	internal static IntPtr GetCurrentToken(); // 0x0023A8F4
	private static string GetTokenName(IntPtr token); // 0x0023A3E0
	private static IntPtr GetUserToken(string username); // 0x00239EE8
}

// Namespace: System.Security.Principal
public class WindowsImpersonationContext : IDisposable // TypeDefIndex: 1481
{
	// Fields
	private IntPtr _token; // 0x08
	private bool undo; // 0x0C

	// Constructors
	internal WindowsImpersonationContext(IntPtr token); // 0x0023AA7C

	// Methods
	public void Dispose(); // 0x0023AEF0
	protected virtual void Dispose(bool disposing); // 0x0023AFCC
	public void Undo(); // 0x0023AF00
	private static bool CloseToken(IntPtr token); // 0x0023B008
	private static IntPtr DuplicateToken(IntPtr token); // 0x0023AEC4
	private static bool SetCurrentToken(IntPtr token); // 0x0023AEC8
	private static bool RevertToSelf(); // 0x0023B004
}

// Namespace: System.Security.Principal
[Serializable]
public class WindowsPrincipal : IPrincipal // TypeDefIndex: 1482
{
	// Fields
	private WindowsIdentity _identity; // 0x08
	private string[] m_roles; // 0x0C

	// Properties
	public virtual IIdentity Identity { get; } // 0x0023B0C8 
	private static bool IsPosix { get; } // 0x0023B1BC 
	private IntPtr Token { get; } // 0x0023B1EC 

	// Constructors
	public WindowsPrincipal(WindowsIdentity ntIdentity); // 0x0023B00C

	// Methods
	public virtual bool IsInRole(int rid); // 0x0023B0D0
	public virtual bool IsInRole(string role); // 0x0023B224
	public virtual bool IsInRole(WindowsBuiltInRole role); // 0x0023B3F4
	public virtual bool IsInRole(SecurityIdentifier sid); // 0x0023B4AC
	private static bool IsMemberOfGroupId(IntPtr user, IntPtr group); // 0x0023B220
	private static bool IsMemberOfGroupName(IntPtr user, string group); // 0x0023B3F0
}

// Namespace: System.Security
public sealed class AllowPartiallyTrustedCallersAttribute : Attribute // TypeDefIndex: 1483
{
	// Constructors
	public AllowPartiallyTrustedCallersAttribute(); // 0x00434A34

}

// Namespace: System.Security
[Serializable]
public abstract class CodeAccessPermission : IPermission, ISecurityEncodable, IStackWalk // TypeDefIndex: 1484
{
	// Constructors
	protected CodeAccessPermission(); // 0x00434A3C

	// Methods
	public void Assert(); // 0x00434A44
	internal bool CheckAssert(CodeAccessPermission asserted); // 0x00434A48
	internal bool CheckDemand(CodeAccessPermission target); // 0x00434AA8
	internal bool CheckDeny(CodeAccessPermission denied); // 0x00434B08
	internal bool CheckPermitOnly(CodeAccessPermission target); // 0x00434BFC
	public abstract IPermission Copy();
	public void Demand(); // 0x00434C5C
	public void Deny(); // 0x00434C60
	public override bool Equals(object obj); // 0x00434C64
	public abstract void FromXml(SecurityElement elem);
	public override int GetHashCode(); // 0x00434D70
	public abstract IPermission Intersect(IPermission target);
	public abstract bool IsSubsetOf(IPermission target);
	public override string ToString(); // 0x00434D78
	public abstract SecurityElement ToXml();
	public virtual IPermission Union(IPermission other); // 0x00434DB4
	public void PermitOnly(); // 0x00434E4C
	public static void RevertAll(); // 0x00434E50
	public static void RevertAssert(); // 0x00434E54
	public static void RevertDeny(); // 0x00434E58
	public static void RevertPermitOnly(); // 0x00434E5C
	internal SecurityElement Element(int version); // 0x00434E60
	internal static PermissionState CheckPermissionState(PermissionState state, bool allowUnrestricted); // 0x00435060
	internal static int CheckSecurityElement(SecurityElement se, string parameterName, int minimumVersion, int maximumVersion); // 0x00435194
	internal static bool IsUnrestricted(SecurityElement se); // 0x00435594
	internal bool ProcessFrame(SecurityFrame frame); // 0x004356F4
	internal static void ThrowInvalidPermission(IPermission target, Type expected); // 0x004361F0
	internal static void ThrowExecutionEngineException(SecurityAction stackmod); // 0x00436318
	internal static void ThrowSecurityException(object demanded, string message, SecurityFrame frame, SecurityAction action, IPermission failed); // 0x00436160
}

// Namespace: System.Security
[Serializable]
public class HostProtectionException : SystemException // TypeDefIndex: 1485
{
	// Fields
	private HostProtectionResource _protected; // 0x34
	private HostProtectionResource _demanded; // 0x38

	// Properties
	public HostProtectionResource DemandedResources { get; } // 0x003D8A4C 
	public HostProtectionResource ProtectedResources { get; } // 0x003D8A54 

	// Constructors
	public HostProtectionException(); // 0x003D89BC
	public HostProtectionException(string message); // 0x003D89C4
	public HostProtectionException(string message, Exception e); // 0x003D89CC
	public HostProtectionException(string message, HostProtectionResource protectedResources, HostProtectionResource demandedResources); // 0x003D89D4
	protected HostProtectionException(SerializationInfo info, StreamingContext context); // 0x003D89FC

	// Methods
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x003D8A5C
	public override string ToString(); // 0x003D8B04
}

// Namespace: System.Security
[Serializable]
public class HostSecurityManager // TypeDefIndex: 1486
{
	// Properties
	public virtual PolicyLevel DomainPolicy { get; } // 0x003D8B14 
	public virtual HostSecurityManagerOptions Flags { get; } // 0x003D8B1C 

	// Constructors
	public HostSecurityManager(); // 0x003D8B0C

	// Methods
	public virtual ApplicationTrust DetermineApplicationTrust(Evidence applicationEvidence, Evidence activatorEvidence, TrustManagerContext context); // 0x003D8B24
	public virtual Evidence ProvideAppDomainEvidence(Evidence inputEvidence); // 0x003D901C
	public virtual Evidence ProvideAssemblyEvidence(Assembly loadedAssembly, Evidence inputEvidence); // 0x003D9024
	public virtual PermissionSet ResolvePolicy(Evidence evidence); // 0x003D902C
}

// Namespace: System.Security
[Serializable]
public enum HostSecurityManagerOptions // TypeDefIndex: 1487
{
	None = 0,
	HostAppDomainEvidence = 1,
	HostPolicyLevel = 2,
	HostAssemblyEvidence = 4,
	HostDetermineApplicationTrust = 8,
	HostResolvePolicy = 16,
	AllFlags = 31
}

// Namespace: System.Security
public interface IEvidenceFactory // TypeDefIndex: 1488
{
	// Properties
	Evidence Evidence { get; }

}

// Namespace: System.Security
public interface IPermission : ISecurityEncodable // TypeDefIndex: 1489
{
	// Methods
	IPermission Copy();
	void Demand();
	IPermission Intersect(IPermission target);
	bool IsSubsetOf(IPermission target);
	IPermission Union(IPermission target);
}

// Namespace: System.Security
public interface ISecurityEncodable // TypeDefIndex: 1490
{
	// Methods
	void FromXml(SecurityElement e);
	SecurityElement ToXml();
}

// Namespace: System.Security
public interface ISecurityPolicyEncodable // TypeDefIndex: 1491
{
	// Methods
	void FromXml(SecurityElement e, PolicyLevel level);
	SecurityElement ToXml(PolicyLevel level);
}

// Namespace: System.Security
public interface IStackWalk // TypeDefIndex: 1492
{
	// Methods
	void Assert();
	void Demand();
	void Deny();
	void PermitOnly();
}

// Namespace: System.Security
[Serializable]
public sealed class NamedPermissionSet : PermissionSet // TypeDefIndex: 1493
{
	// Fields
	private string name; // 0x10
	private string description; // 0x14

	// Properties
	public string Description { get; set; } // 0x003D9310 0x003D9318
	public string Name { get; set; } // 0x003D9320 0x003D9150

	// Constructors
	internal NamedPermissionSet(); // 0x003D9110
	public NamedPermissionSet(string name, PermissionSet permSet); // 0x003D9120
	public NamedPermissionSet(string name, PermissionState state); // 0x003D9264
	public NamedPermissionSet(NamedPermissionSet permSet); // 0x003D9294
	public NamedPermissionSet(string name); // 0x003D92E8

	// Methods
	public override PermissionSet Copy(); // 0x003D9328
	public NamedPermissionSet Copy(string name); // 0x003D9398
	public override void FromXml(SecurityElement et); // 0x003D9428
	public override SecurityElement ToXml(); // 0x003D9548
	public override bool Equals(object obj); // 0x003D9608
	public override int GetHashCode(); // 0x003D96F8
}

// Namespace: System.Security
internal static class PermissionBuilder // TypeDefIndex: 1494
{
	// Fields
	private static object[] psNone; // 0x00

	// Constructors
	private static PermissionBuilder(); // 0x003D9730

	// Methods
	public static IPermission Create(string fullname, PermissionState state); // 0x003D9838
	public static IPermission Create(SecurityElement se); // 0x003D9C40
	public static IPermission Create(string fullname, SecurityElement se); // 0x003D9D98
	public static IPermission Create(Type type); // 0x003D9ECC
	internal static IPermission CreatePermission(string fullname, SecurityElement se); // 0x003D9A20
}

// Namespace: System.Security
[Serializable]
public class PermissionSet // TypeDefIndex: 1495
{
	// Fields
	private PolicyLevel <Resolver>k__BackingField; // 0x08
	private bool <DeclarativeSecurity>k__BackingField; // 0x0C

	// Properties
	internal PolicyLevel Resolver { get; set; } // 0x003DA148 0x003DA150
	internal bool DeclarativeSecurity { get; set; } // 0x003DA158 0x003DA160

	// Constructors
	public PermissionSet(); // 0x003D9118
	internal PermissionSet(string xml); // 0x003D9FB4
	public PermissionSet(PermissionState state); // 0x003D928C
	public PermissionSet(PermissionSet permSet); // 0x003D9148

	// Methods
	public IPermission AddPermission(IPermission perm); // 0x003D9FBC
	public virtual void Assert(); // 0x003D9FC4
	public virtual PermissionSet Copy(); // 0x003D9FC8
	public virtual void Demand(); // 0x003DA034
	public virtual void PermitOnly(); // 0x003DA038
	public virtual IPermission GetPermission(Type permClass); // 0x003DA03C
	public virtual PermissionSet Intersect(PermissionSet other); // 0x003DA044
	public virtual void Deny(); // 0x003DA04C
	public virtual void FromXml(SecurityElement et); // 0x003D9544
	public virtual void CopyTo(Array array, int index); // 0x003DA050
	public virtual SecurityElement ToXml(); // 0x003D9600
	public virtual bool IsSubsetOf(PermissionSet target); // 0x003DA054
	internal void SetReadOnly(bool value); // 0x003DA05C
	public bool IsUnrestricted(); // 0x003DA060
	public PermissionSet Union(PermissionSet other); // 0x003DA068
	public virtual IEnumerator GetEnumerator(); // 0x003DA0D4
	public virtual bool IsEmpty(); // 0x003DA168
	internal static PermissionSet CreateFromBinaryFormat(byte[] data); // 0x003DA170
}

// Namespace: 
private sealed class <GetEnumerator>c__Iterator1 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 1496
{
	// Fields
	internal int $PC; // 0x08
	internal object $current; // 0x0C

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; } // 0x003DA1DC 
	private object System.Collections.IEnumerator.Current { get; } // 0x003DA1E4 

	// Constructors
	public <GetEnumerator>c__Iterator1(); // 0x003DA140

	// Methods
	public bool MoveNext(); // 0x003DA1EC
	public void Dispose(); // 0x003DA1FC
	public void Reset(); // 0x003DA208
}

// Namespace: System.Security
[Serializable]
public enum PolicyLevelType // TypeDefIndex: 1497
{
	User = 0,
	Machine = 1,
	Enterprise = 2,
	AppDomain = 3
}

// Namespace: System.Security
public sealed class SecureString : CriticalFinalizerObject, IDisposable // TypeDefIndex: 1498
{
	// Fields
	private const int BlockSize = 16; // 0x00
	private const int MaxSize = 65536; // 0x00
	private int length; // 0x08
	private bool disposed; // 0x0C
	private bool read_only; // 0x0D
	private byte[] data; // 0x10

	// Properties
	public int Length { get; } // 0x0023B8FC 

	// Constructors
	public SecureString(); // 0x0023B53C
	public SecureString(void * value, int length); // 0x0023B718
	private static SecureString(); // 0x0023B8F8

	// Methods
	public void AppendChar(char c); // 0x0023B9AC
	public void Clear(); // 0x0023BBF8
	public SecureString Copy(); // 0x0023BD3C
	public void Dispose(); // 0x0023BE50
	public void InsertAt(int index, char c); // 0x0023BE94
	public bool IsReadOnly(); // 0x0023C210
	public void MakeReadOnly(); // 0x0023C2C0
	public void RemoveAt(int index); // 0x0023C2CC
	public void SetAt(int index, char c); // 0x0023C4E8
	private void Encrypt(); // 0x0023B8F4
	private void Decrypt(); // 0x0023BBF4
	private void Alloc(int length, bool realloc); // 0x0023B564
	internal byte[] GetBuffer(); // 0x0023C728
}

// Namespace: System.Security
public sealed class SecurityContext // TypeDefIndex: 1499
{
	// Fields
	private bool _capture; // 0x08
	private IntPtr _winid; // 0x0C
	private CompressedStack _stack; // 0x10
	private bool _suppressFlowWindowsIdentity; // 0x14
	private bool _suppressFlow; // 0x15

	// Properties
	internal bool FlowSuppressed { get; set; } // 0x0023CA9C 0x0023CAA4
	internal bool WindowsIdentityFlowSuppressed { get; set; } // 0x0023CAAC 0x0023CAB4
	internal CompressedStack CompressedStack { get; set; } // 0x0023CABC 0x0023CAC4
	internal IntPtr IdentityToken { get; set; } // 0x0023CACC 0x0023CAD4

	// Constructors
	internal SecurityContext(); // 0x0023C80C
	internal SecurityContext(SecurityContext sc); // 0x0023C814

	// Methods
	public SecurityContext CreateCopy(); // 0x0023C880
	public static SecurityContext Capture(); // 0x0023C940
	public static bool IsFlowSuppressed(); // 0x0023CADC
	public static bool IsWindowsIdentityFlowSuppressed(); // 0x0023CBB0
	public static void RestoreFlow(); // 0x0023CC84
	public static void Run(SecurityContext securityContext, ContextCallback callback, object state); // 0x0023CDB4
	public static AsyncFlowControl SuppressFlow(); // 0x0023D108
	public static AsyncFlowControl SuppressFlowWindowsIdentity(); // 0x0023D25C
}

// Namespace: System.Security
public sealed class SecurityCriticalAttribute : Attribute // TypeDefIndex: 1500
{
	// Fields
	private SecurityCriticalScope _scope; // 0x08

	// Properties
	public SecurityCriticalScope Scope { get; } // 0x0023D3A0 

	// Constructors
	public SecurityCriticalAttribute(); // 0x0023D358
	public SecurityCriticalAttribute(SecurityCriticalScope scope); // 0x0023D378

}

// Namespace: System.Security
public enum SecurityCriticalScope // TypeDefIndex: 1501
{
	Explicit = 0,
	Everything = 1
}

// Namespace: System.Security
[Serializable]
public sealed class SecurityElement // TypeDefIndex: 1502
{
	// Fields
	private string text; // 0x08
	private string tag; // 0x0C
	private ArrayList attributes; // 0x10
	private ArrayList children; // 0x14
	private static readonly char[] invalid_tag_chars; // 0x00
	private static readonly char[] invalid_text_chars; // 0x04
	private static readonly char[] invalid_attr_name_chars; // 0x08
	private static readonly char[] invalid_attr_value_chars; // 0x0C
	private static readonly char[] invalid_chars; // 0x10

	// Properties
	public Hashtable Attributes { get; set; } // 0x0023E124 0x0023E4B8
	public ArrayList Children { get; set; } // 0x0023EAC0 0x0023EAC8
	public string Tag { get; set; } // 0x0023EDA8 0x0023DC6C
	public string Text { get; set; } // 0x0023EDB0 0x0023D460

	// Constructors
	public SecurityElement(string tag); // 0x002311D0
	public SecurityElement(string tag, string text); // 0x00233FA4
	internal SecurityElement(SecurityElement se); // 0x0023D5DC
	private static SecurityElement(); // 0x0023DDFC

	// Methods
	public void AddAttribute(string name, string value); // 0x002311D8
	public void AddChild(SecurityElement child); // 0x00234154
	public string Attribute(string name); // 0x00231D3C
	public SecurityElement Copy(); // 0x0023F488
	public bool Equal(SecurityElement other); // 0x0023F4F8
	public static string Escape(string str); // 0x0023FC60
	private static string Unescape(string str); // 0x0023EE70
	public static SecurityElement FromString(string xml); // 0x0023FF78
	public static bool IsValidAttributeName(string name); // 0x002401DC
	public static bool IsValidAttributeValue(string value); // 0x00240294
	public static bool IsValidTag(string tag); // 0x0023D3A8
	public static bool IsValidText(string text); // 0x0023EDB8
	public SecurityElement SearchForChildByTag(string tag); // 0x0024034C
	public string SearchForTextOfTag(string tag); // 0x00240500
	public override string ToString(); // 0x002313F4
	private void ToXml(StringBuilder s, int level); // 0x002406F8
	internal SecurityAttribute GetAttribute(string name); // 0x0023F0F0
}

// Namespace: 
internal class SecurityAttribute // TypeDefIndex: 1503
{
	// Fields
	private string _name; // 0x08
	private string _value; // 0x0C

	// Properties
	public string Name { get; } // 0x00240F04 
	public string Value { get; } // 0x00240F0C 

	// Constructors
	public SecurityAttribute(string name, string value); // 0x0023E860

}

// Namespace: System.Security
[Serializable]
public class SecurityException : SystemException // TypeDefIndex: 1504
{
	// Fields
	private string permissionState; // 0x34
	private Type permissionType; // 0x38
	private string _granted; // 0x3C
	private string _refused; // 0x40
	private object _demanded; // 0x44
	private IPermission _firstperm; // 0x48
	private MethodInfo _method; // 0x4C
	private Evidence _evidence; // 0x50
	private SecurityAction _action; // 0x54
	private object _denyset; // 0x58
	private object _permitset; // 0x5C
	private AssemblyName _assembly; // 0x60
	private string _url; // 0x64
	private SecurityZone _zone; // 0x68

	// Properties
	public SecurityAction Action { get; set; } // 0x002413FC 0x00241404
	public object DenySetInstance { get; set; } // 0x0024140C 0x00241414
	public AssemblyName FailedAssemblyInfo { get; set; } // 0x0024141C 0x00241424
	public MethodInfo Method { get; set; } // 0x0024142C 0x00241434
	public object PermitOnlySetInstance { get; set; } // 0x0024143C 0x00241444
	public string Url { get; set; } // 0x0024144C 0x00241454
	public SecurityZone Zone { get; set; } // 0x0024145C 0x00241464
	public object Demanded { get; set; } // 0x0024146C 0x00241474
	public IPermission FirstPermissionThatFailed { get; set; } // 0x0024147C 0x00241484
	public string PermissionState { get; set; } // 0x0024148C 0x00241494
	public Type PermissionType { get; set; } // 0x0024149C 0x002414A4
	public string GrantedSet { get; set; } // 0x002414AC 0x002414B4
	public string RefusedSet { get; set; } // 0x002414BC 0x002414C4

	// Constructors
	public SecurityException(); // 0x00240F14
	public SecurityException(string message); // 0x0023AECC
	protected SecurityException(SerializationInfo info, StreamingContext context); // 0x00240F94
	public SecurityException(string message, Exception inner); // 0x00241120
	public SecurityException(string message, Type type); // 0x00241144
	public SecurityException(string message, Type type, string state); // 0x00241170
	internal SecurityException(string message, PermissionSet granted, PermissionSet refused); // 0x002411A4
	public SecurityException(string message, object deny, object permitOnly, MethodInfo method, object demanded, IPermission permThatFailed); // 0x00241220
	public SecurityException(string message, AssemblyName assemblyName, PermissionSet grant, PermissionSet refused, MethodInfo method, SecurityAction action, object demanded, IPermission permThatFailed, Evidence evidence); // 0x00241268

	// Methods
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x002414CC
	public override string ToString(); // 0x00241608
}

// Namespace: System.Security
internal struct RuntimeDeclSecurityEntry // TypeDefIndex: 1505
{
	// Fields
	public IntPtr blob; // 0x08
	public int size; // 0x0C
	public int index; // 0x10

}

// Namespace: System.Security
internal class RuntimeSecurityFrame // TypeDefIndex: 1506
{
	// Fields
	public AppDomain domain; // 0x08
	public MethodInfo method; // 0x0C
	public RuntimeDeclSecurityEntry assert; // 0x10
	public RuntimeDeclSecurityEntry deny; // 0x1C
	public RuntimeDeclSecurityEntry permitonly; // 0x28

	// Constructors
	public RuntimeSecurityFrame(); // 0x0023B534

}

// Namespace: System.Security
internal struct SecurityFrame // TypeDefIndex: 1507
{
	// Fields
	private AppDomain _domain; // 0x08
	private MethodInfo _method; // 0x0C
	private PermissionSet _assert; // 0x10
	private PermissionSet _deny; // 0x14
	private PermissionSet _permitonly; // 0x18

	// Properties
	public Assembly Assembly { get; } // 0x0008C4D4 
	public AppDomain Domain { get; } // 0x0008C4DC 
	public MethodInfo Method { get; } // 0x0008C4E4 
	public PermissionSet Assert { get; } // 0x0008C4EC 
	public PermissionSet Deny { get; } // 0x0008C4F4 
	public PermissionSet PermitOnly { get; } // 0x0008C4FC 
	public bool HasStackModifiers { get; } // 0x0008C504 

	// Constructors
	internal SecurityFrame(RuntimeSecurityFrame frame); // 0x0008C480
	internal SecurityFrame(int skip); // 0x0008C498

	// Methods
	private static RuntimeSecurityFrame _GetSecurityFrame(int skip); // 0x0024219C
	private static Array _GetSecurityStack(int skip); // 0x002421A0
	internal void InitFromRuntimeFrame(RuntimeSecurityFrame frame); // 0x0008C4CC
	public bool Equals(SecurityFrame sf); // 0x0008C534
	public override string ToString(); // 0x0008C55C
	public static ArrayList GetStack(int skipFrames); // 0x00242AE0
}

// Namespace: System.Security
internal struct RuntimeDeclSecurityActions // TypeDefIndex: 1508
{
	// Fields
	public RuntimeDeclSecurityEntry cas; // 0x08
	public RuntimeDeclSecurityEntry noncas; // 0x14
	public RuntimeDeclSecurityEntry choice; // 0x20

}

// Namespace: System.Security
public static class SecurityManager // TypeDefIndex: 1509
{
	// Fields
	private static object _lockObject; // 0x00
	private static ArrayList _hierarchy; // 0x04
	private static IPermission _unmanagedCode; // 0x08
	private static Hashtable _declsecCache; // 0x0C
	private static PolicyLevel _level; // 0x10
	private static SecurityPermission _execution; // 0x14

	// Properties
	public static bool CheckExecutionRights { get; set; } // 0x00242D5C 0x00242D60
	public static bool SecurityEnabled { get; set; } // 0x00242D64 0x00242D68
	private static IEnumerator Hierarchy { get; } // 0x002443A8 
	internal static PolicyLevel ResolvingPolicyLevel { get; set; } // 0x00245B14 0x00245BA0
	private static IPermission UnmanagedCode { get; } // 0x00245DE8 

	// Constructors
	private static SecurityManager(); // 0x00242CAC

	// Methods
	public static void GetZoneAndOrigin(out ArrayList zone, out ArrayList origin); // 0x00242D6C
	public static bool IsGranted(IPermission perm); // 0x00242DF8
	internal static bool IsGranted(Assembly a, IPermission perm); // 0x00242ED0
	internal static IPermission CheckPermissionSet(Assembly a, PermissionSet ps, bool noncas); // 0x0024322C
	internal static IPermission CheckPermissionSet(AppDomain ad, PermissionSet ps); // 0x00243794
	public static PolicyLevel LoadPolicyLevelFromFile(string path, PolicyLevelType type); // 0x00243EB0
	public static PolicyLevel LoadPolicyLevelFromString(string str, PolicyLevelType type); // 0x002440F0
	public static IEnumerator PolicyHierarchy(); // 0x00244330
	public static PermissionSet ResolvePolicy(Evidence evidence); // 0x00244564
	public static PermissionSet ResolvePolicy(Evidence[] evidences); // 0x00244B98
	public static PermissionSet ResolveSystemPolicy(Evidence evidence); // 0x00244D54
	public static PermissionSet ResolvePolicy(Evidence evidence, PermissionSet reqdPset, PermissionSet optPset, PermissionSet denyPset, out PermissionSet denied); // 0x00245008
	public static IEnumerator ResolvePolicyGroups(Evidence evidence); // 0x002452A0
	public static void SavePolicy(); // 0x0024556C
	public static void SavePolicyLevel(PolicyLevel level); // 0x0024574C
	private static void InitializePolicyHierarchy(); // 0x00245778
	internal static bool ResolvePolicyLevel(PermissionSet ps, PolicyLevel pl, Evidence evidence); // 0x00244804
	internal static void ResolveIdentityPermissions(PermissionSet ps, Evidence evidence); // 0x00244908
	internal static PermissionSet Decode(IntPtr permissions, int length); // 0x002421A4
	internal static PermissionSet Decode(byte[] encodedPermissions); // 0x00245C30
	private static bool GetLinkDemandSecurity(MethodBase method, void * cdecl, void * mdecl); // 0x00245FD0
	internal static void ReflectedLinkDemandInvoke(MethodBase mb); // 0x00245FD4
	internal static bool ReflectedLinkDemandQuery(MethodBase mb); // 0x00246248
	private static bool LinkDemand(Assembly a, void * klass, void * method); // 0x0024639C
	private static bool LinkDemandFullTrust(Assembly a); // 0x0024665C
	private static bool LinkDemandUnmanaged(Assembly a); // 0x002466F0
	private static void LinkDemandSecurityException(int securityViolation, IntPtr methodHandle); // 0x00246778
	private static void InheritanceDemandSecurityException(int securityViolation, Assembly a, Type t, MethodInfo method); // 0x00246A68
	private static void ThrowException(Exception ex); // 0x00246C0C
	private static bool InheritanceDemand(AppDomain ad, Assembly a, void * actions); // 0x00246C78
	private static void DemandUnmanaged(); // 0x00246EE4
	private static void InternalDemand(IntPtr permissions, int length); // 0x00246FE8
	private static void InternalDemandChoice(IntPtr permissions, int length); // 0x00247098
}

// Namespace: System.Security
public sealed class SecuritySafeCriticalAttribute : Attribute // TypeDefIndex: 1510
{
	// Constructors
	public SecuritySafeCriticalAttribute(); // 0x00247130

}

// Namespace: System.Security
public abstract class SecurityState // TypeDefIndex: 1511
{
	// Constructors
	protected SecurityState(); // 0x00247138

	// Methods
	public abstract void EnsureState();
	public bool IsStateAvailable(); // 0x00247140
}

// Namespace: System.Security
public sealed class SecurityTransparentAttribute : Attribute // TypeDefIndex: 1512
{
	// Constructors
	public SecurityTransparentAttribute(); // 0x00247194

}

// Namespace: System.Security
public sealed class SecurityTreatAsSafeAttribute : Attribute // TypeDefIndex: 1513
{
	// Constructors
	public SecurityTreatAsSafeAttribute(); // 0x0024719C

}

// Namespace: System.Security
[Serializable]
public enum SecurityZone // TypeDefIndex: 1514
{
	NoZone = -1,
	MyComputer = 0,
	Intranet = 1,
	Trusted = 2,
	Internet = 3,
	Untrusted = 4
}

// Namespace: System.Security
public sealed class SuppressUnmanagedCodeSecurityAttribute : Attribute // TypeDefIndex: 1515
{
	// Constructors
	public SuppressUnmanagedCodeSecurityAttribute(); // 0x002471A4

}

// Namespace: System.Security
public sealed class UnverifiableCodeAttribute : Attribute // TypeDefIndex: 1516
{
	// Constructors
	public UnverifiableCodeAttribute(); // 0x002471AC

}

// Namespace: System.Security
[Serializable]
public class VerificationException : SystemException // TypeDefIndex: 1517
{
	// Constructors
	public VerificationException(); // 0x002471B4
	public VerificationException(string message); // 0x002471BC
	protected VerificationException(SerializationInfo info, StreamingContext context); // 0x002471C4
	public VerificationException(string message, Exception innerException); // 0x002471E4

}

// Namespace: System.Security
[Serializable]
public sealed class XmlSyntaxException : SystemException // TypeDefIndex: 1518
{
	// Constructors
	public XmlSyntaxException(); // 0x002471EC
	public XmlSyntaxException(int lineNumber); // 0x002471F4
	public XmlSyntaxException(int lineNumber, string message); // 0x002472D0
	public XmlSyntaxException(string message); // 0x002401CC
	public XmlSyntaxException(string message, Exception inner); // 0x002401D4
	internal XmlSyntaxException(SerializationInfo info, StreamingContext context); // 0x00247510

}

// Namespace: System.Text
[Serializable]
public class ASCIIEncoding : Encoding // TypeDefIndex: 1519
{
	// Fields
	internal const int ASCII_CODE_PAGE = 20127; // 0x00

	// Properties
	public override bool IsSingleByte { get; } // 0x005101F8 

	// Constructors
	public ASCIIEncoding(); // 0x0050FC80

	// Methods
	public override int GetByteCount(char[] chars, int index, int count); // 0x00510200
	public override int GetByteCount(string chars); // 0x005103E8
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x00510494
	private int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, EncoderFallbackBuffer buffer, char[] fallback_chars); // 0x005104D4
	public override int GetBytes(string chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x00510BF0
	private int GetBytes(string chars, int charIndex, int charCount, byte[] bytes, int byteIndex, EncoderFallbackBuffer buffer, char[] fallback_chars); // 0x00510C30
	public override int GetCharCount(byte[] bytes, int index, int count); // 0x00511310
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x005114F4
	private int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, DecoderFallbackBuffer buffer); // 0x00511528
	public override int GetMaxByteCount(int charCount); // 0x00511A1C
	public override int GetMaxCharCount(int byteCount); // 0x00511B08
	public override string GetString(byte[] bytes, int byteIndex, int byteCount); // 0x00511BF4
	public override int GetBytes(void * chars, int charCount, void * bytes, int byteCount); // 0x00511EA8
	public override int GetChars(void * bytes, int byteCount, void * chars, int charCount); // 0x005120C8
	public override int GetCharCount(void * bytes, int count); // 0x005122EC
	public override int GetByteCount(void * chars, int count); // 0x005122F4
	public override Decoder GetDecoder(); // 0x005122FC
	public override Encoder GetEncoder(); // 0x00512370
}

// Namespace: System.Text
[Serializable]
internal sealed class CodePageEncoding : ISerializable, IObjectReference // TypeDefIndex: 1520
{
	// Fields
	private int codePage; // 0x08
	private bool isReadOnly; // 0x0C
	private EncoderFallback encoderFallback; // 0x10
	private DecoderFallback decoderFallback; // 0x14
	private Encoding realObject; // 0x18

	// Constructors
	private CodePageEncoding(SerializationInfo info, StreamingContext context); // 0x005123E4

	// Methods
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x005127F0
	public object GetRealObject(StreamingContext context); // 0x0051288C
}

// Namespace: 
[Serializable]
private sealed class Decoder : ISerializable, IObjectReference // TypeDefIndex: 1521
{
	// Fields
	private Encoding encoding; // 0x08
	private Decoder realObject; // 0x0C

	// Constructors
	private Decoder(SerializationInfo info, StreamingContext context); // 0x00513244

	// Methods
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x005133BC
	public object GetRealObject(StreamingContext context); // 0x00513458
}

// Namespace: System.Text
[Serializable]
public abstract class Decoder // TypeDefIndex: 1522
{
	// Fields
	private DecoderFallback fallback; // 0x08
	private DecoderFallbackBuffer fallback_buffer; // 0x0C

	// Properties
	public DecoderFallback Fallback { get; set; } // 0x0051357C 0x00513584
	public DecoderFallbackBuffer FallbackBuffer { get; } // 0x00513628 

	// Constructors
	protected Decoder(); // 0x005134A0

	// Methods
	public abstract int GetCharCount(byte[] bytes, int index, int count);
	public abstract int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
	public virtual int GetCharCount(byte[] bytes, int index, int count, bool flush); // 0x00513670
	public virtual int GetCharCount(void * bytes, int count, bool flush); // 0x005136D8
	public virtual int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush); // 0x00513880
	public virtual int GetChars(void * bytes, int byteCount, void * chars, int charCount, bool flush); // 0x00513B5C
	public virtual void Reset(); // 0x00513E4C
	public virtual void Convert(void * bytes, int byteCount, void * chars, int charCount, bool flush, out int bytesUsed, out int charsUsed, out bool completed); // 0x00513E68
	public virtual void Convert(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, int charCount, bool flush, out int bytesUsed, out int charsUsed, out bool completed); // 0x00513F3C
	private void CheckArguments(char[] chars, int charIndex); // 0x00513A5C
	private void CheckArguments(byte[] bytes, int byteIndex, int byteCount); // 0x00513904
	private void CheckArguments(void * chars, int charCount, void * bytes, int byteCount); // 0x00513CB4
}

// Namespace: System.Text
[Serializable]
public sealed class DecoderExceptionFallback : DecoderFallback // TypeDefIndex: 1523
{
	// Properties
	public override int MaxCharCount { get; } // 0x00514180 

	// Constructors
	public DecoderExceptionFallback(); // 0x005140F4

	// Methods
	public override DecoderFallbackBuffer CreateFallbackBuffer(); // 0x00514188
	public override bool Equals(object value); // 0x005141FC
	public override int GetHashCode(); // 0x00514278
}

// Namespace: System.Text
public sealed class DecoderExceptionFallbackBuffer : DecoderFallbackBuffer // TypeDefIndex: 1524
{
	// Properties
	public override int Remaining { get; } // 0x00514288 

	// Constructors
	public DecoderExceptionFallbackBuffer(); // 0x005141F4

	// Methods
	public override bool Fallback(byte[] bytesUnknown, int index); // 0x00514290
	public override char GetNextChar(); // 0x00514360
	public override bool MovePrevious(); // 0x00514368
}

// Namespace: System.Text
[Serializable]
public abstract class DecoderFallback // TypeDefIndex: 1525
{
	// Fields
	private static DecoderFallback exception_fallback; // 0x00
	private static DecoderFallback replacement_fallback; // 0x04
	private static DecoderFallback standard_safe_fallback; // 0x08

	// Properties
	public static DecoderFallback ExceptionFallback { get; } // 0x00514518 
	public abstract int MaxCharCount { get; }
	public static DecoderFallback ReplacementFallback { get; } // 0x005145A4 
	internal static DecoderFallback StandardSafeFallback { get; } // 0x00514630 

	// Constructors
	protected DecoderFallback(); // 0x00514178
	private static DecoderFallback(); // 0x00514370

	// Methods
	public abstract DecoderFallbackBuffer CreateFallbackBuffer();
}

// Namespace: System.Text
public abstract class DecoderFallbackBuffer // TypeDefIndex: 1526
{
	// Properties
	public abstract int Remaining { get; }

	// Constructors
	protected DecoderFallbackBuffer(); // 0x00514280

	// Methods
	public abstract bool Fallback(byte[] bytesUnknown, int index);
	public abstract char GetNextChar();
	public abstract bool MovePrevious();
	public virtual void Reset(); // 0x005146BC
}

// Namespace: System.Text
[Serializable]
public sealed class DecoderFallbackException : ArgumentException // TypeDefIndex: 1527
{
	// Fields
	private const string defaultMessage = "Failed to decode the input byte sequence to Unicode characters."; // 0x00
	private byte[] bytes_unknown; // 0x38
	private int index; // 0x3C

	// Properties
	public byte[] BytesUnknown { get; } // 0x005146F4 
	public int Index { get; } // 0x005146FC 

	// Constructors
	public DecoderFallbackException(); // 0x005146C0
	public DecoderFallbackException(string message); // 0x005146D4
	public DecoderFallbackException(string message, Exception innerException); // 0x005146E4
	public DecoderFallbackException(string message, byte[] bytesUnknown, int index); // 0x0051432C

}

// Namespace: System.Text
[Serializable]
public sealed class DecoderReplacementFallback : DecoderFallback // TypeDefIndex: 1528
{
	// Fields
	private string replacement; // 0x08

	// Properties
	public string DefaultString { get; } // 0x00514704 
	public override int MaxCharCount { get; } // 0x0051470C 

	// Constructors
	public DecoderReplacementFallback(); // 0x00513518
	public DecoderReplacementFallback(string replacement); // 0x00514444

	// Methods
	public override DecoderFallbackBuffer CreateFallbackBuffer(); // 0x00514730
	public override bool Equals(object value); // 0x00514868
	public override int GetHashCode(); // 0x00514928
}

// Namespace: System.Text
public sealed class DecoderReplacementFallbackBuffer : DecoderFallbackBuffer // TypeDefIndex: 1529
{
	// Fields
	private bool fallback_assigned; // 0x08
	private int current; // 0x0C
	private string replacement; // 0x10

	// Properties
	public override int Remaining { get; } // 0x00514954 

	// Constructors
	public DecoderReplacementFallbackBuffer(DecoderReplacementFallback fallback); // 0x005147A0

	// Methods
	public override bool Fallback(byte[] bytesUnknown, int index); // 0x00514998
	public override char GetNextChar(); // 0x00514B48
	public override bool MovePrevious(); // 0x00514BC0
	public override void Reset(); // 0x00514BDC
}

// Namespace: System.Text
[Serializable]
public abstract class Encoder // TypeDefIndex: 1530
{
	// Fields
	private EncoderFallback fallback; // 0x08
	private EncoderFallbackBuffer fallback_buffer; // 0x0C

	// Properties
	public EncoderFallback Fallback { get; set; } // 0x00514CC8 0x00514CD0
	public EncoderFallbackBuffer FallbackBuffer { get; } // 0x00514D74 

	// Constructors
	protected Encoder(); // 0x00514BEC

	// Methods
	public abstract int GetByteCount(char[] chars, int index, int count, bool flush);
	public abstract int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush);
	public virtual int GetByteCount(void * chars, int count, bool flush); // 0x00514DBC
	public virtual int GetBytes(void * chars, int charCount, void * bytes, int byteCount, bool flush); // 0x00514F64
	public virtual void Reset(); // 0x00515254
	public virtual void Convert(void * chars, int charCount, void * bytes, int byteCount, bool flush, out int charsUsed, out int bytesUsed, out bool completed); // 0x00515270
	public virtual void Convert(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, int byteCount, bool flush, out int charsUsed, out int bytesUsed, out bool completed); // 0x00515338
	private void CheckArguments(void * chars, int charCount, void * bytes, int byteCount); // 0x005150BC
}

// Namespace: System.Text
[Serializable]
public sealed class EncoderExceptionFallback : EncoderFallback // TypeDefIndex: 1531
{
	// Properties
	public override int MaxCharCount { get; } // 0x005156D8 

	// Constructors
	public EncoderExceptionFallback(); // 0x0051564C

	// Methods
	public override EncoderFallbackBuffer CreateFallbackBuffer(); // 0x005156E0
	public override bool Equals(object value); // 0x00515754
	public override int GetHashCode(); // 0x005157D0
}

// Namespace: System.Text
public sealed class EncoderExceptionFallbackBuffer : EncoderFallbackBuffer // TypeDefIndex: 1532
{
	// Properties
	public override int Remaining { get; } // 0x005157E0 

	// Constructors
	public EncoderExceptionFallbackBuffer(); // 0x0051574C

	// Methods
	public override bool Fallback(char charUnknown, int index); // 0x005157E8
	public override bool Fallback(char charUnknownHigh, char charUnknownLow, int index); // 0x005158B4
	public override char GetNextChar(); // 0x00515994
	public override bool MovePrevious(); // 0x0051599C
}

// Namespace: System.Text
[Serializable]
public abstract class EncoderFallback // TypeDefIndex: 1533
{
	// Fields
	private static EncoderFallback exception_fallback; // 0x00
	private static EncoderFallback replacement_fallback; // 0x04
	private static EncoderFallback standard_safe_fallback; // 0x08

	// Properties
	public static EncoderFallback ExceptionFallback { get; } // 0x00515B4C 
	public abstract int MaxCharCount { get; }
	public static EncoderFallback ReplacementFallback { get; } // 0x00515BD8 
	internal static EncoderFallback StandardSafeFallback { get; } // 0x00515C64 

	// Constructors
	protected EncoderFallback(); // 0x005156D0
	private static EncoderFallback(); // 0x005159A4

	// Methods
	public abstract EncoderFallbackBuffer CreateFallbackBuffer();
}

// Namespace: System.Text
public abstract class EncoderFallbackBuffer // TypeDefIndex: 1534
{
	// Properties
	public abstract int Remaining { get; }

	// Constructors
	protected EncoderFallbackBuffer(); // 0x005157D8

	// Methods
	public abstract bool Fallback(char charUnknown, int index);
	public abstract bool Fallback(char charUnknownHigh, char charUnknownLow, int index);
	public abstract char GetNextChar();
	public abstract bool MovePrevious();
	public virtual void Reset(); // 0x00515CF0
}

// Namespace: System.Text
[Serializable]
public sealed class EncoderFallbackException : ArgumentException // TypeDefIndex: 1535
{
	// Fields
	private const string defaultMessage = "Failed to decode the input byte sequence to Unicode characters."; // 0x00
	private char char_unknown; // 0x38
	private char char_unknown_high; // 0x3A
	private char char_unknown_low; // 0x3C
	private int index; // 0x40

	// Properties
	public char CharUnknown { get; } // 0x00515D50 
	public char CharUnknownHigh { get; } // 0x00515D58 
	public char CharUnknownLow { get; } // 0x00515D60 
	public int Index { get; } // 0x00515D68 

	// Constructors
	public EncoderFallbackException(); // 0x00515D1C
	public EncoderFallbackException(string message); // 0x00515D30
	public EncoderFallbackException(string message, Exception innerException); // 0x00515D40
	internal EncoderFallbackException(char charUnknown, int index); // 0x0051587C
	internal EncoderFallbackException(char charUnknownHigh, char charUnknownLow, int index); // 0x00515954

	// Methods
	public bool IsUnknownSurrogate(); // 0x00515D70
}

// Namespace: System.Text
[Serializable]
public sealed class EncoderReplacementFallback : EncoderFallback // TypeDefIndex: 1536
{
	// Fields
	private string replacement; // 0x08

	// Properties
	public string DefaultString { get; } // 0x00515DF8 
	public override int MaxCharCount { get; } // 0x00515E00 

	// Constructors
	public EncoderReplacementFallback(); // 0x00514C64
	public EncoderReplacementFallback(string replacement); // 0x00515A78

	// Methods
	public override EncoderFallbackBuffer CreateFallbackBuffer(); // 0x00515E24
	public override bool Equals(object value); // 0x00515F5C
	public override int GetHashCode(); // 0x0051601C
}

// Namespace: System.Text
public sealed class EncoderReplacementFallbackBuffer : EncoderFallbackBuffer // TypeDefIndex: 1537
{
	// Fields
	private string replacement; // 0x08
	private int current; // 0x0C
	private bool fallback_assigned; // 0x10

	// Properties
	public override int Remaining { get; } // 0x00516048 

	// Constructors
	public EncoderReplacementFallbackBuffer(EncoderReplacementFallback fallback); // 0x00515E94

	// Methods
	public override bool Fallback(char charUnknown, int index); // 0x00516078
	public override bool Fallback(char charUnknownHigh, char charUnknownLow, int index); // 0x005161D8
	private bool Fallback(int index); // 0x00516080
	public override char GetNextChar(); // 0x005161E0
	public override bool MovePrevious(); // 0x0051624C
	public override void Reset(); // 0x00516268
}

// Namespace: System.Text
[Serializable]
public abstract class Encoding : ICloneable // TypeDefIndex: 1538
{
	// Fields
	internal int codePage; // 0x08
	internal int windows_code_page; // 0x0C
	private bool is_readonly; // 0x10
	private DecoderFallback decoder_fallback; // 0x14
	private EncoderFallback encoder_fallback; // 0x18
	private static Assembly i18nAssembly; // 0x00
	private static bool i18nDisabled; // 0x04
	private static EncodingInfo[] encoding_infos; // 0x08
	private static readonly object[] encodings; // 0x0C
	internal string body_name; // 0x1C
	internal string encoding_name; // 0x20
	internal string header_name; // 0x24
	internal bool is_mail_news_display; // 0x28
	internal bool is_mail_news_save; // 0x29
	internal bool is_browser_save; // 0x2A
	internal bool is_browser_display; // 0x2B
	internal string web_name; // 0x2C
	private static Encoding asciiEncoding; // 0x10
	private static Encoding bigEndianEncoding; // 0x14
	private static Encoding defaultEncoding; // 0x18
	private static Encoding utf7Encoding; // 0x1C
	private static Encoding utf8EncodingWithMarkers; // 0x20
	private static Encoding utf8EncodingWithoutMarkers; // 0x24
	private static Encoding unicodeEncoding; // 0x28
	private static Encoding isoLatin1Encoding; // 0x2C
	private static Encoding utf8EncodingUnsafe; // 0x30
	private static Encoding utf32Encoding; // 0x34
	private static Encoding bigEndianUTF32Encoding; // 0x38
	private static readonly object lockobj; // 0x3C

	// Properties
	public bool IsReadOnly { get; } // 0x005175AC 
	public virtual bool IsSingleByte { get; } // 0x005175B4 
	public DecoderFallback DecoderFallback { get; set; } // 0x005175BC 0x00513158
	public EncoderFallback EncoderFallback { get; set; } // 0x005175C4 0x0051306C
	public virtual string BodyName { get; } // 0x0051B5A8 
	public virtual int CodePage { get; } // 0x0051B5B0 
	public virtual string EncodingName { get; } // 0x0051B5B8 
	public virtual string HeaderName { get; } // 0x0051B5C0 
	public virtual bool IsBrowserDisplay { get; } // 0x0051B5C8 
	public virtual bool IsBrowserSave { get; } // 0x0051B5D0 
	public virtual bool IsMailNewsDisplay { get; } // 0x0051B5D8 
	public virtual bool IsMailNewsSave { get; } // 0x0051B5E0 
	public virtual string WebName { get; } // 0x0051B5E8 
	public virtual int WindowsCodePage { get; } // 0x0051B5F0 
	public static Encoding ASCII { get; } // 0x005192F0 
	public static Encoding BigEndianUnicode { get; } // 0x0051A0D0 
	public static Encoding Default { get; } // 0x00518E28 
	private static Encoding ISOLatin1 { get; } // 0x0051A328 
	public static Encoding UTF7 { get; } // 0x00519534 
	public static Encoding UTF8 { get; } // 0x0051977C 
	internal static Encoding UTF8Unmarked { get; } // 0x0051B618 
	internal static Encoding UTF8UnmarkedUnsafe { get; } // 0x0051BB58 
	public static Encoding Unicode { get; } // 0x00519E78 
	public static Encoding UTF32 { get; } // 0x005199C8 
	internal static Encoding BigEndianUTF32 { get; } // 0x00519C20 

	// Constructors
	protected Encoding(); // 0x00516274
	protected Encoding(int codePage); // 0x0050FD3C
	private static Encoding(); // 0x00516284

	// Methods
	internal static string _(string arg); // 0x005103E4
	internal void SetFallbackInternal(EncoderFallback e, DecoderFallback d); // 0x005175CC
	public static byte[] Convert(Encoding srcEncoding, Encoding dstEncoding, byte[] bytes); // 0x005175E0
	public static byte[] Convert(Encoding srcEncoding, Encoding dstEncoding, byte[] bytes, int index, int count); // 0x00517770
	public override bool Equals(object value); // 0x00517A38
	public abstract int GetByteCount(char[] chars, int index, int count);
	public virtual int GetByteCount(string s); // 0x00517B5C
	public virtual int GetByteCount(char[] chars); // 0x00517C44
	public abstract int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
	public virtual int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x00517D20
	public virtual byte[] GetBytes(string s); // 0x00518020
	public virtual byte[] GetBytes(char[] chars, int index, int count); // 0x005181A8
	public virtual byte[] GetBytes(char[] chars); // 0x0051827C
	public abstract int GetCharCount(byte[] bytes, int index, int count);
	public virtual int GetCharCount(byte[] bytes); // 0x00518364
	public abstract int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
	public virtual char[] GetChars(byte[] bytes, int index, int count); // 0x00518440
	public virtual char[] GetChars(byte[] bytes); // 0x00518514
	public virtual Decoder GetDecoder(); // 0x00512300
	public virtual Encoder GetEncoder(); // 0x00512374
	private static object InvokeI18N(string name, object[] args); // 0x005186BC
	public static Encoding GetEncoding(int codepage); // 0x005129EC
	public virtual object Clone(); // 0x0051A56C
	public static Encoding GetEncoding(int codepage, EncoderFallback encoderFallback, DecoderFallback decoderFallback); // 0x0051A618
	public static Encoding GetEncoding(string name, EncoderFallback encoderFallback, DecoderFallback decoderFallback); // 0x0051A7F0
	public static EncodingInfo[] GetEncodings(); // 0x0051B044
	public bool IsAlwaysNormalized(); // 0x0051B300
	public virtual bool IsAlwaysNormalized(NormalizationForm form); // 0x0051B314
	public static Encoding GetEncoding(string name); // 0x0051A9C8
	public override int GetHashCode(); // 0x0051B3B4
	public abstract int GetMaxByteCount(int charCount);
	public abstract int GetMaxCharCount(int byteCount);
	public virtual byte[] GetPreamble(); // 0x0051B434
	public virtual string GetString(byte[] bytes, int index, int count); // 0x0051B494
	public virtual string GetString(byte[] bytes); // 0x0051B4CC
	internal static string InternalCodePage(int code_page); // 0x0051B614
	public virtual int GetByteCount(void * chars, int count); // 0x0051BECC
	public virtual int GetCharCount(void * bytes, int count); // 0x0051C05C
	public virtual int GetChars(void * bytes, int byteCount, void * chars, int charCount); // 0x0051C1F4
	public virtual int GetBytes(void * chars, int charCount, void * bytes, int byteCount); // 0x0051C500
}

// Namespace: 
private sealed class ForwardingDecoder : Decoder // TypeDefIndex: 1539
{
	// Fields
	private Encoding encoding; // 0x10

	// Constructors
	public ForwardingDecoder(Encoding enc); // 0x0051863C

	// Methods
	public override int GetCharCount(byte[] bytes, int index, int count); // 0x0051C804
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x0051C85C
}

// Namespace: 
private sealed class ForwardingEncoder : Encoder // TypeDefIndex: 1540
{
	// Fields
	private Encoding encoding; // 0x10

	// Constructors
	public ForwardingEncoder(Encoding enc); // 0x0051867C

	// Methods
	public override int GetByteCount(char[] chars, int index, int count, bool flush); // 0x0051C8C4
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteCount, bool flush); // 0x0051C91C
}

// Namespace: System.Text
[Serializable]
public sealed class EncodingInfo // TypeDefIndex: 1541
{
	// Fields
	private readonly int codepage; // 0x08
	private Encoding encoding; // 0x0C

	// Properties
	public int CodePage { get; } // 0x0051C984 
	public string DisplayName { get; } // 0x0051C98C 
	public string Name { get; } // 0x0051C990 

	// Constructors
	internal EncodingInfo(int cp); // 0x0051B2E0

	// Methods
	public override bool Equals(object value); // 0x0051CA60
	public override int GetHashCode(); // 0x0051CAEC
	public Encoding GetEncoding(); // 0x0051C9DC
}

// Namespace: System.Text
[Serializable]
internal class Latin1Encoding : Encoding // TypeDefIndex: 1542
{
	// Fields
	internal const int ISOLATIN_CODE_PAGE = 28591; // 0x00

	// Properties
	public override bool IsSingleByte { get; } // 0x0051CAF4 
	public override string BodyName { get; } // 0x0051E75C 
	public override string EncodingName { get; } // 0x0051E7B8 
	public override string HeaderName { get; } // 0x0051E814 
	public override bool IsBrowserDisplay { get; } // 0x0051E870 
	public override bool IsBrowserSave { get; } // 0x0051E878 
	public override bool IsMailNewsDisplay { get; } // 0x0051E880 
	public override bool IsMailNewsSave { get; } // 0x0051E888 
	public override string WebName { get; } // 0x0051E890 

	// Constructors
	public Latin1Encoding(); // 0x0051B864

	// Methods
	public override bool IsAlwaysNormalized(NormalizationForm form); // 0x0051CAFC
	public override int GetByteCount(char[] chars, int index, int count); // 0x0051CB0C
	public override int GetByteCount(string s); // 0x0051CCF0
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x0051CD9C
	private int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, EncoderFallbackBuffer buffer, char[] fallback_chars); // 0x0051CDDC
	public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x0051D4F4
	private int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex, EncoderFallbackBuffer buffer, char[] fallback_chars); // 0x0051D534
	public override int GetCharCount(byte[] bytes, int index, int count); // 0x0051DC50
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x0051DE34
	public override int GetMaxByteCount(int charCount); // 0x0051E200
	public override int GetMaxCharCount(int byteCount); // 0x0051E2EC
	public override string GetString(byte[] bytes, int index, int count); // 0x0051E3D8
	public override string GetString(byte[] bytes); // 0x0051E680
}

// Namespace: System.Text
[Serializable]
internal sealed class MLangCodePageEncoding : ISerializable, IObjectReference // TypeDefIndex: 1543
{
	// Fields
	private int codePage; // 0x08
	private bool isReadOnly; // 0x0C
	private EncoderFallback encoderFallback; // 0x10
	private DecoderFallback decoderFallback; // 0x14
	private Encoding realObject; // 0x18

	// Constructors
	private MLangCodePageEncoding(SerializationInfo info, StreamingContext context); // 0x0051E8EC

	// Methods
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0051ECF8
	public object GetRealObject(StreamingContext context); // 0x0051ED94
}

// Namespace: 
[Serializable]
private sealed class MLangEncoder : ISerializable, IObjectReference // TypeDefIndex: 1544
{
	// Fields
	private Encoding encoding; // 0x08
	private Encoder realObject; // 0x0C

	// Constructors
	private MLangEncoder(SerializationInfo info, StreamingContext context); // 0x0051F150

	// Methods
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0051F2C8
	public object GetRealObject(StreamingContext context); // 0x0051F364
}

// Namespace: 
[Serializable]
private sealed class MLangDecoder : ISerializable, IObjectReference // TypeDefIndex: 1545
{
	// Fields
	private Encoding encoding; // 0x08
	private Decoder realObject; // 0x0C

	// Constructors
	private MLangDecoder(SerializationInfo info, StreamingContext context); // 0x0051EEF4

	// Methods
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0051F06C
	public object GetRealObject(StreamingContext context); // 0x0051F108
}

// Namespace: System.Text
public enum NormalizationForm // TypeDefIndex: 1546
{
	FormC = 1,
	FormD = 2,
	FormKC = 5,
	FormKD = 6
}

// Namespace: System.Text
[Serializable]
public sealed class StringBuilder : ISerializable // TypeDefIndex: 1547
{
	// Fields
	private const int constDefaultCapacity = 16; // 0x00
	private int _length; // 0x08
	private string _str; // 0x0C
	private string _cached_str; // 0x10
	private int _maxCapacity; // 0x14

	// Properties
	public int MaxCapacity { get; } // 0x00520154 
	public int Capacity { get; set; } // 0x0051FFC8 0x0051FD60
	public int Length { get; set; } // 0x00520370 0x00520378
	public char Chars { get; set; } // 0x00520550 0x00520618

	// Constructors
	public StringBuilder(string value, int startIndex, int length, int capacity); // 0x0051F3AC
	private StringBuilder(string value, int startIndex, int length, int capacity, int maxCapacity); // 0x0051F3D0
	public StringBuilder(); // 0x0051F8A0
	public StringBuilder(int capacity); // 0x0051F97C
	public StringBuilder(int capacity, int maxCapacity); // 0x0051FA34
	public StringBuilder(string value); // 0x0051F8A8
	public StringBuilder(string value, int capacity); // 0x0051FAEC
	private StringBuilder(SerializationInfo info, StreamingContext context); // 0x0051FBD0

	// Methods
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x0051FE80
	public override string ToString(); // 0x00520024
	public string ToString(int startIndex, int length); // 0x005206F8
	public int EnsureCapacity(int capacity); // 0x005207E8
	public bool Equals(StringBuilder sb); // 0x005208DC
	public StringBuilder Remove(int startIndex, int length); // 0x005209A4
	public StringBuilder Replace(char oldChar, char newChar); // 0x00520AE4
	public StringBuilder Replace(char oldChar, char newChar, int startIndex, int count); // 0x00520B08
	public StringBuilder Replace(string oldValue, string newValue); // 0x00520C5C
	public StringBuilder Replace(string oldValue, string newValue, int startIndex, int count); // 0x00520C80
	public StringBuilder Append(char[] value); // 0x00520FA0
	public StringBuilder Append(string value); // 0x005210A0
	public StringBuilder Append(bool value); // 0x005211F8
	public StringBuilder Append(byte value); // 0x0052122C
	public StringBuilder Append(Decimal value); // 0x00521260
	public StringBuilder Append(double value); // 0x0052129C
	public StringBuilder Append(short value); // 0x005212D0
	public StringBuilder Append(int value); // 0x00521304
	public StringBuilder Append(long value); // 0x00521338
	public StringBuilder Append(object value); // 0x0052136C
	public StringBuilder Append(sbyte value); // 0x005213B0
	public StringBuilder Append(float value); // 0x005213E4
	public StringBuilder Append(ushort value); // 0x00521418
	public StringBuilder Append(uint value); // 0x0052144C
	public StringBuilder Append(ulong value); // 0x00521480
	public StringBuilder Append(char value); // 0x005214B4
	public StringBuilder Append(char value, int repeatCount); // 0x00520450
	public StringBuilder Append(char[] value, int startIndex, int charCount); // 0x0052153C
	public StringBuilder Append(string value, int startIndex, int count); // 0x005216C0
	public StringBuilder AppendLine(); // 0x00521874
	public StringBuilder AppendLine(string value); // 0x00521898
	public StringBuilder AppendFormat(string format, object[] args); // 0x005218D4
	public StringBuilder AppendFormat(IFormatProvider provider, string format, object[] args); // 0x005218F8
	public StringBuilder AppendFormat(string format, object arg0); // 0x005219A4
	public StringBuilder AppendFormat(string format, object arg0, object arg1); // 0x00521A90
	public StringBuilder AppendFormat(string format, object arg0, object arg1, object arg2); // 0x00521BD0
	public StringBuilder Insert(int index, char[] value); // 0x00521D64
	public StringBuilder Insert(int index, string value); // 0x00521D98
	public StringBuilder Insert(int index, bool value); // 0x00521EEC
	public StringBuilder Insert(int index, byte value); // 0x00521F28
	public StringBuilder Insert(int index, char value); // 0x00521F64
	public StringBuilder Insert(int index, Decimal value); // 0x005220C4
	public StringBuilder Insert(int index, double value); // 0x00522110
	public StringBuilder Insert(int index, short value); // 0x0052214C
	public StringBuilder Insert(int index, int value); // 0x00522188
	public StringBuilder Insert(int index, long value); // 0x005221C4
	public StringBuilder Insert(int index, object value); // 0x00522200
	public StringBuilder Insert(int index, sbyte value); // 0x0052224C
	public StringBuilder Insert(int index, float value); // 0x00522288
	public StringBuilder Insert(int index, ushort value); // 0x005222C4
	public StringBuilder Insert(int index, uint value); // 0x00522300
	public StringBuilder Insert(int index, ulong value); // 0x0052233C
	public StringBuilder Insert(int index, string value, int count); // 0x00522378
	public StringBuilder Insert(int index, char[] value, int startIndex, int charCount); // 0x005224A0
	private void InternalEnsureCapacity(int size); // 0x0052015C
	public void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count); // 0x005225E8
}

// Namespace: System.Text
[Serializable]
internal sealed class SurrogateEncoder : ISerializable, IObjectReference // TypeDefIndex: 1548
{
	// Fields
	private Encoding encoding; // 0x08
	private Encoder realObject; // 0x0C

	// Constructors
	private SurrogateEncoder(SerializationInfo info, StreamingContext context); // 0x00522770

	// Methods
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x005228E8
	public object GetRealObject(StreamingContext context); // 0x00522984
}

// Namespace: System.Text
[Serializable]
public sealed class UTF32Encoding : Encoding // TypeDefIndex: 1549
{
	// Fields
	internal const int UTF32_CODE_PAGE = 12000; // 0x00
	internal const int BIG_UTF32_CODE_PAGE = 12001; // 0x00
	private bool bigEndian; // 0x30
	private bool byteOrderMark; // 0x31

	// Constructors
	public UTF32Encoding(); // 0x005229CC
	public UTF32Encoding(bool bigEndian, bool byteOrderMark); // 0x0051BEB0
	public UTF32Encoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters); // 0x005229F0

	// Methods
	public override int GetByteCount(char[] chars, int index, int count); // 0x00522D1C
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x00523008
	public override int GetCharCount(byte[] bytes, int index, int count); // 0x00523834
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x00523A18
	public override int GetMaxByteCount(int charCount); // 0x00523F90
	public override int GetMaxCharCount(int byteCount); // 0x0052407C
	public override Decoder GetDecoder(); // 0x00524168
	public override byte[] GetPreamble(); // 0x00524208
	public override bool Equals(object value); // 0x0052433C
	public override int GetHashCode(); // 0x0052442C
	public override int GetByteCount(void * chars, int count); // 0x00524458
	public override int GetByteCount(string s); // 0x00524508
	public override int GetBytes(void * chars, int charCount, void * bytes, int byteCount); // 0x0052450C
	public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x0052452C
	public override int GetCharCount(void * bytes, int count); // 0x00524550
	public override int GetChars(void * bytes, int byteCount, void * chars, int charCount); // 0x00524554
	public override string GetString(byte[] bytes, int index, int count); // 0x00524574
	public override Encoder GetEncoder(); // 0x005245AC
}

// Namespace: 
private sealed class UTF32Decoder : Decoder // TypeDefIndex: 1550
{
	// Fields
	private bool bigEndian; // 0x10
	private int leftOverByte; // 0x14
	private int leftOverLength; // 0x18

	// Constructors
	public UTF32Decoder(bool bigEndian); // 0x005241E4

	// Methods
	public override int GetCharCount(byte[] bytes, int index, int count); // 0x005245B0
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x005247B0
}

// Namespace: System.Text
[Serializable]
public class UTF7Encoding : Encoding // TypeDefIndex: 1551
{
	// Fields
	internal const int UTF7_CODE_PAGE = 65000; // 0x00
	private const string base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"; // 0x00
	private bool allowOptionals; // 0x30
	private static readonly byte[] encodingRules; // 0x00
	private static readonly sbyte[] base64Values; // 0x04

	// Constructors
	public UTF7Encoding(); // 0x0051B8E8
	public UTF7Encoding(bool allowOptionals); // 0x00524FE4
	private static UTF7Encoding(); // 0x005250B0

	// Methods
	public override int GetHashCode(); // 0x0052518C
	public override bool Equals(object value); // 0x005251AC
	private static int InternalGetByteCount(char[] chars, int index, int count, bool flush, int leftOver, bool isInShifted, bool allowOptionals); // 0x005252E0
	public override int GetByteCount(char[] chars, int index, int count); // 0x005256E8
	private static int InternalGetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush, int leftOver, bool isInShifted, bool allowOptionals); // 0x005257A0
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x00526580
	private static int InternalGetCharCount(byte[] bytes, int index, int count, int leftOver); // 0x00526660
	public override int GetCharCount(byte[] bytes, int index, int count); // 0x005269C0
	private static int InternalGetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, int leftOver); // 0x00526A5C
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x005274D4
	public override int GetMaxByteCount(int charCount); // 0x0052762C
	public override int GetMaxCharCount(int byteCount); // 0x00527750
	public override Decoder GetDecoder(); // 0x0052783C
	public override Encoder GetEncoder(); // 0x005278C8
	public override int GetByteCount(void * chars, int count); // 0x00527958
	public override int GetByteCount(string s); // 0x0052795C
	public override int GetBytes(void * chars, int charCount, void * bytes, int byteCount); // 0x00527960
	public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x00527980
	public override int GetCharCount(void * bytes, int count); // 0x005279A4
	public override int GetChars(void * bytes, int byteCount, void * chars, int charCount); // 0x005279A8
	public override string GetString(byte[] bytes, int index, int count); // 0x005279C8
}

// Namespace: 
private sealed class UTF7Decoder : Decoder // TypeDefIndex: 1552
{
	// Fields
	private int leftOver; // 0x10

	// Constructors
	public UTF7Decoder(); // 0x005278AC

	// Methods
	public override int GetCharCount(byte[] bytes, int index, int count); // 0x00527A00
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x00527AA4
}

// Namespace: 
private sealed class UTF7Encoder : Encoder // TypeDefIndex: 1553
{
	// Fields
	private bool allowOptionals; // 0x10
	private int leftOver; // 0x14
	private bool isInShifted; // 0x18

	// Constructors
	public UTF7Encoder(bool allowOptionals); // 0x0052793C

	// Methods
	public override int GetByteCount(char[] chars, int index, int count, bool flush); // 0x00527B58
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush); // 0x00527C24
}

// Namespace: System.Text
[Serializable]
public class UTF8Encoding : Encoding // TypeDefIndex: 1554
{
	// Fields
	internal const int UTF8_CODE_PAGE = 65001; // 0x00
	private bool emitIdentifier; // 0x30

	// Constructors
	public UTF8Encoding(); // 0x00527CF4
	public UTF8Encoding(bool encoderShouldEmitUTF8Identifier); // 0x0051B8F0
	public UTF8Encoding(bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes); // 0x0051B8F8

	// Methods
	private static int InternalGetByteCount(char[] chars, int index, int count, char leftOver, bool flush); // 0x00527D00
	private static int InternalGetByteCount(void * chars, int count, char leftOver, bool flush); // 0x00527F3C
	public override int GetByteCount(char[] chars, int index, int count); // 0x00528044
	public override int GetByteCount(void * chars, int count); // 0x00528080
	private static int InternalGetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, char leftOver, bool flush); // 0x00528164
	private static int InternalGetBytes(void * chars, int count, void * bytes, int bcount, char leftOver, bool flush); // 0x005284BC
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x0052879C
	public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x005287E8
	public override int GetBytes(void * chars, int charCount, void * bytes, int byteCount); // 0x00528B44
	private static int InternalGetCharCount(byte[] bytes, int index, int count, uint leftOverBits, uint leftOverCount, object provider, DecoderFallbackBuffer fallbackBuffer, byte[] bufferArg, bool flush); // 0x00528D2C
	private static int InternalGetCharCount(void * bytes, int count, uint leftOverBits, uint leftOverCount, object provider, DecoderFallbackBuffer fallbackBuffer, byte[] bufferArg, bool flush); // 0x00528F64
	private static int Fallback(object provider, DecoderFallbackBuffer buffer, byte[] bufferArg, void * bytes, long index, uint size); // 0x00529228
	private static void Fallback(object provider, DecoderFallbackBuffer buffer, byte[] bufferArg, void * bytes, long byteIndex, uint size, void * chars, int charIndex); // 0x005294D0
	public override int GetCharCount(byte[] bytes, int index, int count); // 0x005297B0
	public override int GetCharCount(void * bytes, int count); // 0x00529804
	private static int InternalGetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, uint leftOverBits, uint leftOverCount, object provider, DecoderFallbackBuffer fallbackBuffer, byte[] bufferArg, bool flush); // 0x00529850
	private static int InternalGetChars(void * bytes, int byteCount, void * chars, int charCount, uint leftOverBits, uint leftOverCount, object provider, DecoderFallbackBuffer fallbackBuffer, byte[] bufferArg, bool flush); // 0x00529BCC
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x0052A130
	public override int GetChars(void * bytes, int byteCount, void * chars, int charCount); // 0x0052A1A4
	public override int GetMaxByteCount(int charCount); // 0x0052A214
	public override int GetMaxCharCount(int byteCount); // 0x0052A300
	public override Decoder GetDecoder(); // 0x0052A3EC
	public override Encoder GetEncoder(); // 0x0052A4A4
	public override byte[] GetPreamble(); // 0x0052A530
	public override bool Equals(object value); // 0x0052A634
	public override int GetHashCode(); // 0x0052A778
	public override int GetByteCount(string chars); // 0x0052A77C
	public override string GetString(byte[] bytes, int index, int count); // 0x0052A780
}

// Namespace: 
[Serializable]
private class UTF8Decoder : Decoder // TypeDefIndex: 1555
{
	// Fields
	private uint leftOverBits; // 0x10
	private uint leftOverCount; // 0x14

	// Constructors
	public UTF8Decoder(DecoderFallback fallback); // 0x0052A474

	// Methods
	public override int GetCharCount(byte[] bytes, int index, int count); // 0x0052A7B8
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x0052A80C
}

// Namespace: 
[Serializable]
private class UTF8Encoder : Encoder // TypeDefIndex: 1556
{
	// Fields
	private char leftOverForCount; // 0x10
	private char leftOverForConv; // 0x12

	// Constructors
	public UTF8Encoder(bool emitIdentifier); // 0x0052A514

	// Methods
	public override int GetByteCount(char[] chars, int index, int count, bool flush); // 0x0052A86C
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush); // 0x0052A8A0
	public override int GetByteCount(void * chars, int count, bool flush); // 0x0052A8E0
	public override int GetBytes(void * chars, int charCount, void * bytes, int byteCount, bool flush); // 0x0052A908
}

// Namespace: System.Text
[Serializable]
public class UnicodeEncoding : Encoding // TypeDefIndex: 1557
{
	// Fields
	internal const int UNICODE_CODE_PAGE = 1200; // 0x00
	internal const int BIG_UNICODE_CODE_PAGE = 1201; // 0x00
	public const int CharSize = 2; // 0x00
	private bool bigEndian; // 0x30
	private bool byteOrderMark; // 0x31

	// Constructors
	public UnicodeEncoding(); // 0x0052A940
	public UnicodeEncoding(bool bigEndian, bool byteOrderMark); // 0x0051B5F8
	public UnicodeEncoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes); // 0x0052A970

	// Methods
	public override int GetByteCount(char[] chars, int index, int count); // 0x0052AB18
	public override int GetByteCount(string s); // 0x0052ACFC
	public override int GetByteCount(void * chars, int count); // 0x0052ADAC
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x0052AEA8
	public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x0052B300
	public override int GetBytes(void * chars, int charCount, void * bytes, int byteCount); // 0x0052B664
	private int GetBytesInternal(void * chars, int charCount, void * bytes, int byteCount); // 0x0052B1F4
	public override int GetCharCount(byte[] bytes, int index, int count); // 0x0052BB00
	public override int GetCharCount(void * bytes, int count); // 0x0052BCE4
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x0052BDE0
	public override int GetChars(void * bytes, int byteCount, void * chars, int charCount); // 0x0052C23C
	public override string GetString(byte[] bytes, int index, int count); // 0x0052C3FC
	private int GetCharsInternal(void * bytes, int byteCount, void * chars, int charCount); // 0x0052C12C
	public override Encoder GetEncoder(); // 0x0052C6B0
	public override int GetMaxByteCount(int charCount); // 0x0052C6B4
	public override int GetMaxCharCount(int byteCount); // 0x0052C7A0
	public override Decoder GetDecoder(); // 0x0052C88C
	public override byte[] GetPreamble(); // 0x0052C92C
	public override bool Equals(object value); // 0x0052CA5C
	public override int GetHashCode(); // 0x0052CB5C
	private static void CopyChars(void * src, void * dest, int count, bool bigEndian); // 0x0052B824
}

// Namespace: 
private sealed class UnicodeDecoder : Decoder // TypeDefIndex: 1558
{
	// Fields
	private bool bigEndian; // 0x10
	private int leftOverByte; // 0x14

	// Constructors
	public UnicodeDecoder(bool bigEndian); // 0x0052C908

	// Methods
	public override int GetCharCount(byte[] bytes, int index, int count); // 0x0052CB60
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x0052CD5C
}

// Namespace: System.Threading
[Serializable]
public class AbandonedMutexException : SystemException // TypeDefIndex: 1559
{
	// Fields
	private Mutex mutex; // 0x34
	private int mutex_index; // 0x38

	// Properties
	public Mutex Mutex { get; } // 0x0052D504 
	public int MutexIndex { get; } // 0x0052D50C 

	// Constructors
	public AbandonedMutexException(); // 0x0052D1E0
	public AbandonedMutexException(string message); // 0x0052D25C
	public AbandonedMutexException(int location, WaitHandle handle); // 0x0052D28C
	protected AbandonedMutexException(SerializationInfo info, StreamingContext context); // 0x0052D344
	public AbandonedMutexException(string message, Exception inner); // 0x0052D36C
	public AbandonedMutexException(string message, int location, WaitHandle handle); // 0x0052D39C
	public AbandonedMutexException(string message, Exception inner, int location, WaitHandle handle); // 0x0052D44C

}

// Namespace: System.Threading
[Serializable]
public enum ApartmentState // TypeDefIndex: 1560
{
	STA = 0,
	MTA = 1,
	Unknown = 2
}

// Namespace: System.Threading
internal enum AsyncFlowControlType // TypeDefIndex: 1561
{
	None = 0,
	Execution = 1,
	Security = 2
}

// Namespace: System.Threading
public struct AsyncFlowControl : IDisposable // TypeDefIndex: 1562
{
	// Fields
	private Thread _t; // 0x08
	private AsyncFlowControlType _type; // 0x0C

	// Constructors
	internal AsyncFlowControl(Thread t, AsyncFlowControlType type); // 0x000A778C

	// Methods
	private void System.IDisposable.Dispose(); // 0x000A7798
	public void Undo(); // 0x000A77C4
	public override int GetHashCode(); // 0x000A77CC
	public override bool Equals(object obj); // 0x000A77D4
	public bool Equals(AsyncFlowControl obj); // 0x000A77DC
	public static bool op_Equality(AsyncFlowControl a, AsyncFlowControl b); // 0x0040F96C
	public static bool op_Inequality(AsyncFlowControl a, AsyncFlowControl b); // 0x0040F984
}

// Namespace: System.Threading
public sealed class AutoResetEvent : EventWaitHandle // TypeDefIndex: 1563
{
	// Constructors
	public AutoResetEvent(bool initialState); // 0x0040F998

}

// Namespace: System.Threading
[Serializable]
public sealed class CompressedStack : ISerializable // TypeDefIndex: 1564
{
	// Fields
	private ArrayList _list; // 0x08

	// Properties
	internal IList List { get; } // 0x00410938 

	// Constructors
	internal CompressedStack(int length); // 0x0040FA6C
	internal CompressedStack(CompressedStack cs); // 0x0040FAF8

	// Methods
	public CompressedStack CreateCopy(); // 0x0040FBC8
	public static CompressedStack Capture(); // 0x0040FC38
	public static CompressedStack GetCompressedStack(); // 0x0040FEAC
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00410004
	public static void Run(CompressedStack compressedStack, ContextCallback callback, object state); // 0x004100AC
	internal bool Equals(CompressedStack cs); // 0x00410644
	internal bool IsEmpty(); // 0x004108FC
}

// Namespace: System.Threading
public enum EventResetMode // TypeDefIndex: 1565
{
	AutoReset = 0,
	ManualReset = 1
}

// Namespace: System.Threading
public class EventWaitHandle : WaitHandle // TypeDefIndex: 1566
{
	// Constructors
	private EventWaitHandle(IntPtr handle); // 0x0041098C
	public EventWaitHandle(bool initialState, EventResetMode mode); // 0x0040F9A0
	public EventWaitHandle(bool initialState, EventResetMode mode, string name); // 0x00410AF0
	public EventWaitHandle(bool initialState, EventResetMode mode, string name, out bool createdNew); // 0x00410BC0

	// Methods
	private bool IsManualReset(EventResetMode mode); // 0x00410A34
	public bool Reset(); // 0x00410C84
	public bool Set(); // 0x00410D8C
}

// Namespace: System.Threading
[Serializable]
public sealed class ExecutionContext : ISerializable // TypeDefIndex: 1567
{
	// Fields
	private SecurityContext _sc; // 0x08
	private bool _suppressFlow; // 0x0C
	private bool _capture; // 0x0D

	// Properties
	internal SecurityContext SecurityContext { get; set; } // 0x00411310 0x00411390
	internal bool FlowSuppressed { get; set; } // 0x00411398 0x004113A0

	// Constructors
	internal ExecutionContext(); // 0x00410DBC
	internal ExecutionContext(ExecutionContext ec); // 0x00410DC4
	internal ExecutionContext(SerializationInfo info, StreamingContext context); // 0x00410E74

	// Methods
	public static ExecutionContext Capture(); // 0x00410F0C
	public ExecutionContext CreateCopy(); // 0x00411178
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00411238
	public static bool IsFlowSuppressed(); // 0x004113A8
	public static void RestoreFlow(); // 0x0040F710
	public static void Run(ExecutionContext executionContext, ContextCallback callback, object state); // 0x0041144C
	public static AsyncFlowControl SuppressFlow(); // 0x00411524
}

// Namespace: System.Threading
public class HostExecutionContext // TypeDefIndex: 1568
{
	// Fields
	private object _state; // 0x08

	// Properties
	protected internal object State { get; set; } // 0x00411694 0x0041169C

	// Constructors
	public HostExecutionContext(); // 0x004115DC
	public HostExecutionContext(object state); // 0x004115FC

	// Methods
	public virtual HostExecutionContext CreateCopy(); // 0x0041161C
}

// Namespace: System.Threading
public class HostExecutionContextManager // TypeDefIndex: 1569
{
	// Constructors
	public HostExecutionContextManager(); // 0x004116A4

	// Methods
	public virtual HostExecutionContext Capture(); // 0x004116AC
	public virtual void Revert(object previousState); // 0x00411734
	public virtual object SetHostExecutionContext(HostExecutionContext hostExecutionContext); // 0x004117BC
}

// Namespace: System.Threading
public static class Interlocked // TypeDefIndex: 1570
{
	// Methods
	public static int CompareExchange(int location1, int value, int comparand); // 0x00411B6C
	public static object CompareExchange(object location1, object value, object comparand); // 0x00411B70
	public static float CompareExchange(float location1, float value, float comparand); // 0x00411B74
	public static int Decrement(int location); // 0x00411B78
	public static long Decrement(long location); // 0x00411B7C
	public static int Increment(int location); // 0x00411B80
	public static long Increment(long location); // 0x00411B84
	public static int Exchange(int location1, int value); // 0x00411B88
	public static object Exchange(object location1, object value); // 0x00411B8C
	public static float Exchange(float location1, float value); // 0x00411B90
	public static long CompareExchange(long location1, long value, long comparand); // 0x00411B94
	public static IntPtr CompareExchange(IntPtr location1, IntPtr value, IntPtr comparand); // 0x00411B98
	public static double CompareExchange(double location1, double value, double comparand); // 0x00411B9C
	public static T CompareExchange(T location1, T value, T comparand);
	public static long Exchange(long location1, long value); // 0x00411BA0
	public static IntPtr Exchange(IntPtr location1, IntPtr value); // 0x00411BA4
	public static double Exchange(double location1, double value); // 0x00411BA8
	public static T Exchange(T location1, T value);
	public static long Read(long location); // 0x00411BAC
	public static int Add(int location1, int value); // 0x00411BB0
	public static long Add(long location1, long value); // 0x00411BB4
}

// Namespace: System.Threading
public struct LockCookie // TypeDefIndex: 1571
{
	// Fields
	internal int ThreadId; // 0x08
	internal int ReaderLocks; // 0x0C
	internal int WriterLocks; // 0x10

	// Constructors
	internal LockCookie(int thread_id); // 0x000A781C
	internal LockCookie(int thread_id, int reader_locks, int writer_locks); // 0x000A7830

	// Methods
	public override int GetHashCode(); // 0x000A783C
	public bool Equals(LockCookie obj); // 0x000A7844
	public override bool Equals(object obj); // 0x000A7874
	public static bool op_Equality(LockCookie a, LockCookie b); // 0x00411D50
	public static bool op_Inequality(LockCookie a, LockCookie b); // 0x00411D80
}

// Namespace: System.Threading
internal class LockQueue // TypeDefIndex: 1572
{
	// Fields
	private ReaderWriterLock rwlock; // 0x08
	private int lockCount; // 0x0C

	// Properties
	public bool IsEmpty { get; } // 0x0041210C 

	// Constructors
	public LockQueue(ReaderWriterLock rwlock); // 0x00411DAC

	// Methods
	public bool Wait(int timeout); // 0x00411DCC
	public void Pulse(); // 0x00412138
	public void PulseAll(); // 0x004122A4
}

// Namespace: System.Threading
public sealed class ManualResetEvent : EventWaitHandle // TypeDefIndex: 1573
{
	// Constructors
	public ManualResetEvent(bool initialState); // 0x00412410

}

// Namespace: System.Threading
public static class Monitor // TypeDefIndex: 1574
{
	// Methods
	private static bool Monitor_try_enter(object obj, int ms); // 0x00412418
	public static void Enter(object obj); // 0x00411F98
	public static void Exit(object obj); // 0x00411F9C
	private static void Monitor_pulse(object obj); // 0x0041241C
	private static bool Monitor_test_synchronised(object obj); // 0x00412420
	public static void Pulse(object obj); // 0x0041219C
	private static void Monitor_pulse_all(object obj); // 0x0041242C
	public static void PulseAll(object obj); // 0x00412308
	public static bool TryEnter(object obj); // 0x00412430
	public static bool TryEnter(object obj, int millisecondsTimeout); // 0x00412438
	public static bool TryEnter(object obj, TimeSpan timeout); // 0x00412568
	private static bool Monitor_wait(object obj, int ms); // 0x004126A8
	public static bool Wait(object obj); // 0x004126AC
	public static bool Wait(object obj, int millisecondsTimeout); // 0x00411FA0
	public static bool Wait(object obj, TimeSpan timeout); // 0x004126B8
	public static bool Wait(object obj, int millisecondsTimeout, bool exitContext); // 0x004127C4
	public static bool Wait(object obj, TimeSpan timeout, bool exitContext); // 0x00412890
}

// Namespace: System.Threading
public sealed class Mutex : WaitHandle // TypeDefIndex: 1575
{
	// Constructors
	public Mutex(); // 0x00412964
	public Mutex(bool initiallyOwned); // 0x00412A24
	public Mutex(bool initiallyOwned, string name); // 0x00412AE4
	public Mutex(bool initiallyOwned, string name, out bool createdNew); // 0x00412BA8

	// Methods
	private static IntPtr CreateMutex_internal(bool initiallyOwned, string name, out bool created); // 0x00412A20
	private static bool ReleaseMutex_internal(IntPtr handle); // 0x00412C60
	public void ReleaseMutex(); // 0x00412C64
}

// Namespace: System.Threading
internal sealed class NativeEventCalls // TypeDefIndex: 1576
{
	// Constructors
	public NativeEventCalls(); // 0x00412D24

	// Methods
	public static IntPtr CreateEvent_internal(bool manual, bool initial, string name, out bool created); // 0x00410AEC
	public static bool SetEvent_internal(IntPtr handle); // 0x00410DB8
	public static bool ResetEvent_internal(IntPtr handle); // 0x00410D88
	public static void CloseEvent_internal(IntPtr handle); // 0x00412D2C
}

// Namespace: System.Threading
public struct NativeOverlapped // TypeDefIndex: 1577
{
	// Fields
	public IntPtr EventHandle; // 0x08
	public IntPtr InternalHigh; // 0x0C
	public IntPtr InternalLow; // 0x10
	public int OffsetHigh; // 0x14
	public int OffsetLow; // 0x18
	internal int Handle1; // 0x1C
	internal int Handle2; // 0x20

}

// Namespace: System.Threading
public class Overlapped // TypeDefIndex: 1578
{
	// Fields
	private IAsyncResult ares; // 0x08
	private int offsetL; // 0x0C
	private int offsetH; // 0x10
	private int evt; // 0x14
	private IntPtr evt_ptr; // 0x18

	// Properties
	public IAsyncResult AsyncResult { get; set; } // 0x0041332C 0x00413334
	public int EventHandle { get; set; } // 0x0041333C 0x00413344
	public IntPtr EventHandleIntPtr { get; set; } // 0x0041334C 0x00413354
	public int OffsetHigh { get; set; } // 0x0041335C 0x00413364
	public int OffsetLow { get; set; } // 0x0041336C 0x00413374

	// Constructors
	public Overlapped(); // 0x00412D30
	public Overlapped(int offsetLo, int offsetHi, int hEvent, IAsyncResult ar); // 0x00412D38
	public Overlapped(int offsetLo, int offsetHi, IntPtr hEvent, IAsyncResult ar); // 0x00412D70

	// Methods
	public static void Free(void * nativeOverlappedPtr); // 0x00412DA8
	public static Overlapped Unpack(void * nativeOverlappedPtr); // 0x00412EB4
	public void * Pack(IOCompletionCallback iocb); // 0x00413008
	public void * Pack(IOCompletionCallback iocb, object userData); // 0x004131EC
	public void * UnsafePack(IOCompletionCallback iocb); // 0x00413324
	public void * UnsafePack(IOCompletionCallback iocb, object userData); // 0x00413328
}

// Namespace: System.Threading
public sealed class ReaderWriterLock : CriticalFinalizerObject // TypeDefIndex: 1579
{
	// Fields
	private int seq_num; // 0x08
	private int state; // 0x0C
	private int readers; // 0x10
	private LockQueue writer_queue; // 0x14
	private Hashtable reader_locks; // 0x18
	private int writer_lock_owner; // 0x1C

	// Properties
	public bool IsReaderLockHeld { get; } // 0x00413818 
	public bool IsWriterLockHeld { get; } // 0x004139E0 
	public int WriterSeqNum { get; } // 0x00413AD4 

	// Constructors
	public ReaderWriterLock(); // 0x00413758

	// Methods
	protected override void Finalize(); // 0x00413810
	public void AcquireReaderLock(int millisecondsTimeout); // 0x00413AF8
	private void AcquireReaderLock(int millisecondsTimeout, int initialLockCount); // 0x00413B00
	public void AcquireReaderLock(TimeSpan timeout); // 0x004141F0
	public void AcquireWriterLock(int millisecondsTimeout); // 0x00414304
	private void AcquireWriterLock(int millisecondsTimeout, int initialLockCount); // 0x00414008
	public void AcquireWriterLock(TimeSpan timeout); // 0x0041430C
	public bool AnyWritersSince(int seqNum); // 0x00414338
	public void DowngradeFromWriterLock(LockCookie lockCookie); // 0x00414368
	public LockCookie ReleaseLock(); // 0x00414550
	public void ReleaseReaderLock(); // 0x004149E8
	private void ReleaseReaderLock(int currentCount, int releaseCount); // 0x00414820
	public void ReleaseWriterLock(); // 0x00414BF0
	private void ReleaseWriterLock(int releaseCount); // 0x00414798
	public void RestoreLock(LockCookie lockCookie); // 0x00414D04
	public LockCookie UpgradeToWriterLock(int millisecondsTimeout); // 0x00414D9C
	public LockCookie UpgradeToWriterLock(TimeSpan timeout); // 0x00414E80
	private LockCookie GetLockCookie(); // 0x00414620
	private bool HasWriterLock(); // 0x00413F68
	private int CheckTimeout(TimeSpan timeout); // 0x00414220
}

// Namespace: System.Threading
public sealed class RegisteredWaitHandle : MarshalByRefObject // TypeDefIndex: 1580
{
	// Fields
	private WaitHandle _waitObject; // 0x0C
	private WaitOrTimerCallback _callback; // 0x10
	private TimeSpan _timeout; // 0x18
	private object _state; // 0x20
	private bool _executeOnlyOnce; // 0x24
	private WaitHandle _finalEvent; // 0x28
	private ManualResetEvent _cancelEvent; // 0x2C
	private int _callsInProcess; // 0x30
	private bool _unregistered; // 0x34

	// Constructors
	internal RegisteredWaitHandle(WaitHandle waitObject, WaitOrTimerCallback callback, object state, TimeSpan timeout, bool executeOnlyOnce); // 0x00414EB0

	// Methods
	internal void Wait(object state); // 0x00414F78
	private void DoCallBack(object timedOut); // 0x00415680
	public bool Unregister(WaitHandle waitObject); // 0x00415B7C
}

// Namespace: System.Threading
public class SynchronizationContext // TypeDefIndex: 1581
{
	// Fields
	private bool notification_required; // 0x08
	private static SynchronizationContext currentContext; // 0x80000000

	// Properties
	public static SynchronizationContext Current { get; } // 0x00416090 

	// Constructors
	public SynchronizationContext(); // 0x00416014
	internal SynchronizationContext(SynchronizationContext context); // 0x0041601C

	// Methods
	public virtual SynchronizationContext CreateCopy(); // 0x004160F0
	public bool IsWaitNotificationRequired(); // 0x00416160
	public virtual void OperationCompleted(); // 0x00416168
	public virtual void OperationStarted(); // 0x0041616C
	public virtual void Post(SendOrPostCallback d, object state); // 0x00416170
	public virtual void Send(SendOrPostCallback d, object state); // 0x004161FC
	public static void SetSynchronizationContext(SynchronizationContext syncContext); // 0x00416230
	public static void SetThreadStaticContext(SynchronizationContext syncContext); // 0x00416294
	protected void SetWaitNotificationRequired(); // 0x004162F8
	public virtual int Wait(IntPtr[] waitHandles, bool waitAll, int millisecondsTimeout); // 0x0041638C
	protected static int WaitHelper(IntPtr[] waitHandles, bool waitAll, int millisecondsTimeout); // 0x004163A0
}

// Namespace: System.Threading
[Serializable]
public class SynchronizationLockException : SystemException // TypeDefIndex: 1582
{
	// Constructors
	public SynchronizationLockException(); // 0x00416428
	public SynchronizationLockException(string message); // 0x00412424
	protected SynchronizationLockException(SerializationInfo info, StreamingContext context); // 0x00416490
	public SynchronizationLockException(string message, Exception innerException); // 0x004164B0

}

// Namespace: System.Threading
public sealed class Thread : CriticalFinalizerObject, _Thread // TypeDefIndex: 1583
{
	// Fields
	private int lock_thread_id; // 0x08
	private IntPtr system_thread_handle; // 0x0C
	private object cached_culture_info; // 0x10
	private IntPtr unused0; // 0x14
	private bool threadpool_thread; // 0x18
	private IntPtr name; // 0x1C
	private int name_len; // 0x20
	private ThreadState state; // 0x24
	private object abort_exc; // 0x28
	private int abort_state_handle; // 0x2C
	private long thread_id; // 0x30
	private IntPtr start_notify; // 0x38
	private IntPtr stack_ptr; // 0x3C
	private UIntPtr static_data; // 0x40
	private IntPtr jit_data; // 0x44
	private IntPtr lock_data; // 0x48
	private object current_appcontext; // 0x4C
	private int stack_size; // 0x50
	private object start_obj; // 0x54
	private IntPtr appdomain_refs; // 0x58
	private int interruption_requested; // 0x5C
	private IntPtr suspend_event; // 0x60
	private IntPtr suspended_event; // 0x64
	private IntPtr resume_event; // 0x68
	private IntPtr synch_cs; // 0x6C
	private IntPtr serialized_culture_info; // 0x70
	private int serialized_culture_info_len; // 0x74
	private IntPtr serialized_ui_culture_info; // 0x78
	private int serialized_ui_culture_info_len; // 0x7C
	private bool thread_dump_requested; // 0x80
	private IntPtr end_stack; // 0x84
	private bool thread_interrupt_requested; // 0x88
	private byte apartment_state; // 0x89
	private int critical_region_level; // 0x8C
	private int small_id; // 0x90
	private IntPtr manage_callback; // 0x94
	private object pending_exception; // 0x98
	private ExecutionContext ec_to_set; // 0x9C
	private IntPtr interrupt_on_stop; // 0xA0
	private IntPtr unused3; // 0xA4
	private IntPtr unused4; // 0xA8
	private IntPtr unused5; // 0xAC
	private IntPtr unused6; // 0xB0
	private static object[] local_slots; // 0x80000000
	private static ExecutionContext _ec; // 0x80000004
	private MulticastDelegate threadstart; // 0xB4
	private int managed_id; // 0xB8
	private IPrincipal _principal; // 0xBC
	private static Hashtable datastorehash; // 0x00
	private static object datastore_lock; // 0x04
	private bool in_currentculture; // 0xC0
	private static object culture_lock; // 0x08

	// Properties
	public static Context CurrentContext { get; } // 0x00416B84 
	public static IPrincipal CurrentPrincipal { get; set; } // 0x00416B8C 0x00416CE0
	public static Thread CurrentThread { get; } // 0x0040FDB8 
	internal static int CurrentThreadId { get; } // 0x00413950 
	public ApartmentState ApartmentState { get; set; } // 0x00417C8C 0x00417D4C
	public CultureInfo CurrentCulture { get; set; } // 0x00417E74 0x004181CC
	public CultureInfo CurrentUICulture { get; set; } // 0x00418400 0x004186E4
	public bool IsThreadPoolThread { get; } // 0x004188D8 
	internal bool IsThreadPoolThreadInternal { get; set; } // 0x004188E0 0x004188E8
	public bool IsAlive { get; } // 0x004188F0 
	public bool IsBackground { get; set; } // 0x00418920 0x004189D4
	public string Name { get; set; } // 0x004189FC 0x00418A00
	public ThreadPriority Priority { get; set; } // 0x00418A04 0x00418A0C
	public ThreadState ThreadState { get; } // 0x00417D40 
	public ExecutionContext ExecutionContext { get; } // 0x0041103C 
	public int ManagedThreadId { get; } // 0x00418FA4 

	// Constructors
	public Thread(ThreadStart start); // 0x004164B8
	public Thread(ThreadStart start, int maxStackSize); // 0x0041658C
	public Thread(ParameterizedThreadStart start); // 0x004166C0
	public Thread(ParameterizedThreadStart start, int maxStackSize); // 0x00416790
	private static Thread(); // 0x004168C4

	// Methods
	private void System.Runtime.InteropServices._Thread.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x00416964
	private void System.Runtime.InteropServices._Thread.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x004169EC
	private void System.Runtime.InteropServices._Thread.GetTypeInfoCount(out uint pcTInfo); // 0x00416A74
	private void System.Runtime.InteropServices._Thread.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x00416AFC
	private static Thread CurrentThread_internal(); // 0x00416DC0
	private static void InitDataStoreHash(); // 0x00416DC4
	public static LocalDataStoreSlot AllocateNamedDataSlot(string name); // 0x00416F98
	public static void FreeNamedDataSlot(string name); // 0x004172D0
	public static LocalDataStoreSlot AllocateDataSlot(); // 0x00417260
	public static object GetData(LocalDataStoreSlot slot); // 0x00417460
	public static void SetData(LocalDataStoreSlot slot, object data); // 0x0041758C
	internal static void FreeLocalSlotValues(int slot, bool thread_local); // 0x004177AC
	public static LocalDataStoreSlot GetNamedDataSlot(string name); // 0x004177B0
	public static AppDomain GetDomain(); // 0x00416CD8
	public static int GetDomainID(); // 0x004179E4
	private static void ResetAbort_internal(); // 0x004179E8
	public static void ResetAbort(); // 0x004179EC
	private static void Sleep_internal(int ms); // 0x00417A64
	public static void Sleep(int millisecondsTimeout); // 0x00417A68
	public static void Sleep(TimeSpan timeout); // 0x00417B58
	private IntPtr Thread_internal(MulticastDelegate start); // 0x00417C88
	private void Thread_init(); // 0x00416588
	private CultureInfo GetCachedCurrentCulture(); // 0x00417E54
	private byte[] GetSerializedCurrentCulture(); // 0x00417E58
	private void SetCachedCurrentCulture(CultureInfo culture); // 0x00417E5C
	private void SetSerializedCurrentCulture(byte[] culture); // 0x00417E60
	private CultureInfo GetCachedCurrentUICulture(); // 0x00417E64
	private byte[] GetSerializedCurrentUICulture(); // 0x00417E68
	private void SetCachedCurrentUICulture(CultureInfo culture); // 0x00417E6C
	private void SetSerializedCurrentUICulture(byte[] culture); // 0x00417E70
	private string GetName_internal(); // 0x004189F4
	private void SetName_internal(string name); // 0x004189F8
	private void Abort_internal(object stateInfo); // 0x00418A10
	public void Abort(); // 0x00418A14
	public void Abort(object stateInfo); // 0x00418A1C
	internal object GetAbortExceptionState(); // 0x00418A20
	private void Interrupt_internal(); // 0x00418A24
	public void Interrupt(); // 0x00418A28
	private bool Join_internal(int ms, IntPtr handle); // 0x00418A2C
	public void Join(); // 0x00418A30
	public bool Join(int millisecondsTimeout); // 0x00418A3C
	public bool Join(TimeSpan timeout); // 0x00418B10
	public static void MemoryBarrier(); // 0x00418C1C
	private void Resume_internal(); // 0x00418C20
	public void Resume(); // 0x00418C24
	private static void SpinWait_nop(); // 0x00418C28
	public static void SpinWait(int iterations); // 0x00418C2C
	public void Start(); // 0x00418CC0
	private void Suspend_internal(); // 0x00418E44
	public void Suspend(); // 0x00418E48
	private void Thread_free_internal(IntPtr handle); // 0x00418E4C
	protected override void Finalize(); // 0x00418E50
	private void SetState(ThreadState set); // 0x004189EC
	private void ClrState(ThreadState clr); // 0x004189F0
	private ThreadState GetState(); // 0x0041891C
	public static byte VolatileRead(byte address); // 0x00418EB8
	public static double VolatileRead(double address); // 0x00418EBC
	public static short VolatileRead(short address); // 0x00418EC0
	public static int VolatileRead(int address); // 0x00418EC4
	public static long VolatileRead(long address); // 0x00418EC8
	public static IntPtr VolatileRead(IntPtr address); // 0x00418ECC
	public static object VolatileRead(object address); // 0x00418ED0
	public static sbyte VolatileRead(sbyte address); // 0x00418ED4
	public static float VolatileRead(float address); // 0x00418ED8
	public static ushort VolatileRead(ushort address); // 0x00418EDC
	public static uint VolatileRead(uint address); // 0x00418EE0
	public static ulong VolatileRead(ulong address); // 0x00418EE4
	public static UIntPtr VolatileRead(UIntPtr address); // 0x00418EE8
	public static void VolatileWrite(byte address, byte value); // 0x00418EEC
	public static void VolatileWrite(double address, double value); // 0x00418EF4
	public static void VolatileWrite(short address, short value); // 0x00418EF8
	public static void VolatileWrite(int address, int value); // 0x00418EFC
	public static void VolatileWrite(long address, long value); // 0x00418F00
	public static void VolatileWrite(IntPtr address, IntPtr value); // 0x00418F04
	public static void VolatileWrite(object address, object value); // 0x00418F08
	public static void VolatileWrite(sbyte address, sbyte value); // 0x00418F0C
	public static void VolatileWrite(float address, float value); // 0x00418F10
	public static void VolatileWrite(ushort address, ushort value); // 0x00418F14
	public static void VolatileWrite(uint address, uint value); // 0x00418F1C
	public static void VolatileWrite(ulong address, ulong value); // 0x00418F20
	public static void VolatileWrite(UIntPtr address, UIntPtr value); // 0x00418F24
	private static int GetNewManagedId(); // 0x00418F28
	private static int GetNewManagedId_internal(); // 0x00418FA0
	public static void BeginCriticalRegion(); // 0x00419040
	public static void EndCriticalRegion(); // 0x004190F8
	public static void BeginThreadAffinity(); // 0x004191B0
	public static void EndThreadAffinity(); // 0x004191B4
	public ApartmentState GetApartmentState(); // 0x004191B8
	public void SetApartmentState(ApartmentState state); // 0x004191C0
	public bool TrySetApartmentState(ApartmentState state); // 0x00417D50
	public override int GetHashCode(); // 0x00419278
	public void Start(object parameter); // 0x0041927C
	public CompressedStack GetCompressedStack(); // 0x0040FE30
	public void SetCompressedStack(CompressedStack stack); // 0x0041026C
}

// Namespace: System.Threading
[Serializable]
public sealed class ThreadAbortException : SystemException // TypeDefIndex: 1584
{
	// Constructors
	private ThreadAbortException(); // 0x00419284
	private ThreadAbortException(SerializationInfo info, StreamingContext sc); // 0x004192F8

}

// Namespace: System.Threading
[Serializable]
public class ThreadInterruptedException : SystemException // TypeDefIndex: 1585
{
	// Constructors
	public ThreadInterruptedException(); // 0x00419318
	public ThreadInterruptedException(string message); // 0x00419380
	protected ThreadInterruptedException(SerializationInfo info, StreamingContext context); // 0x00419388
	public ThreadInterruptedException(string message, Exception innerException); // 0x004193A8

}

// Namespace: System.Threading
public static class ThreadPool // TypeDefIndex: 1586
{
	// Methods
	public static bool BindHandle(IntPtr osHandle); // 0x004193B0
	public static bool BindHandle(SafeHandle osHandle); // 0x004193B8
	public static void GetMaxThreads(out int workerThreads, out int completionPortThreads); // 0x00419464
	public static void GetMinThreads(out int workerThreads, out int completionPortThreads); // 0x00419468
	public static bool SetMinThreads(int workerThreads, int completionPortThreads); // 0x0041946C
	public static bool SetMaxThreads(int workerThreads, int completionPortThreads); // 0x00419470
	public static bool QueueUserWorkItem(WaitCallback callBack); // 0x00419474
	public static bool QueueUserWorkItem(WaitCallback callBack, object state); // 0x0041559C
	public static RegisteredWaitHandle RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, object state, int millisecondsTimeOutInterval, bool executeOnlyOnce); // 0x004194A8
	public static RegisteredWaitHandle RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, object state, long millisecondsTimeOutInterval, bool executeOnlyOnce); // 0x004194D0
	public static RegisteredWaitHandle RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, object state, TimeSpan timeout, bool executeOnlyOnce); // 0x00419750
	public static RegisteredWaitHandle RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, object state, uint millisecondsTimeOutInterval, bool executeOnlyOnce); // 0x004197B0
}

// Namespace: System.Threading
[Serializable]
public enum ThreadPriority // TypeDefIndex: 1587
{
	Lowest = 0,
	BelowNormal = 1,
	Normal = 2,
	AboveNormal = 3,
	Highest = 4
}

// Namespace: System.Threading
[Serializable]
public sealed class ThreadStartException : SystemException // TypeDefIndex: 1588
{
	// Constructors
	internal ThreadStartException(); // 0x00419A18
	internal ThreadStartException(string message); // 0x00419A80
	internal ThreadStartException(SerializationInfo info, StreamingContext context); // 0x00419A88
	internal ThreadStartException(string message, Exception innerException); // 0x00419AA8

}

// Namespace: System.Threading
[Serializable]
public enum ThreadState // TypeDefIndex: 1589
{
	Running = 0,
	StopRequested = 1,
	SuspendRequested = 2,
	Background = 4,
	Unstarted = 8,
	Stopped = 16,
	WaitSleepJoin = 32,
	Suspended = 64,
	AbortRequested = 128,
	Aborted = 256
}

// Namespace: System.Threading
[Serializable]
public class ThreadStateException : SystemException // TypeDefIndex: 1590
{
	// Constructors
	public ThreadStateException(); // 0x00419AB0
	public ThreadStateException(string message); // 0x00417D44
	protected ThreadStateException(SerializationInfo info, StreamingContext context); // 0x00419B18
	public ThreadStateException(string message, Exception innerException); // 0x00419B38

}

// Namespace: System.Threading
public static class Timeout // TypeDefIndex: 1591
{
	// Fields
	public const int Infinite = -1; // 0x00

}

// Namespace: System.Threading
public sealed class Timer : MarshalByRefObject, IDisposable // TypeDefIndex: 1592
{
	// Fields
	private const long MaxValue = 4294967294; // 0x00
	private static Scheduler scheduler; // 0x00
	private TimerCallback callback; // 0x0C
	private object state; // 0x10
	private long due_time_ms; // 0x18
	private long period_ms; // 0x20
	private long next_run; // 0x28
	private bool disposed; // 0x30

	// Constructors
	public Timer(TimerCallback callback, object state, int dueTime, int period); // 0x00419B40
	public Timer(TimerCallback callback, object state, long dueTime, long period); // 0x00419C80
	public Timer(TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period); // 0x00419CD0
	public Timer(TimerCallback callback, object state, uint dueTime, uint period); // 0x00419D78
	public Timer(TimerCallback callback); // 0x00419DE4
	private static Timer(); // 0x00419E2C

	// Methods
	private void Init(TimerCallback callback, object state, long dueTime, long period); // 0x00419B98
	public bool Change(int dueTime, int period); // 0x0041A21C
	public bool Change(TimeSpan dueTime, TimeSpan period); // 0x0041A248
	public bool Change(uint dueTime, uint period); // 0x0041A2D8
	public void Dispose(); // 0x0041A31C
	public bool Change(long dueTime, long period); // 0x0041A47C
	private bool Change(long dueTime, long period, bool first); // 0x00419F34
	public bool Dispose(WaitHandle notifyObject); // 0x0041A5D0
}

// Namespace: 
private sealed class TimerComparer : IComparer // TypeDefIndex: 1593
{
	// Constructors
	public TimerComparer(); // 0x0041A7DC

	// Methods
	public int Compare(object x, object y); // 0x0041B2E0
}

// Namespace: 
private sealed class Scheduler // TypeDefIndex: 1594
{
	// Fields
	private static Scheduler instance; // 0x00
	private SortedList list; // 0x08

	// Properties
	public static Scheduler Instance { get; } // 0x0041A854 

	// Constructors
	private Scheduler(); // 0x0041A6A4
	private static Scheduler(); // 0x0041A7E4

	// Methods
	public void Remove(Timer timer); // 0x0041A3DC
	public void Change(Timer timer, long new_next_run); // 0x0041A4AC
	private void Add(Timer timer); // 0x0041A95C
	private int InternalRemove(Timer timer); // 0x0041A8E0
	private void SchedulerThread(); // 0x0041AB2C
	private void ShrinkIfNeeded(ArrayList list, int initial); // 0x0041B23C
}

// Namespace: System.Threading
public abstract class WaitHandle : MarshalByRefObject, IDisposable // TypeDefIndex: 1595
{
	// Fields
	public const int WaitTimeout = 258; // 0x00
	private SafeWaitHandle safe_wait_handle; // 0x0C
	protected static readonly IntPtr InvalidHandle; // 0x00
	private bool disposed; // 0x10

	// Properties
	public virtual IntPtr Handle { get; set; } // 0x0041C620 0x0041C64C
	public SafeWaitHandle SafeWaitHandle { get; set; } // 0x0041C824 0x0041C82C

	// Constructors
	protected WaitHandle(); // 0x00410A2C
	private static WaitHandle(); // 0x0041BB4C

	// Methods
	private void System.IDisposable.Dispose(); // 0x0041BBB8
	private static bool WaitAll_internal(WaitHandle[] handles, int ms, bool exitContext); // 0x0041BBEC
	private static void CheckArray(WaitHandle[] handles, bool waitAll); // 0x0041BBF0
	public static bool WaitAll(WaitHandle[] waitHandles); // 0x0041BDE4
	public static bool WaitAll(WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext); // 0x0041BE78
	public static bool WaitAll(WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext); // 0x0041C048
	private static int WaitAny_internal(WaitHandle[] handles, int ms, bool exitContext); // 0x0041C258
	public static int WaitAny(WaitHandle[] waitHandles); // 0x0041C25C
	public static int WaitAny(WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext); // 0x0041C2F0
	public static int WaitAny(WaitHandle[] waitHandles, TimeSpan timeout); // 0x0041C4C0
	public static int WaitAny(WaitHandle[] waitHandles, int millisecondsTimeout); // 0x0041C560
	public static int WaitAny(WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext); // 0x00415378
	public virtual void Close(); // 0x0041C5EC
	private bool WaitOne_internal(IntPtr handle, int ms, bool exitContext); // 0x0041C788
	protected virtual void Dispose(bool explicitDisposing); // 0x0041C78C
	public static bool SignalAndWait(WaitHandle toSignal, WaitHandle toWaitOn); // 0x0041C8F4
	public static bool SignalAndWait(WaitHandle toSignal, WaitHandle toWaitOn, int millisecondsTimeout, bool exitContext); // 0x0041C98C
	public static bool SignalAndWait(WaitHandle toSignal, WaitHandle toWaitOn, TimeSpan timeout, bool exitContext); // 0x0041CB50
	private static bool SignalAndWait_Internal(IntPtr toSignal, IntPtr toWaitOn, int ms, bool exitContext); // 0x0041CB4C
	public virtual bool WaitOne(); // 0x0041CCC8
	public virtual bool WaitOne(int millisecondsTimeout, bool exitContext); // 0x0041CDF4
	public virtual bool WaitOne(int millisecondsTimeout); // 0x0041CFF4
	public virtual bool WaitOne(TimeSpan timeout); // 0x0041D008
	public virtual bool WaitOne(TimeSpan timeout, bool exitContext); // 0x0041D038
	internal void CheckDisposed(); // 0x00410CB0
	public static bool WaitAll(WaitHandle[] waitHandles, int millisecondsTimeout); // 0x0041D278
	public static bool WaitAll(WaitHandle[] waitHandles, TimeSpan timeout); // 0x0041D304
	protected override void Finalize(); // 0x0041D3A4
}

// Namespace: System.Threading
[Serializable]
public class WaitHandleCannotBeOpenedException : ApplicationException // TypeDefIndex: 1596
{
	// Constructors
	public WaitHandleCannotBeOpenedException(); // 0x0041D41C
	public WaitHandleCannotBeOpenedException(string message); // 0x0041D490
	public WaitHandleCannotBeOpenedException(string message, Exception innerException); // 0x0041D498
	protected WaitHandleCannotBeOpenedException(SerializationInfo info, StreamingContext context); // 0x0041D4A0

}

// Namespace: System
[Serializable]
public class AccessViolationException : SystemException // TypeDefIndex: 1597
{
	// Fields
	private const int Result = -2147467261; // 0x00

	// Constructors
	public AccessViolationException(); // 0x00269260
	public AccessViolationException(string message); // 0x002692E0
	public AccessViolationException(string message, Exception innerException); // 0x00269304
	protected AccessViolationException(SerializationInfo info, StreamingContext context); // 0x00269328

}

// Namespace: System
[Serializable]
public sealed class ActivationContext : IDisposable, ISerializable // TypeDefIndex: 1598
{
	// Fields
	private ContextForm _form; // 0x08
	private ApplicationIdentity _appid; // 0x0C
	private bool _disposed; // 0x10

	// Properties
	public ContextForm Form { get; } // 0x00269438 
	public ApplicationIdentity Identity { get; } // 0x00269440 

	// Constructors
	private ActivationContext(ApplicationIdentity identity); // 0x00269348

	// Methods
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00269368
	protected override void Finalize(); // 0x0026940C
	public static ActivationContext CreatePartialActivationContext(ApplicationIdentity identity); // 0x00269448
	public static ActivationContext CreatePartialActivationContext(ApplicationIdentity identity, string[] manifestPaths); // 0x00269518
	public void Dispose(); // 0x00269634
	private void Dispose(bool disposing); // 0x00269424
}

// Namespace: 
public enum ContextForm // TypeDefIndex: 1599
{
	Loose = 0,
	StoreBounded = 1
}

// Namespace: System
public sealed class Activator : _Activator // TypeDefIndex: 1600
{
	// Fields
	private const BindingFlags _flags = 532; // 0x00
	private const BindingFlags _accessFlags = 127; // 0x00

	// Constructors
	private Activator(); // 0x0026964C

	// Methods
	private void System.Runtime.InteropServices._Activator.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x00269654
	private void System.Runtime.InteropServices._Activator.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x002696DC
	private void System.Runtime.InteropServices._Activator.GetTypeInfoCount(out uint pcTInfo); // 0x00269764
	private void System.Runtime.InteropServices._Activator.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x002697EC
	public static ObjectHandle CreateComInstanceFrom(string assemblyName, string typeName); // 0x00269874
	public static ObjectHandle CreateComInstanceFrom(string assemblyName, string typeName, byte[] hashValue, AssemblyHashAlgorithm hashAlgorithm); // 0x002699E0
	public static ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName); // 0x00269B4C
	public static ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName, object[] activationAttributes); // 0x00269B84
	public static ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes, Evidence securityInfo); // 0x00269BBC
	public static ObjectHandle CreateInstance(string assemblyName, string typeName); // 0x0026A4C4
	public static ObjectHandle CreateInstance(string assemblyName, string typeName, object[] activationAttributes); // 0x0026A530
	public static ObjectHandle CreateInstance(string assemblyName, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes, Evidence securityInfo); // 0x0026A5C4
	public static ObjectHandle CreateInstance(ActivationContext activationContext); // 0x0026A6D0
	public static ObjectHandle CreateInstance(ActivationContext activationContext, string[] activationCustomData); // 0x0026A758
	public static ObjectHandle CreateInstanceFrom(AppDomain domain, string assemblyFile, string typeName); // 0x0026A7E0
	public static ObjectHandle CreateInstanceFrom(AppDomain domain, string assemblyFile, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes, Evidence securityAttributes); // 0x0026A97C
	public static ObjectHandle CreateInstance(AppDomain domain, string assemblyName, string typeName); // 0x0026AB5C
	public static ObjectHandle CreateInstance(AppDomain domain, string assemblyName, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes, Evidence securityAttributes); // 0x0026ACD0
	public static T CreateInstance();
	public static object CreateInstance(Type type); // 0x0026AEB0
	public static object CreateInstance(Type type, object[] args); // 0x0026B1CC
	public static object CreateInstance(Type type, object[] args, object[] activationAttributes); // 0x0026B244
	public static object CreateInstance(Type type, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture); // 0x0026B360
	public static object CreateInstance(Type type, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes); // 0x00269CAC
	public static object CreateInstance(Type type, bool nonPublic); // 0x0026AEB8
	private static void CheckType(Type type); // 0x0026B3F8
	private static void CheckAbstractType(Type type); // 0x0026B6D0
	public static object GetObject(Type type, string url); // 0x0026B80C
	public static object GetObject(Type type, string url, object state); // 0x0026B8F4
	internal static object CreateInstanceInternal(Type type); // 0x0026B6CC
}

// Namespace: System
public sealed class AppDomain : MarshalByRefObject // TypeDefIndex: 1601
{
	// Fields
	private IntPtr _mono_app_domain; // 0x0C
	private static string _process_guid; // 0x00
	private static Hashtable type_resolve_in_progress; // 0x80000000
	private static Hashtable assembly_resolve_in_progress; // 0x80000004
	private static Hashtable assembly_resolve_in_progress_refonly; // 0x80000008
	private Evidence _evidence; // 0x10
	private PermissionSet _granted; // 0x14
	private PrincipalPolicy _principalPolicy; // 0x18
	private static IPrincipal _principal; // 0x8000000C
	private static AppDomain default_domain; // 0x04
	private AppDomainManager _domain_manager; // 0x1C
	private ActivationContext _activation; // 0x20
	private ApplicationIdentity _applicationIdentity; // 0x24
	private AssemblyLoadEventHandler AssemblyLoad; // 0x28
	private ResolveEventHandler AssemblyResolve; // 0x2C
	private EventHandler DomainUnload; // 0x30
	private EventHandler ProcessExit; // 0x34
	private ResolveEventHandler ResourceResolve; // 0x38
	private ResolveEventHandler TypeResolve; // 0x3C
	private UnhandledExceptionEventHandler UnhandledException; // 0x40
	private ResolveEventHandler ReflectionOnlyAssemblyResolve; // 0x44

	// Properties
	internal AppDomainSetup SetupInformationNoCopy { get; } // 0x0026C2F0 
	public AppDomainSetup SetupInformation { get; } // 0x0026C2F4 
	public string BaseDirectory { get; } // 0x0026C5D8 
	public string RelativeSearchPath { get; } // 0x0026C6E8 
	public string DynamicDirectory { get; } // 0x0026C7E8 
	public bool ShadowCopyFiles { get; } // 0x0026CACC 
	public string FriendlyName { get; } // 0x0026CB84 
	public Evidence Evidence { get; } // 0x0026CB88 
	internal IPrincipal DefaultPrincipal { get; } // 0x0026CE14 
	internal PermissionSet GrantedPermissionSet { get; } // 0x0026CFD4 
	public static AppDomain CurrentDomain { get; } // 0x0026CFE0 
	internal static AppDomain DefaultDomain { get; } // 0x0026CCF4 
	public AppDomainManager DomainManager { get; } // 0x0027065C 
	public ActivationContext ActivationContext { get; } // 0x00270664 
	public ApplicationIdentity ApplicationIdentity { get; } // 0x0027066C 
	public int Id { get; } // 0x00270674 

	// Events
	public event AssemblyLoadEventHandler AssemblyLoad {
		add; // 0x0026B9EC
		remove; // 0x0026BA7C
	}
	public event ResolveEventHandler AssemblyResolve {
		add; // 0x0026BB0C
		remove; // 0x0026BB9C
	}
	public event EventHandler DomainUnload {
		add; // 0x0026BC2C
		remove; // 0x0026BCBC
	}
	public event EventHandler ProcessExit {
		add; // 0x0026BD4C
		remove; // 0x0026BDDC
	}
	public event ResolveEventHandler ResourceResolve {
		add; // 0x0026BE6C
		remove; // 0x0026BEFC
	}
	public event ResolveEventHandler TypeResolve {
		add; // 0x0026BF8C
		remove; // 0x0026C01C
	}
	public event UnhandledExceptionEventHandler UnhandledException {
		add; // 0x0026C0AC
		remove; // 0x0026C13C
	}
	public event ResolveEventHandler ReflectionOnlyAssemblyResolve {
		add; // 0x0026C1CC
		remove; // 0x0026C25C
	}

	// Constructors
	private AppDomain(); // 0x0026B9E4

	// Methods
	private AppDomainSetup getSetup(); // 0x0026C2EC
	private string getFriendlyName(); // 0x0026CB80
	private static AppDomain getCurDomain(); // 0x0026CFDC
	private static AppDomain getRootDomain(); // 0x0026CFE4
	public void AppendPrivatePath(string path); // 0x0026CFE8
	public void ClearPrivatePath(); // 0x0026D210
	public void ClearShadowCopyPath(); // 0x0026D2C8
	public ObjectHandle CreateInstance(string assemblyName, string typeName); // 0x0026AC18
	public ObjectHandle CreateInstance(string assemblyName, string typeName, object[] activationAttributes); // 0x0026D378
	public ObjectHandle CreateInstance(string assemblyName, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes, Evidence securityAttributes); // 0x0026ADC8
	public object CreateInstanceAndUnwrap(string assemblyName, string typeName); // 0x0026D438
	public object CreateInstanceAndUnwrap(string assemblyName, string typeName, object[] activationAttributes); // 0x0026D454
	public object CreateInstanceAndUnwrap(string assemblyName, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes, Evidence securityAttributes); // 0x0026D478
	public ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName); // 0x0026A89C
	public ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName, object[] activationAttributes); // 0x0026D4C8
	public ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes, Evidence securityAttributes); // 0x0026AA74
	public object CreateInstanceFromAndUnwrap(string assemblyName, string typeName); // 0x0026D5AC
	public object CreateInstanceFromAndUnwrap(string assemblyName, string typeName, object[] activationAttributes); // 0x0026D5C8
	public object CreateInstanceFromAndUnwrap(string assemblyName, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes, Evidence securityAttributes); // 0x0026D5EC
	public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access); // 0x0026D63C
	public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, Evidence evidence); // 0x0026D794
	public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, string dir); // 0x0026D7C4
	public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, string dir, Evidence evidence); // 0x0026D7F0
	public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions); // 0x0026D81C
	public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, Evidence evidence, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions); // 0x0026D850
	public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, string dir, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions); // 0x0026D88C
	public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, string dir, Evidence evidence, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions); // 0x0026D8B8
	public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, string dir, Evidence evidence, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions, bool isSynchronized); // 0x0026D66C
	public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, string dir, Evidence evidence, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions, bool isSynchronized, IEnumerable`1<CustomAttributeBuilder> assemblyAttributes); // 0x0026DA5C
	public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, IEnumerable`1<CustomAttributeBuilder> assemblyAttributes); // 0x0026DD88
	internal AssemblyBuilder DefineInternalDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access); // 0x0026DDBC
	public void DoCallBack(CrossAppDomainDelegate callBackDelegate); // 0x0026DE54
	public int ExecuteAssembly(string assemblyFile); // 0x0026DE68
	public int ExecuteAssembly(string assemblyFile, Evidence assemblySecurity); // 0x0026DECC
	public int ExecuteAssembly(string assemblyFile, Evidence assemblySecurity, string[] args); // 0x0026DE98
	public int ExecuteAssembly(string assemblyFile, Evidence assemblySecurity, string[] args, byte[] hashValue, AssemblyHashAlgorithm hashAlgorithm); // 0x0026E048
	private int ExecuteAssemblyInternal(Assembly a, string[] args); // 0x0026DEFC
	private int ExecuteAssembly(Assembly a, string[] args); // 0x0026E094
	private Assembly[] GetAssemblies(bool refOnly); // 0x0026E098
	public Assembly[] GetAssemblies(); // 0x0026E09C
	public object GetData(string name); // 0x0026E0A4
	public Type GetType(); // 0x0026E0A8
	public override object InitializeLifetimeService(); // 0x0026E0B0
	internal Assembly LoadAssembly(string assemblyRef, Evidence securityEvidence, bool refOnly); // 0x0026E0B8
	public Assembly Load(AssemblyName assemblyRef); // 0x0026E0BC
	internal Assembly LoadSatellite(AssemblyName assemblyRef, bool throwOnError); // 0x0026E728
	public Assembly Load(AssemblyName assemblyRef, Evidence assemblySecurity); // 0x0026E0C4
	public Assembly Load(string assemblyString); // 0x0026E854
	public Assembly Load(string assemblyString, Evidence assemblySecurity); // 0x0026E9CC
	internal Assembly Load(string assemblyString, Evidence assemblySecurity, bool refonly); // 0x0026E874
	public Assembly Load(byte[] rawAssembly); // 0x0026E9E8
	public Assembly Load(byte[] rawAssembly, byte[] rawSymbolStore); // 0x0026EA30
	internal Assembly LoadAssemblyRaw(byte[] rawAssembly, byte[] rawSymbolStore, Evidence securityEvidence, bool refonly); // 0x0026EA54
	public Assembly Load(byte[] rawAssembly, byte[] rawSymbolStore, Evidence securityEvidence); // 0x0026EA10
	internal Assembly Load(byte[] rawAssembly, byte[] rawSymbolStore, Evidence securityEvidence, bool refonly); // 0x0026EA74
	public void SetAppDomainPolicy(PolicyLevel domainPolicy); // 0x0026EB6C
	public void SetCachePath(string path); // 0x0026ED80
	public void SetPrincipalPolicy(PrincipalPolicy policy); // 0x0026EDAC
	public void SetShadowCopyFiles(); // 0x0026EE6C
	public void SetShadowCopyPath(string path); // 0x0026EEE8
	public void SetThreadPrincipal(IPrincipal principal); // 0x0026EF14
	private static AppDomain InternalSetDomainByID(int domain_id); // 0x0026F088
	private static AppDomain InternalSetDomain(AppDomain context); // 0x0026F08C
	internal static void InternalPushDomainRef(AppDomain domain); // 0x0026F090
	internal static void InternalPushDomainRefByID(int domain_id); // 0x0026F094
	internal static void InternalPopDomainRef(); // 0x0026F098
	internal static Context InternalSetContext(Context context); // 0x0026F09C
	internal static Context InternalGetContext(); // 0x0026F0A0
	internal static Context InternalGetDefaultContext(); // 0x0026F0A4
	internal static string InternalGetProcessGuid(string newguid); // 0x0026F0A8
	internal static object InvokeInDomain(AppDomain domain, MethodInfo method, object obj, object[] args); // 0x0026F0AC
	internal static object InvokeInDomainByID(int domain_id, MethodInfo method, object obj, object[] args); // 0x0026F290
	internal static string GetProcessGuid(); // 0x0026F474
	public static AppDomain CreateDomain(string friendlyName); // 0x0026F568
	public static AppDomain CreateDomain(string friendlyName, Evidence securityInfo); // 0x0026F8C8
	private static AppDomain createDomain(string friendlyName, AppDomainSetup info); // 0x0026F8D0
	public static AppDomain CreateDomain(string friendlyName, Evidence securityInfo, AppDomainSetup info); // 0x0026F574
	public static AppDomain CreateDomain(string friendlyName, Evidence securityInfo, string appBasePath, string appRelativeSearchPath, bool shadowCopyFiles); // 0x0026FA34
	private static AppDomainSetup CreateDomainSetup(string appBasePath, string appRelativeSearchPath, bool shadowCopyFiles); // 0x0026FA6C
	private static bool InternalIsFinalizingForUnload(int domain_id); // 0x0026FB54
	public bool IsFinalizingForUnload(); // 0x0026ECEC
	private static void InternalUnload(int domain_id); // 0x0026FBD4
	private int getDomainID(); // 0x0026FB58
	public static void Unload(AppDomain domain); // 0x0026FBD8
	public void SetData(string name, object data); // 0x0026FC88
	public void SetData(string name, object data, IPermission permission); // 0x0026FC8C
	public static int GetCurrentThreadId(); // 0x0026FD14
	public override string ToString(); // 0x0026FD90
	private static void ValidateAssemblyName(string name); // 0x0026D8E4
	private void DoAssemblyLoad(Assembly assembly); // 0x0026FD94
	private Assembly DoAssemblyResolve(string name, bool refonly); // 0x0026FE28
	internal Assembly DoTypeResolve(object name_or_tb); // 0x00270188
	private void DoDomainUnload(); // 0x002704F0
	internal void ProcessMessageInDomain(byte[] arrRequest, CADMethodCallMessage cadMsg, out byte[] arrResponse, out CADMethodReturnMessage cadMrm); // 0x0027050C
	public string ApplyPolicy(string assemblyName); // 0x00270678
	public static AppDomain CreateDomain(string friendlyName, Evidence securityInfo, string appBasePath, string appRelativeSearchPath, bool shadowCopyFiles, AppDomainInitializer adInit, string[] adInitArgs); // 0x0027076C
	public int ExecuteAssemblyByName(string assemblyName); // 0x002707DC
	public int ExecuteAssemblyByName(string assemblyName, Evidence assemblySecurity); // 0x00270840
	public int ExecuteAssemblyByName(string assemblyName, Evidence assemblySecurity, string[] args); // 0x0027080C
	public int ExecuteAssemblyByName(AssemblyName assemblyName, Evidence assemblySecurity, string[] args); // 0x00270870
	public bool IsDefaultAppDomain(); // 0x002708A4
	public Assembly[] ReflectionOnlyGetAssemblies(); // 0x002708C8
}

// Namespace: System
public class AppDomainManager : MarshalByRefObject // TypeDefIndex: 1602
{
	// Fields
	private ApplicationActivator _activator; // 0x0C
	private AppDomainManagerInitializationOptions _flags; // 0x10

	// Properties
	public virtual ApplicationActivator ApplicationActivator { get; } // 0x00270CCC 
	public virtual Assembly EntryAssembly { get; } // 0x00270D4C 
	public virtual HostExecutionContextManager HostExecutionContextManager { get; } // 0x00270D54 
	public virtual HostSecurityManager HostSecurityManager { get; } // 0x00270DDC 
	public AppDomainManagerInitializationOptions InitializationFlags { get; set; } // 0x00270DE4 0x00270DEC

	// Constructors
	public AppDomainManager(); // 0x00270CAC

	// Methods
	public virtual AppDomain CreateDomain(string friendlyName, Evidence securityInfo, AppDomainSetup appDomainInfo); // 0x00270DF4
	public virtual void InitializeNewDomain(AppDomainSetup appDomainInfo); // 0x00270EEC
	public virtual bool CheckSecuritySettings(SecurityState state); // 0x00270EF0
	protected static AppDomain CreateDomainHelper(string friendlyName, Evidence securityInfo, AppDomainSetup appDomainInfo); // 0x00270EE8
}

// Namespace: System
[Serializable]
public sealed class AppDomainSetup // TypeDefIndex: 1603
{
	// Fields
	private string application_base; // 0x08
	private string application_name; // 0x0C
	private string cache_path; // 0x10
	private string configuration_file; // 0x14
	private string dynamic_base; // 0x18
	private string license_file; // 0x1C
	private string private_bin_path; // 0x20
	private string private_bin_path_probe; // 0x24
	private string shadow_copy_directories; // 0x28
	private string shadow_copy_files; // 0x2C
	private bool publisher_policy; // 0x30
	private bool path_changed; // 0x31
	private LoaderOptimization loader_optimization; // 0x34
	private bool disallow_binding_redirects; // 0x38
	private bool disallow_code_downloads; // 0x39
	private ActivationArguments _activationArguments; // 0x3C
	private AppDomainInitializer domain_initializer; // 0x40
	[NonSerialized]	private ApplicationTrust application_trust; // 0x44
	private string[] domain_initializer_args; // 0x48
	private SecurityElement application_trust_xml; // 0x4C
	private bool disallow_appbase_probe; // 0x50
	private byte[] configuration_bytes; // 0x54

	// Properties
	public string ApplicationBase { get; set; } // 0x0026C6E0 0x0027119C
	public string ApplicationName { get; set; } // 0x002711A4 0x002711AC
	public string CachePath { get; set; } // 0x002711B4 0x002711BC
	public string ConfigurationFile { get; set; } // 0x0026F8DC 0x002711C4
	public bool DisallowPublisherPolicy { get; set; } // 0x002711CC 0x002711D4
	public string DynamicBase { get; set; } // 0x0026C974 0x002711DC
	public string LicenseFile { get; set; } // 0x0027130C 0x00271314
	public LoaderOptimization LoaderOptimization { get; set; } // 0x0027131C 0x00271324
	public string PrivateBinPath { get; set; } // 0x0027132C 0x0026D200
	public string PrivateBinPathProbe { get; set; } // 0x00271334 0x0027133C
	public string ShadowCopyDirectories { get; set; } // 0x0027134C 0x00271354
	public string ShadowCopyFiles { get; set; } // 0x0027135C 0x00271364
	public bool DisallowBindingRedirects { get; set; } // 0x0027136C 0x00271374
	public bool DisallowCodeDownload { get; set; } // 0x0027137C 0x00271384
	public ActivationArguments ActivationArguments { get; set; } // 0x0027138C 0x00271394
	public AppDomainInitializer AppDomainInitializer { get; set; } // 0x0027139C 0x002713A4
	public string[] AppDomainInitializerArguments { get; set; } // 0x002713AC 0x002713B4
	public ApplicationTrust ApplicationTrust { get; set; } // 0x002713BC 0x00271450
	public bool DisallowApplicationBaseProbing { get; set; } // 0x002714B0 0x002714B8

	// Constructors
	public AppDomainSetup(); // 0x0026F8D4
	internal AppDomainSetup(AppDomainSetup setup); // 0x0026C370
	public AppDomainSetup(ActivationArguments activationArguments); // 0x00270EF8
	public AppDomainSetup(ActivationContext activationContext); // 0x00270F18

	// Methods
	private static string GetAppBase(string appBase); // 0x00270F9C
	public byte[] GetConfigurationBytes(); // 0x002714C0
	public void SetConfigurationBytes(byte[] value); // 0x0027153C
}

// Namespace: System
[Serializable]
public class AppDomainUnloadedException : SystemException // TypeDefIndex: 1604
{
	// Fields
	private const int Result = -2146234348; // 0x00

	// Constructors
	public AppDomainUnloadedException(); // 0x0026ED00
	public AppDomainUnloadedException(string message); // 0x00271544
	public AppDomainUnloadedException(string message, Exception innerException); // 0x00271568
	protected AppDomainUnloadedException(SerializationInfo info, StreamingContext context); // 0x0027158C

}

// Namespace: System
[Serializable]
public class ApplicationException : Exception // TypeDefIndex: 1605
{
	// Fields
	private const int Result = -2146232832; // 0x00

	// Constructors
	public ApplicationException(); // 0x002715AC
	public ApplicationException(string message); // 0x0027162C
	public ApplicationException(string message, Exception innerException); // 0x00271650
	protected ApplicationException(SerializationInfo info, StreamingContext context); // 0x00271674

}

// Namespace: System
[Serializable]
public sealed class ApplicationId // TypeDefIndex: 1606
{
	// Fields
	private byte[] _token; // 0x08
	private string _name; // 0x0C
	private Version _version; // 0x10
	private string _proc; // 0x14
	private string _culture; // 0x18

	// Properties
	public string Culture { get; } // 0x0027186C 
	public string Name { get; } // 0x00271874 
	public string ProcessorArchitecture { get; } // 0x0027187C 
	public byte[] PublicKeyToken { get; } // 0x00271884 
	public Version Version { get; } // 0x0027193C 

	// Constructors
	public ApplicationId(byte[] publicKeyToken, string name, Version version, string processorArchitecture, string culture); // 0x00271694

	// Methods
	public ApplicationId Copy(); // 0x00271944
	public override bool Equals(object o); // 0x002719DC
	public override int GetHashCode(); // 0x00271C78
	public override string ToString(); // 0x00271D3C
}

// Namespace: System
[Serializable]
public sealed class ApplicationIdentity : ISerializable // TypeDefIndex: 1607
{
	// Fields
	private string _fullName; // 0x08
	private string _codeBase; // 0x0C

	// Properties
	public string CodeBase { get; } // 0x00272134 
	public string FullName { get; } // 0x0027213C 

	// Constructors
	public ApplicationIdentity(string applicationIdentityFullName); // 0x00271F64

	// Methods
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00272090
	public override string ToString(); // 0x00272144
}

// Namespace: System
[Serializable]
public class ArgumentException : SystemException // TypeDefIndex: 1608
{
	// Fields
	private const int Result = -2147024809; // 0x00
	private string param_name; // 0x34

	// Properties
	public virtual string ParamName { get; } // 0x00272710 
	public override string Message { get; } // 0x00272718 

	// Constructors
	public ArgumentException(); // 0x00272590
	public ArgumentException(string message); // 0x00262270
	public ArgumentException(string message, Exception innerException); // 0x00272610
	public ArgumentException(string message, string paramName); // 0x0026B6A0
	public ArgumentException(string message, string paramName, Exception innerException); // 0x00272634
	protected ArgumentException(SerializationInfo info, StreamingContext context); // 0x00272664

	// Methods
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00272868
}

// Namespace: System
[Serializable]
public class ArgumentNullException : ArgumentException // TypeDefIndex: 1609
{
	// Fields
	private const int Result = -2147467261; // 0x00

	// Constructors
	public ArgumentNullException(); // 0x0027292C
	public ArgumentNullException(string paramName); // 0x00259CA0
	public ArgumentNullException(string paramName, string message); // 0x002729AC
	public ArgumentNullException(string message, Exception innerException); // 0x002729DC
	protected ArgumentNullException(SerializationInfo info, StreamingContext context); // 0x00272A00

}

// Namespace: System
[Serializable]
public class ArgumentOutOfRangeException : ArgumentException // TypeDefIndex: 1610
{
	// Fields
	private const int Result = -2146233086; // 0x00
	private object actual_value; // 0x38

	// Properties
	public virtual object ActualValue { get; } // 0x00272C50 
	public override string Message { get; } // 0x00272C58 

	// Constructors
	public ArgumentOutOfRangeException(); // 0x00272A18
	public ArgumentOutOfRangeException(string paramName); // 0x00272A98
	public ArgumentOutOfRangeException(string paramName, string message); // 0x00272B20
	public ArgumentOutOfRangeException(string paramName, object actualValue, string message); // 0x00272B50
	protected ArgumentOutOfRangeException(SerializationInfo info, StreamingContext context); // 0x00272B88
	public ArgumentOutOfRangeException(string message, Exception innerException); // 0x00272C2C

	// Methods
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00272D14
}

// Namespace: System
[Serializable]
public class ArithmeticException : SystemException // TypeDefIndex: 1611
{
	// Fields
	private const int Result = -2147024362; // 0x00

	// Constructors
	public ArithmeticException(); // 0x004EC7A4
	public ArithmeticException(string message); // 0x004EC824
	public ArithmeticException(string message, Exception innerException); // 0x004EC848
	protected ArithmeticException(SerializationInfo info, StreamingContext context); // 0x004EC86C

}

// Namespace: System
[Serializable]
public struct ArraySegment`1 // TypeDefIndex: 1612
{
	// Fields
	private T[] array; // 0x00
	private int offset; // 0x00
	private int count; // 0x00

	// Properties
	public T[] Array { get; }
	public int Offset { get; }
	public int Count { get; }

	// Constructors
	public ArraySegment`1(T[] array, int offset, int count);
	public ArraySegment`1(T[] array);

	// Methods
	public override bool Equals(object obj);
	public bool Equals(ArraySegment`1<T> obj);
	public override int GetHashCode();
	public static bool op_Equality(ArraySegment`1<T> a, ArraySegment`1<T> b);
	public static bool op_Inequality(ArraySegment`1<T> a, ArraySegment`1<T> b);
}

// Namespace: System
[Serializable]
public class ArrayTypeMismatchException : SystemException // TypeDefIndex: 1613
{
	// Fields
	private const int Result = -2146233085; // 0x00

	// Constructors
	public ArrayTypeMismatchException(); // 0x004F3C80
	public ArrayTypeMismatchException(string message); // 0x004F09F0
	public ArrayTypeMismatchException(string message, Exception innerException); // 0x004F3D00
	protected ArrayTypeMismatchException(SerializationInfo info, StreamingContext context); // 0x004F3D24

}

// Namespace: System
public class AssemblyLoadEventArgs : EventArgs // TypeDefIndex: 1614
{
	// Fields
	private Assembly m_loadedAssembly; // 0x08

	// Properties
	public Assembly LoadedAssembly { get; } // 0x004F3DD0 

	// Constructors
	public AssemblyLoadEventArgs(Assembly loadedAssembly); // 0x004F3D44

}

// Namespace: System
[Serializable]
public enum AttributeTargets // TypeDefIndex: 1615
{
	Assembly = 1,
	Module = 2,
	Class = 4,
	Struct = 8,
	Enum = 16,
	Constructor = 32,
	Method = 64,
	Property = 128,
	Field = 256,
	Event = 512,
	Interface = 1024,
	Parameter = 2048,
	Delegate = 4096,
	ReturnValue = 8192,
	GenericParameter = 16384,
	All = 32767
}

// Namespace: System
[Serializable]
public class BadImageFormatException : SystemException // TypeDefIndex: 1616
{
	// Fields
	private const int Result = -2147024885; // 0x00
	private string fileName; // 0x34
	private string fusionLog; // 0x38

	// Properties
	public override string Message { get; } // 0x004F5B54 
	public string FileName { get; } // 0x004F5CC0 
	public string FusionLog { get; } // 0x004F5CC8 

	// Constructors
	public BadImageFormatException(); // 0x004F5938
	public BadImageFormatException(string message); // 0x004F59B8
	protected BadImageFormatException(SerializationInfo info, StreamingContext context); // 0x004F59DC
	public BadImageFormatException(string message, Exception inner); // 0x004F5AD4
	public BadImageFormatException(string message, string fileName); // 0x004F5AF8
	public BadImageFormatException(string message, string fileName, Exception inner); // 0x004F5B24

	// Methods
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x004F5CD0
	public override string ToString(); // 0x004F5DB4
}

// Namespace: System
public enum Base64FormattingOptions // TypeDefIndex: 1617
{
	None = 0,
	InsertLineBreaks = 1
}

// Namespace: System
public static class BitConverter // TypeDefIndex: 1618
{
	// Fields
	private static readonly bool SwappedWordsInDouble; // 0x00
	public static readonly bool IsLittleEndian; // 0x01

	// Constructors
	private static BitConverter(); // 0x004F6004

	// Methods
	private static bool AmILittleEndian(); // 0x004F60C8
	private static bool DoubleWordsAreSwapped(); // 0x004F609C
	public static long DoubleToInt64Bits(double value); // 0x004F60D0
	public static double Int64BitsToDouble(long value); // 0x004F6430
	internal static double InternalInt64BitsToDouble(long value); // 0x004F68AC
	private static byte[] GetBytes(void * ptr, int count); // 0x004F6F04
	public static byte[] GetBytes(bool value); // 0x004F6FC4
	public static byte[] GetBytes(char value); // 0x004F7050
	public static byte[] GetBytes(short value); // 0x004F70DC
	public static byte[] GetBytes(int value); // 0x004F7168
	public static byte[] GetBytes(long value); // 0x004F64C0
	public static byte[] GetBytes(ushort value); // 0x004F71F4
	public static byte[] GetBytes(uint value); // 0x004F7280
	public static byte[] GetBytes(ulong value); // 0x004F730C
	public static byte[] GetBytes(float value); // 0x004F739C
	public static byte[] GetBytes(double value); // 0x004F6160
	private static void PutBytes(void * dst, byte[] src, int start_index, int count); // 0x004F7428
	public static bool ToBoolean(byte[] value, int startIndex); // 0x004F75E0
	public static char ToChar(byte[] value, int startIndex); // 0x004F7720
	public static short ToInt16(byte[] value, int startIndex); // 0x004F77C4
	public static int ToInt32(byte[] value, int startIndex); // 0x004F7868
	public static long ToInt64(byte[] value, int startIndex); // 0x004F6384
	public static ushort ToUInt16(byte[] value, int startIndex); // 0x004F790C
	public static uint ToUInt32(byte[] value, int startIndex); // 0x004F79B0
	public static ulong ToUInt64(byte[] value, int startIndex); // 0x004F7A54
	public static float ToSingle(byte[] value, int startIndex); // 0x004F7B00
	public static double ToDouble(byte[] value, int startIndex); // 0x004F6550
	internal static double SwappableToDouble(byte[] value, int startIndex); // 0x004F693C
	public static string ToString(byte[] value); // 0x004F7BA4
	public static string ToString(byte[] value, int startIndex); // 0x004F807C
	public static string ToString(byte[] value, int startIndex, int length); // 0x004F7C8C
}

// Namespace: System
public static class Buffer // TypeDefIndex: 1619
{
	// Methods
	public static int ByteLength(Array array); // 0x004F9240
	public static byte GetByte(Array array, int index); // 0x004F9354
	public static void SetByte(Array array, int index, byte value); // 0x004F9444
	public static void BlockCopy(Array src, int srcOffset, Array dst, int dstOffset, int count); // 0x004F953C
	private static int ByteLengthInternal(Array array); // 0x004F9350
	private static byte GetByteInternal(Array array, int index); // 0x004F9440
	private static void SetByteInternal(Array array, int index, int value); // 0x004F9538
	internal static bool BlockCopyInternal(Array src, int src_offset, Array dest, int dest_offset, int count); // 0x004F9830
}

// Namespace: System
[Serializable]
public class CannotUnloadAppDomainException : SystemException // TypeDefIndex: 1620
{
	// Fields
	private const int Result = -2146234347; // 0x00

	// Constructors
	public CannotUnloadAppDomainException(); // 0x004FA5A4
	public CannotUnloadAppDomainException(string message); // 0x004FA624
	protected CannotUnloadAppDomainException(SerializationInfo info, StreamingContext context); // 0x004FA648
	public CannotUnloadAppDomainException(string message, Exception innerException); // 0x004FA668

}

// Namespace: System
[Serializable]
public sealed class CharEnumerator : IEnumerator, IDisposable, ICloneable, IEnumerator`1<char> // TypeDefIndex: 1621
{
	// Fields
	private string str; // 0x08
	private int index; // 0x0C
	private int length; // 0x10

	// Properties
	private object System.Collections.IEnumerator.Current { get; } // 0x004FD57C 
	public char Current { get; } // 0x004FD5F8 

	// Constructors
	internal CharEnumerator(string s); // 0x004FD53C

	// Methods
	private void System.IDisposable.Dispose(); // 0x004FD6E4
	public object Clone(); // 0x004FD6E8
	public bool MoveNext(); // 0x004FD774
	public void Reset(); // 0x004FD798
}

// Namespace: System
public static class Console // TypeDefIndex: 1622
{
	// Fields
	internal static TextWriter stdout; // 0x00
	private static TextWriter stderr; // 0x04
	private static TextReader stdin; // 0x08
	private static Encoding inputEncoding; // 0x0C
	private static Encoding outputEncoding; // 0x10

	// Properties
	public static TextWriter Error { get; } // 0x00397F2C 
	public static TextWriter Out { get; } // 0x00397FB8 
	public static TextReader In { get; } // 0x00398044 
	public static Encoding InputEncoding { get; set; } // 0x0039A900 0x0039A98C
	public static Encoding OutputEncoding { get; set; } // 0x0039AA2C 0x0039AAB8

	// Constructors
	private static Console(); // 0x00397788

	// Methods
	private static void SetEncodings(Encoding inputEncoding, Encoding outputEncoding); // 0x003978F8
	public static Stream OpenStandardError(); // 0x003980D0
	private static Stream Open(IntPtr handle, FileAccess access, int bufferSize); // 0x0039814C
	public static Stream OpenStandardError(int bufferSize); // 0x00397CEC
	public static Stream OpenStandardInput(); // 0x003982A0
	public static Stream OpenStandardInput(int bufferSize); // 0x00397E6C
	public static Stream OpenStandardOutput(); // 0x0039831C
	public static Stream OpenStandardOutput(int bufferSize); // 0x00397DAC
	public static void SetError(TextWriter newError); // 0x00398398
	public static void SetIn(TextReader newIn); // 0x00398488
	public static void SetOut(TextWriter newOut); // 0x00398578
	public static void Write(bool value); // 0x00398668
	public static void Write(char value); // 0x00398720
	public static void Write(char[] buffer); // 0x003987D8
	public static void Write(Decimal value); // 0x00398890
	public static void Write(double value); // 0x0039896C
	public static void Write(int value); // 0x00398A38
	public static void Write(long value); // 0x00398AF0
	public static void Write(object value); // 0x00398BBC
	public static void Write(float value); // 0x00398C74
	public static void Write(string value); // 0x00398D2C
	public static void Write(uint value); // 0x00398DE4
	public static void Write(ulong value); // 0x00398E9C
	public static void Write(string format, object arg0); // 0x00398F68
	public static void Write(string format, object[] arg); // 0x00399028
	public static void Write(char[] buffer, int index, int count); // 0x003990E8
	public static void Write(string format, object arg0, object arg1); // 0x003991BC
	public static void Write(string format, object arg0, object arg1, object arg2); // 0x00399290
	public static void Write(string format, object arg0, object arg1, object arg2, object arg3); // 0x0039936C
	public static void WriteLine(); // 0x003996AC
	public static void WriteLine(bool value); // 0x0039975C
	public static void WriteLine(char value); // 0x00399814
	public static void WriteLine(char[] buffer); // 0x003998CC
	public static void WriteLine(Decimal value); // 0x00399984
	public static void WriteLine(double value); // 0x00399A60
	public static void WriteLine(int value); // 0x00399B2C
	public static void WriteLine(long value); // 0x00399BE4
	public static void WriteLine(object value); // 0x00399CB0
	public static void WriteLine(float value); // 0x00399D68
	public static void WriteLine(string value); // 0x00399E20
	public static void WriteLine(uint value); // 0x00399ED8
	public static void WriteLine(ulong value); // 0x00399F90
	public static void WriteLine(string format, object arg0); // 0x0039A05C
	public static void WriteLine(string format, object[] arg); // 0x0039A11C
	public static void WriteLine(char[] buffer, int index, int count); // 0x0039A1DC
	public static void WriteLine(string format, object arg0, object arg1); // 0x0039A2B0
	public static void WriteLine(string format, object arg0, object arg1, object arg2); // 0x0039A384
	public static void WriteLine(string format, object arg0, object arg1, object arg2, object arg3); // 0x0039A460
	public static int Read(); // 0x0039A7A0
	public static string ReadLine(); // 0x0039A850
}

// Namespace: System
[Serializable]
public sealed class ConsoleCancelEventArgs : EventArgs // TypeDefIndex: 1623
{
	// Fields
	private bool cancel; // 0x08
	private ConsoleSpecialKey specialKey; // 0x0C

	// Properties
	public bool Cancel { get; set; } // 0x0039ABE4 0x0039ABEC
	public ConsoleSpecialKey SpecialKey { get; } // 0x0039ABF4 

	// Constructors
	internal ConsoleCancelEventArgs(ConsoleSpecialKey key); // 0x0039AB58

}

// Namespace: System
[Serializable]
public enum ConsoleColor // TypeDefIndex: 1624
{
	Black = 0,
	DarkBlue = 1,
	DarkGreen = 2,
	DarkCyan = 3,
	DarkRed = 4,
	DarkMagenta = 5,
	DarkYellow = 6,
	Gray = 7,
	DarkGray = 8,
	Blue = 9,
	Green = 10,
	Cyan = 11,
	Red = 12,
	Magenta = 13,
	Yellow = 14,
	White = 15
}

// Namespace: System
[Serializable]
public enum ConsoleKey // TypeDefIndex: 1625
{
	Backspace = 8,
	Tab = 9,
	Clear = 12,
	Enter = 13,
	Pause = 19,
	Escape = 27,
	Spacebar = 32,
	PageUp = 33,
	PageDown = 34,
	End = 35,
	Home = 36,
	LeftArrow = 37,
	UpArrow = 38,
	RightArrow = 39,
	DownArrow = 40,
	Select = 41,
	Print = 42,
	Execute = 43,
	PrintScreen = 44,
	Insert = 45,
	Delete = 46,
	Help = 47,
	D0 = 48,
	D1 = 49,
	D2 = 50,
	D3 = 51,
	D4 = 52,
	D5 = 53,
	D6 = 54,
	D7 = 55,
	D8 = 56,
	D9 = 57,
	A = 65,
	B = 66,
	C = 67,
	D = 68,
	E = 69,
	F = 70,
	G = 71,
	H = 72,
	I = 73,
	J = 74,
	K = 75,
	L = 76,
	M = 77,
	N = 78,
	O = 79,
	P = 80,
	Q = 81,
	R = 82,
	S = 83,
	T = 84,
	U = 85,
	V = 86,
	W = 87,
	X = 88,
	Y = 89,
	Z = 90,
	LeftWindows = 91,
	RightWindows = 92,
	Applications = 93,
	Sleep = 95,
	NumPad0 = 96,
	NumPad1 = 97,
	NumPad2 = 98,
	NumPad3 = 99,
	NumPad4 = 100,
	NumPad5 = 101,
	NumPad6 = 102,
	NumPad7 = 103,
	NumPad8 = 104,
	NumPad9 = 105,
	Multiply = 106,
	Add = 107,
	Separator = 108,
	Subtract = 109,
	Decimal = 110,
	Divide = 111,
	F1 = 112,
	F2 = 113,
	F3 = 114,
	F4 = 115,
	F5 = 116,
	F6 = 117,
	F7 = 118,
	F8 = 119,
	F9 = 120,
	F10 = 121,
	F11 = 122,
	F12 = 123,
	F13 = 124,
	F14 = 125,
	F15 = 126,
	F16 = 127,
	F17 = 128,
	F18 = 129,
	F19 = 130,
	F20 = 131,
	F21 = 132,
	F22 = 133,
	F23 = 134,
	F24 = 135,
	BrowserBack = 166,
	BrowserForward = 167,
	BrowserRefresh = 168,
	BrowserStop = 169,
	BrowserSearch = 170,
	BrowserFavorites = 171,
	BrowserHome = 172,
	VolumeMute = 173,
	VolumeDown = 174,
	VolumeUp = 175,
	MediaNext = 176,
	MediaPrevious = 177,
	MediaStop = 178,
	MediaPlay = 179,
	LaunchMail = 180,
	LaunchMediaSelect = 181,
	LaunchApp1 = 182,
	LaunchApp2 = 183,
	Oem1 = 186,
	OemPlus = 187,
	OemComma = 188,
	OemMinus = 189,
	OemPeriod = 190,
	Oem2 = 191,
	Oem3 = 192,
	Oem4 = 219,
	Oem5 = 220,
	Oem6 = 221,
	Oem7 = 222,
	Oem8 = 223,
	Oem102 = 226,
	Process = 229,
	Packet = 231,
	Attention = 246,
	CrSel = 247,
	ExSel = 248,
	EraseEndOfFile = 249,
	Play = 250,
	Zoom = 251,
	NoName = 252,
	Pa1 = 253,
	OemClear = 254
}

// Namespace: System
[Serializable]
public struct ConsoleKeyInfo // TypeDefIndex: 1626
{
	// Fields
	internal static ConsoleKeyInfo Empty; // 0x00
	private ConsoleKey key; // 0x08
	private char keychar; // 0x0C
	private ConsoleModifiers modifiers; // 0x10

	// Properties
	public ConsoleKey Key { get; } // 0x000A7614 
	public char KeyChar { get; } // 0x000A761C 
	public ConsoleModifiers Modifiers { get; } // 0x000A7624 

	// Constructors
	public ConsoleKeyInfo(char keyChar, ConsoleKey key, bool shift, bool alt, bool control); // 0x000A75BC
	internal ConsoleKeyInfo(ConsoleKeyInfo other); // 0x000A75E4
	private static ConsoleKeyInfo(); // 0x0039B048

	// Methods
	internal void SetKey(ConsoleKey key); // 0x000A75F4
	internal void SetKeyChar(char keyChar); // 0x000A75FC
	internal void SetModifiers(bool shift, bool alt, bool control); // 0x000A7604
	public override bool Equals(object value); // 0x000A762C
	public bool Equals(ConsoleKeyInfo obj); // 0x000A7634
	public override int GetHashCode(); // 0x000A7674
	public static bool op_Equality(ConsoleKeyInfo a, ConsoleKeyInfo b); // 0x0039B328
	public static bool op_Inequality(ConsoleKeyInfo a, ConsoleKeyInfo b); // 0x0039B358
}

// Namespace: System
[Serializable]
public enum ConsoleModifiers // TypeDefIndex: 1627
{
	Alt = 1,
	Shift = 2,
	Control = 4
}

// Namespace: System
[Serializable]
public enum ConsoleSpecialKey // TypeDefIndex: 1628
{
	ControlC = 0,
	ControlBreak = 1
}

// Namespace: System
[Serializable]
public abstract class ContextBoundObject : MarshalByRefObject // TypeDefIndex: 1629
{
	// Constructors
	protected ContextBoundObject(); // 0x0039B388

}

// Namespace: System
[Serializable]
public class ContextMarshalException : SystemException // TypeDefIndex: 1630
{
	// Fields
	private const int Result = -2146233084; // 0x00

	// Constructors
	public ContextMarshalException(); // 0x0039B390
	public ContextMarshalException(string message); // 0x0039B410
	protected ContextMarshalException(SerializationInfo info, StreamingContext context); // 0x0039B434
	public ContextMarshalException(string message, Exception inner); // 0x0039B454

}

// Namespace: System
[Serializable]
public class ContextStaticAttribute : Attribute // TypeDefIndex: 1631
{
	// Constructors
	public ContextStaticAttribute(); // 0x0039B478

}

// Namespace: System
internal class ControlCharacters // TypeDefIndex: 1632
{
	// Fields
	public const int Intr = 0; // 0x00
	public const int Quit = 1; // 0x00
	public const int Erase = 2; // 0x00
	public const int Kill = 3; // 0x00
	public const int EOF = 4; // 0x00
	public const int Time = 5; // 0x00
	public const int Min = 6; // 0x00
	public const int SWTC = 7; // 0x00
	public const int Start = 8; // 0x00
	public const int Stop = 9; // 0x00
	public const int Susp = 10; // 0x00
	public const int EOL = 11; // 0x00
	public const int Reprint = 12; // 0x00
	public const int Discard = 13; // 0x00
	public const int WErase = 14; // 0x00
	public const int LNext = 15; // 0x00
	public const int EOL2 = 16; // 0x00

	// Constructors
	public ControlCharacters(); // 0x0039B480

}

// Namespace: System
public static class Convert // TypeDefIndex: 1633
{
	// Fields
	private const int MaxBytesPerLine = 57; // 0x00
	public static readonly object DBNull; // 0x00
	private static readonly Type[] conversionTable; // 0x04

	// Constructors
	private static Convert(); // 0x0039B488

	// Methods
	private static byte[] InternalFromBase64String(string str, bool allowWhitespaceOnly); // 0x0039BCCC
	private static byte[] InternalFromBase64CharArray(char[] arr, int offset, int length); // 0x0039BCD0
	public static byte[] FromBase64CharArray(char[] inArray, int offset, int length); // 0x0039BCD4
	public static byte[] FromBase64String(string s); // 0x0039BEB0
	public static TypeCode GetTypeCode(object value); // 0x0039BFBC
	public static bool IsDBNull(object value); // 0x0039C060
	public static int ToBase64CharArray(byte[] inArray, int offsetIn, int length, char[] outArray, int offsetOut); // 0x0039C0DC
	public static string ToBase64String(byte[] inArray); // 0x0039C380
	public static string ToBase64String(byte[] inArray, int offset, int length); // 0x0039C468
	public static string ToBase64String(byte[] inArray, Base64FormattingOptions options); // 0x0039C620
	public static string ToBase64String(byte[] inArray, int offset, int length, Base64FormattingOptions options); // 0x0039C718
	public static int ToBase64CharArray(byte[] inArray, int offsetIn, int length, char[] outArray, int offsetOut, Base64FormattingOptions options); // 0x0039CC14
	private static StringBuilder ToBase64StringBuilderWithLine(byte[] inArray, int offset, int length); // 0x0039C9A4
	public static bool ToBoolean(bool value); // 0x0039CF9C
	public static bool ToBoolean(byte value); // 0x0039CFA0
	public static bool ToBoolean(char value); // 0x0039CFAC
	public static bool ToBoolean(DateTime value); // 0x0039D054
	public static bool ToBoolean(Decimal value); // 0x0039D0FC
	public static bool ToBoolean(double value); // 0x0039D1C4
	public static bool ToBoolean(float value); // 0x0039D1DC
	public static bool ToBoolean(int value); // 0x0039D1F4
	public static bool ToBoolean(long value); // 0x0039D200
	public static bool ToBoolean(sbyte value); // 0x0039D20C
	public static bool ToBoolean(short value); // 0x0039D218
	public static bool ToBoolean(string value); // 0x0039D224
	public static bool ToBoolean(string value, IFormatProvider provider); // 0x0039D2B8
	public static bool ToBoolean(uint value); // 0x0039D34C
	public static bool ToBoolean(ulong value); // 0x0039D358
	public static bool ToBoolean(ushort value); // 0x0039D364
	public static bool ToBoolean(object value); // 0x0039D370
	public static bool ToBoolean(object value, IFormatProvider provider); // 0x0039D404
	public static byte ToByte(bool value); // 0x0039D544
	public static byte ToByte(byte value); // 0x0039D548
	public static byte ToByte(char value); // 0x0039D54C
	public static byte ToByte(DateTime value); // 0x0039D604
	public static byte ToByte(Decimal value); // 0x0039D6A0
	public static byte ToByte(double value); // 0x0039D8A8
	public static byte ToByte(float value); // 0x0039DAAC
	public static byte ToByte(int value); // 0x0039DCA0
	public static byte ToByte(long value); // 0x0039DD58
	public static byte ToByte(sbyte value); // 0x0039DE18
	public static byte ToByte(short value); // 0x0039DED0
	public static byte ToByte(string value); // 0x0039DF8C
	public static byte ToByte(string value, IFormatProvider provider); // 0x0039DFA0
	public static byte ToByte(string value, int fromBase); // 0x0039DFB4
	public static byte ToByte(uint value); // 0x0039E734
	public static byte ToByte(ulong value); // 0x0039E7EC
	public static byte ToByte(ushort value); // 0x0039E8AC
	public static byte ToByte(object value); // 0x0039E964
	public static byte ToByte(object value, IFormatProvider provider); // 0x0039E9F8
	public static char ToChar(bool value); // 0x0039EB38
	public static char ToChar(byte value); // 0x0039EBD4
	public static char ToChar(char value); // 0x0039EBD8
	public static char ToChar(DateTime value); // 0x0039EBDC
	public static char ToChar(Decimal value); // 0x0039EC78
	public static char ToChar(double value); // 0x0039ED14
	public static char ToChar(int value); // 0x0039EDB0
	public static char ToChar(long value); // 0x0039EE68
	public static char ToChar(float value); // 0x0039EF28
	public static char ToChar(sbyte value); // 0x0039EFC4
	public static char ToChar(short value); // 0x0039F07C
	public static char ToChar(string value); // 0x0039F134
	public static char ToChar(string value, IFormatProvider provider); // 0x0039F1B8
	public static char ToChar(uint value); // 0x0039F23C
	public static char ToChar(ulong value); // 0x0039F2F4
	public static char ToChar(ushort value); // 0x0039F3B4
	public static char ToChar(object value); // 0x0039F3B8
	public static char ToChar(object value, IFormatProvider provider); // 0x0039F44C
	public static DateTime ToDateTime(string value); // 0x0039F58C
	public static DateTime ToDateTime(string value, IFormatProvider provider); // 0x0039F660
	public static DateTime ToDateTime(bool value); // 0x0039F73C
	public static DateTime ToDateTime(byte value); // 0x0039F7D8
	public static DateTime ToDateTime(char value); // 0x0039F874
	public static DateTime ToDateTime(DateTime value); // 0x0039F910
	public static DateTime ToDateTime(Decimal value); // 0x0039F924
	public static DateTime ToDateTime(double value); // 0x0039F9C0
	public static DateTime ToDateTime(short value); // 0x0039FA5C
	public static DateTime ToDateTime(int value); // 0x0039FAF8
	public static DateTime ToDateTime(long value); // 0x0039FB94
	public static DateTime ToDateTime(float value); // 0x0039FC30
	public static DateTime ToDateTime(object value); // 0x0039FCCC
	public static DateTime ToDateTime(object value, IFormatProvider provider); // 0x0039FDB0
	public static DateTime ToDateTime(sbyte value); // 0x0039FF40
	public static DateTime ToDateTime(ushort value); // 0x0039FFDC
	public static DateTime ToDateTime(uint value); // 0x003A0078
	public static DateTime ToDateTime(ulong value); // 0x003A0114
	public static Decimal ToDecimal(bool value); // 0x003A01B0
	public static Decimal ToDecimal(byte value); // 0x003A023C
	public static Decimal ToDecimal(char value); // 0x003A02C8
	public static Decimal ToDecimal(DateTime value); // 0x003A0364
	public static Decimal ToDecimal(Decimal value); // 0x003A0400
	public static Decimal ToDecimal(double value); // 0x003A040C
	public static Decimal ToDecimal(float value); // 0x003A04AC
	public static Decimal ToDecimal(int value); // 0x003A0538
	public static Decimal ToDecimal(long value); // 0x003A05C4
	public static Decimal ToDecimal(sbyte value); // 0x003A0664
	public static Decimal ToDecimal(short value); // 0x003A06F0
	public static Decimal ToDecimal(string value); // 0x003A077C
	public static Decimal ToDecimal(string value, IFormatProvider provider); // 0x003A082C
	public static Decimal ToDecimal(uint value); // 0x003A08E4
	public static Decimal ToDecimal(ulong value); // 0x003A0970
	public static Decimal ToDecimal(ushort value); // 0x003A0A10
	public static Decimal ToDecimal(object value); // 0x003A0A9C
	public static Decimal ToDecimal(object value, IFormatProvider provider); // 0x003A0B4C
	public static double ToDouble(bool value); // 0x003A0CA8
	public static double ToDouble(byte value); // 0x003A0CC0
	public static double ToDouble(char value); // 0x003A0CD0
	public static double ToDouble(DateTime value); // 0x003A0D6C
	public static double ToDouble(Decimal value); // 0x003A0E08
	public static double ToDouble(double value); // 0x003A0EB0
	public static double ToDouble(float value); // 0x003A0EB4
	public static double ToDouble(int value); // 0x003A0EC4
	public static double ToDouble(long value); // 0x003A0ED4
	public static double ToDouble(sbyte value); // 0x003A0EE4
	public static double ToDouble(short value); // 0x003A0EF4
	public static double ToDouble(string value); // 0x003A0F04
	public static double ToDouble(string value, IFormatProvider provider); // 0x003A0F20
	public static double ToDouble(uint value); // 0x003A0F3C
	public static double ToDouble(ulong value); // 0x003A0F4C
	public static double ToDouble(ushort value); // 0x003A0F5C
	public static double ToDouble(object value); // 0x003A0F6C
	public static double ToDouble(object value, IFormatProvider provider); // 0x003A1004
	public static short ToInt16(bool value); // 0x003A1148
	public static short ToInt16(byte value); // 0x003A114C
	public static short ToInt16(char value); // 0x003A1150
	public static short ToInt16(DateTime value); // 0x003A1208
	public static short ToInt16(Decimal value); // 0x003A12A4
	public static short ToInt16(double value); // 0x003A14B0
	public static short ToInt16(float value); // 0x003A1640
	public static short ToInt16(int value); // 0x003A17BC
	public static short ToInt16(long value); // 0x003A1878
	public static short ToInt16(sbyte value); // 0x003A1940
	public static short ToInt16(short value); // 0x003A1944
	public static short ToInt16(string value); // 0x003A1948
	public static short ToInt16(string value, IFormatProvider provider); // 0x003A195C
	public static short ToInt16(string value, int fromBase); // 0x003A1970
	public static short ToInt16(uint value); // 0x003A1AD8
	public static short ToInt16(ulong value); // 0x003A1B90
	public static short ToInt16(ushort value); // 0x003A1C50
	public static short ToInt16(object value); // 0x003A1D08
	public static short ToInt16(object value, IFormatProvider provider); // 0x003A1D9C
	public static int ToInt32(bool value); // 0x003A1EDC
	public static int ToInt32(byte value); // 0x003A1EE0
	public static int ToInt32(char value); // 0x003A1EE4
	public static int ToInt32(DateTime value); // 0x003A1EE8
	public static int ToInt32(Decimal value); // 0x003A1F84
	public static int ToInt32(double value); // 0x003A2188
	public static int ToInt32(float value); // 0x003A2338
	public static int ToInt32(int value); // 0x003A24E0
	public static int ToInt32(long value); // 0x003A24E4
	public static int ToInt32(sbyte value); // 0x003A25A4
	public static int ToInt32(short value); // 0x003A25A8
	public static int ToInt32(string value); // 0x003A25AC
	public static int ToInt32(string value, IFormatProvider provider); // 0x003A25C0
	public static int ToInt32(string value, int fromBase); // 0x003A25D4
	public static int ToInt32(uint value); // 0x003A2660
	public static int ToInt32(ulong value); // 0x003A2718
	public static int ToInt32(ushort value); // 0x003A27D8
	public static int ToInt32(object value); // 0x003A27DC
	public static int ToInt32(object value, IFormatProvider provider); // 0x003A2870
	public static long ToInt64(bool value); // 0x003A29B0
	public static long ToInt64(byte value); // 0x003A29B8
	public static long ToInt64(char value); // 0x003A29C0
	public static long ToInt64(DateTime value); // 0x003A29C8
	public static long ToInt64(Decimal value); // 0x003A2A64
	public static long ToInt64(double value); // 0x003A2C88
	public static long ToInt64(float value); // 0x003A2E18
	public static long ToInt64(int value); // 0x003A2F94
	public static long ToInt64(long value); // 0x003A2F9C
	public static long ToInt64(sbyte value); // 0x003A2FA0
	public static long ToInt64(short value); // 0x003A2FA8
	public static long ToInt64(string value); // 0x003A2FB0
	public static long ToInt64(string value, IFormatProvider provider); // 0x003A2FC8
	public static long ToInt64(string value, int fromBase); // 0x003A2FE0
	public static long ToInt64(uint value); // 0x003A3730
	public static long ToInt64(ulong value); // 0x003A3738
	public static long ToInt64(ushort value); // 0x003A37F8
	public static long ToInt64(object value); // 0x003A3800
	public static long ToInt64(object value, IFormatProvider provider); // 0x003A3898
	public static sbyte ToSByte(bool value); // 0x003A39DC
	public static sbyte ToSByte(byte value); // 0x003A39E0
	public static sbyte ToSByte(char value); // 0x003A3A98
	public static sbyte ToSByte(DateTime value); // 0x003A3B50
	public static sbyte ToSByte(Decimal value); // 0x003A3BEC
	public static sbyte ToSByte(double value); // 0x003A3DF0
	public static sbyte ToSByte(float value); // 0x003A3F80
	public static sbyte ToSByte(int value); // 0x003A40FC
	public static sbyte ToSByte(long value); // 0x003A41B8
	public static sbyte ToSByte(sbyte value); // 0x003A4280
	public static sbyte ToSByte(short value); // 0x003A4284
	public static sbyte ToSByte(string value); // 0x003A4344
	public static sbyte ToSByte(string value, IFormatProvider provider); // 0x003A4358
	public static sbyte ToSByte(string value, int fromBase); // 0x003A4418
	public static sbyte ToSByte(uint value); // 0x003A4510
	public static sbyte ToSByte(ulong value); // 0x003A45C8
	public static sbyte ToSByte(ushort value); // 0x003A4688
	public static sbyte ToSByte(object value); // 0x003A4740
	public static sbyte ToSByte(object value, IFormatProvider provider); // 0x003A47D4
	public static float ToSingle(bool value); // 0x003A4914
	public static float ToSingle(byte value); // 0x003A4930
	public static float ToSingle(char value); // 0x003A4940
	public static float ToSingle(DateTime value); // 0x003A49DC
	public static float ToSingle(Decimal value); // 0x003A4A78
	public static float ToSingle(double value); // 0x003A4B20
	public static float ToSingle(float value); // 0x003A4B30
	public static float ToSingle(int value); // 0x003A4B34
	public static float ToSingle(long value); // 0x003A4B44
	public static float ToSingle(sbyte value); // 0x003A4B54
	public static float ToSingle(short value); // 0x003A4B64
	public static float ToSingle(string value); // 0x003A4B74
	public static float ToSingle(string value, IFormatProvider provider); // 0x003A4B88
	public static float ToSingle(uint value); // 0x003A4B9C
	public static float ToSingle(ulong value); // 0x003A4BB0
	public static float ToSingle(ushort value); // 0x003A4BCC
	public static float ToSingle(object value); // 0x003A4BDC
	public static float ToSingle(object value, IFormatProvider provider); // 0x003A4C70
	public static string ToString(bool value); // 0x003A4DB0
	public static string ToString(bool value, IFormatProvider provider); // 0x003A4DD4
	public static string ToString(byte value); // 0x003A4DF8
	public static string ToString(byte value, IFormatProvider provider); // 0x003A4E1C
	public static string ToString(byte value, int toBase); // 0x003A4E40
	public static string ToString(char value); // 0x003A56F0
	public static string ToString(char value, IFormatProvider provider); // 0x003A5714
	public static string ToString(DateTime value); // 0x003A5738
	public static string ToString(DateTime value, IFormatProvider provider); // 0x003A5758
	public static string ToString(Decimal value); // 0x003A5788
	public static string ToString(Decimal value, IFormatProvider provider); // 0x003A57A8
	public static string ToString(double value); // 0x003A57D8
	public static string ToString(double value, IFormatProvider provider); // 0x003A57F8
	public static string ToString(float value); // 0x003A581C
	public static string ToString(float value, IFormatProvider provider); // 0x003A5840
	public static string ToString(int value); // 0x003A5864
	public static string ToString(int value, int toBase); // 0x003A5888
	public static string ToString(int value, IFormatProvider provider); // 0x003A5A80
	public static string ToString(long value); // 0x003A5AA4
	public static string ToString(long value, int toBase); // 0x003A5AC4
	public static string ToString(long value, IFormatProvider provider); // 0x003A5CC8
	public static string ToString(object value); // 0x003A5CEC
	public static string ToString(object value, IFormatProvider provider); // 0x003A5D70
	public static string ToString(sbyte value); // 0x003A5F50
	public static string ToString(sbyte value, IFormatProvider provider); // 0x003A5F74
	public static string ToString(short value); // 0x003A5F98
	public static string ToString(short value, int toBase); // 0x003A5FBC
	public static string ToString(short value, IFormatProvider provider); // 0x003A61B4
	public static string ToString(string value); // 0x003A61D8
	public static string ToString(string value, IFormatProvider provider); // 0x003A61DC
	public static string ToString(uint value); // 0x003A61E0
	public static string ToString(uint value, IFormatProvider provider); // 0x003A6204
	public static string ToString(ulong value); // 0x003A6228
	public static string ToString(ulong value, IFormatProvider provider); // 0x003A6248
	public static string ToString(ushort value); // 0x003A626C
	public static string ToString(ushort value, IFormatProvider provider); // 0x003A6290
	public static ushort ToUInt16(bool value); // 0x003A62B4
	public static ushort ToUInt16(byte value); // 0x003A62B8
	public static ushort ToUInt16(char value); // 0x003A62BC
	public static ushort ToUInt16(DateTime value); // 0x003A62C0
	public static ushort ToUInt16(Decimal value); // 0x003A635C
	public static ushort ToUInt16(double value); // 0x003A6560
	public static ushort ToUInt16(float value); // 0x003A66E8
	public static ushort ToUInt16(int value); // 0x003A6860
	public static ushort ToUInt16(long value); // 0x003A6918
	public static ushort ToUInt16(sbyte value); // 0x003A69D8
	public static ushort ToUInt16(short value); // 0x003A6A90
	public static ushort ToUInt16(string value); // 0x003A6B48
	public static ushort ToUInt16(string value, IFormatProvider provider); // 0x003A6B5C
	public static ushort ToUInt16(string value, int fromBase); // 0x003A6B70
	public static ushort ToUInt16(uint value); // 0x003A6C00
	public static ushort ToUInt16(ulong value); // 0x003A6CB8
	public static ushort ToUInt16(ushort value); // 0x003A6D78
	public static ushort ToUInt16(object value); // 0x003A6D7C
	public static ushort ToUInt16(object value, IFormatProvider provider); // 0x003A6E10
	public static uint ToUInt32(bool value); // 0x003A6F50
	public static uint ToUInt32(byte value); // 0x003A6F54
	public static uint ToUInt32(char value); // 0x003A6F58
	public static uint ToUInt32(DateTime value); // 0x003A6F5C
	public static uint ToUInt32(Decimal value); // 0x003A6FF8
	public static uint ToUInt32(double value); // 0x003A7210
	public static uint ToUInt32(float value); // 0x003A7390
	public static uint ToUInt32(int value); // 0x003A7504
	public static uint ToUInt32(long value); // 0x003A75BC
	public static uint ToUInt32(sbyte value); // 0x003A7678
	public static uint ToUInt32(short value); // 0x003A7730
	public static uint ToUInt32(string value); // 0x003A77E8
	public static uint ToUInt32(string value, IFormatProvider provider); // 0x003A77FC
	public static uint ToUInt32(string value, int fromBase); // 0x003A7810
	public static uint ToUInt32(uint value); // 0x003A789C
	public static uint ToUInt32(ulong value); // 0x003A78A0
	public static uint ToUInt32(ushort value); // 0x003A795C
	public static uint ToUInt32(object value); // 0x003A7960
	public static uint ToUInt32(object value, IFormatProvider provider); // 0x003A79F4
	public static ulong ToUInt64(bool value); // 0x003A7B34
	public static ulong ToUInt64(byte value); // 0x003A7B3C
	public static ulong ToUInt64(char value); // 0x003A7B44
	public static ulong ToUInt64(DateTime value); // 0x003A7B4C
	public static ulong ToUInt64(Decimal value); // 0x003A7BE8
	public static ulong ToUInt64(double value); // 0x003A7E00
	public static ulong ToUInt64(float value); // 0x003A7F80
	public static ulong ToUInt64(int value); // 0x003A80F4
	public static ulong ToUInt64(long value); // 0x003A81B0
	public static ulong ToUInt64(sbyte value); // 0x003A8270
	public static ulong ToUInt64(short value); // 0x003A8320
	public static ulong ToUInt64(string value); // 0x003A83DC
	public static ulong ToUInt64(string value, IFormatProvider provider); // 0x003A83F4
	public static ulong ToUInt64(string value, int fromBase); // 0x003A840C
	public static ulong ToUInt64(uint value); // 0x003A8498
	public static ulong ToUInt64(ulong value); // 0x003A84A0
	public static ulong ToUInt64(ushort value); // 0x003A84A4
	public static ulong ToUInt64(object value); // 0x003A84AC
	public static ulong ToUInt64(object value, IFormatProvider provider); // 0x003A8544
	public static object ChangeType(object value, Type conversionType); // 0x003A8688
	public static object ChangeType(object value, TypeCode typeCode); // 0x003A9E0C
	public static object ChangeType(object value, Type conversionType, IFormatProvider provider); // 0x003A9FDC
	public static object ChangeType(object value, TypeCode typeCode, IFormatProvider provider); // 0x003AA0E0
	private static bool NotValidBase(int value); // 0x003AA1C4
	private static int ConvertFromBase(string value, int fromBase, bool unsigned); // 0x0039E08C
	private static long ConvertFromBase64(string value, int fromBase, bool unsigned); // 0x003A306C
	private static void EndianSwap(byte[] value); // 0x003AA1F4
	private static string ConvertToBase2(byte[] value); // 0x003A5038
	private static string ConvertToBase8(byte[] value); // 0x003A5204
	private static string ConvertToBase16(byte[] value); // 0x003A5488
	internal static object ToType(object value, Type conversionType, IFormatProvider provider, bool try_target_to_type); // 0x003A8848
}

// Namespace: System
[Serializable]
public sealed class DBNull : IConvertible, ISerializable // TypeDefIndex: 1634
{
	// Fields
	public static readonly DBNull Value; // 0x00

	// Constructors
	private DBNull(); // 0x004AC578
	private DBNull(SerializationInfo info, StreamingContext context); // 0x004AC580
	private static DBNull(); // 0x004AC618

	// Methods
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x004AC68C
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x004AC714
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x004AC79C
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x004AC824
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x004AC8AC
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x004AC934
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x004AC9BC
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x004ACA44
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x004ACACC
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x004ACB54
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x004ACBDC
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x004ACC64
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x004ACDE0
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x004ACE68
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x004ACEF0
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x004ACF78
	public TypeCode GetTypeCode(); // 0x004ACF98
	public override string ToString(); // 0x004ACFA0
	public string ToString(IFormatProvider provider); // 0x004AD02C
}

// Namespace: System
[Serializable]
public sealed class DataMisalignedException : SystemException // TypeDefIndex: 1635
{
	// Fields
	private const int Result = -2146233023; // 0x00

	// Constructors
	public DataMisalignedException(); // 0x004AD0B8
	public DataMisalignedException(string message); // 0x004AD138
	public DataMisalignedException(string message, Exception innerException); // 0x004AD15C

}

// Namespace: System
[Serializable]
public struct DateTime : IFormattable, IConvertible, IComparable, IComparable`1<DateTime>, IEquatable`1<DateTime> // TypeDefIndex: 1636
{
	// Fields
	private const int dp400 = 146097; // 0x00
	private const int dp100 = 36524; // 0x00
	private const int dp4 = 1461; // 0x00
	private const long w32file_epoch = 504911232000000000; // 0x00
	private const long MAX_VALUE_TICKS = 3155378975999999999; // 0x00
	internal const long UnixEpoch = 621355968000000000; // 0x00
	private const long ticks18991230 = 599264352000000000; // 0x00
	private const double OAMinValue = -657435; // 0x00
	private const double OAMaxValue = 2958466; // 0x00
	private const string formatExceptionMessage = "String was not recognized as a valid DateTime."; // 0x00
	private TimeSpan ticks; // 0x08
	private DateTimeKind kind; // 0x10
	public static readonly DateTime MaxValue; // 0x00
	public static readonly DateTime MinValue; // 0x10
	private static readonly string[] ParseTimeFormats; // 0x20
	private static readonly string[] ParseYearDayMonthFormats; // 0x24
	private static readonly string[] ParseYearMonthDayFormats; // 0x28
	private static readonly string[] ParseDayMonthYearFormats; // 0x2C
	private static readonly string[] ParseMonthDayYearFormats; // 0x30
	private static readonly string[] MonthDayShortFormats; // 0x34
	private static readonly string[] DayMonthShortFormats; // 0x38
	private static readonly int[] daysmonth; // 0x3C
	private static readonly int[] daysmonthleap; // 0x40
	private static object to_local_time_span_object; // 0x44
	private static long last_now; // 0x48

	// Properties
	public DateTime Date { get; } // 0x000A8C28 
	public int Month { get; } // 0x000A8C3C 
	public int Day { get; } // 0x000A8C48 
	public DayOfWeek DayOfWeek { get; } // 0x000A8C54 
	public int DayOfYear { get; } // 0x000A8C8C 
	public TimeSpan TimeOfDay { get; } // 0x000A8C98 
	public int Hour { get; } // 0x000A8CC8 
	public int Minute { get; } // 0x000A8CD4 
	public int Second { get; } // 0x000A8CE0 
	public int Millisecond { get; } // 0x000A8CEC 
	public static DateTime Now { get; } // 0x004AC2AC 
	public long Ticks { get; } // 0x000A8CF8 
	public static DateTime Today { get; } // 0x004B0A58 
	public static DateTime UtcNow { get; } // 0x004B0B5C 
	public int Year { get; } // 0x000A8D00 
	public DateTimeKind Kind { get; } // 0x000A8D0C 

	// Constructors
	public DateTime(long ticks); // 0x000A8894
	public DateTime(int year, int month, int day); // 0x000A88B0
	public DateTime(int year, int month, int day, int hour, int minute, int second); // 0x000A88E0
	public DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond); // 0x000A8918
	public DateTime(int year, int month, int day, Calendar calendar); // 0x000A8954
	public DateTime(int year, int month, int day, int hour, int minute, int second, Calendar calendar); // 0x000A898C
	public DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, Calendar calendar); // 0x000A89D0
	internal DateTime(bool check, TimeSpan value); // 0x000A8A10
	public DateTime(long ticks, DateTimeKind kind); // 0x000A8A2C
	public DateTime(int year, int month, int day, int hour, int minute, int second, DateTimeKind kind); // 0x000A8A5C
	public DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind); // 0x000A8AA8
	public DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, Calendar calendar, DateTimeKind kind); // 0x000A8AF4
	private static DateTime(); // 0x004ADBE8

	// Methods
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x000A8B38
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x000A8B48
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x000A8B58
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x000A8B68
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x000A8B78
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x000A8B88
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x000A8B98
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x000A8BA8
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x000A8BB8
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x000A8BC8
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x000A8BD8
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x000A8BE8
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x000A8BF0
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x000A8C00
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x000A8C10
	private static int AbsoluteDays(int year, int month, int day); // 0x004AD57C
	private int FromTicks(Which what); // 0x000A8C20
	internal static long GetTimeMonotonic(); // 0x004B0970
	internal static long GetNow(); // 0x004B0974
	public DateTime Add(TimeSpan value); // 0x000A8D14
	public DateTime AddDays(double value); // 0x000A8D54
	public DateTime AddTicks(long value); // 0x000A8D70
	public DateTime AddHours(double value); // 0x000A8D90
	public DateTime AddMilliseconds(double value); // 0x000A8DC8
	private DateTime AddRoundedMilliseconds(double ms); // 0x000A8DE4
	public DateTime AddMinutes(double value); // 0x000A8E00
	public DateTime AddMonths(int months); // 0x000A8E38
	public DateTime AddSeconds(double value); // 0x000A8E50
	public DateTime AddYears(int value); // 0x000A8E88
	public static int Compare(DateTime t1, DateTime t2); // 0x004B1320
	public int CompareTo(object value); // 0x000A8EA4
	public bool IsDaylightSavingTime(); // 0x000A8EAC
	public int CompareTo(DateTime value); // 0x000A8EB4
	public bool Equals(DateTime value); // 0x000A8EDC
	public long ToBinary(); // 0x000A8F04
	public static DateTime FromBinary(long dateData); // 0x004B1904
	public static DateTime SpecifyKind(DateTime value, DateTimeKind kind); // 0x004B1B24
	public static int DaysInMonth(int year, int month); // 0x004AD3A8
	public override bool Equals(object value); // 0x000A8F0C
	public static bool Equals(DateTime t1, DateTime t2); // 0x004B1C3C
	public static DateTime FromFileTime(long fileTime); // 0x004B1CE4
	public static DateTime FromFileTimeUtc(long fileTime); // 0x004B1DEC
	public static DateTime FromOADate(double d); // 0x004B1EE0
	public string[] GetDateTimeFormats(); // 0x000A8F14
	public string[] GetDateTimeFormats(char format); // 0x000A8F1C
	public string[] GetDateTimeFormats(IFormatProvider provider); // 0x000A8F24
	public string[] GetDateTimeFormats(char format, IFormatProvider provider); // 0x000A8F2C
	private string[] GetDateTimeFormats(bool adjustutc, string[] patterns, DateTimeFormatInfo dfi); // 0x000A8F34
	private void CheckDateTimeKind(DateTimeKind kind); // 0x000A8F50
	public override int GetHashCode(); // 0x000A8F54
	public TypeCode GetTypeCode(); // 0x000A8F5C
	public static bool IsLeapYear(int year); // 0x004B0510
	public static DateTime Parse(string s); // 0x004B299C
	public static DateTime Parse(string s, IFormatProvider provider); // 0x004B2A28
	public static DateTime Parse(string s, IFormatProvider provider, DateTimeStyles styles); // 0x004B2AC4
	internal static bool CoreParse(string s, IFormatProvider provider, DateTimeStyles styles, out DateTime result, out DateTimeOffset dto, bool setExceptionOnError, Exception exception); // 0x004B2C30
	public static DateTime ParseExact(string s, string format, IFormatProvider provider); // 0x004B7078
	private static string[] YearMonthDayFormats(DateTimeFormatInfo dfi, bool setExceptionOnError, Exception exc); // 0x004B397C
	private static int _ParseNumber(string s, int valuePos, int min_digits, int digits, bool leadingzero, bool sloppy_parsing, out int num_parsed); // 0x004B729C
	private static int _ParseEnum(string s, int sPos, string[] values, string[] invValues, bool exact, out int num_parsed); // 0x004B748C
	private static bool _ParseString(string s, int sPos, int maxlength, string value, out int num_parsed); // 0x004B78B0
	private static bool _ParseAmPm(string s, int valuePos, int num, DateTimeFormatInfo dfi, bool exact, out int num_parsed, int ampm); // 0x004B79F4
	private static bool _ParseTimeSeparator(string s, int sPos, DateTimeFormatInfo dfi, bool exact, out int num_parsed); // 0x004B7E5C
	private static bool _ParseDateSeparator(string s, int sPos, DateTimeFormatInfo dfi, bool exact, out int num_parsed); // 0x004B7F74
	private static bool IsLetter(string s, int pos); // 0x004B7DA0
	private static bool _DoParse(string s, string firstPart, string secondPart, bool exact, out DateTime result, out DateTimeOffset dto, DateTimeFormatInfo dfi, DateTimeStyles style, bool firstPartIsDate, bool incompleteFormat, bool longYear); // 0x004B3E18
	public static DateTime ParseExact(string s, string format, IFormatProvider provider, DateTimeStyles style); // 0x004B7120
	public static DateTime ParseExact(string s, string[] formats, IFormatProvider provider, DateTimeStyles style); // 0x004B89BC
	private static void CheckStyle(DateTimeStyles style); // 0x004B8C34
	public static bool TryParse(string s, out DateTime result); // 0x004B8D50
	public static bool TryParse(string s, IFormatProvider provider, DateTimeStyles styles, out DateTime result); // 0x004B8F00
	public static bool TryParseExact(string s, string format, IFormatProvider provider, DateTimeStyles style, out DateTime result); // 0x004B90B8
	public static bool TryParseExact(string s, string[] formats, IFormatProvider provider, DateTimeStyles style, out DateTime result); // 0x004B91DC
	private static bool ParseExact(string s, string[] formats, DateTimeFormatInfo dfi, DateTimeStyles style, out DateTime ret, bool exact, bool longYear, bool setExceptionOnError, Exception exception); // 0x004B6DF4
	public TimeSpan Subtract(DateTime value); // 0x000A8F64
	public DateTime Subtract(TimeSpan value); // 0x000A8F8C
	public long ToFileTime(); // 0x000A8FA8
	public long ToFileTimeUtc(); // 0x000A8FB0
	public string ToLongDateString(); // 0x000A8FB8
	public string ToLongTimeString(); // 0x000A8FC0
	public double ToOADate(); // 0x000A8FC8
	public string ToShortDateString(); // 0x000A8FD0
	public string ToShortTimeString(); // 0x000A8FD8
	public override string ToString(); // 0x000A8FE0
	public string ToString(IFormatProvider provider); // 0x000A8FE8
	public string ToString(string format); // 0x000A8FF8
	public string ToString(string format, IFormatProvider provider); // 0x000A9004
	public DateTime ToLocalTime(); // 0x000A900C
	public DateTime ToUniversalTime(); // 0x000A9020
	public static DateTime op_Addition(DateTime d, TimeSpan t); // 0x004B0978
	public static bool op_Equality(DateTime d1, DateTime d2); // 0x004B9C60
	public static bool op_GreaterThan(DateTime t1, DateTime t2); // 0x004B9D08
	public static bool op_GreaterThanOrEqual(DateTime t1, DateTime t2); // 0x004B9DB0
	public static bool op_Inequality(DateTime d1, DateTime d2); // 0x004B815C
	public static bool op_LessThan(DateTime t1, DateTime t2); // 0x004B9E58
	public static bool op_LessThanOrEqual(DateTime t1, DateTime t2); // 0x004B9F00
	public static TimeSpan op_Subtraction(DateTime d1, DateTime d2); // 0x004B9FA8
	public static DateTime op_Subtraction(DateTime d, TimeSpan t); // 0x004BA060
}

// Namespace: 
private enum Which // TypeDefIndex: 1637
{
	Day = 0,
	DayYear = 1,
	Month = 2,
	Year = 3
}

// Namespace: System
[Serializable]
public enum DateTimeKind // TypeDefIndex: 1638
{
	Unspecified = 0,
	Utc = 1,
	Local = 2
}

// Namespace: System
[Serializable]
public struct DateTimeOffset : IFormattable, IComparable, ISerializable, IComparable`1<DateTimeOffset>, IEquatable`1<DateTimeOffset>, IDeserializationCallback // TypeDefIndex: 1639
{
	// Fields
	public static readonly DateTimeOffset MaxValue; // 0x00
	public static readonly DateTimeOffset MinValue; // 0x18
	private DateTime dt; // 0x08
	private TimeSpan utc_offset; // 0x18

	// Properties
	public DateTime Date { get; } // 0x000A9470 
	public DateTime DateTime { get; } // 0x000A9484 
	public int Day { get; } // 0x000A9498 
	public DayOfWeek DayOfWeek { get; } // 0x000A94A4 
	public int DayOfYear { get; } // 0x000A94DC 
	public int Hour { get; } // 0x000A94E8 
	public DateTime LocalDateTime { get; } // 0x000A94F4 
	public int Millisecond { get; } // 0x000A9530 
	public int Minute { get; } // 0x000A953C 
	public int Month { get; } // 0x000A9548 
	public static DateTimeOffset Now { get; } // 0x004C058C 
	public TimeSpan Offset { get; } // 0x000A9554 
	public int Second { get; } // 0x000A9560 
	public long Ticks { get; } // 0x000A956C 
	public TimeSpan TimeOfDay { get; } // 0x000A9574 
	public DateTime UtcDateTime { get; } // 0x000A95A4 
	public static DateTimeOffset UtcNow { get; } // 0x004C068C 
	public long UtcTicks { get; } // 0x000A95B8 
	public int Year { get; } // 0x000A95DC 

	// Constructors
	public DateTimeOffset(DateTime dateTime); // 0x000A9034
	public DateTimeOffset(DateTime dateTime, TimeSpan offset); // 0x000A905C
	public DateTimeOffset(long ticks, TimeSpan offset); // 0x000A908C
	public DateTimeOffset(int year, int month, int day, int hour, int minute, int second, TimeSpan offset); // 0x000A90B4
	public DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, TimeSpan offset); // 0x000A90F4
	public DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, Calendar calendar, TimeSpan offset); // 0x000A913C
	private DateTimeOffset(SerializationInfo info, StreamingContext context); // 0x000A9184
	private static DateTimeOffset(); // 0x004BA578

	// Methods
	private int System.IComparable.CompareTo(object obj); // 0x000A91A0
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x000A91A8
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender); // 0x000A91C4
	public DateTimeOffset Add(TimeSpan timeSpan); // 0x000A91C8
	public DateTimeOffset AddDays(double days); // 0x000A91E4
	public DateTimeOffset AddHours(double hours); // 0x000A9200
	public DateTimeOffset AddMilliseconds(double milliseconds); // 0x000A921C
	public DateTimeOffset AddMinutes(double minutes); // 0x000A9238
	public DateTimeOffset AddMonths(int months); // 0x000A9254
	public DateTimeOffset AddSeconds(double seconds); // 0x000A9268
	public DateTimeOffset AddTicks(long ticks); // 0x000A9284
	public DateTimeOffset AddYears(int years); // 0x000A92A0
	public static int Compare(DateTimeOffset first, DateTimeOffset second); // 0x004BAE38
	public int CompareTo(DateTimeOffset other); // 0x000A92B4
	public bool Equals(DateTimeOffset other); // 0x000A92E4
	public override bool Equals(object obj); // 0x000A9314
	public static bool Equals(DateTimeOffset first, DateTimeOffset second); // 0x004BB0D0
	public bool EqualsExact(DateTimeOffset other); // 0x000A931C
	public static DateTimeOffset FromFileTime(long fileTime); // 0x004BB260
	public override int GetHashCode(); // 0x000A934C
	public static DateTimeOffset Parse(string input); // 0x004BB494
	public static DateTimeOffset Parse(string input, IFormatProvider formatProvider); // 0x004BB520
	public static DateTimeOffset Parse(string input, IFormatProvider formatProvider, DateTimeStyles styles); // 0x004BB5BC
	public static DateTimeOffset ParseExact(string input, string format, IFormatProvider formatProvider); // 0x004BB790
	public static DateTimeOffset ParseExact(string input, string format, IFormatProvider formatProvider, DateTimeStyles styles); // 0x004BB838
	public static DateTimeOffset ParseExact(string input, string[] formats, IFormatProvider formatProvider, DateTimeStyles styles); // 0x004BBA50
	private static bool ParseExact(string input, string[] formats, DateTimeFormatInfo dfi, DateTimeStyles styles, out DateTimeOffset ret); // 0x004BBD94
	private static bool DoParse(string input, string format, bool exact, out DateTimeOffset result, DateTimeFormatInfo dfi, DateTimeStyles styles); // 0x004BBFE0
	private static int ParseNumber(string input, int pos, int digits, bool leading_zero, bool allow_leading_white, out int result); // 0x004BDD58
	private static int ParseNumber(string input, int pos, int digits, bool leading_zero, bool allow_leading_white, out int result, out int digit_parsed); // 0x004BDF9C
	private static int ParseEnum(string input, int pos, string[] enums, bool allow_leading_white, out int result); // 0x004BDE18
	private static int ParseChar(string input, int pos, char c, bool allow_leading_white, out int result); // 0x004BE178
	public TimeSpan Subtract(DateTimeOffset value); // 0x000A936C
	public DateTimeOffset Subtract(TimeSpan value); // 0x000A93A8
	public long ToFileTime(); // 0x000A93C4
	public DateTimeOffset ToLocalTime(); // 0x000A93F8
	public DateTimeOffset ToOffset(TimeSpan offset); // 0x000A940C
	public override string ToString(); // 0x000A9428
	public string ToString(IFormatProvider formatProvider); // 0x000A9438
	public string ToString(string format); // 0x000A9448
	public string ToString(string format, IFormatProvider formatProvider); // 0x000A9454
	public DateTimeOffset ToUniversalTime(); // 0x000A945C
	public static bool TryParse(string input, out DateTimeOffset result); // 0x004BFDC4
	public static bool TryParse(string input, IFormatProvider formatProvider, DateTimeStyles styles, out DateTimeOffset result); // 0x004BFF44
	public static bool TryParseExact(string input, string format, IFormatProvider formatProvider, DateTimeStyles styles, out DateTimeOffset result); // 0x004C00D4
	public static bool TryParseExact(string input, string[] formats, IFormatProvider formatProvider, DateTimeStyles styles, out DateTimeOffset result); // 0x004C026C
	public static DateTimeOffset op_Addition(DateTimeOffset dateTimeTz, TimeSpan timeSpan); // 0x004C0774
	public static bool op_Equality(DateTimeOffset left, DateTimeOffset right); // 0x004C07C0
	public static bool op_GreaterThan(DateTimeOffset left, DateTimeOffset right); // 0x004C0820
	public static bool op_GreaterThanOrEqual(DateTimeOffset left, DateTimeOffset right); // 0x004C0930
	public static DateTimeOffset op_Implicit(DateTime dateTime); // 0x004C0A40
	public static bool op_Inequality(DateTimeOffset left, DateTimeOffset right); // 0x004C0A7C
	public static bool op_LessThan(DateTimeOffset left, DateTimeOffset right); // 0x004C0B8C
	public static bool op_LessThanOrEqual(DateTimeOffset left, DateTimeOffset right); // 0x004C0C9C
	public static TimeSpan op_Subtraction(DateTimeOffset left, DateTimeOffset right); // 0x004C0DAC
	public static DateTimeOffset op_Subtraction(DateTimeOffset dateTimeTz, TimeSpan timeSpan); // 0x004C0E14
}

// Namespace: System
internal static class DateTimeUtils // TypeDefIndex: 1640
{
	// Methods
	public static int CountRepeat(string fmt, int p, char c); // 0x004BDCE8
	public static void ZeroPad(StringBuilder output, int digits, int len); // 0x004C0E60
	public static int ParseQuotedString(string fmt, int pos, StringBuilder output); // 0x004C0F80
	public static string GetStandardPattern(char format, DateTimeFormatInfo dfi, out bool useutc, out bool use_invariant); // 0x004B813C
	public static string GetStandardPattern(char format, DateTimeFormatInfo dfi, out bool useutc, out bool use_invariant, bool date_time_offset); // 0x004BD8EC
	public static string ToString(DateTime dt, string format, DateTimeFormatInfo dfi); // 0x004B2954
	public static string ToString(DateTime dt, Nullable`1<TimeSpan> utc_offset, string format, DateTimeFormatInfo dfi); // 0x004BEB7C
}

// Namespace: System
[Serializable]
public enum DayOfWeek // TypeDefIndex: 1641
{
	Sunday = 0,
	Monday = 1,
	Tuesday = 2,
	Wednesday = 3,
	Thursday = 4,
	Friday = 5,
	Saturday = 6
}

// Namespace: System
internal class DelegateData // TypeDefIndex: 1642
{
	// Fields
	public Type target_type; // 0x08
	public string method_name; // 0x0C

	// Constructors
	public DelegateData(); // 0x004C84B0

}

// Namespace: System
[Serializable]
internal class DelegateSerializationHolder : ISerializable, IObjectReference // TypeDefIndex: 1643
{
	// Fields
	private Delegate _delegate; // 0x08

	// Constructors
	private DelegateSerializationHolder(SerializationInfo info, StreamingContext ctx); // 0x004CA538

	// Methods
	public static void GetDelegateData(Delegate instance, SerializationInfo info, StreamingContext ctx); // 0x004C9E4C
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x004CAC7C
	public object GetRealObject(StreamingContext context); // 0x004CAD04
}

// Namespace: 
[Serializable]
private class DelegateEntry // TypeDefIndex: 1644
{
	// Fields
	private string type; // 0x08
	private string assembly; // 0x0C
	public object target; // 0x10
	private string targetTypeAssembly; // 0x14
	private string targetTypeName; // 0x18
	private string methodName; // 0x1C
	public DelegateEntry delegateEntry; // 0x20

	// Constructors
	public DelegateEntry(Delegate del, string targetLabel); // 0x004CAA5C

	// Methods
	public Delegate DeserializeDelegate(SerializationInfo info); // 0x004CA79C
}

// Namespace: System
[Serializable]
public class DivideByZeroException : ArithmeticException // TypeDefIndex: 1645
{
	// Fields
	private const int Result = -2147352558; // 0x00

	// Constructors
	public DivideByZeroException(); // 0x002D5BC8
	public DivideByZeroException(string message); // 0x002D5C48
	public DivideByZeroException(string message, Exception innerException); // 0x002D5C6C
	protected DivideByZeroException(SerializationInfo info, StreamingContext context); // 0x002D5C90

}

// Namespace: System
[Serializable]
public class DllNotFoundException : TypeLoadException // TypeDefIndex: 1646
{
	// Fields
	private const int Result = -2146233052; // 0x00

	// Constructors
	public DllNotFoundException(); // 0x002D5CB0
	public DllNotFoundException(string message); // 0x002D5D30
	protected DllNotFoundException(SerializationInfo info, StreamingContext context); // 0x002D5D54
	public DllNotFoundException(string message, Exception inner); // 0x002D5D74

}

// Namespace: System
public enum AppDomainManagerInitializationOptions // TypeDefIndex: 1647
{
	None = 0,
	RegisterWithHost = 1
}

// Namespace: System
[Serializable]
public class DuplicateWaitObjectException : ArgumentException // TypeDefIndex: 1648
{
	// Fields
	private const int Result = -2146233047; // 0x00

	// Constructors
	public DuplicateWaitObjectException(); // 0x002D84B8
	public DuplicateWaitObjectException(string parameterName); // 0x002D8538
	public DuplicateWaitObjectException(string parameterName, string message); // 0x002D85C0
	public DuplicateWaitObjectException(string message, Exception innerException); // 0x002D85F0
	protected DuplicateWaitObjectException(SerializationInfo info, StreamingContext context); // 0x002D8614

}

// Namespace: System
[Serializable]
public class EntryPointNotFoundException : TypeLoadException // TypeDefIndex: 1649
{
	// Fields
	private const int Result = -2146233053; // 0x00

	// Constructors
	public EntryPointNotFoundException(); // 0x002D8634
	public EntryPointNotFoundException(string message); // 0x002D86B4
	protected EntryPointNotFoundException(SerializationInfo info, StreamingContext context); // 0x002D86D8
	public EntryPointNotFoundException(string message, Exception inner); // 0x002D86F8

}

// Namespace: System
internal struct MonoEnumInfo // TypeDefIndex: 1650
{
	// Fields
	internal Type utype; // 0x08
	internal Array values; // 0x0C
	internal string[] names; // 0x10
	internal Hashtable name_hash; // 0x14
	private static Hashtable cache; // 0x80000000
	private static Hashtable global_cache; // 0x00
	private static object global_cache_monitor; // 0x04
	internal static SByteComparer sbyte_comparer; // 0x08
	internal static ShortComparer short_comparer; // 0x0C
	internal static IntComparer int_comparer; // 0x10
	internal static LongComparer long_comparer; // 0x14

	// Properties
	private static Hashtable Cache { get; } // 0x001E4834 

	// Constructors
	private MonoEnumInfo(MonoEnumInfo other); // 0x0008BA90
	private static MonoEnumInfo(); // 0x001E46B4

	// Methods
	private static void get_enum_info(Type enumType, out MonoEnumInfo info); // 0x001E4830
	internal static void GetInfo(Type enumType, out MonoEnumInfo info); // 0x001E4970
}

// Namespace: 
internal class SByteComparer : IComparer`1<sbyte>, IComparer // TypeDefIndex: 1651
{
	// Constructors
	public SByteComparer(); // 0x001E4810

	// Methods
	public int Compare(object x, object y); // 0x001E54DC
	public int Compare(sbyte ix, sbyte iy); // 0x001E55D0
}

// Namespace: 
internal class ShortComparer : IComparer`1<short>, IComparer // TypeDefIndex: 1652
{
	// Constructors
	public ShortComparer(); // 0x001E4818

	// Methods
	public int Compare(object x, object y); // 0x001E55E0
	public int Compare(short ix, short iy); // 0x001E56D4
}

// Namespace: 
internal class IntComparer : IComparer`1<int>, IComparer // TypeDefIndex: 1653
{
	// Constructors
	public IntComparer(); // 0x001E4820

	// Methods
	public int Compare(object x, object y); // 0x001E5268
	public int Compare(int ix, int iy); // 0x001E5370
}

// Namespace: 
internal class LongComparer : IComparer`1<long>, IComparer // TypeDefIndex: 1654
{
	// Constructors
	public LongComparer(); // 0x001E4828

	// Methods
	public int Compare(object x, object y); // 0x001E5388
	public int Compare(long ix, long iy); // 0x001E54A4
}

// Namespace: System
public static class Environment // TypeDefIndex: 1655
{
	// Fields
	private const int mono_corlib_version = 82; // 0x00
	private static OperatingSystem os; // 0x00

	// Properties
	public static string CommandLine { get; } // 0x002DDCE8 
	public static string CurrentDirectory { get; set; } // 0x002DDD84 0x002DDD8C
	public static int ExitCode { get; set; } // 0x002DDD94 0x002DDD98
	public static bool HasShutdownStarted { get; } // 0x002DDD9C 
	public static string EmbeddingHostName { get; } // 0x002DDDA0 
	public static bool SocketSecurityEnabled { get; } // 0x002DDDA4 
	public static bool UnityWebSecurityEnabled { get; } // 0x002DDDA8 
	public static string MachineName { get; } // 0x002DDDAC 
	public static string NewLine { get; } // 0x002D5AC4 
	internal static PlatformID Platform { get; } // 0x002DDDB0 
	public static OperatingSystem OSVersion { get; } // 0x002DDDB8 
	public static string StackTrace { get; } // 0x002DDE84 
	public static int TickCount { get; } // 0x002DDF20 
	public static string UserDomainName { get; } // 0x002DDF24 
	public static bool UserInteractive { get; } // 0x002DDF28 
	public static string UserName { get; } // 0x002DDF30 
	public static Version Version { get; } // 0x002DDF34 
	public static long WorkingSet { get; } // 0x002DDFB4 
	public static int ProcessorCount { get; } // 0x002E03DC 
	internal static bool IsRunningOnWindows { get; } // 0x002DE330 

	// Methods
	internal static string GetOSVersionString(); // 0x002DDDB4
	public static void Exit(int exitCode); // 0x002DDFC0
	public static string ExpandEnvironmentVariables(string name); // 0x002DDFC4
	public static string[] GetCommandLineArgs(); // 0x002DDD80
	internal static string internalGetEnvironmentVariable(string variable); // 0x002DE534
	public static string GetEnvironmentVariable(string variable); // 0x002DE32C
	private static Hashtable GetEnvironmentVariablesNoCase(); // 0x002DE350
	public static IDictionary GetEnvironmentVariables(); // 0x002DE53C
	private static string GetWindowsFolderPath(int folder); // 0x002DE638
	public static string GetFolderPath(SpecialFolder folder); // 0x002DE63C
	private static string ReadXdgUserDir(string config_dir, string home_dir, string key, string fallback); // 0x002DEA98
	internal static string InternalGetFolderPath(SpecialFolder folder); // 0x002DE66C
	public static string[] GetLogicalDrives(); // 0x002DF09C
	private static void internalBroadcastSettingChange(); // 0x002DF0A4
	public static string GetEnvironmentVariable(string variable, EnvironmentVariableTarget target); // 0x002DF0A8
	public static IDictionary GetEnvironmentVariables(EnvironmentVariableTarget target); // 0x002DF594
	public static void SetEnvironmentVariable(string variable, string value); // 0x002DFC94
	public static void SetEnvironmentVariable(string variable, string value, EnvironmentVariableTarget target); // 0x002DFC9C
	internal static void InternalSetEnvironmentVariable(string variable, string value); // 0x002E0350
	public static void FailFast(string message); // 0x002E0354
	private static string[] GetLogicalDrivesInternal(); // 0x002DF0A0
	private static string[] GetEnvironmentVariableNames(); // 0x002DE538
	internal static string GetMachineConfigPath(); // 0x002E03E0
	internal static string internalGetHome(); // 0x002DF098
}

// Namespace: 
public enum SpecialFolder // TypeDefIndex: 1656
{
	Desktop = 0,
	Programs = 2,
	MyDocuments = 5,
	Personal = 5,
	Favorites = 6,
	Startup = 7,
	Recent = 8,
	SendTo = 9,
	StartMenu = 11,
	MyMusic = 13,
	DesktopDirectory = 16,
	MyComputer = 17,
	Templates = 21,
	ApplicationData = 26,
	LocalApplicationData = 28,
	InternetCache = 32,
	Cookies = 33,
	History = 34,
	CommonApplicationData = 35,
	System = 37,
	ProgramFiles = 38,
	MyPictures = 39,
	CommonProgramFiles = 43
}

// Namespace: System
public enum EnvironmentVariableTarget // TypeDefIndex: 1657
{
	Process = 0,
	User = 1,
	Machine = 2
}

// Namespace: System
[Serializable]
public class EventArgs // TypeDefIndex: 1658
{
	// Fields
	public static readonly EventArgs Empty; // 0x00

	// Constructors
	public EventArgs(); // 0x002E03E4
	private static EventArgs(); // 0x002E03EC

}

// Namespace: System
[Serializable]
public sealed class ExecutionEngineException : SystemException // TypeDefIndex: 1659
{
	// Constructors
	public ExecutionEngineException(); // 0x002E2284
	public ExecutionEngineException(string message); // 0x002E22F8
	public ExecutionEngineException(string message, Exception innerException); // 0x002E2300
	internal ExecutionEngineException(SerializationInfo info, StreamingContext context); // 0x002E2308

}

// Namespace: System
[Serializable]
public class FieldAccessException : MemberAccessException // TypeDefIndex: 1660
{
	// Fields
	private const int Result = -2146233081; // 0x00

	// Constructors
	public FieldAccessException(); // 0x002E2328
	public FieldAccessException(string message); // 0x002E23A8
	protected FieldAccessException(SerializationInfo info, StreamingContext context); // 0x002E23CC
	public FieldAccessException(string message, Exception inner); // 0x002E23EC

}

// Namespace: System
[Serializable]
public class FlagsAttribute : Attribute // TypeDefIndex: 1661
{
	// Constructors
	public FlagsAttribute(); // 0x002E2410

}

// Namespace: System
[Serializable]
public class FormatException : SystemException // TypeDefIndex: 1662
{
	// Fields
	private const int Result = -2146233033; // 0x00

	// Constructors
	public FormatException(); // 0x002D807C
	public FormatException(string message); // 0x002D8208
	public FormatException(string message, Exception innerException); // 0x002E2418
	protected FormatException(SerializationInfo info, StreamingContext context); // 0x002E243C

}

// Namespace: System
public static class GC // TypeDefIndex: 1663
{
	// Properties
	public static int MaxGeneration { get; } // 0x002E245C 

	// Methods
	private static void InternalCollect(int generation); // 0x002E2460
	public static void Collect(); // 0x002E2464
	public static void Collect(int generation); // 0x002E2478
	public static void Collect(int generation, GCCollectionMode mode); // 0x002E252C
	public static int GetGeneration(object obj); // 0x002E2530
	public static int GetGeneration(WeakReference wo); // 0x002E2534
	public static long GetTotalMemory(bool forceFullCollection); // 0x002E25F4
	public static void KeepAlive(object obj); // 0x002E25F8
	public static void ReRegisterForFinalize(object obj); // 0x002E25FC
	public static void SuppressFinalize(object obj); // 0x002E2600
	public static void WaitForPendingFinalizers(); // 0x002E2604
	public static int CollectionCount(int generation); // 0x002E2608
	private static void RecordPressure(long bytesAllocated); // 0x002E260C
	public static void AddMemoryPressure(long bytesAllocated); // 0x002E2610
	public static void RemoveMemoryPressure(long bytesAllocated); // 0x002E2614
}

// Namespace: System
[Serializable]
public enum GCCollectionMode // TypeDefIndex: 1664
{
	Default = 0,
	Forced = 1,
	Optimized = 2
}

// Namespace: System
public enum GCNotificationStatus // TypeDefIndex: 1665
{
	Succeeded = 0,
	Failed = 1,
	Canceled = 2,
	Timeout = 3,
	NotApplicable = 4
}

// Namespace: System
[Serializable]
public struct Guid : IFormattable, IComparable, IComparable`1<Guid>, IEquatable`1<Guid> // TypeDefIndex: 1666
{
	// Fields
	private int _a; // 0x08
	private short _b; // 0x0C
	private short _c; // 0x0E
	private byte _d; // 0x10
	private byte _e; // 0x11
	private byte _f; // 0x12
	private byte _g; // 0x13
	private byte _h; // 0x14
	private byte _i; // 0x15
	private byte _j; // 0x16
	private byte _k; // 0x17
	public static readonly Guid Empty; // 0x00
	private static object _rngAccess; // 0x10
	private static RandomNumberGenerator _rng; // 0x14
	private static RandomNumberGenerator _fastRng; // 0x18

	// Constructors
	public Guid(byte[] b); // 0x000A82C0
	public Guid(string g); // 0x000A82C8
	public Guid(int a, short b, short c, byte[] d); // 0x000A82D0
	public Guid(int a, short b, short c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k); // 0x000A82F4
	public Guid(uint a, ushort b, ushort c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k); // 0x000A834C
	private static Guid(); // 0x0048084C

	// Methods
	private static void CheckNull(object o); // 0x00480384
	private static void CheckLength(byte[] o, int l); // 0x00480978
	private static void CheckArray(byte[] o, int l); // 0x004801F8
	private static int Compare(int x, int y); // 0x00480AAC
	public int CompareTo(object value); // 0x000A83A4
	public override bool Equals(object o); // 0x000A83AC
	public int CompareTo(Guid value); // 0x000A83B4
	public bool Equals(Guid g); // 0x000A83D8
	public override int GetHashCode(); // 0x000A840C
	private static char ToHex(int b); // 0x0048100C
	public static Guid NewGuid(); // 0x00481024
	internal static byte[] FastNewGuidArray(); // 0x00481274
	public byte[] ToByteArray(); // 0x000A8414
	private static void AppendInt(StringBuilder builder, int value); // 0x00481904
	private static void AppendShort(StringBuilder builder, short value); // 0x00481B1C
	private static void AppendByte(StringBuilder builder, byte value); // 0x00481C68
	private string BaseToString(bool h, bool p, bool b); // 0x000A841C
	public override string ToString(); // 0x000A8438
	public string ToString(string format); // 0x000A8460
	public string ToString(string format, IFormatProvider provider); // 0x000A8468
	public static bool op_Equality(Guid a, Guid b); // 0x00482380
	public static bool op_Inequality(Guid a, Guid b); // 0x004823DC
}

// Namespace: 
internal class GuidParser // TypeDefIndex: 1667
{
	// Fields
	private string _src; // 0x08
	private int _length; // 0x0C
	private int _cur; // 0x10

	// Constructors
	public GuidParser(string src); // 0x00480438

	// Methods
	private void Reset(); // 0x00482430
	private bool AtEnd(); // 0x00482464
	private void ThrowFormatException(); // 0x0048247C
	private ulong ParseHex(int length, bool strictLength); // 0x00482524
	private bool ParseOptChar(char c); // 0x004826A0
	private void ParseChar(char c); // 0x00482708
	private Guid ParseGuid1(); // 0x00482724
	private void ParseHexPrefix(); // 0x004829B0
	private Guid ParseGuid2(); // 0x004829E8
	public Guid Parse(); // 0x00480478
}

// Namespace: System
public interface IAppDomainSetup // TypeDefIndex: 1668
{
	// Properties
	string ApplicationBase { get; set; }
	string ApplicationName { get; set; }
	string CachePath { get; set; }
	string ConfigurationFile { get; set; }
	string DynamicBase { get; set; }
	string LicenseFile { get; set; }
	string PrivateBinPath { get; set; }
	string PrivateBinPathProbe { get; set; }
	string ShadowCopyDirectories { get; set; }
	string ShadowCopyFiles { get; set; }

}

// Namespace: System
internal interface IConsoleDriver // TypeDefIndex: 1669
{
	// Properties
	ConsoleColor BackgroundColor { get; set; }
	int BufferHeight { get; set; }
	int BufferWidth { get; set; }
	bool CapsLock { get; }
	int CursorLeft { get; set; }
	int CursorSize { get; set; }
	int CursorTop { get; set; }
	bool CursorVisible { get; set; }
	ConsoleColor ForegroundColor { get; set; }
	bool KeyAvailable { get; }
	bool Initialized { get; }
	int LargestWindowHeight { get; }
	int LargestWindowWidth { get; }
	bool NumberLock { get; }
	string Title { get; set; }
	bool TreatControlCAsInput { get; set; }
	int WindowHeight { get; set; }
	int WindowLeft { get; set; }
	int WindowTop { get; set; }
	int WindowWidth { get; set; }

	// Methods
	void Init();
	void Beep(int frequency, int duration);
	void Clear();
	void MoveBufferArea(int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop, char sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor);
	ConsoleKeyInfo ReadKey(bool intercept);
	void ResetColor();
	void SetBufferSize(int width, int height);
	void SetCursorPosition(int left, int top);
	void SetWindowPosition(int left, int top);
	void SetWindowSize(int width, int height);
	string ReadLine();
}

// Namespace: System
public interface ICustomFormatter // TypeDefIndex: 1670
{
	// Methods
	string Format(string format, object arg, IFormatProvider formatProvider);
}

// Namespace: System
public interface IFormatProvider // TypeDefIndex: 1671
{
	// Methods
	object GetFormat(Type formatType);
}

// Namespace: System
public interface IServiceProvider // TypeDefIndex: 1672
{
	// Methods
	object GetService(Type serviceType);
}

// Namespace: System
[Serializable]
public sealed class IndexOutOfRangeException : SystemException // TypeDefIndex: 1673
{
	// Constructors
	public IndexOutOfRangeException(); // 0x001D6CA4
	public IndexOutOfRangeException(string message); // 0x001D5CDC
	public IndexOutOfRangeException(string message, Exception innerException); // 0x001D6D18
	internal IndexOutOfRangeException(SerializationInfo info, StreamingContext context); // 0x001D6D20

}

// Namespace: System
[Serializable]
public sealed class InsufficientMemoryException : OutOfMemoryException // TypeDefIndex: 1674
{
	// Constructors
	public InsufficientMemoryException(); // 0x001D6D40
	public InsufficientMemoryException(string message); // 0x001D6DA8
	public InsufficientMemoryException(string message, Exception innerException); // 0x001D6DB0

}

// Namespace: System
[Serializable]
public class InvalidCastException : SystemException // TypeDefIndex: 1675
{
	// Fields
	private const int Result = -2147467262; // 0x00

	// Constructors
	public InvalidCastException(); // 0x001DDAB4
	public InvalidCastException(string message); // 0x001DDB34
	public InvalidCastException(string message, Exception innerException); // 0x001DDB58
	public InvalidCastException(string message, int errorCode); // 0x001DDB7C
	protected InvalidCastException(SerializationInfo info, StreamingContext context); // 0x001DDB9C

}

// Namespace: System
[Serializable]
public class InvalidOperationException : SystemException // TypeDefIndex: 1676
{
	// Fields
	private const int Result = -2146233079; // 0x00

	// Constructors
	public InvalidOperationException(); // 0x001DDBBC
	public InvalidOperationException(string message); // 0x001DDC3C
	public InvalidOperationException(string message, Exception innerException); // 0x001DDC60
	protected InvalidOperationException(SerializationInfo info, StreamingContext context); // 0x001DDC84

}

// Namespace: System
[Serializable]
public sealed class InvalidProgramException : SystemException // TypeDefIndex: 1677
{
	// Constructors
	public InvalidProgramException(); // 0x001DDCA4
	public InvalidProgramException(string message); // 0x001DDD18
	public InvalidProgramException(string message, Exception inner); // 0x001DDD20
	internal InvalidProgramException(SerializationInfo info, StreamingContext context); // 0x001DDD28

}

// Namespace: System
internal static class KnownTerminals // TypeDefIndex: 1678
{
	// Properties
	public static byte[] linux { get; } // 0x001DDD48 
	public static byte[] xterm { get; } // 0x001DDDCC 
	public static byte[] ansi { get; } // 0x001DDE50 

}

// Namespace: System
[Serializable]
public enum LoaderOptimization // TypeDefIndex: 1679
{
	NotSpecified = 0,
	SingleDomain = 1,
	MultiDomain = 2,
	MultiDomainHost = 3,
	DomainMask = 3,
	DisallowBindings = 4
}

// Namespace: System
public sealed class LoaderOptimizationAttribute : Attribute // TypeDefIndex: 1680
{
	// Fields
	private LoaderOptimization lo; // 0x08

	// Properties
	public LoaderOptimization Value { get; } // 0x001DDF14 

	// Constructors
	public LoaderOptimizationAttribute(byte value); // 0x001DDED4
	public LoaderOptimizationAttribute(LoaderOptimization value); // 0x001DDEF4

}

// Namespace: System
public sealed class LocalDataStoreSlot // TypeDefIndex: 1681
{
	// Fields
	internal int slot; // 0x08
	internal bool thread_local; // 0x0C
	private static object lock_obj; // 0x00
	private static bool[] slot_bitmap_thread; // 0x04
	private static bool[] slot_bitmap_context; // 0x08

	// Constructors
	internal LocalDataStoreSlot(bool in_thread); // 0x001DDF1C
	private static LocalDataStoreSlot(); // 0x001DE260

	// Methods
	protected override void Finalize(); // 0x001DE2E0
}

// Namespace: System
public sealed class MTAThreadAttribute : Attribute // TypeDefIndex: 1682
{
	// Constructors
	public MTAThreadAttribute(); // 0x001DE5D4

}

// Namespace: System
public static class Math // TypeDefIndex: 1683
{
	// Fields
	public const double E = 2.718281828459045; // 0x00
	public const double PI = 3.141592653589793; // 0x00

	// Methods
	public static Decimal Abs(Decimal value); // 0x001DE938
	public static double Abs(double value); // 0x001DEA7C
	public static float Abs(float value); // 0x001DEA9C
	public static int Abs(int value); // 0x001DEAB8
	public static long Abs(long value); // 0x001DEB7C
	public static sbyte Abs(sbyte value); // 0x001DEC4C
	public static short Abs(short value); // 0x001DED10
	public static Decimal Ceiling(Decimal d); // 0x001DEDD4
	public static double Ceiling(double a); // 0x001DEFD0
	public static long BigMul(int a, int b); // 0x001DF008
	public static int DivRem(int a, int b, out int result); // 0x001DF010
	public static long DivRem(long a, long b, out long result); // 0x001DF028
	public static double Floor(double d); // 0x001DF048
	public static double IEEERemainder(double x, double y); // 0x001DF050
	public static double Log(double a, double newBase); // 0x001DF1D0
	public static byte Max(byte val1, byte val2); // 0x001DF21C
	public static Decimal Max(Decimal val1, Decimal val2); // 0x001DF228
	public static double Max(double val1, double val2); // 0x001DF338
	public static float Max(float val1, float val2); // 0x001DF3B8
	public static int Max(int val1, int val2); // 0x001CE9B8
	public static long Max(long val1, long val2); // 0x001DF420
	public static sbyte Max(sbyte val1, sbyte val2); // 0x001DF448
	public static short Max(short val1, short val2); // 0x001DF454
	public static uint Max(uint val1, uint val2); // 0x001DF460
	public static ulong Max(ulong val1, ulong val2); // 0x001DF46C
	public static ushort Max(ushort val1, ushort val2); // 0x001DF494
	public static byte Min(byte val1, byte val2); // 0x001DF4A0
	public static Decimal Min(Decimal val1, Decimal val2); // 0x001DF4AC
	public static double Min(double val1, double val2); // 0x001DF5C0
	public static float Min(float val1, float val2); // 0x001DF640
	public static int Min(int val1, int val2); // 0x001DF6A8
	public static long Min(long val1, long val2); // 0x001DF6B4
	public static sbyte Min(sbyte val1, sbyte val2); // 0x001DF6DC
	public static short Min(short val1, short val2); // 0x001DF6E8
	public static uint Min(uint val1, uint val2); // 0x001DF6F4
	public static ulong Min(ulong val1, ulong val2); // 0x001DF700
	public static ushort Min(ushort val1, ushort val2); // 0x001DF728
	public static Decimal Round(Decimal d); // 0x001DF734
	public static Decimal Round(Decimal d, int decimals); // 0x001DFB60
	public static Decimal Round(Decimal d, MidpointRounding mode); // 0x001DFC14
	private static Decimal RoundAwayFromZero(Decimal d); // 0x001DFDA0
	public static Decimal Round(Decimal d, int decimals, MidpointRounding mode); // 0x001E0188
	public static double Round(double a); // 0x001E0244
	public static double Round(double value, int digits); // 0x001E02F4
	private static double Round2(double value, int digits, bool away_from_zero); // 0x001E0480
	public static double Round(double value, MidpointRounding mode); // 0x001E0484
	public static double Round(double value, int digits, MidpointRounding mode); // 0x001E06AC
	public static double Truncate(double d); // 0x001E0830
	public static Decimal Truncate(Decimal d); // 0x001E0878
	public static Decimal Floor(Decimal d); // 0x001DEF20
	public static int Sign(Decimal value); // 0x001E0928
	public static int Sign(double value); // 0x001E0A78
	public static int Sign(float value); // 0x001E0B6C
	public static int Sign(int value); // 0x001E0C58
	public static int Sign(long value); // 0x001E0C6C
	public static int Sign(sbyte value); // 0x001E0C88
	public static int Sign(short value); // 0x001E0C9C
	public static double Sin(double a); // 0x001E0CB0
	public static double Cos(double d); // 0x001E0CB4
	public static double Tan(double a); // 0x001E0CB8
	public static double Sinh(double value); // 0x001E0CBC
	public static double Cosh(double value); // 0x001E0CC0
	public static double Tanh(double value); // 0x001E0CC4
	public static double Acos(double d); // 0x001E0CC8
	public static double Asin(double d); // 0x001E0CCC
	public static double Atan(double d); // 0x001E0CD0
	public static double Atan2(double y, double x); // 0x001E0CD4
	public static double Exp(double d); // 0x001E0CD8
	public static double Log(double d); // 0x001E0CDC
	public static double Log10(double d); // 0x001E0CE0
	public static double Pow(double x, double y); // 0x001E0CE4
	public static double Sqrt(double d); // 0x001E0CE8
}

// Namespace: System
[Serializable]
public class MemberAccessException : SystemException // TypeDefIndex: 1684
{
	// Fields
	private const int Result = -2146233062; // 0x00

	// Constructors
	public MemberAccessException(); // 0x001E0D04
	public MemberAccessException(string message); // 0x001E0D84
	protected MemberAccessException(SerializationInfo info, StreamingContext context); // 0x001E0DA8
	public MemberAccessException(string message, Exception inner); // 0x001E0DC8

}

// Namespace: System
[Serializable]
public class MethodAccessException : MemberAccessException // TypeDefIndex: 1685
{
	// Fields
	private const int Result = -2146233072; // 0x00

	// Constructors
	public MethodAccessException(); // 0x001E0DEC
	public MethodAccessException(string message); // 0x001E0E6C
	protected MethodAccessException(SerializationInfo info, StreamingContext context); // 0x001E0E90
	public MethodAccessException(string message, Exception inner); // 0x001E0EB0

}

// Namespace: System
public enum MidpointRounding // TypeDefIndex: 1686
{
	ToEven = 0,
	AwayFromZero = 1
}

// Namespace: System
[Serializable]
public class MissingFieldException : MissingMemberException // TypeDefIndex: 1687
{
	// Fields
	private const int Result = -2146233071; // 0x00

	// Properties
	public override string Message { get; } // 0x001E121C 

	// Constructors
	public MissingFieldException(); // 0x001E0ED4
	public MissingFieldException(string message); // 0x001E0F78
	protected MissingFieldException(SerializationInfo info, StreamingContext context); // 0x001E0F9C
	public MissingFieldException(string message, Exception inner); // 0x001E1174
	public MissingFieldException(string className, string fieldName); // 0x001E11BC

}

// Namespace: System
[Serializable]
public class MissingMemberException : MemberAccessException // TypeDefIndex: 1688
{
	// Fields
	private const int Result = -2146233070; // 0x00
	protected string ClassName; // 0x34
	protected string MemberName; // 0x38
	protected byte[] Signature; // 0x3C

	// Properties
	public override string Message { get; } // 0x001E12E4 

	// Constructors
	public MissingMemberException(); // 0x001E13B0
	public MissingMemberException(string message); // 0x001E0F54
	public MissingMemberException(string message, Exception inner); // 0x001E1198
	protected MissingMemberException(SerializationInfo info, StreamingContext context); // 0x001E0FB4
	public MissingMemberException(string className, string memberName); // 0x001E11EC

	// Methods
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x001E1430
}

// Namespace: System
[Serializable]
public class MissingMethodException : MissingMemberException // TypeDefIndex: 1689
{
	// Fields
	private const int Result = -2146233069; // 0x00

	// Properties
	public override string Message { get; } // 0x001E1658 

	// Constructors
	public MissingMethodException(); // 0x001E1548
	public MissingMethodException(string message); // 0x001E15C8
	protected MissingMethodException(SerializationInfo info, StreamingContext context); // 0x001E15EC
	public MissingMethodException(string message, Exception inner); // 0x001E1604
	public MissingMethodException(string className, string methodName); // 0x001E1628

}

// Namespace: System
public struct ModuleHandle // TypeDefIndex: 1690
{
	// Fields
	private IntPtr value; // 0x08
	public static readonly ModuleHandle EmptyHandle; // 0x00

	// Properties
	internal IntPtr Value { get; } // 0x0008B8C8 
	public int MDStreamVersion { get; } // 0x0008B8D0 

	// Constructors
	internal ModuleHandle(IntPtr v); // 0x0008B8C0
	private static ModuleHandle(); // 0x001E1728

	// Methods
	internal void GetPEKind(out PortableExecutableKinds peKind, out ImageFileMachine machine); // 0x0008B8D8
	public RuntimeFieldHandle ResolveFieldHandle(int fieldToken); // 0x0008B8E0
	public RuntimeMethodHandle ResolveMethodHandle(int methodToken); // 0x0008B904
	public RuntimeTypeHandle ResolveTypeHandle(int typeToken); // 0x0008B928
	private IntPtr[] ptrs_from_handles(RuntimeTypeHandle[] handles); // 0x0008B94C
	public RuntimeTypeHandle ResolveTypeHandle(int typeToken, RuntimeTypeHandle[] typeInstantiationContext, RuntimeTypeHandle[] methodInstantiationContext); // 0x0008B950
	public RuntimeMethodHandle ResolveMethodHandle(int methodToken, RuntimeTypeHandle[] typeInstantiationContext, RuntimeTypeHandle[] methodInstantiationContext); // 0x0008B96C
	public RuntimeFieldHandle ResolveFieldHandle(int fieldToken, RuntimeTypeHandle[] typeInstantiationContext, RuntimeTypeHandle[] methodInstantiationContext); // 0x0008B988
	public RuntimeFieldHandle GetRuntimeFieldHandleFromMetadataToken(int fieldToken); // 0x0008B9A4
	public RuntimeMethodHandle GetRuntimeMethodHandleFromMetadataToken(int methodToken); // 0x0008B9C8
	public RuntimeTypeHandle GetRuntimeTypeHandleFromMetadataToken(int typeToken); // 0x0008B9EC
	public override bool Equals(object obj); // 0x0008BA10
	public bool Equals(ModuleHandle handle); // 0x0008BA18
	public override int GetHashCode(); // 0x0008BA2C
	public static bool op_Equality(ModuleHandle left, ModuleHandle right); // 0x001E23DC
	public static bool op_Inequality(ModuleHandle left, ModuleHandle right); // 0x001E2474
}

// Namespace: System
internal class MonoAsyncCall // TypeDefIndex: 1691
{
	// Fields
	private object msg; // 0x08
	private IntPtr cb_method; // 0x0C
	private object cb_target; // 0x10
	private object state; // 0x14
	private object res; // 0x18
	private object out_args; // 0x1C
	private long wait_event; // 0x20

	// Constructors
	public MonoAsyncCall(); // 0x001E2510

}

// Namespace: System
internal class MonoCustomAttrs // TypeDefIndex: 1692
{
	// Fields
	private static Assembly corlib; // 0x00
	private static readonly Type AttributeUsageType; // 0x04
	private static readonly AttributeUsageAttribute DefaultAttributeUsage; // 0x08

	// Constructors
	public MonoCustomAttrs(); // 0x001E2518
	private static MonoCustomAttrs(); // 0x001E2520

	// Methods
	private static bool IsUserCattrProvider(object obj); // 0x001E25F8
	internal static object[] GetCustomAttributesInternal(ICustomAttributeProvider obj, Type attributeType, bool pseudoAttrs); // 0x001E28A4
	internal static object[] GetPseudoCustomAttributes(ICustomAttributeProvider obj, Type attributeType); // 0x001E28A8
	internal static object[] GetCustomAttributesBase(ICustomAttributeProvider obj, Type attributeType); // 0x001E2B68
	internal static Attribute GetCustomAttribute(ICustomAttributeProvider obj, Type attributeType, bool inherit); // 0x001E2DB8
	internal static object[] GetCustomAttributes(ICustomAttributeProvider obj, Type attributeType, bool inherit); // 0x001E2F64
	internal static object[] GetCustomAttributes(ICustomAttributeProvider obj, bool inherit); // 0x001E3D08
	private static CustomAttributeData[] GetCustomAttributesDataInternal(ICustomAttributeProvider obj); // 0x001E3EF0
	internal static IList`1<CustomAttributeData> GetCustomAttributesData(ICustomAttributeProvider obj); // 0x001E3EF4
	internal static bool IsDefined(ICustomAttributeProvider obj, Type attributeType, bool inherit); // 0x001E3FE8
	internal static bool IsDefinedInternal(ICustomAttributeProvider obj, Type AttributeType); // 0x001E4338
	private static PropertyInfo GetBasePropertyDefinition(PropertyInfo property); // 0x001E433C
	private static ICustomAttributeProvider GetBase(ICustomAttributeProvider obj); // 0x001E3B14
	private static AttributeUsageAttribute RetrieveAttributeUsage(Type attributeType); // 0x001E3854
}

// Namespace: 
private class AttributeInfo // TypeDefIndex: 1693
{
	// Fields
	private AttributeUsageAttribute _usage; // 0x08
	private int _inheritanceLevel; // 0x0C

	// Properties
	public AttributeUsageAttribute Usage { get; } // 0x001E4658 
	public int InheritanceLevel { get; } // 0x001E4660 

	// Constructors
	public AttributeInfo(AttributeUsageAttribute usage, int inheritanceLevel); // 0x001E3AEC

}

// Namespace: System
internal sealed class MonoListItem // TypeDefIndex: 1694
{
	// Fields
	private MonoListItem next; // 0x08
	private object data; // 0x0C

	// Constructors
	public MonoListItem(); // 0x001E5744

}

// Namespace: System
internal class MonoTouchAOTHelper // TypeDefIndex: 1695
{
	// Fields
	internal static bool FalseFlag; // 0x00

	// Constructors
	public MonoTouchAOTHelper(); // 0x001E577C
	private static MonoTouchAOTHelper(); // 0x001E5784

}

// Namespace: System
internal class MonoTypeInfo // TypeDefIndex: 1696
{
	// Fields
	public string full_name; // 0x08
	public ConstructorInfo default_ctor; // 0x0C

	// Constructors
	public MonoTypeInfo(); // 0x001E5A08

}

// Namespace: System
[Serializable]
internal class MonoType : Type, ISerializable // TypeDefIndex: 1697
{
	// Fields
	[NonSerialized]	private MonoTypeInfo type_info; // 0x0C

	// Properties
	public override Type UnderlyingSystemType { get; } // 0x001E8500 
	public override Assembly Assembly { get; } // 0x001E8504 
	public override string AssemblyQualifiedName { get; } // 0x001E8508 
	public override Type BaseType { get; } // 0x001E8518 
	public override string FullName { get; } // 0x001E851C 
	public override Guid GUID { get; } // 0x001E85E8 
	public override MemberTypes MemberType { get; } // 0x001E8988 
	public override string Name { get; } // 0x001E89E0 
	public override string Namespace { get; } // 0x001E89E4 
	public override Module Module { get; } // 0x001E89E8 
	public override Type DeclaringType { get; } // 0x001E89EC 
	public override Type ReflectedType { get; } // 0x001E89F0 
	public override RuntimeTypeHandle TypeHandle { get; } // 0x001E8A00 
	public override bool ContainsGenericParameters { get; } // 0x001E8A3C 
	public override bool IsGenericParameter { get; } // 0x001E8B70 
	public override MethodBase DeclaringMethod { get; } // 0x001E8B74 

	// Constructors
	internal MonoType(object obj); // 0x001E5788

	// Methods
	private static void type_from_obj(MonoType type, object obj); // 0x001E5858
	private static TypeAttributes get_attributes(Type type); // 0x001E58DC
	internal ConstructorInfo GetDefaultConstructor(); // 0x001E58E0
	protected override TypeAttributes GetAttributeFlagsImpl(); // 0x001E5A10
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x001E5A14
	internal ConstructorInfo[] GetConstructors_internal(BindingFlags bindingAttr, Type reflected_type); // 0x001E5E98
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr); // 0x001E5E9C
	private EventInfo InternalGetEvent(string name, BindingFlags bindingAttr); // 0x001E5EA4
	public override EventInfo GetEvent(string name, BindingFlags bindingAttr); // 0x001E5EA8
	internal EventInfo[] GetEvents_internal(BindingFlags bindingAttr, Type reflected_type); // 0x001E5F6C
	public override EventInfo[] GetEvents(BindingFlags bindingAttr); // 0x001E5F70
	public override FieldInfo GetField(string name, BindingFlags bindingAttr); // 0x001E5F78
	internal FieldInfo[] GetFields_internal(BindingFlags bindingAttr, Type reflected_type); // 0x001E5F7C
	public override FieldInfo[] GetFields(BindingFlags bindingAttr); // 0x001E5F80
	public override Type GetInterface(string name, bool ignoreCase); // 0x001E5F88
	public override Type[] GetInterfaces(); // 0x001E625C
	public override MemberInfo[] GetMembers(BindingFlags bindingAttr); // 0x001E6260
	internal MethodInfo[] GetMethodsByName(string name, BindingFlags bindingAttr, bool ignoreCase, Type reflected_type); // 0x001E629C
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr); // 0x001E62A0
	protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x001E62C8
	private MethodInfo GetCorrespondingInflatedMethod(MethodInfo generic); // 0x001E6700
	private ConstructorInfo GetCorrespondingInflatedConstructor(ConstructorInfo generic); // 0x001E6754
	internal override MethodInfo GetMethod(MethodInfo fromNoninstanciated); // 0x001E67A8
	internal override ConstructorInfo GetConstructor(ConstructorInfo fromNoninstanciated); // 0x001E6898
	internal override FieldInfo GetField(FieldInfo fromNoninstanciated); // 0x001E6988
	public override Type GetNestedType(string name, BindingFlags bindingAttr); // 0x001E6A60
	public override Type[] GetNestedTypes(BindingFlags bindingAttr); // 0x001E6A64
	internal PropertyInfo[] GetPropertiesByName(string name, BindingFlags bindingAttr, bool icase, Type reflected_type); // 0x001E6A68
	public override PropertyInfo[] GetProperties(BindingFlags bindingAttr); // 0x001E6A6C
	protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x001E6A94
	protected override bool HasElementTypeImpl(); // 0x001E6CA0
	protected override bool IsArrayImpl(); // 0x001E6D04
	protected override bool IsByRefImpl(); // 0x001E6D88
	protected override bool IsCOMObjectImpl(); // 0x001E6D8C
	protected override bool IsPointerImpl(); // 0x001E6D90
	protected override bool IsPrimitiveImpl(); // 0x001E6D94
	public override bool IsSubclassOf(Type type); // 0x001E6D98
	public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters); // 0x001E6E58
	public override Type GetElementType(); // 0x001E84FC
	private string getFullName(bool full_name, bool assembly_qualified); // 0x001E8514
	public override bool IsDefined(Type attributeType, bool inherit); // 0x001E8780
	public override object[] GetCustomAttributes(bool inherit); // 0x001E8810
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x001E8898
	public override int GetArrayRank(); // 0x001E8A08
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x001E8A0C
	public override string ToString(); // 0x001E8A2C
	public override Type[] GetGenericArguments(); // 0x001E8A38
	public override Type GetGenericTypeDefinition(); // 0x001E8B78
	private MethodBase CheckMethodSecurity(MethodBase mb); // 0x001E5E90
	private void ReorderParamArrayArguments(object[] args, MethodBase method); // 0x001E81E8
}

// Namespace: System
[Serializable]
public sealed class MulticastNotSupportedException : SystemException // TypeDefIndex: 1698
{
	// Constructors
	public MulticastNotSupportedException(); // 0x001E997C
	public MulticastNotSupportedException(string message); // 0x001E99F0
	public MulticastNotSupportedException(string message, Exception inner); // 0x001E99F8
	internal MulticastNotSupportedException(SerializationInfo info, StreamingContext context); // 0x001E9A00

}

// Namespace: System
public sealed class NonSerializedAttribute : Attribute // TypeDefIndex: 1699
{
	// Constructors
	public NonSerializedAttribute(); // 0x001E9A20

}

// Namespace: System
[Serializable]
public class NotFiniteNumberException : ArithmeticException // TypeDefIndex: 1700
{
	// Fields
	private const int Result = -2146233048; // 0x00
	private double offending_number; // 0x38

	// Properties
	public double OffendingNumber { get; } // 0x001E9C3C 

	// Constructors
	public NotFiniteNumberException(); // 0x001E9A28
	public NotFiniteNumberException(double offendingNumber); // 0x001E9AA8
	public NotFiniteNumberException(string message); // 0x001E9ADC
	public NotFiniteNumberException(string message, double offendingNumber); // 0x001E9B00
	public NotFiniteNumberException(string message, double offendingNumber, Exception innerException); // 0x001E9B34
	protected NotFiniteNumberException(SerializationInfo info, StreamingContext context); // 0x001E9B6C
	public NotFiniteNumberException(string message, Exception innerException); // 0x001E9C18

	// Methods
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x001E9C48
}

// Namespace: System
[Serializable]
public class NotImplementedException : SystemException // TypeDefIndex: 1701
{
	// Fields
	private const int Result = -2147467263; // 0x00

	// Constructors
	public NotImplementedException(); // 0x001E585C
	public NotImplementedException(string message); // 0x001E9D00
	public NotImplementedException(string message, Exception inner); // 0x001E9D24
	protected NotImplementedException(SerializationInfo info, StreamingContext context); // 0x001E9D48

}

// Namespace: System
[Serializable]
public class NotSupportedException : SystemException // TypeDefIndex: 1702
{
	// Fields
	private const int Result = -2146233067; // 0x00

	// Constructors
	public NotSupportedException(); // 0x001E9D68
	public NotSupportedException(string message); // 0x001D6118
	public NotSupportedException(string message, Exception innerException); // 0x001E9DE8
	protected NotSupportedException(SerializationInfo info, StreamingContext context); // 0x001E9E0C

}

// Namespace: System
[Serializable]
public class NullReferenceException : SystemException // TypeDefIndex: 1703
{
	// Fields
	private const int Result = -2147467261; // 0x00

	// Constructors
	public NullReferenceException(); // 0x001E9E2C
	public NullReferenceException(string message); // 0x001E9EAC
	public NullReferenceException(string message, Exception innerException); // 0x001E9ED0
	protected NullReferenceException(SerializationInfo info, StreamingContext context); // 0x001E9EF4

}

// Namespace: System
public static class Nullable // TypeDefIndex: 1704
{
	// Methods
	public static int Compare(Nullable`1<T> value1, Nullable`1<T> value2);
	public static bool Equals(Nullable`1<T> value1, Nullable`1<T> value2);
	public static Type GetUnderlyingType(Type nullableType); // 0x001E9F14
}

// Namespace: System
internal sealed class NumberFormatter // TypeDefIndex: 1705
{
	// Fields
	private const int DefaultExpPrecision = 6; // 0x00
	private const int HundredMillion = 100000000; // 0x00
	private const long SeventeenDigitsThreshold = 10000000000000000; // 0x00
	private const ulong ULongDivHundredMillion = 184467440737; // 0x00
	private const ulong ULongModHundredMillion = 9551616; // 0x00
	private const int DoubleBitsExponentShift = 52; // 0x00
	private const int DoubleBitsExponentMask = 2047; // 0x00
	private const long DoubleBitsMantissaMask = 4503599627370495; // 0x00
	private const int DecimalBitsScaleMask = 2031616; // 0x00
	private const int SingleDefPrecision = 7; // 0x00
	private const int DoubleDefPrecision = 15; // 0x00
	private const int Int8DefPrecision = 3; // 0x00
	private const int UInt8DefPrecision = 3; // 0x00
	private const int Int16DefPrecision = 5; // 0x00
	private const int UInt16DefPrecision = 5; // 0x00
	private const int Int32DefPrecision = 10; // 0x00
	private const int UInt32DefPrecision = 10; // 0x00
	private const int Int64DefPrecision = 19; // 0x00
	private const int UInt64DefPrecision = 20; // 0x00
	private const int DecimalDefPrecision = 100; // 0x00
	private const int TenPowersListLength = 19; // 0x00
	private const double MinRoundtripVal = -1.79769313486231E+308; // 0x00
	private const double MaxRoundtripVal = 1.79769313486231E+308; // 0x00
	private static readonly void * MantissaBitsTable; // 0x00
	private static readonly void * TensExponentTable; // 0x04
	private static readonly void * DigitLowerTable; // 0x08
	private static readonly void * DigitUpperTable; // 0x0C
	private static readonly void * TenPowersList; // 0x10
	private static readonly void * DecHexDigits; // 0x14
	private Thread _thread; // 0x08
	private NumberFormatInfo _nfi; // 0x0C
	private bool _NaN; // 0x10
	private bool _infinity; // 0x11
	private bool _isCustomFormat; // 0x12
	private bool _specifierIsUpper; // 0x13
	private bool _positive; // 0x14
	private char _specifier; // 0x16
	private int _precision; // 0x18
	private int _defPrecision; // 0x1C
	private int _digitsLen; // 0x20
	private int _offset; // 0x24
	private int _decPointPos; // 0x28
	private uint _val1; // 0x2C
	private uint _val2; // 0x30
	private uint _val3; // 0x34
	private uint _val4; // 0x38
	private char[] _cbuf; // 0x3C
	private int _ind; // 0x40
	private static NumberFormatter threadNumberFormatter; // 0x80000000

	// Properties
	public CultureInfo CurrentCulture { set; } // 0x001EA154
	private int IntegerDigits { get; } // 0x001EBDB0 
	private int DecimalDigits { get; } // 0x001EBDC0 
	private bool IsFloatingSource { get; } // 0x001EBDD4 
	private bool IsZero { get; } // 0x001EBDEC 
	private bool IsZeroInteger { get; } // 0x001EBE00 

	// Constructors
	public NumberFormatter(Thread current); // 0x001EA098
	private static NumberFormatter(); // 0x001EA194

	// Methods
	private static void GetFormatterTables(out void * MantissaBitsTable, out void * TensExponentTable, out void * DigitLowerTable, out void * DigitUpperTable, out void * TenPowersList, out void * DecHexDigits); // 0x001EA218
	private static long GetTenPowerOf(int i); // 0x001EA21C
	private void InitDecHexDigits(uint value); // 0x001EA2B4
	private void InitDecHexDigits(ulong value); // 0x001EA58C
	private void InitDecHexDigits(uint hi, ulong lo); // 0x001EA764
	private static uint FastToDecHex(int val); // 0x001EA3A0
	private static uint ToDecHex(int val); // 0x001EA4A4
	private static int FastDecHexLen(int val); // 0x001EAA5C
	private static int DecHexLen(uint val); // 0x001EAA8C
	private int DecHexLen(); // 0x001EAB78
	private static int ScaleOrder(long hi); // 0x001EACE4
	private int InitialFloatingPrecision(); // 0x001EAD90
	private static int ParsePrecision(string format); // 0x001EADE0
	private void Init(string format); // 0x001EAE5C
	private void InitHex(ulong value); // 0x001EAFAC
	private void Init(string format, int value, int defPrecision); // 0x001EB014
	private void Init(string format, uint value, int defPrecision); // 0x001EB094
	private void Init(string format, long value); // 0x001EB108
	private void Init(string format, ulong value); // 0x001EB190
	private void Init(string format, double value, int defPrecision); // 0x001EB20C
	private void Init(string format, Decimal value); // 0x001EB74C
	private void ResetCharBuf(int size); // 0x001EB9D4
	private void Resize(int len); // 0x001EBA68
	private void Append(char c); // 0x001EBAEC
	private void Append(char c, int cnt); // 0x001EBB78
	private void Append(string s); // 0x001EBC28
	private NumberFormatInfo GetNumberFormatInstance(IFormatProvider fp); // 0x001EBD14
	private void RoundPos(int pos); // 0x001EBE24
	private bool RoundDecimal(int decimals); // 0x001EBFA8
	private bool RoundBits(int shift); // 0x001EBE30
	private void RemoveTrailingZeros(); // 0x001EC0E4
	private void AddOneToDecHex(); // 0x001EBFBC
	private static uint AddOneToDecHex(uint val); // 0x001EC120
	private int CountTrailingZeros(); // 0x001EB5E0
	private static int CountTrailingZeros(uint val); // 0x001EC1CC
	private static NumberFormatter GetInstance(); // 0x001EC240
	private void Release(); // 0x001EC34C
	internal static void SetThreadCurrentCulture(CultureInfo culture); // 0x001EC3DC
	public static string NumberToString(string format, sbyte value, IFormatProvider fp); // 0x001EC4F4
	public static string NumberToString(string format, byte value, IFormatProvider fp); // 0x001EC88C
	public static string NumberToString(string format, ushort value, IFormatProvider fp); // 0x001ECA10
	public static string NumberToString(string format, short value, IFormatProvider fp); // 0x001D8354
	public static string NumberToString(string format, uint value, IFormatProvider fp); // 0x001ECB94
	public static string NumberToString(string format, int value, IFormatProvider fp); // 0x001DADD4
	public static string NumberToString(string format, ulong value, IFormatProvider fp); // 0x001ECD18
	public static string NumberToString(string format, long value, IFormatProvider fp); // 0x001DD66C
	public static string NumberToString(string format, float value, IFormatProvider fp); // 0x001ECEA0
	public static string NumberToString(string format, double value, IFormatProvider fp); // 0x001ED324
	public static string NumberToString(string format, Decimal value, IFormatProvider fp); // 0x001ED5F8
	public static string NumberToString(uint value, IFormatProvider fp); // 0x001ED7B4
	public static string NumberToString(int value, IFormatProvider fp); // 0x001D8098
	public static string NumberToString(ulong value, IFormatProvider fp); // 0x001EDA2C
	public static string NumberToString(long value, IFormatProvider fp); // 0x001DD414
	public static string NumberToString(float value, IFormatProvider fp); // 0x001EDBCC
	public static string NumberToString(double value, IFormatProvider fp); // 0x001EDF38
	private string FastIntegerToString(int value, IFormatProvider fp); // 0x001ED93C
	private string IntegerToString(string format, IFormatProvider fp); // 0x001EC678
	private string NumberToString(string format, NumberFormatInfo nfi); // 0x001ED140
	public string FormatCurrency(int precision, NumberFormatInfo nfi); // 0x001EE3D4
	private string FormatDecimal(int precision, NumberFormatInfo nfi); // 0x001EE6CC
	private string FormatHexadecimal(int precision); // 0x001EEC3C
	public string FormatFixedPoint(int precision, NumberFormatInfo nfi); // 0x001EE804
	private string FormatRoundtrip(double origval, NumberFormatInfo nfi); // 0x001ED540
	private string FormatRoundtrip(float origval, NumberFormatInfo nfi); // 0x001ED0C0
	private string FormatGeneral(int precision, NumberFormatInfo nfi); // 0x001EDDC8
	public string FormatNumber(int precision, NumberFormatInfo nfi); // 0x001EE914
	public string FormatPercent(int precision, NumberFormatInfo nfi); // 0x001EEAC8
	public string FormatExponential(int precision, NumberFormatInfo nfi); // 0x001EE7B4
	private string FormatExponential(int precision, NumberFormatInfo nfi, int expDigits); // 0x001EFBBC
	public string FormatCustom(string format, NumberFormatInfo nfi); // 0x001EEE08
	private static void ZeroTrimEnd(StringBuilder sb, bool canEmpty); // 0x001F0268
	private static bool IsZeroOnly(StringBuilder sb); // 0x001F017C
	private static void AppendNonNegativeNumber(StringBuilder sb, int v); // 0x001EFF54
	private void AppendIntegerString(int minLength, StringBuilder sb); // 0x001F00AC
	private void AppendIntegerString(int minLength); // 0x001EFAD0
	private void AppendDecimalString(int precision, StringBuilder sb); // 0x001F0148
	private void AppendDecimalString(int precision); // 0x001EF6E4
	private void AppendIntegerStringWithGroupSeparator(int[] groups, string groupSeparator); // 0x001EF48C
	private void AppendExponent(NumberFormatInfo nfi, int exponent, int minDigits); // 0x001EFDAC
	private void AppendOneDigit(int start); // 0x001EFCC0
	private void FastAppendDigits(int val, bool force); // 0x001EE12C
	private void AppendDigits(int start, int end); // 0x001EF6FC
	private void AppendDigits(int start, int end, StringBuilder sb); // 0x001F0350
	private void Multiply10(int count); // 0x001EFCA0
	private void Divide10(int count); // 0x001EFF34
	private NumberFormatter GetClone(); // 0x001EFB2C
}

// Namespace: 
private class CustomInfo // TypeDefIndex: 1706
{
	// Fields
	public bool UseGroup; // 0x08
	public int DecimalDigits; // 0x0C
	public int DecimalPointPos; // 0x10
	public int DecimalTailSharpDigits; // 0x14
	public int IntegerDigits; // 0x18
	public int IntegerHeadSharpDigits; // 0x1C
	public int IntegerHeadPos; // 0x20
	public bool UseExponent; // 0x24
	public int ExponentDigits; // 0x28
	public int ExponentTailSharpDigits; // 0x2C
	public bool ExponentNegativeSignOnly; // 0x30
	public int DividePlaces; // 0x34
	public int Percents; // 0x38
	public int Permilles; // 0x3C

	// Constructors
	public CustomInfo(); // 0x001AF628

	// Methods
	public static void GetActiveSection(string format, bool positive, bool zero, int offset, int length); // 0x001AF640
	public static CustomInfo Parse(string format, int offset, int length, NumberFormatInfo nfi); // 0x001AFB88
	public string Format(string format, int offset, int length, NumberFormatInfo nfi, bool positive, StringBuilder sb_int, StringBuilder sb_dec, StringBuilder sb_exp); // 0x001B0248
}

// Namespace: System
[Serializable]
public class ObjectDisposedException : InvalidOperationException // TypeDefIndex: 1707
{
	// Fields
	private string obj_name; // 0x34
	private string msg; // 0x38

	// Properties
	public override string Message { get; } // 0x001B0EE0 
	public string ObjectName { get; } // 0x001B0EE8 

	// Constructors
	public ObjectDisposedException(string objectName); // 0x001B0D74
	public ObjectDisposedException(string objectName, string message); // 0x001B0E00
	public ObjectDisposedException(string message, Exception innerException); // 0x001B0E2C
	protected ObjectDisposedException(SerializationInfo info, StreamingContext context); // 0x001B0E34

	// Methods
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x001B0EF0
}

// Namespace: System
[Serializable]
public sealed class OperatingSystem : ICloneable, ISerializable // TypeDefIndex: 1708
{
	// Fields
	private PlatformID _platform; // 0x08
	private Version _version; // 0x0C
	private string _servicePack; // 0x10

	// Properties
	public PlatformID Platform { get; } // 0x001B1110 
	public Version Version { get; } // 0x001B1118 
	public string ServicePack { get; } // 0x001B1120 
	public string VersionString { get; } // 0x001B1128 

	// Constructors
	public OperatingSystem(PlatformID platform, Version version); // 0x001B1000

	// Methods
	public object Clone(); // 0x001B12D0
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x001B134C
	public override string ToString(); // 0x001B112C
}

// Namespace: System
[Serializable]
public class OperationCanceledException : SystemException // TypeDefIndex: 1709
{
	// Fields
	private const int Result = -2146233029; // 0x00

	// Constructors
	public OperationCanceledException(); // 0x001B1460
	public OperationCanceledException(string message); // 0x001B14E0
	public OperationCanceledException(string message, Exception innerException); // 0x001B1504
	protected OperationCanceledException(SerializationInfo info, StreamingContext context); // 0x001B1528

}

// Namespace: System
[Serializable]
public class OutOfMemoryException : SystemException // TypeDefIndex: 1710
{
	// Fields
	private const int Result = -2147024882; // 0x00

	// Constructors
	public OutOfMemoryException(); // 0x001B186C
	public OutOfMemoryException(string message); // 0x001B18EC
	public OutOfMemoryException(string message, Exception innerException); // 0x001B1910
	protected OutOfMemoryException(SerializationInfo info, StreamingContext context); // 0x001B1934

}

// Namespace: System
[Serializable]
public class OverflowException : ArithmeticException // TypeDefIndex: 1711
{
	// Fields
	private const int Result = -2146233066; // 0x00

	// Constructors
	public OverflowException(); // 0x001B1954
	public OverflowException(string message); // 0x001B19D4
	public OverflowException(string message, Exception innerException); // 0x001B19F8
	protected OverflowException(SerializationInfo info, StreamingContext context); // 0x001B1A1C

}

// Namespace: System
[Serializable]
public enum PlatformID // TypeDefIndex: 1712
{
	Win32S = 0,
	Win32Windows = 1,
	Win32NT = 2,
	WinCE = 3,
	Unix = 4,
	Xbox = 5,
	MacOSX = 6
}

// Namespace: System
[Serializable]
public class PlatformNotSupportedException : NotSupportedException // TypeDefIndex: 1713
{
	// Fields
	private const int Result = -2146233031; // 0x00

	// Constructors
	public PlatformNotSupportedException(); // 0x001B1A44
	public PlatformNotSupportedException(string message); // 0x001B1AC4
	protected PlatformNotSupportedException(SerializationInfo info, StreamingContext context); // 0x001B1AE8
	public PlatformNotSupportedException(string message, Exception inner); // 0x001B1B08

}

// Namespace: System
[Serializable]
public class Random // TypeDefIndex: 1714
{
	// Fields
	private const int MBIG = 2147483647; // 0x00
	private const int MSEED = 161803398; // 0x00
	private const int MZ = 0; // 0x00
	private int inext; // 0x08
	private int inextp; // 0x0C
	private int[] SeedArray; // 0x10

	// Constructors
	public Random(); // 0x001B1B2C
	public Random(int Seed); // 0x001B1B50

	// Methods
	protected virtual double Sample(); // 0x001B1E18
	public virtual int Next(); // 0x001B1F28
	public virtual int Next(int maxValue); // 0x001B1F60
	public virtual int Next(int minValue, int maxValue); // 0x001B2048
	public virtual void NextBytes(byte[] buffer); // 0x001B2148
	public virtual double NextDouble(); // 0x001B2278
}

// Namespace: System
[Serializable]
public class RankException : SystemException // TypeDefIndex: 1715
{
	// Fields
	private const int Result = -2146233065; // 0x00

	// Constructors
	public RankException(); // 0x001B2288
	public RankException(string message); // 0x001B2308
	public RankException(string message, Exception innerException); // 0x001B232C
	protected RankException(SerializationInfo info, StreamingContext context); // 0x001B2350

}

// Namespace: System
public class ResolveEventArgs : EventArgs // TypeDefIndex: 1716
{
	// Fields
	private string m_Name; // 0x08

	// Properties
	public string Name { get; } // 0x0036B100 

	// Constructors
	public ResolveEventArgs(string name); // 0x0036B074

}

// Namespace: System
[Serializable]
public struct RuntimeMethodHandle : ISerializable // TypeDefIndex: 1717
{
	// Fields
	private IntPtr value; // 0x08

	// Properties
	public IntPtr Value { get; } // 0x0008BD9C 

	// Constructors
	internal RuntimeMethodHandle(IntPtr v); // 0x0008BD78
	private RuntimeMethodHandle(SerializationInfo info, StreamingContext context); // 0x0008BD80

	// Methods
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0008BDA4
	private static IntPtr GetFunctionPointer(IntPtr m); // 0x0020EB48
	public IntPtr GetFunctionPointer(); // 0x0008BDC0
	public override bool Equals(object obj); // 0x0008BDC8
	public bool Equals(RuntimeMethodHandle handle); // 0x0008BDD0
	public override int GetHashCode(); // 0x0008BDDC
	public static bool op_Equality(RuntimeMethodHandle left, RuntimeMethodHandle right); // 0x0020EC80
	public static bool op_Inequality(RuntimeMethodHandle left, RuntimeMethodHandle right); // 0x0020EC88
}

// Namespace: System
public sealed class STAThreadAttribute : Attribute // TypeDefIndex: 1718
{
	// Constructors
	public STAThreadAttribute(); // 0x002106D4

}

// Namespace: System
[Serializable]
public sealed class StackOverflowException : SystemException // TypeDefIndex: 1719
{
	// Constructors
	public StackOverflowException(); // 0x00248A0C
	public StackOverflowException(string message); // 0x00248A80
	public StackOverflowException(string message, Exception innerException); // 0x00248A88
	internal StackOverflowException(SerializationInfo info, StreamingContext context); // 0x00248A90

}

// Namespace: System
[Serializable]
public abstract class StringComparer : IComparer`1<string>, IEqualityComparer`1<string>, IComparer, IEqualityComparer // TypeDefIndex: 1720
{
	// Fields
	private static StringComparer invariantCultureIgnoreCase; // 0x00
	private static StringComparer invariantCulture; // 0x04
	private static StringComparer ordinalIgnoreCase; // 0x08
	private static StringComparer ordinal; // 0x0C

	// Properties
	public static StringComparer CurrentCulture { get; } // 0x0050F3BC 
	public static StringComparer CurrentCultureIgnoreCase { get; } // 0x0050F468 
	public static StringComparer InvariantCulture { get; } // 0x0050F514 
	public static StringComparer InvariantCultureIgnoreCase { get; } // 0x0050F5A0 
	public static StringComparer Ordinal { get; } // 0x0050F62C 
	public static StringComparer OrdinalIgnoreCase { get; } // 0x0050F6B8 

	// Constructors
	protected StringComparer(); // 0x0050F26C
	private static StringComparer(); // 0x0050F274

	// Methods
	public static StringComparer Create(CultureInfo culture, bool ignoreCase); // 0x0050F744
	public int Compare(object x, object y); // 0x0050F820
	public bool Equals(object x, object y); // 0x0050F9CC
	public int GetHashCode(object obj); // 0x0050FAA0
	public abstract int Compare(string x, string y);
	public abstract bool Equals(string x, string y);
	public abstract int GetHashCode(string obj);
}

// Namespace: System
[Serializable]
internal sealed class CultureAwareComparer : StringComparer // TypeDefIndex: 1721
{
	// Fields
	private readonly bool _ignoreCase; // 0x08
	private readonly CompareInfo _compareInfo; // 0x0C

	// Constructors
	public CultureAwareComparer(CultureInfo ci, bool ignore_case); // 0x004AB248

	// Methods
	public override int Compare(string x, string y); // 0x004AB300
	public override bool Equals(string x, string y); // 0x004AB358
	public override int GetHashCode(string s); // 0x004AB378
}

// Namespace: System
[Serializable]
internal sealed class OrdinalComparer : StringComparer // TypeDefIndex: 1722
{
	// Fields
	private readonly bool _ignoreCase; // 0x08

	// Constructors
	public OrdinalComparer(bool ignoreCase); // 0x001B1548

	// Methods
	public override int Compare(string x, string y); // 0x001B15D4
	public override bool Equals(string x, string y); // 0x001B16D4
	public override int GetHashCode(string s); // 0x001B1794
}

// Namespace: System
[Serializable]
public enum StringComparison // TypeDefIndex: 1723
{
	CurrentCulture = 0,
	CurrentCultureIgnoreCase = 1,
	InvariantCulture = 2,
	InvariantCultureIgnoreCase = 3,
	Ordinal = 4,
	OrdinalIgnoreCase = 5
}

// Namespace: System
public enum StringSplitOptions // TypeDefIndex: 1724
{
	None = 0,
	RemoveEmptyEntries = 1
}

// Namespace: System
[Serializable]
public class SystemException : Exception // TypeDefIndex: 1725
{
	// Fields
	private const int Result = -2146233087; // 0x00

	// Constructors
	public SystemException(); // 0x0050FB98
	public SystemException(string message); // 0x0050FC18
	protected SystemException(SerializationInfo info, StreamingContext context); // 0x0050FC3C
	public SystemException(string message, Exception innerException); // 0x0050FC5C

}

// Namespace: System
internal enum TermInfoBooleans // TypeDefIndex: 1726
{
	AutoLeftMargin = 0,
	AutoRightMargin = 1,
	NoEscCtlc = 2,
	CeolStandoutGlitch = 3,
	EatNewlineGlitch = 4,
	EraseOverstrike = 5,
	GenericType = 6,
	HardCopy = 7,
	HasMetaKey = 8,
	HasStatusLine = 9,
	InsertNullGlitch = 10,
	MemoryAbove = 11,
	MemoryBelow = 12,
	MoveInsertMode = 13,
	MoveStandoutMode = 14,
	OverStrike = 15,
	StatusLineEscOk = 16,
	DestTabsMagicSmso = 17,
	TildeGlitch = 18,
	TransparentUnderline = 19,
	XonXoff = 20,
	NeedsXonXoff = 21,
	PrtrSilent = 22,
	HardCursor = 23,
	NonRevRmcup = 24,
	NoPadChar = 25,
	NonDestScrollRegion = 26,
	CanChange = 27,
	BackColorErase = 28,
	HueLightnessSaturation = 29,
	ColAddrGlitch = 30,
	CrCancelsMicroMode = 31,
	HasPrintWheel = 32,
	RowAddrGlitch = 33,
	SemiAutoRightMargin = 34,
	CpiChangesRes = 35,
	LpiChangesRes = 36,
	Last = 37
}

// Namespace: System
[Serializable]
public class ThreadStaticAttribute : Attribute // TypeDefIndex: 1727
{
	// Constructors
	public ThreadStaticAttribute(); // 0x0052D1D8

}

// Namespace: System
[Serializable]
public struct TimeSpan : IComparable, IComparable`1<TimeSpan>, IEquatable`1<TimeSpan> // TypeDefIndex: 1728
{
	// Fields
	public const long TicksPerDay = 864000000000; // 0x00
	public const long TicksPerHour = 36000000000; // 0x00
	public const long TicksPerMillisecond = 10000; // 0x00
	public const long TicksPerMinute = 600000000; // 0x00
	public const long TicksPerSecond = 10000000; // 0x00
	public static readonly TimeSpan MaxValue; // 0x00
	public static readonly TimeSpan MinValue; // 0x08
	public static readonly TimeSpan Zero; // 0x10
	private long _ticks; // 0x08

	// Properties
	public int Days { get; } // 0x000A7900 
	public int Hours { get; } // 0x000A7920 
	public int Milliseconds { get; } // 0x000A795C 
	public int Minutes { get; } // 0x000A7990 
	public int Seconds { get; } // 0x000A79CC 
	public long Ticks { get; } // 0x000A7A08 
	public double TotalDays { get; } // 0x000A7A10 
	public double TotalHours { get; } // 0x000A7A40 
	public double TotalMilliseconds { get; } // 0x000A7A70 
	public double TotalMinutes { get; } // 0x000A7AA0 
	public double TotalSeconds { get; } // 0x000A7AD0 

	// Constructors
	public TimeSpan(long ticks); // 0x000A7888
	public TimeSpan(int hours, int minutes, int seconds); // 0x000A7898
	public TimeSpan(int days, int hours, int minutes, int seconds); // 0x000A78B4
	public TimeSpan(int days, int hours, int minutes, int seconds, int milliseconds); // 0x000A78D8
	private static TimeSpan(); // 0x0041D8B0

	// Methods
	internal static long CalculateTicks(int days, int hours, int minutes, int seconds, int milliseconds); // 0x0041D674
	public TimeSpan Add(TimeSpan ts); // 0x000A7B00
	public static int Compare(TimeSpan t1, TimeSpan t2); // 0x0041DD58
	public int CompareTo(object value); // 0x000A7B1C
	public int CompareTo(TimeSpan value); // 0x000A7B24
	public bool Equals(TimeSpan obj); // 0x000A7B40
	public TimeSpan Duration(); // 0x000A7B5C
	public override bool Equals(object value); // 0x000A7BC4
	public static bool Equals(TimeSpan t1, TimeSpan t2); // 0x0041E0C0
	public static TimeSpan FromDays(double value); // 0x0041E0D8
	public static TimeSpan FromHours(double value); // 0x0041E5EC
	public static TimeSpan FromMinutes(double value); // 0x0041E698
	public static TimeSpan FromSeconds(double value); // 0x0041E744
	public static TimeSpan FromMilliseconds(double value); // 0x0041E7F0
	private static TimeSpan From(double value, long tickMultiplicator); // 0x0041E188
	public static TimeSpan FromTicks(long value); // 0x0041E898
	public override int GetHashCode(); // 0x000A7BCC
	public TimeSpan Negate(); // 0x000A7BD8
	public static TimeSpan Parse(string s); // 0x0041E9CC
	public static bool TryParse(string s, out TimeSpan result); // 0x0041EE3C
	public TimeSpan Subtract(TimeSpan ts); // 0x000A7BEC
	public override string ToString(); // 0x000A7C08
	public static TimeSpan op_Addition(TimeSpan t1, TimeSpan t2); // 0x0041F540
	public static bool op_Equality(TimeSpan t1, TimeSpan t2); // 0x0041F574
	public static bool op_GreaterThan(TimeSpan t1, TimeSpan t2); // 0x0041F58C
	public static bool op_GreaterThanOrEqual(TimeSpan t1, TimeSpan t2); // 0x0041F5A4
	public static bool op_Inequality(TimeSpan t1, TimeSpan t2); // 0x0041F5BC
	public static bool op_LessThan(TimeSpan t1, TimeSpan t2); // 0x0041F5D0
	public static bool op_LessThanOrEqual(TimeSpan t1, TimeSpan t2); // 0x0041F5E8
	public static TimeSpan op_Subtraction(TimeSpan t1, TimeSpan t2); // 0x0041F600
	public static TimeSpan op_UnaryNegation(TimeSpan t); // 0x0041F634
	public static TimeSpan op_UnaryPlus(TimeSpan t); // 0x0041F650
}

// Namespace: 
private class Parser // TypeDefIndex: 1729
{
	// Fields
	private string _src; // 0x08
	private int _cur; // 0x0C
	private int _length; // 0x10
	private bool formatError; // 0x14

	// Properties
	public bool AtEnd { get; } // 0x0041F660 

	// Constructors
	public Parser(string src); // 0x0041EAB8

	// Methods
	private void ParseWhiteSpace(); // 0x0041F678
	private bool ParseSign(); // 0x0041F734
	private int ParseInt(bool optional); // 0x0041F798
	private bool ParseOptDot(); // 0x0041F95C
	private void ParseOptColon(); // 0x0041F9C0
	private long ParseTicks(); // 0x0041FA24
	public TimeSpan Execute(); // 0x0041EAF0
}

// Namespace: System
[Serializable]
public abstract class TimeZone // TypeDefIndex: 1730
{
	// Fields
	private static TimeZone currentTimeZone; // 0x00
	[NonSerialized]	private static object tz_lock; // 0x04
	[NonSerialized]	private static long timezone_check; // 0x08

	// Properties
	public static TimeZone CurrentTimeZone { get; } // 0x0041FC14 
	public abstract string DaylightName { get; }
	public abstract string StandardName { get; }

	// Constructors
	protected TimeZone(); // 0x0041FB8C
	private static TimeZone(); // 0x0041FB94

	// Methods
	public abstract DaylightTime GetDaylightChanges(int year);
	public abstract TimeSpan GetUtcOffset(DateTime time);
	public virtual bool IsDaylightSavingTime(DateTime time); // 0x0041FEA4
	public static bool IsDaylightSavingTime(DateTime time, DaylightTime daylightTimes); // 0x0041FF80
	public virtual DateTime ToLocalTime(DateTime time); // 0x00420254
	public virtual DateTime ToUniversalTime(DateTime time); // 0x004207C4
	internal TimeSpan GetLocalTimeDiff(DateTime time); // 0x00420B24
	internal TimeSpan GetLocalTimeDiff(DateTime time, TimeSpan utc_offset); // 0x00420B94
}

// Namespace: System
[Serializable]
internal class CurrentSystemTimeZone : TimeZone, IDeserializationCallback // TypeDefIndex: 1731
{
	// Fields
	private string m_standardName; // 0x08
	private string m_daylightName; // 0x0C
	private Hashtable m_CachedDaylightChanges; // 0x10
	private long m_ticksOffset; // 0x18
	[NonSerialized]	private TimeSpan utcOffsetWithOutDLS; // 0x20
	[NonSerialized]	private TimeSpan utcOffsetWithDLS; // 0x28
	private static int this_year; // 0x00
	private static DaylightTime this_year_dlt; // 0x04

	// Properties
	public override string DaylightName { get; } // 0x004ABE70 
	public override string StandardName { get; } // 0x004ABE78 

	// Constructors
	internal CurrentSystemTimeZone(); // 0x004AB484
	internal CurrentSystemTimeZone(long lnow); // 0x004AB530

	// Methods
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender); // 0x004ABE68
	private static bool GetTimeZoneData(int year, out long[] data, out string[] names); // 0x004ABAC8
	public override DaylightTime GetDaylightChanges(int year); // 0x004ABE80
	public override TimeSpan GetUtcOffset(DateTime time); // 0x004AC258
	private void OnDeserialization(DaylightTime dlt); // 0x004ABC10
	private DaylightTime GetDaylightTimeFromData(long[] data); // 0x004ABACC
}

// Namespace: 
internal enum TimeZoneData // TypeDefIndex: 1732
{
	DaylightSavingStartIdx = 0,
	DaylightSavingEndIdx = 1,
	UtcOffsetIdx = 2,
	AdditionalDaylightOffsetIdx = 3
}

// Namespace: 
internal enum TimeZoneNames // TypeDefIndex: 1733
{
	StandardNameIdx = 0,
	DaylightNameIdx = 1
}

// Namespace: System
[Serializable]
public class TimeoutException : SystemException // TypeDefIndex: 1734
{
	// Fields
	private const int Result = -2146233083; // 0x00

	// Constructors
	public TimeoutException(); // 0x00420F30
	public TimeoutException(string message); // 0x00420FB0
	public TimeoutException(string message, Exception innerException); // 0x00420FD4
	protected TimeoutException(SerializationInfo info, StreamingContext context); // 0x00420FF8

}

// Namespace: System
[Serializable]
public enum TypeCode // TypeDefIndex: 1735
{
	Empty = 0,
	Object = 1,
	DBNull = 2,
	Boolean = 3,
	Char = 4,
	SByte = 5,
	Byte = 6,
	Int16 = 7,
	UInt16 = 8,
	Int32 = 9,
	UInt32 = 10,
	Int64 = 11,
	UInt64 = 12,
	Single = 13,
	Double = 14,
	Decimal = 15,
	DateTime = 16,
	String = 18
}

// Namespace: System
[Serializable]
public sealed class TypeInitializationException : SystemException // TypeDefIndex: 1736
{
	// Fields
	private string type_name; // 0x34

	// Properties
	public string TypeName { get; } // 0x00426770 

	// Constructors
	public TypeInitializationException(string fullTypeName, Exception innerException); // 0x00426600
	internal TypeInitializationException(SerializationInfo info, StreamingContext context); // 0x004266C4

	// Methods
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00426778
}

// Namespace: System
[Serializable]
public class TypeLoadException : SystemException // TypeDefIndex: 1737
{
	// Fields
	private const int Result = -2146233054; // 0x00
	private string className; // 0x34
	private string assemblyName; // 0x38

	// Properties
	public override string Message { get; } // 0x0042698C 
	public string TypeName { get; } // 0x00426AF8 

	// Constructors
	public TypeLoadException(); // 0x00425AF8
	public TypeLoadException(string message); // 0x00422658
	public TypeLoadException(string message, Exception inner); // 0x00426828
	internal TypeLoadException(string className, string assemblyName); // 0x0042684C
	protected TypeLoadException(SerializationInfo info, StreamingContext context); // 0x00426870

	// Methods
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00426B94
}

// Namespace: System
[Serializable]
public class TypeUnloadedException : SystemException // TypeDefIndex: 1738
{
	// Constructors
	public TypeUnloadedException(); // 0x00426DF0
	public TypeUnloadedException(string message); // 0x00426E64
	protected TypeUnloadedException(SerializationInfo info, StreamingContext context); // 0x00426E6C
	public TypeUnloadedException(string message, Exception innerException); // 0x00426E8C

}

// Namespace: System
[Serializable]
public class UnauthorizedAccessException : SystemException // TypeDefIndex: 1739
{
	// Fields
	private const int Result = -2146233088; // 0x00

	// Constructors
	public UnauthorizedAccessException(); // 0x0055AAB0
	public UnauthorizedAccessException(string message); // 0x0055AB30
	public UnauthorizedAccessException(string message, Exception inner); // 0x0055AB54
	protected UnauthorizedAccessException(SerializationInfo info, StreamingContext context); // 0x0055AB78

}

// Namespace: System
[Serializable]
public class UnhandledExceptionEventArgs : EventArgs // TypeDefIndex: 1740
{
	// Fields
	private object exception; // 0x08
	private bool m_isTerminating; // 0x0C

	// Properties
	public object ExceptionObject { get; } // 0x0055AC2C 
	public bool IsTerminating { get; } // 0x0055AC34 

	// Constructors
	public UnhandledExceptionEventArgs(object exception, bool isTerminating); // 0x0055AB98

}

// Namespace: System
[Serializable]
internal class UnitySerializationHolder : ISerializable, IObjectReference // TypeDefIndex: 1741
{
	// Fields
	private string _data; // 0x08
	private UnityType _unityType; // 0x0C
	private string _assemblyName; // 0x10

	// Constructors
	private UnitySerializationHolder(SerializationInfo info, StreamingContext ctx); // 0x0055B040

	// Methods
	public static void GetTypeData(Type instance, SerializationInfo info, StreamingContext ctx); // 0x0055B148
	public static void GetDBNullData(DBNull instance, SerializationInfo info, StreamingContext ctx); // 0x0055B318
	public static void GetAssemblyData(Assembly instance, SerializationInfo info, StreamingContext ctx); // 0x0055B4F0
	public static void GetModuleData(Module instance, SerializationInfo info, StreamingContext ctx); // 0x0055B698
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0055B840
	public virtual object GetRealObject(StreamingContext context); // 0x0055B8C8
}

// Namespace: 
private enum UnityType : byte // TypeDefIndex: 1742
{
	DBNull = 2,
	Type = 4,
	Module = 5,
	Assembly = 6
}

// Namespace: System
internal struct Variant // TypeDefIndex: 1743
{
	// Fields
	public short vt; // 0x08
	public ushort wReserved1; // 0x0A
	public ushort wReserved2; // 0x0C
	public ushort wReserved3; // 0x0E
	public long llVal; // 0x10
	public int lVal; // 0x10
	public byte bVal; // 0x10
	public short iVal; // 0x10
	public float fltVal; // 0x10
	public double dblVal; // 0x10
	public short boolVal; // 0x10
	public IntPtr bstrVal; // 0x10
	public sbyte cVal; // 0x10
	public ushort uiVal; // 0x10
	public uint ulVal; // 0x10
	public ulong ullVal; // 0x10
	public int intVal; // 0x10
	public uint uintVal; // 0x10
	public IntPtr pdispVal; // 0x10
	public BRECORD bRecord; // 0x10

	// Methods
	public void SetValue(object obj); // 0x000C7BA0
	public object GetValue(); // 0x000C7BA8
	public void Clear(); // 0x000C7BB0
}

// Namespace: System
internal struct BRECORD // TypeDefIndex: 1744
{
	// Fields
	private IntPtr pvRecord; // 0x08
	private IntPtr pRecInfo; // 0x0C

}

// Namespace: System
[Serializable]
public sealed class Version : IComparable, ICloneable, IComparable`1<Version>, IEquatable`1<Version> // TypeDefIndex: 1745
{
	// Fields
	private const int UNDEFINED = -1; // 0x00
	private int _Major; // 0x08
	private int _Minor; // 0x0C
	private int _Build; // 0x10
	private int _Revision; // 0x14

	// Properties
	public int Build { get; } // 0x0055D19C 
	public int Major { get; } // 0x0055D1A4 
	public int Minor { get; } // 0x0055D1AC 
	public int Revision { get; } // 0x0055D1B4 
	public short MajorRevision { get; } // 0x0055D1BC 
	public short MinorRevision { get; } // 0x0055D1C4 

	// Constructors
	public Version(); // 0x0055CC10
	public Version(string version); // 0x0055CE58
	public Version(int major, int minor); // 0x0055D0C0
	public Version(int major, int minor, int build); // 0x0055D108
	public Version(int major, int minor, int build, int revision); // 0x0055D150

	// Methods
	private void CheckedSet(int defined, int major, int minor, int build, int revision); // 0x0055CC84
	public object Clone(); // 0x0055D1CC
	public int CompareTo(object version); // 0x0055D2DC
	public override bool Equals(object obj); // 0x0055D470
	public int CompareTo(Version value); // 0x0055D3C8
	public bool Equals(Version obj); // 0x0055D4F8
	public override int GetHashCode(); // 0x0055D5A0
	public override string ToString(); // 0x0055D5C0
	public string ToString(int fieldCount); // 0x0055D758
	internal static Version CreateFromString(string info); // 0x0055DF90
	public static bool op_Equality(Version v1, Version v2); // 0x0055D580
	public static bool op_Inequality(Version v1, Version v2); // 0x0055D588
	public static bool op_GreaterThan(Version v1, Version v2); // 0x0055E23C
	public static bool op_GreaterThanOrEqual(Version v1, Version v2); // 0x0055E27C
	public static bool op_LessThan(Version v1, Version v2); // 0x0055E2BC
	public static bool op_LessThanOrEqual(Version v1, Version v2); // 0x0055E2F0
}

// Namespace: System
[Serializable]
public class WeakReference : ISerializable // TypeDefIndex: 1746
{
	// Fields
	private bool isLongReference; // 0x08
	private GCHandle gcHandle; // 0x0C

	// Properties
	public virtual bool IsAlive { get; } // 0x0055E524 
	public virtual object Target { get; set; } // 0x0055E548 0x0055E554
	public virtual bool TrackResurrection { get; } // 0x0055E560 

	// Constructors
	protected WeakReference(); // 0x0055E330
	public WeakReference(object target); // 0x0055E338
	public WeakReference(object target, bool trackResurrection); // 0x0055E370
	protected WeakReference(SerializationInfo info, StreamingContext context); // 0x0055E3D0

	// Methods
	private void AllocateHandle(object target); // 0x0055E3A8
	protected override void Finalize(); // 0x0055E568
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0055E5D4
}

// Namespace: System
public interface _AppDomain // TypeDefIndex: 1747
{
	// Properties
	string BaseDirectory { get; }
	string DynamicDirectory { get; }
	Evidence Evidence { get; }
	string FriendlyName { get; }
	string RelativeSearchPath { get; }
	bool ShadowCopyFiles { get; }

	// Events
	event AssemblyLoadEventHandler AssemblyLoad {
		add; // 0x00000000
		remove; // 0x00000000
	}
	event ResolveEventHandler AssemblyResolve {
		add; // 0x00000000
		remove; // 0x00000000
	}
	event EventHandler DomainUnload {
		add; // 0x00000000
		remove; // 0x00000000
	}
	event EventHandler ProcessExit {
		add; // 0x00000000
		remove; // 0x00000000
	}
	event ResolveEventHandler ResourceResolve {
		add; // 0x00000000
		remove; // 0x00000000
	}
	event ResolveEventHandler TypeResolve {
		add; // 0x00000000
		remove; // 0x00000000
	}
	event UnhandledExceptionEventHandler UnhandledException {
		add; // 0x00000000
		remove; // 0x00000000
	}

	// Methods
	void AppendPrivatePath(string path);
	void ClearPrivatePath();
	void ClearShadowCopyPath();
	ObjectHandle CreateInstance(string assemblyName, string typeName);
	ObjectHandle CreateInstance(string assemblyName, string typeName, object[] activationAttributes);
	ObjectHandle CreateInstance(string assemblyName, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes, Evidence securityAttributes);
	ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName);
	ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName, object[] activationAttributes);
	ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes, Evidence securityAttributes);
	AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access);
	AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, Evidence evidence);
	AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, string dir);
	AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, string dir, Evidence evidence);
	AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions);
	AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, Evidence evidence, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions);
	AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, string dir, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions);
	AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, string dir, Evidence evidence, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions);
	AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, string dir, Evidence evidence, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions, bool isSynchronized);
	void DoCallBack(CrossAppDomainDelegate theDelegate);
	bool Equals(object other);
	int ExecuteAssembly(string assemblyFile);
	int ExecuteAssembly(string assemblyFile, Evidence assemblySecurity);
	int ExecuteAssembly(string assemblyFile, Evidence assemblySecurity, string[] args);
	Assembly[] GetAssemblies();
	object GetData(string name);
	int GetHashCode();
	object GetLifetimeService();
	Type GetType();
	object InitializeLifetimeService();
	Assembly Load(AssemblyName assemblyRef);
	Assembly Load(byte[] rawAssembly);
	Assembly Load(string assemblyString);
	Assembly Load(AssemblyName assemblyRef, Evidence assemblySecurity);
	Assembly Load(byte[] rawAssembly, byte[] rawSymbolStore);
	Assembly Load(string assemblyString, Evidence assemblySecurity);
	Assembly Load(byte[] rawAssembly, byte[] rawSymbolStore, Evidence securityEvidence);
	void SetAppDomainPolicy(PolicyLevel domainPolicy);
	void SetCachePath(string s);
	void SetData(string name, object data);
	void SetPrincipalPolicy(PrincipalPolicy policy);
	void SetShadowCopyPath(string s);
	void SetThreadPrincipal(IPrincipal principal);
	string ToString();
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System
internal class __ComObject : MarshalByRefObject // TypeDefIndex: 1748
{
	// Fields
	private IntPtr iunknown; // 0x0C
	private IntPtr hash_table; // 0x10

	// Properties
	internal IntPtr IUnknown { get; } // 0x0055F000 
	internal IntPtr IDispatch { get; } // 0x0055F0BC 
	internal static Guid IID_IUnknown { get; } // 0x0055EAA4 
	internal static Guid IID_IDispatch { get; } // 0x0055F1DC 

	// Constructors
	public __ComObject(); // 0x0055E798
	internal __ComObject(Type t); // 0x0055E9AC
	internal __ComObject(IntPtr pItf); // 0x0055E9D4

	// Methods
	internal static __ComObject CreateRCW(Type t); // 0x0055EB14
	private void ReleaseInterfaces(); // 0x0055EB18
	protected override void Finalize(); // 0x0055EB1C
	internal void Initialize(Type t); // 0x0055E7C8
	private static Guid GetCLSID(Type t); // 0x0055EB80
	internal IntPtr GetInterfaceInternal(Type t, bool throwException); // 0x0055EEF0
	internal IntPtr GetInterface(Type t, bool throwException); // 0x0055EEF4
	internal IntPtr GetInterface(Type t); // 0x0055EFD8
	private void CheckIUnknown(); // 0x0055EF20
	public override bool Equals(object obj); // 0x0055F24C
	public override int GetHashCode(); // 0x0055F31C
	private static extern int CoCreateInstance(Guid rclsid, IntPtr pUnkOuter, uint dwClsContext, Guid riid, out IntPtr pUnk); // 0x0055EDB0
}

// Namespace: Mono.Math.Prime
internal delegate bool PrimalityTest(BigInteger bi, ConfidenceFactor confidence); // TypeDefIndex: 1749; 0x004542B0

// Namespace: System.Reflection
[Serializable]
public delegate bool MemberFilter(MemberInfo m, object filterCriteria); // TypeDefIndex: 1750; 0x002812D8

// Namespace: System.Reflection
[Serializable]
public delegate Module ModuleResolveEventHandler(object sender, ResolveEventArgs e); // TypeDefIndex: 1751; 0x00285684

// Namespace: System.Reflection
internal delegate object GetterAdapter(object _this); // TypeDefIndex: 1752; 0x00280CB8

// Namespace: System.Reflection
internal delegate T Getter`2(T _this); // TypeDefIndex: 1753; 0x00000000

// Namespace: System.Reflection
[Serializable]
public delegate bool TypeFilter(Type m, object filterCriteria); // TypeDefIndex: 1754; 0x0036AC58

// Namespace: System.Runtime.InteropServices
public delegate IntPtr ObjectCreationDelegate(IntPtr aggregator); // TypeDefIndex: 1755; 0x002BD150

// Namespace: System.Runtime.Remoting.Contexts
public delegate void CrossContextDelegate(); // TypeDefIndex: 1756; 0x00302A38

// Namespace: System.Runtime.Remoting.Messaging
public delegate object HeaderHandler(Header[] headers); // TypeDefIndex: 1757; 0x003129A4

// Namespace: System.Runtime.Remoting.Messaging
public delegate bool MessageSurrogateFilter(string key, object value); // TypeDefIndex: 1758; 0x00313754

// Namespace: System.Threading
public delegate void ContextCallback(object state); // TypeDefIndex: 1759; 0x004102B4

// Namespace: System.Threading
public delegate void IOCompletionCallback(uint errorCode, uint numBytes, void * pOVERLAP); // TypeDefIndex: 1760; 0x00411858

// Namespace: System.Threading
public delegate void ParameterizedThreadStart(object obj); // TypeDefIndex: 1761; 0x00413390

// Namespace: System.Threading
public delegate void SendOrPostCallback(object state); // TypeDefIndex: 1762; 0x00415C4C

// Namespace: System.Threading
public delegate void ThreadStart(); // TypeDefIndex: 1763; 0x004197EC

// Namespace: System.Threading
public delegate void TimerCallback(object state); // TypeDefIndex: 1764; 0x0041B3E8

// Namespace: System.Threading
public delegate void WaitCallback(object state); // TypeDefIndex: 1765; 0x0041B7B0

// Namespace: System.Threading
public delegate void WaitOrTimerCallback(object state, bool timedOut); // TypeDefIndex: 1766; 0x004157D0

// Namespace: System
public delegate void Action`1(T obj); // TypeDefIndex: 1767; 0x00000000

// Namespace: System
[Serializable]
public delegate void AppDomainInitializer(string[] args); // TypeDefIndex: 1768; 0x002708E4

// Namespace: System
[Serializable]
public delegate void AssemblyLoadEventHandler(object sender, AssemblyLoadEventArgs args); // TypeDefIndex: 1769; 0x004F3DEC

// Namespace: System
public delegate int Comparison`1(T x, T y); // TypeDefIndex: 1770; 0x00000000

// Namespace: System
public delegate void ConsoleCancelEventHandler(object sender, ConsoleCancelEventArgs e); // TypeDefIndex: 1771; 0x0039AC10

// Namespace: System
public delegate T Converter`2(T input); // TypeDefIndex: 1772; 0x00000000

// Namespace: System
public delegate void CrossAppDomainDelegate(); // TypeDefIndex: 1773; 0x004AB01C

// Namespace: System
[Serializable]
public delegate void EventHandler`1(object sender, T e); // TypeDefIndex: 1774; 0x00000000

// Namespace: System
[Serializable]
public delegate void EventHandler(object sender, EventArgs e); // TypeDefIndex: 1775; 0x002E0474

// Namespace: System
public delegate bool Predicate`1(T obj); // TypeDefIndex: 1776; 0x00000000

// Namespace: System
[Serializable]
public delegate Assembly ResolveEventHandler(object sender, ResolveEventArgs args); // TypeDefIndex: 1777; 0x0036B11C

// Namespace: System
[Serializable]
public delegate void UnhandledExceptionEventHandler(object sender, UnhandledExceptionEventArgs e); // TypeDefIndex: 1778; 0x0055AC50

// Namespace: 
internal class <PrivateImplementationDetails> // TypeDefIndex: 1779
{
	// Fields
	internal static $ArrayType$56 $$field-0 = null; // 0x00
	internal static $ArrayType$24 $$field-1 = null; // 0x38
	internal static $ArrayType$24 $$field-2 = null; // 0x50
	internal static $ArrayType$24 $$field-3 = null; // 0x68
	internal static $ArrayType$24 $$field-4 = null; // 0x80
	internal static $ArrayType$16 $$field-5 = null; // 0x98
	internal static $ArrayType$16 $$field-6 = null; // 0xA8
	internal static $ArrayType$40 $$field-7 = null; // 0xB8
	internal static $ArrayType$40 $$field-8 = null; // 0xE0
	internal static $ArrayType$36 $$field-9 = null; // 0x108
	internal static $ArrayType$36 $$field-10 = null; // 0x12C
	internal static $ArrayType$120 $$field-11 = null; // 0x150
	internal static $ArrayType$120 $$field-12 = null; // 0x1C8
	internal static $ArrayType$36 $$field-13 = null; // 0x240
	internal static $ArrayType$36 $$field-14 = null; // 0x264
	internal static $ArrayType$3132 $$field-15 = null; // 0x288
	internal static $ArrayType$20 $$field-16 = null; // 0xEC4
	internal static $ArrayType$32 $$field-17 = null; // 0xED8
	internal static $ArrayType$48 $$field-18 = null; // 0xEF8
	internal static $ArrayType$64 $$field-19 = null; // 0xF28
	internal static $ArrayType$64 $$field-20 = null; // 0xF68
	internal static $ArrayType$64 $$field-21 = null; // 0xFA8
	internal static $ArrayType$64 $$field-22 = null; // 0xFE8
	internal static $ArrayType$12 $$field-23 = null; // 0x1028
	internal static $ArrayType$12 $$field-24 = null; // 0x1034
	internal static $ArrayType$12 $$field-25 = null; // 0x1040
	internal static $ArrayType$16 $$field-26 = null; // 0x104C
	internal static $ArrayType$136 $$field-27 = null; // 0x105C
	internal static $ArrayType$8 $$field-28 = null; // 0x10E4
	internal static $ArrayType$84 $$field-29 = null; // 0x10EC
	internal static $ArrayType$72 $$field-30 = null; // 0x1140
	internal static $ArrayType$8 $$field-31 = null; // 0x1188
	internal static $ArrayType$20 $$field-32 = null; // 0x1190
	internal static $ArrayType$64 $$field-33 = null; // 0x11A4
	internal static $ArrayType$124 $$field-34 = null; // 0x11E4
	internal static $ArrayType$32 $$field-35 = null; // 0x1260
	internal static $ArrayType$96 $$field-36 = null; // 0x1280
	internal static $ArrayType$2048 $$field-37 = null; // 0x12E0
	internal static $ArrayType$56 $$field-38 = null; // 0x1AE0
	internal static $ArrayType$16 $$field-39 = null; // 0x1B18
	internal static $ArrayType$48 $$field-40 = null; // 0x1B28
	internal static $ArrayType$2048 $$field-41 = null; // 0x1B58
	internal static $ArrayType$2048 $$field-42 = null; // 0x2358
	internal static $ArrayType$256 $$field-43 = null; // 0x2B58
	internal static $ArrayType$256 $$field-44 = null; // 0x2C58
	internal static $ArrayType$120 $$field-45 = null; // 0x2D58
	internal static $ArrayType$256 $$field-46 = null; // 0x2DD0
	internal static $ArrayType$256 $$field-47 = null; // 0x2ED0
	internal static $ArrayType$1024 $$field-48 = null; // 0x2FD0
	internal static $ArrayType$1024 $$field-49 = null; // 0x33D0
	internal static $ArrayType$1024 $$field-50 = null; // 0x37D0
	internal static $ArrayType$1024 $$field-51 = null; // 0x3BD0
	internal static $ArrayType$1024 $$field-52 = null; // 0x3FD0
	internal static $ArrayType$1024 $$field-53 = null; // 0x43D0
	internal static $ArrayType$1024 $$field-54 = null; // 0x47D0
	internal static $ArrayType$1024 $$field-55 = null; // 0x4BD0
	internal static $ArrayType$256 $$field-56 = null; // 0x4FD0
	internal static $ArrayType$640 $$field-57 = null; // 0x50D0
	internal static $ArrayType$96 $$field-58 = null; // 0x5350
	internal static $ArrayType$160 $$field-59 = null; // 0x53B0
	internal static $ArrayType$12 $$field-60 = null; // 0x5450
	internal static $ArrayType$380 $$field-61 = null; // 0x545C
	internal static $ArrayType$128 $$field-62 = null; // 0x55D8
	internal static $ArrayType$256 $$field-63 = null; // 0x5658
	internal static $ArrayType$52 $$field-64 = null; // 0x5758
	internal static $ArrayType$52 $$field-65 = null; // 0x578C
	internal static $ArrayType$1668 $$field-66 = null; // 0x57C0
	internal static $ArrayType$2100 $$field-67 = null; // 0x5E44
	internal static $ArrayType$1452 $$field-68 = null; // 0x6678

	// Constructors
	public <PrivateImplementationDetails>(); // 0x003EC430

}

// Namespace: 
private struct $ArrayType$56 // TypeDefIndex: 1780
{
}

// Namespace: 
private struct $ArrayType$24 // TypeDefIndex: 1781
{
}

// Namespace: 
private struct $ArrayType$16 // TypeDefIndex: 1782
{
}

// Namespace: 
private struct $ArrayType$40 // TypeDefIndex: 1783
{
}

// Namespace: 
private struct $ArrayType$36 // TypeDefIndex: 1784
{
}

// Namespace: 
private struct $ArrayType$120 // TypeDefIndex: 1785
{
}

// Namespace: 
private struct $ArrayType$3132 // TypeDefIndex: 1786
{
}

// Namespace: 
private struct $ArrayType$20 // TypeDefIndex: 1787
{
}

// Namespace: 
private struct $ArrayType$32 // TypeDefIndex: 1788
{
}

// Namespace: 
private struct $ArrayType$48 // TypeDefIndex: 1789
{
}

// Namespace: 
private struct $ArrayType$64 // TypeDefIndex: 1790
{
}

// Namespace: 
private struct $ArrayType$12 // TypeDefIndex: 1791
{
}

// Namespace: 
private struct $ArrayType$136 // TypeDefIndex: 1792
{
}

// Namespace: 
private struct $ArrayType$8 // TypeDefIndex: 1793
{
}

// Namespace: 
private struct $ArrayType$84 // TypeDefIndex: 1794
{
}

// Namespace: 
private struct $ArrayType$72 // TypeDefIndex: 1795
{
}

// Namespace: 
private struct $ArrayType$124 // TypeDefIndex: 1796
{
}

// Namespace: 
private struct $ArrayType$96 // TypeDefIndex: 1797
{
}

// Namespace: 
private struct $ArrayType$2048 // TypeDefIndex: 1798
{
}

// Namespace: 
private struct $ArrayType$256 // TypeDefIndex: 1799
{
}

// Namespace: 
private struct $ArrayType$1024 // TypeDefIndex: 1800
{
}

// Namespace: 
private struct $ArrayType$640 // TypeDefIndex: 1801
{
}

// Namespace: 
private struct $ArrayType$160 // TypeDefIndex: 1802
{
}

// Namespace: 
private struct $ArrayType$380 // TypeDefIndex: 1803
{
}

// Namespace: 
private struct $ArrayType$128 // TypeDefIndex: 1804
{
}

// Namespace: 
private struct $ArrayType$52 // TypeDefIndex: 1805
{
}

// Namespace: 
private struct $ArrayType$1668 // TypeDefIndex: 1806
{
}

// Namespace: 
private struct $ArrayType$2100 // TypeDefIndex: 1807
{
}

// Namespace: 
private struct $ArrayType$1452 // TypeDefIndex: 1808
{
}

// Namespace: System
internal class __Il2CppComObject // TypeDefIndex: 1809
{
	// Methods
	protected override void Finalize(); // 0x0055F33C
}

// Namespace: Il2CppTests.TestSources
internal class GenericClass`1 // TypeDefIndex: 1811
{
	// Constructors
	public GenericClass`1();

	// Methods
	public void GenericMethodWithClassGenericTypeParameter(T v);
}
