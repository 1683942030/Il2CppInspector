// Image 0: mscorlib.dll - 0
// Image 1: Generics.dll - 1810

// Namespace: System
[Serializable]
public class Object // TypeDefIndex: 1
{
	// Constructors
	public Object(); // 0x00000001800EA7B0

	// Methods
	public virtual bool Equals(object obj); // 0x0000000180124930
	public static bool Equals(object objA, object objB); // 0x0000000180124900
	protected override void Finalize(); // 0x00000001800EA7B0
	public virtual int GetHashCode(); // 0x0000000180124940
	public Type GetType(); // 0x0000000180116F80
	protected object MemberwiseClone(); // 0x0000000180124950
	public virtual string ToString(); // 0x0000000180124960
	public static bool ReferenceEquals(object objA, object objB); // 0x0000000180124930
	internal static int InternalGetHashCode(object o); // 0x0000000180124940
	internal IntPtr obj_address(); // 0x0000000180124990
	private void FieldGetter(string typeName, string fieldName, object val); // 0x00000001800EA7B0
	private void FieldSetter(string typeName, string fieldName, object val); // 0x00000001800EA7B0
}

// Namespace: System
[Serializable]
public abstract class ValueType // TypeDefIndex: 2
{
	// Constructors
	protected ValueType(); // 0x00000001800E2000

	// Methods
	private static bool InternalEquals(object o1, object o2, out object[] fields); // 0x00000001803DD570
	internal static bool DefaultEquals(object o1, object o2); // 0x00000001803DD340
	public override bool Equals(object obj); // 0x00000001803DD400
	internal static int InternalGetHashCode(object o, out object[] fields); // 0x00000001803DD580
	public override int GetHashCode(); // 0x00000001803DD4D0
	public override string ToString(); // 0x00000001803DD590
}

// Namespace: System
[Serializable]
public abstract class Attribute : _Attribute // TypeDefIndex: 3
{
	// Properties
	public virtual object TypeId { get; } // 0x0000000180199040 

	// Constructors
	protected Attribute(); // 0x00000001800E2000

	// Methods
	private void System.Runtime.InteropServices._Attribute.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x0000000180399410
	private void System.Runtime.InteropServices._Attribute.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x00000001803994B0
	private void System.Runtime.InteropServices._Attribute.GetTypeInfoCount(out uint pcTInfo); // 0x0000000180399460
	private void System.Runtime.InteropServices._Attribute.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x0000000180399500
	private static void CheckParameters(object element, Type attributeType); // 0x0000000180397D40
	private static Attribute FindAttribute(object[] attributes); // 0x0000000180397F20
	public static Attribute GetCustomAttribute(ParameterInfo element, Type attributeType); // 0x0000000180398020
	public static Attribute GetCustomAttribute(MemberInfo element, Type attributeType); // 0x0000000180398220
	public static Attribute GetCustomAttribute(Assembly element, Type attributeType); // 0x00000001803980F0
	public static Attribute GetCustomAttribute(Module element, Type attributeType); // 0x0000000180398150
	public static Attribute GetCustomAttribute(Module element, Type attributeType, bool inherit); // 0x0000000180398080
	public static Attribute GetCustomAttribute(Assembly element, Type attributeType, bool inherit); // 0x00000001803981B0
	public static Attribute GetCustomAttribute(ParameterInfo element, Type attributeType, bool inherit); // 0x00000001803982A0
	public static Attribute GetCustomAttribute(MemberInfo element, Type attributeType, bool inherit); // 0x0000000180398310
	public static Attribute[] GetCustomAttributes(Assembly element); // 0x0000000180398DC0
	public static Attribute[] GetCustomAttributes(ParameterInfo element); // 0x0000000180398960
	public static Attribute[] GetCustomAttributes(MemberInfo element); // 0x0000000180398DB0
	public static Attribute[] GetCustomAttributes(Module element); // 0x00000001803983A0
	public static Attribute[] GetCustomAttributes(Assembly element, Type attributeType); // 0x00000001803988C0
	public static Attribute[] GetCustomAttributes(Module element, Type attributeType); // 0x0000000180398AF0
	public static Attribute[] GetCustomAttributes(ParameterInfo element, Type attributeType); // 0x0000000180398D10
	public static Attribute[] GetCustomAttributes(MemberInfo element, Type type); // 0x0000000180398510
	public static Attribute[] GetCustomAttributes(Assembly element, Type attributeType, bool inherit); // 0x0000000180398460
	public static Attribute[] GetCustomAttributes(ParameterInfo element, Type attributeType, bool inherit); // 0x0000000180398810
	public static Attribute[] GetCustomAttributes(Module element, Type attributeType, bool inherit); // 0x0000000180398760
	public static Attribute[] GetCustomAttributes(MemberInfo element, Type type, bool inherit); // 0x0000000180398630
	public static Attribute[] GetCustomAttributes(Module element, bool inherit); // 0x0000000180398E80
	public static Attribute[] GetCustomAttributes(Assembly element, bool inherit); // 0x0000000180398F50
	public static Attribute[] GetCustomAttributes(MemberInfo element, bool inherit); // 0x0000000180398B90
	public static Attribute[] GetCustomAttributes(ParameterInfo element, bool inherit); // 0x0000000180398A20
	public override int GetHashCode(); // 0x000000018026AD10
	public virtual bool IsDefaultAttribute(); // 0x000000018011A0F0
	public static bool IsDefined(Module element, Type attributeType); // 0x0000000180399220
	public static bool IsDefined(ParameterInfo element, Type attributeType); // 0x0000000180399370
	public static bool IsDefined(MemberInfo element, Type attributeType); // 0x00000001803991C0
	public static bool IsDefined(Assembly element, Type attributeType); // 0x00000001803991D0
	public static bool IsDefined(MemberInfo element, Type attributeType, bool inherit); // 0x0000000180399080
	public static bool IsDefined(Assembly element, Type attributeType, bool inherit); // 0x0000000180399020
	public static bool IsDefined(Module element, Type attributeType, bool inherit); // 0x0000000180399310
	public static bool IsDefined(ParameterInfo element, Type attributeType, bool inherit); // 0x0000000180399270
	public virtual bool Match(object obj); // 0x00000001803993F0
	public override bool Equals(object obj); // 0x0000000180397E90
}

// Namespace: System.Runtime.InteropServices
public interface _Attribute // TypeDefIndex: 4
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System
[Serializable]
public struct Int32 : IFormattable, IConvertible, IComparable, IComparable`1<int>, IEquatable`1<int> // TypeDefIndex: 5
{
	// Fields
	public const int MaxValue = 2147483647; // 0x00
	public const int MinValue = -2147483648; // 0x10
	internal int m_value; // 0x10

	// Methods
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x00000001800034D0
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x0000000180003530
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x0000000180003590
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x00000001800035F0
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x0000000180003660
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x00000001800036D0
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x0000000180003730
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x00000001800034B0
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x0000000180003790
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x00000001800037F0
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x0000000180003850
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x00000001800038B0
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x0000000180003980
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x00000001800039E0
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x0000000180003A40
	public int CompareTo(object value); // 0x0000000180003310
	public override bool Equals(object obj); // 0x0000000180003420
	public override int GetHashCode(); // 0x00000001800034B0
	public int CompareTo(int value); // 0x0000000180003400
	public bool Equals(int obj); // 0x00000001800034A0
	internal static bool ProcessTrailingWhitespace(bool tryParse, string s, int position, Exception exc); // 0x0000000180127F70
	internal static bool Parse(string s, bool tryParse, out int result, out Exception exc); // 0x0000000180126C30
	public static int Parse(string s, IFormatProvider provider); // 0x0000000180126C20
	public static int Parse(string s, NumberStyles style); // 0x0000000180127E50
	internal static bool CheckStyle(NumberStyles style, bool tryParse, Exception exc); // 0x0000000180126290
	internal static bool JumpOverWhite(int pos, string s, bool reportError, bool tryParse, Exception exc); // 0x0000000180126B00
	internal static void FindSign(int pos, string s, NumberFormatInfo nfi, bool foundSign, bool negative); // 0x00000001801269A0
	internal static void FindCurrency(int pos, string s, NumberFormatInfo nfi, bool foundCurrency); // 0x00000001801264F0
	internal static bool FindExponent(int pos, string s, int exponent, bool tryParse, Exception exc); // 0x00000001801265E0
	internal static bool FindOther(int pos, string s, string other); // 0x00000001801268E0
	internal static bool ValidDigit(char e, bool allowHex); // 0x00000001801282A0
	internal static Exception GetFormatException(); // 0x0000000180126AA0
	internal static bool Parse(string s, NumberStyles style, IFormatProvider fp, bool tryParse, out int result, out Exception exc); // 0x0000000180126E70
	public static int Parse(string s); // 0x0000000180127F00
	public static int Parse(string s, NumberStyles style, IFormatProvider provider); // 0x0000000180127E60
	public static bool TryParse(string s, out int result); // 0x0000000180128200
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out int result); // 0x0000000180128250
	public override string ToString(); // 0x0000000180003B20
	public string ToString(IFormatProvider provider); // 0x0000000180003B80
	public string ToString(string format); // 0x0000000180003AB0
	public string ToString(string format, IFormatProvider provider); // 0x0000000180003AA0
	public TypeCode GetTypeCode(); // 0x00000001800034C0
}

// Namespace: System
public interface IFormattable // TypeDefIndex: 6
{
	// Methods
	string ToString(string format, IFormatProvider formatProvider);
}

// Namespace: System
public interface IConvertible // TypeDefIndex: 7
{
	// Methods
	TypeCode GetTypeCode();
	bool ToBoolean(IFormatProvider provider);
	byte ToByte(IFormatProvider provider);
	char ToChar(IFormatProvider provider);
	DateTime ToDateTime(IFormatProvider provider);
	Decimal ToDecimal(IFormatProvider provider);
	double ToDouble(IFormatProvider provider);
	short ToInt16(IFormatProvider provider);
	int ToInt32(IFormatProvider provider);
	long ToInt64(IFormatProvider provider);
	sbyte ToSByte(IFormatProvider provider);
	float ToSingle(IFormatProvider provider);
	string ToString(IFormatProvider provider);
	object ToType(Type conversionType, IFormatProvider provider);
	ushort ToUInt16(IFormatProvider provider);
	uint ToUInt32(IFormatProvider provider);
	ulong ToUInt64(IFormatProvider provider);
}

// Namespace: System
public interface IComparable // TypeDefIndex: 8
{
	// Methods
	int CompareTo(object obj);
}

// Namespace: System
public interface IComparable`1 // TypeDefIndex: 9
{
	// Methods
	int CompareTo(T other);
}

// Namespace: System
public sealed class SerializableAttribute : Attribute // TypeDefIndex: 10
{
	// Constructors
	public SerializableAttribute(); // 0x00000001800EAC90

}

// Namespace: System
[Serializable]
public sealed class AttributeUsageAttribute : Attribute // TypeDefIndex: 11
{
	// Fields
	private AttributeTargets valid_on; // 0x10
	private bool allow_multiple; // 0x15
	private bool inherited; // 0x00

	// Properties
	public bool AllowMultiple { get; set; } // 0x000000018029EB30 0x000000018029EB40
	public bool Inherited { get; set; } // 0x0000000180306140 0x0000000180306150
	public AttributeTargets ValidOn { get; } // 0x00000001800ECD10 

	// Constructors
	public AttributeUsageAttribute(AttributeTargets validOn); // 0x0000000180397D10

}

// Namespace: System.Runtime.InteropServices
public sealed class ComVisibleAttribute : Attribute // TypeDefIndex: 12
{
	// Fields
	private bool Visible; // 0x10

	// Properties
	public bool Value { get; } // 0x0000000180113840 

	// Constructors
	public ComVisibleAttribute(bool visibility); // 0x0000000180113810

}

// Namespace: System
public interface IEquatable`1 // TypeDefIndex: 13
{
	// Methods
	bool Equals(T other);
}

// Namespace: System
[Serializable]
public struct Int64 : IFormattable, IConvertible, IComparable, IComparable`1<long>, IEquatable`1<long> // TypeDefIndex: 14
{
	// Fields
	public const long MaxValue = 9223372036854775807; // 0x00
	public const long MinValue = -9223372036854775808; // 0x10
	internal long m_value; // 0x00

	// Methods
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x0000000180003DC0
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x0000000180003E20
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x0000000180003E80
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x0000000180003EE0
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x0000000180003F60
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x0000000180003FE0
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x0000000180004040
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x00000001800040A0
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x0000000180004100
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x0000000180004160
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x00000001800041C0
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x0000000180004220
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x00000001800042F0
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x0000000180004350
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x00000001800043B0
	public int CompareTo(object value); // 0x0000000180003BF0
	public override bool Equals(object obj); // 0x0000000180003D00
	public override int GetHashCode(); // 0x0000000180003DA0
	public int CompareTo(long value); // 0x0000000180003CE0
	public bool Equals(long obj); // 0x0000000180003D90
	internal static bool Parse(string s, bool tryParse, out long result, out Exception exc); // 0x00000001801297A0
	public static long Parse(string s, IFormatProvider provider); // 0x0000000180128490
	public static long Parse(string s, NumberStyles style); // 0x0000000180128410
	internal static bool Parse(string s, NumberStyles style, IFormatProvider fp, bool tryParse, out long result, out Exception exc); // 0x0000000180128540
	public static long Parse(string s); // 0x0000000180128420
	public static long Parse(string s, NumberStyles style, IFormatProvider provider); // 0x00000001801284A0
	public static bool TryParse(string s, out long result); // 0x0000000180129C00
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out long result); // 0x0000000180129BB0
	public override string ToString(); // 0x0000000180004410
	public string ToString(IFormatProvider provider); // 0x00000001800044F0
	public string ToString(string format); // 0x0000000180004470
	public string ToString(string format, IFormatProvider provider); // 0x00000001800044E0
	public TypeCode GetTypeCode(); // 0x0000000180003DB0
}

// Namespace: System
[Serializable]
public struct UInt32 : IFormattable, IConvertible, IComparable, IComparable`1<uint>, IEquatable`1<uint> // TypeDefIndex: 15
{
	// Fields
	public const uint MaxValue = 4294967295; // 0x00
	public const uint MinValue = 0; // 0x10
	internal uint m_value; // 0x00

	// Methods
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x000000018001C450
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x000000018001C4B0
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x000000018001C510
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x000000018001C570
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x000000018001C5E0
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x000000018001C650
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x000000018001C6B0
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x000000018001C710
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x000000018001C770
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x000000018001C7D0
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x000000018001C830
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x000000018001C890
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x000000018001C960
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x00000001800034B0
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x000000018001C9C0
	public int CompareTo(object value); // 0x000000018001C2D0
	public override bool Equals(object obj); // 0x000000018001C3C0
	public override int GetHashCode(); // 0x00000001800034B0
	public int CompareTo(uint value); // 0x000000018001C2B0
	public bool Equals(uint obj); // 0x00000001800034A0
	internal static bool Parse(string s, bool tryParse, out uint result, out Exception exc); // 0x00000001802EF640
	internal static bool Parse(string s, NumberStyles style, IFormatProvider provider, bool tryParse, out uint result, out Exception exc); // 0x00000001802EEAA0
	public static uint Parse(string s); // 0x00000001802EF5D0
	public static uint Parse(string s, NumberStyles style, IFormatProvider provider); // 0x00000001802EF530
	public static uint Parse(string s, IFormatProvider provider); // 0x00000001802EEA90
	public static uint Parse(string s, NumberStyles style); // 0x00000001802EF520
	public static bool TryParse(string s, out uint result); // 0x00000001802EFAA0
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out uint result); // 0x00000001802EFA50
	public override string ToString(); // 0x000000018001CB10
	public string ToString(IFormatProvider provider); // 0x000000018001CAA0
	public string ToString(string format); // 0x000000018001CA30
	public string ToString(string format, IFormatProvider provider); // 0x000000018001CA20
	public TypeCode GetTypeCode(); // 0x000000018001C440
}

// Namespace: System
[Serializable]
public sealed class CLSCompliantAttribute : Attribute // TypeDefIndex: 16
{
	// Fields
	private bool is_compliant; // 0x10

	// Properties
	public bool IsCompliant { get; } // 0x0000000180113840 

	// Constructors
	public CLSCompliantAttribute(bool isCompliant); // 0x000000018039DB30

}

// Namespace: System
[Serializable]
public struct UInt64 : IFormattable, IConvertible, IComparable, IComparable`1<ulong>, IEquatable`1<ulong> // TypeDefIndex: 17
{
	// Fields
	public const ulong MaxValue = 18446744073709551615; // 0x00
	public const ulong MinValue = 0; // 0x10
	internal ulong m_value; // 0x00

	// Methods
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x000000018001CD30
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x000000018001CD90
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x000000018001CDF0
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x000000018001CE50
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x000000018001CED0
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x000000018001CF50
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x000000018001CFB0
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x000000018001D010
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x000000018001D070
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x000000018001D0D0
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x000000018001D130
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x000000018001D190
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x000000018001D260
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x000000018001D2C0
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x0000000180002060
	public int CompareTo(object value); // 0x000000018001CB70
	public override bool Equals(object obj); // 0x000000018001CC80
	public override int GetHashCode(); // 0x000000018001CD10
	public int CompareTo(ulong value); // 0x000000018001CC60
	public bool Equals(ulong obj); // 0x0000000180003D90
	public static ulong Parse(string s); // 0x00000001802EFB80
	public static ulong Parse(string s, IFormatProvider provider); // 0x00000001802F0700
	public static ulong Parse(string s, NumberStyles style); // 0x00000001802EFB90
	internal static bool Parse(string s, NumberStyles style, IFormatProvider provider, bool tryParse, out ulong result, out Exception exc); // 0x00000001802EFC40
	public static ulong Parse(string s, NumberStyles style, IFormatProvider provider); // 0x00000001802EFBA0
	public static bool TryParse(string s, out ulong result); // 0x00000001802F0920
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out ulong result); // 0x00000001802F08D0
	public override string ToString(); // 0x000000018001D410
	public string ToString(IFormatProvider provider); // 0x000000018001D390
	public string ToString(string format); // 0x000000018001D320
	public string ToString(string format, IFormatProvider provider); // 0x000000018001D400
	public TypeCode GetTypeCode(); // 0x000000018001CD20
}

// Namespace: System
[Serializable]
public struct Byte : IFormattable, IConvertible, IComparable, IComparable`1<byte>, IEquatable`1<byte> // TypeDefIndex: 18
{
	// Fields
	public const byte MinValue = 0; // 0x00
	public const byte MaxValue = 255; // 0x10
	internal byte m_value; // 0x00

	// Methods
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x0000000180021B30
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x0000000180021790
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x00000001800062A0
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x00000001800217F0
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x0000000180021850
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x0000000180021870
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x00000001800218F0
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x0000000180021950
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x00000001800219B0
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x0000000180021A10
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x0000000180021A70
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x0000000180021AD0
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x0000000180021C00
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x0000000180021C60
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x0000000180021CC0
	public int CompareTo(object value); // 0x00000001800215D0
	public override bool Equals(object obj); // 0x00000001800216F0
	public override int GetHashCode(); // 0x00000001800062A0
	public int CompareTo(byte value); // 0x00000001800216C0
	public bool Equals(byte obj); // 0x00000001800216E0
	public static byte Parse(string s, IFormatProvider provider); // 0x000000018039D7D0
	public static byte Parse(string s, NumberStyles style); // 0x000000018039D7B0
	public static byte Parse(string s, NumberStyles style, IFormatProvider provider); // 0x000000018039D7E0
	public static byte Parse(string s); // 0x000000018039D7C0
	public static bool TryParse(string s, out byte result); // 0x000000018039DAE0
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out byte result); // 0x000000018039DA90
	public override string ToString(); // 0x0000000180021E00
	public string ToString(string format); // 0x0000000180021D20
	public string ToString(IFormatProvider provider); // 0x0000000180021D90
	public string ToString(string format, IFormatProvider provider); // 0x0000000180021E60
	public TypeCode GetTypeCode(); // 0x0000000180021780
}

// Namespace: System
[Serializable]
public struct SByte : IFormattable, IConvertible, IComparable, IComparable`1<sbyte>, IEquatable`1<sbyte> // TypeDefIndex: 19
{
	// Fields
	public const sbyte MinValue = 128; // 0x00
	public const sbyte MaxValue = 127; // 0x10
	internal sbyte m_value; // 0x00

	// Methods
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x0000000180005F00
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x0000000180005F60
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x0000000180005FC0
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x0000000180006020
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x00000001800060A0
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x0000000180006120
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x0000000180006180
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x00000001800061E0
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x0000000180006240
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x00000001800062A0
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x00000001800062B0
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x0000000180006310
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x00000001800063E0
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x0000000180006440
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x00000001800064A0
	public int CompareTo(object obj); // 0x0000000180005D30
	public override bool Equals(object obj); // 0x0000000180005E50
	public override int GetHashCode(); // 0x0000000180005EE0
	public int CompareTo(sbyte value); // 0x0000000180005E20
	public bool Equals(sbyte obj); // 0x0000000180005E40
	internal static bool Parse(string s, bool tryParse, out sbyte result, out Exception exc); // 0x0000000180156810
	public static sbyte Parse(string s, IFormatProvider provider); // 0x0000000180156800
	public static sbyte Parse(string s, NumberStyles style); // 0x0000000180156780
	public static sbyte Parse(string s, NumberStyles style, IFormatProvider provider); // 0x0000000180156AC0
	public static sbyte Parse(string s); // 0x0000000180156790
	public static bool TryParse(string s, out sbyte result); // 0x0000000180156D20
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out sbyte result); // 0x0000000180156EF0
	public override string ToString(); // 0x0000000180006500
	public string ToString(IFormatProvider provider); // 0x0000000180006570
	public string ToString(string format); // 0x00000001800065E0
	public string ToString(string format, IFormatProvider provider); // 0x0000000180006560
	public TypeCode GetTypeCode(); // 0x0000000180005EF0
}

// Namespace: System
[Serializable]
public struct Int16 : IFormattable, IConvertible, IComparable, IComparable`1<short>, IEquatable`1<short> // TypeDefIndex: 20
{
	// Fields
	public const short MaxValue = 32767; // 0x00
	public const short MinValue = -32768; // 0x10
	internal short m_value; // 0x00

	// Methods
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x0000000180002BD0
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x0000000180002C30
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x0000000180002C90
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x0000000180002CF0
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x0000000180002D70
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x0000000180002DF0
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x0000000180002E50
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x0000000180002EB0
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x0000000180002F10
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x0000000180002F70
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x0000000180002FD0
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x0000000180003030
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x0000000180003100
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x0000000180003160
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x00000001800031C0
	public int CompareTo(object value); // 0x0000000180002A20
	public override bool Equals(object obj); // 0x0000000180002B20
	public override int GetHashCode(); // 0x0000000180002BB0
	public int CompareTo(short value); // 0x0000000180002A00
	public bool Equals(short obj); // 0x0000000180002B10
	internal static bool Parse(string s, bool tryParse, out short result, out Exception exc); // 0x0000000180125C30
	public static short Parse(string s, IFormatProvider provider); // 0x0000000180125C20
	public static short Parse(string s, NumberStyles style); // 0x0000000180125E80
	public static short Parse(string s, NumberStyles style, IFormatProvider provider); // 0x0000000180125E90
	public static short Parse(string s); // 0x0000000180125F30
	public static bool TryParse(string s, out short result); // 0x0000000180126240
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out short result); // 0x00000001801261D0
	public override string ToString(); // 0x00000001800032B0
	public string ToString(IFormatProvider provider); // 0x0000000180003220
	public string ToString(string format); // 0x0000000180003290
	public string ToString(string format, IFormatProvider provider); // 0x00000001800032A0
	public TypeCode GetTypeCode(); // 0x0000000180002BC0
}

// Namespace: System
[Serializable]
public struct UInt16 : IFormattable, IConvertible, IComparable, IComparable`1<ushort>, IEquatable`1<ushort> // TypeDefIndex: 21
{
	// Fields
	public const ushort MaxValue = 65535; // 0x00
	public const ushort MinValue = 0; // 0x10
	internal ushort m_value; // 0x00

	// Methods
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x000000018001BB70
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x000000018001BBD0
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x000000018001BC30
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x000000018001BC90
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x000000018001BD10
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x000000018001BD90
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x000000018001BDF0
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x000000018001BE50
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x000000018001BEB0
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x000000018001BF10
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x000000018001BF70
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x000000018001BFD0
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x000000018001BB50
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x000000018001C0A0
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x000000018001C100
	public int CompareTo(object value); // 0x000000018001B9F0
	public override bool Equals(object obj); // 0x000000018001BAC0
	public override int GetHashCode(); // 0x000000018001BB50
	public int CompareTo(ushort value); // 0x000000018001B9E0
	public bool Equals(ushort obj); // 0x0000000180002B10
	public static ushort Parse(string s, IFormatProvider provider); // 0x00000001802EE6D0
	public static ushort Parse(string s, NumberStyles style); // 0x00000001802EE6C0
	public static ushort Parse(string s, NumberStyles style, IFormatProvider provider); // 0x00000001802EE6E0
	public static ushort Parse(string s); // 0x00000001802EE6B0
	public static bool TryParse(string s, out ushort result); // 0x00000001802EE9A0
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out ushort result); // 0x00000001802EE940
	public override string ToString(); // 0x000000018001C250
	public string ToString(IFormatProvider provider); // 0x000000018001C170
	public string ToString(string format); // 0x000000018001C1E0
	public string ToString(string format, IFormatProvider provider); // 0x000000018001C160
	public TypeCode GetTypeCode(); // 0x000000018001BB60
}

// Namespace: System.Collections
public interface IEnumerator // TypeDefIndex: 22
{
	// Properties
	object Current { get; }

	// Methods
	bool MoveNext();
	void Reset();
}

// Namespace: System.Collections
public interface IEnumerable // TypeDefIndex: 23
{
	// Methods
	IEnumerator GetEnumerator();
}

// Namespace: System
public interface IDisposable // TypeDefIndex: 24
{
	// Methods
	void Dispose();
}

// Namespace: System.Collections.Generic
public interface IEnumerator`1 : IEnumerator, IDisposable // TypeDefIndex: 25
{
	// Properties
	T Current { get; }

}

// Namespace: System
[Serializable]
public struct Char : IConvertible, IComparable, IComparable`1<char>, IEquatable`1<char> // TypeDefIndex: 26
{
	// Fields
	public const char MaxValue = '\xffff'; // 0x00
	public const char MinValue = '\x0000'; // 0x10
	internal char m_value; // 0x08
	private static readonly void * category_data; // 0x18
	private static readonly void * numeric_data; // 0x28
	private static readonly void * numeric_data_values; // 0x10
	private static readonly void * to_lower_data_low; // 0x00
	private static readonly void * to_lower_data_high; // 0x00
	private static readonly void * to_upper_data_low; // 0x00
	private static readonly void * to_upper_data_high; // 0x00

	// Constructors
	private static Char(); // 0x00000001803A04D0

	// Methods
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x0000000180022280
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x0000000180022030
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x0000000180022040
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x000000018001BB50
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x00000001800220A0
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x00000001800220C0
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x00000001800220E0
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x00000001800220F0
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x0000000180022150
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x00000001800221B0
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x0000000180022210
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x0000000180022270
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x0000000180022350
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x00000001800223B0
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x0000000180022410
	private static void GetDataTablePointers(out void * category_data, out void * numeric_data, out void * numeric_data_values, out void * to_lower_data_low, out void * to_lower_data_high, out void * to_upper_data_low, out void * to_upper_data_high); // 0x000000018039E510
	public int CompareTo(object value); // 0x0000000180021E70
	public override bool Equals(object obj); // 0x0000000180021F90
	public int CompareTo(char value); // 0x0000000180021F60
	public static string ConvertFromUtf32(int utf32); // 0x000000018039DF10
	public static int ConvertToUtf32(char highSurrogate, char lowSurrogate); // 0x000000018039E3A0
	public static int ConvertToUtf32(string s, int index); // 0x000000018039E090
	public bool Equals(char obj); // 0x0000000180021F80
	public static bool IsSurrogatePair(char highSurrogate, char lowSurrogate); // 0x000000018039F4C0
	public static bool IsSurrogatePair(string s, int index); // 0x000000018039F4F0
	public override int GetHashCode(); // 0x000000018001BB50
	public static double GetNumericValue(char c); // 0x000000018039E660
	public static double GetNumericValue(string s, int index); // 0x000000018039E530
	public static UnicodeCategory GetUnicodeCategory(char c); // 0x000000018039E7E0
	public static UnicodeCategory GetUnicodeCategory(string s, int index); // 0x000000018039E710
	public static bool IsControl(char c); // 0x000000018039E840
	public static bool IsControl(string s, int index); // 0x000000018039E8B0
	public static bool IsDigit(char c); // 0x000000018039E990
	public static bool IsDigit(string s, int index); // 0x000000018039EA00
	public static bool IsHighSurrogate(char c); // 0x000000018039EB80
	public static bool IsHighSurrogate(string s, int index); // 0x000000018039EAE0
	public static bool IsLetter(char c); // 0x000000018039EDF0
	public static bool IsLetter(string s, int index); // 0x000000018039ED10
	public static bool IsLetterOrDigit(char c); // 0x000000018039EC90
	public static bool IsLetterOrDigit(string s, int index); // 0x000000018039EBA0
	public static bool IsLower(char c); // 0x000000018039F000
	public static bool IsLower(string s, int index); // 0x000000018039EF20
	public static bool IsLowSurrogate(char c); // 0x000000018039EE60
	public static bool IsLowSurrogate(string s, int index); // 0x000000018039EE80
	public static bool IsNumber(char c); // 0x000000018039F070
	public static bool IsNumber(string s, int index); // 0x000000018039F0F0
	public static bool IsPunctuation(char c); // 0x000000018039F2D0
	public static bool IsPunctuation(string s, int index); // 0x000000018039F1E0
	public static bool IsSeparator(char c); // 0x000000018039F350
	public static bool IsSeparator(string s, int index); // 0x000000018039F3D0
	public static bool IsSurrogate(char c); // 0x000000018039F6D0
	public static bool IsSurrogate(string s, int index); // 0x000000018039F5F0
	public static bool IsSymbol(char c); // 0x000000018039F830
	public static bool IsSymbol(string s, int index); // 0x000000018039F740
	public static bool IsUpper(char c); // 0x000000018039F990
	public static bool IsUpper(string s, int index); // 0x000000018039F8B0
	public static bool IsWhiteSpace(char c); // 0x000000018039FA00
	public static bool IsWhiteSpace(string s, int index); // 0x000000018039FAB0
	private static void CheckParameter(string s, int index); // 0x000000018039DE50
	public static bool TryParse(string s, out char result); // 0x00000001803A0490
	public static char Parse(string s); // 0x000000018039FBE0
	public static char ToLower(char c); // 0x00000001803A00B0
	public static char ToLowerInvariant(char c); // 0x000000018039FE30
	public static char ToLower(char c, CultureInfo culture); // 0x000000018039FF00
	public static char ToUpper(char c); // 0x00000001803A0400
	public static char ToUpperInvariant(char c); // 0x00000001803A0180
	public static char ToUpper(char c, CultureInfo culture); // 0x00000001803A0250
	public override string ToString(); // 0x0000000180022470
	public static string ToString(char c); // 0x00000001803A0160
	public string ToString(IFormatProvider provider); // 0x0000000180022470
	public TypeCode GetTypeCode(); // 0x0000000180022020
}

// Namespace: System
[Serializable]
public sealed class String : IConvertible, IComparable, IEnumerable, ICloneable, IComparable`1<string>, IEquatable`1<string>, IEnumerable`1<char> // TypeDefIndex: 27
{
	// Fields
	[NonSerialized]	private int length; // 0x10
	[NonSerialized]	private char start_char; // 0x00
	public static readonly string Empty; // 0x00
	private static readonly char[] WhiteChars; // 0x00

	// Properties
	public char Chars { get; } // 0x000000018018E400 
	public int Length { get; } // 0x00000001800ECD10 

	// Constructors
	public String(void * value); // 0x000000018018E3F0
	public String(void * value, int startIndex, int length); // 0x000000018018E3F0
	public String(void * value); // 0x000000018018E3F0
	public String(void * value, int startIndex, int length); // 0x000000018018E3F0
	public String(void * value, int startIndex, int length, Encoding enc); // 0x000000018018E3F0
	public String(char[] value, int startIndex, int length); // 0x000000018018E3F0
	public String(char[] value); // 0x000000018018E3F0
	public String(char c, int count); // 0x000000018018E3F0
	private static String(); // 0x000000018018E370

	// Methods
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x000000018018CDE0
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x000000018018CE50
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x000000018018CEC0
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x000000018018CF30
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x000000018018CFB0
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x000000018018D030
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x000000018018D0A0
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x000000018018D110
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x000000018018D180
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x000000018018D1F0
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x000000018018D260
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x000000018018D2D0
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x000000018018D390
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x000000018018D400
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x000000018018D470
	private IEnumerator`1<char> System.Collections.Generic.IEnumerable<char>.GetEnumerator(); // 0x000000018018CD20
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x000000018018CD80
	public static bool Equals(string a, string b); // 0x00000001801860E0
	public override bool Equals(object obj); // 0x0000000180186060
	public bool Equals(string value); // 0x0000000180185F70
	public object Clone(); // 0x0000000180123590
	public TypeCode GetTypeCode(); // 0x0000000180186F40
	public void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count); // 0x0000000180184B30
	public char[] ToCharArray(); // 0x000000018018D670
	public char[] ToCharArray(int startIndex, int length); // 0x000000018018D4E0
	public string[] Split(char[] separator); // 0x000000018018BCA0
	public string[] Split(char[] separator, int count); // 0x000000018018C1E0
	public string[] Split(char[] separator, int count, StringSplitOptions options); // 0x000000018018C3A0
	public string[] Split(string[] separator, int count, StringSplitOptions options); // 0x000000018018BD30
	public string[] Split(char[] separator, StringSplitOptions options); // 0x000000018018C380
	public string[] Split(string[] separator, StringSplitOptions options); // 0x000000018018C360
	public string Substring(int startIndex); // 0x000000018018CC80
	public string Substring(int startIndex, int length); // 0x000000018018CB00
	internal string SubstringUnchecked(int startIndex, int length); // 0x000000018018CA00
	public string Trim(); // 0x000000018018E240
	public string Trim(char[] trimChars); // 0x000000018018E020
	public string TrimStart(char[] trimChars); // 0x000000018018DF30
	public string TrimEnd(char[] trimChars); // 0x000000018018DE40
	private int FindNotWhiteSpace(int pos, int target, int change); // 0x0000000180186270
	private int FindNotInTable(int pos, int target, int change, char[] table); // 0x00000001801861B0
	public static int Compare(string strA, string strB); // 0x00000001801838D0
	public static int Compare(string strA, string strB, bool ignoreCase); // 0x0000000180182EB0
	public static int Compare(string strA, string strB, bool ignoreCase, CultureInfo culture); // 0x0000000180182BE0
	public static int Compare(string strA, int indexA, string strB, int indexB, int length); // 0x0000000180182B10
	public static int Compare(string strA, int indexA, string strB, int indexB, int length, bool ignoreCase); // 0x0000000180182DE0
	public static int Compare(string strA, int indexA, string strB, int indexB, int length, bool ignoreCase, CultureInfo culture); // 0x0000000180182F70
	public static int Compare(string strA, string strB, StringComparison comparisonType); // 0x0000000180183610
	public static int Compare(string strA, int indexA, string strB, int indexB, int length, StringComparison comparisonType); // 0x00000001801831D0
	public static bool Equals(string a, string b, StringComparison comparisonType); // 0x0000000180185EF0
	public bool Equals(string value, StringComparison comparisonType); // 0x0000000180185FE0
	public static int Compare(string strA, string strB, CultureInfo culture, CompareOptions options); // 0x0000000180183100
	public static int Compare(string strA, int indexA, string strB, int indexB, int length, CultureInfo culture, CompareOptions options); // 0x0000000180182CB0
	public int CompareTo(object value); // 0x00000001801829B0
	public int CompareTo(string strB); // 0x0000000180182A90
	public static int CompareOrdinal(string strA, string strB); // 0x0000000180182930
	public static int CompareOrdinal(string strA, int indexA, string strB, int indexB, int length); // 0x0000000180182830
	internal static int CompareOrdinalCaseInsensitive(string strA, int indexA, string strB, int indexB, int length); // 0x00000001801825F0
	internal static int CompareOrdinalUnchecked(string strA, int indexA, int lenA, string strB, int indexB, int lenB); // 0x00000001801826F0
	internal static int CompareOrdinalCaseInsensitiveUnchecked(string strA, int indexA, int lenA, string strB, int indexB, int lenB); // 0x0000000180182470
	public bool EndsWith(string value); // 0x0000000180185B00
	public bool EndsWith(string value, bool ignoreCase, CultureInfo culture); // 0x00000001801859F0
	public int IndexOfAny(char[] anyOf); // 0x00000001801871C0
	public int IndexOfAny(char[] anyOf, int startIndex); // 0x0000000180187260
	public int IndexOfAny(char[] anyOf, int startIndex, int count); // 0x00000001801870A0
	private int IndexOfAnyUnchecked(char[] anyOf, int startIndex, int count); // 0x0000000180186F50
	public int IndexOf(string value, StringComparison comparisonType); // 0x0000000180187D80
	public int IndexOf(string value, int startIndex, StringComparison comparisonType); // 0x0000000180188490
	public int IndexOf(string value, int startIndex, int count, StringComparison comparisonType); // 0x0000000180187DB0
	internal int IndexOfOrdinal(string value, int startIndex, int count, CompareOptions options); // 0x0000000180187710
	internal int IndexOfOrdinalUnchecked(string value, int startIndex, int count); // 0x0000000180187590
	internal int IndexOfOrdinalIgnoreCaseUnchecked(string value, int startIndex, int count); // 0x0000000180187330
	public int LastIndexOf(string value, StringComparison comparisonType); // 0x0000000180189F20
	public int LastIndexOf(string value, int startIndex, StringComparison comparisonType); // 0x000000018018A270
	public int LastIndexOf(string value, int startIndex, int count, StringComparison comparisonType); // 0x000000018018A2A0
	internal int LastIndexOfOrdinal(string value, int startIndex, int count, CompareOptions options); // 0x0000000180189840
	internal int LastIndexOfOrdinalUnchecked(string value, int startIndex, int count); // 0x00000001801896C0
	internal int LastIndexOfOrdinalIgnoreCaseUnchecked(string value, int startIndex, int count); // 0x0000000180189450
	public int IndexOf(char value); // 0x0000000180188060
	public int IndexOf(char value, int startIndex); // 0x00000001801881C0
	public int IndexOf(char value, int startIndex, int count); // 0x0000000180187A70
	internal int IndexOfUnchecked(char value, int startIndex, int count); // 0x0000000180187970
	internal int IndexOfOrdinalIgnoreCase(char value, int startIndex, int count); // 0x00000001801874B0
	public int IndexOf(string value); // 0x0000000180188090
	public int IndexOf(string value, int startIndex); // 0x0000000180187BD0
	public int IndexOf(string value, int startIndex, int count); // 0x00000001801882D0
	public int LastIndexOfAny(char[] anyOf); // 0x00000001801893C0
	public int LastIndexOfAny(char[] anyOf, int startIndex); // 0x00000001801892D0
	public int LastIndexOfAny(char[] anyOf, int startIndex, int count); // 0x0000000180189150
	private int LastIndexOfAnyUnchecked(char[] anyOf, int startIndex, int count); // 0x0000000180189060
	public int LastIndexOf(char value); // 0x0000000180189EC0
	public int LastIndexOf(char value, int startIndex); // 0x000000018018A020
	public int LastIndexOf(char value, int startIndex, int count); // 0x000000018018A120
	internal int LastIndexOfUnchecked(char value, int startIndex, int count); // 0x0000000180189AB0
	internal int LastIndexOfOrdinalIgnoreCase(char value, int startIndex, int count); // 0x00000001801895E0
	public int LastIndexOf(string value); // 0x0000000180189DD0
	public int LastIndexOf(string value, int startIndex); // 0x0000000180189EF0
	public int LastIndexOf(string value, int startIndex, int count); // 0x0000000180189BC0
	public bool Contains(string value); // 0x0000000180184B10
	public static bool IsNullOrEmpty(string value); // 0x0000000180188A80
	public string Normalize(); // 0x000000018018A550
	public string Normalize(NormalizationForm normalizationForm); // 0x000000018018A5B0
	public bool IsNormalized(); // 0x0000000180188A20
	public bool IsNormalized(NormalizationForm normalizationForm); // 0x0000000180188930
	public string Remove(int startIndex); // 0x000000018018B260
	public string PadLeft(int totalWidth); // 0x000000018018A6A0
	public string PadLeft(int totalWidth, char paddingChar); // 0x000000018018A7F0
	public string PadRight(int totalWidth); // 0x000000018018AAB0
	public string PadRight(int totalWidth, char paddingChar); // 0x000000018018A950
	public bool StartsWith(string value); // 0x000000018018C610
	public bool StartsWith(string value, StringComparison comparisonType); // 0x000000018018C6F0
	public bool EndsWith(string value, StringComparison comparisonType); // 0x0000000180185BE0
	public bool StartsWith(string value, bool ignoreCase, CultureInfo culture); // 0x000000018018C540
	public string Replace(char oldChar, char newChar); // 0x000000018018BA30
	public string Replace(string oldValue, string newValue); // 0x000000018018BB80
	private string ReplaceUnchecked(string oldValue, string newValue); // 0x000000018018B5C0
	private string ReplaceFallback(string oldValue, string newValue, int testedCount); // 0x000000018018B470
	public string Remove(int startIndex, int count); // 0x000000018018B0C0
	public string ToLower(); // 0x000000018018D8E0
	public string ToLower(CultureInfo culture); // 0x000000018018D940
	public string ToLowerInvariant(); // 0x000000018018D7B0
	public string ToUpper(); // 0x000000018018DD20
	public string ToUpper(CultureInfo culture); // 0x000000018018DC50
	public string ToUpperInvariant(); // 0x000000018018DB20
	public override string ToString(); // 0x0000000180123590
	public string ToString(IFormatProvider provider); // 0x0000000180123590
	public static string Format(string format, object arg0); // 0x0000000180186920
	public static string Format(string format, object arg0, object arg1); // 0x0000000180186A70
	public static string Format(string format, object arg0, object arg1, object arg2); // 0x0000000180186BB0
	public static string Format(string format, object[] args); // 0x0000000180186A00
	public static string Format(IFormatProvider provider, string format, object[] args); // 0x0000000180186890
	internal static StringBuilder FormatHelper(StringBuilder result, IFormatProvider provider, string format, object[] args); // 0x0000000180186360
	public static string Copy(string str); // 0x0000000180184D80
	public static string Concat(object arg0); // 0x0000000180184750
	public static string Concat(object arg0, object arg1); // 0x0000000180183BE0
	public static string Concat(object arg0, object arg1, object arg2); // 0x0000000180184370
	public static string Concat(object arg0, object arg1, object arg2, object arg3); // 0x00000001801844D0
	public static string Concat(string str0, string str1); // 0x0000000180183E80
	public static string Concat(string str0, string str1, string str2); // 0x00000001801847D0
	public static string Concat(string str0, string str1, string str2, string str3); // 0x0000000180183FE0
	public static string Concat(object[] args); // 0x0000000180183C90
	public static string Concat(string[] values); // 0x0000000180183B00
	private static string ConcatInternal(string[] values, int length); // 0x0000000180183980
	public string Insert(int startIndex, string value); // 0x00000001801884C0
	public static string Intern(string str); // 0x0000000180188680
	public static string IsInterned(string str); // 0x00000001801888A0
	public static string Join(string separator, string[] value); // 0x0000000180188D80
	public static string Join(string separator, string[] value, int startIndex, int count); // 0x0000000180188E60
	private static string JoinUnchecked(string separator, string[] value, int startIndex, int count); // 0x0000000180188AA0
	public CharEnumerator GetEnumerator(); // 0x0000000180186E70
	private static void ParseFormatSpecifier(string str, int ptr, out int n, out int width, out bool left_align, out string format); // 0x000000018018AD00
	private static int ParseDecimal(string str, int ptr); // 0x000000018018AC10
	internal void InternalSetChar(int idx, char val); // 0x0000000180188740
	internal void InternalSetLength(int newLength); // 0x00000001801887D0
	public override int GetHashCode(); // 0x0000000180186ED0
	internal int GetCaseInsensitiveHashCode(); // 0x0000000180186D60
	private string CreateString(void * value); // 0x0000000180185600
	private string CreateString(void * value, int startIndex, int length); // 0x00000001801853B0
	private string CreateString(void * value, int startIndex, int length, Encoding enc); // 0x0000000180184FA0
	private string CreateString(void * value); // 0x0000000180184E90
	private string CreateString(void * value, int startIndex, int length); // 0x0000000180185850
	private string CreateString(char[] val, int startIndex, int length); // 0x00000001801853D0
	private string CreateString(char[] val); // 0x0000000180185740
	private string CreateString(char c, int count); // 0x0000000180185290
	internal static void memset(void * dest, int val, int len); // 0x000000018018E920
	private static void memcpy4(void * dest, void * src, int size); // 0x000000018018E5B0
	private static void memcpy2(void * dest, void * src, int size); // 0x000000018018E530
	private static void memcpy1(void * dest, void * src, int size); // 0x000000018018E480
	internal static void memcpy(void * dest, void * src, int size); // 0x000000018018E650
	internal static void CharCopy(void * dest, void * src, int count); // 0x00000001801822D0
	internal static void CharCopyReverse(void * dest, void * src, int count); // 0x00000001801821D0
	internal static void CharCopy(string target, int targetIndex, string source, int sourceIndex, int count); // 0x00000001801823B0
	internal static void CharCopy(string target, int targetIndex, char[] source, int sourceIndex, int count); // 0x0000000180182210
	internal static void CharCopyReverse(string target, int targetIndex, string source, int sourceIndex, int count); // 0x00000001801820F0
	private string[] InternalSplit(char[] separator, int count, int options); // 0x0000000180188890
	internal static string InternalAllocateStr(int length); // 0x0000000180188710
	private static string InternalIntern(string str); // 0x0000000180188720
	private static string InternalIsInterned(string str); // 0x0000000180188730
	public static bool op_Equality(string a, string b); // 0x000000018018EA10
	public static bool op_Inequality(string a, string b); // 0x000000018018EA80
}

// Namespace: System
public interface ICloneable // TypeDefIndex: 28
{
	// Methods
	object Clone();
}

// Namespace: System.Collections.Generic
public interface IEnumerable`1 : IEnumerable // TypeDefIndex: 29
{
	// Methods
	IEnumerator`1<T> GetEnumerator();
}

// Namespace: System
[Serializable]
public struct Single : IFormattable, IConvertible, IComparable, IComparable`1<float>, IEquatable`1<float> // TypeDefIndex: 30
{
	// Fields
	public const float Epsilon = 1E-45; // 0x00
	public const float MaxValue = 3.4028235E+38; // 0x00
	public const float MinValue = -3.4028235E+38; // 0x00
	public const float NaN = NaN; // 0x00
	public const float PositiveInfinity = ∞; // 0x00
	public const float NegativeInfinity = -∞; // 0x00
	private const double MaxValueEpsilon = 3.6147112457961776E+29; // 0x00
	internal float m_value; // 0x00

	// Methods
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x0000000180007690
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x00000001800076F0
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x0000000180007750
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x00000001800077B0
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x0000000180007830
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x00000001800078B0
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x0000000180007910
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x0000000180007970
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x00000001800079D0
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x0000000180007A30
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x0000000180007A90
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x0000000180007AF0
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x0000000180007BD0
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x0000000180007C30
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x0000000180007C90
	public int CompareTo(object value); // 0x00000001800074A0
	public override bool Equals(object obj); // 0x00000001800075C0
	public int CompareTo(float value); // 0x00000001800074B0
	public bool Equals(float obj); // 0x0000000180007590
	public override int GetHashCode(); // 0x0000000180007670
	public static bool IsInfinity(float f); // 0x0000000180181AC0
	public static bool IsNaN(float f); // 0x0000000180181AE0
	public static bool IsNegativeInfinity(float f); // 0x0000000180181AF0
	public static bool IsPositiveInfinity(float f); // 0x0000000180181B20
	public static float Parse(string s); // 0x0000000180181B50
	public static float Parse(string s, IFormatProvider provider); // 0x0000000180181CB0
	public static float Parse(string s, NumberStyles style); // 0x0000000180181D60
	public static float Parse(string s, NumberStyles style, IFormatProvider provider); // 0x0000000180181BF0
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out float result); // 0x0000000180181F70
	public static bool TryParse(string s, out float result); // 0x0000000180182000
	public override string ToString(); // 0x0000000180007D80
	public string ToString(IFormatProvider provider); // 0x0000000180007DF0
	public string ToString(string format); // 0x0000000180007D00
	public string ToString(string format, IFormatProvider provider); // 0x0000000180007CF0
	public TypeCode GetTypeCode(); // 0x0000000180007680
}

// Namespace: System
[Serializable]
public struct Double : IFormattable, IConvertible, IComparable, IComparable`1<double>, IEquatable`1<double> // TypeDefIndex: 31
{
	// Fields
	public const double Epsilon = 5E-324; // 0x00
	public const double MaxValue = 1.7976931348623157E+308; // 0x00
	public const double MinValue = -1.7976931348623157E+308; // 0x00
	public const double NaN = NaN; // 0x00
	public const double NegativeInfinity = -∞; // 0x00
	public const double PositiveInfinity = ∞; // 0x00
	private const int State_AllowSign = 1; // 0x00
	private const int State_Digits = 2; // 0x00
	private const int State_Decimal = 3; // 0x20
	private const int State_ExponentSign = 4; // 0x40
	private const int State_Exponent = 5; // 0x00
	private const int State_ConsumeWhiteSpace = 6; // 0x00
	private const int State_Exit = 7; // 0x00
	internal double m_value; // 0x50

	// Methods
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x0000000180009620
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x0000000180009270
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x00000001800092D0
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x0000000180009330
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x0000000180009340
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x0000000180009360
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x00000001800093E0
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x0000000180009440
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x00000001800094A0
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x0000000180009500
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x0000000180009560
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x00000001800095C0
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x0000000180009700
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x0000000180009760
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x00000001800097C0
	public int CompareTo(object value); // 0x0000000180009070
	public override bool Equals(object obj); // 0x00000001800091A0
	public int CompareTo(double value); // 0x0000000180009080
	public bool Equals(double obj); // 0x0000000180009170
	public override int GetHashCode(); // 0x0000000180009250
	public static bool IsInfinity(double d); // 0x0000000180208CC0
	public static bool IsNaN(double d); // 0x0000000180208CE0
	public static bool IsNegativeInfinity(double d); // 0x0000000180208CF0
	public static bool IsPositiveInfinity(double d); // 0x0000000180208D20
	public static double Parse(string s); // 0x0000000180208D70
	public static double Parse(string s, IFormatProvider provider); // 0x0000000180208D60
	public static double Parse(string s, NumberStyles style); // 0x0000000180209BC0
	public static double Parse(string s, NumberStyles style, IFormatProvider provider); // 0x0000000180209B20
	internal static bool Parse(string s, NumberStyles style, IFormatProvider provider, bool tryParse, out double result, out Exception exc); // 0x0000000180208D80
	private static bool TryParseStringConstant(string format, string s, int start, int end); // 0x0000000180209DD0
	private static bool ParseImpl(void * byte_ptr, out double value); // 0x0000000180208D50
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out double result); // 0x0000000180209E90
	public static bool TryParse(string s, out double result); // 0x0000000180209EE0
	public override string ToString(); // 0x0000000180009920
	public string ToString(IFormatProvider provider); // 0x00000001800098A0
	public string ToString(string format); // 0x0000000180009820
	public string ToString(string format, IFormatProvider provider); // 0x0000000180009910
	public TypeCode GetTypeCode(); // 0x0000000180009260
}

// Namespace: System
[Serializable]
public struct Decimal : IFormattable, IConvertible, IComparable, IComparable`1<Decimal>, IEquatable`1<Decimal> // TypeDefIndex: 32
{
	// Fields
	public static readonly Decimal MinValue; // 0x00
	public static readonly Decimal MaxValue; // 0x20
	public static readonly Decimal MinusOne; // 0x40
	public static readonly Decimal One; // 0x00
	public static readonly Decimal Zero; // 0x00
	private const int DECIMAL_DIVIDE_BY_ZERO = 5; // 0x00
	private const uint MAX_SCALE = 28; // 0x50
	private const int iMAX_SCALE = 28; // 0x14
	private const uint SIGN_FLAG = 2147483648; // 0x1C
	private const uint SCALE_MASK = 16711680; // 0x00
	private const int SCALE_SHIFT = 16; // 0x10
	private const uint RESERVED_SS32_BITS = 2130771967; // 0x10
	private static readonly Decimal MaxValueDiv10; // 0x00
	private uint flags; // 0x58
	private uint hi; // 0x10
	private uint lo; // 0x20
	private uint mid; // 0x30

	// Constructors
	public Decimal(int lo, int mid, int hi, bool isNegative, byte scale); // 0x0000000180020DC0
	public Decimal(int value); // 0x0000000180020D80
	public Decimal(uint value); // 0x0000000180020E20
	public Decimal(long value); // 0x0000000180020DF0
	public Decimal(ulong value); // 0x0000000180020E40
	public Decimal(float value); // 0x0000000180020DE0
	public Decimal(double value); // 0x0000000180020DB0
	public Decimal(int[] bits); // 0x0000000180020E30
	private static Decimal(); // 0x000000018036EC60

	// Methods
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x0000000180020AB0
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x0000000180020700
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x0000000180020770
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x00000001800207E0
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x00000001800207F0
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x0000000180002680
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x0000000180020810
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x0000000180020880
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x00000001800208F0
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x0000000180020960
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x00000001800209D0
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x0000000180020A40
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x0000000180020B80
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x0000000180020BF0
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x0000000180020C60
	public static Decimal FromOACurrency(long cy); // 0x000000018036B260
	public static int[] GetBits(Decimal d); // 0x000000018036B320
	public static Decimal Negate(Decimal d); // 0x000000018036B4E0
	public static Decimal Add(Decimal d1, Decimal d2); // 0x000000018036AD40
	public static Decimal Subtract(Decimal d1, Decimal d2); // 0x000000018036C920
	public override int GetHashCode(); // 0x00000001800206B0
	private static ulong u64(Decimal value); // 0x00000001803718D0
	private static long s64(Decimal value); // 0x0000000180370E00
	public static bool Equals(Decimal d1, Decimal d2); // 0x000000018036AFD0
	public override bool Equals(object value); // 0x0000000180020430
	private bool IsZero(); // 0x00000001800206E0
	private bool IsNegative(); // 0x00000001800206D0
	public static Decimal Floor(Decimal d); // 0x000000018036B1F0
	public static Decimal Truncate(Decimal d); // 0x000000018036EAC0
	public static Decimal Round(Decimal d, int decimals); // 0x000000018036C2A0
	public static Decimal Round(Decimal d, int decimals, MidpointRounding mode); // 0x000000018036C370
	public static Decimal Round(Decimal d); // 0x000000018036C330
	public static Decimal Round(Decimal d, MidpointRounding mode); // 0x000000018036C260
	public static Decimal Multiply(Decimal d1, Decimal d2); // 0x000000018036B3F0
	public static Decimal Divide(Decimal d1, Decimal d2); // 0x000000018036AEA0
	public static Decimal Remainder(Decimal d1, Decimal d2); // 0x000000018036BE40
	public static int Compare(Decimal d1, Decimal d2); // 0x000000018036AE40
	public int CompareTo(object value); // 0x00000001800202D0
	public int CompareTo(Decimal value); // 0x0000000180020210
	public bool Equals(Decimal value); // 0x00000001800205A0
	public static Decimal Ceiling(Decimal d); // 0x000000018036AE00
	public static Decimal Parse(string s); // 0x000000018036B870
	public static Decimal Parse(string s, NumberStyles style); // 0x000000018036B610
	public static Decimal Parse(string s, IFormatProvider provider); // 0x000000018036B760
	private static void ThrowAtPos(int pos); // 0x000000018036CAD0
	private static void ThrowInvalidExp(); // 0x000000018036CB80
	private static string stripStyles(string s, NumberStyles style, NumberFormatInfo nfi, out int decPos, out bool isNegative, out bool expFlag, out int exp, bool throwex); // 0x0000000180370EB0
	public static Decimal Parse(string s, NumberStyles style, IFormatProvider provider); // 0x000000018036B4F0
	public static bool TryParse(string s, out Decimal result); // 0x000000018036EB30
	public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out Decimal result); // 0x000000018036EBC0
	private static bool PerformParse(string s, NumberStyles style, IFormatProvider provider, out Decimal res, bool throwex); // 0x000000018036B980
	public TypeCode GetTypeCode(); // 0x00000001800206C0
	public static byte ToByte(Decimal value); // 0x000000018036CBF0
	public static double ToDouble(Decimal d); // 0x000000018036CF70
	public static short ToInt16(Decimal value); // 0x000000018036CFD0
	public static int ToInt32(Decimal d); // 0x000000018036D350
	public static long ToInt64(Decimal d); // 0x000000018036D6D0
	public static long ToOACurrency(Decimal value); // 0x000000018036D9C0
	public static sbyte ToSByte(Decimal value); // 0x000000018036DB30
	public static float ToSingle(Decimal d); // 0x000000018036DEB0
	public static ushort ToUInt16(Decimal value); // 0x000000018036E030
	public static uint ToUInt32(Decimal d); // 0x000000018036E3B0
	public static ulong ToUInt64(Decimal d); // 0x000000018036E750
	public string ToString(string format, IFormatProvider provider); // 0x0000000180020D30
	public override string ToString(); // 0x0000000180020D40
	public string ToString(string format); // 0x0000000180020CD0
	public string ToString(IFormatProvider provider); // 0x0000000180020CE0
	private static int decimal2UInt64(Decimal val, out ulong result); // 0x000000018036F430
	private static int decimal2Int64(Decimal val, out long result); // 0x000000018036F420
	private static int decimalIncr(Decimal d1, Decimal d2); // 0x000000018036F480
	internal static int decimal2string(Decimal val, int digits, int decimals, char[] bufDigits, int bufSize, out int decPos, out int sign); // 0x00000001801150B0
	internal static int string2decimal(out Decimal val, string sDigits, uint decPos, int sign); // 0x0000000180370EA0
	internal static int decimalSetExponent(Decimal val, int exp); // 0x000000018036F4B0
	private static double decimal2double(Decimal val); // 0x000000018036F440
	private static void decimalFloorAndTrunc(Decimal val, int floorFlag); // 0x000000018036F470
	private static int decimalMult(Decimal pd1, Decimal pd2); // 0x000000018036F4A0
	private static int decimalDiv(out Decimal pc, Decimal pa, Decimal pb); // 0x000000018036F460
	private static int decimalIntDiv(out Decimal pc, Decimal pa, Decimal pb); // 0x000000018036F490
	private static int decimalCompare(Decimal d1, Decimal d2); // 0x000000018036F450
	public static Decimal op_Addition(Decimal d1, Decimal d2); // 0x000000018036F4C0
	public static Decimal op_Decrement(Decimal d); // 0x000000018036F5D0
	public static Decimal op_Increment(Decimal d); // 0x00000001803706A0
	public static Decimal op_Subtraction(Decimal d1, Decimal d2); // 0x0000000180370C10
	public static Decimal op_UnaryNegation(Decimal d); // 0x0000000180370D80
	public static Decimal op_UnaryPlus(Decimal d); // 0x0000000180278E80
	public static Decimal op_Multiply(Decimal d1, Decimal d2); // 0x0000000180370AD0
	public static Decimal op_Division(Decimal d1, Decimal d2); // 0x000000018036F6E0
	public static Decimal op_Modulus(Decimal d1, Decimal d2); // 0x0000000180370A30
	public static byte op_Explicit(Decimal value); // 0x000000018036F960
	public static sbyte op_Explicit(Decimal value); // 0x000000018036FCC0
	public static char op_Explicit(Decimal value); // 0x000000018036FF80
	public static short op_Explicit(Decimal value); // 0x00000001803701C0
	public static ushort op_Explicit(Decimal value); // 0x000000018036FB60
	public static int op_Explicit(Decimal value); // 0x00000001803702D0
	public static uint op_Explicit(Decimal value); // 0x00000001803700B0
	public static long op_Explicit(Decimal value); // 0x000000018036FE90
	public static ulong op_Explicit(Decimal value); // 0x000000018036FA70
	public static Decimal op_Implicit(byte value); // 0x0000000180370600
	public static Decimal op_Implicit(sbyte value); // 0x00000001803705D0
	public static Decimal op_Implicit(short value); // 0x00000001803705A0
	public static Decimal op_Implicit(ushort value); // 0x0000000180370670
	public static Decimal op_Implicit(char value); // 0x0000000180370670
	public static Decimal op_Implicit(int value); // 0x0000000180370620
	public static Decimal op_Implicit(uint value); // 0x0000000180370690
	public static Decimal op_Implicit(long value); // 0x0000000180370560
	public static Decimal op_Implicit(ulong value); // 0x0000000180370650
	public static Decimal op_Explicit(float value); // 0x000000018036FE70
	public static Decimal op_Explicit(double value); // 0x0000000180370090
	public static float op_Explicit(Decimal value); // 0x000000018036FDD0
	public static double op_Explicit(Decimal value); // 0x000000018036FC70
	public static bool op_Inequality(Decimal d1, Decimal d2); // 0x00000001803707B0
	public static bool op_Equality(Decimal d1, Decimal d2); // 0x000000018036F860
	public static bool op_GreaterThan(Decimal d1, Decimal d2); // 0x00000001803704A0
	public static bool op_GreaterThanOrEqual(Decimal d1, Decimal d2); // 0x00000001803703E0
	public static bool op_LessThan(Decimal d1, Decimal d2); // 0x0000000180370970
	public static bool op_LessThanOrEqual(Decimal d1, Decimal d2); // 0x00000001803708B0
}

// Namespace: System
[Serializable]
public struct Boolean : IConvertible, IComparable, IComparable`1<bool>, IEquatable`1<bool> // TypeDefIndex: 33
{
	// Fields
	public static readonly string FalseString; // 0x00
	public static readonly string TrueString; // 0x10
	internal bool m_value; // 0x10

	// Constructors
	private static Boolean(); // 0x000000018039D230

	// Methods
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x00000001800213C0
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x0000000180021060
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x0000000180021070
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x00000001800210D0
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x00000001800210E0
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x0000000180021100
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x0000000180021180
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x00000001800211E0
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x0000000180021240
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x00000001800212A0
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x0000000180021300
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x0000000180021360
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x0000000180021490
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x00000001800214F0
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x0000000180021550
	public int CompareTo(object obj); // 0x0000000180020E90
	public override bool Equals(object obj); // 0x0000000180020F70
	public int CompareTo(bool value); // 0x0000000180020E60
	public bool Equals(bool obj); // 0x0000000180021030
	public override int GetHashCode(); // 0x0000000180021040
	public static bool Parse(string value); // 0x000000018039CD20
	public static bool TryParse(string value, out bool result); // 0x000000018039D070
	public override string ToString(); // 0x00000001800215C0
	public TypeCode GetTypeCode(); // 0x0000000180021050
	public string ToString(IFormatProvider provider); // 0x00000001800215B0
}

// Namespace: System
[Serializable]
public struct IntPtr : ISerializable // TypeDefIndex: 34
{
	// Fields
	private void * m_value; // 0x10
	public static readonly IntPtr Zero; // 0x00

	// Properties
	public static int Size { get; } // 0x0000000180129DD0 

	// Constructors
	public IntPtr(int value); // 0x00000001800047D0
	public IntPtr(long value); // 0x0000000180004760
	public IntPtr(void * value); // 0x0000000180004760
	private IntPtr(SerializationInfo info, StreamingContext context); // 0x0000000180004770

	// Methods
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00000001800045F0
	public override bool Equals(object obj); // 0x0000000180004560
	public override int GetHashCode(); // 0x00000001800034B0
	public int ToInt32(); // 0x00000001800034B0
	public long ToInt64(); // 0x0000000180004680
	public void * ToPointer(); // 0x0000000180002060
	public override string ToString(); // 0x0000000180004700
	public string ToString(string format); // 0x0000000180004690
	public static bool op_Equality(IntPtr value1, IntPtr value2); // 0x0000000180124930
	public static bool op_Inequality(IntPtr value1, IntPtr value2); // 0x0000000180129E10
	public static IntPtr op_Explicit(int value); // 0x0000000180129DE0
	public static IntPtr op_Explicit(long value); // 0x0000000180123590
	public static IntPtr op_Explicit(void * value); // 0x0000000180123590
	public static int op_Explicit(IntPtr value); // 0x0000000180129DF0
	public static long op_Explicit(IntPtr value); // 0x0000000180129E00
	public static void * op_Explicit(IntPtr value); // 0x0000000180123590
}

// Namespace: System.Runtime.Serialization
public interface ISerializable // TypeDefIndex: 35
{
	// Methods
	void GetObjectData(SerializationInfo info, StreamingContext context);
}

// Namespace: System
[Serializable]
public struct UIntPtr : ISerializable // TypeDefIndex: 36
{
	// Fields
	public static readonly UIntPtr Zero; // 0x00
	private void * _pointer; // 0x58

	// Properties
	public static int Size { get; } // 0x0000000180129DD0 

	// Constructors
	public UIntPtr(ulong value); // 0x0000000180037760
	public UIntPtr(uint value); // 0x00000001800377D0
	public UIntPtr(void * value); // 0x0000000180004760
	private static UIntPtr(); // 0x00000001803DCB70

	// Methods
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00000001800376B0
	public override bool Equals(object obj); // 0x0000000180037620
	public override int GetHashCode(); // 0x00000001800034B0
	public uint ToUInt32(); // 0x00000001800034B0
	public ulong ToUInt64(); // 0x0000000180002060
	public void * ToPointer(); // 0x0000000180002060
	public override string ToString(); // 0x0000000180037740
	public static bool op_Equality(UIntPtr value1, UIntPtr value2); // 0x0000000180124930
	public static bool op_Inequality(UIntPtr value1, UIntPtr value2); // 0x0000000180129E10
	public static ulong op_Explicit(UIntPtr value); // 0x0000000180123590
	public static uint op_Explicit(UIntPtr value); // 0x0000000180129DF0
	public static UIntPtr op_Explicit(ulong value); // 0x00000001803DCBA0
	public static UIntPtr op_Explicit(void * value); // 0x0000000180123590
	public static void * op_Explicit(UIntPtr value); // 0x0000000180123590
	public static UIntPtr op_Explicit(uint value); // 0x0000000180129DF0
}

// Namespace: System
[Serializable]
public abstract class MulticastDelegate : Delegate // TypeDefIndex: 37
{
	// Fields
	private MulticastDelegate prev; // 0x58
	private MulticastDelegate kpm_next; // 0x10

	// Constructors
	protected MulticastDelegate(object target, string method); // 0x00000001801334C0
	protected MulticastDelegate(Type target, string method); // 0x00000001801334A0

	// Methods
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0000000180133070
	protected sealed override object DynamicInvokeImpl(object[] args); // 0x0000000180132C70
	public sealed override bool Equals(object obj); // 0x0000000180132CB0
	public sealed override int GetHashCode(); // 0x0000000180132D70
	public sealed override Delegate[] GetInvocationList(); // 0x0000000180132D80
	protected sealed override Delegate CombineImpl(Delegate follow); // 0x0000000180132920
	private bool BaseEquals(MulticastDelegate value); // 0x0000000180132910
	private static MulticastDelegate KPM(MulticastDelegate needle, MulticastDelegate haystack, out MulticastDelegate tail); // 0x0000000180133090
	protected sealed override Delegate RemoveImpl(Delegate value); // 0x00000001801331D0
	public static bool op_Equality(MulticastDelegate d1, MulticastDelegate d2); // 0x00000001801334E0
	public static bool op_Inequality(MulticastDelegate d1, MulticastDelegate d2); // 0x0000000180133500
}

// Namespace: System
[Serializable]
public abstract class Delegate : ICloneable, ISerializable // TypeDefIndex: 38
{
	// Fields
	private IntPtr method_ptr; // 0x10
	private IntPtr invoke_impl; // 0x20
	private object m_target; // 0x30
	private IntPtr method; // 0x40
	private IntPtr delegate_trampoline; // 0x50
	private IntPtr method_code; // 0x10
	private MethodInfo method_info; // 0x1C
	private MethodInfo original_method_info; // 0x00
	private DelegateData data; // 0x00

	// Properties
	public MethodInfo Method { get; } // 0x0000000180373DD0 
	public object Target { get; } // 0x00000001800EAEB0 

	// Constructors
	protected Delegate(object target, string method); // 0x0000000180373C60
	protected Delegate(Type target, string method); // 0x0000000180373B50

	// Methods
	internal static Delegate CreateDelegate_internal(Type type, object target, MethodInfo info, bool throwOnBindFailure); // 0x0000000180372530
	internal void SetMulticastInvoke(); // 0x0000000180373B40
	private static bool arg_type_match(Type delArgType, Type argType); // 0x0000000180373D50
	private static bool return_type_match(Type delReturnType, Type returnType); // 0x0000000180373EF0
	public static Delegate CreateDelegate(Type type, object firstArgument, MethodInfo method, bool throwOnBindFailure); // 0x0000000180372900
	public static Delegate CreateDelegate(Type type, object firstArgument, MethodInfo method); // 0x0000000180373150
	public static Delegate CreateDelegate(Type type, MethodInfo method, bool throwOnBindFailure); // 0x0000000180373130
	public static Delegate CreateDelegate(Type type, MethodInfo method); // 0x00000001803727F0
	public static Delegate CreateDelegate(Type type, object target, string method); // 0x0000000180372810
	private static MethodInfo GetCandidateMethod(Type type, Type target, string method, BindingFlags bflags, bool ignoreCase, bool throwOnBindFailure); // 0x0000000180373590
	public static Delegate CreateDelegate(Type type, Type target, string method, bool ignoreCase, bool throwOnBindFailure); // 0x0000000180372630
	public static Delegate CreateDelegate(Type type, Type target, string method); // 0x00000001803728E0
	public static Delegate CreateDelegate(Type type, Type target, string method, bool ignoreCase); // 0x0000000180373110
	public static Delegate CreateDelegate(Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure); // 0x0000000180372540
	public static Delegate CreateDelegate(Type type, object target, string method, bool ignoreCase); // 0x0000000180372710
	public object DynamicInvoke(object[] args); // 0x0000000180373440
	protected virtual object DynamicInvokeImpl(object[] args); // 0x0000000180373170
	public virtual object Clone(); // 0x0000000180270250
	public override bool Equals(object obj); // 0x0000000180373460
	public override int GetHashCode(); // 0x0000000180373950
	protected virtual MethodInfo GetMethodImpl(); // 0x0000000180373A40
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0000000180373A50
	public virtual Delegate[] GetInvocationList(); // 0x00000001803739A0
	public static Delegate Combine(Delegate a, Delegate b); // 0x0000000180372320
	public static Delegate Combine(Delegate[] delegates); // 0x0000000180372400
	protected virtual Delegate CombineImpl(Delegate d); // 0x0000000180372290
	public static Delegate Remove(Delegate source, Delegate value); // 0x0000000180373B20
	protected virtual Delegate RemoveImpl(Delegate d); // 0x0000000180373AF0
	public static Delegate RemoveAll(Delegate source, Delegate value); // 0x0000000180373A70
	public static bool op_Equality(Delegate d1, Delegate d2); // 0x0000000180373E80
	public static bool op_Inequality(Delegate d1, Delegate d2); // 0x0000000180373EB0
}

// Namespace: System
[Serializable]
public abstract struct Enum : IFormattable, IConvertible, IComparable // TypeDefIndex: 39
{
	// Fields
	private static char[] split_char; // 0x00

	// Properties
	private object Value { get; } // 0x000000018020E450 

	// Constructors
	protected Enum(); // 0x00000001800EAC90
	private static Enum(); // 0x000000018020E3C0

	// Methods
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x000000018020D3B0
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x000000018020D420
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x000000018020D490
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x000000018020D500
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x000000018020D590
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x000000018020D620
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x000000018020D690
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x000000018020D700
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x000000018020D770
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x000000018020D7E0
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x000000018020D850
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x000000018020D8C0
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x000000018020DAA0
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x000000018020DB10
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x000000018020DB80
	public TypeCode GetTypeCode(); // 0x000000018020C310
	private object get_value(); // 0x000000018020E450
	public static Array GetValues(Type enumType); // 0x000000018020C6C0
	public static string[] GetNames(Type enumType); // 0x000000018020C1D0
	private static int FindPosition(object value, Array values); // 0x000000018020A3E0
	public static string GetName(Type enumType, object value); // 0x000000018020C010
	public static bool IsDefined(Type enumType, object value); // 0x000000018020C820
	private static Type get_underlying_type(Type enumType); // 0x000000018020E460
	public static Type GetUnderlyingType(Type enumType); // 0x000000018020C3A0
	public static object Parse(Type enumType, string value); // 0x000000018020CB00
	private static int FindName(Hashtable name_hash, string[] names, string name, bool ignoreCase); // 0x000000018020A200
	private static ulong GetValue(object value, TypeCode typeCode); // 0x000000018020C470
	public static object Parse(Type enumType, string value, bool ignoreCase); // 0x000000018020CB70
	private int compare_value_to(object other); // 0x000000018020E440
	public int CompareTo(object target); // 0x000000018020A0F0
	public override string ToString(); // 0x000000018020E0E0
	public string ToString(IFormatProvider provider); // 0x000000018020E2C0
	public string ToString(string format); // 0x000000018020E1E0
	public string ToString(string format, IFormatProvider provider); // 0x000000018020E000
	public static object ToObject(Type enumType, byte value); // 0x000000018020DD00
	public static object ToObject(Type enumType, short value); // 0x000000018020DE00
	public static object ToObject(Type enumType, int value); // 0x000000018020DD80
	public static object ToObject(Type enumType, long value); // 0x000000018020DBF0
	public static object ToObject(Type enumType, object value); // 0x000000018020DCF0
	public static object ToObject(Type enumType, sbyte value); // 0x000000018020DC70
	public static object ToObject(Type enumType, ushort value); // 0x000000018020DE80
	public static object ToObject(Type enumType, uint value); // 0x000000018020DF80
	public static object ToObject(Type enumType, ulong value); // 0x000000018020DF00
	public override bool Equals(object obj); // 0x000000018020A1F0
	private int get_hashcode(); // 0x000000018020C000
	public override int GetHashCode(); // 0x000000018020C000
	private static string FormatSpecifier_X(Type enumType, object value, bool upper); // 0x000000018020B560
	private static string FormatFlags(Type enumType, object value); // 0x000000018020A610
	public static string Format(Type enumType, object value, string format); // 0x000000018020B970
}

// Namespace: System
[Serializable]
public abstract class Array : IEnumerable, ICloneable, ICollection, IList // TypeDefIndex: 40
{
	// Properties
	private object System.Collections.IList.Item { get; set; } // 0x0000000180396B20 0x0000000180396C30
	private int System.Collections.ICollection.Count { get; } // 0x0000000180394BD0 
	public int Length { get; } // 0x0000000180394BD0 
	public long LongLength { get; } // 0x0000000180397320 
	public int Rank { get; } // 0x0000000180394060 
	public bool IsSynchronized { get; } // 0x000000018011A0F0 
	public object SyncRoot { get; } // 0x0000000180123590 
	public bool IsFixedSize { get; } // 0x000000018010E420 
	public bool IsReadOnly { get; } // 0x000000018011A0F0 

	// Constructors
	private Array(); // 0x00000001800E2000

	// Methods
	private int System.Collections.IList.Add(object value); // 0x0000000180396740
	private void System.Collections.IList.Clear(); // 0x0000000180396790
	private bool System.Collections.IList.Contains(object value); // 0x0000000180396810
	private int System.Collections.IList.IndexOf(object value); // 0x0000000180396910
	private void System.Collections.IList.Insert(int index, object value); // 0x0000000180396A30
	private void System.Collections.IList.Remove(object value); // 0x0000000180396AD0
	private void System.Collections.IList.RemoveAt(int index); // 0x0000000180396A80
	internal int InternalArray__ICollection_get_Count(); // 0x0000000180394BD0
	internal bool InternalArray__ICollection_get_IsReadOnly(); // 0x000000018010E420
	internal IEnumerator`1<T> InternalArray__IEnumerable_GetEnumerator();
	internal void InternalArray__ICollection_Clear(); // 0x0000000180394B70
	internal void InternalArray__ICollection_Add(T item);
	internal bool InternalArray__ICollection_Remove(T item);
	internal bool InternalArray__ICollection_Contains(T item);
	internal void InternalArray__ICollection_CopyTo(T[] array, int index);
	internal void InternalArray__Insert(int index, T item);
	internal void InternalArray__RemoveAt(int index); // 0x0000000180394C30
	internal int InternalArray__IndexOf(T item);
	internal T InternalArray__get_Item(int index);
	internal void InternalArray__set_Item(int index, T item);
	internal void GetGenericValueImpl(int pos, out T value);
	internal void SetGenericValueImpl(int pos, T value);
	private int GetRank(); // 0x0000000180394060
	public int GetLength(int dimension); // 0x0000000180394030
	public long GetLongLength(int dimension); // 0x0000000180394040
	public int GetLowerBound(int dimension); // 0x0000000180394050
	public object GetValue(int[] indices); // 0x0000000180394370
	public void SetValue(object value, int[] indices); // 0x0000000180395780
	internal object GetValueImpl(int pos); // 0x00000001803940B0
	internal void SetValueImpl(object value, int pos); // 0x00000001803955E0
	internal static bool FastCopy(Array source, int source_idx, Array dest, int dest_idx, int length); // 0x0000000180393E50
	internal static Array CreateInstanceImpl(Type elementType, int[] lengths, int[] bounds); // 0x0000000180393400
	public IEnumerator GetEnumerator(); // 0x0000000180393E60
	public int GetUpperBound(int dimension); // 0x0000000180394070
	public object GetValue(int index); // 0x0000000180394410
	public object GetValue(int index1, int index2); // 0x00000001803940C0
	public object GetValue(int index1, int index2, int index3); // 0x0000000180394530
	public object GetValue(long index); // 0x0000000180394770
	public object GetValue(long index1, long index2); // 0x0000000180394600
	public object GetValue(long index1, long index2, long index3); // 0x0000000180394170
	public void SetValue(object value, long index); // 0x00000001803955F0
	public void SetValue(object value, long index1, long index2); // 0x0000000180395790
	public void SetValue(object value, long index1, long index2, long index3); // 0x0000000180395990
	public void SetValue(object value, int index); // 0x0000000180395C40
	public void SetValue(object value, int index1, int index2); // 0x0000000180395B80
	public void SetValue(object value, int index1, int index2, int index3); // 0x00000001803956A0
	public static Array CreateInstance(Type elementType, int length); // 0x0000000180393550
	public static Array CreateInstance(Type elementType, int length1, int length2); // 0x0000000180393410
	public static Array CreateInstance(Type elementType, int length1, int length2, int length3); // 0x00000001803935D0
	public static Array CreateInstance(Type elementType, int[] lengths); // 0x00000001803936A0
	public static Array CreateInstance(Type elementType, int[] lengths, int[] lowerBounds); // 0x00000001803938E0
	private static int[] GetIntArray(long[] values); // 0x0000000180393F20
	public static Array CreateInstance(Type elementType, long[] lengths); // 0x00000001803934C0
	public object GetValue(long[] indices); // 0x0000000180394380
	public void SetValue(object value, long[] indices); // 0x00000001803958F0
	public static int BinarySearch(Array array, object value); // 0x00000001803922C0
	public static int BinarySearch(Array array, object value, IComparer comparer); // 0x0000000180392440
	public static int BinarySearch(Array array, int index, int length, object value); // 0x0000000180392040
	public static int BinarySearch(Array array, int index, int length, object value, IComparer comparer); // 0x0000000180391DB0
	private static int DoBinarySearch(Array array, int index, int length, object value, IComparer comparer); // 0x0000000180393CF0
	public static void Clear(Array array, int index, int length); // 0x00000001803925E0
	private static void ClearInternal(Array a, int index, int count); // 0x00000001803925D0
	public object Clone(); // 0x0000000180392730
	public static void Copy(Array sourceArray, Array destinationArray, int length); // 0x0000000180393310
	public static void Copy(Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length); // 0x0000000180392C10
	public static void Copy(Array sourceArray, long sourceIndex, Array destinationArray, long destinationIndex, long length); // 0x0000000180392A20
	public static void Copy(Array sourceArray, Array destinationArray, long length); // 0x0000000180393260
	public static int IndexOf(Array array, object value); // 0x00000001803949A0
	public static int IndexOf(Array array, object value, int startIndex); // 0x0000000180394A80
	public static int IndexOf(Array array, object value, int startIndex, int count); // 0x0000000180394810
	public void Initialize(); // 0x00000001800EA7B0
	public static int LastIndexOf(Array array, object value); // 0x0000000180394C90
	public static int LastIndexOf(Array array, object value, int startIndex); // 0x0000000180394F30
	public static int LastIndexOf(Array array, object value, int startIndex, int count); // 0x0000000180394D90
	private static Swapper get_swapper(Array array); // 0x00000001803973A0
	private static Swapper get_swapper(T[] array);
	public static void Reverse(Array array); // 0x0000000180395540
	public static void Reverse(Array array, int index, int length); // 0x00000001803950F0
	public static void Sort(Array array); // 0x0000000180396590
	public static void Sort(Array keys, Array items); // 0x00000001803964E0
	public static void Sort(Array array, IComparer comparer); // 0x0000000180395DA0
	public static void Sort(Array array, int index, int length); // 0x0000000180395D70
	public static void Sort(Array keys, Array items, IComparer comparer); // 0x0000000180396630
	public static void Sort(Array keys, Array items, int index, int length); // 0x00000001803966F0
	public static void Sort(Array array, int index, int length, IComparer comparer); // 0x0000000180396710
	public static void Sort(Array keys, Array items, int index, int length, IComparer comparer); // 0x0000000180395E50
	private void int_swapper(int i, int j); // 0x0000000180397460
	private void obj_swapper(int i, int j); // 0x0000000180397560
	private void slow_swapper(int i, int j); // 0x0000000180397870
	private void double_swapper(int i, int j); // 0x0000000180397250
	private static int new_gap(int gap); // 0x0000000180397520
	private static void combsort(double[] array, int start, int size, Swapper swap_items); // 0x0000000180396EB0
	private static void combsort(int[] array, int start, int size, Swapper swap_items); // 0x0000000180397000
	private static void combsort(char[] array, int start, int size, Swapper swap_items); // 0x0000000180396D60
	private static void qsort(Array keys, Array items, int low0, int high0, IComparer comparer); // 0x00000001803976C0
	private static void swap(Array keys, Array items, int i, int j); // 0x00000001803978E0
	private static int compare(object value1, object value2, IComparer comparer); // 0x0000000180397150
	public static void Sort(T[] array);
	public static void Sort(T[] keys, T[] items);
	public static void Sort(T[] array, IComparer`1<T> comparer);
	public static void Sort(T[] keys, T[] items, IComparer`1<T> comparer);
	public static void Sort(T[] array, int index, int length);
	public static void Sort(T[] keys, T[] items, int index, int length);
	public static void Sort(T[] array, int index, int length, IComparer`1<T> comparer);
	public static void Sort(T[] keys, T[] items, int index, int length, IComparer`1<T> comparer);
	public static void Sort(T[] array, Comparison`1<T> comparison);
	internal static void Sort(T[] array, int length, Comparison`1<T> comparison);
	private static void qsort(T[] keys, T[] items, int low0, int high0, IComparer`1<T> comparer);
	private static int compare(T value1, T value2, IComparer`1<T> comparer);
	private static void qsort(T[] array, int low0, int high0, Comparison`1<T> comparison);
	private static void swap(T[] keys, T[] items, int i, int j);
	private static void swap(T[] array, int i, int j);
	public void CopyTo(Array array, int index); // 0x0000000180392750
	public void CopyTo(Array array, long index); // 0x0000000180392970
	public static void Resize(T[] array, int newSize);
	internal static void Resize(T[] array, int length, int newSize);
	public static bool TrueForAll(T[] array, Predicate`1<T> match);
	public static void ForEach(T[] array, Action`1<T> action);
	public static T[] ConvertAll(T[] array, Converter`2<T, T> converter);
	public static int FindLastIndex(T[] array, Predicate`1<T> match);
	public static int FindLastIndex(T[] array, int startIndex, Predicate`1<T> match);
	public static int FindLastIndex(T[] array, int startIndex, int count, Predicate`1<T> match);
	public static int FindIndex(T[] array, Predicate`1<T> match);
	public static int FindIndex(T[] array, int startIndex, Predicate`1<T> match);
	public static int FindIndex(T[] array, int startIndex, int count, Predicate`1<T> match);
	public static int BinarySearch(T[] array, T value);
	public static int BinarySearch(T[] array, T value, IComparer`1<T> comparer);
	public static int BinarySearch(T[] array, int index, int length, T value);
	public static int BinarySearch(T[] array, int index, int length, T value, IComparer`1<T> comparer);
	public static int IndexOf(T[] array, T value);
	public static int IndexOf(T[] array, T value, int startIndex);
	public static int IndexOf(T[] array, T value, int startIndex, int count);
	public static int LastIndexOf(T[] array, T value);
	public static int LastIndexOf(T[] array, T value, int startIndex);
	public static int LastIndexOf(T[] array, T value, int startIndex, int count);
	public static T[] FindAll(T[] array, Predicate`1<T> match);
	public static bool Exists(T[] array, Predicate`1<T> match);
	public static ReadOnlyCollection`1<T> AsReadOnly(T[] array);
	public static T Find(T[] array, Predicate`1<T> match);
	public static T FindLast(T[] array, Predicate`1<T> match);
	public static void ConstrainedCopy(Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length); // 0x0000000180392740
}

// Namespace: 
internal struct InternalEnumerator`1 : IEnumerator, IDisposable, IEnumerator`1<T> // TypeDefIndex: 41
{
	// Fields
	private const int NOT_STARTED = -2; // 0x00
	private const int FINISHED = -1; // 0x00
	private Array array; // 0x20
	private int idx; // 0x00

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	public T Current { get; }

	// Constructors
	internal InternalEnumerator`1(Array array);

	// Methods
	private void System.Collections.IEnumerator.Reset();
	public void Dispose();
	public bool MoveNext();
}

// Namespace: 
internal class SimpleEnumerator : IEnumerator, ICloneable // TypeDefIndex: 42
{
	// Fields
	private Array enumeratee; // 0x10
	private int currentpos; // 0x1C
	private int length; // 0x00

	// Properties
	public object Current { get; } // 0x00000001803A3DB0 

	// Constructors
	public SimpleEnumerator(Array arrayToEnumerate); // 0x00000001803A3BA0

	// Methods
	public bool MoveNext(); // 0x00000001803A3A60
	public void Reset(); // 0x0000000180142D40
	public object Clone(); // 0x0000000180270250
}

// Namespace: 
private class ArrayReadOnlyList`1 : IEnumerable, IList`1<T>, ICollection`1<T>, IEnumerable`1<T> // TypeDefIndex: 43
{
	// Fields
	private T[] array; // 0x00

	// Properties
	public T Item { get; set; }
	public int Count { get; }
	public bool IsReadOnly { get; }

	// Constructors
	public ArrayReadOnlyList`1(T[] array);

	// Methods
	private IEnumerator System.Collections.IEnumerable.GetEnumerator();
	public void Add(T item);
	public void Clear();
	public bool Contains(T item);
	public void CopyTo(T[] array, int index);
	public IEnumerator`1<T> GetEnumerator();
	public int IndexOf(T item);
	public void Insert(int index, T item);
	public bool Remove(T item);
	public void RemoveAt(int index);
	private static Exception ReadOnlyError();
}

// Namespace: 
private sealed class <GetEnumerator>c__Iterator0 : IEnumerator, IDisposable, IEnumerator`1<T> // TypeDefIndex: 44
{
	// Fields
	internal int <i>__0; // 0x00
	internal int $PC; // 0x00
	internal T $current; // 0x68
	internal ArrayReadOnlyList`1<T> <>f__this; // 0x00

	// Properties
	private T System.Collections.Generic.IEnumerator<T>.Current { get; }
	private object System.Collections.IEnumerator.Current { get; }

	// Constructors
	public <GetEnumerator>c__Iterator0();

	// Methods
	public bool MoveNext();
	public void Dispose();
	public void Reset();
}

// Namespace: 
private delegate void Swapper(int i, int j); // TypeDefIndex: 45; 0x00000001803A3F20

// Namespace: System.Collections
public interface ICollection : IEnumerable // TypeDefIndex: 46
{
	// Properties
	int Count { get; }
	bool IsSynchronized { get; }
	object SyncRoot { get; }

	// Methods
	void CopyTo(Array array, int index);
}

// Namespace: System.Collections
public interface IList : IEnumerable, ICollection // TypeDefIndex: 47
{
	// Properties
	bool IsFixedSize { get; }
	bool IsReadOnly { get; }
	object Item { get; set; }

	// Methods
	int Add(object value);
	void Clear();
	bool Contains(object value);
	int IndexOf(object value);
	void Insert(int index, object value);
	void Remove(object value);
	void RemoveAt(int index);
}

// Namespace: System.Collections.Generic
public interface IList`1 : IEnumerable, ICollection`1<T>, IEnumerable`1<T> // TypeDefIndex: 48
{
	// Properties
	T Item { get; set; }

	// Methods
	int IndexOf(T item);
	void Insert(int index, T item);
	void RemoveAt(int index);
}

// Namespace: System.Collections.Generic
public interface ICollection`1 : IEnumerable, IEnumerable`1<T> // TypeDefIndex: 49
{
	// Properties
	int Count { get; }
	bool IsReadOnly { get; }

	// Methods
	void Add(T item);
	void Clear();
	bool Contains(T item);
	void CopyTo(T[] array, int arrayIndex);
	bool Remove(T item);
}

// Namespace: System
[Serializable]
public struct Void // TypeDefIndex: 50
{
}

// Namespace: System
[Serializable]
public abstract class Type : MemberInfo, IReflect, _Type // TypeDefIndex: 51
{
	// Fields
	internal const BindingFlags DefaultBindingFlags = 28; // 0x00
	internal RuntimeTypeHandle _impl; // 0x00
	public static readonly char Delimiter; // 0x10
	public static readonly Type[] EmptyTypes; // 0x20
	public static readonly MemberFilter FilterAttribute; // 0x10
	public static readonly MemberFilter FilterName; // 0x20
	public static readonly MemberFilter FilterNameIgnoreCase; // 0x30
	public static readonly object Missing; // 0x40

	// Properties
	public abstract Assembly Assembly { get; }
	public abstract string AssemblyQualifiedName { get; }
	public TypeAttributes Attributes { get; } // 0x00000001802ED530 
	public abstract Type BaseType { get; }
	public override Type DeclaringType { get; } // 0x00000001800EA8C0 
	public static Binder DefaultBinder { get; } // 0x00000001802ED550 
	public abstract string FullName { get; }
	public abstract Guid GUID { get; }
	public bool HasElementType { get; } // 0x00000001802ED6E0 
	public bool IsAbstract { get; } // 0x00000001802ED700 
	public bool IsAnsiClass { get; } // 0x00000001802ED720 
	public bool IsArray { get; } // 0x00000001802ED750 
	public bool IsAutoClass { get; } // 0x00000001802ED770 
	public bool IsAutoLayout { get; } // 0x00000001802ED7A0 
	public bool IsByRef { get; } // 0x00000001802ED7C0 
	public bool IsClass { get; } // 0x00000001802ED800 
	public bool IsCOMObject { get; } // 0x00000001802ED7E0 
	public bool IsContextful { get; } // 0x00000001802ED850 
	public bool IsEnum { get; } // 0x00000001802ED870 
	public bool IsExplicitLayout { get; } // 0x00000001802ED940 
	public bool IsImport { get; } // 0x00000001802ED980 
	public bool IsInterface { get; } // 0x00000001802ED9A0 
	public bool IsLayoutSequential { get; } // 0x00000001802ED9C0 
	public bool IsMarshalByRef { get; } // 0x00000001802ED9E0 
	public bool IsNestedAssembly { get; } // 0x00000001802EDA00 
	public bool IsNestedFamANDAssem { get; } // 0x00000001802EDA30 
	public bool IsNestedFamily { get; } // 0x00000001802EDA90 
	public bool IsNestedFamORAssem { get; } // 0x00000001802EDA60 
	public bool IsNestedPrivate { get; } // 0x00000001802EDAB0 
	public bool IsNestedPublic { get; } // 0x00000001802EDAE0 
	public bool IsNotPublic { get; } // 0x00000001802EDB20 
	public bool IsPointer { get; } // 0x00000001802EDB40 
	public bool IsPrimitive { get; } // 0x00000001802EDB60 
	public bool IsPublic { get; } // 0x00000001802EDB80 
	public bool IsSealed { get; } // 0x00000001802EDBA0 
	public bool IsSerializable { get; } // 0x00000001802EDBC0 
	public bool IsSpecialName { get; } // 0x00000001802EDE90 
	public bool IsUnicodeClass { get; } // 0x00000001802EDEF0 
	public bool IsValueType { get; } // 0x00000001802EE070 
	public override MemberTypes MemberType { get; } // 0x00000001802EE100 
	public abstract Module Module { get; }
	public abstract string Namespace { get; }
	public override Type ReflectedType { get; } // 0x00000001800EA8C0 
	public virtual RuntimeTypeHandle TypeHandle { get; } // 0x00000001800EA8C0 
	public ConstructorInfo TypeInitializer { get; } // 0x00000001802EE230 
	public abstract Type UnderlyingSystemType { get; }
	internal bool IsSystemType { get; } // 0x00000001802EDEB0 
	public virtual bool ContainsGenericParameters { get; } // 0x000000018011A0F0 
	public virtual bool IsGenericTypeDefinition { get; } // 0x00000001802ED960 
	public virtual bool IsGenericType { get; } // 0x00000001802ED970 
	public virtual bool IsGenericParameter { get; } // 0x000000018011A0F0 
	public bool IsNested { get; } // 0x00000001802EDB00 
	public bool IsVisible { get; } // 0x00000001802EE090 
	public virtual int GenericParameterPosition { get; } // 0x00000001802ED670 
	public virtual GenericParameterAttributes GenericParameterAttributes { get; } // 0x00000001802ED5F0 
	public virtual MethodBase DeclaringMethod { get; } // 0x00000001800EA8C0 
	public virtual StructLayoutAttribute StructLayoutAttribute { get; } // 0x00000001802EE110 
	internal bool IsUserType { get; } // 0x00000001802EDF20 

	// Constructors
	protected Type(); // 0x00000001800EAC90
	private static Type(); // 0x00000001802ED3F0

	// Methods
	private void System.Runtime.InteropServices._Type.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x00000001802ED290
	private void System.Runtime.InteropServices._Type.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x00000001802ED330
	private void System.Runtime.InteropServices._Type.GetTypeInfoCount(out uint pcTInfo); // 0x00000001802ED2E0
	private void System.Runtime.InteropServices._Type.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x00000001802ED380
	private static bool FilterName_impl(MemberInfo m, object filterCriteria); // 0x00000001802E9DB0
	private static bool FilterNameIgnoreCase_impl(MemberInfo m, object filterCriteria); // 0x00000001802E9BE0
	private static bool FilterAttribute_impl(MemberInfo m, object filterCriteria); // 0x00000001802E9830
	public override bool Equals(object o); // 0x00000001802E9730
	public bool Equals(Type o); // 0x00000001802E97C0
	internal bool EqualsInternal(Type type); // 0x00000001802E9720
	private static Type internal_from_handle(IntPtr handle); // 0x00000001802EE2D0
	private static Type internal_from_name(string name, bool throwOnError, bool ignoreCase); // 0x00000001802EE2E0
	public static Type GetType(string typeName); // 0x00000001802EC580
	public static Type GetType(string typeName, bool throwOnError); // 0x00000001802EC330
	public static Type GetType(string typeName, bool throwOnError, bool ignoreCase); // 0x00000001802EC450
	public static Type[] GetTypeArray(object[] args); // 0x00000001802EBD20
	internal static TypeCode GetTypeCodeInternal(Type type); // 0x00000001802EBE70
	public static TypeCode GetTypeCode(Type type); // 0x00000001802EBE80
	public static Type GetTypeFromCLSID(Guid clsid); // 0x00000001802EC0A0
	public static Type GetTypeFromCLSID(Guid clsid, bool throwOnError); // 0x00000001802EC000
	public static Type GetTypeFromCLSID(Guid clsid, string server); // 0x00000001802EBFB0
	public static Type GetTypeFromCLSID(Guid clsid, string server, bool throwOnError); // 0x00000001802EC050
	public static Type GetTypeFromHandle(RuntimeTypeHandle handle); // 0x00000001802EC0F0
	public static Type GetTypeFromProgID(string progID); // 0x00000001802EC1B0
	public static Type GetTypeFromProgID(string progID, bool throwOnError); // 0x00000001802EC250
	public static Type GetTypeFromProgID(string progID, string server); // 0x00000001802EC160
	public static Type GetTypeFromProgID(string progID, string server, bool throwOnError); // 0x00000001802EC200
	public static RuntimeTypeHandle GetTypeHandle(object o); // 0x00000001802EC2A0
	internal static bool type_is_subtype_of(Type a, Type b, bool check_interfaces); // 0x00000001802EE310
	internal static bool type_is_assignable_from(Type a, Type b); // 0x00000001802EE300
	public Type GetType(); // 0x0000000180199040
	public virtual bool IsSubclassOf(Type c); // 0x00000001802ECA70
	public virtual Type[] FindInterfaces(TypeFilter filter, object filterCriteria); // 0x00000001802E9F20
	public Type GetInterface(string name); // 0x00000001802EB0B0
	public abstract Type GetInterface(string name, bool ignoreCase);
	internal static void GetInterfaceMapData(Type t, Type iface, out MethodInfo[] targets, out MethodInfo[] methods); // 0x00000001802EAEC0
	public virtual InterfaceMapping GetInterfaceMap(Type interfaceType); // 0x00000001802EAED0
	public abstract Type[] GetInterfaces();
	public virtual bool IsAssignableFrom(Type c); // 0x00000001802EC6D0
	public virtual bool IsInstanceOfType(object o); // 0x00000001802EC990
	public virtual int GetArrayRank(); // 0x00000001802EA870
	public abstract Type GetElementType();
	public EventInfo GetEvent(string name); // 0x00000001802EAC20
	public abstract EventInfo GetEvent(string name, BindingFlags bindingAttr);
	public virtual EventInfo[] GetEvents(); // 0x00000001802EAC40
	public abstract EventInfo[] GetEvents(BindingFlags bindingAttr);
	public FieldInfo GetField(string name); // 0x00000001802EACC0
	public abstract FieldInfo GetField(string name, BindingFlags bindingAttr);
	public FieldInfo[] GetFields(); // 0x00000001802EACE0
	public abstract FieldInfo[] GetFields(BindingFlags bindingAttr);
	public override int GetHashCode(); // 0x00000001802EAE70
	public MemberInfo[] GetMember(string name); // 0x00000001802EB1F0
	public virtual MemberInfo[] GetMember(string name, BindingFlags bindingAttr); // 0x00000001802EB220
	public virtual MemberInfo[] GetMember(string name, MemberTypes type, BindingFlags bindingAttr); // 0x00000001802EB0D0
	public MemberInfo[] GetMembers(); // 0x00000001802EB250
	public abstract MemberInfo[] GetMembers(BindingFlags bindingAttr);
	public MethodInfo GetMethod(string name); // 0x00000001802EB290
	public MethodInfo GetMethod(string name, BindingFlags bindingAttr); // 0x00000001802EB340
	public MethodInfo GetMethod(string name, Type[] types); // 0x00000001802EB400
	public MethodInfo GetMethod(string name, Type[] types, ParameterModifier[] modifiers); // 0x00000001802EB4D0
	public MethodInfo GetMethod(string name, BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers); // 0x00000001802EB430
	public MethodInfo GetMethod(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x00000001802EB500
	protected abstract MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
	internal MethodInfo GetMethodImplInternal(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x00000001802EB270
	internal virtual MethodInfo GetMethod(MethodInfo fromNoninstanciated); // 0x00000001802EB470
	internal virtual ConstructorInfo GetConstructor(ConstructorInfo fromNoninstanciated); // 0x00000001802EA8C0
	internal virtual FieldInfo GetField(FieldInfo fromNoninstanciated); // 0x00000001802EAC60
	public MethodInfo[] GetMethods(); // 0x00000001802EB660
	public abstract MethodInfo[] GetMethods(BindingFlags bindingAttr);
	public Type GetNestedType(string name); // 0x00000001802EB680
	public abstract Type GetNestedType(string name, BindingFlags bindingAttr);
	public Type[] GetNestedTypes(); // 0x00000001802EB6A0
	public abstract Type[] GetNestedTypes(BindingFlags bindingAttr);
	public PropertyInfo[] GetProperties(); // 0x00000001802EB6D0
	public abstract PropertyInfo[] GetProperties(BindingFlags bindingAttr);
	public PropertyInfo GetProperty(string name); // 0x00000001802EB750
	public PropertyInfo GetProperty(string name, BindingFlags bindingAttr); // 0x00000001802EBA60
	public PropertyInfo GetProperty(string name, Type returnType); // 0x00000001802EB9B0
	public PropertyInfo GetProperty(string name, Type[] types); // 0x00000001802EB980
	public PropertyInfo GetProperty(string name, Type returnType, Type[] types); // 0x00000001802EBB10
	public PropertyInfo GetProperty(string name, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x00000001802EB710
	public PropertyInfo GetProperty(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x00000001802EB800
	protected abstract PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers);
	internal PropertyInfo GetPropertyImplInternal(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x00000001802EB6F0
	protected abstract ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
	protected abstract TypeAttributes GetAttributeFlagsImpl();
	protected abstract bool HasElementTypeImpl();
	protected abstract bool IsArrayImpl();
	protected abstract bool IsByRefImpl();
	protected abstract bool IsCOMObjectImpl();
	protected abstract bool IsPointerImpl();
	protected abstract bool IsPrimitiveImpl();
	internal static bool IsArrayImpl(Type type); // 0x00000001802EC6C0
	protected virtual bool IsValueTypeImpl(); // 0x00000001802ECBA0
	protected virtual bool IsContextfulImpl(); // 0x00000001802EC8C0
	protected virtual bool IsMarshalByRefImpl(); // 0x00000001802EC9A0
	public ConstructorInfo GetConstructor(Type[] types); // 0x00000001802EA920
	public ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers); // 0x00000001802EA950
	public ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x00000001802EA980
	public ConstructorInfo[] GetConstructors(); // 0x00000001802EAAB0
	public abstract ConstructorInfo[] GetConstructors(BindingFlags bindingAttr);
	public virtual MemberInfo[] GetDefaultMembers(); // 0x00000001802EAAD0
	public virtual MemberInfo[] FindMembers(MemberTypes memberType, BindingFlags bindingAttr, MemberFilter filter, object filterCriteria); // 0x00000001802EA140
	public object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args); // 0x00000001802EC610
	public object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, CultureInfo culture); // 0x00000001802EC660
	public abstract object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters);
	public override string ToString(); // 0x00000001802ED3D0
	public virtual Type[] GetGenericArguments(); // 0x00000001802EAD00
	internal Type GetGenericTypeDefinition_impl(); // 0x00000001802EAE00
	public virtual Type GetGenericTypeDefinition(); // 0x00000001802EAE10
	private static Type MakeGenericType(Type gt, Type[] types); // 0x00000001802ECD70
	public virtual Type MakeGenericType(Type[] typeArguments); // 0x00000001802ECD80
	private int GetGenericParameterPosition(); // 0x00000001802EADF0
	private GenericParameterAttributes GetGenericParameterAttributes(); // 0x00000001802EAD50
	private Type[] GetGenericParameterConstraints_impl(); // 0x00000001802EAD60
	public virtual Type[] GetGenericParameterConstraints(); // 0x00000001802EAD70
	private Type make_array_type(int rank); // 0x00000001802EE2F0
	public virtual Type MakeArrayType(); // 0x00000001802ECD50
	public virtual Type MakeArrayType(int rank); // 0x00000001802ECCE0
	private Type make_byref_type(); // 0x00000001802ECD60
	public virtual Type MakeByRefType(); // 0x00000001802ECD60
	public virtual Type MakePointerType(); // 0x00000001802ED100
	public static Type ReflectionOnlyGetType(string typeName, bool throwIfNotFound, bool ignoreCase); // 0x00000001802ED110
	private void GetPacking(out int packing, out int size); // 0x00000001802EB6C0
	internal object[] GetPseudoCustomAttributes(); // 0x00000001802EBB40
}

// Namespace: System.Reflection
[Serializable]
public abstract class MemberInfo : ICustomAttributeProvider, _MemberInfo // TypeDefIndex: 52
{
	// Properties
	public abstract Type DeclaringType { get; }
	public abstract MemberTypes MemberType { get; }
	public abstract string Name { get; }
	public abstract Type ReflectedType { get; }
	public virtual Module Module { get; } // 0x00000001801AFE30 
	public virtual int MetadataToken { get; } // 0x00000001801AFE20 

	// Constructors
	protected MemberInfo(); // 0x00000001800E2000

	// Methods
	private void System.Runtime.InteropServices._MemberInfo.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x00000001801AFCE0
	private void System.Runtime.InteropServices._MemberInfo.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x00000001801AFD80
	private void System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount(out uint pcTInfo); // 0x00000001801AFD30
	private void System.Runtime.InteropServices._MemberInfo.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x00000001801AFDD0
	public abstract bool IsDefined(Type attributeType, bool inherit);
	public abstract object[] GetCustomAttributes(bool inherit);
	public abstract object[] GetCustomAttributes(Type attributeType, bool inherit);
	virtual Type System.Runtime.InteropServices._MemberInfo.GetType(); // 0x0000000180199040
}

// Namespace: System.Reflection
public interface ICustomAttributeProvider // TypeDefIndex: 53
{
	// Methods
	object[] GetCustomAttributes(bool inherit);
	object[] GetCustomAttributes(Type attributeType, bool inherit);
	bool IsDefined(Type attributeType, bool inherit);
}

// Namespace: System.Runtime.InteropServices
public interface _MemberInfo // TypeDefIndex: 54
{
	// Properties
	Type DeclaringType { get; }
	MemberTypes MemberType { get; }
	string Name { get; }
	Type ReflectedType { get; }

	// Methods
	bool Equals(object other);
	object[] GetCustomAttributes(bool inherit);
	object[] GetCustomAttributes(Type attributeType, bool inherit);
	int GetHashCode();
	Type GetType();
	bool IsDefined(Type attributeType, bool inherit);
	string ToString();
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Reflection
public interface IReflect // TypeDefIndex: 55
{
	// Properties
	Type UnderlyingSystemType { get; }

	// Methods
	FieldInfo GetField(string name, BindingFlags bindingAttr);
	FieldInfo[] GetFields(BindingFlags bindingAttr);
	MemberInfo[] GetMember(string name, BindingFlags bindingAttr);
	MemberInfo[] GetMembers(BindingFlags bindingAttr);
	MethodInfo GetMethod(string name, BindingFlags bindingAttr);
	MethodInfo GetMethod(string name, BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers);
	MethodInfo[] GetMethods(BindingFlags bindingAttr);
	PropertyInfo[] GetProperties(BindingFlags bindingAttr);
	PropertyInfo GetProperty(string name, BindingFlags bindingAttr);
	PropertyInfo GetProperty(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers);
	object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters);
}

// Namespace: System.Runtime.InteropServices
public interface _Type // TypeDefIndex: 56
{
	// Properties
	Assembly Assembly { get; }
	string AssemblyQualifiedName { get; }
	TypeAttributes Attributes { get; }
	Type BaseType { get; }
	Type DeclaringType { get; }
	string FullName { get; }
	Guid GUID { get; }
	bool HasElementType { get; }
	bool IsAbstract { get; }
	bool IsAnsiClass { get; }
	bool IsArray { get; }
	bool IsAutoClass { get; }
	bool IsAutoLayout { get; }
	bool IsByRef { get; }
	bool IsClass { get; }
	bool IsCOMObject { get; }
	bool IsContextful { get; }
	bool IsEnum { get; }
	bool IsExplicitLayout { get; }
	bool IsImport { get; }
	bool IsInterface { get; }
	bool IsLayoutSequential { get; }
	bool IsMarshalByRef { get; }
	bool IsNestedAssembly { get; }
	bool IsNestedFamANDAssem { get; }
	bool IsNestedFamily { get; }
	bool IsNestedFamORAssem { get; }
	bool IsNestedPrivate { get; }
	bool IsNestedPublic { get; }
	bool IsNotPublic { get; }
	bool IsPointer { get; }
	bool IsPrimitive { get; }
	bool IsPublic { get; }
	bool IsSealed { get; }
	bool IsSerializable { get; }
	bool IsSpecialName { get; }
	bool IsUnicodeClass { get; }
	bool IsValueType { get; }
	MemberTypes MemberType { get; }
	Module Module { get; }
	string Name { get; }
	string Namespace { get; }
	Type ReflectedType { get; }
	RuntimeTypeHandle TypeHandle { get; }
	ConstructorInfo TypeInitializer { get; }
	Type UnderlyingSystemType { get; }

	// Methods
	bool Equals(object other);
	bool Equals(Type o);
	Type[] FindInterfaces(TypeFilter filter, object filterCriteria);
	MemberInfo[] FindMembers(MemberTypes memberType, BindingFlags bindingAttr, MemberFilter filter, object filterCriteria);
	int GetArrayRank();
	ConstructorInfo GetConstructor(Type[] types);
	ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers);
	ConstructorInfo GetConstructor(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
	ConstructorInfo[] GetConstructors();
	ConstructorInfo[] GetConstructors(BindingFlags bindingAttr);
	object[] GetCustomAttributes(bool inherit);
	object[] GetCustomAttributes(Type attributeType, bool inherit);
	MemberInfo[] GetDefaultMembers();
	Type GetElementType();
	EventInfo GetEvent(string name);
	EventInfo GetEvent(string name, BindingFlags bindingAttr);
	EventInfo[] GetEvents();
	EventInfo[] GetEvents(BindingFlags bindingAttr);
	FieldInfo GetField(string name);
	FieldInfo GetField(string name, BindingFlags bindingAttr);
	FieldInfo[] GetFields();
	FieldInfo[] GetFields(BindingFlags bindingAttr);
	int GetHashCode();
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
	Type GetInterface(string name);
	Type GetInterface(string name, bool ignoreCase);
	InterfaceMapping GetInterfaceMap(Type interfaceType);
	Type[] GetInterfaces();
	MemberInfo[] GetMember(string name);
	MemberInfo[] GetMember(string name, MemberTypes type, BindingFlags bindingAttr);
	MemberInfo[] GetMember(string name, BindingFlags bindingAttr);
	MemberInfo[] GetMembers();
	MemberInfo[] GetMembers(BindingFlags bindingAttr);
	MethodInfo GetMethod(string name);
	MethodInfo GetMethod(string name, BindingFlags bindingAttr);
	MethodInfo GetMethod(string name, Type[] types);
	MethodInfo GetMethod(string name, Type[] types, ParameterModifier[] modifiers);
	MethodInfo GetMethod(string name, BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers);
	MethodInfo GetMethod(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
	MethodInfo[] GetMethods();
	MethodInfo[] GetMethods(BindingFlags bindingAttr);
	Type GetNestedType(string name);
	Type GetNestedType(string name, BindingFlags bindingAttr);
	Type[] GetNestedTypes();
	Type[] GetNestedTypes(BindingFlags bindingAttr);
	PropertyInfo[] GetProperties();
	PropertyInfo[] GetProperties(BindingFlags bindingAttr);
	PropertyInfo GetProperty(string name);
	PropertyInfo GetProperty(string name, BindingFlags bindingAttr);
	PropertyInfo GetProperty(string name, Type returnType);
	PropertyInfo GetProperty(string name, Type[] types);
	PropertyInfo GetProperty(string name, Type returnType, Type[] types);
	PropertyInfo GetProperty(string name, Type returnType, Type[] types, ParameterModifier[] modifiers);
	PropertyInfo GetProperty(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers);
	Type GetType();
	object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args);
	object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, CultureInfo culture);
	object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters);
	bool IsAssignableFrom(Type c);
	bool IsDefined(Type attributeType, bool inherit);
	bool IsInstanceOfType(object o);
	bool IsSubclassOf(Type c);
	string ToString();
}

// Namespace: System
[Serializable]
public class Exception : ISerializable, _Exception // TypeDefIndex: 57
{
	// Fields
	private IntPtr[] trace_ips; // 0x10
	private Exception inner_exception; // 0x20
	internal string message; // 0x30
	private string help_link; // 0x40
	private string class_name; // 0x4C
	private string stack_trace; // 0x58
	private string _remoteStackTraceString; // 0x10
	private int remote_stack_index; // 0x10
	internal int hresult; // 0x10
	private string source; // 0x18
	private IDictionary _data; // 0x28

	// Properties
	public Exception InnerException { get; } // 0x00000001800EAEC0 
	public virtual string HelpLink { get; set; } // 0x000000018013BF80 0x000000018015B760
	protected int HResult { get; set; } // 0x00000001801E9E40 0x0000000180211AA0
	private string ClassName { get; } // 0x0000000180211390 
	public virtual string Message { get; } // 0x0000000180211440 
	public virtual string Source { get; set; } // 0x0000000180211510 0x00000001801140B0
	public virtual string StackTrace { get; } // 0x0000000180211640 
	public MethodBase TargetSite { get; } // 0x00000001802119E0 
	public virtual IDictionary Data { get; } // 0x00000001802113E0 

	// Constructors
	public Exception(); // 0x0000000180211350
	public Exception(string message); // 0x0000000180211360
	protected Exception(SerializationInfo info, StreamingContext context); // 0x00000001802110E0
	public Exception(string message, Exception innerException); // 0x00000001802110A0

	// Methods
	internal void SetMessage(string s); // 0x00000001800EAED0
	internal void SetStackTrace(string s); // 0x000000018015B770
	public virtual Exception GetBaseException(); // 0x00000001802108B0
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0000000180210CB0
	public override string ToString(); // 0x0000000180210EC0
	internal Exception FixRemotingException(); // 0x00000001802107C0
	internal void GetFullNameForStackTrace(StringBuilder sb, MethodBase mi); // 0x00000001802108F0
	public Type GetType(); // 0x0000000180199040
}

// Namespace: System.Runtime.InteropServices
public interface _Exception // TypeDefIndex: 58
{
	// Properties
	string HelpLink { get; set; }
	Exception InnerException { get; }
	string Message { get; }
	string Source { get; set; }
	string StackTrace { get; }
	MethodBase TargetSite { get; }

	// Methods
	bool Equals(object obj);
	Exception GetBaseException();
	int GetHashCode();
	void GetObjectData(SerializationInfo info, StreamingContext context);
	Type GetType();
	string ToString();
}

// Namespace: System
[Serializable]
public struct RuntimeFieldHandle : ISerializable // TypeDefIndex: 59
{
	// Fields
	private IntPtr value; // 0x10

	// Properties
	public IntPtr Value { get; } // 0x0000000180002060 

	// Constructors
	internal RuntimeFieldHandle(IntPtr v); // 0x0000000180004760
	private RuntimeFieldHandle(SerializationInfo info, StreamingContext context); // 0x0000000180005350

	// Methods
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00000001800051E0
	public override bool Equals(object obj); // 0x00000001800050F0
	public bool Equals(RuntimeFieldHandle handle); // 0x00000001800050E0
	public override int GetHashCode(); // 0x00000001800051D0
	public static bool op_Equality(RuntimeFieldHandle left, RuntimeFieldHandle right); // 0x0000000180156370
	public static bool op_Inequality(RuntimeFieldHandle left, RuntimeFieldHandle right); // 0x0000000180156380
}

// Namespace: System
[Serializable]
public struct RuntimeTypeHandle : ISerializable // TypeDefIndex: 60
{
	// Fields
	private IntPtr value; // 0x10

	// Properties
	public IntPtr Value { get; } // 0x0000000180002060 

	// Constructors
	internal RuntimeTypeHandle(IntPtr val); // 0x0000000180004760
	private RuntimeTypeHandle(SerializationInfo info, StreamingContext context); // 0x0000000180005BB0

	// Methods
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0000000180005A60
	public override bool Equals(object obj); // 0x00000001800058B0
	public bool Equals(RuntimeTypeHandle handle); // 0x00000001800050E0
	public override int GetHashCode(); // 0x00000001800051D0
	public ModuleHandle GetModuleHandle(); // 0x0000000180005990
	public static bool op_Equality(RuntimeTypeHandle left, object right); // 0x0000000180156500
	public static bool op_Inequality(RuntimeTypeHandle left, object right); // 0x0000000180156590
	public static bool op_Equality(object left, RuntimeTypeHandle right); // 0x0000000180156470
	public static bool op_Inequality(object left, RuntimeTypeHandle right); // 0x0000000180156640
}

// Namespace: System
public sealed class ParamArrayAttribute : Attribute // TypeDefIndex: 61
{
	// Constructors
	public ParamArrayAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Runtime.InteropServices
public sealed class OutAttribute : Attribute // TypeDefIndex: 62
{
	// Constructors
	public OutAttribute(); // 0x00000001800EAC90

}

// Namespace: System
[Serializable]
public sealed class ObsoleteAttribute : Attribute // TypeDefIndex: 63
{
	// Fields
	private string _message; // 0x10
	private bool _error; // 0x10

	// Properties
	public string Message { get; } // 0x00000001800E20D0 
	public bool IsError { get; } // 0x00000001801249E0 

	// Constructors
	public ObsoleteAttribute(); // 0x00000001800EAC90
	public ObsoleteAttribute(string message); // 0x00000001801137E0
	public ObsoleteAttribute(string message, bool error); // 0x00000001801249A0

}

// Namespace: System.Runtime.InteropServices
public sealed class DllImportAttribute : Attribute // TypeDefIndex: 64
{
	// Fields
	public CallingConvention CallingConvention; // 0x10
	public CharSet CharSet; // 0x18
	private string Dll; // 0x28
	public string EntryPoint; // 0x2A
	public bool ExactSpelling; // 0x2C
	public bool PreserveSig; // 0x10
	public bool SetLastError; // 0x10
	public bool BestFitMapping; // 0x18
	public bool ThrowOnUnmappableChar; // 0x28

	// Properties
	public string Value { get; } // 0x00000001800EAEC0 

	// Constructors
	public DllImportAttribute(string dllName); // 0x00000001801C9180

}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class MethodImplAttribute : Attribute // TypeDefIndex: 65
{
	// Fields
	private MethodImplOptions _val; // 0x10
	public MethodCodeType MethodCodeType; // 0x10

	// Properties
	public MethodImplOptions Value { get; } // 0x00000001800ECD10 

	// Constructors
	public MethodImplAttribute(); // 0x00000001800EAC90
	public MethodImplAttribute(short value); // 0x00000001801EA260
	public MethodImplAttribute(MethodImplOptions methodImplOptions); // 0x000000018010E510

}

// Namespace: System.Runtime.InteropServices
public sealed class MarshalAsAttribute : Attribute // TypeDefIndex: 66
{
	// Fields
	private UnmanagedType utype; // 0x10
	public UnmanagedType ArraySubType; // 0x18
	public string MarshalCookie; // 0x28
	public string MarshalType; // 0x34
	public Type MarshalTypeRef; // 0x40
	public VarEnum SafeArraySubType; // 0x10
	public int SizeConst; // 0x10
	public short SizeParamIndex; // 0x10
	public Type SafeArrayUserDefinedSubType; // 0x10
	public int IidParameterIndex; // 0x10

	// Properties
	public UnmanagedType Value { get; } // 0x00000001800ECD10 

	// Constructors
	public MarshalAsAttribute(short unmanagedType); // 0x00000001801EA260
	public MarshalAsAttribute(UnmanagedType unmanagedType); // 0x000000018010E510

}

// Namespace: System.Runtime.InteropServices
public sealed class InAttribute : Attribute // TypeDefIndex: 67
{
	// Constructors
	public InAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class IndexerNameAttribute : Attribute // TypeDefIndex: 68
{
	// Constructors
	public IndexerNameAttribute(string indexerName); // 0x00000001800EAC90

}

// Namespace: System.Diagnostics
[Serializable]
public sealed class ConditionalAttribute : Attribute // TypeDefIndex: 69
{
	// Fields
	private string myCondition; // 0x10

	// Properties
	public string ConditionString { get; } // 0x00000001800E20D0 

	// Constructors
	public ConditionalAttribute(string conditionString); // 0x00000001801137E0

}

// Namespace: System.Security.Permissions
[Serializable]
public abstract class SecurityAttribute : Attribute // TypeDefIndex: 70
{
	// Fields
	private SecurityAction m_Action; // 0x10
	private bool m_Unrestricted; // 0x10

	// Properties
	public bool Unrestricted { get; set; } // 0x000000018029EB30 0x000000018029EB40
	public SecurityAction Action { get; set; } // 0x00000001800ECD10 0x0000000180143AD0

	// Constructors
	protected SecurityAttribute(SecurityAction action); // 0x000000018010E510

	// Methods
	public abstract IPermission CreatePermission();
}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class RequiredAttributeAttribute : Attribute // TypeDefIndex: 71
{
	// Properties
	public Type RequiredContract { get; } // 0x0000000180261B90 

	// Constructors
	public RequiredAttributeAttribute(Type requiredContract); // 0x00000001800EAC90

}

// Namespace: System.Runtime.InteropServices
public sealed class GuidAttribute : Attribute // TypeDefIndex: 72
{
	// Fields
	private string guidValue; // 0x10

	// Properties
	public string Value { get; } // 0x00000001800E20D0 

	// Constructors
	public GuidAttribute(string guid); // 0x00000001801137E0

}

// Namespace: System.Reflection
public sealed class AssemblyCultureAttribute : Attribute // TypeDefIndex: 73
{
	// Fields
	private string name; // 0x10

	// Properties
	public string Culture { get; } // 0x00000001800E20D0 

	// Constructors
	public AssemblyCultureAttribute(string culture); // 0x00000001801137E0

}

// Namespace: System.Reflection
public sealed class AssemblyVersionAttribute : Attribute // TypeDefIndex: 74
{
	// Fields
	private string name; // 0x10

	// Properties
	public string Version { get; } // 0x00000001800E20D0 

	// Constructors
	public AssemblyVersionAttribute(string version); // 0x00000001801137E0

}

// Namespace: System.Runtime.InteropServices
public sealed class ComImportAttribute : Attribute // TypeDefIndex: 75
{
	// Constructors
	public ComImportAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Runtime.InteropServices
public sealed class CoClassAttribute : Attribute // TypeDefIndex: 76
{
	// Fields
	private Type klass; // 0x10

	// Properties
	public Type CoClass { get; } // 0x00000001800E20D0 

	// Constructors
	public CoClassAttribute(Type coClass); // 0x00000001801137E0

}

// Namespace: System.Runtime.InteropServices
public sealed class OptionalAttribute : Attribute // TypeDefIndex: 77
{
	// Constructors
	public OptionalAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Runtime.InteropServices
public sealed class DefaultCharSetAttribute : Attribute // TypeDefIndex: 78
{
	// Fields
	private CharSet _set; // 0x10

	// Properties
	public CharSet CharSet { get; } // 0x00000001800ECD10 

	// Constructors
	public DefaultCharSetAttribute(CharSet charSet); // 0x000000018010E510

}

// Namespace: System.Runtime.CompilerServices
public sealed class TypeForwardedToAttribute : Attribute // TypeDefIndex: 79
{
	// Fields
	private Type destination; // 0x10

	// Properties
	public Type Destination { get; } // 0x00000001800E20D0 

	// Constructors
	public TypeForwardedToAttribute(Type destination); // 0x00000001801137E0

}

// Namespace: System.Runtime.CompilerServices
public sealed class FixedBufferAttribute : Attribute // TypeDefIndex: 80
{
	// Fields
	private Type elementType; // 0x10
	private int length; // 0x10

	// Properties
	public Type ElementType { get; } // 0x00000001800E20D0 
	public int Length { get; } // 0x00000001800ED060 

	// Constructors
	public FixedBufferAttribute(Type elementType, int length); // 0x000000018025AB70

}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class CompilerGeneratedAttribute : Attribute // TypeDefIndex: 81
{
	// Constructors
	public CompilerGeneratedAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Runtime.CompilerServices
public sealed class InternalsVisibleToAttribute : Attribute // TypeDefIndex: 82
{
	// Fields
	private string assemblyName; // 0x10
	private bool all_visible; // 0x10

	// Properties
	public string AssemblyName { get; } // 0x00000001800E20D0 
	public bool AllInternalsVisible { get; set; } // 0x00000001801249E0 0x00000001801AB4A0

	// Constructors
	public InternalsVisibleToAttribute(string assemblyName); // 0x000000018025FF90

}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class RuntimeCompatibilityAttribute : Attribute // TypeDefIndex: 83
{
	// Fields
	private bool wrap_non_exception_throws; // 0x10

	// Properties
	public bool WrapNonExceptionThrows { get; set; } // 0x0000000180113840 0x000000018018FBE0

	// Constructors
	public RuntimeCompatibilityAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Diagnostics
[Serializable]
public sealed class DebuggerHiddenAttribute : Attribute // TypeDefIndex: 84
{
	// Constructors
	public DebuggerHiddenAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class UnsafeValueTypeAttribute : Attribute // TypeDefIndex: 85
{
	// Constructors
	public UnsafeValueTypeAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Reflection
[Serializable]
public sealed class DefaultMemberAttribute : Attribute // TypeDefIndex: 86
{
	// Fields
	private string member_name; // 0x10

	// Properties
	public string MemberName { get; } // 0x00000001800E20D0 

	// Constructors
	public DefaultMemberAttribute(string memberName); // 0x00000001801137E0

}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class DecimalConstantAttribute : Attribute // TypeDefIndex: 87
{
	// Fields
	private byte scale; // 0x10
	private bool sign; // 0x14
	private int hi; // 0x1C
	private int mid; // 0x10
	private int low; // 0x18

	// Properties
	public Decimal Value { get; } // 0x000000018025AB20 

	// Constructors
	public DecimalConstantAttribute(byte scale, byte sign, uint hi, uint mid, uint low); // 0x000000018025AA80
	public DecimalConstantAttribute(byte scale, byte sign, int hi, int mid, int low); // 0x000000018025A9E0

}

// Namespace: System.Runtime.InteropServices
public sealed class StructLayoutAttribute : Attribute // TypeDefIndex: 88
{
	// Fields
	public CharSet CharSet; // 0x10
	public int Pack; // 0x18
	public int Size; // 0x10
	private LayoutKind lkind; // 0x10

	// Properties
	public LayoutKind Value { get; } // 0x00000001801AE2C0 

	// Constructors
	public StructLayoutAttribute(short layoutKind); // 0x00000001801F1C00
	public StructLayoutAttribute(LayoutKind layoutKind); // 0x00000001801F1BC0

}

// Namespace: System.Runtime.InteropServices
public sealed class FieldOffsetAttribute : Attribute // TypeDefIndex: 89
{
	// Fields
	private int val; // 0x10

	// Properties
	public int Value { get; } // 0x00000001800ECD10 

	// Constructors
	public FieldOffsetAttribute(int offset); // 0x000000018010E510

}

// Namespace: System
public struct RuntimeArgumentHandle // TypeDefIndex: 90
{
	// Fields
	internal IntPtr args; // 0x10

}

// Namespace: System
[Serializable]
public delegate void AsyncCallback(IAsyncResult ar); // TypeDefIndex: 91; 0x0000000180397A10

// Namespace: System
public interface IAsyncResult // TypeDefIndex: 92
{
	// Properties
	object AsyncState { get; }
	WaitHandle AsyncWaitHandle { get; }
	bool CompletedSynchronously { get; }
	bool IsCompleted { get; }

}

// Namespace: System
public struct TypedReference // TypeDefIndex: 93
{
	// Fields
	private RuntimeTypeHandle type; // 0x10
	private IntPtr value; // 0x20
	private IntPtr klass; // 0x10

	// Methods
	public override bool Equals(object o); // 0x000000018001B940
	public override int GetHashCode(); // 0x000000018001B950
	public static Type GetTargetType(TypedReference value); // 0x00000001802EE390
	public static TypedReference MakeTypedReference(object target, FieldInfo[] flds); // 0x00000001802EE440
	public static void SetTypedReference(TypedReference target, object value); // 0x00000001802EE550
	public static RuntimeTypeHandle TargetTypeToken(TypedReference value); // 0x00000001802EE5E0
	public static object ToObject(TypedReference value); // 0x00000001802EE5F0
}

// Namespace: System
public struct ArgIterator // TypeDefIndex: 94
{
	// Fields
	private IntPtr sig; // 0x10
	private IntPtr args; // 0x20
	private int next_arg; // 0x10
	private int num_args; // 0x00

	// Constructors
	public ArgIterator(RuntimeArgumentHandle arglist); // 0x0000000180008220
	public ArgIterator(RuntimeArgumentHandle arglist, void * ptr); // 0x0000000180008280

	// Methods
	private void Setup(IntPtr argsp, IntPtr start); // 0x0000000180008210
	public void End(); // 0x0000000180007F90
	public override bool Equals(object o); // 0x0000000180007FA0
	public override int GetHashCode(); // 0x00000001800051D0
	public TypedReference GetNextArg(); // 0x0000000180008100
	private TypedReference IntGetNextArg(); // 0x00000001800081D0
	public TypedReference GetNextArg(RuntimeTypeHandle rth); // 0x0000000180008040
	private TypedReference IntGetNextArg(IntPtr rth); // 0x00000001800081F0
	public RuntimeTypeHandle GetNextArgType(); // 0x0000000180007FB0
	private IntPtr IntGetNextArgType(); // 0x00000001800081C0
	public int GetRemainingCount(); // 0x00000001800081B0
}

// Namespace: System
[Serializable]
public abstract class MarshalByRefObject // TypeDefIndex: 95
{
	// Fields
	[NonSerialized]	private ServerIdentity _identity; // 0x10

	// Properties
	internal ServerIdentity ObjectIdentity { get; set; } // 0x00000001800E20D0 0x0000000180114C30

	// Constructors
	protected MarshalByRefObject(); // 0x00000001800E2000

	// Methods
	internal Identity GetObjectIdentity(MarshalByRefObject obj, out bool IsClient); // 0x000000018012A7D0
	public virtual ObjRef CreateObjRef(Type requestedType); // 0x000000018012A720
	public object GetLifetimeService(); // 0x000000018012A7C0
	public virtual object InitializeLifetimeService(); // 0x000000018012A890
	protected MarshalByRefObject MemberwiseClone(bool cloneIdentity); // 0x000000018012A8F0
}

// Namespace: System
[Serializable]
public struct Nullable`1 // TypeDefIndex: 96
{
	// Fields
	internal T value; // 0x00
	internal bool has_value; // 0x10

	// Properties
	public bool HasValue { get; }
	public T Value { get; }

	// Constructors
	public Nullable`1(T value);

	// Methods
	public override bool Equals(object other);
	private bool Equals(Nullable`1<T> other);
	public override int GetHashCode();
	public T GetValueOrDefault();
	public T GetValueOrDefault(T defaultValue);
	public override string ToString();
	private static object Box(Nullable`1<T> o);
	private static Nullable`1<T> Unbox(object o);
	public static Nullable`1<T> op_Implicit(T value);
	public static T op_Explicit(Nullable`1<T> value);
}

// Namespace: System.Runtime.CompilerServices
public static class RuntimeHelpers // TypeDefIndex: 97
{
	// Properties
	public static int OffsetToStringData { get; } // 0x000000018026AF90 

	// Methods
	private static void InitializeArray(Array array, IntPtr fldHandle); // 0x000000018026ADC0
	public static void InitializeArray(Array array, RuntimeFieldHandle fldHandle); // 0x000000018026AD30
	public static int GetHashCode(object o); // 0x000000018026AD10
	public static bool Equals(object o1, object o2); // 0x000000018026AC80
	public static object GetObjectValue(object obj); // 0x000000018026AD20
	private static void RunClassConstructor(IntPtr type); // 0x000000018026AEC0
	public static void RunClassConstructor(RuntimeTypeHandle type); // 0x000000018026AE40
	public static void ExecuteCodeWithGuaranteedCleanup(TryCode code, CleanupCode backoutCode, object userData); // 0x00000001800EA7B0
	public static void PrepareConstrainedRegions(); // 0x00000001800EA7B0
	public static void PrepareConstrainedRegionsNoOP(); // 0x00000001800EA7B0
	public static void ProbeForSufficientStack(); // 0x00000001800EA7B0
	public static void PrepareDelegate(Delegate d); // 0x000000018026ADD0
	public static void PrepareMethod(RuntimeMethodHandle method); // 0x00000001800EA7B0
	public static void PrepareMethod(RuntimeMethodHandle method, RuntimeTypeHandle[] instantiation); // 0x00000001800EA7B0
	public static void RunModuleConstructor(ModuleHandle module); // 0x000000018026AEE0
	public static void RunModuleConstructor(IntPtr module); // 0x000000018026AED0
}

// Namespace: 
public delegate void TryCode(object userData); // TypeDefIndex: 98; 0x0000000180195FA0

// Namespace: 
public delegate void CleanupCode(object userData, bool exceptionThrown); // TypeDefIndex: 99; 0x000000018025A230

// Namespace: 
internal static class Consts // TypeDefIndex: 100
{
	// Fields
	public const string MonoVersion = "2.6.5.0"; // 0x00
	public const string MonoCompany = "MONO development team"; // 0x00
	public const string MonoProduct = "MONO Common language infrastructure"; // 0x00
	public const string MonoCopyright = "(c) various MONO Authors"; // 0x00
	public const string FxVersion = "2.0.0.0"; // 0x00
	public const string VsVersion = "8.0.0.0"; // 0x00
	public const string FxFileVersion = "2.0.50727.1433"; // 0x00
	public const string VsFileVersion = "8.0.50727.1433"; // 0x00
	public const string AssemblyI18N = "I18N, Version=2.0.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756"; // 0x00
	public const string AssemblyMicrosoft_VisualStudio = "Microsoft.VisualStudio, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	public const string AssemblyMicrosoft_VisualStudio_Web = "Microsoft.VisualStudio.Web, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	public const string AssemblyMicrosoft_VSDesigner = "Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	public const string AssemblyMono_Http = "Mono.Http, Version=2.0.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756"; // 0x00
	public const string AssemblyMono_Posix = "Mono.Posix, Version=2.0.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756"; // 0x00
	public const string AssemblyMono_Security = "Mono.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756"; // 0x00
	public const string AssemblyMono_Messaging_RabbitMQ = "Mono.Messaging.RabbitMQ, Version=2.0.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756"; // 0x10
	public const string AssemblyCorlib = "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"; // 0x00
	public const string AssemblySystem = "System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"; // 0x14
	public const string AssemblySystem_Data = "System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"; // 0x00
	public const string AssemblySystem_Design = "System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x18
	public const string AssemblySystem_DirectoryServices = "System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	public const string AssemblySystem_Drawing = "System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x18
	public const string AssemblySystem_Drawing_Design = "System.Drawing.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	public const string AssemblySystem_Messaging = "System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x18
	public const string AssemblySystem_Security = "System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	public const string AssemblySystem_ServiceProcess = "System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x18
	public const string AssemblySystem_Web = "System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x08
	public const string AssemblySystem_Windows_Forms = "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"; // 0x18
	public const string AssemblySystem_Core = "System.Core, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"; // 0x00

}

// Namespace: 
internal sealed class Locale // TypeDefIndex: 101
{
	// Constructors
	private Locale(); // 0x00000001800E2000

	// Methods
	public static string GetText(string msg); // 0x0000000180123590
	public static string GetText(string fmt, object[] args); // 0x00000001802C64F0
}

// Namespace: System
internal class MonoTODOAttribute : Attribute // TypeDefIndex: 102
{
	// Fields
	private string comment; // 0x10

	// Properties
	public string Comment { get; } // 0x00000001800E20D0 

	// Constructors
	public MonoTODOAttribute(); // 0x00000001800EAC90
	public MonoTODOAttribute(string comment); // 0x00000001801137E0

}

// Namespace: System
internal class MonoDocumentationNoteAttribute : MonoTODOAttribute // TypeDefIndex: 103
{
	// Constructors
	public MonoDocumentationNoteAttribute(string comment); // 0x00000001801137E0

}

// Namespace: System
internal class MonoExtensionAttribute : MonoTODOAttribute // TypeDefIndex: 104
{
	// Constructors
	public MonoExtensionAttribute(string comment); // 0x00000001801137E0

}

// Namespace: System
internal class MonoInternalNoteAttribute : MonoTODOAttribute // TypeDefIndex: 105
{
	// Constructors
	public MonoInternalNoteAttribute(string comment); // 0x00000001801137E0

}

// Namespace: System
internal class MonoLimitationAttribute : MonoTODOAttribute // TypeDefIndex: 106
{
	// Constructors
	public MonoLimitationAttribute(string comment); // 0x00000001801137E0

}

// Namespace: System
internal class MonoNotSupportedAttribute : MonoTODOAttribute // TypeDefIndex: 107
{
	// Constructors
	public MonoNotSupportedAttribute(string comment); // 0x00000001801137E0

}

// Namespace: Microsoft.Win32.SafeHandles
public abstract class CriticalHandleMinusOneIsInvalid : CriticalHandle, IDisposable // TypeDefIndex: 108
{
	// Properties
	public override bool IsInvalid { get; } // 0x00000001802BFDB0 

	// Constructors
	protected CriticalHandleMinusOneIsInvalid(); // 0x00000001802BFD80

}

// Namespace: Microsoft.Win32.SafeHandles
public abstract class CriticalHandleZeroOrMinusOneIsInvalid : CriticalHandle, IDisposable // TypeDefIndex: 109
{
	// Properties
	public override bool IsInvalid { get; } // 0x00000001802BFDE0 

	// Constructors
	protected CriticalHandleZeroOrMinusOneIsInvalid(); // 0x00000001802BFD80

}

// Namespace: Microsoft.Win32.SafeHandles
public sealed class SafeFileHandle : SafeHandleZeroOrMinusOneIsInvalid // TypeDefIndex: 110
{
	// Constructors
	public SafeFileHandle(IntPtr preexistingHandle, bool ownsHandle); // 0x00000001802CEFA0
	internal SafeFileHandle(); // 0x00000001802CEFF0

	// Methods
	protected override bool ReleaseHandle(); // 0x00000001802CEF30
}

// Namespace: Microsoft.Win32.SafeHandles
public abstract class SafeHandleMinusOneIsInvalid : SafeHandle, IDisposable // TypeDefIndex: 111
{
	// Properties
	public override bool IsInvalid { get; } // 0x00000001802BFDB0 

	// Constructors
	protected SafeHandleMinusOneIsInvalid(bool ownsHandle); // 0x00000001802CF020

}

// Namespace: Microsoft.Win32.SafeHandles
public abstract class SafeHandleZeroOrMinusOneIsInvalid : SafeHandle, IDisposable // TypeDefIndex: 112
{
	// Properties
	public override bool IsInvalid { get; } // 0x00000001802CF060 

	// Constructors
	protected SafeHandleZeroOrMinusOneIsInvalid(bool ownsHandle); // 0x00000001802CF020

}

// Namespace: Microsoft.Win32.SafeHandles
public sealed class SafeWaitHandle : SafeHandleZeroOrMinusOneIsInvalid // TypeDefIndex: 113
{
	// Constructors
	public SafeWaitHandle(IntPtr existingHandle, bool ownsHandle); // 0x00000001802CEFA0

	// Methods
	protected override bool ReleaseHandle(); // 0x00000001802CF0C0
}

// Namespace: Microsoft.Win32
internal interface IRegistryApi // TypeDefIndex: 114
{
	// Methods
	RegistryKey CreateSubKey(RegistryKey rkey, string keyname);
	RegistryKey OpenRemoteBaseKey(RegistryHive hKey, string machineName);
	RegistryKey OpenSubKey(RegistryKey rkey, string keyname, bool writtable);
	void Flush(RegistryKey rkey);
	void Close(RegistryKey rkey);
	object GetValue(RegistryKey rkey, string name, object default_value, RegistryValueOptions options);
	void SetValue(RegistryKey rkey, string name, object value);
	int SubKeyCount(RegistryKey rkey);
	int ValueCount(RegistryKey rkey);
	void DeleteValue(RegistryKey rkey, string value, bool throw_if_missing);
	void DeleteKey(RegistryKey rkey, string keyName, bool throw_if_missing);
	string[] GetSubKeyNames(RegistryKey rkey);
	string[] GetValueNames(RegistryKey rkey);
	string ToString(RegistryKey rkey);
	void SetValue(RegistryKey rkey, string name, object value, RegistryValueKind valueKind);
}

// Namespace: Microsoft.Win32
public static class Registry // TypeDefIndex: 115
{
	// Fields
	public static readonly RegistryKey ClassesRoot; // 0x00
	public static readonly RegistryKey CurrentConfig; // 0x10
	public static readonly RegistryKey CurrentUser; // 0x20
	public static readonly RegistryKey DynData; // 0x30
	public static readonly RegistryKey LocalMachine; // 0x10
	public static readonly RegistryKey PerformanceData; // 0x00
	public static readonly RegistryKey Users; // 0x00
	private static Dictionary`2<string, int> <>f__switch$map0; // 0x00

	// Constructors
	private static Registry(); // 0x00000001802CECC0

	// Methods
	private static RegistryKey ToKey(string keyName, bool setting); // 0x00000001802CE770
	public static void SetValue(string keyName, string valueName, object value); // 0x00000001802CE660
	public static void SetValue(string keyName, string valueName, object value, RegistryValueKind valueKind); // 0x00000001802CE530
	public static object GetValue(string keyName, string valueName, object defaultValue); // 0x00000001802CE490
}

// Namespace: Microsoft.Win32
[Serializable]
public enum RegistryHive // TypeDefIndex: 116
{
	ClassesRoot = -2147483648,
	CurrentUser = -2147483647,
	LocalMachine = -2147483646,
	Users = -2147483645,
	PerformanceData = -2147483644,
	CurrentConfig = -2147483643,
	DynData = -2147483642
}

// Namespace: Microsoft.Win32
public sealed class RegistryKey : MarshalByRefObject, IDisposable // TypeDefIndex: 117
{
	// Fields
	private object handle; // 0x18
	private object hive; // 0x28
	private readonly string qname; // 0x31
	private readonly bool isRemoteRoot; // 0x10
	private readonly bool isWritable; // 0x00
	private static readonly IRegistryApi RegistryApi; // 0x10

	// Properties
	public string Name { get; } // 0x000000018013BF80 
	public int SubKeyCount { get; } // 0x00000001802CE2D0 
	public int ValueCount { get; } // 0x00000001802CE3B0 
	internal bool IsRoot { get; } // 0x0000000180158570 
	private bool IsWritable { get; } // 0x00000001802CE2C0 
	internal RegistryHive Hive { get; } // 0x00000001802CE230 
	internal object Handle { get; } // 0x00000001800EAEC0 

	// Constructors
	internal RegistryKey(RegistryHive hiveId); // 0x00000001802CE190
	internal RegistryKey(RegistryHive hiveId, IntPtr keyHandle, bool remoteRoot); // 0x00000001802CDFC0
	internal RegistryKey(object data, string keyName, bool writable); // 0x00000001802CE1E0
	private static RegistryKey(); // 0x00000001802CDEA0

	// Methods
	private void System.IDisposable.Dispose(); // 0x00000001802CDD30
	protected override void Finalize(); // 0x00000001802CCE00
	public void Flush(); // 0x00000001802CCE90
	public void Close(); // 0x00000001802CC090
	public void SetValue(string name, object value); // 0x00000001802CD930
	public void SetValue(string name, object value, RegistryValueKind valueKind); // 0x00000001802CDB20
	public RegistryKey OpenSubKey(string name); // 0x00000001802CD6D0
	public RegistryKey OpenSubKey(string name, bool writable); // 0x00000001802CD6E0
	public object GetValue(string name); // 0x00000001802CD430
	public object GetValue(string name, object defaultValue); // 0x00000001802CD440
	public object GetValue(string name, object defaultValue, RegistryValueOptions options); // 0x00000001802CD320
	public RegistryValueKind GetValueKind(string name); // 0x00000001802CD1F0
	public RegistryKey CreateSubKey(string subkey); // 0x00000001802CC240
	public RegistryKey CreateSubKey(string subkey, RegistryKeyPermissionCheck permissionCheck); // 0x00000001802CC430
	public RegistryKey CreateSubKey(string subkey, RegistryKeyPermissionCheck permissionCheck, RegistrySecurity registrySecurity); // 0x00000001802CC1F0
	public void DeleteSubKey(string subkey); // 0x00000001802CC960
	public void DeleteSubKey(string subkey, bool throwOnMissingSubKey); // 0x00000001802CC970
	public void DeleteSubKeyTree(string subkey); // 0x00000001802CC7F0
	public void DeleteValue(string name); // 0x00000001802CCDF0
	public void DeleteValue(string name, bool throwOnMissingValue); // 0x00000001802CCC80
	public RegistrySecurity GetAccessControl(); // 0x00000001802CCF60
	public RegistrySecurity GetAccessControl(AccessControlSections includeSections); // 0x00000001802CCF10
	public string[] GetSubKeyNames(); // 0x00000001802CD110
	public string[] GetValueNames(); // 0x00000001802CD240
	public static RegistryKey OpenRemoteBaseKey(RegistryHive hKey, string machineName); // 0x00000001802CD540
	public RegistryKey OpenSubKey(string name, RegistryKeyPermissionCheck permissionCheck); // 0x00000001802CD890
	public RegistryKey OpenSubKey(string name, RegistryKeyPermissionCheck permissionCheck, RegistryRights rights); // 0x00000001802CD680
	public void SetAccessControl(RegistrySecurity registrySecurity); // 0x00000001802CD8E0
	public override string ToString(); // 0x00000001802CDD50
	private void AssertKeyStillValid(); // 0x00000001802CC020
	private void AssertKeyNameNotNull(string subKeyName); // 0x00000001802CBFB0
	private void AssertKeyNameLength(string name); // 0x00000001802CBF30
	private void DeleteChildKeysAndValues(); // 0x00000001802CC540
	internal static string DecodeString(byte[] data); // 0x00000001802CC480
	internal static IOException CreateMarkedForDeletionException(); // 0x00000001802CC190
	private static string GetHiveName(RegistryHive hive); // 0x00000001802CCFB0
}

// Namespace: Microsoft.Win32
public enum RegistryKeyPermissionCheck // TypeDefIndex: 118
{
	Default = 0,
	ReadSubTree = 1,
	ReadWriteSubTree = 2
}

// Namespace: Microsoft.Win32
public enum RegistryValueKind // TypeDefIndex: 119
{
	Unknown = 0,
	String = 1,
	ExpandString = 2,
	Binary = 3,
	DWord = 4,
	MultiString = 7,
	QWord = 11
}

// Namespace: Microsoft.Win32
public enum RegistryValueOptions // TypeDefIndex: 120
{
	None = 0,
	DoNotExpandEnvironmentNames = 1
}

// Namespace: Microsoft.Win32
internal class ExpandString // TypeDefIndex: 121
{
	// Fields
	private string value; // 0x10

	// Constructors
	public ExpandString(string s); // 0x000000018015C840

	// Methods
	public override string ToString(); // 0x00000001800E20D0
	public string Expand(); // 0x00000001802C28E0
}

// Namespace: Microsoft.Win32
internal class KeyHandler // TypeDefIndex: 122
{
	// Fields
	private static Hashtable key_to_handler; // 0x00
	private static Hashtable dir_to_handler; // 0x10
	public string Dir; // 0x20
	private Hashtable values; // 0x10
	private string file; // 0x00
	private bool dirty; // 0x00
	private static Dictionary`2<string, int> <>f__switch$map1; // 0x10

	// Properties
	public int ValueCount { get; } // 0x00000001802C6300 
	public bool IsMarkedForDeletion { get; } // 0x00000001802C6130 
	private static string UserStore { get; } // 0x00000001802C6290 
	private static string MachineStore { get; } // 0x00000001802C61C0 

	// Constructors
	private KeyHandler(RegistryKey rkey, string basedir); // 0x00000001802C6040
	private static KeyHandler(); // 0x00000001802C5F70

	// Methods
	public void Load(); // 0x00000001802C42D0
	private void LoadKey(SecurityElement se); // 0x00000001802C3C90
	public RegistryKey Ensure(RegistryKey rkey, string extra, bool writable); // 0x00000001802C35B0
	public RegistryKey Probe(RegistryKey rkey, string extra, bool writable); // 0x00000001802C4D40
	private static string CombineName(RegistryKey rkey, string extra); // 0x00000001802C2AD0
	public static KeyHandler Lookup(RegistryKey rkey, bool createNonExisting); // 0x00000001802C4720
	public static void Drop(RegistryKey rkey); // 0x00000001802C2B90
	public static void Drop(string dir); // 0x00000001802C2FD0
	public object GetValue(string name, RegistryValueOptions options); // 0x00000001802C3B60
	public void SetValue(string name, object value); // 0x00000001802C5D40
	public string[] GetValueNames(); // 0x00000001802C3A10
	public void SetValue(string name, object value, RegistryValueKind valueKind); // 0x00000001802C5980
	private void SetDirty(); // 0x00000001802C5830
	public void DirtyTimeout(object state); // 0x00000001802C2B80
	public void Flush(); // 0x00000001802C3910
	public bool ValueExists(string name); // 0x00000001802C5EE0
	public void RemoveValue(string name); // 0x00000001802C50B0
	protected override void Finalize(); // 0x00000001802C3880
	private void Save(); // 0x00000001802C5150
	private void AssertNotMarkedForDeletion(); // 0x00000001802C2A70
}

// Namespace: Microsoft.Win32
internal class UnixRegistryApi : IRegistryApi // TypeDefIndex: 123
{
	// Constructors
	public UnixRegistryApi(); // 0x00000001800E2000

	// Methods
	private static string ToUnix(string keyname); // 0x00000001802D8FE0
	private static bool IsWellKnownKey(string parentKeyName, string keyname); // 0x00000001802D87C0
	public RegistryKey CreateSubKey(RegistryKey rkey, string keyname); // 0x00000001802D7F40
	public RegistryKey OpenRemoteBaseKey(RegistryHive hKey, string machineName); // 0x00000001802D8970
	public RegistryKey OpenSubKey(RegistryKey rkey, string keyname, bool writable); // 0x00000001802D89C0
	public void Flush(RegistryKey rkey); // 0x00000001802D8270
	public void Close(RegistryKey rkey); // 0x00000001802D7DD0
	public object GetValue(RegistryKey rkey, string name, object default_value, RegistryValueOptions options); // 0x00000001802D8600
	public void SetValue(RegistryKey rkey, string name, object value); // 0x00000001802D8C70
	public void SetValue(RegistryKey rkey, string name, object value, RegistryValueKind valueKind); // 0x00000001802D8E60
	public int SubKeyCount(RegistryKey rkey); // 0x00000001802D8F20
	public int ValueCount(RegistryKey rkey); // 0x00000001802D9040
	public void DeleteValue(RegistryKey rkey, string name, bool throw_if_missing); // 0x00000001802D8120
	public void DeleteKey(RegistryKey rkey, string keyname, bool throw_if_missing); // 0x00000001802D7F60
	public string[] GetSubKeyNames(RegistryKey rkey); // 0x00000001802D82E0
	public string[] GetValueNames(RegistryKey rkey); // 0x00000001802D8450
	public string ToString(RegistryKey rkey); // 0x00000001802D8FC0
	private RegistryKey CreateSubKey(RegistryKey rkey, string keyname, bool writable); // 0x00000001802D7E30
}

// Namespace: Microsoft.Win32
internal class Win32RegistryApi : IRegistryApi // TypeDefIndex: 124
{
	// Fields
	private const int OpenRegKeyRead = 131097; // 0x00
	private const int OpenRegKeyWrite = 131078; // 0x00
	private const int Int32ByteSize = 4; // 0x10
	private const int BufferMaxLength = 1024; // 0x10
	private readonly int NativeBytesPerCharacter; // 0x1C

	// Constructors
	public Win32RegistryApi(); // 0x00000001802DC4F0

	// Methods
	private static extern int RegCreateKey(IntPtr keyBase, string keyName, out IntPtr keyHandle); // 0x00000001802DAB60
	private static extern int RegCloseKey(IntPtr keyHandle); // 0x00000001802DA9F0
	private static extern int RegConnectRegistry(string machineName, IntPtr hKey, out IntPtr keyHandle); // 0x00000001802DAA90
	private static extern int RegFlushKey(IntPtr keyHandle); // 0x00000001802DAFD0
	private static extern int RegOpenKeyEx(IntPtr keyBase, string keyName, IntPtr reserved, int access, out IntPtr keyHandle); // 0x00000001802DB070
	private static extern int RegDeleteKey(IntPtr keyHandle, string valueName); // 0x00000001802DAC30
	private static extern int RegDeleteValue(IntPtr keyHandle, string valueName); // 0x00000001802DACF0
	private static extern int RegEnumKey(IntPtr keyBase, int index, StringBuilder nameBuffer, int bufferLength); // 0x00000001802DADB0
	private static extern int RegEnumValue(IntPtr keyBase, int index, StringBuilder nameBuffer, int nameLength, IntPtr reserved, RegistryValueKind type, IntPtr data, IntPtr dataLength); // 0x00000001802DAEA0
	private static extern int RegSetValueEx(IntPtr keyBase, string valueName, IntPtr reserved, RegistryValueKind type, string data, int rawDataLength); // 0x00000001802DB5B0
	private static extern int RegSetValueEx(IntPtr keyBase, string valueName, IntPtr reserved, RegistryValueKind type, byte[] rawData, int rawDataLength); // 0x00000001802DB6B0
	private static extern int RegSetValueEx(IntPtr keyBase, string valueName, IntPtr reserved, RegistryValueKind type, int data, int rawDataLength); // 0x00000001802DB4C0
	private static extern int RegQueryValueEx(IntPtr keyBase, string valueName, IntPtr reserved, RegistryValueKind type, IntPtr zero, int dataSize); // 0x00000001802DB160
	private static extern int RegQueryValueEx(IntPtr keyBase, string valueName, IntPtr reserved, RegistryValueKind type, out byte[] data, int dataSize); // 0x00000001802DB340
	private static extern int RegQueryValueEx(IntPtr keyBase, string valueName, IntPtr reserved, RegistryValueKind type, int data, int dataSize); // 0x00000001802DB250
	private static IntPtr GetHandle(RegistryKey key); // 0x00000001802D9C80
	private static bool IsHandleValid(RegistryKey key); // 0x00000001802DA670
	public object GetValue(RegistryKey rkey, string name, object defaultValue, RegistryValueOptions options); // 0x00000001802DA1E0
	public void SetValue(RegistryKey rkey, string name, object value, RegistryValueKind valueKind); // 0x00000001802DBC40
	public void SetValue(RegistryKey rkey, string name, object value); // 0x00000001802DB7B0
	private int GetBinaryValue(RegistryKey rkey, string name, RegistryValueKind type, out byte[] data, int size); // 0x00000001802D9A70
	public int SubKeyCount(RegistryKey rkey); // 0x00000001802DC140
	public int ValueCount(RegistryKey rkey); // 0x00000001802DC290
	public RegistryKey OpenRemoteBaseKey(RegistryHive hKey, string machineName); // 0x00000001802DA690
	public RegistryKey OpenSubKey(RegistryKey rkey, string keyName, bool writable); // 0x00000001802DA7E0
	public void Flush(RegistryKey rkey); // 0x00000001802D9860
	public void Close(RegistryKey rkey); // 0x00000001802D9120
	public RegistryKey CreateSubKey(RegistryKey rkey, string keyName); // 0x00000001802D92B0
	public void DeleteKey(RegistryKey rkey, string keyName, bool shouldThrowWhenKeyMissing); // 0x00000001802D94B0
	public void DeleteValue(RegistryKey rkey, string value, bool shouldThrowWhenKeyMissing); // 0x00000001802D9680
	public string[] GetSubKeyNames(RegistryKey rkey); // 0x00000001802D9CF0
	public string[] GetValueNames(RegistryKey rkey); // 0x00000001802D9EC0
	private void GenerateException(int errorCode); // 0x00000001802D9970
	public string ToString(RegistryKey rkey); // 0x00000001802D8FC0
	internal static string CombineName(RegistryKey rkey, string localName); // 0x00000001802D9230
}

// Namespace: Microsoft.Win32
internal class Win32ResultCode // TypeDefIndex: 125
{
	// Fields
	public const int Success = 0; // 0x00
	public const int FileNotFound = 2; // 0x00
	public const int AccessDenied = 5; // 0x00
	public const int InvalidParameter = 87; // 0x00
	public const int MoreData = 234; // 0x28
	public const int NetworkPathNotFound = 53; // 0x00
	public const int NoMoreEntries = 259; // 0x30
	public const int MarkedForDeletion = 1018; // 0x00

	// Constructors
	public Win32ResultCode(); // 0x00000001800E2000

}

// Namespace: Mono.Globalization.Unicode
internal class CodePointIndexer // TypeDefIndex: 126
{
	// Fields
	private readonly TableRange[] ranges; // 0x10
	public readonly int TotalCount; // 0x1C
	private int defaultIndex; // 0x10
	private int defaultCP; // 0x18

	// Constructors
	public CodePointIndexer(int[] starts, int[] ends, int defaultIndex, int defaultCP); // 0x00000001802BED40

	// Methods
	public static Array CompressArray(Array source, Type type, CodePointIndexer indexer); // 0x00000001802BEB00
	public int ToIndex(int cp); // 0x00000001802BECB0
	public int ToCodePoint(int i); // 0x00000001802BEC20
}

// Namespace: 
[Serializable]
internal struct TableRange // TypeDefIndex: 127
{
	// Fields
	public readonly int Start; // 0x10
	public readonly int End; // 0x18
	public readonly int Count; // 0x20
	public readonly int IndexStart; // 0x10
	public readonly int IndexEnd; // 0x18

	// Constructors
	public TableRange(int start, int end, int indexStart); // 0x000000018001AFB0

}

// Namespace: Mono.Globalization.Unicode
internal class TailoringInfo // TypeDefIndex: 128
{
	// Fields
	public readonly int LCID; // 0x10
	public readonly int TailoringIndex; // 0x18
	public readonly int TailoringCount; // 0x10
	public readonly bool FrenchSort; // 0x20

	// Constructors
	public TailoringInfo(int lcid, int tailoringIndex, int tailoringCount, bool frenchSort); // 0x0000000180321100

}

// Namespace: Mono.Globalization.Unicode
internal class Contraction // TypeDefIndex: 129
{
	// Fields
	public readonly char[] Source; // 0x10
	public readonly string Replacement; // 0x20
	public readonly byte[] SortKey; // 0x10

	// Constructors
	public Contraction(char[] source, string replacement, byte[] sortkey); // 0x000000018015B4D0

}

// Namespace: Mono.Globalization.Unicode
internal class ContractionComparer : IComparer // TypeDefIndex: 130
{
	// Fields
	public static readonly ContractionComparer Instance; // 0x00

	// Constructors
	public ContractionComparer(); // 0x00000001800E2000
	private static ContractionComparer(); // 0x00000001802BF110

	// Methods
	public int Compare(object o1, object o2); // 0x00000001802BEF80
}

// Namespace: Mono.Globalization.Unicode
internal class Level2Map // TypeDefIndex: 131
{
	// Fields
	public byte Source; // 0x10
	public byte Replace; // 0x00

	// Constructors
	public Level2Map(byte source, byte replace); // 0x00000001802C64B0

}

// Namespace: Mono.Globalization.Unicode
internal class Level2MapComparer : IComparer // TypeDefIndex: 132
{
	// Fields
	public static readonly Level2MapComparer Instance; // 0x00

	// Constructors
	public Level2MapComparer(); // 0x00000001800E2000
	private static Level2MapComparer(); // 0x00000001802C6450

	// Methods
	public int Compare(object o1, object o2); // 0x00000001802C6360
}

// Namespace: Mono.Globalization.Unicode
internal class MSCompatUnicodeTable // TypeDefIndex: 133
{
	// Fields
	private const int ResourceVersionSize = 1; // 0x00
	public static int MaxExpansionLength; // 0x08
	private static readonly void * ignorableFlags; // 0x18
	private static readonly void * categories; // 0x28
	private static readonly void * level1; // 0x38
	private static readonly void * level2; // 0x48
	private static readonly void * level3; // 0x58
	private static void * cjkCHScategory; // 0x68
	private static void * cjkCHTcategory; // 0x78
	private static void * cjkJAcategory; // 0x88
	private static void * cjkKOcategory; // 0x98
	private static void * cjkCHSlv1; // 0xA8
	private static void * cjkCHTlv1; // 0x00
	private static void * cjkJAlv1; // 0x08
	private static void * cjkKOlv1; // 0x18
	private static void * cjkKOlv2; // 0x28
	private static readonly char[] tailoringArr; // 0x10
	private static readonly TailoringInfo[] tailoringInfos; // 0x00
	private static object forLock; // 0x00
	public static readonly bool isReady; // 0x00
	private static Dictionary`2<string, int> <>f__switch$map2; // 0x00
	private static Dictionary`2<string, int> <>f__switch$map3; // 0x00
	private static Dictionary`2<string, int> <>f__switch$map4; // 0x00

	// Properties
	public static bool IsReady { get; } // 0x00000001802C9350 

	// Constructors
	public MSCompatUnicodeTable(); // 0x00000001800E2000
	private static MSCompatUnicodeTable(); // 0x00000001802C8DF0

	// Methods
	public static TailoringInfo GetTailoringInfo(int lcid); // 0x00000001802C7E80
	public static void BuildTailoringTables(CultureInfo culture, TailoringInfo t, Contraction[] contractions, Level2Map[] diacriticals); // 0x00000001802C6CD0
	private static void SetCJKReferences(string name, CodePointIndexer cjkIndexer, void * catTable, void * lv1Table, CodePointIndexer lv2Indexer, void * lv2Table); // 0x00000001802C8820
	public static byte Category(int cp); // 0x00000001802C7360
	public static byte Level1(int cp); // 0x00000001802C85E0
	public static byte Level2(int cp); // 0x00000001802C86A0
	public static byte Level3(int cp); // 0x00000001802C8760
	public static bool IsSortable(string s); // 0x00000001802C8530
	public static bool IsSortable(int cp); // 0x00000001802C8410
	public static bool IsIgnorable(int cp); // 0x00000001802C8280
	public static bool IsIgnorable(int cp, byte flag); // 0x00000001802C8150
	public static bool IsIgnorableSymbol(int cp); // 0x00000001802C80F0
	public static bool IsIgnorableNonSpacing(int cp); // 0x00000001802C8090
	public static int ToKanaTypeInsensitive(int i); // 0x00000001802C8C20
	public static int ToWidthCompat(int i); // 0x00000001802C8C40
	public static bool HasSpecialWeight(char c); // 0x00000001802C7FE0
	public static byte GetJapaneseDashType(char c); // 0x00000001802C7DC0
	public static bool IsHalfWidthKana(char c); // 0x00000001802C8050
	public static bool IsHiragana(char c); // 0x00000001802C8070
	public static bool IsJapaneseSmallLetter(char c); // 0x00000001802C82E0
	private static IntPtr GetResource(string name); // 0x00000001802C7E00
	private static uint UInt32FromBytePtr(void * raw, uint idx); // 0x00000001802C8DB0
	public static void FillCJK(string culture, CodePointIndexer cjkIndexer, void * catTable, void * lv1Table, CodePointIndexer lv2Indexer, void * lv2Table); // 0x00000001802C7C50
	private static void FillCJKCore(string culture, CodePointIndexer cjkIndexer, void * catTable, void * lv1Table, CodePointIndexer cjkLv2Indexer, void * lv2Table); // 0x00000001802C7420
}

// Namespace: Mono.Globalization.Unicode
internal class MSCompatUnicodeTableUtil // TypeDefIndex: 134
{
	// Fields
	public const byte ResourceVersion = 3; // 0x00
	public static readonly CodePointIndexer Ignorable; // 0x08
	public static readonly CodePointIndexer Category; // 0x18
	public static readonly CodePointIndexer Level1; // 0x28
	public static readonly CodePointIndexer Level2; // 0x10
	public static readonly CodePointIndexer Level3; // 0x00
	public static readonly CodePointIndexer CjkCHS; // 0x00
	public static readonly CodePointIndexer Cjk; // 0x00

	// Constructors
	public MSCompatUnicodeTableUtil(); // 0x00000001800E2000
	private static MSCompatUnicodeTableUtil(); // 0x00000001802C6560

}

// Namespace: Mono.Globalization.Unicode
internal enum NormalizationCheck // TypeDefIndex: 135
{
	Yes = 0,
	No = 1,
	Maybe = 2
}

// Namespace: Mono.Globalization.Unicode
internal class Normalization // TypeDefIndex: 136
{
	// Fields
	public const int NoNfd = 1; // 0x00
	public const int NoNfkd = 2; // 0x00
	public const int NoNfc = 4; // 0x00
	public const int MaybeNfc = 8; // 0x00
	public const int NoNfkc = 16; // 0x00
	public const int MaybeNfkc = 32; // 0x00
	public const int FullCompositionExclusion = 64; // 0x00
	public const int IsUnsafe = 128; // 0x00
	private const int HangulSBase = 44032; // 0x00
	private const int HangulLBase = 4352; // 0x08
	private const int HangulVBase = 4449; // 0x18
	private const int HangulTBase = 4519; // 0x28
	private const int HangulLCount = 19; // 0x38
	private const int HangulVCount = 21; // 0x00
	private const int HangulTCount = 28; // 0x10
	private const int HangulNCount = 588; // 0x20
	private const int HangulSCount = 11172; // 0x00
	private static void * props; // 0x08
	private static void * mappedChars; // 0x18
	private static void * charMapIndex; // 0x28
	private static void * helperIndex; // 0x38
	private static void * mapIdxToComposite; // 0x48
	private static void * combiningClass; // 0x58
	private static object forLock; // 0x10
	public static readonly bool isReady; // 0x20

	// Properties
	public static bool IsReady { get; } // 0x00000001802CBC90 

	// Constructors
	public Normalization(); // 0x00000001800E2000
	private static Normalization(); // 0x00000001802CBA90

	// Methods
	private static uint PropValue(int cp); // 0x00000001802CB590
	private static int CharMapIdx(int cp); // 0x00000001802C9BB0
	private static int GetNormalizedStringLength(int ch); // 0x00000001802CABA0
	private static byte GetCombiningClass(int c); // 0x00000001802CAAE0
	private static int GetPrimaryCompositeFromMapIndex(int src); // 0x00000001802CAFE0
	private static int GetPrimaryCompositeHelperIndex(int cp); // 0x00000001802CB0A0
	private static int GetPrimaryCompositeCharIndex(object chars, int start); // 0x00000001802CAC90
	private static string Compose(string source, int checkType); // 0x00000001802CA050
	private static StringBuilder Combine(string source, int start, int checkType); // 0x00000001802C9F20
	private static bool CanBePrimaryComposite(int i); // 0x00000001802C9B20
	private static void Combine(StringBuilder sb, int start, int checkType); // 0x00000001802C9C50
	private static int GetPrimaryCompositeMapIndex(object o, int cur, int bufferPos); // 0x00000001802CB160
	private static string Decompose(string source, int checkType); // 0x00000001802CA5D0
	private static void Decompose(string source, StringBuilder sb, int checkType); // 0x00000001802CA460
	private static void ReorderCanonical(string src, StringBuilder sb, int start); // 0x00000001802CB800
	private static void DecomposeChar(StringBuilder sb, int[] buf, string s, int i, int start); // 0x00000001802CA240
	public static NormalizationCheck QuickCheck(char c, int type); // 0x00000001802CB690
	private static bool GetCanonicalHangul(int s, int[] buf, int bufIdx); // 0x00000001802CA660
	public static void GetCanonical(int c, int[] buf, int bufIdx); // 0x00000001802CA7C0
	public static bool IsNormalized(string source, int type); // 0x00000001802CB240
	public static string Normalize(string source, int type); // 0x00000001802CB480
	private static void load_normalization_resource(out IntPtr props, out IntPtr mappedChars, out IntPtr charMapIndex, out IntPtr helperIndex, out IntPtr mapIdxToComposite, out IntPtr combiningClass); // 0x00000001802CBCF0
}

// Namespace: Mono.Globalization.Unicode
internal class NormalizationTableUtil // TypeDefIndex: 137
{
	// Fields
	public static readonly CodePointIndexer Prop; // 0x00
	public static readonly CodePointIndexer Map; // 0x10
	public static readonly CodePointIndexer Combining; // 0x20
	public static readonly CodePointIndexer Composite; // 0x00
	public static readonly CodePointIndexer Helper; // 0x08

	// Properties
	public static int PropCount { get; } // 0x00000001802C9AB0 
	public static int MapCount { get; } // 0x00000001802C9A40 

	// Constructors
	public NormalizationTableUtil(); // 0x00000001800E2000
	private static NormalizationTableUtil(); // 0x00000001802C9650

	// Methods
	public static int PropIdx(int cp); // 0x00000001802C95E0
	public static int PropCP(int index); // 0x00000001802C9570
	public static int MapIdx(int cp); // 0x00000001802C9500
	public static int MapCP(int index); // 0x00000001802C9490
	public static int CbIdx(int cp); // 0x00000001802C9420
	public static int CbCP(int index); // 0x00000001802C93B0
}

// Namespace: Mono.Globalization.Unicode
internal class SimpleCollator // TypeDefIndex: 138
{
	// Fields
	private const int UnsafeFlagLength = 96; // 0x00
	private static bool QuickCheckDisabled; // 0x08
	private static SimpleCollator invariant; // 0x18
	private readonly TextInfo textInfo; // 0x28
	private readonly bool frenchSort; // 0x38
	private readonly void * cjkCatTable; // 0x48
	private readonly void * cjkLv1Table; // 0x58
	private readonly CodePointIndexer cjkIndexer; // 0x10
	private readonly void * cjkLv2Table; // 0x20
	private readonly CodePointIndexer cjkLv2Indexer; // 0x30
	private readonly int lcid; // 0x40
	private readonly Contraction[] contractions; // 0x10
	private readonly Level2Map[] level2Maps; // 0x10
	private readonly byte[] unsafeFlags; // 0x1C

	// Constructors
	public SimpleCollator(CultureInfo culture); // 0x00000001802D6B10
	private static SimpleCollator(); // 0x00000001802D6A30

	// Methods
	private void SetCJKTable(CultureInfo culture, CodePointIndexer cjkIndexer, void * catTable, void * lv1Table, CodePointIndexer lv2Indexer, void * lv2Table); // 0x00000001802D68A0
	private static CultureInfo GetNeutralCulture(CultureInfo info); // 0x00000001802D25D0
	private byte Category(int cp); // 0x00000001802CF0E0
	private byte Level1(int cp); // 0x00000001802D5630
	private byte Level2(int cp, ExtenderType ext); // 0x00000001802D56D0
	private static bool IsHalfKana(int cp, CompareOptions opt); // 0x00000001802D40C0
	private Contraction GetContraction(string s, int start, int end); // 0x00000001802D2370
	private Contraction GetContraction(string s, int start, int end, Contraction[] clist); // 0x00000001802D2210
	private Contraction GetTailContraction(string s, int start, int end); // 0x00000001802D2F70
	private Contraction GetTailContraction(string s, int start, int end, Contraction[] clist); // 0x00000001802D2D10
	private Contraction GetContraction(char c); // 0x00000001802D2460
	private Contraction GetContraction(char c, Contraction[] clist); // 0x00000001802D2170
	private int FilterOptions(int i, CompareOptions opt); // 0x00000001802D1EC0
	private ExtenderType GetExtenderType(int i); // 0x00000001802D2510
	private static byte ToDashTypeValue(ExtenderType ext, CompareOptions opt); // 0x00000001802D6A00
	private int FilterExtender(int i, ExtenderType ext, CompareOptions opt); // 0x00000001802D1CA0
	private static bool IsIgnorable(int i, CompareOptions opt); // 0x00000001802D4150
	private bool IsSafe(int i); // 0x00000001802D4400
	public SortKey GetSortKey(string s); // 0x00000001802D2820
	public SortKey GetSortKey(string s, CompareOptions options); // 0x00000001802D2740
	public SortKey GetSortKey(string s, int start, int length, CompareOptions options); // 0x00000001802D2660
	private void GetSortKey(string s, int start, int end, SortKeyBuffer buf, CompareOptions opt); // 0x00000001802D2900
	private void FillSortKeyRaw(int i, ExtenderType ext, SortKeyBuffer buf, CompareOptions opt); // 0x00000001802D1830
	private void FillSurrogateSortKeyRaw(int i, SortKeyBuffer buf); // 0x00000001802D1BF0
	public int Compare(string s1, string s2); // 0x00000001802D15C0
	public int Compare(string s1, string s2, CompareOptions options); // 0x00000001802D1610
	private int CompareOrdinal(string s1, int idx1, int len1, string s2, int idx2, int len2); // 0x00000001802D0BE0
	private int CompareQuick(string s1, int idx1, int len1, string s2, int idx2, int len2, out bool sourceConsumed, out bool targetConsumed, bool immediateBreakup); // 0x00000001802D0F40
	private int CompareOrdinalIgnoreCase(string s1, int idx1, int len1, string s2, int idx2, int len2); // 0x00000001802D07D0
	public int Compare(string s1, int idx1, int len1, string s2, int idx2, int len2, CompareOptions options); // 0x00000001802D1660
	private void ClearBuffer(void * buffer, int size); // 0x00000001802CF180
	private bool QuickCheckPossible(string s1, int idx1, int end1, string s2, int idx2, int end2); // 0x000000018011A0F0
	private int CompareInternal(string s1, int idx1, int len1, string s2, int idx2, int len2, out bool targetConsumed, out bool sourceConsumed, bool skipHeadingExtenders, bool immediateBreakup, Context ctx); // 0x00000001802CF1C0
	private int CompareFlagPair(bool b1, bool b2); // 0x00000001802CF1A0
	public bool IsPrefix(string src, string target, CompareOptions opt); // 0x00000001802D41E0
	public bool IsPrefix(string s, string target, int start, int length, CompareOptions opt); // 0x00000001802D4220
	private bool IsPrefix(string s, string target, int start, int length, bool skipHeadingExtenders, Context ctx); // 0x00000001802D4370
	public bool IsSuffix(string src, string target, CompareOptions opt); // 0x00000001802D4470
	public bool IsSuffix(string s, string target, int start, int length, CompareOptions opt); // 0x00000001802D4530
	public int IndexOf(string s, string target, CompareOptions opt); // 0x00000001802D3C90
	private int QuickIndexOf(string s, string target, int start, int length, out bool testWasUnable); // 0x00000001802D6750
	public int IndexOf(string s, string target, int start, int length, CompareOptions opt); // 0x00000001802D38A0
	private int IndexOfOrdinal(string s, string target, int start, int length); // 0x00000001802D32C0
	private int IndexOfOrdinalIgnoreCase(string s, string target, int start, int length); // 0x00000001802D3120
	public int IndexOf(string s, char target, CompareOptions opt); // 0x00000001802D4080
	public int IndexOf(string s, char target, int start, int length, CompareOptions opt); // 0x00000001802D3CD0
	private int IndexOfOrdinal(string s, char target, int start, int length); // 0x00000001802D3240
	private int IndexOfOrdinalIgnoreCase(string s, char target, int start, int length); // 0x00000001802D3060
	private int IndexOfSortKey(string s, int start, int length, void * sortkey, char target, int ti, bool noLv4, Context ctx); // 0x00000001802D3380
	private int IndexOf(string s, string target, int start, int length, void * targetSortKey, Context ctx); // 0x00000001802D3440
	public int LastIndexOf(string s, string target, CompareOptions opt); // 0x00000001802D4B30
	public int LastIndexOf(string s, string target, int start, int length, CompareOptions opt); // 0x00000001802D4F30
	private int LastIndexOfOrdinal(string s, string target, int start, int length); // 0x00000001802D4890
	private int LastIndexOfOrdinalIgnoreCase(string s, string target, int start, int length); // 0x00000001802D46D0
	public int LastIndexOf(string s, char target, CompareOptions opt); // 0x00000001802D4EF0
	public int LastIndexOf(string s, char target, int start, int length, CompareOptions opt); // 0x00000001802D4B70
	private int LastIndexOfOrdinal(string s, char target, int start, int length); // 0x00000001802D49D0
	private int LastIndexOfOrdinalIgnoreCase(string s, char target, int start, int length); // 0x00000001802D4600
	private int LastIndexOfSortKey(string s, int start, int orgStart, int length, void * sortkey, int ti, bool noLv4, Context ctx); // 0x00000001802D4A60
	private int LastIndexOf(string s, string target, int start, int length, void * targetSortKey, Context ctx); // 0x00000001802D5190
	private bool MatchesForward(string s, int idx, int end, int ti, void * sortkey, bool noLv4, Context ctx); // 0x00000001802D6370
	private bool MatchesForwardCore(string s, int idx, int end, int ti, void * sortkey, bool noLv4, ExtenderType ext, Contraction ct, Context ctx); // 0x00000001802D5FA0
	private bool MatchesPrimitive(CompareOptions opt, void * source, int si, ExtenderType ext, void * target, int ti, bool noLv4); // 0x00000001802D6540
	private bool MatchesBackward(string s, int idx, int end, int orgStart, int ti, void * sortkey, bool noLv4, Context ctx); // 0x00000001802D5DC0
	private bool MatchesBackwardCore(string s, int idx, int end, int orgStart, int ti, void * sortkey, bool noLv4, ExtenderType ext, Contraction ct, Context ctx); // 0x00000001802D5870
}

// Namespace: 
internal struct Context // TypeDefIndex: 139
{
	// Fields
	public readonly CompareOptions Option; // 0x10
	public readonly void * NeverMatchFlags; // 0x20
	public readonly void * AlwaysMatchFlags; // 0x30
	public void * Buffer1; // 0x40
	public void * Buffer2; // 0x10
	public int PrevCode; // 0x10
	public void * PrevSortKey; // 0x1C
	public readonly bool QuickCheckPossible; // 0x24

	// Constructors
	public Context(CompareOptions opt, void * alwaysMatchFlags, void * neverMatchFlags, void * buffer1, void * buffer2, void * prev1, bool quickCheckPossible); // 0x000000018001D7F0

	// Methods
	public void ClearPrevInfo(); // 0x000000018001D7E0
}

// Namespace: 
private struct PreviousInfo // TypeDefIndex: 140
{
	// Fields
	public int Code; // 0x10
	public void * SortKey; // 0x10

	// Constructors
	public PreviousInfo(bool dummy); // 0x000000018001D930

}

// Namespace: 
private struct Escape // TypeDefIndex: 141
{
	// Fields
	public string Source; // 0x10
	public int Index; // 0x1C
	public int Start; // 0x24
	public int End; // 0x10
	public int Optional; // 0x00

}

// Namespace: 
private enum ExtenderType // TypeDefIndex: 142
{
	None = 0,
	Simple = 1,
	Voiced = 2,
	Conditional = 3,
	Buggy = 4
}

// Namespace: System.Globalization
[Serializable]
public class SortKey // TypeDefIndex: 143
{
	// Fields
	private readonly string source; // 0x10
	private readonly CompareOptions options; // 0x20
	private readonly byte[] key; // 0x10
	private readonly int lcid; // 0x18

	// Properties
	public virtual string OriginalString { get; } // 0x00000001800E20D0 
	public virtual byte[] KeyData { get; } // 0x00000001800EAEB0 

	// Constructors
	internal SortKey(int lcid, string source, CompareOptions opt); // 0x0000000180338EA0
	internal SortKey(int lcid, string source, byte[] buffer, CompareOptions opt, int lv1Length, int lv2Length, int lv3Length, int kanaSmallLength, int markTypeLength, int katakanaLength, int kanaWidthLength, int identLength); // 0x0000000180338E50

	// Methods
	public static int Compare(SortKey sortkey1, SortKey sortkey2); // 0x0000000180338840
	public override bool Equals(object value); // 0x0000000180338A40
	public override int GetHashCode(); // 0x0000000180338AF0
	public override string ToString(); // 0x0000000180338B70
}

// Namespace: Mono.Globalization.Unicode
internal class SortKeyBuffer // TypeDefIndex: 144
{
	// Fields
	private int l1; // 0x10
	private int l2; // 0x18
	private int l3; // 0x20
	private int l4s; // 0x28
	private int l4t; // 0x30
	private int l4k; // 0x40
	private int l4w; // 0x50
	private int l5; // 0x60
	private byte[] l1b; // 0x70
	private byte[] l2b; // 0x79
	private byte[] l3b; // 0x7C
	private byte[] l4sb; // 0x50
	private byte[] l4tb; // 0x60
	private byte[] l4kb; // 0x10
	private byte[] l4wb; // 0x00
	private byte[] l5b; // 0x00
	private string source; // 0x00
	private bool processLevel2; // 0x00
	private bool frenchSort; // 0x10
	private bool frenchSorted; // 0x00
	private int lcid; // 0x10
	private CompareOptions options; // 0x00

	// Constructors
	public SortKeyBuffer(int lcid); // 0x00000001800E2000

	// Methods
	public void Reset(); // 0x00000001803210E0
	internal void ClearBuffer(); // 0x00000001803207A0
	internal void Initialize(CompareOptions options, int lcid, string s, bool frenchSort); // 0x0000000180320F50
	internal void AppendCJKExtension(byte lv1msb, byte lv1lsb); // 0x0000000180320300
	internal void AppendKana(byte category, byte lv1, byte lv2, byte lv3, bool isSmallKana, byte markType, bool isKatakana, bool isHalfWidth); // 0x00000001803203D0
	internal void AppendNormal(byte category, byte lv1, byte lv2, byte lv3); // 0x0000000180320580
	private void AppendLevel5(byte category, byte lv1); // 0x00000001803204A0
	private void AppendBufferPrimitive(byte value, byte[] buf, int bidx); // 0x0000000180320240
	public SortKey GetResultAndReset(); // 0x0000000180320830
	private int GetOptimizedLength(byte[] data, int len, byte defaultValue); // 0x00000001803207D0
	public SortKey GetResult(); // 0x0000000180320860
}

// Namespace: Mono.Interop
internal class ComInteropProxy : RealProxy, IRemotingTypeInfo // TypeDefIndex: 145
{
	// Fields
	private __ComObject com_object; // 0x50
	private int ref_count; // 0x60
	private string type_name; // 0x10

	// Properties
	public string TypeName { get; set; } // 0x0000000180114BE0 0x000000018017D3C0

	// Constructors
	private ComInteropProxy(Type t); // 0x00000001803111A0
	private ComInteropProxy(IntPtr pUnk); // 0x00000001803111E0
	internal ComInteropProxy(IntPtr pUnk, Type t); // 0x00000001803112D0

	// Methods
	private static void AddProxy(IntPtr pItf, ComInteropProxy proxy); // 0x00000001801B80A0
	internal static ComInteropProxy FindProxy(IntPtr pItf); // 0x00000001801150B0
	private void CacheProxy(); // 0x0000000180310C90
	internal static ComInteropProxy GetProxy(IntPtr pItf, Type t); // 0x0000000180310F10
	internal static ComInteropProxy CreateProxy(Type t); // 0x0000000180310DD0
	public override IMessage Invoke(IMessage msg); // 0x0000000180311100
	public bool CanCastTo(Type fromType, object o); // 0x0000000180310CC0
}

// Namespace: Mono.Interop
internal interface IDispatch // TypeDefIndex: 146
{
}

// Namespace: Mono.Interop
internal interface IUnknown // TypeDefIndex: 147
{
}

// Namespace: Mono.Math.Prime.Generator
internal class NextPrimeFinder : SequentialSearchPrimeGeneratorBase // TypeDefIndex: 148
{
	// Constructors
	public NextPrimeFinder(); // 0x00000001800E2000

	// Methods
	protected override BigInteger GenerateSearchBase(int bits, object Context); // 0x000000018031D6D0
}

// Namespace: Mono.Math.Prime.Generator
internal abstract class PrimeGeneratorBase // TypeDefIndex: 149
{
	// Properties
	public virtual ConfidenceFactor Confidence { get; } // 0x00000001801ADE70 
	public virtual PrimalityTest PrimalityTest { get; } // 0x000000018031FCD0 
	public virtual int TrialDivisionBounds { get; } // 0x000000018031FD20 

	// Constructors
	protected PrimeGeneratorBase(); // 0x00000001800E2000

	// Methods
	protected bool PostTrialDivisionTests(BigInteger bi); // 0x000000018031FC60
	public abstract BigInteger GenerateNewPrime(int bits);
}

// Namespace: Mono.Math.Prime.Generator
internal class SequentialSearchPrimeGeneratorBase : PrimeGeneratorBase // TypeDefIndex: 150
{
	// Constructors
	public SequentialSearchPrimeGeneratorBase(); // 0x00000001800E2000

	// Methods
	protected virtual BigInteger GenerateSearchBase(int bits, object context); // 0x0000000180320160
	public override BigInteger GenerateNewPrime(int bits); // 0x0000000180262DD0
	public virtual BigInteger GenerateNewPrime(int bits, object context); // 0x000000018031FD50
	protected virtual bool IsPrimeAcceptable(BigInteger bi, object context); // 0x000000018010E420
}

// Namespace: Mono.Math.Prime
internal enum ConfidenceFactor // TypeDefIndex: 151
{
	ExtraLow = 0,
	Low = 1,
	Medium = 2,
	High = 3,
	ExtraHigh = 4,
	Provable = 5
}

// Namespace: Mono.Math.Prime
internal sealed class PrimalityTests // TypeDefIndex: 152
{
	// Constructors
	private PrimalityTests(); // 0x00000001800E2000

	// Methods
	private static int GetSPPRounds(BigInteger bi, ConfidenceFactor confidence); // 0x000000018031F3D0
	public static bool Test(BigInteger n, ConfidenceFactor confidence); // 0x000000018031FC10
	public static bool RabinMillerTest(BigInteger n, ConfidenceFactor confidence); // 0x000000018031F5A0
	public static bool SmallPrimeSppTest(BigInteger bi, ConfidenceFactor confidence); // 0x000000018031F990
}

// Namespace: Mono.Math
internal class BigInteger // TypeDefIndex: 153
{
	// Fields
	private const uint DEFAULT_LEN = 20; // 0x00
	private const string WouldReturnNegVal = "Operation would return a negative value"; // 0x10
	private uint length; // 0x00
	private uint[] data; // 0x10
	internal static readonly uint[] smallPrimes; // 0x00
	private static RandomNumberGenerator rng; // 0x10

	// Properties
	private static RandomNumberGenerator Rng { get; } // 0x000000018030ED60 

	// Constructors
	public BigInteger(); // 0x000000018030EC20
	public BigInteger(Sign sign, uint len); // 0x000000018030EBC0
	public BigInteger(BigInteger bi); // 0x000000018030E4E0
	public BigInteger(BigInteger bi, uint len); // 0x000000018030EC80
	public BigInteger(byte[] inData); // 0x000000018030E850
	public BigInteger(uint[] inData); // 0x000000018030E590
	public BigInteger(uint ui); // 0x000000018030E7C0
	public BigInteger(ulong ul); // 0x000000018030E6C0
	private static BigInteger(); // 0x000000018030E480

	// Methods
	public static BigInteger Parse(string number); // 0x000000018030D900
	public static BigInteger Add(BigInteger bi1, BigInteger bi2); // 0x000000018030C710
	public static BigInteger Subtract(BigInteger bi1, BigInteger bi2); // 0x000000018030DF50
	public static int Modulus(BigInteger bi, int i); // 0x000000018030D6D0
	public static uint Modulus(BigInteger bi, uint ui); // 0x000000018030D590
	public static BigInteger Modulus(BigInteger bi1, BigInteger bi2); // 0x000000018030D640
	public static BigInteger Divid(BigInteger bi, int i); // 0x000000018030C930
	public static BigInteger Divid(BigInteger bi1, BigInteger bi2); // 0x000000018030C9F0
	public static BigInteger Multiply(BigInteger bi1, BigInteger bi2); // 0x000000018030D750
	public static BigInteger Multiply(BigInteger bi, int i); // 0x000000018030D7C0
	public static BigInteger GenerateRandom(int bits, RandomNumberGenerator rng); // 0x000000018030CCD0
	public static BigInteger GenerateRandom(int bits); // 0x000000018030CC70
	public void Randomize(RandomNumberGenerator rng); // 0x000000018030DC50
	public void Randomize(); // 0x000000018030DBF0
	public int BitCount(); // 0x000000018030C780
	public bool TestBit(uint bitNum); // 0x000000018030DFC0
	public bool TestBit(int bitNum); // 0x000000018030E010
	public void SetBit(uint bitNum); // 0x000000018030DEF0
	public void ClearBit(uint bitNum); // 0x000000018030C860
	public void SetBit(uint bitNum, bool value); // 0x000000018030DE60
	public int LowestSetBit(); // 0x000000018030D450
	public byte[] GetBytes(); // 0x000000018030CEF0
	public Sign Compare(BigInteger bi); // 0x000000018030C920
	public string ToString(uint radix); // 0x000000018030E100
	public string ToString(uint radix, string characterSet); // 0x000000018030E150
	private void Normalize(); // 0x000000018030D8A0
	public void Clear(); // 0x000000018030C8C0
	public override int GetHashCode(); // 0x000000018030D040
	public override string ToString(); // 0x000000018030E0C0
	public override bool Equals(object o); // 0x000000018030CA80
	public BigInteger GCD(BigInteger bi); // 0x000000018030CBF0
	public BigInteger ModInverse(BigInteger modulus); // 0x000000018030D4F0
	public BigInteger ModPow(BigInteger exp, BigInteger n); // 0x000000018030D500
	public bool IsProbablePrime(); // 0x000000018030D1B0
	public static BigInteger NextHighestPrime(BigInteger bi); // 0x000000018030D820
	public static BigInteger GeneratePseudoPrime(int bits); // 0x000000018030CC00
	public void Incr2(); // 0x000000018030D090
	public static BigInteger op_Implicit(uint value); // 0x000000018030F1B0
	public static BigInteger op_Implicit(int value); // 0x000000018030F210
	public static BigInteger op_Implicit(ulong value); // 0x000000018030F2A0
	public static BigInteger op_Addition(BigInteger bi1, BigInteger bi2); // 0x000000018030EE40
	public static BigInteger op_Subtraction(BigInteger bi1, BigInteger bi2); // 0x000000018030F9F0
	public static int op_Modulus(BigInteger bi, int i); // 0x000000018030F600
	public static uint op_Modulus(BigInteger bi, uint ui); // 0x000000018030F590
	public static BigInteger op_Modulus(BigInteger bi1, BigInteger bi2); // 0x000000018030F630
	public static BigInteger op_Division(BigInteger bi, int i); // 0x000000018030EF30
	public static BigInteger op_Division(BigInteger bi1, BigInteger bi2); // 0x000000018030EFB0
	public static BigInteger op_Multiply(BigInteger bi1, BigInteger bi2); // 0x000000018030F670
	public static BigInteger op_Multiply(BigInteger bi, int i); // 0x000000018030F8C0
	public static BigInteger op_LeftShift(BigInteger bi1, int shiftVal); // 0x000000018030F540
	public static BigInteger op_RightShift(BigInteger bi1, int shiftVal); // 0x000000018030F9E0
	public static bool op_Equality(BigInteger bi1, uint ui); // 0x000000018030F0C0
	public static bool op_Inequality(BigInteger bi1, uint ui); // 0x000000018030F3C0
	public static bool op_Equality(BigInteger bi1, BigInteger bi2); // 0x000000018030EFF0
	public static bool op_Inequality(BigInteger bi1, BigInteger bi2); // 0x000000018030F470
	public static bool op_GreaterThan(BigInteger bi1, BigInteger bi2); // 0x000000018030F190
	public static bool op_LessThan(BigInteger bi1, BigInteger bi2); // 0x000000018030F570
	public static bool op_GreaterThanOrEqual(BigInteger bi1, BigInteger bi2); // 0x000000018030F170
	public static bool op_LessThanOrEqual(BigInteger bi1, BigInteger bi2); // 0x000000018030F550
}

// Namespace: 
public enum Sign // TypeDefIndex: 154
{
	Negative = -1,
	Zero = 0,
	Positive = 1
}

// Namespace: 
internal sealed class ModulusRing // TypeDefIndex: 155
{
	// Fields
	private BigInteger mod; // 0x10
	private BigInteger constant; // 0x10

	// Constructors
	public ModulusRing(BigInteger modulus); // 0x000000018031D220

	// Methods
	public void BarrettReduction(BigInteger x); // 0x000000018031C800
	public BigInteger Multiply(BigInteger a, BigInteger b); // 0x000000018031CDA0
	public BigInteger Difference(BigInteger a, BigInteger b); // 0x000000018031CB40
	public BigInteger Pow(BigInteger a, BigInteger k); // 0x000000018031D0B0
	public BigInteger Pow(uint b, BigInteger exp); // 0x000000018031D030
}

// Namespace: 
internal sealed class Montgomery // TypeDefIndex: 156
{
	// Constructors
	private Montgomery(); // 0x00000001800E2000

	// Methods
	public static uint Inverse(uint n); // 0x000000018031D370
	public static BigInteger ToMont(BigInteger n, BigInteger m); // 0x000000018031D560
	public static BigInteger Reduce(BigInteger n, BigInteger m, uint mPrime); // 0x000000018031D3A0
}

// Namespace: 
private sealed class Kernel // TypeDefIndex: 157
{
	// Constructors
	public Kernel(); // 0x00000001800E2000

	// Methods
	public static BigInteger AddSameSign(BigInteger bi1, BigInteger bi2); // 0x0000000180317480
	public static BigInteger Subtract(BigInteger big, BigInteger small); // 0x0000000180318DD0
	public static void MinusEq(BigInteger big, BigInteger small); // 0x0000000180318090
	public static void PlusEq(BigInteger bi1, BigInteger bi2); // 0x0000000180318650
	public static Sign Compare(BigInteger bi1, BigInteger bi2); // 0x0000000180317760
	public static uint SingleByteDivideInPlace(BigInteger n, uint d); // 0x0000000180318B10
	public static uint DwordMod(BigInteger n, uint d); // 0x000000018030F590
	public static BigInteger DwordDiv(BigInteger n, uint d); // 0x0000000180317C00
	public static BigInteger[] DwordDivMod(BigInteger n, uint d); // 0x00000001803178F0
	public static BigInteger[] multiByteDivide(BigInteger bi1, BigInteger bi2); // 0x0000000180319DE0
	public static BigInteger LeftShift(BigInteger bi, int n); // 0x0000000180317D80
	public static BigInteger RightShift(BigInteger bi, int n); // 0x00000001803188D0
	public static BigInteger MultiplyByDword(BigInteger n, uint f); // 0x0000000180318230
	public static void Multiply(uint[] x, uint xOffset, uint xLen, uint[] y, uint yOffset, uint yLen, uint[] d, uint dOffset); // 0x0000000180318540
	public static void MultiplyMod2p32pmod(uint[] x, int xOffset, int xLen, uint[] y, int yOffest, int yLen, uint[] d, int dOffset, int mod); // 0x00000001803183E0
	public static void SquarePositive(BigInteger bi, uint[] wkSpace); // 0x0000000180318BE0
	public static BigInteger gcd(BigInteger a, BigInteger b); // 0x0000000180319090
	public static uint modInverse(BigInteger bi, uint modulus); // 0x0000000180319370
	public static BigInteger modInverse(BigInteger bi, BigInteger modulus); // 0x00000001803194B0
}

// Namespace: Mono.Security.Authenticode
internal enum Authority // TypeDefIndex: 158
{
	Individual = 0,
	Commercial = 1,
	Maximum = 2
}

// Namespace: Mono.Security.Authenticode
internal class AuthenticodeBase // TypeDefIndex: 159
{
	// Fields
	public const string spcIndirectDataContext = "1.3.6.1.4.1.311.2.1.4"; // 0x00
	private byte[] fileblock; // 0x18
	private FileStream fs; // 0x24
	private int blockNo; // 0x2C
	private int blockLength; // 0x34
	private int peOffset; // 0x38
	private int dirSecurityOffset; // 0x48
	private int dirSecuritySize; // 0x58
	private int coffSymbolTableOffset; // 0x70

	// Properties
	internal int PEOffset { get; } // 0x000000018030A6A0 
	internal int CoffSymbolTableOffset { get; } // 0x000000018030A670 
	internal int SecurityOffset { get; } // 0x000000018030A6D0 

	// Constructors
	public AuthenticodeBase(); // 0x000000018030A620

	// Methods
	internal void Open(string filename); // 0x000000018030A2E0
	internal void Close(); // 0x0000000180309BF0
	internal bool ReadFirstBlock(); // 0x000000018030A390
	internal byte[] GetSecurityEntry(); // 0x000000018030A160
	internal byte[] GetHash(HashAlgorithm hash); // 0x0000000180309C30
	protected byte[] HashFile(string fileName, string hashName); // 0x000000018030A230
}

// Namespace: Mono.Security.Authenticode
internal class AuthenticodeDeformatter : AuthenticodeBase // TypeDefIndex: 160
{
	// Fields
	private string filename; // 0x38
	private byte[] hash; // 0x48
	private X509CertificateCollection coll; // 0x58
	private ASN1 signedHash; // 0x70
	private DateTime timestamp; // 0x75
	private X509Certificate signingCertificate; // 0x80
	private int reason; // 0x00
	private bool trustedRoot; // 0x10
	private bool trustedTimestampRoot; // 0x10
	private byte[] entry; // 0x20
	private X509Chain signerChain; // 0x00
	private X509Chain timestampChain; // 0x21
	private static Dictionary`2<string, int> <>f__switch$map5; // 0x30
	private static Dictionary`2<string, int> <>f__switch$map6; // 0x40
	private static Dictionary`2<string, int> <>f__switch$map7; // 0x50

	// Properties
	public string FileName { get; set; } // 0x0000000180119440 0x000000018030C5F0
	public byte[] Hash { get; } // 0x000000018030C340 
	public int Reason { get; } // 0x000000018030C3D0 
	public byte[] Signature { get; } // 0x000000018030C560 
	public DateTime Timestamp { get; } // 0x000000018030C5E0 
	public X509CertificateCollection Certificates { get; } // 0x0000000180113E60 
	public X509Certificate SigningCertificate { get; } // 0x00000001801136C0 

	// Constructors
	public AuthenticodeDeformatter(); // 0x000000018030C1B0
	public AuthenticodeDeformatter(string fileName); // 0x000000018030C270

	// Methods
	public bool IsTrusted(); // 0x000000018030ABF0
	private bool CheckSignature(string fileName); // 0x000000018030A700
	private bool CompareIssuerSerial(string issuer, byte[] serial, X509Certificate x509); // 0x000000018030AAA0
	private bool VerifySignature(SignedData sd, byte[] calculatedMessageDigest, HashAlgorithm ha); // 0x000000018030B740
	private bool VerifyCounterSignature(SignerInfo cs, byte[] signature); // 0x000000018030AE20
	private void Reset(); // 0x000000018030AD70
}

// Namespace: Mono.Security.Cryptography
internal sealed class CryptoConvert // TypeDefIndex: 161
{
	// Constructors
	private CryptoConvert(); // 0x00000001800E2000

	// Methods
	private static int ToInt32LE(byte[] bytes, int offset); // 0x0000000180314280
	private static uint ToUInt32LE(byte[] bytes, int offset); // 0x0000000180314280
	private static byte[] GetBytesLE(int val); // 0x0000000180312D10
	private static byte[] Trim(byte[] array); // 0x0000000180314340
	public static RSA FromCapiPrivateKeyBlob(byte[] blob); // 0x0000000180312210
	public static RSA FromCapiPrivateKeyBlob(byte[] blob, int offset); // 0x0000000180311CC0
	public static DSA FromCapiPrivateKeyBlobDSA(byte[] blob); // 0x0000000180311CB0
	public static DSA FromCapiPrivateKeyBlobDSA(byte[] blob, int offset); // 0x00000001803118C0
	public static byte[] ToCapiPrivateKeyBlob(RSA rsa); // 0x0000000180313110
	public static byte[] ToCapiPrivateKeyBlob(DSA dsa); // 0x0000000180313630
	public static RSA FromCapiPublicKeyBlob(byte[] blob); // 0x0000000180312610
	public static RSA FromCapiPublicKeyBlob(byte[] blob, int offset); // 0x0000000180312620
	public static DSA FromCapiPublicKeyBlobDSA(byte[] blob); // 0x0000000180312600
	public static DSA FromCapiPublicKeyBlobDSA(byte[] blob, int offset); // 0x0000000180312220
	public static byte[] ToCapiPublicKeyBlob(RSA rsa); // 0x0000000180313A20
	public static byte[] ToCapiPublicKeyBlob(DSA dsa); // 0x0000000180313D80
	public static RSA FromCapiKeyBlob(byte[] blob); // 0x0000000180311600
	public static RSA FromCapiKeyBlob(byte[] blob, int offset); // 0x0000000180311750
	public static DSA FromCapiKeyBlobDSA(byte[] blob); // 0x00000001803113B0
	public static DSA FromCapiKeyBlobDSA(byte[] blob, int offset); // 0x00000001803114D0
	public static byte[] ToCapiKeyBlob(AsymmetricAlgorithm keypair, bool includePrivateKey); // 0x0000000180312E70
	public static byte[] ToCapiKeyBlob(RSA rsa, bool includePrivateKey); // 0x0000000180312DE0
	public static byte[] ToCapiKeyBlob(DSA dsa, bool includePrivateKey); // 0x0000000180313080
	public static string ToHex(byte[] input); // 0x0000000180314170
	private static byte FromHexChar(char c); // 0x0000000180312A00
	public static byte[] FromHex(string hex); // 0x0000000180312A90
}

// Namespace: Mono.Security.Cryptography
internal sealed class KeyBuilder // TypeDefIndex: 162
{
	// Fields
	private static RandomNumberGenerator rng; // 0x00

	// Properties
	private static RandomNumberGenerator Rng { get; } // 0x000000018031A7F0 

	// Constructors
	private KeyBuilder(); // 0x00000001800E2000

	// Methods
	public static byte[] Key(int size); // 0x000000018031A730
	public static byte[] IV(int size); // 0x000000018031A670
}

// Namespace: Mono.Security.Cryptography
internal class BlockProcessor // TypeDefIndex: 163
{
	// Fields
	private ICryptoTransform transform; // 0x10
	private byte[] block; // 0x20
	private int blockSize; // 0x00
	private int blockCount; // 0x21

	// Constructors
	public BlockProcessor(ICryptoTransform transform); // 0x0000000180310B80
	public BlockProcessor(ICryptoTransform transform, int blockSize); // 0x0000000180310B10

	// Methods
	protected override void Finalize(); // 0x0000000180310A40
	public void Initialize(); // 0x0000000180310AE0
	public void Core(byte[] rgb); // 0x00000001803109B0
	public void Core(byte[] rgb, int ib, int cb); // 0x00000001803107C0
	public byte[] Final(); // 0x00000001803109E0
}

// Namespace: Mono.Security.Cryptography
internal class DSAManaged : DSA // TypeDefIndex: 164
{
	// Fields
	private const int defaultKeySize = 1024; // 0x00
	private bool keypairGenerated; // 0x21
	private bool m_disposed; // 0x30
	private BigInteger p; // 0x40
	private BigInteger q; // 0x50
	private BigInteger g; // 0x60
	private BigInteger x; // 0x68
	private BigInteger y; // 0x10
	private BigInteger j; // 0x20
	private BigInteger seed; // 0x30
	private int counter; // 0x00
	private bool j_missing; // 0x10
	private RandomNumberGenerator rng; // 0x10
	private KeyGeneratedEventHandler KeyGenerated; // 0x20

	// Properties
	private RandomNumberGenerator Random { get; } // 0x0000000180316540 
	public override int KeySize { get; } // 0x00000001803164A0 
	public override string KeyExchangeAlgorithm { get; } // 0x00000001800EA8C0 
	public bool PublicOnly { get; } // 0x00000001803164D0 
	public override string SignatureAlgorithm { get; } // 0x0000000180316570 

	// Events
	public event KeyGeneratedEventHandler KeyGenerated {
		add; // 0x0000000180316360
		remove; // 0x00000001803165A0
	}

	// Constructors
	public DSAManaged(); // 0x0000000180316180
	public DSAManaged(int dwKeySize); // 0x0000000180316270

	// Methods
	protected override void Finalize(); // 0x000000018013AFC0
	private void Generate(); // 0x0000000180315820
	private void GenerateKeyPair(); // 0x0000000180314DF0
	private void add(byte[] a, byte[] b, int value); // 0x00000001803163E0
	private void GenerateParams(int keyLength); // 0x0000000180314FF0
	private byte[] NormalizeArray(byte[] array); // 0x0000000180315BE0
	public override DSAParameters ExportParameters(bool includePrivateParameters); // 0x0000000180314B20
	public override void ImportParameters(DSAParameters parameters); // 0x0000000180315870
	public override byte[] CreateSignature(byte[] rgbHash); // 0x0000000180314410
	public override bool VerifySignature(byte[] rgbHash, byte[] rgbSignature); // 0x0000000180315C90
	protected override void Dispose(bool disposing); // 0x0000000180314870
}

// Namespace: 
public delegate void KeyGeneratedEventHandler(object sender, EventArgs e); // TypeDefIndex: 165; 0x00000001801AD090

// Namespace: Mono.Security.Cryptography
internal class HMACAlgorithm // TypeDefIndex: 166
{
	// Fields
	private byte[] key; // 0x10
	private byte[] hash; // 0x20
	private HashAlgorithm algo; // 0x30
	private string hashName; // 0x00
	private BlockProcessor block; // 0x10

	// Properties
	public HashAlgorithm Algo { get; } // 0x00000001800EAEB0 
	public string HashName { get; set; } // 0x000000018013BF80 0x00000001803173C0
	public byte[] Key { get; set; } // 0x00000001800E20D0 0x00000001803173D0

	// Constructors
	public HMACAlgorithm(string algoName); // 0x0000000180317390

	// Methods
	protected override void Finalize(); // 0x0000000180317140
	private void CreateHash(string algoName); // 0x0000000180316EE0
	public void Dispose(); // 0x0000000180316F90
	public void Initialize(); // 0x00000001803171E0
	private byte[] KeySetup(byte[] key, byte padding); // 0x00000001803172A0
	public void Core(byte[] rgb, int ib, int cb); // 0x0000000180316EB0
	public byte[] Final(); // 0x0000000180316FB0
}

// Namespace: Mono.Security.Cryptography
internal class KeyPairPersistence // TypeDefIndex: 167
{
	// Fields
	private static bool _userPathExists; // 0x00
	private static string _userPath; // 0x10
	private static bool _machinePathExists; // 0x10
	private static string _machinePath; // 0x20
	private CspParameters _params; // 0x20
	private string _keyvalue; // 0x10
	private string _filename; // 0x20
	private string _container; // 0x2C
	private static object lockobj; // 0x00

	// Properties
	public string Filename { get; } // 0x000000018031B6E0 
	public string KeyValue { get; set; } // 0x00000001800EAEC0 0x000000018031C360
	public CspParameters Parameters { get; } // 0x000000018031BE50 
	private static string UserPath { get; } // 0x000000018031BEB0 
	private static string MachinePath { get; } // 0x000000018031B9A0 
	private bool CanChange { get; } // 0x0000000180221940 
	private bool UseDefaultKeyContainer { get; } // 0x000000018031BE60 
	private bool UseMachineKeyStore { get; } // 0x000000018031BE90 
	private string ContainerName { get; } // 0x000000018031B570 

	// Constructors
	public KeyPairPersistence(CspParameters parameters); // 0x000000018031B430
	public KeyPairPersistence(CspParameters parameters, string keyPair); // 0x000000018031B4D0
	private static KeyPairPersistence(); // 0x000000018031B3B0

	// Methods
	public bool Load(); // 0x000000018031AC10
	public void Save(); // 0x000000018031AFF0
	public void Remove(); // 0x000000018031AFB0
	internal static bool _CanSecure(string root); // 0x0000000180113770
	internal static bool _ProtectUser(string path); // 0x0000000180113770
	internal static bool _ProtectMachine(string path); // 0x0000000180113770
	internal static bool _IsUserProtected(string path); // 0x0000000180113770
	internal static bool _IsMachineProtected(string path); // 0x0000000180113770
	private static bool CanSecure(string path); // 0x000000018031A860
	private static bool ProtectUser(string path); // 0x000000018031AF20
	private static bool ProtectMachine(string path); // 0x000000018031AE90
	private static bool IsUserProtected(string path); // 0x000000018031AB80
	private static bool IsMachineProtected(string path); // 0x000000018031AAF0
	private CspParameters Copy(CspParameters p); // 0x000000018031A910
	private void FromXml(string xml); // 0x000000018031A9C0
	private string ToXml(); // 0x000000018031B200
}

// Namespace: Mono.Security.Cryptography
internal class MACAlgorithm // TypeDefIndex: 168
{
	// Fields
	private SymmetricAlgorithm algo; // 0x10
	private ICryptoTransform enc; // 0x20
	private byte[] block; // 0x2C
	private int blockSize; // 0x00
	private int blockCount; // 0x10

	// Constructors
	public MACAlgorithm(SymmetricAlgorithm algorithm); // 0x000000018031C730

	// Methods
	public void Initialize(byte[] key); // 0x000000018031C6C0
	public void Core(byte[] rgb, int ib, int cb); // 0x000000018031C370
	public byte[] Final(); // 0x000000018031C560
}

// Namespace: Mono.Security.Cryptography
internal sealed class PKCS1 // TypeDefIndex: 169
{
	// Fields
	private static byte[] emptySHA1; // 0x00
	private static byte[] emptySHA256; // 0x10
	private static byte[] emptySHA384; // 0x10
	private static byte[] emptySHA512; // 0x00

	// Constructors
	private PKCS1(); // 0x00000001800E2000
	private static PKCS1(); // 0x000000018031EFF0

	// Methods
	private static bool Compare(byte[] array1, byte[] array2); // 0x000000018031D7E0
	private static byte[] xor(byte[] array1, byte[] array2); // 0x000000018031F100
	private static byte[] GetEmptyHash(HashAlgorithm hash); // 0x000000018031E5E0
	public static byte[] I2OSP(int x, int size); // 0x000000018031E7E0
	public static byte[] I2OSP(byte[] x, int size); // 0x000000018031E870
	public static byte[] OS2IP(byte[] x); // 0x000000018031EB10
	public static byte[] RSAEP(RSA rsa, byte[] m); // 0x000000018031EC10
	public static byte[] RSADP(RSA rsa, byte[] c); // 0x000000018031EBE0
	public static byte[] RSASP1(RSA rsa, byte[] m); // 0x000000018031EBE0
	public static byte[] RSAVP1(RSA rsa, byte[] s); // 0x000000018031EC10
	public static byte[] Encrypt_OAEP(RSA rsa, HashAlgorithm hash, RandomNumberGenerator rng, byte[] M); // 0x000000018031E100
	public static byte[] Decrypt_OAEP(RSA rsa, HashAlgorithm hash, byte[] C); // 0x000000018031D880
	public static byte[] Encrypt_v15(RSA rsa, RandomNumberGenerator rng, byte[] M); // 0x000000018031E400
	public static byte[] Decrypt_v15(RSA rsa, byte[] C); // 0x000000018031DBC0
	public static byte[] Sign_v15(RSA rsa, HashAlgorithm hash, byte[] hashValue); // 0x000000018031EC40
	public static bool Verify_v15(RSA rsa, HashAlgorithm hash, byte[] hashValue, byte[] signature); // 0x000000018031EF60
	public static bool Verify_v15(RSA rsa, HashAlgorithm hash, byte[] hashValue, byte[] signature, bool tryNonStandardEncoding); // 0x000000018031ED20
	public static byte[] Encode_v15(HashAlgorithm hash, byte[] hashValue, int emLength); // 0x000000018031DDC0
	public static byte[] MGF1(HashAlgorithm hash, byte[] mgfSeed, int maskLen); // 0x000000018031E8F0
}

// Namespace: Mono.Security.Cryptography
internal sealed class PKCS8 // TypeDefIndex: 170
{
	// Constructors
	private PKCS8(); // 0x00000001800E2000

	// Methods
	public static KeyInfo GetType(byte[] data); // 0x000000018031F1E0
}

// Namespace: 
public enum KeyInfo // TypeDefIndex: 171
{
	PrivateKey = 0,
	EncryptedPrivateKey = 1,
	Unknown = 2
}

// Namespace: 
public class PrivateKeyInfo // TypeDefIndex: 172
{
	// Fields
	private int _version; // 0x10
	private string _algorithm; // 0x20
	private byte[] _key; // 0x10
	private ArrayList _list; // 0x20

	// Properties
	public string Algorithm { get; set; } // 0x00000001800EAEC0 0x00000001800EAEE0
	public ArrayList Attributes { get; } // 0x000000018013BF80 
	public byte[] PrivateKey { get; set; } // 0x0000000180249E70 0x0000000180249EF0
	public int Version { get; set; } // 0x00000001800ECD10 0x0000000180249FB0

	// Constructors
	public PrivateKeyInfo(); // 0x0000000180249E00
	public PrivateKeyInfo(byte[] data); // 0x0000000180249D80

	// Methods
	private void Decode(byte[] data); // 0x0000000180249170
	public byte[] GetBytes(); // 0x0000000180249850
	private static byte[] RemoveLeadingZero(byte[] bigInt); // 0x0000000180249CC0
	private static byte[] Normalize(byte[] bigInt, int length); // 0x0000000180249C10
	public static RSA DecodeRSA(byte[] keypair); // 0x0000000180248D70
	public static byte[] Encode(RSA rsa); // 0x0000000180249410
	public static DSA DecodeDSA(byte[] privateKey, DSAParameters dsaParameters); // 0x0000000180248C50
	public static byte[] Encode(DSA dsa); // 0x0000000180249600
	public static byte[] Encode(AsymmetricAlgorithm aa); // 0x0000000180249660
}

// Namespace: 
public class EncryptedPrivateKeyInfo // TypeDefIndex: 173
{
	// Fields
	private string _algorithm; // 0x10
	private byte[] _salt; // 0x20
	private int _iterations; // 0x00
	private byte[] _data; // 0x21

	// Properties
	public string Algorithm { get; set; } // 0x00000001800E20D0 0x0000000180114C30
	public byte[] EncryptedData { get; set; } // 0x0000000180316BD0 0x0000000180316D10
	public byte[] Salt { get; set; } // 0x0000000180316C50 0x0000000180316E20
	public int IterationCount { get; set; } // 0x00000001800E2F70 0x0000000180316DA0

	// Constructors
	public EncryptedPrivateKeyInfo(); // 0x00000001800E2000
	public EncryptedPrivateKeyInfo(byte[] data); // 0x0000000180316BA0

	// Methods
	private void Decode(byte[] data); // 0x0000000180316620
	public byte[] GetBytes(); // 0x0000000180316920
}

// Namespace: Mono.Security.Cryptography
internal class RSAManaged : RSA // TypeDefIndex: 174
{
	// Fields
	private const int defaultKeySize = 1024; // 0x00
	private bool isCRTpossible; // 0x21
	private bool keyBlinding; // 0x23
	private bool keypairGenerated; // 0x30
	private bool m_disposed; // 0x40
	private BigInteger d; // 0x50
	private BigInteger p; // 0x60
	private BigInteger q; // 0x10
	private BigInteger dp; // 0x1C
	private BigInteger dq; // 0x28
	private BigInteger qInv; // 0x38
	private BigInteger n; // 0x44
	private BigInteger e; // 0x49
	private KeyGeneratedEventHandler KeyGenerated; // 0x00

	// Properties
	public override int KeySize { get; } // 0x000000018024BB80 
	public override string KeyExchangeAlgorithm { get; } // 0x000000018024BB50 
	public bool PublicOnly { get; } // 0x000000018024BBC0 
	public override string SignatureAlgorithm { get; } // 0x000000018024BC70 
	public bool UseKeyBlinding { get; set; } // 0x000000018024BCA0 0x000000018024BD30
	public bool IsCrtPossible { get; } // 0x000000018024BB30 

	// Events
	public event KeyGeneratedEventHandler KeyGenerated {
		add; // 0x000000018024BAB0
		remove; // 0x000000018024BCB0
	}

	// Constructors
	public RSAManaged(); // 0x000000018024BAA0
	public RSAManaged(int keySize); // 0x000000018024B990

	// Methods
	protected override void Finalize(); // 0x000000018013AFC0
	private void GenerateKeyPair(); // 0x000000018024AB30
	public override byte[] DecryptValue(byte[] rgb); // 0x000000018024A020
	public override byte[] EncryptValue(byte[] rgb); // 0x000000018024A680
	public override RSAParameters ExportParameters(bool includePrivateParameters); // 0x000000018024A7A0
	public override void ImportParameters(RSAParameters parameters); // 0x000000018024AED0
	protected override void Dispose(bool disposing); // 0x000000018024A3C0
	public override string ToXmlString(bool includePrivateParameters); // 0x000000018024B480
	private byte[] GetPaddedValue(BigInteger value, int length); // 0x000000018024AE20
}

// Namespace: 
public delegate void KeyGeneratedEventHandler(object sender, EventArgs e); // TypeDefIndex: 175; 0x00000001801AD090

// Namespace: Mono.Security.Cryptography
internal abstract class SymmetricTransform : IDisposable, ICryptoTransform // TypeDefIndex: 176
{
	// Fields
	protected SymmetricAlgorithm algo; // 0x10
	protected bool encrypt; // 0x1C
	private int BlockSizeByte; // 0x28
	private byte[] temp; // 0x38
	private byte[] temp2; // 0x44
	private byte[] workBuff; // 0x49
	private byte[] workout; // 0x00
	private int FeedBackByte; // 0x2C
	private int FeedBackIter; // 0x10
	private bool m_disposed; // 0x00
	private bool lastBlock; // 0x00
	private RandomNumberGenerator _rng; // 0x00

	// Properties
	public virtual bool CanTransformMultipleBlocks { get; } // 0x000000018010E420 
	public virtual bool CanReuseTransform { get; } // 0x000000018011A0F0 
	public virtual int InputBlockSize { get; } // 0x00000001801AE2C0 
	public virtual int OutputBlockSize { get; } // 0x00000001801AE2C0 
	private bool KeepLastBlock { get; } // 0x0000000180253D10 

	// Constructors
	public SymmetricTransform(SymmetricAlgorithm symmAlgo, bool encryption, byte[] rgbIV); // 0x0000000180253AA0

	// Methods
	private void System.IDisposable.Dispose(); // 0x0000000180253330
	protected override void Finalize(); // 0x0000000180252F10
	protected virtual void Dispose(bool disposing); // 0x00000001802526B0
	protected virtual void Transform(byte[] input, byte[] output); // 0x00000001802538B0
	protected abstract void ECB(byte[] input, byte[] output);
	protected virtual void CBC(byte[] input, byte[] output); // 0x00000001802520D0
	protected virtual void CFB(byte[] input, byte[] output); // 0x0000000180252260
	protected virtual void OFB(byte[] input, byte[] output); // 0x0000000180253210
	protected virtual void CTS(byte[] input, byte[] output); // 0x0000000180252500
	private void CheckInput(byte[] inputBuffer, int inputOffset, int inputCount); // 0x0000000180252560
	public virtual int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset); // 0x00000001802534F0
	private int InternalTransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset); // 0x0000000180252FB0
	private void Random(byte[] buffer, int start, int length); // 0x0000000180253270
	private void ThrowBadPaddingException(PaddingMode padding, int length, int position); // 0x0000000180253360
	private byte[] FinalEncrypt(byte[] inputBuffer, int inputOffset, int inputCount); // 0x0000000180252B60
	private byte[] FinalDecrypt(byte[] inputBuffer, int inputOffset, int inputCount); // 0x0000000180252710
	public virtual byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x00000001802537E0
}

// Namespace: Mono.Security.X509.Extensions
internal class BasicConstraintsExtension : X509Extension // TypeDefIndex: 177
{
	// Fields
	public const int NoPathLengthConstraint = -1; // 0x00
	private bool cA; // 0x2C
	private int pathLenConstraint; // 0x10

	// Properties
	public bool CertificateAuthority { get; set; } // 0x00000001800EA930 0x00000001801799F0
	public override string Name { get; } // 0x000000018023BD60 
	public int PathLenConstraint { get; set; } // 0x0000000180118700 0x000000018023BD90

	// Constructors
	public BasicConstraintsExtension(); // 0x000000018023BD00
	public BasicConstraintsExtension(ASN1 asn1); // 0x000000018023BCF0
	public BasicConstraintsExtension(X509Extension extension); // 0x000000018023BD50

	// Methods
	protected override void Decode(); // 0x000000018023B930
	protected override void Encode(); // 0x000000018023BA70
	public override string ToString(); // 0x000000018023BBC0
}

// Namespace: Mono.Security.X509.Extensions
internal enum KeyUsages // TypeDefIndex: 178
{
	none = 0,
	encipherOnly = 1,
	cRLSign = 2,
	keyCertSign = 4,
	keyAgreement = 8,
	dataEncipherment = 16,
	keyEncipherment = 32,
	nonRepudiation = 64,
	digitalSignature = 128,
	decipherOnly = 2048
}

// Namespace: Mono.Security.X509.Extensions
internal class KeyUsageExtension : X509Extension // TypeDefIndex: 179
{
	// Fields
	private int kubits; // 0x28

	// Properties
	public KeyUsages KeyUsage { get; set; } // 0x0000000180119420 0x000000018023D830
	public override string Name { get; } // 0x000000018023D800 

	// Constructors
	public KeyUsageExtension(ASN1 asn1); // 0x000000018023BCF0
	public KeyUsageExtension(X509Extension extension); // 0x000000018023BD50
	public KeyUsageExtension(); // 0x000000018023D7C0

	// Methods
	protected override void Decode(); // 0x000000018023D050
	protected override void Encode(); // 0x000000018023D190
	public bool Support(KeyUsages usage); // 0x000000018023D3B0
	public override string ToString(); // 0x000000018023D470
}

// Namespace: Mono.Security.X509.Extensions
internal class SubjectKeyIdentifierExtension : X509Extension // TypeDefIndex: 180
{
	// Fields
	private byte[] ski; // 0x28

	// Properties
	public override string Name { get; } // 0x00000001802520A0 
	public byte[] Identifier { get; } // 0x0000000180252020 

	// Constructors
	public SubjectKeyIdentifierExtension(); // 0x0000000180251FE0
	public SubjectKeyIdentifierExtension(ASN1 asn1); // 0x000000018023BCF0
	public SubjectKeyIdentifierExtension(X509Extension extension); // 0x000000018023BD50

	// Methods
	protected override void Decode(); // 0x0000000180251DA0
	public override string ToString(); // 0x0000000180251E70
}

// Namespace: Mono.Security.X509
internal class PKCS5 // TypeDefIndex: 181
{
	// Fields
	public const string pbeWithMD2AndDESCBC = "1.2.840.113549.1.5.1"; // 0x00
	public const string pbeWithMD5AndDESCBC = "1.2.840.113549.1.5.3"; // 0x00
	public const string pbeWithMD2AndRC2CBC = "1.2.840.113549.1.5.4"; // 0x00
	public const string pbeWithMD5AndRC2CBC = "1.2.840.113549.1.5.6"; // 0x60
	public const string pbeWithSHA1AndDESCBC = "1.2.840.113549.1.5.10"; // 0x00
	public const string pbeWithSHA1AndRC2CBC = "1.2.840.113549.1.5.11"; // 0x10

	// Constructors
	public PKCS5(); // 0x00000001800E2000

}

// Namespace: Mono.Security.X509
internal class PKCS9 // TypeDefIndex: 182
{
	// Fields
	public const string friendlyName = "1.2.840.113549.1.9.20"; // 0x00
	public const string localKeyId = "1.2.840.113549.1.9.21"; // 0x20

	// Constructors
	public PKCS9(); // 0x00000001800E2000

}

// Namespace: Mono.Security.X509
internal class SafeBag // TypeDefIndex: 183
{
	// Fields
	private string _bagOID; // 0x10
	private ASN1 _asn1; // 0x00

	// Properties
	public string BagOID { get; } // 0x00000001800E20D0 
	public ASN1 ASN1 { get; } // 0x00000001800EAEC0 

	// Constructors
	public SafeBag(string bagOID, ASN1 asn1); // 0x000000018014B260

}

// Namespace: Mono.Security.X509
internal class PKCS12 : ICloneable // TypeDefIndex: 184
{
	// Fields
	public const string pbeWithSHAAnd128BitRC4 = "1.2.840.113549.1.12.1.1"; // 0x00
	public const string pbeWithSHAAnd40BitRC4 = "1.2.840.113549.1.12.1.2"; // 0x00
	public const string pbeWithSHAAnd3KeyTripleDESCBC = "1.2.840.113549.1.12.1.3"; // 0x00
	public const string pbeWithSHAAnd2KeyTripleDESCBC = "1.2.840.113549.1.12.1.4"; // 0x00
	public const string pbeWithSHAAnd128BitRC2CBC = "1.2.840.113549.1.12.1.5"; // 0x00
	public const string pbeWithSHAAnd40BitRC2CBC = "1.2.840.113549.1.12.1.6"; // 0x00
	public const string keyBag = "1.2.840.113549.1.12.10.1.1"; // 0x00
	public const string pkcs8ShroudedKeyBag = "1.2.840.113549.1.12.10.1.2"; // 0x00
	public const string certBag = "1.2.840.113549.1.12.10.1.3"; // 0x00
	public const string crlBag = "1.2.840.113549.1.12.10.1.4"; // 0x18
	public const string secretBag = "1.2.840.113549.1.12.10.1.5"; // 0x28
	public const string safeContentsBag = "1.2.840.113549.1.12.10.1.6"; // 0x31
	public const string x509Certificate = "1.2.840.113549.1.9.22.1"; // 0x34
	public const string sdsiCertificate = "1.2.840.113549.1.9.22.2"; // 0x40
	public const string x509Crl = "1.2.840.113549.1.9.23.1"; // 0x08
	public const int CryptoApiPasswordLimit = 32; // 0x18
	private static int recommendedIterationCount; // 0x28
	private byte[] _password; // 0x38
	private ArrayList _keyBags; // 0x00
	private ArrayList _secretBags; // 0x10
	private X509CertificateCollection _certs; // 0x18
	private bool _keyBagsChanged; // 0x28
	private bool _secretBagsChanged; // 0x10
	private bool _certsChanged; // 0x00
	private int _iterations; // 0x00
	private ArrayList _safeBags; // 0x10
	private RandomNumberGenerator _rng; // 0x20
	private static int password_max_length; // 0x30
	private static Dictionary`2<string, int> <>f__switch$map8; // 0x40
	private static Dictionary`2<string, int> <>f__switch$map9; // 0x50
	private static Dictionary`2<string, int> <>f__switch$mapA; // 0x60
	private static Dictionary`2<string, int> <>f__switch$mapB; // 0x70
	private static Dictionary`2<string, int> <>f__switch$mapC; // 0x10
	private static Dictionary`2<string, int> <>f__switch$mapD; // 0x20
	private static Dictionary`2<string, int> <>f__switch$mapE; // 0x40
	private static Dictionary`2<string, int> <>f__switch$mapF; // 0x50

	// Properties
	public string Password { set; } // 0x0000000180248750
	public int IterationCount { get; set; } // 0x0000000180119430 0x0000000180248640
	public ArrayList Keys { get; } // 0x0000000180247C80 
	public ArrayList Secrets { get; } // 0x0000000180248360 
	public X509CertificateCollection Certificates { get; } // 0x0000000180247940 
	internal RandomNumberGenerator RNG { get; } // 0x0000000180248330 
	public static int MaximumPasswordLength { get; set; } // 0x0000000180248270 0x0000000180248650

	// Constructors
	public PKCS12(); // 0x0000000180247760
	public PKCS12(byte[] data); // 0x00000001802478E0
	public PKCS12(byte[] data, string password); // 0x0000000180247850
	public PKCS12(byte[] data, byte[] password); // 0x00000001802478A0
	private static PKCS12(); // 0x0000000180247710

	// Methods
	private void Decode(byte[] data); // 0x000000018023F100
	protected override void Finalize(); // 0x0000000180240050
	private bool Compare(byte[] expected, byte[] actual); // 0x000000018023F070
	private SymmetricAlgorithm GetSymmetricAlgorithm(string algorithmOid, byte[] salt, int iterationCount); // 0x0000000180243AE0
	public byte[] Decrypt(string algorithmOid, byte[] salt, int iterationCount, byte[] encryptedData); // 0x000000018023FA90
	public byte[] Decrypt(EncryptedData ed); // 0x000000018023F960
	public byte[] Encrypt(string algorithmOid, byte[] salt, int iterationCount, byte[] data); // 0x000000018023FBE0
	private DSAParameters GetExistingParameters(out bool found); // 0x0000000180243460
	private void AddPrivateKey(PrivateKeyInfo pki); // 0x000000018023E280
	private void ReadSafeBag(ASN1 safeBag); // 0x00000001802458E0
	private ASN1 Pkcs8ShroudedKeyBagSafeBag(AsymmetricAlgorithm aa, IDictionary attributes); // 0x0000000180244E50
	private ASN1 KeyBagSafeBag(AsymmetricAlgorithm aa, IDictionary attributes); // 0x0000000180243FF0
	private ASN1 SecretBagSafeBag(byte[] secret, IDictionary attributes); // 0x0000000180246FB0
	private ASN1 CertificateSafeBag(X509Certificate x509, IDictionary attributes); // 0x000000018023E600
	private byte[] MAC(byte[] password, byte[] salt, int iterations, byte[] data); // 0x0000000180244D00
	public byte[] GetBytes(); // 0x0000000180241350
	private ContentInfo EncryptedContentInfo(ASN1 safeBags, string algorithmOid); // 0x000000018023FD30
	public void AddCertificate(X509Certificate cert); // 0x000000018023DB80
	public void AddCertificate(X509Certificate cert, IDictionary attributes); // 0x000000018023D8E0
	public void RemoveCertificate(X509Certificate cert); // 0x0000000180246220
	public void RemoveCertificate(X509Certificate cert, IDictionary attrs); // 0x0000000180246230
	private bool CompareAsymmetricAlgorithm(AsymmetricAlgorithm a1, AsymmetricAlgorithm a2); // 0x000000018023EF70
	public void AddPkcs8ShroudedKeyBag(AsymmetricAlgorithm aa); // 0x000000018023E270
	public void AddPkcs8ShroudedKeyBag(AsymmetricAlgorithm aa, IDictionary attributes); // 0x000000018023DEB0
	public void RemovePkcs8ShroudedKeyBag(AsymmetricAlgorithm aa); // 0x0000000180246950
	public void AddKeyBag(AsymmetricAlgorithm aa); // 0x000000018023DEA0
	public void AddKeyBag(AsymmetricAlgorithm aa, IDictionary attributes); // 0x000000018023DB90
	public void RemoveKeyBag(AsymmetricAlgorithm aa); // 0x0000000180246690
	public void AddSecretBag(byte[] secret); // 0x000000018023E5F0
	public void AddSecretBag(byte[] secret, IDictionary attributes); // 0x000000018023E400
	public void RemoveSecretBag(byte[] secret); // 0x0000000180246CD0
	public AsymmetricAlgorithm GetAsymmetricAlgorithm(IDictionary attrs); // 0x0000000180240100
	public byte[] GetSecret(IDictionary attrs); // 0x00000001802436A0
	public X509Certificate GetCertificate(IDictionary attrs); // 0x0000000180242F90
	public IDictionary GetAttributes(AsymmetricAlgorithm aa); // 0x0000000180240C90
	public IDictionary GetAttributes(X509Certificate cert); // 0x00000001802407F0
	public void SaveToFile(string filename); // 0x0000000180246E60
	public object Clone(); // 0x000000018023EE40
	private static byte[] LoadFile(string filename); // 0x00000001802449D0
	public static PKCS12 LoadFromFile(string filename); // 0x0000000180244C10
	public static PKCS12 LoadFromFile(string filename, string password); // 0x0000000180244B30
}

// Namespace: 
public class DeriveBytes // TypeDefIndex: 185
{
	// Fields
	private static byte[] keyDiversifier; // 0x00
	private static byte[] ivDiversifier; // 0x10
	private static byte[] macDiversifier; // 0x18
	private string _hashName; // 0x28
	private int _iterations; // 0x10
	private byte[] _password; // 0x00
	private byte[] _salt; // 0x00

	// Properties
	public string HashName { get; set; } // 0x00000001800E20D0 0x0000000180114C30
	public int IterationCount { get; set; } // 0x00000001800ED060 0x000000018019DD90
	public byte[] Password { get; set; } // 0x000000018019DC90 0x000000018019DDA0
	public byte[] Salt { get; set; } // 0x000000018019DD10 0x000000018019DE40

	// Constructors
	public DeriveBytes(); // 0x00000001800E2000
	private static DeriveBytes(); // 0x000000018019DBC0

	// Methods
	private void Adjust(byte[] a, int aOff, byte[] b); // 0x000000018019D490
	private byte[] Derive(byte[] diversifier, int n); // 0x000000018019D710
	public byte[] DeriveKey(int size); // 0x000000018019D610
	public byte[] DeriveIV(int size); // 0x000000018019D590
	public byte[] DeriveMAC(int size); // 0x000000018019D690
}

// Namespace: 
public enum Purpose // TypeDefIndex: 186
{
	Key = 0,
	IV = 1,
	MAC = 2
}

// Namespace: Mono.Security.X509
internal sealed class X501 // TypeDefIndex: 187
{
	// Fields
	private static byte[] countryName; // 0x00
	private static byte[] organizationName; // 0x10
	private static byte[] organizationalUnitName; // 0x20
	private static byte[] commonName; // 0x30
	private static byte[] localityName; // 0x40
	private static byte[] stateOrProvinceName; // 0x50
	private static byte[] streetAddress; // 0x60
	private static byte[] domainComponent; // 0x70
	private static byte[] userid; // 0x10
	private static byte[] email; // 0x20
	private static byte[] dnQualifier; // 0x40
	private static byte[] title; // 0x50
	private static byte[] surname; // 0x60
	private static byte[] givenName; // 0x00
	private static byte[] initial; // 0x10
	private static Dictionary`2<string, int> <>f__switch$map10; // 0x28

	// Constructors
	private X501(); // 0x00000001800E2000
	private static X501(); // 0x00000001801A2EB0

	// Methods
	public static string ToString(ASN1 seq); // 0x00000001801A2DA0
	public static string ToString(ASN1 seq, bool reversed, string separator, bool quotes); // 0x00000001801A2C00
	private static void AppendEntry(StringBuilder sb, ASN1 entry, bool quotes); // 0x00000001801A0EA0
	private static AttributeTypeAndValue GetAttributeFromOid(string attributeType); // 0x00000001801A1880
	private static bool IsOid(string oid); // 0x00000001801A21D0
	private static AttributeTypeAndValue ReadAttribute(string value, int pos); // 0x00000001801A2240
	private static bool IsHex(char c); // 0x00000001801A20F0
	private static string ReadHex(string value, int pos); // 0x00000001801A2590
	private static int ReadEscaped(StringBuilder sb, string value, int pos); // 0x00000001801A23D0
	private static int ReadQuoted(StringBuilder sb, string value, int pos); // 0x00000001801A2800
	private static string ReadValue(string value, int pos); // 0x00000001801A2970
	public static ASN1 FromString(string rdn); // 0x00000001801A1710
}

// Namespace: Mono.Security.X509
internal class X509Crl // TypeDefIndex: 188
{
	// Fields
	private string issuer; // 0x10
	private byte version; // 0x20
	private DateTime thisUpdate; // 0x40
	private DateTime nextUpdate; // 0x50
	private ArrayList entries; // 0x60
	private string signatureOID; // 0x00
	private byte[] signature; // 0x10
	private X509ExtensionCollection extensions; // 0x28
	private byte[] encoded; // 0x10
	private byte[] hash_value; // 0x20
	private static Dictionary`2<string, int> <>f__switch$map11; // 0x40
	private static Dictionary`2<string, int> <>f__switch$map12; // 0x50

	// Properties
	public ArrayList Entries { get; } // 0x00000001801A9620 
	public X509CrlEntry Item { get; } // 0x00000001801A9910 
	public X509CrlEntry Item { get; } // 0x00000001801A99C0 
	public X509ExtensionCollection Extensions { get; } // 0x0000000180176AC0 
	public byte[] Hash { get; } // 0x00000001801A9680 
	public string IssuerName { get; } // 0x00000001800E20D0 
	public DateTime NextUpdate { get; } // 0x00000001801A6B50 
	public DateTime ThisUpdate { get; } // 0x0000000180143A80 
	public string SignatureAlgorithm { get; } // 0x0000000180113E60 
	public byte[] Signature { get; } // 0x00000001801A9A50 
	public byte[] RawData { get; } // 0x00000001801A99D0 
	public byte Version { get; } // 0x00000001801249E0 
	public bool IsCurrent { get; } // 0x00000001801A9750 

	// Constructors
	public X509Crl(byte[] crl); // 0x00000001801A9550

	// Methods
	private void Parse(byte[] crl); // 0x00000001801A8550
	public bool WasCurrent(DateTime instant); // 0x00000001801A93D0
	public byte[] GetBytes(); // 0x00000001801A8010
	private bool Compare(byte[] array1, byte[] array2); // 0x00000001801A38E0
	public X509CrlEntry GetCrlEntry(X509Certificate x509); // 0x00000001801A82B0
	public X509CrlEntry GetCrlEntry(byte[] serialNumber); // 0x00000001801A8090
	public bool VerifySignature(X509Certificate x509); // 0x00000001801A9130
	private string GetHashName(); // 0x00000001801A8340
	internal bool VerifySignature(DSA dsa); // 0x00000001801A8DC0
	internal bool VerifySignature(RSA rsa); // 0x00000001801A9080
	public bool VerifySignature(AsymmetricAlgorithm aa); // 0x00000001801A8BD0
	public static X509Crl CreateFromFile(string filename); // 0x00000001801A7E90
}

// Namespace: 
public class X509CrlEntry // TypeDefIndex: 189
{
	// Fields
	private byte[] sn; // 0x10
	private DateTime revocationDate; // 0x28
	private X509ExtensionCollection extensions; // 0x10

	// Properties
	public byte[] SerialNumber { get; } // 0x00000001801A7E10 
	public DateTime RevocationDate { get; } // 0x00000001801A7E00 
	public X509ExtensionCollection Extensions { get; } // 0x000000018013BF80 

	// Constructors
	internal X509CrlEntry(byte[] serialNumber, DateTime revocationDate, X509ExtensionCollection extensions); // 0x00000001801A7C80
	internal X509CrlEntry(ASN1 entry); // 0x00000001801A7D10

	// Methods
	public byte[] GetBytes(); // 0x00000001801A7B50
}

// Namespace: Mono.Security.X509
internal class X509Certificate : ISerializable // TypeDefIndex: 190
{
	// Fields
	private ASN1 decoder; // 0x10
	private byte[] m_encodedcert; // 0x20
	private DateTime m_from; // 0x40
	private DateTime m_until; // 0x50
	private ASN1 issuer; // 0x60
	private string m_issuername; // 0x70
	private string m_keyalgo; // 0x80
	private byte[] m_keyalgoparams; // 0x90
	private ASN1 subject; // 0xA0
	private string m_subject; // 0xB0
	private byte[] m_publickey; // 0xC0
	private byte[] signature; // 0x00
	private string m_signaturealgo; // 0x10
	private byte[] m_signaturealgoparams; // 0x10
	private byte[] certhash; // 0x10
	private RSA _rsa; // 0x20
	private DSA _dsa; // 0x30
	private int version; // 0x10
	private byte[] serialnumber; // 0x00
	private byte[] issuerUniqueID; // 0x00
	private byte[] subjectUniqueID; // 0x00
	private X509ExtensionCollection extensions; // 0x10
	private static string encoding_error; // 0x20
	private static Dictionary`2<string, int> <>f__switch$map13; // 0x10
	private static Dictionary`2<string, int> <>f__switch$map14; // 0x20
	private static Dictionary`2<string, int> <>f__switch$map15; // 0x30

	// Properties
	public DSA DSA { get; set; } // 0x00000001801A5A30 0x00000001801A6B70
	public X509ExtensionCollection Extensions { get; } // 0x00000001801A5D30 
	public byte[] Hash { get; } // 0x00000001801A5D40 
	public virtual string IssuerName { get; } // 0x0000000180113E60 
	public virtual string KeyAlgorithm { get; } // 0x00000001801513A0 
	public virtual byte[] KeyAlgorithmParameters { get; set; } // 0x00000001801A62B0 0x0000000180196F80
	public virtual byte[] PublicKey { get; } // 0x00000001801A6330 
	public virtual RSA RSA { get; set; } // 0x00000001801A63B0 0x00000001801A6B90
	public virtual byte[] RawData { get; } // 0x00000001801A6580 
	public virtual byte[] SerialNumber { get; } // 0x00000001801A6600 
	public virtual byte[] Signature { get; } // 0x00000001801A6700 
	public virtual string SignatureAlgorithm { get; } // 0x0000000180113670 
	public virtual byte[] SignatureAlgorithmParameters { get; } // 0x00000001801A6680 
	public virtual string SubjectName { get; } // 0x00000001801136C0 
	public virtual DateTime ValidFrom { get; } // 0x0000000180143A80 
	public virtual DateTime ValidUntil { get; } // 0x00000001801A6B50 
	public int Version { get; } // 0x00000001801A6B60 
	public bool IsCurrent { get; } // 0x00000001801A6020 
	public byte[] IssuerUniqueIdentifier { get; } // 0x00000001801A6230 
	public byte[] SubjectUniqueIdentifier { get; } // 0x00000001801A6AD0 
	public bool IsSelfSigned { get; } // 0x00000001801A6180 

	// Constructors
	public X509Certificate(byte[] data); // 0x00000001801A57C0
	protected X509Certificate(SerializationInfo info, StreamingContext context); // 0x00000001801A56E0
	private static X509Certificate(); // 0x00000001801A5690

	// Methods
	private void Parse(byte[] data); // 0x00000001801A4700
	private byte[] GetUnsignedBigInteger(byte[] integer); // 0x00000001801A4500
	public bool WasCurrent(DateTime instant); // 0x00000001801A5580
	internal bool VerifySignature(DSA dsa); // 0x00000001801A54C0
	internal string GetHashNameFromOID(string oid); // 0x00000001801A42B0
	internal bool VerifySignature(RSA rsa); // 0x00000001801A4F30
	public bool VerifySignature(AsymmetricAlgorithm aa); // 0x00000001801A5230
	public bool CheckSignature(byte[] hash, string hashAlgorithm, byte[] signature); // 0x00000001801A4200
	public ASN1 GetIssuerName(); // 0x0000000180114BB0
	public ASN1 GetSubjectName(); // 0x0000000180114BE0
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00000001801A44A0
	private static byte[] PEM(string type, byte[] data); // 0x00000001801A45B0
}

// Namespace: Mono.Security.X509
[Serializable]
internal class X509CertificateCollection : CollectionBase, IEnumerable // TypeDefIndex: 191
{
	// Properties
	public X509Certificate Item { get; set; } // 0x00000001801A3E60 0x00000001801A3F10

	// Constructors
	public X509CertificateCollection(); // 0x00000001800EAC90
	public X509CertificateCollection(X509Certificate[] value); // 0x00000001801A3D80
	public X509CertificateCollection(X509CertificateCollection value); // 0x00000001801A3D50

	// Methods
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x00000001801A3D20
	public int Add(X509Certificate value); // 0x00000001801A3840
	public void AddRange(X509Certificate[] value); // 0x00000001801A3660
	public void AddRange(X509CertificateCollection value); // 0x00000001801A3740
	public bool Contains(X509Certificate value); // 0x00000001801A3970
	public void CopyTo(X509Certificate[] array, int index); // 0x00000001801A3990
	public X509CertificateEnumerator GetEnumerator(); // 0x00000001801A39E0
	public override int GetHashCode(); // 0x00000001801A3A70
	public int IndexOf(X509Certificate value); // 0x00000001801A3AA0
	public void Insert(int index, X509Certificate value); // 0x00000001801A3C90
	public void Remove(X509Certificate value); // 0x00000001801A3CE0
	private bool Compare(byte[] array1, byte[] array2); // 0x00000001801A38E0
}

// Namespace: 
public class X509CertificateEnumerator : IEnumerator // TypeDefIndex: 192
{
	// Fields
	private IEnumerator enumerator; // 0x10

	// Properties
	private object System.Collections.IEnumerator.Current { get; } // 0x00000001801A40A0 
	public X509Certificate Current { get; } // 0x00000001801A4160 

	// Constructors
	public X509CertificateEnumerator(X509CertificateCollection mappings); // 0x00000001801A40F0

	// Methods
	private bool System.Collections.IEnumerator.MoveNext(); // 0x00000001801A4000
	private void System.Collections.IEnumerator.Reset(); // 0x00000001801A4050
	public bool MoveNext(); // 0x00000001801A3F60
	public void Reset(); // 0x00000001801A3FB0
}

// Namespace: Mono.Security.X509
internal class X509Chain // TypeDefIndex: 193
{
	// Fields
	private X509CertificateCollection roots; // 0x10
	private X509CertificateCollection certs; // 0x20
	private X509Certificate _root; // 0x30
	private X509CertificateCollection _chain; // 0x10
	private X509ChainStatusFlags _status; // 0x00

	// Properties
	public X509CertificateCollection Chain { get; } // 0x000000018013BF80 
	public X509Certificate Root { get; } // 0x00000001800EAEB0 
	public X509ChainStatusFlags Status { get; } // 0x0000000180124660 
	public X509CertificateCollection TrustAnchors { get; set; } // 0x00000001801A79E0 0x0000000180114C30

	// Constructors
	public X509Chain(); // 0x00000001801A78C0
	public X509Chain(X509CertificateCollection chain); // 0x00000001801A7920

	// Methods
	public void LoadCertificate(X509Certificate x509); // 0x00000001801A7830
	public void LoadCertificates(X509CertificateCollection collection); // 0x00000001801A7850
	public X509Certificate FindByIssuerName(string issuerName); // 0x00000001801A6F30
	public bool Build(X509Certificate leaf); // 0x00000001801A6BB0
	public void Reset(); // 0x00000001801A7870
	private bool IsValid(X509Certificate cert); // 0x00000001801A76B0
	private X509Certificate FindCertificateParent(X509Certificate child); // 0x00000001801A7120
	private X509Certificate FindCertificateRoot(X509Certificate potentialRoot); // 0x00000001801A72C0
	private bool IsTrusted(X509Certificate potentialTrusted); // 0x00000001801A7670
	private bool IsParent(X509Certificate child, X509Certificate parent); // 0x00000001801A74E0
}

// Namespace: Mono.Security.X509
[Serializable]
internal enum X509ChainStatusFlags // TypeDefIndex: 194
{
	NoError = 0,
	NotTimeValid = 1,
	NotTimeNested = 2,
	NotSignatureValid = 8,
	UntrustedRoot = 32,
	InvalidBasicConstraints = 1024,
	PartialChain = 65536
}

// Namespace: Mono.Security.X509
internal class X509Extension // TypeDefIndex: 195
{
	// Fields
	protected string extnOid; // 0x10
	protected bool extnCritical; // 0x20
	protected ASN1 extnValue; // 0x10

	// Properties
	public ASN1 ASN1 { get; } // 0x00000001801AB350 
	public string Oid { get; } // 0x00000001800E20D0 
	public bool Critical { get; set; } // 0x00000001801249E0 0x00000001801AB4A0
	public virtual string Name { get; } // 0x00000001800E20D0 
	public ASN1 Value { get; } // 0x00000001801AB470 

	// Constructors
	protected X509Extension(); // 0x00000001801AAF40
	public X509Extension(ASN1 asn1); // 0x00000001801AAF60
	public X509Extension(X509Extension extension); // 0x00000001801AB200

	// Methods
	protected virtual void Decode(); // 0x00000001800EA7B0
	protected virtual void Encode(); // 0x00000001800EA7B0
	public override bool Equals(object obj); // 0x00000001801AAA60
	public byte[] GetBytes(); // 0x00000001801AABE0
	public override int GetHashCode(); // 0x00000001801AAC10
	private void WriteLine(StringBuilder sb, int n, int pos); // 0x00000001801AAD40
	public override string ToString(); // 0x00000001801AAC30
}

// Namespace: Mono.Security.X509
internal sealed class X509ExtensionCollection : CollectionBase, IEnumerable // TypeDefIndex: 196
{
	// Fields
	private bool readOnly; // 0x18

	// Properties
	public X509Extension Item { get; } // 0x00000001801AA9B0 
	public X509Extension Item { get; } // 0x00000001801AA8E0 

	// Constructors
	public X509ExtensionCollection(); // 0x00000001800EAC90
	public X509ExtensionCollection(ASN1 asn1); // 0x00000001801AA7C0

	// Methods
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x00000001801A3D20
	public int Add(X509Extension extension); // 0x00000001801A9DB0
	public void AddRange(X509Extension[] extension); // 0x00000001801A9AD0
	public void AddRange(X509ExtensionCollection collection); // 0x00000001801A9BE0
	public bool Contains(X509Extension extension); // 0x00000001801A9EB0
	public bool Contains(string oid); // 0x00000001801A9E90
	public void CopyTo(X509Extension[] extensions, int index); // 0x00000001801AA040
	public int IndexOf(X509Extension extension); // 0x00000001801AA440
	public int IndexOf(string oid); // 0x00000001801AA2A0
	public void Insert(int index, X509Extension extension); // 0x00000001801AA5C0
	public void Remove(X509Extension extension); // 0x00000001801AA720
	public void Remove(string oid); // 0x00000001801AA670
	public byte[] GetBytes(); // 0x00000001801AA0F0
}

// Namespace: Mono.Security.X509
internal class X509Store // TypeDefIndex: 197
{
	// Fields
	private string _storePath; // 0x10
	private X509CertificateCollection _certificates; // 0x20
	private ArrayList _crls; // 0x30
	private bool _crl; // 0x00
	private string _name; // 0x10

	// Properties
	public X509CertificateCollection Certificates { get; } // 0x00000001801AC910 
	public ArrayList Crls { get; } // 0x00000001801AC940 
	public string Name { get; } // 0x00000001801AC9D0 

	// Constructors
	internal X509Store(string path, bool crl); // 0x00000001801AC8D0

	// Methods
	public void Clear(); // 0x00000001801ABE50
	public void Import(X509Certificate certificate); // 0x00000001801AC1C0
	public void Import(X509Crl crl); // 0x00000001801AC370
	public void Remove(X509Certificate certificate); // 0x00000001801AC790
	public void Remove(X509Crl crl); // 0x00000001801AC830
	private string GetUniqueName(X509Certificate certificate); // 0x00000001801AC120
	private string GetUniqueName(X509Crl crl); // 0x00000001801ABFE0
	private byte[] GetUniqueName(X509ExtensionCollection extensions); // 0x00000001801AC080
	private string GetUniqueName(string method, byte[] name, string fileExtension); // 0x00000001801ABEA0
	private byte[] Load(string filename); // 0x00000001801AC630
	private X509Certificate LoadCertificate(string filename); // 0x00000001801AC550
	private X509Crl LoadCrl(string filename); // 0x00000001801AC5C0
	private bool CheckStore(string path, bool throwException); // 0x00000001801ABDC0
	private X509CertificateCollection BuildCertificatesCollection(string storeName); // 0x00000001801ABB30
	private ArrayList BuildCrlsCollection(string storeName); // 0x00000001801ABC70
}

// Namespace: Mono.Security.X509
internal sealed class X509StoreManager // TypeDefIndex: 198
{
	// Fields
	private static X509Stores _userStore; // 0x00
	private static X509Stores _machineStore; // 0x10

	// Properties
	public static X509Stores CurrentUser { get; } // 0x00000001801AB4B0 
	public static X509Stores LocalMachine { get; } // 0x00000001801AB770 
	public static X509CertificateCollection IntermediateCACertificates { get; } // 0x00000001801AB5A0 
	public static ArrayList IntermediateCACrls { get; } // 0x00000001801AB6A0 
	public static X509CertificateCollection TrustedRootCertificates { get; } // 0x00000001801AB930 
	public static ArrayList TrustedRootCACrls { get; } // 0x00000001801AB860 
	public static X509CertificateCollection UntrustedCertificates { get; } // 0x00000001801ABA30 

	// Constructors
	private X509StoreManager(); // 0x00000001800E2000

}

// Namespace: Mono.Security.X509
internal class X509Stores // TypeDefIndex: 199
{
	// Fields
	private string _storePath; // 0x10
	private X509Store _personal; // 0x20
	private X509Store _other; // 0x30
	private X509Store _intermediate; // 0x10
	private X509Store _trusted; // 0x20
	private X509Store _untrusted; // 0x10

	// Properties
	public X509Store Personal { get; } // 0x00000001801ACE40 
	public X509Store OtherPeople { get; } // 0x00000001801ACD90 
	public X509Store IntermediateCA { get; } // 0x00000001801ACCE0 
	public X509Store TrustedRoot { get; } // 0x00000001801ACEF0 
	public X509Store Untrusted { get; } // 0x00000001801ACFA0 

	// Constructors
	internal X509Stores(string path); // 0x000000018015C840

	// Methods
	public void Clear(); // 0x00000001801ACA80
	public X509Store Open(string storeName, bool create); // 0x00000001801ACBE0
}

// Namespace: 
public class Names // TypeDefIndex: 200
{
	// Fields
	public const string Personal = "My"; // 0x00
	public const string OtherPeople = "AddressBook"; // 0x00
	public const string IntermediateCA = "CA"; // 0x00
	public const string TrustedRoot = "Trust"; // 0x10
	public const string Untrusted = "Disallowed"; // 0x00

	// Constructors
	public Names(); // 0x00000001800E2000

}

// Namespace: Mono.Security.X509
internal class X520 // TypeDefIndex: 201
{
	// Constructors
	public X520(); // 0x00000001800E2000

}

// Namespace: 
public abstract class AttributeTypeAndValue // TypeDefIndex: 202
{
	// Fields
	private string oid; // 0x10
	private string attrValue; // 0x20
	private int upperBound; // 0x10
	private byte encoding; // 0x20

	// Properties
	public string Value { get; set; } // 0x00000001800EAEC0 0x000000018019D2F0
	public ASN1 ASN1 { get; } // 0x000000018019D160 

	// Constructors
	protected AttributeTypeAndValue(string oid, int upperBound); // 0x000000018019D260
	protected AttributeTypeAndValue(string oid, int upperBound, byte encoding); // 0x000000018019D2A0

	// Methods
	internal ASN1 GetASN1(byte encoding); // 0x000000018019CF30
	internal ASN1 GetASN1(); // 0x000000018019D160
	public byte[] GetBytes(byte encoding); // 0x000000018019D170
	public byte[] GetBytes(); // 0x000000018019D1B0
	private byte SelectBestEncoding(); // 0x000000018019D1F0
}

// Namespace: 
public class Name : AttributeTypeAndValue // TypeDefIndex: 203
{
	// Constructors
	public Name(); // 0x000000018019E110

}

// Namespace: 
public class CommonName : AttributeTypeAndValue // TypeDefIndex: 204
{
	// Constructors
	public CommonName(); // 0x000000018019D3D0

}

// Namespace: 
public class SerialNumber : AttributeTypeAndValue // TypeDefIndex: 205
{
	// Constructors
	public SerialNumber(); // 0x000000018019E7A0

}

// Namespace: 
public class LocalityName : AttributeTypeAndValue // TypeDefIndex: 206
{
	// Constructors
	public LocalityName(); // 0x000000018019E0B0

}

// Namespace: 
public class StateOrProvinceName : AttributeTypeAndValue // TypeDefIndex: 207
{
	// Constructors
	public StateOrProvinceName(); // 0x00000001801A0D20

}

// Namespace: 
public class OrganizationName : AttributeTypeAndValue // TypeDefIndex: 208
{
	// Constructors
	public OrganizationName(); // 0x000000018019E1B0

}

// Namespace: 
public class OrganizationalUnitName : AttributeTypeAndValue // TypeDefIndex: 209
{
	// Constructors
	public OrganizationalUnitName(); // 0x000000018019E210

}

// Namespace: 
public class EmailAddress : AttributeTypeAndValue // TypeDefIndex: 210
{
	// Constructors
	public EmailAddress(); // 0x000000018019DF90

}

// Namespace: 
public class DomainComponent : AttributeTypeAndValue // TypeDefIndex: 211
{
	// Constructors
	public DomainComponent(); // 0x000000018019DF30

}

// Namespace: 
public class UserId : AttributeTypeAndValue // TypeDefIndex: 212
{
	// Constructors
	public UserId(); // 0x00000001801A0E40

}

// Namespace: 
public class Oid : AttributeTypeAndValue // TypeDefIndex: 213
{
	// Constructors
	public Oid(string oid); // 0x000000018019E170

}

// Namespace: 
public class Title : AttributeTypeAndValue // TypeDefIndex: 214
{
	// Constructors
	public Title(); // 0x00000001801A0DE0

}

// Namespace: 
public class CountryName : AttributeTypeAndValue // TypeDefIndex: 215
{
	// Constructors
	public CountryName(); // 0x000000018019D430

}

// Namespace: 
public class DnQualifier : AttributeTypeAndValue // TypeDefIndex: 216
{
	// Constructors
	public DnQualifier(); // 0x000000018019DED0

}

// Namespace: 
public class Surname : AttributeTypeAndValue // TypeDefIndex: 217
{
	// Constructors
	public Surname(); // 0x00000001801A0D80

}

// Namespace: 
public class GivenName : AttributeTypeAndValue // TypeDefIndex: 218
{
	// Constructors
	public GivenName(); // 0x000000018019DFF0

}

// Namespace: 
public class Initial : AttributeTypeAndValue // TypeDefIndex: 219
{
	// Constructors
	public Initial(); // 0x000000018019E050

}

// Namespace: Mono.Security
internal class ASN1 // TypeDefIndex: 220
{
	// Fields
	private byte m_nTag; // 0x10
	private byte[] m_aValue; // 0x20
	private ArrayList elist; // 0x10

	// Properties
	public int Count { get; } // 0x00000001803099C0 
	public byte Tag { get; } // 0x0000000180113840 
	public int Length { get; } // 0x0000000180309AC0 
	public byte[] Value { get; set; } // 0x0000000180309AD0 0x0000000180309B70
	public ASN1 Item { get; } // 0x00000001803099E0 

	// Constructors
	public ASN1(); // 0x0000000180309920
	public ASN1(byte tag); // 0x0000000180309950
	public ASN1(byte tag, byte[] data); // 0x0000000180309980
	public ASN1(byte[] data); // 0x0000000180309780

	// Methods
	private bool CompareArray(byte[] array1, byte[] array2); // 0x0000000180308760
	public bool Equals(byte[] asn1); // 0x0000000180308C50
	public bool CompareValue(byte[] value); // 0x0000000180308800
	public ASN1 Add(ASN1 asn1); // 0x00000001803086C0
	public virtual byte[] GetBytes(); // 0x0000000180308C90
	protected void Decode(byte[] asn1, int anPos, int anLength); // 0x0000000180308950
	protected void DecodeTLV(byte[] asn1, int pos, out byte tag, out int length, out byte[] content); // 0x0000000180308810
	public ASN1 Element(int index, byte anTag); // 0x0000000180308B40
	public override string ToString(); // 0x00000001803094B0
	public void SaveToFile(string filename); // 0x0000000180309350
}

// Namespace: Mono.Security
internal static class ASN1Convert // TypeDefIndex: 221
{
	// Methods
	public static ASN1 FromDateTime(DateTime dt); // 0x0000000180307680
	public static ASN1 FromInt32(int value); // 0x00000001803078C0
	public static ASN1 FromOid(string oid); // 0x0000000180307B00
	public static ASN1 FromUnsignedBigInteger(byte[] big); // 0x0000000180307BC0
	public static int ToInt32(ASN1 asn1); // 0x0000000180308250
	public static string ToOid(ASN1 asn1); // 0x0000000180308400
	public static DateTime ToDateTime(ASN1 time); // 0x0000000180307CC0
}

// Namespace: Mono.Security
internal sealed class BitConverterLE // TypeDefIndex: 222
{
	// Constructors
	private BitConverterLE(); // 0x00000001800E2000

	// Methods
	private static byte[] GetUShortBytes(void * bytes); // 0x0000000180310170
	private static byte[] GetUIntBytes(void * bytes); // 0x000000018030FCF0
	private static byte[] GetULongBytes(void * bytes); // 0x000000018030FEA0
	internal static byte[] GetBytes(bool value); // 0x000000018030FC80
	internal static byte[] GetBytes(char value); // 0x000000018030FC20
	internal static byte[] GetBytes(short value); // 0x000000018030FC20
	internal static byte[] GetBytes(int value); // 0x000000018030FC60
	internal static byte[] GetBytes(long value); // 0x000000018030FBE0
	internal static byte[] GetBytes(ushort value); // 0x000000018030FC20
	internal static byte[] GetBytes(uint value); // 0x000000018030FC60
	internal static byte[] GetBytes(ulong value); // 0x000000018030FBE0
	internal static byte[] GetBytes(float value); // 0x000000018030FC00
	internal static byte[] GetBytes(double value); // 0x000000018030FC40
	private static void UShortFromBytes(void * dst, byte[] src, int startIndex); // 0x00000001803106A0
	private static void UIntFromBytes(void * dst, byte[] src, int startIndex); // 0x00000001803103B0
	private static void ULongFromBytes(void * dst, byte[] src, int startIndex); // 0x0000000180310590
	internal static bool ToBoolean(byte[] value, int startIndex); // 0x0000000180310280
	internal static char ToChar(byte[] value, int startIndex); // 0x00000001803102C0
	internal static short ToInt16(byte[] value, int startIndex); // 0x00000001803102C0
	internal static int ToInt32(byte[] value, int startIndex); // 0x0000000180310320
	internal static long ToInt64(byte[] value, int startIndex); // 0x0000000180310350
	internal static ushort ToUInt16(byte[] value, int startIndex); // 0x00000001803102C0
	internal static uint ToUInt32(byte[] value, int startIndex); // 0x0000000180310320
	internal static ulong ToUInt64(byte[] value, int startIndex); // 0x0000000180310350
	internal static float ToSingle(byte[] value, int startIndex); // 0x0000000180310380
	internal static double ToDouble(byte[] value, int startIndex); // 0x00000001803102F0
}

// Namespace: Mono.Security
internal sealed class PKCS7 // TypeDefIndex: 223
{
	// Constructors
	private PKCS7(); // 0x00000001800E2000

	// Methods
	public static ASN1 Attribute(string oid, ASN1 value); // 0x0000000180248A10
	public static ASN1 AlgorithmIdentifier(string oid); // 0x0000000180248960
	public static ASN1 AlgorithmIdentifier(string oid, ASN1 parameters); // 0x00000001802488C0
	public static ASN1 IssuerAndSerialNumber(X509Certificate x509); // 0x0000000180248AE0
}

// Namespace: 
public class Oid // TypeDefIndex: 224
{
	// Fields
	public const string rsaEncryption = "1.2.840.113549.1.1.1"; // 0x00
	public const string data = "1.2.840.113549.1.7.1"; // 0x00
	public const string signedData = "1.2.840.113549.1.7.2"; // 0x00
	public const string envelopedData = "1.2.840.113549.1.7.3"; // 0x00
	public const string signedAndEnvelopedData = "1.2.840.113549.1.7.4"; // 0x00
	public const string digestedData = "1.2.840.113549.1.7.5"; // 0x00
	public const string encryptedData = "1.2.840.113549.1.7.6"; // 0x20
	public const string contentType = "1.2.840.113549.1.9.3"; // 0x00
	public const string messageDigest = "1.2.840.113549.1.9.4"; // 0x60
	public const string signingTime = "1.2.840.113549.1.9.5"; // 0x00
	public const string countersignature = "1.2.840.113549.1.9.6"; // 0x10

	// Constructors
	public Oid(); // 0x00000001800E2000

}

// Namespace: 
public class ContentInfo // TypeDefIndex: 225
{
	// Fields
	private string contentType; // 0x10
	private ASN1 content; // 0x10

	// Properties
	public ASN1 ASN1 { get; } // 0x000000018023C200 
	public ASN1 Content { get; set; } // 0x00000001800EAEC0 0x00000001800EAEE0
	public string ContentType { get; set; } // 0x00000001800E20D0 0x0000000180114C30

	// Constructors
	public ContentInfo(); // 0x000000018023C1A0
	public ContentInfo(string oid); // 0x000000018023C0C0
	public ContentInfo(byte[] data); // 0x000000018023C130
	public ContentInfo(ASN1 asn1); // 0x000000018023BF30

	// Methods
	internal ASN1 GetASN1(); // 0x000000018023BE60
	public byte[] GetBytes(); // 0x000000018023BF00
}

// Namespace: 
public class EncryptedData // TypeDefIndex: 226
{
	// Fields
	private byte _version; // 0x10
	private ContentInfo _content; // 0x20
	private ContentInfo _encryptionAlgorithm; // 0x10
	private byte[] _encrypted; // 0x20

	// Properties
	public ASN1 ASN1 { get; } // 0x00000001800EA8C0 
	public ContentInfo ContentInfo { get; } // 0x00000001800EAEC0 
	public ContentInfo EncryptionAlgorithm { get; } // 0x00000001800EAEB0 
	public byte[] EncryptedContent { get; } // 0x000000018023C780 
	public byte Version { get; set; } // 0x0000000180113840 0x000000018018FBE0

	// Constructors
	public EncryptedData(); // 0x000000018023C6F0
	public EncryptedData(byte[] data); // 0x000000018023C710
	public EncryptedData(ASN1 asn1); // 0x000000018023C3A0

	// Methods
	internal ASN1 GetASN1(); // 0x00000001800EA8C0
	public byte[] GetBytes(); // 0x000000018023C390
}

// Namespace: 
public class EnvelopedData // TypeDefIndex: 227
{
	// Fields
	private byte _version; // 0x10
	private ContentInfo _content; // 0x20
	private ContentInfo _encryptionAlgorithm; // 0x30
	private ArrayList _recipientInfos; // 0x10
	private byte[] _encrypted; // 0x20

	// Properties
	public ArrayList RecipientInfos { get; } // 0x000000018013BF80 
	public ASN1 ASN1 { get; } // 0x000000018023C800 
	public ContentInfo ContentInfo { get; } // 0x00000001800EAEC0 
	public ContentInfo EncryptionAlgorithm { get; } // 0x00000001800EAEB0 
	public byte[] EncryptedContent { get; } // 0x000000018023CFD0 
	public byte Version { get; set; } // 0x0000000180113840 0x000000018018FBE0

	// Constructors
	public EnvelopedData(); // 0x000000018023CEB0
	public EnvelopedData(byte[] data); // 0x000000018023CE40
	public EnvelopedData(ASN1 asn1); // 0x000000018023C8C0

	// Methods
	internal ASN1 GetASN1(); // 0x000000018023C800
	public byte[] GetBytes(); // 0x000000018023C850
}

// Namespace: 
public class RecipientInfo // TypeDefIndex: 228
{
	// Fields
	private int _version; // 0x10
	private string _oid; // 0x20
	private byte[] _key; // 0x30
	private byte[] _ski; // 0x10
	private string _issuer; // 0x20
	private byte[] _serial; // 0x30

	// Properties
	public string Oid { get; } // 0x00000001800EAEC0 
	public byte[] Key { get; } // 0x000000018024BF60 
	public byte[] SubjectKeyIdentifier { get; } // 0x000000018024C060 
	public string Issuer { get; } // 0x00000001801146E0 
	public byte[] Serial { get; } // 0x000000018024BFE0 
	public int Version { get; } // 0x00000001800ECD10 

	// Constructors
	public RecipientInfo(); // 0x00000001800E2000
	public RecipientInfo(ASN1 data); // 0x000000018024BD40

}

// Namespace: 
public class SignedData // TypeDefIndex: 229
{
	// Fields
	private byte version; // 0x10
	private string hashAlgorithm; // 0x20
	private ContentInfo contentInfo; // 0x30
	private X509CertificateCollection certs; // 0x40
	private ArrayList crls; // 0x00
	private SignerInfo signerInfo; // 0x10
	private bool mda; // 0x20
	private bool signed; // 0x30
	private static Dictionary`2<string, int> <>f__switch$map16; // 0x40

	// Properties
	public ASN1 ASN1 { get; } // 0x000000018024D930 
	public X509CertificateCollection Certificates { get; } // 0x000000018013BF80 
	public ContentInfo ContentInfo { get; } // 0x00000001800EAEB0 
	public ArrayList Crls { get; } // 0x00000001801146E0 
	public string HashName { get; set; } // 0x00000001800EAEC0 0x000000018024D940
	public SignerInfo SignerInfo { get; } // 0x0000000180119440 
	public byte Version { get; set; } // 0x0000000180113840 0x000000018018FBE0
	public bool UseAuthenticatedAttributes { get; set; } // 0x0000000180221890 0x00000001802219F0

	// Constructors
	public SignedData(); // 0x000000018024D830
	public SignedData(byte[] data); // 0x000000018024D7C0
	public SignedData(ASN1 asn1); // 0x000000018024D030

	// Methods
	public bool VerifySignature(AsymmetricAlgorithm aa); // 0x000000018024CC40
	internal string OidToName(string oid); // 0x000000018024CA10
	internal ASN1 GetASN1(); // 0x000000018024C0E0
	public byte[] GetBytes(); // 0x000000018024C9E0
}

// Namespace: 
public class SignerInfo // TypeDefIndex: 230
{
	// Fields
	private byte version; // 0x10
	private X509Certificate x509; // 0x20
	private string hashAlgorithm; // 0x30
	private AsymmetricAlgorithm key; // 0x40
	private ArrayList authenticatedAttributes; // 0x50
	private ArrayList unauthenticatedAttributes; // 0x10
	private byte[] signature; // 0x20
	private string issuer; // 0x00
	private byte[] serial; // 0x10
	private byte[] ski; // 0x20

	// Properties
	public string IssuerName { get; } // 0x0000000180113E60 
	public byte[] SerialNumber { get; } // 0x000000018024E720 
	public byte[] SubjectKeyIdentifier { get; } // 0x000000018024E820 
	public ASN1 ASN1 { get; } // 0x000000018024E710 
	public ArrayList AuthenticatedAttributes { get; } // 0x00000001801146E0 
	public X509Certificate Certificate { get; set; } // 0x00000001800EAEC0 0x00000001800EAEE0
	public string HashName { get; set; } // 0x00000001800EAEB0 0x00000001800EAED0
	public AsymmetricAlgorithm Key { get; set; } // 0x000000018013BF80 0x000000018015B760
	public byte[] Signature { get; set; } // 0x000000018024E7A0 0x000000018024E8A0
	public ArrayList UnauthenticatedAttributes { get; } // 0x0000000180119440 
	public byte Version { get; set; } // 0x0000000180113840 0x000000018018FBE0

	// Constructors
	public SignerInfo(); // 0x000000018024E690
	public SignerInfo(byte[] data); // 0x000000018024E210
	public SignerInfo(ASN1 asn1); // 0x000000018024E280

	// Methods
	internal ASN1 GetASN1(); // 0x000000018024D970
	public byte[] GetBytes(); // 0x000000018024E1E0
}

// Namespace: Mono.Security
internal sealed class StrongName // TypeDefIndex: 231
{
	// Fields
	private RSA rsa; // 0x10
	private byte[] publicKey; // 0x20
	private byte[] keyToken; // 0x00
	private string tokenAlgorithm; // 0x10
	private static object lockObject; // 0x20
	private static bool initialized; // 0x28

	// Properties
	public bool CanSign { get; } // 0x0000000180251450 
	public RSA RSA { get; set; } // 0x0000000180251BE0 0x0000000180251C60
	public byte[] PublicKey { get; } // 0x0000000180251730 
	public byte[] PublicKeyToken { get; } // 0x00000001802515C0 
	public string TokenAlgorithm { get; set; } // 0x0000000180251C10 0x0000000180251C70

	// Constructors
	public StrongName(); // 0x00000001800E2000
	public StrongName(int keySize); // 0x00000001802511E0
	public StrongName(byte[] data); // 0x0000000180251250
	public StrongName(RSA rsa); // 0x00000001802513C0
	private static StrongName(); // 0x0000000180251170

	// Methods
	private void InvalidateCache(); // 0x000000018024FF30
	public byte[] GetBytes(); // 0x000000018024FE90
	private uint RVAtoPosition(uint r, int sections, byte[] headers); // 0x0000000180250300
	internal StrongNameSignature StrongHash(Stream stream, StrongNameOptions options); // 0x00000001802506D0
	public byte[] Hash(string fileName); // 0x000000018024FEC0
	public bool Sign(string fileName); // 0x00000001802503B0
	public bool Verify(string fileName); // 0x0000000180250E60
	public bool Verify(Stream stream); // 0x0000000180250F70
	public static bool IsAssemblyStrongnamed(string assemblyName); // 0x000000018024FF40
	public static bool VerifySignature(byte[] publicKey, int algorithm, byte[] hash, byte[] signature); // 0x0000000180250DB0
	private static bool Verify(RSA rsa, AssemblyHashAlgorithm algorithm, byte[] hash, byte[] signature); // 0x0000000180251090
}

// Namespace: 
internal class StrongNameSignature // TypeDefIndex: 232
{
	// Fields
	private byte[] hash; // 0x10
	private byte[] signature; // 0x20
	private uint signaturePosition; // 0x28
	private uint signatureLength; // 0x30
	private uint metadataPosition; // 0x10
	private uint metadataLength; // 0x00
	private byte cliFlag; // 0x00
	private uint cliFlagPosition; // 0x10

	// Properties
	public byte[] Hash { get; set; } // 0x00000001800E20D0 0x0000000180114C30
	public byte[] Signature { get; set; } // 0x00000001800EAEC0 0x00000001800EAEE0
	public uint MetadataPosition { get; set; } // 0x0000000180119420 0x00000001801CAD10
	public uint MetadataLength { get; set; } // 0x0000000180118700 0x000000018024FE70
	public uint SignaturePosition { get; set; } // 0x00000001800E2F70 0x000000018018FC20
	public uint SignatureLength { get; set; } // 0x0000000180143130 0x000000018024FE80
	public byte CliFlag { get; set; } // 0x000000018013BF70 0x000000018024FE60
	public uint CliFlagPosition { get; set; } // 0x0000000180119430 0x0000000180248640

	// Constructors
	public StrongNameSignature(); // 0x00000001800E2000

}

// Namespace: 
internal enum StrongNameOptions // TypeDefIndex: 233
{
	Metadata = 0,
	Signature = 1
}

// Namespace: Mono.Security
internal class StrongNameManager // TypeDefIndex: 234
{
	// Fields
	private static Hashtable mappings; // 0x00
	private static Hashtable tokens; // 0x10

	// Constructors
	public StrongNameManager(); // 0x00000001800E2000
	private static StrongNameManager(); // 0x00000001800EA7B0

	// Methods
	public static void LoadConfig(string filename); // 0x000000018024EA10
	private static void LoadMapping(SecurityElement mapping); // 0x000000018024ECD0
	private static void LoadVerificationSettings(SecurityElement settings); // 0x000000018024F150
	public static byte[] GetMappedPublicKey(byte[] token); // 0x000000018024E920
	public static bool MustVerify(AssemblyName an); // 0x000000018024F770
	public override string ToString(); // 0x000000018024F950
}

// Namespace: 
private class Element // TypeDefIndex: 235
{
	// Fields
	internal Hashtable assemblies; // 0x10

	// Constructors
	public Element(); // 0x000000018023C330
	public Element(string assembly, string users); // 0x000000018023C290

	// Methods
	public string GetUsers(string assembly); // 0x000000018023C210
}

// Namespace: Mono.Security
internal enum UriPartial // TypeDefIndex: 236
{
	Scheme = 0,
	Authority = 1,
	Path = 2
}

// Namespace: Mono.Security
internal class Uri // TypeDefIndex: 237
{
	// Fields
	private bool isUnixFilePath; // 0x10
	private string source; // 0x20
	private string scheme; // 0x30
	private string host; // 0x40
	private int port; // 0x50
	private string path; // 0x59
	private string query; // 0x68
	private string fragment; // 0x78
	private string userinfo; // 0x88
	private bool isUnc; // 0x00
	private bool isOpaquePart; // 0x10
	private string[] segments; // 0x20
	private bool userEscaped; // 0x30
	private string cachedAbsoluteUri; // 0x40
	private string cachedToString; // 0x50
	private string cachedLocalPath; // 0x10
	private int cachedHashCode; // 0x20
	private bool reduce; // 0x68
	private static readonly string hexUpperChars; // 0x78
	public static readonly string SchemeDelimiter; // 0x10
	public static readonly string UriSchemeFile; // 0x20
	public static readonly string UriSchemeFtp; // 0x30
	public static readonly string UriSchemeGopher; // 0x40
	public static readonly string UriSchemeHttp; // 0x50
	public static readonly string UriSchemeHttps; // 0x5C
	public static readonly string UriSchemeMailto; // 0x00
	public static readonly string UriSchemeNews; // 0x10
	public static readonly string UriSchemeNntp; // 0x60
	private static UriScheme[] schemes; // 0x00
	private static Dictionary`2<string, int> <>f__switch$map17; // 0x10

	// Properties
	public string AbsolutePath { get; } // 0x0000000180119440 
	public string AbsoluteUri { get; } // 0x0000000180258D40 
	public string Authority { get; } // 0x0000000180258DE0 
	public string Fragment { get; } // 0x0000000180113E60 
	public string Host { get; } // 0x000000018013BF80 
	public bool IsDefaultPort { get; } // 0x0000000180258EB0 
	public bool IsFile { get; } // 0x0000000180258F20 
	public bool IsLoopback { get; } // 0x0000000180258FC0 
	public bool IsUnc { get; } // 0x00000001800E3550 
	public string LocalPath { get; } // 0x00000001802590C0 
	public string PathAndQuery { get; } // 0x0000000180259410 
	public int Port { get; } // 0x0000000180124660 
	public string Query { get; } // 0x0000000180114BB0 
	public string Scheme { get; } // 0x00000001800EAEB0 
	public string[] Segments { get; } // 0x0000000180259480 
	public bool UserEscaped { get; } // 0x0000000180196C90 
	public string UserInfo { get; } // 0x00000001801513A0 

	// Constructors
	public Uri(string uriString); // 0x0000000180258B10
	public Uri(string uriString, bool dontEscape); // 0x0000000180258C30
	public Uri(string uriString, bool dontEscape, bool reduce); // 0x00000001802589E0
	public Uri(Uri baseUri, string relativeUri); // 0x0000000180258C10
	public Uri(Uri baseUri, string relativeUri, bool dontEscape); // 0x0000000180258190
	private static Uri(); // 0x0000000180257D50

	// Methods
	internal static bool IsIPv4Address(string name); // 0x0000000180255AA0
	internal static bool IsDomainAddress(string name); // 0x00000001802557B0
	public static bool CheckSchemeName(string schemeName); // 0x0000000180253D80
	public override bool Equals(object comparant); // 0x0000000180253EA0
	public override int GetHashCode(); // 0x00000001802548E0
	public string GetLeftPart(UriPartial part); // 0x00000001802549A0
	public static int FromHex(char digit); // 0x00000001802546B0
	public static string HexEscape(char character); // 0x00000001802552D0
	public static char HexUnescape(string pattern, int index); // 0x0000000180255430
	public static bool IsHexDigit(char digit); // 0x0000000180255920
	public static bool IsHexEncoding(string pattern, int index); // 0x0000000180255950
	public string MakeRelative(Uri toUri); // 0x0000000180255E20
	public override string ToString(); // 0x0000000180257A40
	protected void Escape(); // 0x00000001802545F0
	protected static string EscapeString(string str); // 0x0000000180254260
	internal static string EscapeString(string str, bool escapeReserved, bool escapeHex, bool escapeBrackets); // 0x00000001802542D0
	protected void Parse(); // 0x0000000180257570
	protected string Unescape(string str); // 0x0000000180257BB0
	internal string Unescape(string str, bool excludeSharp); // 0x0000000180257BC0
	private void ParseAsWindowsUNC(string uriString); // 0x0000000180256480
	private void ParseAsWindowsAbsoluteFilePath(string uriString); // 0x0000000180256310
	private void ParseAsUnixAbsoluteFilePath(string uriString); // 0x0000000180256140
	private void Parse(string uriString); // 0x0000000180256650
	private static string Reduce(string path); // 0x0000000180257660
	internal static string GetSchemeDelimiter(string scheme); // 0x0000000180255110
	internal static int GetDefaultPort(string scheme); // 0x0000000180254740
	private string GetOpaqueWiseSchemeDelimiter(); // 0x0000000180254EF0
	protected bool IsBadFileSystemCharacter(char ch); // 0x0000000180255730
	protected static bool IsExcludedCharacter(char ch); // 0x00000001802558E0
	private static bool IsPredefinedScheme(string scheme); // 0x0000000180255BF0
	protected bool IsReservedCharacter(char ch); // 0x0000000180255E00
}

// Namespace: 
private struct UriScheme // TypeDefIndex: 238
{
	// Fields
	public string scheme; // 0x10
	public string delimiter; // 0x20
	public int defaultPort; // 0x68

	// Constructors
	public UriScheme(string s, string d, int p); // 0x0000000180019B10

}

// Namespace: Mono.Xml
internal class SecurityParser : SmallXmlParser, IContentHandler // TypeDefIndex: 239
{
	// Fields
	private SecurityElement root; // 0x68
	private SecurityElement current; // 0x78
	private Stack stack; // 0x10

	// Constructors
	public SecurityParser(); // 0x000000018019E630

	// Methods
	public void LoadXml(string xml); // 0x000000018019E270
	public SecurityElement ToXml(); // 0x00000001801136C0
	public void OnStartParsing(SmallXmlParser parser); // 0x00000001800EA7B0
	public void OnProcessingInstruction(string name, string text); // 0x00000001800EA7B0
	public void OnIgnorableWhitespace(string s); // 0x00000001800EA7B0
	public void OnStartElement(string name, IAttrList attrs); // 0x000000018019E410
	public void OnEndElement(string name); // 0x000000018019E390
	public void OnChars(string ch); // 0x000000018019E310
	public void OnEndParsing(SmallXmlParser parser); // 0x00000001800EA7B0
}

// Namespace: Mono.Xml
internal class DefaultHandler : IContentHandler // TypeDefIndex: 240
{
	// Constructors
	public DefaultHandler(); // 0x00000001800E2000

	// Methods
	public void OnStartParsing(SmallXmlParser parser); // 0x00000001800EA7B0
	public void OnEndParsing(SmallXmlParser parser); // 0x00000001800EA7B0
	public void OnStartElement(string name, IAttrList attrs); // 0x00000001800EA7B0
	public void OnEndElement(string name); // 0x00000001800EA7B0
	public void OnChars(string s); // 0x00000001800EA7B0
	public void OnIgnorableWhitespace(string s); // 0x00000001800EA7B0
	public void OnProcessingInstruction(string name, string text); // 0x00000001800EA7B0
}

// Namespace: Mono.Xml
internal class SmallXmlParser // TypeDefIndex: 241
{
	// Fields
	private IContentHandler handler; // 0x10
	private TextReader reader; // 0x20
	private Stack elementNames; // 0x30
	private Stack xmlSpaces; // 0x40
	private string xmlSpace; // 0x50
	private StringBuilder buffer; // 0x5C
	private char[] nameBuffer; // 0x00
	private bool isWhitespace; // 0x10
	private AttrListImpl attributes; // 0x60
	private int line; // 0x00
	private int column; // 0x10
	private bool resetColumn; // 0x10
	private static Dictionary`2<string, int> <>f__switch$map18; // 0x20

	// Constructors
	public SmallXmlParser(); // 0x00000001801A0BE0

	// Methods
	private Exception Error(string msg); // 0x000000018019E9B0
	private Exception UnexpectedEndError(); // 0x00000001801A0B00
	private bool IsNameChar(char c, bool start); // 0x000000018019EDA0
	private bool IsWhitespace(int c); // 0x000000018019EEB0
	public void SkipWhitespaces(); // 0x00000001801A0AF0
	private void HandleWhitespaces(); // 0x000000018019EC90
	public void SkipWhitespaces(bool expected); // 0x00000001801A09F0
	private int Peek(); // 0x000000018019F100
	private int Read(); // 0x00000001801A0990
	public void Expect(int c); // 0x000000018019EAB0
	private string ReadUntil(char until, bool handleReferences); // 0x00000001801A0840
	public string ReadName(); // 0x00000001801A0380
	public void Parse(TextReader input, IContentHandler handler); // 0x000000018019EEE0
	private void Cleanup(); // 0x000000018019E8E0
	public void ReadContent(); // 0x000000018019F8C0
	private void HandleBufferedContent(); // 0x000000018019EBF0
	private void ReadCharacters(); // 0x000000018019F650
	private void ReadReference(); // 0x00000001801A0570
	private int ReadCharacterReference(); // 0x000000018019F4A0
	private void ReadAttribute(AttrListImpl a); // 0x000000018019F130
	private void ReadCDATASection(); // 0x000000018019F320
	private void ReadComment(); // 0x000000018019F770
}

// Namespace: 
public interface IContentHandler // TypeDefIndex: 242
{
	// Methods
	void OnStartParsing(SmallXmlParser parser);
	void OnEndParsing(SmallXmlParser parser);
	void OnStartElement(string name, IAttrList attrs);
	void OnEndElement(string name);
	void OnProcessingInstruction(string name, string text);
	void OnChars(string text);
	void OnIgnorableWhitespace(string text);
}

// Namespace: 
public interface IAttrList // TypeDefIndex: 243
{
	// Properties
	int Length { get; }
	bool IsEmpty { get; }
	string[] Names { get; }
	string[] Values { get; }

	// Methods
	string GetName(int i);
	string GetValue(int i);
	string GetValue(string name);
}

// Namespace: 
private class AttrListImpl : IAttrList // TypeDefIndex: 244
{
	// Fields
	private ArrayList attrNames; // 0x10
	private ArrayList attrValues; // 0x60

	// Properties
	public int Length { get; } // 0x000000018015AE50 
	public bool IsEmpty { get; } // 0x000000018019CD80 
	public string[] Names { get; } // 0x000000018019CDB0 
	public string[] Values { get; } // 0x000000018019CE70 

	// Constructors
	public AttrListImpl(); // 0x000000018019CD00

	// Methods
	public string GetName(int i); // 0x000000018019CAA0
	public string GetValue(int i); // 0x000000018019CC80
	public string GetValue(string name); // 0x000000018019CB20
	internal void Clear(); // 0x000000018019CA50
	internal void Add(string name, string value); // 0x000000018019C9F0
}

// Namespace: Mono.Xml
internal class SmallXmlParserException : SystemException // TypeDefIndex: 245
{
	// Fields
	private int line; // 0x60
	private int column; // 0x00

	// Properties
	public int Line { get; } // 0x000000018019E8D0 
	public int Column { get; } // 0x0000000180196DD0 

	// Constructors
	public SmallXmlParserException(string msg, int line, int column); // 0x000000018019E800

}

// Namespace: Mono
internal abstract class DataConverter // TypeDefIndex: 246
{
	// Fields
	private static DataConverter SwapConv; // 0x00
	private static DataConverter CopyConv; // 0x10
	public static readonly bool IsLittleEndian; // 0x10

	// Properties
	public static DataConverter LittleEndian { get; } // 0x00000001802C2760 
	public static DataConverter BigEndian { get; } // 0x00000001802C26A0 
	public static DataConverter Native { get; } // 0x00000001802C2820 

	// Constructors
	protected DataConverter(); // 0x00000001800E2000
	private static DataConverter(); // 0x00000001802C2560

	// Methods
	public abstract double GetDouble(byte[] data, int index);
	public abstract float GetFloat(byte[] data, int index);
	public abstract long GetInt64(byte[] data, int index);
	public abstract int GetInt32(byte[] data, int index);
	public abstract short GetInt16(byte[] data, int index);
	public abstract uint GetUInt32(byte[] data, int index);
	public abstract ushort GetUInt16(byte[] data, int index);
	public abstract ulong GetUInt64(byte[] data, int index);
	public abstract void PutBytes(byte[] dest, int destIdx, double value);
	public abstract void PutBytes(byte[] dest, int destIdx, float value);
	public abstract void PutBytes(byte[] dest, int destIdx, int value);
	public abstract void PutBytes(byte[] dest, int destIdx, long value);
	public abstract void PutBytes(byte[] dest, int destIdx, short value);
	public abstract void PutBytes(byte[] dest, int destIdx, ushort value);
	public abstract void PutBytes(byte[] dest, int destIdx, uint value);
	public abstract void PutBytes(byte[] dest, int destIdx, ulong value);
	public byte[] GetBytes(double value); // 0x00000001802C02B0
	public byte[] GetBytes(float value); // 0x00000001802BFFB0
	public byte[] GetBytes(int value); // 0x00000001802C01B0
	public byte[] GetBytes(long value); // 0x00000001802C0030
	public byte[] GetBytes(short value); // 0x00000001802C0230
	public byte[] GetBytes(ushort value); // 0x00000001802BFF30
	public byte[] GetBytes(uint value); // 0x00000001802C0130
	public byte[] GetBytes(ulong value); // 0x00000001802C00B0
	private static int Align(int current, int align); // 0x00000001802BFE50
	public static byte[] Pack(string description, object[] args); // 0x00000001802C1160
	public static byte[] PackEnumerable(string description, IEnumerable args); // 0x00000001802C0330
	private static bool PackOne(PackContext b, object oarg); // 0x00000001802C0510
	private static bool Prepare(byte[] buffer, int idx, int size, bool align); // 0x00000001802C12E0
	public static IList Unpack(string description, byte[] buffer, int startIndex); // 0x00000001802C13A0
	internal void Check(byte[] dest, int destIdx, int size); // 0x00000001802BFE70
}

// Namespace: 
private class PackContext // TypeDefIndex: 247
{
	// Fields
	public byte[] buffer; // 0x10
	private int next; // 0x20
	public string description; // 0x30
	public int i; // 0x3C
	public DataConverter conv; // 0x10
	public int repeat; // 0x00
	public int align; // 0x18

	// Constructors
	public PackContext(); // 0x00000001800E2000

	// Methods
	public void Add(byte[] group); // 0x00000001802CBD00
	public byte[] Get(); // 0x00000001802CBEA0
}

// Namespace: 
private class CopyConverter : DataConverter // TypeDefIndex: 248
{
	// Constructors
	public CopyConverter(); // 0x00000001802BFD20

	// Methods
	public override double GetDouble(byte[] data, int index); // 0x00000001802BF170
	public override ulong GetUInt64(byte[] data, int index); // 0x00000001802BF9C0
	public override long GetInt64(byte[] data, int index); // 0x00000001802BF630
	public override float GetFloat(byte[] data, int index); // 0x00000001802BF2A0
	public override int GetInt32(byte[] data, int index); // 0x00000001802BF500
	public override uint GetUInt32(byte[] data, int index); // 0x00000001802BF890
	public override short GetInt16(byte[] data, int index); // 0x00000001802BF3D0
	public override ushort GetUInt16(byte[] data, int index); // 0x00000001802BF760
	public override void PutBytes(byte[] dest, int destIdx, double value); // 0x00000001802BFAF0
	public override void PutBytes(byte[] dest, int destIdx, float value); // 0x00000001802BFCB0
	public override void PutBytes(byte[] dest, int destIdx, int value); // 0x00000001802BFC40
	public override void PutBytes(byte[] dest, int destIdx, uint value); // 0x00000001802BFC40
	public override void PutBytes(byte[] dest, int destIdx, long value); // 0x00000001802BFB60
	public override void PutBytes(byte[] dest, int destIdx, ulong value); // 0x00000001802BFB60
	public override void PutBytes(byte[] dest, int destIdx, short value); // 0x00000001802BFBD0
	public override void PutBytes(byte[] dest, int destIdx, ushort value); // 0x00000001802BFBD0
}

// Namespace: 
private class SwapConverter : DataConverter // TypeDefIndex: 249
{
	// Constructors
	public SwapConverter(); // 0x00000001802D7D70

	// Methods
	public override double GetDouble(byte[] data, int index); // 0x00000001802D7020
	public override ulong GetUInt64(byte[] data, int index); // 0x00000001802D7890
	public override long GetInt64(byte[] data, int index); // 0x00000001802D7500
	public override float GetFloat(byte[] data, int index); // 0x00000001802D7160
	public override int GetInt32(byte[] data, int index); // 0x00000001802D73D0
	public override uint GetUInt32(byte[] data, int index); // 0x00000001802D7760
	public override short GetInt16(byte[] data, int index); // 0x00000001802D72A0
	public override ushort GetUInt16(byte[] data, int index); // 0x00000001802D7630
	public override void PutBytes(byte[] dest, int destIdx, double value); // 0x00000001802D7B00
	public override void PutBytes(byte[] dest, int destIdx, float value); // 0x00000001802D7CE0
	public override void PutBytes(byte[] dest, int destIdx, int value); // 0x00000001802D7BB0
	public override void PutBytes(byte[] dest, int destIdx, uint value); // 0x00000001802D7BB0
	public override void PutBytes(byte[] dest, int destIdx, long value); // 0x00000001802D79C0
	public override void PutBytes(byte[] dest, int destIdx, ulong value); // 0x00000001802D7C50
	public override void PutBytes(byte[] dest, int destIdx, short value); // 0x00000001802D7A80
	public override void PutBytes(byte[] dest, int destIdx, ushort value); // 0x00000001802D7A80
}

// Namespace: Mono
internal class Runtime // TypeDefIndex: 250
{
	// Constructors
	public Runtime(); // 0x00000001800E2000

	// Methods
	private static void mono_runtime_install_handlers(); // 0x000000018031FD40
	internal static void InstallSignalHandlers(); // 0x000000018031FD40
	internal static string GetDisplayName(); // 0x000000018031FD30
}

// Namespace: System.Collections.Generic
internal sealed class CollectionDebuggerView`1 // TypeDefIndex: 251
{
	// Fields
	private readonly ICollection`1<T> c; // 0x00

	// Properties
	public T[] Items { get; }

	// Constructors
	public CollectionDebuggerView`1(ICollection`1<T> col);

}

// Namespace: System.Collections.Generic
internal sealed class CollectionDebuggerView`2 // TypeDefIndex: 252
{
	// Fields
	private readonly ICollection`1<KeyValuePair`2<T, T>> c; // 0x00

	// Properties
	public KeyValuePair`2<T, T>[] Items { get; }

	// Constructors
	public CollectionDebuggerView`2(ICollection`1<KeyValuePair`2<T, T>> col);

}

// Namespace: System.Collections.Generic
[Serializable]
public abstract class Comparer`1 : IComparer`1<T>, IComparer // TypeDefIndex: 253
{
	// Fields
	private static readonly Comparer`1<T> _default; // 0x00

	// Properties
	public static Comparer`1<T> Default { get; }

	// Constructors
	protected Comparer`1();
	private static Comparer`1();

	// Methods
	private int System.Collections.IComparer.Compare(object x, object y);
	public abstract int Compare(T x, T y);
}

// Namespace: 
private sealed class DefaultComparer : Comparer`1<T> // TypeDefIndex: 254
{
	// Constructors
	public DefaultComparer();

	// Methods
	public override int Compare(T x, T y);
}

// Namespace: System.Collections.Generic
[Serializable]
internal sealed class GenericComparer`1 : Comparer`1<T> // TypeDefIndex: 255
{
	// Constructors
	public GenericComparer`1();

	// Methods
	public override int Compare(T x, T y);
}

// Namespace: System.Collections.Generic
internal struct Link // TypeDefIndex: 256
{
	// Fields
	public int HashCode; // 0x10
	public int Next; // 0x00

}

// Namespace: System.Collections.Generic
[Serializable]
public class Dictionary`2 : IEnumerable, ISerializable, ICollection, ICollection`1<KeyValuePair`2<T, T>>, IEnumerable`1<KeyValuePair`2<T, T>>, IDictionary`2<T, T>, IDictionary, IDeserializationCallback // TypeDefIndex: 257
{
	// Fields
	private const int INITIAL_SIZE = 10; // 0x00
	private const float DEFAULT_LOAD_FACTOR = 0.9; // 0x00
	private const int NO_SLOT = -1; // 0x00
	private const int HASH_FLAG = -2147483648; // 0x00
	private int[] table; // 0x00
	private Link[] linkSlots; // 0x00
	private T[] keySlots; // 0x00
	private T[] valueSlots; // 0x00
	private int touchedSlots; // 0x00
	private int emptySlot; // 0x00
	private int count; // 0x00
	private int threshold; // 0x10
	private IEqualityComparer`1<T> hcp; // 0x02
	private SerializationInfo serialization_info; // 0x00
	private int generation; // 0x00
	private static Transform`1<T, T, DictionaryEntry> <>f__am$cacheB; // 0x00

	// Properties
	private ICollection`1<T> System.Collections.Generic.IDictionary<TKey,TValue>.Keys { get; }
	private ICollection`1<T> System.Collections.Generic.IDictionary<TKey,TValue>.Values { get; }
	private ICollection System.Collections.IDictionary.Keys { get; }
	private ICollection System.Collections.IDictionary.Values { get; }
	private bool System.Collections.IDictionary.IsFixedSize { get; }
	private bool System.Collections.IDictionary.IsReadOnly { get; }
	private object System.Collections.IDictionary.Item { get; set; }
	private bool System.Collections.ICollection.IsSynchronized { get; }
	private object System.Collections.ICollection.SyncRoot { get; }
	private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get; }
	public int Count { get; }
	public T Item { get; set; }
	public IEqualityComparer`1<T> Comparer { get; }
	public KeyCollection<T, T> Keys { get; }
	public ValueCollection<T, T> Values { get; }

	// Constructors
	public Dictionary`2();
	public Dictionary`2(IEqualityComparer`1<T> comparer);
	public Dictionary`2(IDictionary`2<T, T> dictionary);
	public Dictionary`2(int capacity);
	public Dictionary`2(IDictionary`2<T, T> dictionary, IEqualityComparer`1<T> comparer);
	public Dictionary`2(int capacity, IEqualityComparer`1<T> comparer);
	protected Dictionary`2(SerializationInfo info, StreamingContext context);

	// Methods
	private void System.Collections.IDictionary.Add(object key, object value);
	private bool System.Collections.IDictionary.Contains(object key);
	private void System.Collections.IDictionary.Remove(object key);
	private void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair`2<T, T> keyValuePair);
	private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair`2<T, T> keyValuePair);
	private void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair`2<T, T>[] array, int index);
	private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair`2<T, T> keyValuePair);
	private void System.Collections.ICollection.CopyTo(Array array, int index);
	private IEnumerator System.Collections.IEnumerable.GetEnumerator();
	private IEnumerator`1<KeyValuePair`2<T, T>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator();
	private IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
	private void Init(int capacity, IEqualityComparer`1<T> hcp);
	private void InitArrays(int size);
	private void CopyToCheck(Array array, int index);
	private void Do_CopyTo(T[] array, int index, Transform`1<T, T, T> transform);
	private static KeyValuePair`2<T, T> make_pair(T key, T value);
	private static T pick_key(T key, T value);
	private static T pick_value(T key, T value);
	private void CopyTo(KeyValuePair`2<T, T>[] array, int index);
	private void Do_ICollectionCopyTo(Array array, int index, Transform`1<T, T, T> transform);
	private void Resize();
	public void Add(T key, T value);
	public void Clear();
	public bool ContainsKey(T key);
	public bool ContainsValue(T value);
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
	public virtual void OnDeserialization(object sender);
	public bool Remove(T key);
	public bool TryGetValue(T key, out T value);
	private T ToTKey(object key);
	private T ToTValue(object value);
	private bool ContainsKeyValuePair(KeyValuePair`2<T, T> pair);
	public Enumerator<T, T> GetEnumerator();
	private static DictionaryEntry <CopyTo>m__0(T key, T value);
}

// Namespace: 
[Serializable]
private class ShimEnumerator : IEnumerator, IDictionaryEnumerator // TypeDefIndex: 258
{
	// Fields
	private Enumerator<T, T> host_enumerator; // 0x00

	// Properties
	public DictionaryEntry Entry { get; }
	public object Key { get; }
	public object Value { get; }
	public object Current { get; }

	// Constructors
	public ShimEnumerator(Dictionary`2<T, T> host);

	// Methods
	public void Dispose();
	public bool MoveNext();
	public void Reset();
}

// Namespace: 
[Serializable]
public struct Enumerator : IEnumerator, IDisposable, IEnumerator`1<KeyValuePair`2<T, T>>, IDictionaryEnumerator // TypeDefIndex: 259
{
	// Fields
	private Dictionary`2<T, T> dictionary; // 0x00
	private int next; // 0x00
	private int stamp; // 0x00
	internal KeyValuePair`2<T, T> current; // 0x00

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	private DictionaryEntry System.Collections.IDictionaryEnumerator.Entry { get; }
	private object System.Collections.IDictionaryEnumerator.Key { get; }
	private object System.Collections.IDictionaryEnumerator.Value { get; }
	public KeyValuePair`2<T, T> Current { get; }
	internal T CurrentKey { get; }
	internal T CurrentValue { get; }

	// Constructors
	internal Enumerator(Dictionary`2<T, T> dictionary);

	// Methods
	private void System.Collections.IEnumerator.Reset();
	public bool MoveNext();
	internal void Reset();
	private void VerifyState();
	private void VerifyCurrent();
	public void Dispose();
}

// Namespace: 
[Serializable]
public sealed class KeyCollection : IEnumerable, ICollection, ICollection`1<T>, IEnumerable`1<T> // TypeDefIndex: 260
{
	// Fields
	private Dictionary`2<T, T> dictionary; // 0x00

	// Properties
	private bool System.Collections.Generic.ICollection<TKey>.IsReadOnly { get; }
	private bool System.Collections.ICollection.IsSynchronized { get; }
	private object System.Collections.ICollection.SyncRoot { get; }
	public int Count { get; }

	// Constructors
	public KeyCollection(Dictionary`2<T, T> dictionary);

	// Methods
	private void System.Collections.Generic.ICollection<TKey>.Add(T item);
	private void System.Collections.Generic.ICollection<TKey>.Clear();
	private bool System.Collections.Generic.ICollection<TKey>.Contains(T item);
	private bool System.Collections.Generic.ICollection<TKey>.Remove(T item);
	private IEnumerator`1<T> System.Collections.Generic.IEnumerable<TKey>.GetEnumerator();
	private void System.Collections.ICollection.CopyTo(Array array, int index);
	private IEnumerator System.Collections.IEnumerable.GetEnumerator();
	public void CopyTo(T[] array, int index);
	public Enumerator<T, T> GetEnumerator();
}

// Namespace: 
[Serializable]
public struct Enumerator : IEnumerator, IDisposable, IEnumerator`1<T> // TypeDefIndex: 261
{
	// Fields
	private Enumerator<T, T> host_enumerator; // 0x00

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	public T Current { get; }

	// Constructors
	internal Enumerator(Dictionary`2<T, T> host);

	// Methods
	private void System.Collections.IEnumerator.Reset();
	public void Dispose();
	public bool MoveNext();
}

// Namespace: 
[Serializable]
public sealed class ValueCollection : IEnumerable, ICollection, ICollection`1<T>, IEnumerable`1<T> // TypeDefIndex: 262
{
	// Fields
	private Dictionary`2<T, T> dictionary; // 0x00

	// Properties
	private bool System.Collections.Generic.ICollection<TValue>.IsReadOnly { get; }
	private bool System.Collections.ICollection.IsSynchronized { get; }
	private object System.Collections.ICollection.SyncRoot { get; }
	public int Count { get; }

	// Constructors
	public ValueCollection(Dictionary`2<T, T> dictionary);

	// Methods
	private void System.Collections.Generic.ICollection<TValue>.Add(T item);
	private void System.Collections.Generic.ICollection<TValue>.Clear();
	private bool System.Collections.Generic.ICollection<TValue>.Contains(T item);
	private bool System.Collections.Generic.ICollection<TValue>.Remove(T item);
	private IEnumerator`1<T> System.Collections.Generic.IEnumerable<TValue>.GetEnumerator();
	private void System.Collections.ICollection.CopyTo(Array array, int index);
	private IEnumerator System.Collections.IEnumerable.GetEnumerator();
	public void CopyTo(T[] array, int index);
	public Enumerator<T, T> GetEnumerator();
}

// Namespace: 
[Serializable]
public struct Enumerator : IEnumerator, IDisposable, IEnumerator`1<T> // TypeDefIndex: 263
{
	// Fields
	private Enumerator<T, T> host_enumerator; // 0x00

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	public T Current { get; }

	// Constructors
	internal Enumerator(Dictionary`2<T, T> host);

	// Methods
	private void System.Collections.IEnumerator.Reset();
	public void Dispose();
	public bool MoveNext();
}

// Namespace: 
private delegate T Transform`1(T key, T value); // TypeDefIndex: 264; 0x0000000000000000

// Namespace: System.Collections.Generic
[Serializable]
public abstract class EqualityComparer`1 : IEqualityComparer`1<T>, IEqualityComparer // TypeDefIndex: 265
{
	// Fields
	private static readonly EqualityComparer`1<T> _default; // 0x00

	// Properties
	public static EqualityComparer`1<T> Default { get; }

	// Constructors
	protected EqualityComparer`1();
	private static EqualityComparer`1();

	// Methods
	private int System.Collections.IEqualityComparer.GetHashCode(object obj);
	private bool System.Collections.IEqualityComparer.Equals(object x, object y);
	public abstract int GetHashCode(T obj);
	public abstract bool Equals(T x, T y);
}

// Namespace: 
[Serializable]
private sealed class DefaultComparer : EqualityComparer`1<T> // TypeDefIndex: 266
{
	// Constructors
	public DefaultComparer();

	// Methods
	public override int GetHashCode(T obj);
	public override bool Equals(T x, T y);
}

// Namespace: System.Collections.Generic
[Serializable]
internal sealed class GenericEqualityComparer`1 : EqualityComparer`1<T> // TypeDefIndex: 267
{
	// Constructors
	public GenericEqualityComparer`1();

	// Methods
	public override int GetHashCode(T obj);
	public override bool Equals(T x, T y);
}

// Namespace: System.Collections.Generic
public interface IComparer`1 // TypeDefIndex: 268
{
	// Methods
	int Compare(T x, T y);
}

// Namespace: System.Collections.Generic
public interface IDictionary`2 : IEnumerable, ICollection`1<KeyValuePair`2<T, T>>, IEnumerable`1<KeyValuePair`2<T, T>> // TypeDefIndex: 269
{
	// Properties
	T Item { get; set; }
	ICollection`1<T> Keys { get; }
	ICollection`1<T> Values { get; }

	// Methods
	void Add(T key, T value);
	bool ContainsKey(T key);
	bool Remove(T key);
	bool TryGetValue(T key, out T value);
}

// Namespace: System.Collections.Generic
public interface IEqualityComparer`1 // TypeDefIndex: 270
{
	// Methods
	bool Equals(T x, T y);
	int GetHashCode(T obj);
}

// Namespace: System.Collections.Generic
[Serializable]
public class KeyNotFoundException : SystemException, ISerializable // TypeDefIndex: 271
{
	// Constructors
	public KeyNotFoundException(); // 0x0000000180284D60
	public KeyNotFoundException(string message); // 0x000000018010E1E0
	public KeyNotFoundException(string message, Exception innerException); // 0x000000018010E1D0
	protected KeyNotFoundException(SerializationInfo info, StreamingContext context); // 0x000000018010E170

}

// Namespace: System.Collections.Generic
[Serializable]
public struct KeyValuePair`2 // TypeDefIndex: 272
{
	// Fields
	private T key; // 0x00
	private T value; // 0x00

	// Properties
	public T Key { get; set; }
	public T Value { get; set; }

	// Constructors
	public KeyValuePair`2(T key, T value);

	// Methods
	public override string ToString();
}

// Namespace: System.Collections.Generic
[Serializable]
public class List`1 : IEnumerable, ICollection, IList, ICollection`1<T>, IEnumerable`1<T>, IList`1<T> // TypeDefIndex: 273
{
	// Fields
	private const int DefaultCapacity = 4; // 0x00
	private T[] _items; // 0x00
	private int _size; // 0x00
	private int _version; // 0x18
	private static readonly T[] EmptyArray; // 0x00

	// Properties
	private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
	private bool System.Collections.ICollection.IsSynchronized { get; }
	private object System.Collections.ICollection.SyncRoot { get; }
	private bool System.Collections.IList.IsFixedSize { get; }
	private bool System.Collections.IList.IsReadOnly { get; }
	private object System.Collections.IList.Item { get; set; }
	public int Capacity { get; set; }
	public int Count { get; }
	public T Item { get; set; }

	// Constructors
	public List`1();
	public List`1(IEnumerable`1<T> collection);
	public List`1(int capacity);
	internal List`1(T[] data, int size);
	private static List`1();

	// Methods
	private IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
	private void System.Collections.ICollection.CopyTo(Array array, int arrayIndex);
	private IEnumerator System.Collections.IEnumerable.GetEnumerator();
	private int System.Collections.IList.Add(object item);
	private bool System.Collections.IList.Contains(object item);
	private int System.Collections.IList.IndexOf(object item);
	private void System.Collections.IList.Insert(int index, object item);
	private void System.Collections.IList.Remove(object item);
	public void Add(T item);
	private void GrowIfNeeded(int newCount);
	private void CheckRange(int idx, int count);
	private void AddCollection(ICollection`1<T> collection);
	private void AddEnumerable(IEnumerable`1<T> enumerable);
	public void AddRange(IEnumerable`1<T> collection);
	public ReadOnlyCollection`1<T> AsReadOnly();
	public int BinarySearch(T item);
	public int BinarySearch(T item, IComparer`1<T> comparer);
	public int BinarySearch(int index, int count, T item, IComparer`1<T> comparer);
	public void Clear();
	public bool Contains(T item);
	public List`1<T> ConvertAll(Converter`2<T, T> converter);
	public void CopyTo(T[] array);
	public void CopyTo(T[] array, int arrayIndex);
	public void CopyTo(int index, T[] array, int arrayIndex, int count);
	public bool Exists(Predicate`1<T> match);
	public T Find(Predicate`1<T> match);
	private static void CheckMatch(Predicate`1<T> match);
	public List`1<T> FindAll(Predicate`1<T> match);
	private List`1<T> FindAllStackBits(Predicate`1<T> match);
	private List`1<T> FindAllList(Predicate`1<T> match);
	public int FindIndex(Predicate`1<T> match);
	public int FindIndex(int startIndex, Predicate`1<T> match);
	public int FindIndex(int startIndex, int count, Predicate`1<T> match);
	private int GetIndex(int startIndex, int count, Predicate`1<T> match);
	public T FindLast(Predicate`1<T> match);
	public int FindLastIndex(Predicate`1<T> match);
	public int FindLastIndex(int startIndex, Predicate`1<T> match);
	public int FindLastIndex(int startIndex, int count, Predicate`1<T> match);
	private int GetLastIndex(int startIndex, int count, Predicate`1<T> match);
	public void ForEach(Action`1<T> action);
	public Enumerator<T> GetEnumerator();
	public List`1<T> GetRange(int index, int count);
	public int IndexOf(T item);
	public int IndexOf(T item, int index);
	public int IndexOf(T item, int index, int count);
	private void Shift(int start, int delta);
	private void CheckIndex(int index);
	public void Insert(int index, T item);
	private void CheckCollection(IEnumerable`1<T> collection);
	public void InsertRange(int index, IEnumerable`1<T> collection);
	private void InsertCollection(int index, ICollection`1<T> collection);
	private void InsertEnumeration(int index, IEnumerable`1<T> enumerable);
	public int LastIndexOf(T item);
	public int LastIndexOf(T item, int index);
	public int LastIndexOf(T item, int index, int count);
	public bool Remove(T item);
	public int RemoveAll(Predicate`1<T> match);
	public void RemoveAt(int index);
	public void RemoveRange(int index, int count);
	public void Reverse();
	public void Reverse(int index, int count);
	public void Sort();
	public void Sort(IComparer`1<T> comparer);
	public void Sort(Comparison`1<T> comparison);
	public void Sort(int index, int count, IComparer`1<T> comparer);
	public T[] ToArray();
	public void TrimExcess();
	public bool TrueForAll(Predicate`1<T> match);
}

// Namespace: 
[Serializable]
public struct Enumerator : IEnumerator, IDisposable, IEnumerator`1<T> // TypeDefIndex: 274
{
	// Fields
	private List`1<T> l; // 0x00
	private int next; // 0x00
	private int ver; // 0x00
	private T current; // 0x00

	// Properties
	private object System.Collections.IEnumerator.Current { get; }
	public T Current { get; }

	// Constructors
	internal Enumerator(List`1<T> l);

	// Methods
	private void System.Collections.IEnumerator.Reset();
	public void Dispose();
	private void VerifyState();
	public bool MoveNext();
}

// Namespace: System.Collections.ObjectModel
[Serializable]
public class Collection`1 : IEnumerable, ICollection, IList, ICollection`1<T>, IList`1<T>, IEnumerable`1<T> // TypeDefIndex: 275
{
	// Fields
	private IList`1<T> list; // 0x00
	private object syncRoot; // 0x00

	// Properties
	private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
	private bool System.Collections.ICollection.IsSynchronized { get; }
	private object System.Collections.ICollection.SyncRoot { get; }
	private bool System.Collections.IList.IsFixedSize { get; }
	private bool System.Collections.IList.IsReadOnly { get; }
	private object System.Collections.IList.Item { get; set; }
	protected IList`1<T> Items { get; }
	public int Count { get; }
	public T Item { get; set; }

	// Constructors
	public Collection`1();
	public Collection`1(IList`1<T> list);

	// Methods
	private void System.Collections.ICollection.CopyTo(Array array, int index);
	private IEnumerator System.Collections.IEnumerable.GetEnumerator();
	private int System.Collections.IList.Add(object value);
	private bool System.Collections.IList.Contains(object value);
	private int System.Collections.IList.IndexOf(object value);
	private void System.Collections.IList.Insert(int index, object value);
	private void System.Collections.IList.Remove(object value);
	public void Add(T item);
	public void Clear();
	protected virtual void ClearItems();
	public bool Contains(T item);
	public void CopyTo(T[] array, int index);
	public IEnumerator`1<T> GetEnumerator();
	public int IndexOf(T item);
	public void Insert(int index, T item);
	protected virtual void InsertItem(int index, T item);
	public bool Remove(T item);
	public void RemoveAt(int index);
	protected virtual void RemoveItem(int index);
	protected virtual void SetItem(int index, T item);
	internal static bool IsValidItem(object item);
	internal static T ConvertItem(object item);
	internal static void CheckWritable(IList`1<T> list);
	internal static bool IsSynchronized(IList`1<T> list);
	internal static bool IsFixedSize(IList`1<T> list);
}

// Namespace: System.Collections.ObjectModel
[Serializable]
public abstract class KeyedCollection`2 : Collection`1<T> // TypeDefIndex: 276
{
	// Fields
	private Dictionary`2<T, T> dictionary; // 0x00
	private IEqualityComparer`1<T> comparer; // 0x00
	private int dictionaryCreationThreshold; // 0x00

	// Properties
	public IEqualityComparer`1<T> Comparer { get; }
	public T Item { get; }
	protected IDictionary`2<T, T> Dictionary { get; }

	// Constructors
	protected KeyedCollection`2();
	protected KeyedCollection`2(IEqualityComparer`1<T> comparer);
	protected KeyedCollection`2(IEqualityComparer`1<T> comparer, int dictionaryCreationThreshold);

	// Methods
	public bool Contains(T key);
	private int IndexOfKey(T key);
	public bool Remove(T key);
	protected void ChangeItemKey(T item, T newKey);
	protected override void ClearItems();
	protected abstract T GetKeyForItem(T item);
	protected override void InsertItem(int index, T item);
	protected override void RemoveItem(int index);
	protected override void SetItem(int index, T item);
}

// Namespace: System.Collections.ObjectModel
[Serializable]
public class ReadOnlyCollection`1 : IEnumerable, ICollection, IList, ICollection`1<T>, IList`1<T>, IEnumerable`1<T> // TypeDefIndex: 277
{
	// Fields
	private IList`1<T> list; // 0x00

	// Properties
	private T System.Collections.Generic.IList<T>.Item { get; set; }
	private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
	private bool System.Collections.ICollection.IsSynchronized { get; }
	private object System.Collections.ICollection.SyncRoot { get; }
	private bool System.Collections.IList.IsFixedSize { get; }
	private bool System.Collections.IList.IsReadOnly { get; }
	private object System.Collections.IList.Item { get; set; }
	public int Count { get; }
	protected IList`1<T> Items { get; }
	public T Item { get; }

	// Constructors
	public ReadOnlyCollection`1(IList`1<T> list);

	// Methods
	private void System.Collections.Generic.ICollection<T>.Add(T item);
	private void System.Collections.Generic.ICollection<T>.Clear();
	private void System.Collections.Generic.IList<T>.Insert(int index, T item);
	private bool System.Collections.Generic.ICollection<T>.Remove(T item);
	private void System.Collections.Generic.IList<T>.RemoveAt(int index);
	private void System.Collections.ICollection.CopyTo(Array array, int index);
	private IEnumerator System.Collections.IEnumerable.GetEnumerator();
	private int System.Collections.IList.Add(object value);
	private void System.Collections.IList.Clear();
	private bool System.Collections.IList.Contains(object value);
	private int System.Collections.IList.IndexOf(object value);
	private void System.Collections.IList.Insert(int index, object value);
	private void System.Collections.IList.Remove(object value);
	private void System.Collections.IList.RemoveAt(int index);
	public bool Contains(T value);
	public void CopyTo(T[] array, int index);
	public IEnumerator`1<T> GetEnumerator();
	public int IndexOf(T value);
}

// Namespace: System.Collections
[Serializable]
public class ArrayList : IEnumerable, ICloneable, ICollection, IList // TypeDefIndex: 278
{
	// Fields
	private const int DefaultInitialCapacity = 4; // 0x00
	private int _size; // 0x18
	private object[] _items; // 0x00
	private int _version; // 0x10
	private static readonly object[] EmptyArray; // 0x18

	// Properties
	public virtual object Item { get; set; } // 0x0000000180391A90 0x0000000180391C10
	public virtual int Count { get; } // 0x00000001800ECD10 
	public virtual int Capacity { get; set; } // 0x000000018022AAB0 0x0000000180391B50
	public virtual bool IsFixedSize { get; } // 0x000000018011A0F0 
	public virtual bool IsReadOnly { get; } // 0x000000018011A0F0 
	public virtual bool IsSynchronized { get; } // 0x000000018011A0F0 
	public virtual object SyncRoot { get; } // 0x0000000180123590 

	// Constructors
	public ArrayList(); // 0x00000001803917C0
	public ArrayList(ICollection c); // 0x0000000180391830
	public ArrayList(int capacity); // 0x0000000180391710
	private ArrayList(int initialCapacity, bool forceZeroSize); // 0x0000000180391A00
	private ArrayList(object[] array, int index, int count); // 0x0000000180391960
	private static ArrayList(); // 0x00000001803916C0

	// Methods
	private void EnsureCapacity(int count); // 0x0000000180390070
	private void Shift(int index, int count); // 0x00000001803910B0
	public virtual int Add(object value); // 0x000000018038F9A0
	public virtual void Clear(); // 0x000000018038FDF0
	public virtual bool Contains(object item); // 0x000000018038FF10
	internal virtual bool Contains(object value, int startIndex, int count); // 0x000000018038FEE0
	public virtual int IndexOf(object value); // 0x00000001803906B0
	public virtual int IndexOf(object value, int startIndex); // 0x0000000180390510
	public virtual int IndexOf(object value, int startIndex, int count); // 0x0000000180390540
	public virtual int LastIndexOf(object value); // 0x0000000180390A00
	public virtual int LastIndexOf(object value, int startIndex); // 0x00000001803909D0
	public virtual int LastIndexOf(object value, int startIndex, int count); // 0x0000000180390A20
	public virtual void Insert(int index, object value); // 0x00000001803908B0
	public virtual void InsertRange(int index, ICollection c); // 0x00000001803906D0
	public virtual void Remove(object obj); // 0x0000000180390DB0
	public virtual void RemoveAt(int index); // 0x0000000180390C10
	public virtual void RemoveRange(int index, int count); // 0x0000000180390D10
	public virtual void Reverse(); // 0x0000000180390F00
	public virtual void Reverse(int index, int count); // 0x0000000180390F30
	public virtual void CopyTo(Array array); // 0x0000000180390060
	public virtual void CopyTo(Array array, int arrayIndex); // 0x0000000180390030
	public virtual void CopyTo(int index, Array array, int arrayIndex, int count); // 0x000000018038FF40
	public virtual IEnumerator GetEnumerator(); // 0x0000000180390340
	public virtual IEnumerator GetEnumerator(int index, int count); // 0x0000000180390280
	public virtual void AddRange(ICollection c); // 0x000000018038F980
	public virtual int BinarySearch(object value); // 0x000000018038FA60
	public virtual int BinarySearch(object value, IComparer comparer); // 0x000000018038FB20
	public virtual int BinarySearch(int index, int count, object value, IComparer comparer); // 0x000000018038FBF0
	public virtual ArrayList GetRange(int index, int count); // 0x0000000180390400
	public virtual void SetRange(int index, ICollection c); // 0x0000000180390FC0
	public virtual void TrimToSize(); // 0x0000000180391630
	public virtual void Sort(); // 0x00000001803912F0
	public virtual void Sort(IComparer comparer); // 0x0000000180391210
	public virtual void Sort(int index, int count, IComparer comparer); // 0x0000000180391240
	public virtual object[] ToArray(); // 0x0000000180391580
	public virtual Array ToArray(Type type); // 0x00000001803915E0
	public virtual object Clone(); // 0x000000018038FE20
	internal static void CheckRange(int index, int count, int listCount); // 0x000000018038FCC0
	internal static void ThrowNewArgumentOutOfRangeException(string name, object actual, string message); // 0x0000000180391500
	public static ArrayList Adapter(IList list); // 0x000000018038F860
	public static ArrayList Synchronized(ArrayList list); // 0x0000000180391430
	public static IList Synchronized(IList list); // 0x0000000180391340
	public static ArrayList ReadOnly(ArrayList list); // 0x0000000180390B50
	public static IList ReadOnly(IList list); // 0x0000000180390A90
	public static ArrayList FixedSize(ArrayList list); // 0x0000000180390110
	public static IList FixedSize(IList list); // 0x00000001803901D0
	public static ArrayList Repeat(object value, int count); // 0x0000000180390DF0
}

// Namespace: 
private sealed class ArrayListEnumerator : IEnumerator, ICloneable // TypeDefIndex: 279
{
	// Fields
	private int m_Pos; // 0x10
	private int m_Index; // 0x18
	private int m_Count; // 0x28
	private object m_Current; // 0x10
	private ArrayList m_List; // 0x1C
	private int m_ExpectedStateChanges; // 0x00

	// Properties
	public object Current { get; } // 0x000000018038EF20 

	// Constructors
	public ArrayListEnumerator(ArrayList list); // 0x000000018038EE40
	public ArrayListEnumerator(ArrayList list, int index, int count); // 0x000000018038EEB0

	// Methods
	public object Clone(); // 0x0000000180270250
	public bool MoveNext(); // 0x000000018038ED70
	public void Reset(); // 0x000000018038EE20
}

// Namespace: 
private sealed class SimpleEnumerator : IEnumerator, ICloneable // TypeDefIndex: 280
{
	// Fields
	private ArrayList list; // 0x10
	private int index; // 0x1C
	private int version; // 0x00
	private object currentElement; // 0x10
	private static object endFlag; // 0x18

	// Properties
	public object Current { get; } // 0x00000001803A3CD0 

	// Constructors
	public SimpleEnumerator(ArrayList list); // 0x00000001803A3C30
	private static SimpleEnumerator(); // 0x00000001803A3B40

	// Methods
	public object Clone(); // 0x0000000180270250
	public bool MoveNext(); // 0x00000001803A3950
	public void Reset(); // 0x00000001803A3A80
}

// Namespace: 
[Serializable]
private sealed class ArrayListAdapter : ArrayList // TypeDefIndex: 281
{
	// Fields
	private IList m_Adaptee; // 0x28

	// Properties
	public override object Item { get; set; } // 0x000000018038EBC0 0x000000018038ED00
	public override int Count { get; } // 0x000000018038EA80 
	public override int Capacity { get; set; } // 0x000000018038EA30 0x000000018038EC70
	public override bool IsFixedSize { get; } // 0x000000018038EAD0 
	public override bool IsReadOnly { get; } // 0x000000018038EB20 
	public override object SyncRoot { get; } // 0x000000018038EC20 
	public override bool IsSynchronized { get; } // 0x000000018038EB70 

	// Constructors
	public ArrayListAdapter(IList adaptee); // 0x000000018038E9A0

	// Methods
	public override int Add(object value); // 0x000000018038C3B0
	public override void Clear(); // 0x000000018038C880
	public override bool Contains(object value); // 0x000000018038C930
	public override int IndexOf(object value); // 0x000000018038D2E0
	public override int IndexOf(object value, int startIndex); // 0x000000018038D340
	public override int IndexOf(object value, int startIndex, int count); // 0x000000018038D0C0
	public override int LastIndexOf(object value); // 0x000000018038D930
	public override int LastIndexOf(object value, int startIndex); // 0x000000018038D910
	public override int LastIndexOf(object value, int startIndex, int count); // 0x000000018038D720
	public override void Insert(int index, object value); // 0x000000018038D6B0
	public override void InsertRange(int index, ICollection c); // 0x000000018038D3C0
	public override void Remove(object value); // 0x000000018038DE20
	public override void RemoveAt(int index); // 0x000000018038DC80
	public override void RemoveRange(int index, int count); // 0x000000018038DCE0
	public override void Reverse(); // 0x000000018038DE80
	public override void Reverse(int index, int count); // 0x000000018038DEE0
	public override void SetRange(int index, ICollection c); // 0x000000018038E1F0
	public override void CopyTo(Array array); // 0x000000018038C990
	public override void CopyTo(Array array, int index); // 0x000000018038CA00
	public override void CopyTo(int index, Array array, int arrayIndex, int count); // 0x000000018038CA70
	public override IEnumerator GetEnumerator(); // 0x000000018038CDD0
	public override IEnumerator GetEnumerator(int index, int count); // 0x000000018038CE20
	public override void AddRange(ICollection c); // 0x000000018038C170
	public override int BinarySearch(object value); // 0x000000018038C590
	public override int BinarySearch(object value, IComparer comparer); // 0x000000018038C410
	public override int BinarySearch(int index, int count, object value, IComparer comparer); // 0x000000018038C720
	public override object Clone(); // 0x000000018038C8D0
	public override ArrayList GetRange(int index, int count); // 0x000000018038CFF0
	public override void TrimToSize(); // 0x00000001800EA7B0
	public override void Sort(); // 0x000000018038E640
	public override void Sort(IComparer comparer); // 0x000000018038E510
	public override void Sort(int index, int count, IComparer comparer); // 0x000000018038E410
	private static void Swap(IList list, int x, int y); // 0x000000018038E7B0
	internal static void QuickSort(IList list, int left, int right, IComparer comparer); // 0x000000018038D9A0
	public override object[] ToArray(); // 0x000000018038E880
	public override Array ToArray(Type elementType); // 0x000000018038E910
}

// Namespace: 
private sealed class EnumeratorWithRange : IEnumerator, ICloneable // TypeDefIndex: 282
{
	// Fields
	private int m_StartIndex; // 0x10
	private int m_Count; // 0x18
	private int m_MaxCount; // 0x28
	private IEnumerator m_Enumerator; // 0x30

	// Properties
	public object Current { get; } // 0x00000001803A07D0 

	// Constructors
	public EnumeratorWithRange(IEnumerator enumerator, int index, int count); // 0x00000001803A0690

	// Methods
	public object Clone(); // 0x0000000180270250
	public bool MoveNext(); // 0x00000001803A0530
	public void Reset(); // 0x00000001803A0590
}

// Namespace: 
[Serializable]
private class ArrayListWrapper : ArrayList // TypeDefIndex: 283
{
	// Fields
	protected ArrayList m_InnerArrayList; // 0x28

	// Properties
	public override object Item { get; set; } // 0x000000018038F7A0 0x000000018038F830
	public override int Count { get; } // 0x000000018038F6E0 
	public override int Capacity { get; set; } // 0x000000018038F6B0 0x000000018038F800
	public override bool IsFixedSize { get; } // 0x000000018038F710 
	public override bool IsReadOnly { get; } // 0x000000018038F740 
	public override bool IsSynchronized { get; } // 0x000000018038F770 
	public override object SyncRoot { get; } // 0x000000018038F7D0 

	// Constructors
	public ArrayListWrapper(ArrayList innerArrayList); // 0x000000018038F5F0

	// Methods
	public override int Add(object value); // 0x000000018038EFC0
	public override void Clear(); // 0x000000018038F080
	public override bool Contains(object value); // 0x000000018038F0E0
	public override int IndexOf(object value); // 0x000000018038F260
	public override int IndexOf(object value, int startIndex); // 0x000000018038F290
	public override int IndexOf(object value, int startIndex, int count); // 0x000000018038F230
	public override int LastIndexOf(object value); // 0x000000018038F350
	public override int LastIndexOf(object value, int startIndex); // 0x000000018038F380
	public override int LastIndexOf(object value, int startIndex, int count); // 0x000000018038F320
	public override void Insert(int index, object value); // 0x000000018038F2F0
	public override void InsertRange(int index, ICollection c); // 0x000000018038F2C0
	public override void Remove(object value); // 0x000000018038F410
	public override void RemoveAt(int index); // 0x000000018038F3B0
	public override void RemoveRange(int index, int count); // 0x000000018038F3E0
	public override void Reverse(); // 0x000000018038F470
	public override void Reverse(int index, int count); // 0x000000018038F440
	public override void SetRange(int index, ICollection c); // 0x000000018038F4A0
	public override void CopyTo(Array array); // 0x000000018038F140
	public override void CopyTo(Array array, int index); // 0x000000018038F170
	public override void CopyTo(int index, Array array, int arrayIndex, int count); // 0x000000018038F110
	public override IEnumerator GetEnumerator(); // 0x000000018038F1A0
	public override IEnumerator GetEnumerator(int index, int count); // 0x000000018038F1D0
	public override void AddRange(ICollection c); // 0x000000018038EF90
	public override int BinarySearch(object value); // 0x000000018038F050
	public override int BinarySearch(object value, IComparer comparer); // 0x000000018038EFF0
	public override int BinarySearch(int index, int count, object value, IComparer comparer); // 0x000000018038F020
	public override object Clone(); // 0x000000018038F0B0
	public override ArrayList GetRange(int index, int count); // 0x000000018038F200
	public override void TrimToSize(); // 0x000000018038F5C0
	public override void Sort(); // 0x000000018038F530
	public override void Sort(IComparer comparer); // 0x000000018038F4D0
	public override void Sort(int index, int count, IComparer comparer); // 0x000000018038F500
	public override object[] ToArray(); // 0x000000018038F560
	public override Array ToArray(Type elementType); // 0x000000018038F590
}

// Namespace: 
[Serializable]
private sealed class SynchronizedArrayListWrapper : ArrayListWrapper // TypeDefIndex: 284
{
	// Fields
	private object m_SyncRoot; // 0x30

	// Properties
	public override object Item { get; set; } // 0x00000001803A6150 0x00000001803A6300
	public override int Count { get; } // 0x00000001803A5EE0 
	public override int Capacity { get; set; } // 0x00000001803A5E10 0x00000001803A6230
	public override bool IsFixedSize { get; } // 0x00000001803A5FB0 
	public override bool IsReadOnly { get; } // 0x00000001803A6080 
	public override bool IsSynchronized { get; } // 0x000000018010E420 
	public override object SyncRoot { get; } // 0x00000001801146E0 

	// Constructors
	internal SynchronizedArrayListWrapper(ArrayList innerArrayList); // 0x00000001803A5DC0

	// Methods
	public override int Add(object value); // 0x00000001803A4270
	public override void Clear(); // 0x00000001803A4610
	public override bool Contains(object value); // 0x00000001803A47A0
	public override int IndexOf(object value); // 0x00000001803A4EB0
	public override int IndexOf(object value, int startIndex); // 0x00000001803A4F90
	public override int IndexOf(object value, int startIndex, int count); // 0x00000001803A4DC0
	public override int LastIndexOf(object value); // 0x00000001803A52F0
	public override int LastIndexOf(object value, int startIndex); // 0x00000001803A5210
	public override int LastIndexOf(object value, int startIndex, int count); // 0x00000001803A53D0
	public override void Insert(int index, object value); // 0x00000001803A5140
	public override void InsertRange(int index, ICollection c); // 0x00000001803A5070
	public override void Remove(object value); // 0x00000001803A5670
	public override void RemoveAt(int index); // 0x00000001803A54C0
	public override void RemoveRange(int index, int count); // 0x00000001803A5590
	public override void Reverse(); // 0x00000001803A5740
	public override void Reverse(int index, int count); // 0x00000001803A5800
	public override void CopyTo(Array array); // 0x00000001803A4880
	public override void CopyTo(Array array, int index); // 0x00000001803A4A40
	public override void CopyTo(int index, Array array, int arrayIndex, int count); // 0x00000001803A4950
	public override IEnumerator GetEnumerator(); // 0x00000001803A4C00
	public override IEnumerator GetEnumerator(int index, int count); // 0x00000001803A4B10
	public override void AddRange(ICollection c); // 0x00000001803A41A0
	public override int BinarySearch(object value); // 0x00000001803A4350
	public override int BinarySearch(object value, IComparer comparer); // 0x00000001803A4430
	public override int BinarySearch(int index, int count, object value, IComparer comparer); // 0x00000001803A4510
	public override object Clone(); // 0x00000001803A46D0
	public override ArrayList GetRange(int index, int count); // 0x00000001803A4CD0
	public override void TrimToSize(); // 0x00000001803A5D00
	public override void Sort(); // 0x00000001803A58E0
	public override void Sort(IComparer comparer); // 0x00000001803A59A0
	public override void Sort(int index, int count, IComparer comparer); // 0x00000001803A5A70
	public override object[] ToArray(); // 0x00000001803A5B50
	public override Array ToArray(Type elementType); // 0x00000001803A5C20
}

// Namespace: 
[Serializable]
private class FixedSizeArrayListWrapper : ArrayListWrapper // TypeDefIndex: 285
{
	// Properties
	protected virtual string ErrorMessage { get; } // 0x00000001803A0C20 
	public override int Capacity { get; set; } // 0x000000018038F6B0 0x00000001803A0C50
	public override bool IsFixedSize { get; } // 0x000000018010E420 

	// Constructors
	public FixedSizeArrayListWrapper(ArrayList innerList); // 0x00000001803A0C10

	// Methods
	public override int Add(object value); // 0x00000001803A0890
	public override void AddRange(ICollection c); // 0x00000001803A0820
	public override void Clear(); // 0x00000001803A0900
	public override void Insert(int index, object value); // 0x00000001803A09E0
	public override void InsertRange(int index, ICollection c); // 0x00000001803A0970
	public override void Remove(object value); // 0x00000001803A0B30
	public override void RemoveAt(int index); // 0x00000001803A0A50
	public override void RemoveRange(int index, int count); // 0x00000001803A0AC0
	public override void TrimToSize(); // 0x00000001803A0BA0
}

// Namespace: 
[Serializable]
private sealed class ReadOnlyArrayListWrapper : FixedSizeArrayListWrapper // TypeDefIndex: 286
{
	// Properties
	protected override string ErrorMessage { get; } // 0x00000001803A37B0 
	public override bool IsReadOnly { get; } // 0x000000018010E420 
	public override object Item { get; set; } // 0x000000018038F7A0 0x00000001803A37E0

	// Constructors
	public ReadOnlyArrayListWrapper(ArrayList innerArrayList); // 0x00000001803A0C10

	// Methods
	public override void Reverse(); // 0x00000001803A3510
	public override void Reverse(int index, int count); // 0x00000001803A3580
	public override void SetRange(int index, ICollection c); // 0x00000001803A35F0
	public override void Sort(); // 0x00000001803A3740
	public override void Sort(IComparer comparer); // 0x00000001803A36D0
	public override void Sort(int index, int count, IComparer comparer); // 0x00000001803A3660
}

// Namespace: 
[Serializable]
private sealed class RangedArrayList : ArrayListWrapper // TypeDefIndex: 287
{
	// Fields
	private int m_InnerIndex; // 0x30
	private int m_InnerCount; // 0x38
	private int m_InnerStateChanges; // 0x10

	// Properties
	public override bool IsSynchronized { get; } // 0x000000018011A0F0 
	public override object Item { get; set; } // 0x00000001803A3350 0x00000001803A3460
	public override int Count { get; } // 0x00000001803A3330 
	public override int Capacity { get; set; } // 0x000000018038F6B0 0x00000001803A33F0

	// Constructors
	public RangedArrayList(ArrayList innerList, int index, int count); // 0x00000001803A32D0

	// Methods
	private void VerifyStateChanges(); // 0x00000001803A3250
	public override int Add(object value); // 0x00000001803A1580
	public override void Clear(); // 0x00000001803A1820
	public override bool Contains(object value); // 0x00000001803A1980
	public override int IndexOf(object value); // 0x00000001803A1F90
	public override int IndexOf(object value, int startIndex); // 0x00000001803A1E00
	public override int IndexOf(object value, int startIndex, int count); // 0x00000001803A2120
	public override int LastIndexOf(object value); // 0x00000001803A26F0
	public override int LastIndexOf(object value, int startIndex); // 0x00000001803A24B0
	public override int LastIndexOf(object value, int startIndex, int count); // 0x00000001803A25A0
	public override void Insert(int index, object value); // 0x00000001803A23C0
	public override void InsertRange(int index, ICollection c); // 0x00000001803A22B0
	public override void Remove(object value); // 0x00000001803A2990
	public override void RemoveAt(int index); // 0x00000001803A27E0
	public override void RemoveRange(int index, int count); // 0x00000001803A28C0
	public override void Reverse(); // 0x00000001803A2BF0
	public override void Reverse(int index, int count); // 0x00000001803A2CA0
	public override void SetRange(int index, ICollection c); // 0x00000001803A2D60
	public override void CopyTo(Array array); // 0x00000001803A1A80
	public override void CopyTo(Array array, int index); // 0x00000001803A19C0
	public override void CopyTo(int index, Array array, int arrayIndex, int count); // 0x00000001803A1B40
	public override IEnumerator GetEnumerator(); // 0x00000001803A1C00
	public override IEnumerator GetEnumerator(int index, int count); // 0x00000001803A1CA0
	public override void AddRange(ICollection c); // 0x00000001803A14E0
	public override int BinarySearch(object value); // 0x00000001803A15F0
	public override int BinarySearch(object value, IComparer comparer); // 0x00000001803A1690
	public override int BinarySearch(int index, int count, object value, IComparer comparer); // 0x00000001803A1760
	public override object Clone(); // 0x00000001803A1880
	public override ArrayList GetRange(int index, int count); // 0x00000001803A1D50
	public override void TrimToSize(); // 0x00000001803A3200
	public override void Sort(); // 0x00000001803A3000
	public override void Sort(IComparer comparer); // 0x00000001803A2E50
	public override void Sort(int index, int count, IComparer comparer); // 0x00000001803A2F20
	public override object[] ToArray(); // 0x00000001803A3180
	public override Array ToArray(Type elementType); // 0x00000001803A3110
}

// Namespace: 
[Serializable]
private sealed class SynchronizedListWrapper : ListWrapper // TypeDefIndex: 288
{
	// Fields
	private object m_SyncRoot; // 0x18

	// Properties
	public override int Count { get; } // 0x00000001803A6C80 
	public override bool IsSynchronized { get; } // 0x000000018010E420 
	public override object SyncRoot { get; } // 0x00000001803A7040 
	public override bool IsFixedSize { get; } // 0x00000001803A6D70 
	public override bool IsReadOnly { get; } // 0x00000001803A6E60 
	public override object Item { get; set; } // 0x00000001803A6F50 0x00000001803A7130

	// Constructors
	public SynchronizedListWrapper(IList innerList); // 0x00000001803A6C10

	// Methods
	public override int Add(object value); // 0x00000001803A63D0
	public override void Clear(); // 0x00000001803A64C0
	public override bool Contains(object value); // 0x00000001803A6590
	public override int IndexOf(object value); // 0x00000001803A6870
	public override void Insert(int index, object value); // 0x00000001803A6960
	public override void Remove(object value); // 0x00000001803A6B30
	public override void RemoveAt(int index); // 0x00000001803A6A50
	public override void CopyTo(Array array, int index); // 0x00000001803A6690
	public override IEnumerator GetEnumerator(); // 0x00000001803A6780
}

// Namespace: 
[Serializable]
private class FixedSizeListWrapper : ListWrapper // TypeDefIndex: 289
{
	// Properties
	protected virtual string ErrorMessage { get; } // 0x00000001803A0EF0 
	public override bool IsFixedSize { get; } // 0x000000018010E420 

	// Constructors
	public FixedSizeListWrapper(IList innerList); // 0x000000018015C840

	// Methods
	public override int Add(object value); // 0x00000001803A0CC0
	public override void Clear(); // 0x00000001803A0D30
	public override void Insert(int index, object value); // 0x00000001803A0DA0
	public override void Remove(object value); // 0x00000001803A0E80
	public override void RemoveAt(int index); // 0x00000001803A0E10
}

// Namespace: 
[Serializable]
private sealed class ReadOnlyListWrapper : FixedSizeListWrapper // TypeDefIndex: 290
{
	// Properties
	protected override string ErrorMessage { get; } // 0x00000001803A3850 
	public override bool IsReadOnly { get; } // 0x000000018010E420 
	public override object Item { get; set; } // 0x00000001803A3880 0x00000001803A38E0

	// Constructors
	public ReadOnlyListWrapper(IList innerList); // 0x000000018015C840

}

// Namespace: 
[Serializable]
private class ListWrapper : IEnumerable, ICollection, IList // TypeDefIndex: 291
{
	// Fields
	protected IList m_InnerList; // 0x10

	// Properties
	public virtual object Item { get; set; } // 0x00000001803A13C0 0x00000001803A1470
	public virtual int Count { get; } // 0x00000001803A1280 
	public virtual bool IsSynchronized { get; } // 0x00000001803A1370 
	public virtual object SyncRoot { get; } // 0x00000001803A1420 
	public virtual bool IsFixedSize { get; } // 0x00000001803A12D0 
	public virtual bool IsReadOnly { get; } // 0x00000001803A1320 

	// Constructors
	public ListWrapper(IList innerList); // 0x000000018015C840

	// Methods
	public virtual int Add(object value); // 0x00000001803A0F20
	public virtual void Clear(); // 0x00000001803A0F80
	public virtual bool Contains(object value); // 0x00000001803A0FD0
	public virtual int IndexOf(object value); // 0x00000001803A10F0
	public virtual void Insert(int index, object value); // 0x00000001803A1150
	public virtual void Remove(object value); // 0x00000001803A1220
	public virtual void RemoveAt(int index); // 0x00000001803A11C0
	public virtual void CopyTo(Array array, int index); // 0x00000001803A1030
	public virtual IEnumerator GetEnumerator(); // 0x00000001803A10A0
}

// Namespace: System.Collections
[Serializable]
public sealed class BitArray : IEnumerable, ICloneable, ICollection // TypeDefIndex: 292
{
	// Fields
	private int[] m_array; // 0x10
	private int m_length; // 0x1C
	private int _version; // 0x10

	// Properties
	public int Count { get; } // 0x00000001800ED060 
	public bool IsReadOnly { get; } // 0x000000018011A0F0 
	public bool IsSynchronized { get; } // 0x000000018011A0F0 
	public bool Item { get; set; } // 0x000000018039A0C0 0x000000018039A320
	public int Length { get; set; } // 0x00000001800ED060 0x000000018039AD40
	public object SyncRoot { get; } // 0x0000000180123590 

	// Constructors
	public BitArray(BitArray bits); // 0x000000018039A980
	public BitArray(bool[] values); // 0x000000018039A4D0
	public BitArray(byte[] bytes); // 0x000000018039A6C0
	public BitArray(int[] values); // 0x000000018039A8D0
	public BitArray(int length); // 0x000000018039A830
	public BitArray(int length, bool defaultValue); // 0x000000018039AA80
	private BitArray(int[] array, int length); // 0x0000000180125A40

	// Methods
	private byte getByte(int byteIndex); // 0x000000018039AC30
	private void setByte(int byteIndex, byte value); // 0x000000018039ACA0
	private void checkOperand(BitArray operand); // 0x000000018039AB90
	public object Clone(); // 0x0000000180399AD0
	public void CopyTo(Array array, int index); // 0x0000000180399C00
	public BitArray Not(); // 0x000000018039A170
	public BitArray And(BitArray value); // 0x0000000180399A20
	public BitArray Or(BitArray value); // 0x000000018039A1E0
	public BitArray Xor(BitArray value); // 0x000000018039A420
	public bool Get(int index); // 0x000000018039A0C0
	public void Set(int index, bool value); // 0x000000018039A320
	public void SetAll(bool value); // 0x000000018039A290
	public IEnumerator GetEnumerator(); // 0x000000018039A060
}

// Namespace: 
[Serializable]
private class BitArrayEnumerator : IEnumerator, ICloneable // TypeDefIndex: 293
{
	// Fields
	private BitArray _bitArray; // 0x10
	private bool _current; // 0x1C
	private int _index; // 0x00
	private int _version; // 0x10

	// Properties
	public object Current { get; } // 0x0000000180270430 

	// Constructors
	public BitArrayEnumerator(BitArray ba); // 0x0000000180270380

	// Methods
	public object Clone(); // 0x0000000180270250
	public bool MoveNext(); // 0x0000000180270260
	public void Reset(); // 0x0000000180270300
	private void checkVersion(); // 0x00000001802703C0
}

// Namespace: System.Collections
[Serializable]
public class CaseInsensitiveComparer : IComparer // TypeDefIndex: 294
{
	// Fields
	private static CaseInsensitiveComparer defaultComparer; // 0x00
	private static CaseInsensitiveComparer defaultInvariantComparer; // 0x10
	private CultureInfo culture; // 0x00

	// Properties
	public static CaseInsensitiveComparer Default { get; } // 0x0000000180270A50 
	public static CaseInsensitiveComparer DefaultInvariant { get; } // 0x00000001802709F0 

	// Constructors
	public CaseInsensitiveComparer(); // 0x0000000180270990
	private CaseInsensitiveComparer(bool invariant); // 0x00000001800E2000
	public CaseInsensitiveComparer(CultureInfo culture); // 0x00000001802708A0
	private static CaseInsensitiveComparer(); // 0x00000001802707E0

	// Methods
	public int Compare(object a, object b); // 0x0000000180270500
}

// Namespace: System.Collections
[Serializable]
public class CaseInsensitiveHashCodeProvider : IHashCodeProvider // TypeDefIndex: 295
{
	// Fields
	private static readonly CaseInsensitiveHashCodeProvider singletonInvariant; // 0x00
	private static CaseInsensitiveHashCodeProvider singleton; // 0x10
	private static readonly object sync; // 0x10
	private TextInfo m_text; // 0x00

	// Properties
	public static CaseInsensitiveHashCodeProvider Default { get; } // 0x00000001802711E0 
	public static CaseInsensitiveHashCodeProvider DefaultInvariant { get; } // 0x0000000180271180 

	// Constructors
	public CaseInsensitiveHashCodeProvider(); // 0x0000000180270F80
	public CaseInsensitiveHashCodeProvider(CultureInfo culture); // 0x0000000180271080
	private static CaseInsensitiveHashCodeProvider(); // 0x0000000180270E00

	// Methods
	private static bool AreEqual(CultureInfo a, CultureInfo b); // 0x0000000180270B50
	private static bool AreEqual(TextInfo info, CultureInfo culture); // 0x0000000180270AB0
	public int GetHashCode(object obj); // 0x0000000180270BF0
}

// Namespace: System.Collections
[Serializable]
public abstract class CollectionBase : IEnumerable, ICollection, IList // TypeDefIndex: 296
{
	// Fields
	private ArrayList list; // 0x10

	// Properties
	private object System.Collections.ICollection.SyncRoot { get; } // 0x0000000180271920 
	private bool System.Collections.ICollection.IsSynchronized { get; } // 0x00000001802718A0 
	private bool System.Collections.IList.IsFixedSize { get; } // 0x0000000180271F40 
	private bool System.Collections.IList.IsReadOnly { get; } // 0x0000000180271FC0 
	private object System.Collections.IList.Item { get; set; } // 0x0000000180272040 0x00000001802720D0
	public int Count { get; } // 0x00000001802723C0 
	public int Capacity { get; set; } // 0x0000000180272340 0x00000001802724A0
	protected ArrayList InnerList { get; } // 0x0000000180272440 
	protected IList List { get; } // 0x0000000180123590 

	// Constructors
	protected CollectionBase(); // 0x00000001800E2000
	protected CollectionBase(int capacity); // 0x00000001802722D0

	// Methods
	private void System.Collections.ICollection.CopyTo(Array array, int index); // 0x0000000180271800
	private int System.Collections.IList.Add(object value); // 0x00000001802719A0
	private bool System.Collections.IList.Contains(object value); // 0x0000000180271B40
	private int System.Collections.IList.IndexOf(object value); // 0x0000000180271BD0
	private void System.Collections.IList.Insert(int index, object value); // 0x0000000180271C60
	private void System.Collections.IList.Remove(object value); // 0x0000000180271DA0
	public IEnumerator GetEnumerator(); // 0x00000001802715D0
	public void Clear(); // 0x0000000180271530
	public void RemoveAt(int index); // 0x00000001802716C0
	protected virtual void OnClear(); // 0x00000001800EA7B0
	protected virtual void OnClearComplete(); // 0x00000001800EA7B0
	protected virtual void OnInsert(int index, object value); // 0x00000001800EA7B0
	protected virtual void OnInsertComplete(int index, object value); // 0x00000001800EA7B0
	protected virtual void OnRemove(int index, object value); // 0x00000001800EA7B0
	protected virtual void OnRemoveComplete(int index, object value); // 0x00000001800EA7B0
	protected virtual void OnSet(int index, object oldValue, object newValue); // 0x00000001800EA7B0
	protected virtual void OnSetComplete(int index, object oldValue, object newValue); // 0x00000001800EA7B0
	protected virtual void OnValidate(object value); // 0x0000000180271650
}

// Namespace: System.Collections
internal sealed class CollectionDebuggerView // TypeDefIndex: 297
{
	// Fields
	private readonly ICollection c; // 0x10

	// Properties
	public object[] Items { get; } // 0x0000000180272530 

	// Constructors
	public CollectionDebuggerView(ICollection col); // 0x000000018015C840

}

// Namespace: System.Collections
[Serializable]
public sealed class Comparer : ISerializable, IComparer // TypeDefIndex: 298
{
	// Fields
	public static readonly Comparer Default; // 0x00
	public static readonly Comparer DefaultInvariant; // 0x10
	private CompareInfo m_compareInfo; // 0x10

	// Constructors
	private Comparer(); // 0x00000001800E2000
	public Comparer(CultureInfo culture); // 0x0000000180272A00
	private static Comparer(); // 0x00000001802728E0

	// Methods
	public int Compare(object a, object b); // 0x0000000180272630
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0000000180272810
}

// Namespace: System.Collections
[Serializable]
public abstract class DictionaryBase : IEnumerable, ICollection, IDictionary // TypeDefIndex: 299
{
	// Fields
	private Hashtable hashtable; // 0x10

	// Properties
	private bool System.Collections.IDictionary.IsFixedSize { get; } // 0x000000018011A0F0 
	private bool System.Collections.IDictionary.IsReadOnly { get; } // 0x000000018011A0F0 
	private object System.Collections.IDictionary.Item { get; set; } // 0x00000001802807F0 0x0000000180280860
	private ICollection System.Collections.IDictionary.Keys { get; } // 0x00000001801E2C00 
	private ICollection System.Collections.IDictionary.Values { get; } // 0x00000001801E2C30 
	private bool System.Collections.ICollection.IsSynchronized { get; } // 0x0000000180280530 
	private object System.Collections.ICollection.SyncRoot { get; } // 0x0000000180280560 
	public int Count { get; } // 0x000000018015AE50 
	protected IDictionary Dictionary { get; } // 0x0000000180123590 
	protected Hashtable InnerHashtable { get; } // 0x00000001800E20D0 

	// Constructors
	protected DictionaryBase(); // 0x00000001802809B0

	// Methods
	private void System.Collections.IDictionary.Add(object key, object value); // 0x0000000180280590
	private void System.Collections.IDictionary.Remove(object key); // 0x0000000180280690
	private bool System.Collections.IDictionary.Contains(object key); // 0x00000001801E2A50
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x00000001801E2AD0
	public void Clear(); // 0x00000001802800E0
	public void CopyTo(Array array, int index); // 0x0000000180280140
	private void DoCopy(Array array, int index); // 0x0000000180280300
	public IDictionaryEnumerator GetEnumerator(); // 0x00000001801E2AD0
	protected virtual void OnClear(); // 0x00000001800EA7B0
	protected virtual void OnClearComplete(); // 0x00000001800EA7B0
	protected virtual object OnGet(object key, object currentValue); // 0x0000000180280520
	protected virtual void OnInsert(object key, object value); // 0x00000001800EA7B0
	protected virtual void OnInsertComplete(object key, object value); // 0x00000001800EA7B0
	protected virtual void OnSet(object key, object oldValue, object newValue); // 0x00000001800EA7B0
	protected virtual void OnSetComplete(object key, object oldValue, object newValue); // 0x00000001800EA7B0
	protected virtual void OnRemove(object key, object value); // 0x00000001800EA7B0
	protected virtual void OnRemoveComplete(object key, object value); // 0x00000001800EA7B0
	protected virtual void OnValidate(object key, object value); // 0x00000001800EA7B0
}

// Namespace: System.Collections
[Serializable]
public struct DictionaryEntry // TypeDefIndex: 300
{
	// Fields
	private object _key; // 0x10
	private object _value; // 0x00

	// Properties
	public object Key { get; set; } // 0x0000000180002060 0x0000000180004760
	public object Value { get; set; } // 0x0000000180002040 0x000000018001A5D0

	// Constructors
	public DictionaryEntry(object key, object value); // 0x0000000180008D40

}

// Namespace: System.Collections
[Serializable]
public class Hashtable : IEnumerable, ICloneable, ISerializable, ICollection, IDictionary, IDeserializationCallback // TypeDefIndex: 301
{
	// Fields
	private const int CHAIN_MARKER = -2147483648; // 0x00
	private int inUse; // 0x14
	private int modificationCount; // 0x20
	private float loadFactor; // 0x30
	private Slot[] table; // 0x40
	private int[] hashes; // 0x50
	private int threshold; // 0x60
	private HashKeys hashKeys; // 0x10
	private HashValues hashValues; // 0x10
	private IHashCodeProvider hcpRef; // 0x00
	private IComparer comparerRef; // 0x10
	private SerializationInfo serializationInfo; // 0x1C
	private IEqualityComparer equalityComparer; // 0x24
	private static readonly int[] primeTbl; // 0x30

	// Properties
	protected IComparer comparer { get; set; } // 0x00000001801513A0 0x00000001801140B0
	protected IHashCodeProvider hcp { get; set; } // 0x0000000180113E60 0x0000000180176850
	protected IEqualityComparer EqualityComparer { get; } // 0x0000000180114BE0 
	public virtual int Count { get; } // 0x00000001800ECD10 
	public virtual bool IsSynchronized { get; } // 0x000000018011A0F0 
	public virtual object SyncRoot { get; } // 0x0000000180123590 
	public virtual bool IsFixedSize { get; } // 0x000000018011A0F0 
	public virtual bool IsReadOnly { get; } // 0x000000018011A0F0 
	public virtual ICollection Keys { get; } // 0x0000000180284BE0 
	public virtual ICollection Values { get; } // 0x0000000180284C60 
	public virtual object Item { get; set; } // 0x0000000180284A00 0x0000000180284CE0

	// Constructors
	public Hashtable(); // 0x0000000180284290
	public Hashtable(int capacity, float loadFactor, IHashCodeProvider hcp, IComparer comparer); // 0x00000001802847F0
	public Hashtable(int capacity, float loadFactor); // 0x00000001802849E0
	public Hashtable(int capacity); // 0x00000001802847C0
	internal Hashtable(Hashtable source); // 0x0000000180284360
	public Hashtable(int capacity, IHashCodeProvider hcp, IComparer comparer); // 0x00000001802842C0
	public Hashtable(IDictionary d, float loadFactor, IHashCodeProvider hcp, IComparer comparer); // 0x00000001802844C0
	public Hashtable(IDictionary d, float loadFactor); // 0x00000001802841C0
	public Hashtable(IDictionary d); // 0x0000000180284490
	public Hashtable(IDictionary d, IHashCodeProvider hcp, IComparer comparer); // 0x0000000180284330
	public Hashtable(IHashCodeProvider hcp, IComparer comparer); // 0x0000000180284790
	public Hashtable(SerializationInfo info, StreamingContext context); // 0x0000000180284220
	public Hashtable(IDictionary d, IEqualityComparer equalityComparer); // 0x0000000180284250
	public Hashtable(IDictionary d, float loadFactor, IEqualityComparer equalityComparer); // 0x00000001802841E0
	public Hashtable(IEqualityComparer equalityComparer); // 0x00000001802842F0
	public Hashtable(int capacity, IEqualityComparer equalityComparer); // 0x0000000180284750
	public Hashtable(int capacity, float loadFactor, IEqualityComparer equalityComparer); // 0x0000000180284180
	private static Hashtable(); // 0x0000000180284120

	// Methods
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x0000000180283E30
	public virtual void CopyTo(Array array, int arrayIndex); // 0x0000000180282670
	public virtual void Add(object key, object value); // 0x0000000180281F90
	public virtual void Clear(); // 0x0000000180282090
	public virtual bool Contains(object key); // 0x0000000180282490
	public virtual IDictionaryEnumerator GetEnumerator(); // 0x0000000180282AF0
	public virtual void Remove(object key); // 0x0000000180283BC0
	public virtual bool ContainsKey(object key); // 0x00000001802822C0
	public virtual bool ContainsValue(object value); // 0x00000001802822E0
	public virtual object Clone(); // 0x0000000180282160
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0000000180282C40
	public virtual void OnDeserialization(object sender); // 0x0000000180282F80
	public static Hashtable Synchronized(Hashtable table); // 0x0000000180283DA0
	protected virtual int GetHash(object key); // 0x0000000180282B90
	protected virtual bool KeyEquals(object item, object key); // 0x0000000180282E00
	private void AdjustThreshold(); // 0x0000000180281FB0
	private void SetTable(Slot[] table, int[] hashes); // 0x0000000180283CF0
	private int Find(object key); // 0x0000000180282910
	private void Rehash(); // 0x0000000180283950
	private void PutImpl(object key, object value, bool overwrite); // 0x0000000180283530
	private void CopyToArray(Array arr, int i, EnumeratorMode mode); // 0x00000001802824B0
	internal static bool TestPrime(int x); // 0x0000000180283ED0
	internal static int CalcPrime(int x); // 0x0000000180281FF0
	internal static int ToPrime(int x); // 0x0000000180283F30
}

// Namespace: 
[Serializable]
internal struct Slot // TypeDefIndex: 302
{
	// Fields
	internal object key; // 0x10
	internal object value; // 0x10

}

// Namespace: 
[Serializable]
internal class KeyMarker // TypeDefIndex: 303
{
	// Fields
	public static readonly KeyMarker Removed; // 0x00

	// Constructors
	public KeyMarker(); // 0x00000001800E2000
	private static KeyMarker(); // 0x0000000180284D00

}

// Namespace: 
private enum EnumeratorMode // TypeDefIndex: 304
{
	KEY_MODE = 0,
	VALUE_MODE = 1,
	ENTRY_MODE = 2
}

// Namespace: 
[Serializable]
private sealed class Enumerator : IEnumerator, IDictionaryEnumerator // TypeDefIndex: 305
{
	// Fields
	private Hashtable host; // 0x10
	private int stamp; // 0x1C
	private int pos; // 0x24
	private int size; // 0x30
	private EnumeratorMode mode; // 0x10
	private object currentKey; // 0x68
	private object currentValue; // 0x10
	private static readonly string xstr; // 0x1C

	// Properties
	public DictionaryEntry Entry { get; } // 0x00000001802816A0 
	public object Key { get; } // 0x00000001802817F0 
	public object Value { get; } // 0x00000001802819C0 
	public object Current { get; } // 0x00000001802815C0 

	// Constructors
	public Enumerator(Hashtable host, EnumeratorMode mode); // 0x0000000180281250
	public Enumerator(Hashtable host); // 0x00000001802811A0
	private static Enumerator(); // 0x0000000180281040

	// Methods
	private void FailFast(); // 0x0000000180280AF0
	public void Reset(); // 0x0000000180280F50
	public bool MoveNext(); // 0x0000000180280CC0
}

// Namespace: 
[Serializable]
private class HashKeys : IEnumerable, ICollection // TypeDefIndex: 306
{
	// Fields
	private Hashtable host; // 0x10

	// Properties
	public virtual int Count { get; } // 0x000000018015AE50 
	public virtual bool IsSynchronized { get; } // 0x0000000180280530 
	public virtual object SyncRoot { get; } // 0x0000000180280560 

	// Constructors
	public HashKeys(Hashtable host); // 0x0000000180281C60

	// Methods
	public virtual void CopyTo(Array array, int arrayIndex); // 0x0000000180281A30
	public virtual IEnumerator GetEnumerator(); // 0x0000000180281BC0
}

// Namespace: 
[Serializable]
private class HashValues : IEnumerable, ICollection // TypeDefIndex: 307
{
	// Fields
	private Hashtable host; // 0x10

	// Properties
	public virtual int Count { get; } // 0x000000018015AE50 
	public virtual bool IsSynchronized { get; } // 0x0000000180280530 
	public virtual object SyncRoot { get; } // 0x0000000180280560 

	// Constructors
	public HashValues(Hashtable host); // 0x0000000180281F10

	// Methods
	public virtual void CopyTo(Array array, int arrayIndex); // 0x0000000180281CE0
	public virtual IEnumerator GetEnumerator(); // 0x0000000180281E70
}

// Namespace: 
[Serializable]
private class SyncHashtable : Hashtable, IEnumerable // TypeDefIndex: 308
{
	// Fields
	private Hashtable host; // 0x68

	// Properties
	public override int Count { get; } // 0x0000000180289CF0 
	public override bool IsSynchronized { get; } // 0x000000018010E420 
	public override object SyncRoot { get; } // 0x0000000180289EB0 
	public override bool IsFixedSize { get; } // 0x0000000180289D20 
	public override bool IsReadOnly { get; } // 0x0000000180289D50 
	public override ICollection Keys { get; } // 0x0000000180289DB0 
	public override ICollection Values { get; } // 0x0000000180289EE0 
	public override object Item { get; set; } // 0x0000000180289D80 0x0000000180289FE0

	// Constructors
	public SyncHashtable(Hashtable host); // 0x0000000180289B10
	internal SyncHashtable(SerializationInfo info, StreamingContext context); // 0x0000000180289BC0

	// Methods
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x0000000180289A70
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0000000180289920
	public override void CopyTo(Array array, int arrayIndex); // 0x0000000180289850
	public override void Add(object key, object value); // 0x0000000180289460
	public override void Clear(); // 0x0000000180289560
	public override bool Contains(object key); // 0x0000000180289820
	public override IDictionaryEnumerator GetEnumerator(); // 0x0000000180289880
	public override void Remove(object key); // 0x0000000180289980
	public override bool ContainsKey(object key); // 0x00000001802897C0
	public override bool ContainsValue(object value); // 0x00000001802897F0
	public override object Clone(); // 0x0000000180289640
}

// Namespace: System.Collections
public interface IComparer // TypeDefIndex: 309
{
	// Methods
	int Compare(object x, object y);
}

// Namespace: System.Collections
public interface IDictionary : IEnumerable, ICollection // TypeDefIndex: 310
{
	// Properties
	bool IsFixedSize { get; }
	bool IsReadOnly { get; }
	object Item { get; set; }
	ICollection Keys { get; }
	ICollection Values { get; }

	// Methods
	void Add(object key, object value);
	void Clear();
	bool Contains(object key);
	IDictionaryEnumerator GetEnumerator();
	void Remove(object key);
}

// Namespace: System.Collections
public interface IDictionaryEnumerator : IEnumerator // TypeDefIndex: 311
{
	// Properties
	DictionaryEntry Entry { get; }
	object Key { get; }
	object Value { get; }

}

// Namespace: System.Collections
public interface IEqualityComparer // TypeDefIndex: 312
{
	// Methods
	bool Equals(object x, object y);
	int GetHashCode(object obj);
}

// Namespace: System.Collections
public interface IHashCodeProvider // TypeDefIndex: 313
{
	// Methods
	int GetHashCode(object obj);
}

// Namespace: System.Collections
[Serializable]
public class Queue : IEnumerable, ICloneable, ICollection // TypeDefIndex: 314
{
	// Fields
	private object[] _array; // 0x10
	private int _head; // 0x1C
	private int _size; // 0x24
	private int _tail; // 0x30
	private int _growFactor; // 0x10
	private int _version; // 0x1C

	// Properties
	public virtual int Count { get; } // 0x00000001801AE2C0 
	public virtual bool IsSynchronized { get; } // 0x000000018011A0F0 
	public virtual object SyncRoot { get; } // 0x0000000180123590 

	// Constructors
	public Queue(); // 0x0000000180286310
	public Queue(int capacity); // 0x0000000180286360
	public Queue(ICollection col); // 0x00000001802860F0
	public Queue(int capacity, float growFactor); // 0x0000000180286370

	// Methods
	public virtual void CopyTo(Array array, int index); // 0x0000000180285A80
	public virtual IEnumerator GetEnumerator(); // 0x0000000180285E40
	public virtual object Clone(); // 0x00000001802858D0
	public virtual void Clear(); // 0x0000000180285860
	public virtual bool Contains(object obj); // 0x0000000180285990
	public virtual object Dequeue(); // 0x0000000180285C30
	public virtual void Enqueue(object obj); // 0x0000000180285CF0
	public virtual object Peek(); // 0x0000000180285EB0
	public static Queue Synchronized(Queue queue); // 0x0000000180285F40
	public virtual object[] ToArray(); // 0x0000000180286010
	public virtual void TrimToSize(); // 0x0000000180286080
	private void grow(); // 0x0000000180286470
}

// Namespace: 
private class SyncQueue : Queue // TypeDefIndex: 315
{
	// Fields
	private Queue queue; // 0x30

	// Properties
	public override int Count { get; } // 0x000000018028AA60 
	public override bool IsSynchronized { get; } // 0x000000018010E420 
	public override object SyncRoot { get; } // 0x000000018028AB30 

	// Constructors
	internal SyncQueue(Queue queue); // 0x000000018028AA00

	// Methods
	public override void CopyTo(Array array, int index); // 0x000000018028A420
	public override IEnumerator GetEnumerator(); // 0x000000018028A6A0
	public override object Clone(); // 0x000000018028A1A0
	public override void Clear(); // 0x000000018028A0E0
	public override void TrimToSize(); // 0x000000018028A940
	public override bool Contains(object obj); // 0x000000018028A340
	public override object Dequeue(); // 0x000000018028A4F0
	public override void Enqueue(object obj); // 0x000000018028A5D0
	public override object Peek(); // 0x000000018028A780
	public override object[] ToArray(); // 0x000000018028A860
}

// Namespace: 
[Serializable]
private class QueueEnumerator : IEnumerator, ICloneable // TypeDefIndex: 316
{
	// Fields
	private Queue queue; // 0x10
	private int _version; // 0x1C
	private int current; // 0x00

	// Properties
	public virtual object Current { get; } // 0x00000001802857A0 

	// Constructors
	internal QueueEnumerator(Queue q); // 0x0000000180285760

	// Methods
	public object Clone(); // 0x00000001802855C0
	public virtual bool MoveNext(); // 0x0000000180285650
	public virtual void Reset(); // 0x00000001802856E0
}

// Namespace: System.Collections
[Serializable]
public abstract class ReadOnlyCollectionBase : IEnumerable, ICollection // TypeDefIndex: 317
{
	// Fields
	private ArrayList list; // 0x10

	// Properties
	private object System.Collections.ICollection.SyncRoot { get; } // 0x00000001801E2C30 
	private bool System.Collections.ICollection.IsSynchronized { get; } // 0x00000001801E2C00 
	public virtual int Count { get; } // 0x000000018015AE50 
	protected ArrayList InnerList { get; } // 0x00000001800E20D0 

	// Constructors
	protected ReadOnlyCollectionBase(); // 0x0000000180286620

	// Methods
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x00000001802682B0
	private void System.Collections.ICollection.CopyTo(Array array, int index); // 0x0000000180286550
	public virtual IEnumerator GetEnumerator(); // 0x0000000180286520
}

// Namespace: System.Collections
[Serializable]
public class SortedList : IEnumerable, ICloneable, ICollection, IDictionary // TypeDefIndex: 318
{
	// Fields
	private static readonly int INITIAL_SIZE; // 0x00
	private int inUse; // 0x14
	private int modificationCount; // 0x20
	private Slot[] table; // 0x10
	private IComparer comparer; // 0x10
	private int defaultCapacity; // 0x00

	// Properties
	public virtual int Count { get; } // 0x00000001800ECD10 
	public virtual bool IsSynchronized { get; } // 0x000000018011A0F0 
	public virtual object SyncRoot { get; } // 0x0000000180123590 
	public virtual bool IsFixedSize { get; } // 0x000000018011A0F0 
	public virtual bool IsReadOnly { get; } // 0x000000018011A0F0 
	public virtual ICollection Keys { get; } // 0x0000000180288600 
	public virtual ICollection Values { get; } // 0x0000000180288660 
	public virtual object Item { get; set; } // 0x0000000180288540 0x00000001802887C0
	public virtual int Capacity { get; set; } // 0x000000018022AAB0 0x00000001802886C0

	// Constructors
	public SortedList(); // 0x00000001802884C0
	public SortedList(int initialCapacity); // 0x0000000180288530
	public SortedList(IComparer comparer, int capacity); // 0x0000000180288070
	public SortedList(IComparer comparer); // 0x0000000180288170
	public SortedList(IDictionary d); // 0x0000000180288060
	public SortedList(IDictionary d, IComparer comparer); // 0x0000000180288220
	private static SortedList(); // 0x0000000180288020

	// Methods
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x0000000180287ED0
	public virtual void Add(object key, object value); // 0x0000000180286680
	public virtual void Clear(); // 0x00000001802866A0
	public virtual bool Contains(object key); // 0x0000000180286880
	public virtual IDictionaryEnumerator GetEnumerator(); // 0x0000000180287180
	public virtual void Remove(object key); // 0x0000000180287BF0
	public virtual void CopyTo(Array array, int arrayIndex); // 0x0000000180286B70
	public virtual object Clone(); // 0x0000000180286720
	public virtual IList GetKeyList(); // 0x0000000180287240
	public virtual IList GetValueList(); // 0x0000000180287360
	public virtual void RemoveAt(int index); // 0x0000000180287AC0
	public virtual int IndexOfKey(object key); // 0x00000001802873C0
	public virtual int IndexOfValue(object value); // 0x0000000180287480
	public virtual bool ContainsKey(object key); // 0x00000001802867A0
	public virtual bool ContainsValue(object value); // 0x0000000180286860
	public virtual object GetByIndex(int index); // 0x00000001802870C0
	public virtual void SetByIndex(int index, object value); // 0x0000000180287CD0
	public virtual object GetKey(int index); // 0x00000001802872A0
	public static SortedList Synchronized(SortedList list); // 0x0000000180287DA0
	public virtual void TrimToSize(); // 0x0000000180287F30
	private void Resize(int n, bool copy); // 0x0000000180287C30
	private void EnsureCapacity(int n, int free); // 0x0000000180286E00
	private void PutImpl(object key, object value, bool overwrite); // 0x0000000180287590
	private object GetImpl(object key); // 0x00000001802871E0
	private void InitTable(int capacity, bool forceSize); // 0x0000000180287520
	private void CopyToArray(Array arr, int i, EnumeratorMode mode); // 0x0000000180286940
	private int Find(object key); // 0x0000000180286F80
}

// Namespace: 
[Serializable]
internal struct Slot // TypeDefIndex: 319
{
	// Fields
	internal object key; // 0x10
	internal object value; // 0x10

}

// Namespace: 
private enum EnumeratorMode // TypeDefIndex: 320
{
	KEY_MODE = 0,
	VALUE_MODE = 1,
	ENTRY_MODE = 2
}

// Namespace: 
private sealed class Enumerator : IEnumerator, ICloneable, IDictionaryEnumerator // TypeDefIndex: 321
{
	// Fields
	private SortedList host; // 0x10
	private int stamp; // 0x1C
	private int pos; // 0x24
	private int size; // 0x30
	private EnumeratorMode mode; // 0x00
	private object currentKey; // 0x10
	private object currentValue; // 0x00
	private bool invalid; // 0x18
	private static readonly string xstr; // 0x20

	// Properties
	public DictionaryEntry Entry { get; } // 0x0000000180281730 
	public object Key { get; } // 0x0000000180281860 
	public object Value { get; } // 0x0000000180281910 
	public object Current { get; } // 0x0000000180281380 

	// Constructors
	public Enumerator(SortedList host, EnumeratorMode mode); // 0x0000000180281080
	public Enumerator(SortedList host); // 0x0000000180281190
	private static Enumerator(); // 0x0000000180281000

	// Methods
	public void Reset(); // 0x0000000180280E80
	public bool MoveNext(); // 0x0000000180280BA0
	public object Clone(); // 0x0000000180280A40
}

// Namespace: 
[Serializable]
private class ListKeys : IEnumerable, ICollection, IList // TypeDefIndex: 322
{
	// Fields
	private SortedList host; // 0x10

	// Properties
	public virtual int Count { get; } // 0x00000001802850F0 
	public virtual bool IsSynchronized { get; } // 0x0000000180285120 
	public virtual object SyncRoot { get; } // 0x000000018015AE50 
	public virtual bool IsFixedSize { get; } // 0x000000018010E420 
	public virtual bool IsReadOnly { get; } // 0x000000018010E420 
	public virtual object Item { get; set; } // 0x0000000180285150 0x0000000180285180

	// Constructors
	public ListKeys(SortedList host); // 0x0000000180285070

	// Methods
	public virtual void CopyTo(Array array, int arrayIndex); // 0x0000000180284E90
	public virtual int Add(object value); // 0x0000000180284DA0
	public virtual void Clear(); // 0x0000000180284E00
	public virtual bool Contains(object key); // 0x0000000180284E60
	public virtual int IndexOf(object key); // 0x0000000180284F20
	public virtual void Insert(int index, object value); // 0x0000000180284F50
	public virtual void Remove(object value); // 0x0000000180285010
	public virtual void RemoveAt(int index); // 0x0000000180284FB0
	public virtual IEnumerator GetEnumerator(); // 0x0000000180284EC0
}

// Namespace: 
[Serializable]
private class ListValues : IEnumerable, ICollection, IList // TypeDefIndex: 323
{
	// Fields
	private SortedList host; // 0x10

	// Properties
	public virtual int Count { get; } // 0x00000001802850F0 
	public virtual bool IsSynchronized { get; } // 0x0000000180285120 
	public virtual object SyncRoot { get; } // 0x000000018015AE50 
	public virtual bool IsFixedSize { get; } // 0x000000018010E420 
	public virtual bool IsReadOnly { get; } // 0x000000018010E420 
	public virtual object Item { get; set; } // 0x0000000180285530 0x0000000180285560

	// Constructors
	public ListValues(SortedList host); // 0x00000001802854B0

	// Methods
	public virtual void CopyTo(Array array, int arrayIndex); // 0x00000001802852D0
	public virtual int Add(object value); // 0x00000001802851E0
	public virtual void Clear(); // 0x0000000180285240
	public virtual bool Contains(object value); // 0x00000001802852A0
	public virtual int IndexOf(object value); // 0x0000000180285360
	public virtual void Insert(int index, object value); // 0x0000000180285390
	public virtual void Remove(object value); // 0x0000000180285450
	public virtual void RemoveAt(int index); // 0x00000001802853F0
	public virtual IEnumerator GetEnumerator(); // 0x0000000180285300
}

// Namespace: 
private class SynchedSortedList : SortedList // TypeDefIndex: 324
{
	// Fields
	private SortedList host; // 0x30

	// Properties
	public override int Capacity { get; set; } // 0x000000018028C8D0 0x000000018028CDC0
	public override int Count { get; } // 0x000000018028C9C0 
	public override bool IsSynchronized { get; } // 0x000000018010E420 
	public override object SyncRoot { get; } // 0x000000018028CC90 
	public override bool IsFixedSize { get; } // 0x000000018028C9F0 
	public override bool IsReadOnly { get; } // 0x000000018028CA20 
	public override ICollection Keys { get; } // 0x000000018028CB90 
	public override ICollection Values { get; } // 0x000000018028CCC0 
	public override object Item { get; set; } // 0x000000018028CA50 0x000000018028CEB0

	// Constructors
	public SynchedSortedList(SortedList host); // 0x000000018028C7E0

	// Methods
	public override void CopyTo(Array array, int arrayIndex); // 0x000000018028BC00
	public override void Add(object key, object value); // 0x000000018028B5C0
	public override void Clear(); // 0x000000018028B6C0
	public override bool Contains(object key); // 0x000000018028BB00
	public override IDictionaryEnumerator GetEnumerator(); // 0x000000018028BE00
	public override void Remove(object key); // 0x000000018028C510
	public override bool ContainsKey(object key); // 0x000000018028B900
	public override bool ContainsValue(object value); // 0x000000018028BA00
	public override object Clone(); // 0x000000018028B7A0
	public override object GetByIndex(int index); // 0x000000018028BD00
	public override object GetKey(int index); // 0x000000018028C010
	public override IList GetKeyList(); // 0x000000018028BF00
	public override IList GetValueList(); // 0x000000018028C110
	public override void RemoveAt(int index); // 0x000000018028C420
	public override int IndexOfKey(object key); // 0x000000018028C220
	public override int IndexOfValue(object val); // 0x000000018028C320
	public override void SetByIndex(int index, object value); // 0x000000018028C600
	public override void TrimToSize(); // 0x000000018028C700
}

// Namespace: System.Collections
[Serializable]
public class Stack : IEnumerable, ICloneable, ICollection // TypeDefIndex: 325
{
	// Fields
	private const int default_capacity = 16; // 0x00
	private object[] contents; // 0x18
	private int current; // 0x20
	private int count; // 0x28
	private int capacity; // 0x00
	private int modCount; // 0x10

	// Properties
	public virtual int Count { get; } // 0x00000001801AE2C0 
	public virtual bool IsSynchronized { get; } // 0x000000018011A0F0 
	public virtual object SyncRoot { get; } // 0x0000000180123590 

	// Constructors
	public Stack(); // 0x00000001802890E0
	public Stack(ICollection col); // 0x0000000180289140
	public Stack(int initialCapacity); // 0x00000001802893C0

	// Methods
	private void Resize(int ncapacity); // 0x0000000180288F20
	public static Stack Synchronized(Stack stack); // 0x0000000180288FA0
	public virtual void Clear(); // 0x0000000180288900
	public virtual object Clone(); // 0x0000000180288960
	public virtual bool Contains(object obj); // 0x00000001802889E0
	public virtual void CopyTo(Array array, int index); // 0x0000000180288AE0
	public virtual IEnumerator GetEnumerator(); // 0x0000000180288C80
	public virtual object Peek(); // 0x0000000180288CF0
	public virtual object Pop(); // 0x0000000180288D80
	public virtual void Push(object obj); // 0x0000000180288E70
	public virtual object[] ToArray(); // 0x0000000180289070
}

// Namespace: 
[Serializable]
private class SyncStack : Stack // TypeDefIndex: 326
{
	// Fields
	private Stack stack; // 0x28

	// Properties
	public override int Count { get; } // 0x000000018028B4C0 
	public override bool IsSynchronized { get; } // 0x000000018010E420 
	public override object SyncRoot { get; } // 0x000000018028B590 

	// Constructors
	internal SyncStack(Stack s); // 0x000000018028B450

	// Methods
	public override void Clear(); // 0x000000018028AB60
	public override object Clone(); // 0x000000018028AC20
	public override bool Contains(object obj); // 0x000000018028AE20
	public override void CopyTo(Array array, int index); // 0x000000018028AF00
	public override IEnumerator GetEnumerator(); // 0x000000018028AFD0
	public override object Peek(); // 0x000000018028B0E0
	public override object Pop(); // 0x000000018028B1C0
	public override void Push(object obj); // 0x000000018028B2A0
	public override object[] ToArray(); // 0x000000018028B370
}

// Namespace: 
private class Enumerator : IEnumerator, ICloneable // TypeDefIndex: 327
{
	// Fields
	private const int EOF = -1; // 0x00
	private const int BOF = -2; // 0x10
	private Stack stack; // 0x1C
	private int modCount; // 0x10
	private int current; // 0x00

	// Properties
	public virtual object Current { get; } // 0x00000001802812D0 

	// Constructors
	internal Enumerator(Stack s); // 0x0000000180281210

	// Methods
	public object Clone(); // 0x0000000180270250
	public virtual bool MoveNext(); // 0x0000000180280DE0
	public virtual void Reset(); // 0x0000000180280F80
}

// Namespace: System.Configuration.Assemblies
[Serializable]
public struct AssemblyHash : ICloneable // TypeDefIndex: 328
{
	// Fields
	private AssemblyHashAlgorithm _algorithm; // 0x10
	private byte[] _value; // 0x00
	public static readonly AssemblyHash Empty; // 0x10

	// Properties
	public AssemblyHashAlgorithm Algorithm { get; set; } // 0x00000001800034B0 0x0000000180006A40

	// Constructors
	public AssemblyHash(AssemblyHashAlgorithm algorithm, byte[] value); // 0x000000018001A600
	public AssemblyHash(byte[] value); // 0x000000018001A5E0
	private static AssemblyHash(); // 0x0000000180270150

	// Methods
	public object Clone(); // 0x000000018001A500
	public byte[] GetValue(); // 0x0000000180002040
	public void SetValue(byte[] value); // 0x000000018001A5D0
}

// Namespace: System.Configuration.Assemblies
[Serializable]
public enum AssemblyHashAlgorithm // TypeDefIndex: 329
{
	None = 0,
	MD5 = 32771,
	SHA1 = 32772
}

// Namespace: System.Configuration.Assemblies
[Serializable]
public enum AssemblyVersionCompatibility // TypeDefIndex: 330
{
	SameMachine = 1,
	SameProcess = 2,
	SameDomain = 3
}

// Namespace: System.Deployment.Internal
public static class InternalActivationContextHelper // TypeDefIndex: 331
{
	// Methods
	public static object GetActivationContextData(ActivationContext appInfo); // 0x0000000180373F70
	public static object GetApplicationComponentManifest(ActivationContext appInfo); // 0x0000000180373FC0
	public static byte[] GetApplicationManifestBytes(ActivationContext appInfo); // 0x0000000180374010
	public static object GetDeploymentComponentManifest(ActivationContext appInfo); // 0x0000000180374060
	public static byte[] GetDeploymentManifestBytes(ActivationContext appInfo); // 0x00000001803740B0
	public static bool IsFirstRun(ActivationContext appInfo); // 0x0000000180374100
	public static void PrepareForExecution(ActivationContext appInfo); // 0x0000000180374150
}

// Namespace: System.Deployment.Internal
public static class InternalApplicationIdentityHelper // TypeDefIndex: 332
{
	// Methods
	public static object GetActivationContextData(ActivationContext appInfo); // 0x00000001803741A0
	public static object GetInternalAppId(ApplicationIdentity id); // 0x00000001803741F0
}

// Namespace: System.Diagnostics.CodeAnalysis
public sealed class SuppressMessageAttribute : Attribute // TypeDefIndex: 333
{
	// Fields
	private string category; // 0x10
	private string checkId; // 0x20
	private string justification; // 0x30
	private string messageId; // 0x10
	private string scope; // 0x00
	private string target; // 0x00

	// Properties
	public string Category { get; } // 0x00000001800E20D0 
	public string CheckId { get; } // 0x00000001800EAEC0 
	public string Justification { get; set; } // 0x00000001800EAEB0 0x00000001800EAED0
	public string MessageId { get; set; } // 0x000000018013BF80 0x000000018015B760
	public string Scope { get; set; } // 0x00000001801146E0 0x0000000180114BF0
	public string Target { get; set; } // 0x0000000180119440 0x000000018015B770

	// Constructors
	public SuppressMessageAttribute(string category, string checkId); // 0x000000018015EE90

}

// Namespace: System.Diagnostics.SymbolStore
public interface ISymbolBinder // TypeDefIndex: 334
{
	// Methods
	ISymbolReader GetReader(int importer, string filename, string searchPath);
}

// Namespace: System.Diagnostics.SymbolStore
public interface ISymbolBinder1 // TypeDefIndex: 335
{
	// Methods
	ISymbolReader GetReader(IntPtr importer, string filename, string searchPath);
}

// Namespace: System.Diagnostics.SymbolStore
public interface ISymbolDocument // TypeDefIndex: 336
{
	// Properties
	Guid CheckSumAlgorithmId { get; }
	Guid DocumentType { get; }
	bool HasEmbeddedSource { get; }
	Guid Language { get; }
	Guid LanguageVendor { get; }
	int SourceLength { get; }
	string URL { get; }

	// Methods
	int FindClosestLine(int line);
	byte[] GetCheckSum();
	byte[] GetSourceRange(int startLine, int startColumn, int endLine, int endColumn);
}

// Namespace: System.Diagnostics.SymbolStore
public interface ISymbolDocumentWriter // TypeDefIndex: 337
{
	// Methods
	void SetCheckSum(Guid algorithmId, byte[] checkSum);
	void SetSource(byte[] source);
}

// Namespace: System.Diagnostics.SymbolStore
public interface ISymbolMethod // TypeDefIndex: 338
{
	// Properties
	ISymbolScope RootScope { get; }
	int SequencePointCount { get; }
	SymbolToken Token { get; }

	// Methods
	ISymbolNamespace GetNamespace();
	int GetOffset(ISymbolDocument document, int line, int column);
	ISymbolVariable[] GetParameters();
	int[] GetRanges(ISymbolDocument document, int line, int column);
	ISymbolScope GetScope(int offset);
	void GetSequencePoints(int[] offsets, ISymbolDocument[] documents, int[] lines, int[] columns, int[] endLines, int[] endColumns);
	bool GetSourceStartEnd(ISymbolDocument[] docs, int[] lines, int[] columns);
}

// Namespace: System.Diagnostics.SymbolStore
public interface ISymbolNamespace // TypeDefIndex: 339
{
	// Properties
	string Name { get; }

	// Methods
	ISymbolNamespace[] GetNamespaces();
	ISymbolVariable[] GetVariables();
}

// Namespace: System.Diagnostics.SymbolStore
public interface ISymbolReader // TypeDefIndex: 340
{
	// Properties
	SymbolToken UserEntryPoint { get; }

	// Methods
	ISymbolDocument GetDocument(string url, Guid language, Guid languageVendor, Guid documentType);
	ISymbolDocument[] GetDocuments();
	ISymbolVariable[] GetGlobalVariables();
	ISymbolMethod GetMethod(SymbolToken method);
	ISymbolMethod GetMethod(SymbolToken method, int version);
	ISymbolMethod GetMethodFromDocumentPosition(ISymbolDocument document, int line, int column);
	ISymbolNamespace[] GetNamespaces();
	byte[] GetSymAttribute(SymbolToken parent, string name);
	ISymbolVariable[] GetVariables(SymbolToken parent);
}

// Namespace: System.Diagnostics.SymbolStore
public interface ISymbolScope // TypeDefIndex: 341
{
	// Properties
	int EndOffset { get; }
	ISymbolMethod Method { get; }
	ISymbolScope Parent { get; }
	int StartOffset { get; }

	// Methods
	ISymbolScope[] GetChildren();
	ISymbolVariable[] GetLocals();
	ISymbolNamespace[] GetNamespaces();
}

// Namespace: System.Diagnostics.SymbolStore
public interface ISymbolVariable // TypeDefIndex: 342
{
	// Properties
	int AddressField1 { get; }
	int AddressField2 { get; }
	int AddressField3 { get; }
	SymAddressKind AddressKind { get; }
	object Attributes { get; }
	int EndOffset { get; }
	string Name { get; }
	int StartOffset { get; }

	// Methods
	byte[] GetSignature();
}

// Namespace: System.Diagnostics.SymbolStore
public interface ISymbolWriter // TypeDefIndex: 343
{
	// Methods
	void Close();
	void CloseMethod();
	void CloseNamespace();
	void CloseScope(int endOffset);
	ISymbolDocumentWriter DefineDocument(string url, Guid language, Guid languageVendor, Guid documentType);
	void DefineField(SymbolToken parent, string name, FieldAttributes attributes, byte[] signature, SymAddressKind addrKind, int addr1, int addr2, int addr3);
	void DefineGlobalVariable(string name, FieldAttributes attributes, byte[] signature, SymAddressKind addrKind, int addr1, int addr2, int addr3);
	void DefineLocalVariable(string name, FieldAttributes attributes, byte[] signature, SymAddressKind addrKind, int addr1, int addr2, int addr3, int startOffset, int endOffset);
	void DefineParameter(string name, ParameterAttributes attributes, int sequence, SymAddressKind addrKind, int addr1, int addr2, int addr3);
	void DefineSequencePoints(ISymbolDocumentWriter document, int[] offsets, int[] lines, int[] columns, int[] endLines, int[] endColumns);
	void Initialize(IntPtr emitter, string filename, bool fFullBuild);
	void OpenMethod(SymbolToken method);
	void OpenNamespace(string name);
	int OpenScope(int startOffset);
	void SetMethodSourceRange(ISymbolDocumentWriter startDoc, int startLine, int startColumn, ISymbolDocumentWriter endDoc, int endLine, int endColumn);
	void SetScopeRange(int scopeID, int startOffset, int endOffset);
	void SetSymAttribute(SymbolToken parent, string name, byte[] data);
	void SetUnderlyingWriter(IntPtr underlyingWriter);
	void SetUserEntryPoint(SymbolToken entryMethod);
	void UsingNamespace(string fullName);
}

// Namespace: System.Diagnostics.SymbolStore
[Serializable]
public enum SymAddressKind // TypeDefIndex: 344
{
	ILOffset = 1,
	NativeRVA = 2,
	NativeRegister = 3,
	NativeRegisterRelative = 4,
	NativeOffset = 5,
	NativeRegisterRegister = 6,
	NativeRegisterStack = 7,
	NativeStackRegister = 8,
	BitField = 9,
	NativeSectionOffset = 10
}

// Namespace: System.Diagnostics.SymbolStore
public class SymDocumentType // TypeDefIndex: 345
{
	// Fields
	public static readonly Guid Text; // 0x00

	// Constructors
	public SymDocumentType(); // 0x00000001800E2000

}

// Namespace: System.Diagnostics.SymbolStore
public class SymLanguageType // TypeDefIndex: 346
{
	// Fields
	public static readonly Guid Basic; // 0x00
	public static readonly Guid C; // 0x20
	public static readonly Guid Cobol; // 0x40
	public static readonly Guid CPlusPlus; // 0x60
	public static readonly Guid CSharp; // 0x80
	public static readonly Guid ILAssembly; // 0xA0
	public static readonly Guid Java; // 0x10
	public static readonly Guid JScript; // 0x14
	public static readonly Guid MCPlusPlus; // 0x10
	public static readonly Guid Pascal; // 0x00
	public static readonly Guid SMC; // 0x00

	// Constructors
	public SymLanguageType(); // 0x00000001800E2000

}

// Namespace: System.Diagnostics.SymbolStore
public class SymLanguageVendor // TypeDefIndex: 347
{
	// Fields
	public static readonly Guid Microsoft; // 0x00

	// Constructors
	public SymLanguageVendor(); // 0x00000001800E2000

}

// Namespace: System.Diagnostics.SymbolStore
public struct SymbolToken // TypeDefIndex: 348
{
	// Fields
	private int _val; // 0x10

	// Constructors
	public SymbolToken(int val); // 0x0000000180006A40

	// Methods
	public override bool Equals(object obj); // 0x0000000180009A00
	public bool Equals(SymbolToken obj); // 0x00000001800034A0
	public override int GetHashCode(); // 0x00000001800051D0
	public int GetToken(); // 0x00000001800034B0
	public static bool op_Equality(SymbolToken a, SymbolToken b); // 0x00000001802130C0
	public static bool op_Inequality(SymbolToken a, SymbolToken b); // 0x00000001802130D0
}

// Namespace: System.Diagnostics
public sealed class DebuggableAttribute : Attribute // TypeDefIndex: 349
{
	// Fields
	private bool JITTrackingEnabledFlag; // 0x10
	private bool JITOptimizerDisabledFlag; // 0x14
	private DebuggingModes debuggingModes; // 0x10

	// Properties
	public DebuggingModes DebuggingFlags { get; } // 0x0000000180156360 
	public bool IsJITTrackingEnabled { get; } // 0x0000000180113840 
	public bool IsJITOptimizerDisabled { get; } // 0x0000000180147560 

	// Constructors
	public DebuggableAttribute(bool isJITTrackingEnabled, bool isJITOptimizerDisabled); // 0x000000018036AA30
	public DebuggableAttribute(DebuggingModes modes); // 0x000000018036AA80

}

// Namespace: 
public enum DebuggingModes // TypeDefIndex: 350
{
	None = 0,
	Default = 1,
	IgnoreSymbolStoreSequencePoints = 2,
	EnableEditAndContinue = 4,
	DisableOptimizations = 256
}

// Namespace: System.Diagnostics
public sealed class Debugger // TypeDefIndex: 351
{
	// Fields
	public static readonly string DefaultCategory; // 0x00

	// Properties
	public static bool IsAttached { get; } // 0x000000018036ACF0 

	// Constructors
	public Debugger(); // 0x00000001800E2000
	private static Debugger(); // 0x000000018036AC80

	// Methods
	private static bool IsAttached_internal(); // 0x000000018036AC20
	public static void Break(); // 0x00000001800EA7B0
	public static bool IsLogging(); // 0x000000018011A0F0
	public static bool Launch(); // 0x000000018036AC30
	public static void Log(int level, string category, string message); // 0x00000001800EA7B0
}

// Namespace: System.Diagnostics
public sealed class DebuggerBrowsableAttribute : Attribute // TypeDefIndex: 352
{
	// Fields
	private DebuggerBrowsableState state; // 0x10

	// Properties
	public DebuggerBrowsableState State { get; } // 0x00000001800ECD10 

	// Constructors
	public DebuggerBrowsableAttribute(DebuggerBrowsableState state); // 0x000000018010E510

}

// Namespace: System.Diagnostics
public enum DebuggerBrowsableState // TypeDefIndex: 353
{
	Never = 0,
	Collapsed = 2,
	RootHidden = 3
}

// Namespace: System.Diagnostics
public sealed class DebuggerDisplayAttribute : Attribute // TypeDefIndex: 354
{
	// Fields
	private string value; // 0x10
	private string type; // 0x20
	private string name; // 0x30
	private string target_type_name; // 0x10
	private Type target_type; // 0x20

	// Properties
	public string Value { get; } // 0x00000001800E20D0 
	public Type Target { get; set; } // 0x00000001801146E0 0x000000018036AB90
	public string TargetTypeName { get; set; } // 0x000000018013BF80 0x000000018015B760
	public string Type { get; set; } // 0x00000001800EAEC0 0x00000001800EAEE0
	public string Name { get; set; } // 0x00000001800EAEB0 0x00000001800EAED0

	// Constructors
	public DebuggerDisplayAttribute(string value); // 0x000000018036AAC0

}

// Namespace: System.Diagnostics
[Serializable]
public sealed class DebuggerNonUserCodeAttribute : Attribute // TypeDefIndex: 355
{
	// Constructors
	public DebuggerNonUserCodeAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Diagnostics
[Serializable]
public sealed class DebuggerStepThroughAttribute : Attribute // TypeDefIndex: 356
{
	// Constructors
	public DebuggerStepThroughAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Diagnostics
[Serializable]
public sealed class DebuggerStepperBoundaryAttribute : Attribute // TypeDefIndex: 357
{
	// Constructors
	public DebuggerStepperBoundaryAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Diagnostics
public sealed class DebuggerTypeProxyAttribute : Attribute // TypeDefIndex: 358
{
	// Fields
	private string proxy_type_name; // 0x10
	private string target_type_name; // 0x20
	private Type target_type; // 0x10

	// Properties
	public string ProxyTypeName { get; } // 0x00000001800E20D0 
	public Type Target { get; set; } // 0x00000001800EAEB0 0x0000000180208520
	public string TargetTypeName { get; set; } // 0x00000001800EAEC0 0x00000001800EAEE0

	// Constructors
	public DebuggerTypeProxyAttribute(string typeName); // 0x00000001801137E0
	public DebuggerTypeProxyAttribute(Type type); // 0x00000001802084D0

}

// Namespace: System.Diagnostics
public sealed class DebuggerVisualizerAttribute : Attribute // TypeDefIndex: 359
{
	// Fields
	private string description; // 0x10
	private string visualizerSourceName; // 0x20
	private string visualizerName; // 0x30
	private string targetTypeName; // 0x00
	private Type target; // 0x14

	// Properties
	public string Description { get; set; } // 0x00000001800E20D0 0x0000000180114C30
	public Type Target { get; set; } // 0x00000001801146E0 0x0000000180208890
	public string TargetTypeName { get; set; } // 0x000000018013BF80 0x000000018015B760
	public string VisualizerObjectSourceTypeName { get; } // 0x00000001800EAEC0 
	public string VisualizerTypeName { get; } // 0x00000001800EAEB0 

	// Constructors
	public DebuggerVisualizerAttribute(string visualizerTypeName); // 0x0000000180208560
	public DebuggerVisualizerAttribute(Type visualizer); // 0x0000000180208760
	public DebuggerVisualizerAttribute(string visualizerTypeName, string visualizerObjectSourceTypeName); // 0x0000000180208680
	public DebuggerVisualizerAttribute(string visualizerTypeName, Type visualizerObjectSource); // 0x00000001802087F0
	public DebuggerVisualizerAttribute(Type visualizer, string visualizerObjectSourceTypeName); // 0x00000001802086C0
	public DebuggerVisualizerAttribute(Type visualizer, Type visualizerObjectSource); // 0x0000000180208590

}

// Namespace: System.Diagnostics
[Serializable]
public class StackFrame // TypeDefIndex: 360
{
	// Fields
	public const int OFFSET_UNKNOWN = -1; // 0x00
	private int ilOffset; // 0x14
	private int nativeOffset; // 0x20
	private MethodBase methodBase; // 0x2C
	private string fileName; // 0x00
	private int lineNumber; // 0x18
	private int columnNumber; // 0x00
	private string internalMethodName; // 0x14

	// Constructors
	public StackFrame(); // 0x0000000180212080
	public StackFrame(bool fNeedFileInfo); // 0x00000001802120F0
	public StackFrame(int skipFrames); // 0x0000000180212200
	public StackFrame(int skipFrames, bool fNeedFileInfo); // 0x0000000180212170
	public StackFrame(string fileName, int lineNumber); // 0x0000000180212280
	public StackFrame(string fileName, int lineNumber, int colNumber); // 0x0000000180211FE0

	// Methods
	private static bool get_frame_info(int skip, bool needFileInfo, out MethodBase method, out int iloffset, out int native_offset, out string file, out int line, out int column); // 0x0000000180212310
	public virtual int GetFileLineNumber(); // 0x0000000180119420
	public virtual int GetFileColumnNumber(); // 0x0000000180118700
	public virtual string GetFileName(); // 0x00000001800EAEB0
	internal string GetSecureFileName(); // 0x0000000180211DD0
	public virtual int GetILOffset(); // 0x00000001800ECD10
	public virtual MethodBase GetMethod(); // 0x00000001800EAEC0
	public virtual int GetNativeOffset(); // 0x0000000180156360
	internal string GetInternalMethodName(); // 0x00000001801146E0
	public override string ToString(); // 0x0000000180211E40
}

// Namespace: System.Diagnostics
[Serializable]
public class StackTrace // TypeDefIndex: 361
{
	// Fields
	public const int METHODS_TO_SKIP = 0; // 0x00
	private StackFrame[] frames; // 0x18
	private bool debug_info; // 0x00

	// Properties
	public virtual int FrameCount { get; } // 0x0000000180212E60 

	// Constructors
	public StackTrace(); // 0x00000001802128F0
	public StackTrace(bool fNeedFileInfo); // 0x00000001802128B0
	public StackTrace(int skipFrames); // 0x0000000180212950
	public StackTrace(int skipFrames, bool fNeedFileInfo); // 0x00000001802129D0
	public StackTrace(Exception e); // 0x0000000180212920
	public StackTrace(Exception e, bool fNeedFileInfo); // 0x00000001802129A0
	public StackTrace(Exception e, int skipFrames); // 0x0000000180212DE0
	public StackTrace(Exception e, int skipFrames, bool fNeedFileInfo); // 0x0000000180212980
	internal StackTrace(Exception e, int skipFrames, bool fNeedFileInfo, bool returnNativeFrames); // 0x0000000180212AD0
	public StackTrace(StackFrame frame); // 0x0000000180212A10
	public StackTrace(Thread targetThread, bool needFileInfo); // 0x0000000180212E00

	// Methods
	private void init_frames(int skipFrames, bool fNeedFileInfo); // 0x0000000180212E80
	private static StackFrame[] get_trace(Exception e, int skipFrames, bool fNeedFileInfo); // 0x0000000180212E70
	public virtual StackFrame GetFrame(int index); // 0x0000000180212320
	public virtual StackFrame[] GetFrames(); // 0x00000001800E20D0
	public override string ToString(); // 0x0000000180212390
}

// Namespace: System.Globalization
[Serializable]
public abstract class Calendar : ICloneable // TypeDefIndex: 362
{
	// Fields
	public const int CurrentEra = 0; // 0x00
	[NonSerialized]	private bool m_isReadOnly; // 0x14
	[NonSerialized]	internal int twoDigitYearMax; // 0x20
	[NonSerialized]	private int M_MaxYearValue; // 0x30
	[NonSerialized]	internal string[] M_AbbrEraNames; // 0x10
	[NonSerialized]	internal string[] M_EraNames; // 0x00
	internal int m_currentEraValue; // 0x00

	// Properties
	internal virtual int M_DaysInWeek { get; } // 0x00000001801FBFD0 
	public abstract int[] Eras { get; }
	public virtual CalendarAlgorithmType AlgorithmType { get; } // 0x00000001800EA8C0 
	public virtual DateTime MaxSupportedDateTime { get; } // 0x00000001801FC070 
	public virtual DateTime MinSupportedDateTime { get; } // 0x00000001801FC0E0 
	public bool IsReadOnly { get; } // 0x0000000180113840 
	internal virtual int M_MaxYear { get; } // 0x00000001801FBFE0 
	public virtual int TwoDigitYearMax { get; set; } // 0x0000000180156360 0x00000001801FC4D0
	internal string[] AbbreviatedEraNames { get; set; } // 0x00000001801FBE10 0x00000001801FC150
	internal string[] EraNames { get; set; } // 0x00000001801FBEF0 0x00000001801FC310

	// Constructors
	protected Calendar(); // 0x00000001801FBDF0

	// Methods
	internal string M_ValidValues(object a, object b); // 0x00000001801FBB10
	internal void M_ArgumentInRange(string param, int arg, int a, int b); // 0x00000001801FB760
	internal void M_CheckHMSM(int hour, int minute, int second, int milliseconds); // 0x00000001801FB830
	public virtual object Clone(); // 0x00000001801FB100
	public virtual int GetLeapMonth(int year); // 0x00000001801FB2A0
	public virtual int GetLeapMonth(int year, int era); // 0x00000001801FB210
	public static Calendar ReadOnly(Calendar calendar); // 0x00000001801FBBB0
	internal void CheckReadOnly(); // 0x00000001801FB090
	internal virtual void M_CheckYE(int year, int era); // 0x00000001800EA7B0
	public virtual DateTime AddDays(DateTime time, int days); // 0x00000001801FAD50
	public virtual DateTime AddHours(DateTime time, int hours); // 0x00000001801FADE0
	public virtual DateTime AddMilliseconds(DateTime time, double milliseconds); // 0x00000001801FAE70
	public virtual DateTime AddMinutes(DateTime time, int minutes); // 0x00000001801FAF00
	public abstract DateTime AddMonths(DateTime time, int months);
	public virtual DateTime AddSeconds(DateTime time, int seconds); // 0x00000001801FAF90
	public virtual DateTime AddWeeks(DateTime time, int weeks); // 0x00000001801FB020
	public abstract DateTime AddYears(DateTime time, int years);
	public abstract int GetDayOfMonth(DateTime time);
	public abstract DayOfWeek GetDayOfWeek(DateTime time);
	public abstract int GetDayOfYear(DateTime time);
	public virtual int GetDaysInMonth(int year, int month); // 0x00000001801FB190
	public abstract int GetDaysInMonth(int year, int month, int era);
	public virtual int GetDaysInYear(int year); // 0x00000001801FB1C0
	public abstract int GetDaysInYear(int year, int era);
	public abstract int GetEra(DateTime time);
	public virtual int GetHour(DateTime time); // 0x00000001801FB1E0
	public virtual double GetMilliseconds(DateTime time); // 0x00000001801FB340
	public virtual int GetMinute(DateTime time); // 0x00000001801FB370
	public abstract int GetMonth(DateTime time);
	public virtual int GetMonthsInYear(int year); // 0x00000001801FB3A0
	public abstract int GetMonthsInYear(int year, int era);
	public virtual int GetSecond(DateTime time); // 0x00000001801FB3C0
	internal int M_DiffDays(DateTime timeA, DateTime timeB); // 0x00000001801FB920
	internal DateTime M_GetFirstDayOfSecondWeekOfYear(int year, CalendarWeekRule rule, DayOfWeek firstDayOfWeek); // 0x00000001801FB980
	public virtual int GetWeekOfYear(DateTime time, CalendarWeekRule rule, DayOfWeek firstDayOfWeek); // 0x00000001801FB3F0
	public abstract int GetYear(DateTime time);
	public virtual bool IsLeapDay(int year, int month, int day); // 0x00000001801FB6E0
	public abstract bool IsLeapDay(int year, int month, int day, int era);
	public virtual bool IsLeapMonth(int year, int month); // 0x00000001801FB710
	public abstract bool IsLeapMonth(int year, int month, int era);
	public virtual bool IsLeapYear(int year); // 0x00000001801FB740
	public abstract bool IsLeapYear(int year, int era);
	public virtual DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond); // 0x00000001801FBC60
	public abstract DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
	public virtual int ToFourDigitYear(int year); // 0x00000001801FBCE0
}

// Namespace: System.Globalization
public enum CalendarAlgorithmType // TypeDefIndex: 363
{
	Unknown = 0,
	SolarCalendar = 1,
	LunarCalendar = 2,
	LunisolarCalendar = 3
}

// Namespace: System.Globalization
[Serializable]
public enum CalendarWeekRule // TypeDefIndex: 364
{
	FirstDay = 0,
	FirstFullWeek = 1,
	FirstFourDayWeek = 2
}

// Namespace: System.Globalization
internal class CCMath // TypeDefIndex: 365
{
	// Constructors
	public CCMath(); // 0x00000001800E2000

	// Methods
	public static double round(double x); // 0x00000001801FAD00
	public static double mod(double x, double y); // 0x00000001801FACC0
	public static int div(int x, int y); // 0x00000001801FAC00
	public static int mod(int x, int y); // 0x00000001801FAC80
	public static int div_mod(out int remainder, int x, int y); // 0x00000001801FAC30
	public static int signum(double x); // 0x00000001801FAD30
	public static int signum(int x); // 0x00000001801FAD10
	public static double amod(double x, double y); // 0x00000001801FABA0
	public static int amod(int x, int y); // 0x00000001801FAB60
}

// Namespace: System.Globalization
internal class CCFixed // TypeDefIndex: 366
{
	// Constructors
	public CCFixed(); // 0x00000001800E2000

	// Methods
	public static DateTime ToDateTime(int date); // 0x00000001801F7E80
	public static DateTime ToDateTime(int date, int hour, int minute, int second, double milliseconds); // 0x00000001801F7D90
	public static int FromDateTime(DateTime time); // 0x00000001801F7D60
	public static DayOfWeek day_of_week(int date); // 0x00000001801F7EC0
	public static int kday_on_or_before(int date, int k); // 0x00000001801F7FF0
	public static int kday_on_or_after(int date, int k); // 0x00000001801F7FB0
	public static int kd_nearest(int date, int k); // 0x00000001801F7EF0
	public static int kday_after(int date, int k); // 0x00000001801F7F30
	public static int kday_before(int date, int k); // 0x00000001801F7F70
}

// Namespace: System.Globalization
internal class CCGregorianCalendar // TypeDefIndex: 367
{
	// Fields
	private const int epoch = 1; // 0x00

	// Constructors
	public CCGregorianCalendar(); // 0x00000001800E2000

	// Methods
	public static bool is_leap_year(int year); // 0x00000001801F89A0
	public static int fixed_from_dmy(int day, int month, int year); // 0x00000001801F88C0
	public static int year_from_fixed(int date); // 0x00000001801F8B80
	public static void my_from_fixed(out int month, out int year, int date); // 0x00000001801F8A50
	public static void dmy_from_fixed(out int day, out int month, out int year, int date); // 0x00000001801F8860
	public static int month_from_fixed(int date); // 0x00000001801F8A20
	public static int day_from_fixed(int date); // 0x00000001801F8770
	public static int date_difference(int dayA, int monthA, int yearA, int dayB, int monthB, int yearB); // 0x00000001801F8730
	public static int day_number(int day, int month, int year); // 0x00000001801F87C0
	public static int days_remaining(int day, int month, int year); // 0x00000001801F8820
	public static DateTime AddMonths(DateTime time, int months); // 0x00000001801F8030
	public static DateTime AddYears(DateTime time, int years); // 0x00000001801F8190
	public static int GetDayOfMonth(DateTime time); // 0x00000001801F82D0
	public static int GetDayOfYear(DateTime time); // 0x00000001801F8340
	public static int GetDaysInMonth(int year, int month); // 0x00000001801F8400
	public static int GetDaysInYear(int year); // 0x00000001801F8450
	public static int GetMonth(DateTime time); // 0x00000001801F8560
	public static int GetYear(DateTime time); // 0x00000001801F85B0
	public static bool IsLeapDay(int year, int month, int day); // 0x00000001801F85F0
	public static DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int milliseconds); // 0x00000001801F8630
}

// Namespace: 
public enum Month // TypeDefIndex: 368
{
	january = 1,
	february = 2,
	march = 3,
	april = 4,
	may = 5,
	june = 6,
	july = 7,
	august = 8,
	september = 9,
	october = 10,
	november = 11,
	december = 12
}

// Namespace: System.Globalization
internal class CCJulianCalendar // TypeDefIndex: 369
{
	// Fields
	private const int epoch = -1; // 0x00

	// Constructors
	public CCJulianCalendar(); // 0x00000001800E2000

	// Methods
	public static bool is_leap_year(int year); // 0x00000001801FA930
	public static int fixed_from_dmy(int day, int month, int year); // 0x00000001801FA850
	public static int year_from_fixed(int date); // 0x00000001801FAB20
	public static void my_from_fixed(out int month, out int year, int date); // 0x00000001801FA9A0
	public static void dmy_from_fixed(out int day, out int month, out int year, int date); // 0x00000001801FA7F0
	public static int month_from_fixed(int date); // 0x00000001801FA970
	public static int day_from_fixed(int date); // 0x00000001801FA700
	public static int date_difference(int dayA, int monthA, int yearA, int dayB, int monthB, int yearB); // 0x00000001801FA6C0
	public static int day_number(int day, int month, int year); // 0x00000001801FA750
	public static int days_remaining(int day, int month, int year); // 0x00000001801FA7B0
}

// Namespace: 
public enum Month // TypeDefIndex: 370
{
	january = 1,
	february = 2,
	march = 3,
	april = 4,
	may = 5,
	june = 6,
	july = 7,
	august = 8,
	september = 9,
	october = 10,
	november = 11,
	december = 12
}

// Namespace: System.Globalization
internal class CCHebrewCalendar // TypeDefIndex: 371
{
	// Fields
	private const int epoch = -1373427; // 0x00

	// Constructors
	public CCHebrewCalendar(); // 0x00000001800E2000

	// Methods
	public static bool is_leap_year(int year); // 0x00000001801F9A80
	public static int last_month_of_year(int year); // 0x00000001801F9C80
	public static int elapsed_days(int year); // 0x00000001801F98B0
	public static int new_year_delay(int year); // 0x00000001801F9EC0
	public static int last_day_of_month(int month, int year); // 0x00000001801F9AC0
	public static bool long_heshvan(int year); // 0x00000001801F9CC0
	public static bool short_kislev(int year); // 0x00000001801FA0A0
	public static int days_in_year(int year); // 0x00000001801F97A0
	public static int fixed_from_dmy(int day, int month, int year); // 0x00000001801F9990
	public static int year_from_fixed(int date); // 0x00000001801FA110
	public static void my_from_fixed(out int month, out int year, int date); // 0x00000001801F9D60
	public static void dmy_from_fixed(out int day, out int month, out int year, int date); // 0x00000001801F9850
	public static int month_from_fixed(int date); // 0x00000001801F9D30
	public static int day_from_fixed(int date); // 0x00000001801F9710
	public static int date_difference(int dayA, int monthA, int yearA, int dayB, int monthB, int yearB); // 0x00000001801F96B0
	public static int day_number(int day, int month, int year); // 0x00000001801F9760
	public static int days_remaining(int day, int month, int year); // 0x00000001801F97F0
}

// Namespace: 
public enum Month // TypeDefIndex: 372
{
	nisan = 1,
	iyyar = 2,
	sivan = 3,
	tammuz = 4,
	av = 5,
	elul = 6,
	tishri = 7,
	heshvan = 8,
	kislev = 9,
	teveth = 10,
	shevat = 11,
	adar = 12,
	adar_I = 12,
	adar_II = 13
}

// Namespace: System.Globalization
internal class CCHijriCalendar // TypeDefIndex: 373
{
	// Fields
	private const int epoch = 227014; // 0x00

	// Constructors
	public CCHijriCalendar(); // 0x00000001800E2000

	// Methods
	public static bool is_leap_year(int year); // 0x00000001801FA4F0
	public static int fixed_from_dmy(int day, int month, int year); // 0x00000001801FA470
	public static int year_from_fixed(int date); // 0x00000001801FA690
	public static void my_from_fixed(out int month, out int year, int date); // 0x00000001801FA5D0
	public static void dmy_from_fixed(out int day, out int month, out int year, int date); // 0x00000001801FA3D0
	public static int month_from_fixed(int date); // 0x00000001801FA530
	public static int day_from_fixed(int date); // 0x00000001801FA250
	public static int date_difference(int dayA, int monthA, int yearA, int dayB, int monthB, int yearB); // 0x00000001801FA180
	public static int day_number(int day, int month, int year); // 0x00000001801FA2E0
	public static int days_remaining(int day, int month, int year); // 0x00000001801FA380
}

// Namespace: 
public enum Month // TypeDefIndex: 374
{
	muharram = 1,
	safar = 2,
	rabi_I = 3,
	rabi_II = 4,
	jumada_I = 5,
	jumada_II = 6,
	rajab = 7,
	shaban = 8,
	ramadan = 9,
	shawwal = 10,
	dhu_al_quada = 11,
	dhu_al_hijja = 12
}

// Namespace: System.Globalization
internal class CCEastAsianLunisolarCalendar // TypeDefIndex: 375
{
	// Fields
	private const int initial_epact = 29; // 0x00

	// Constructors
	public CCEastAsianLunisolarCalendar(); // 0x00000001800E2000

	// Methods
	public static int fixed_from_dmy(int day, int month, int year); // 0x00000001801F71D0
	public static int year_from_fixed(int date); // 0x00000001801F7290
	public static void my_from_fixed(out int month, out int year, int date); // 0x00000001801F7230
	public static void dmy_from_fixed(out int day, out int month, out int year, int date); // 0x00000001801F7170
	public static DateTime AddMonths(DateTime date, int months); // 0x00000001801F6D20
	public static DateTime AddYears(DateTime date, int years); // 0x00000001801F6D80
	public static int GetDayOfMonth(DateTime date); // 0x00000001801F6DE0
	public static int GetDayOfYear(DateTime date); // 0x00000001801F6E40
	public static int GetDaysInMonth(int gyear, int month); // 0x00000001801F6EA0
	public static int GetDaysInYear(int year); // 0x00000001801F6F00
	public static int GetMonth(DateTime date); // 0x00000001801F6F60
	public static bool IsLeapMonth(int gyear, int month); // 0x00000001801F6FC0
	public static bool IsLeapYear(int gyear); // 0x00000001801F7080
	public static DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond); // 0x00000001801F7110
}

// Namespace: System.Globalization
[Serializable]
internal class CCGregorianEraHandler // TypeDefIndex: 376
{
	// Fields
	private SortedList _Eras; // 0x10

	// Properties
	public int[] Eras { get; } // 0x00000001801F9580 

	// Constructors
	public CCGregorianEraHandler(); // 0x00000001801F92F0

	// Methods
	public void appendEra(int nr, int rd_start, int rd_end); // 0x00000001801F9350
	public void appendEra(int nr, int rd_start); // 0x00000001801F9430
	public int GregorianYear(int year, int era); // 0x00000001801F8FA0
	public int EraYear(out int era, int date); // 0x00000001801F8CF0
	public void CheckDateTime(DateTime time); // 0x00000001801F8C40
	public bool ValidDate(int date); // 0x00000001801F9070
	public bool ValidEra(int era); // 0x00000001801F9270
}

// Namespace: 
[Serializable]
private struct Era // TypeDefIndex: 377
{
	// Fields
	private int _nr; // 0x10
	private int _start; // 0x18
	private int _gregorianYearStart; // 0x20
	private int _end; // 0x10
	private int _maxYear; // 0x18

	// Properties
	public int Nr { get; } // 0x00000001800034B0 

	// Constructors
	public Era(int nr, int start, int end); // 0x00000001800099E0

	// Methods
	public int GregorianYear(int year); // 0x00000001800099C0
	public bool Covers(int date); // 0x0000000180009990
	public int EraYear(out int era, int date); // 0x00000001800099A0
}

// Namespace: System.Globalization
[Serializable]
internal class CCEastAsianLunisolarEraHandler // TypeDefIndex: 378
{
	// Fields
	private SortedList _Eras; // 0x10

	// Properties
	public int[] Eras { get; } // 0x00000001801F7C30 

	// Constructors
	public CCEastAsianLunisolarEraHandler(); // 0x00000001801F79A0

	// Methods
	public void appendEra(int nr, int rd_start, int rd_end); // 0x00000001801F7B50
	public void appendEra(int nr, int rd_start); // 0x00000001801F7A00
	public int GregorianYear(int year, int era); // 0x00000001801F7650
	public int EraYear(out int era, int date); // 0x00000001801F73A0
	public void CheckDateTime(DateTime time); // 0x00000001801F72F0
	public bool ValidDate(int date); // 0x00000001801F7720
	public bool ValidEra(int era); // 0x00000001801F7920
}

// Namespace: 
[Serializable]
private struct Era // TypeDefIndex: 379
{
	// Fields
	private int _nr; // 0x10
	private int _start; // 0x18
	private int _gregorianYearStart; // 0x20
	private int _end; // 0x00
	private int _maxYear; // 0x08

	// Properties
	public int Nr { get; } // 0x00000001800034B0 

	// Constructors
	public Era(int nr, int start, int end); // 0x00000001800099F0

	// Methods
	public int GregorianYear(int year); // 0x00000001800099D0
	public bool Covers(int date); // 0x0000000180009990
	public int EraYear(out int era, int date); // 0x00000001800099B0
}

// Namespace: System.Globalization
public sealed class CharUnicodeInfo // TypeDefIndex: 380
{
	// Constructors
	private CharUnicodeInfo(); // 0x00000001800E2000

	// Methods
	public static int GetDecimalDigitValue(char ch); // 0x00000001801FC5C0
	public static int GetDecimalDigitValue(string s, int index); // 0x00000001801FC920
	public static int GetDigitValue(char ch); // 0x00000001801FC9B0
	public static int GetDigitValue(string s, int index); // 0x00000001801FCA90
	public static double GetNumericValue(char ch); // 0x00000001801FCBB0
	public static double GetNumericValue(string s, int index); // 0x00000001801FCB20
	public static UnicodeCategory GetUnicodeCategory(char ch); // 0x00000001801FD240
	public static UnicodeCategory GetUnicodeCategory(string s, int index); // 0x00000001801FD2A0
}

// Namespace: System.Globalization
[Serializable]
public class ChineseLunisolarCalendar : EastAsianLunisolarCalendar // TypeDefIndex: 381
{
	// Fields
	public const int ChineseEra = 1; // 0x00
	internal static readonly CCEastAsianLunisolarEraHandler era_handler; // 0x08
	private static DateTime ChineseMin; // 0x10
	private static DateTime ChineseMax; // 0x1C

	// Properties
	public override int[] Eras { get; } // 0x00000001801FD750 
	public override DateTime MinSupportedDateTime { get; } // 0x00000001801FD9A0 
	public override DateTime MaxSupportedDateTime { get; } // 0x00000001801FD930 

	// Constructors
	public ChineseLunisolarCalendar(); // 0x00000001801FD6E0
	private static ChineseLunisolarCalendar(); // 0x00000001801FD3F0

	// Methods
	public override int GetEra(DateTime time); // 0x00000001801FD340
}

// Namespace: System.Globalization
[Serializable]
internal sealed class CodePageDataItem // TypeDefIndex: 382
{
	// Fields
	private string m_bodyName; // 0x10
	private int m_codePage; // 0x1C
	private int m_dataIndex; // 0x28
	private string m_description; // 0x38
	private uint m_flags; // 0x00
	private string m_headerName; // 0x00
	private int m_uiFamilyCodePage; // 0x18
	private string m_webName; // 0x28

	// Constructors
	private CodePageDataItem(); // 0x00000001800E2000

}

// Namespace: System.Globalization
[Serializable]
public class CompareInfo : IDeserializationCallback // TypeDefIndex: 383
{
	// Fields
	private const CompareOptions ValidCompareOptions_NoStringSort = 1342177311; // 0x00
	private const CompareOptions ValidCompareOptions = 1879048223; // 0x00
	private static readonly bool useManagedCollation; // 0x18
	private int culture; // 0x28
	[NonSerialized]	private string icu_name; // 0x08
	private int win32LCID; // 0x10
	private string m_name; // 0x00
	[NonSerialized]	private SimpleCollator collator; // 0x00
	private static Hashtable collators; // 0x00
	[NonSerialized]	private static object monitor; // 0x00

	// Properties
	internal static bool UseManagedCollation { get; } // 0x00000001801FFDE0 
	public int LCID { get; } // 0x00000001800ECD10 
	public virtual string Name { get; } // 0x00000001800EAEC0 

	// Constructors
	private CompareInfo(); // 0x00000001800E2000
	internal CompareInfo(CultureInfo ci); // 0x00000001801FFA00
	private static CompareInfo(); // 0x00000001801FF8D0

	// Methods
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender); // 0x00000001801FF710
	private void construct_compareinfo(string locale); // 0x00000001801B80A0
	private void free_internal_collator(); // 0x00000001801B80A0
	private int internal_compare(string str1, int offset1, int length1, string str2, int offset2, int length2, CompareOptions options); // 0x00000001801FFEA0
	private void assign_sortkey(object key, string source, CompareOptions options); // 0x00000001801FFDD0
	private int internal_index(string source, int sindex, int count, char value, CompareOptions options, bool first); // 0x0000000180200040
	private int internal_index(string source, int sindex, int count, string value, CompareOptions options, bool first); // 0x0000000180200060
	protected override void Finalize(); // 0x00000001801FE0A0
	private int internal_compare_managed(string str1, int offset1, int length1, string str2, int offset2, int length2, CompareOptions options); // 0x00000001801FFEB0
	private int internal_compare_switch(string str1, int offset1, int length1, string str2, int offset2, int length2, CompareOptions options); // 0x00000001801FFEE0
	public virtual int Compare(string string1, string string2); // 0x00000001801FDB80
	public virtual int Compare(string string1, string string2, CompareOptions options); // 0x00000001801FDA40
	public virtual int Compare(string string1, int offset1, string string2, int offset2); // 0x00000001801FDA10
	public virtual int Compare(string string1, int offset1, string string2, int offset2, CompareOptions options); // 0x00000001801FDE40
	public virtual int Compare(string string1, int offset1, int length1, string string2, int offset2, int length2); // 0x00000001801FDB30
	public virtual int Compare(string string1, int offset1, int length1, string string2, int offset2, int length2, CompareOptions options); // 0x00000001801FDBB0
	public override bool Equals(object value); // 0x00000001801FE010
	public static CompareInfo GetCompareInfo(int culture); // 0x00000001801FE1F0
	public static CompareInfo GetCompareInfo(string name); // 0x00000001801FE130
	public static CompareInfo GetCompareInfo(int culture, Assembly assembly); // 0x00000001801FE440
	public static CompareInfo GetCompareInfo(string name, Assembly assembly); // 0x00000001801FE270
	public override int GetHashCode(); // 0x00000001800ECD10
	public virtual SortKey GetSortKey(string source); // 0x00000001801FE5E0
	public virtual SortKey GetSortKey(string source, CompareOptions options); // 0x00000001801FE600
	public virtual int IndexOf(string source, char value); // 0x00000001801FEC80
	public virtual int IndexOf(string source, string value); // 0x00000001801FEBD0
	public virtual int IndexOf(string source, char value, CompareOptions options); // 0x00000001801FE930
	public virtual int IndexOf(string source, char value, int startIndex); // 0x00000001801FEC40
	public virtual int IndexOf(string source, string value, CompareOptions options); // 0x00000001801FED00
	public virtual int IndexOf(string source, string value, int startIndex); // 0x00000001801FECC0
	public virtual int IndexOf(string source, char value, int startIndex, CompareOptions options); // 0x00000001801FEB90
	public virtual int IndexOf(string source, char value, int startIndex, int count); // 0x00000001801FE900
	public virtual int IndexOf(string source, string value, int startIndex, CompareOptions options); // 0x00000001801FEB50
	public virtual int IndexOf(string source, string value, int startIndex, int count); // 0x00000001801FEC10
	private int internal_index_managed(string s, int sindex, int count, char c, CompareOptions opt, bool first); // 0x00000001802000F0
	private int internal_index_switch(string s, int sindex, int count, char c, CompareOptions opt, bool first); // 0x0000000180200170
	public virtual int IndexOf(string source, char value, int startIndex, int count, CompareOptions options); // 0x00000001801FE740
	private int internal_index_managed(string s1, int sindex, int count, string s2, CompareOptions opt, bool first); // 0x0000000180200070
	private int internal_index_switch(string s1, int sindex, int count, string s2, CompareOptions opt, bool first); // 0x00000001802002E0
	public virtual int IndexOf(string source, string value, int startIndex, int count, CompareOptions options); // 0x00000001801FE970
	public virtual bool IsPrefix(string source, string prefix); // 0x00000001801FED40
	public virtual bool IsPrefix(string source, string prefix, CompareOptions options); // 0x00000001801FED70
	public virtual bool IsSuffix(string source, string suffix); // 0x00000001801FF0E0
	public virtual bool IsSuffix(string source, string suffix, CompareOptions options); // 0x00000001801FEF80
	public virtual int LastIndexOf(string source, char value); // 0x00000001801FF140
	public virtual int LastIndexOf(string source, string value); // 0x00000001801FF6C0
	public virtual int LastIndexOf(string source, char value, CompareOptions options); // 0x00000001801FF270
	public virtual int LastIndexOf(string source, char value, int startIndex); // 0x00000001801FF660
	public virtual int LastIndexOf(string source, string value, CompareOptions options); // 0x00000001801FF220
	public virtual int LastIndexOf(string source, string value, int startIndex); // 0x00000001801FF110
	public virtual int LastIndexOf(string source, char value, int startIndex, CompareOptions options); // 0x00000001801FF1C0
	public virtual int LastIndexOf(string source, char value, int startIndex, int count); // 0x00000001801FF690
	public virtual int LastIndexOf(string source, string value, int startIndex, CompareOptions options); // 0x00000001801FF1F0
	public virtual int LastIndexOf(string source, string value, int startIndex, int count); // 0x00000001801FF190
	public virtual int LastIndexOf(string source, char value, int startIndex, int count, CompareOptions options); // 0x00000001801FF4A0
	public virtual int LastIndexOf(string source, string value, int startIndex, int count, CompareOptions options); // 0x00000001801FF2C0
	public static bool IsSortable(char ch); // 0x00000001801FEED0
	public static bool IsSortable(string text); // 0x00000001801FEF20
	public override string ToString(); // 0x00000001801FF850
}

// Namespace: System.Globalization
[Serializable]
public enum CompareOptions // TypeDefIndex: 384
{
	None = 0,
	IgnoreCase = 1,
	IgnoreNonSpace = 2,
	IgnoreSymbols = 4,
	IgnoreKanaType = 8,
	IgnoreWidth = 16,
	OrdinalIgnoreCase = 268435456,
	StringSort = 536870912,
	Ordinal = 1073741824
}

// Namespace: System.Globalization
[Serializable]
public class CultureInfo : ICloneable, IFormatProvider // TypeDefIndex: 385
{
	// Fields
	private const int NumOptionalCalendars = 5; // 0x00
	private const int GregorianTypeMask = 16777215; // 0x00
	private const int CalendarTypeBits = 24; // 0x00
	private const int InvariantCultureId = 127; // 0x10
	private static CultureInfo invariant_culture_info; // 0x14
	private static object shared_table_lock; // 0x1C
	internal static int BootstrapCultureID; // 0x24
	private bool m_isReadOnly; // 0x30
	private int cultureID; // 0x40
	[NonSerialized]	private int parent_lcid; // 0x50
	[NonSerialized]	private int specific_lcid; // 0x60
	[NonSerialized]	private int datetime_index; // 0x70
	[NonSerialized]	private int number_index; // 0x80
	private bool m_useUserOverride; // 0x90
	[NonSerialized]	private NumberFormatInfo numInfo; // 0xA0
	private DateTimeFormatInfo dateTimeInfo; // 0xB0
	private TextInfo textInfo; // 0xC0
	private string m_name; // 0xD0
	[NonSerialized]	private string displayname; // 0x20
	[NonSerialized]	private string englishname; // 0x30
	[NonSerialized]	private string nativename; // 0x10
	[NonSerialized]	private string iso3lang; // 0x00
	[NonSerialized]	private string iso2lang; // 0x00
	[NonSerialized]	private string icu_name; // 0x00
	[NonSerialized]	private string win3lang; // 0x00
	[NonSerialized]	private string territory; // 0x10
	private CompareInfo compareInfo; // 0x00
	[NonSerialized]	private readonly void * calendar_data; // 0x00
	[NonSerialized]	private readonly void * textinfo_data; // 0x00
	[NonSerialized]	private Calendar[] optional_calendars; // 0x08
	[NonSerialized]	private CultureInfo parent_culture; // 0x18
	private int m_dataItem; // 0x28
	private Calendar calendar; // 0x38
	[NonSerialized]	private bool constructed; // 0x10
	[NonSerialized]	internal byte[] cached_serialized_form; // 0x20
	private static readonly string MSG_READONLY; // 0x30
	private static Hashtable shared_by_number; // 0x40
	private static Hashtable shared_by_name; // 0x50
	private static Dictionary`2<string, int> <>f__switch$map19; // 0x60
	private static Dictionary`2<string, int> <>f__switch$map1A; // 0x70

	// Properties
	public static CultureInfo InvariantCulture { get; } // 0x0000000180202E40 
	public static CultureInfo CurrentCulture { get; } // 0x0000000180202A00 
	public static CultureInfo CurrentUICulture { get; } // 0x0000000180202A60 
	internal string Territory { get; } // 0x000000018017D2F0 
	public virtual int LCID { get; } // 0x0000000180156360 
	public virtual string Name { get; } // 0x0000000180113E60 
	public virtual string NativeName { get; } // 0x0000000180202F10 
	public virtual Calendar Calendar { get; } // 0x00000001802028A0 
	public virtual Calendar[] OptionalCalendars { get; } // 0x0000000180203090 
	public virtual CultureInfo Parent { get; } // 0x0000000180203150 
	public virtual TextInfo TextInfo { get; } // 0x0000000180203270 
	public virtual string ThreeLetterISOLanguageName { get; } // 0x0000000180203370 
	public virtual string ThreeLetterWindowsLanguageName { get; } // 0x00000001802033B0 
	public virtual string TwoLetterISOLanguageName { get; } // 0x00000001802033F0 
	public bool UseUserOverride { get; } // 0x00000001800EA930 
	internal string IcuName { get; } // 0x0000000180202DA0 
	public virtual CompareInfo CompareInfo { get; } // 0x00000001802028D0 
	public virtual bool IsNeutralCulture { get; } // 0x0000000180202EB0 
	public virtual NumberFormatInfo NumberFormat { get; set; } // 0x0000000180202F50 0x00000001802036D0
	public virtual DateTimeFormatInfo DateTimeFormat { get; set; } // 0x0000000180202AC0 0x00000001802035D0
	public virtual string DisplayName { get; } // 0x0000000180202D20 
	public virtual string EnglishName { get; } // 0x0000000180202D60 
	public static CultureInfo InstalledUICulture { get; } // 0x0000000180202DE0 
	public bool IsReadOnly { get; } // 0x0000000180113840 

	// Constructors
	public CultureInfo(int culture); // 0x0000000180202820
	public CultureInfo(int culture, bool useUserOverride); // 0x0000000180202650
	private CultureInfo(int culture, bool useUserOverride, bool read_only); // 0x00000001802026B0
	public CultureInfo(string name); // 0x0000000180202670
	public CultureInfo(string name, bool useUserOverride); // 0x0000000180202690
	private CultureInfo(string name, bool useUserOverride, bool read_only); // 0x0000000180202390
	private CultureInfo(); // 0x0000000180202800
	private static CultureInfo(); // 0x00000001802022B0

	// Methods
	public static CultureInfo CreateSpecificCulture(string name); // 0x00000001802012F0
	internal static CultureInfo ConstructCurrentCulture(); // 0x00000001802009E0
	internal static CultureInfo ConstructCurrentUICulture(); // 0x0000000180200B10
	public void ClearCachedData(); // 0x0000000180200510
	public virtual object Clone(); // 0x0000000180200590
	public override bool Equals(object value); // 0x0000000180201580
	public static CultureInfo[] GetCultures(CultureTypes types); // 0x0000000180201D90
	public override int GetHashCode(); // 0x0000000180156360
	public static CultureInfo ReadOnly(CultureInfo ci); // 0x00000001802020F0
	public override string ToString(); // 0x0000000180113E60
	internal static bool IsIDNeutralCulture(int lcid); // 0x0000000180202000
	internal void CheckNeutral(); // 0x0000000180200450
	public virtual object GetFormat(Type formatType); // 0x0000000180201F10
	private void Construct(); // 0x0000000180201240
	private bool ConstructInternalLocaleFromName(string locale); // 0x0000000180200D00
	private bool ConstructInternalLocaleFromLcid(int lcid); // 0x0000000180200CE0
	private static bool ConstructInternalLocaleFromSpecificName(CultureInfo ci, string name); // 0x0000000180200EA0
	private static bool ConstructInternalLocaleFromCurrentLocale(CultureInfo ci); // 0x0000000180200C80
	private bool construct_internal_locale_from_lcid(int lcid); // 0x0000000180202860
	private bool construct_internal_locale_from_name(string name); // 0x0000000180202870
	private static bool construct_internal_locale_from_specific_name(CultureInfo ci, string name); // 0x0000000180202880
	private static bool construct_internal_locale_from_current_locale(CultureInfo ci); // 0x0000000180202850
	private static CultureInfo[] internal_get_cultures(bool neutral, bool specific, bool installed); // 0x00000001802035B0
	private void construct_datetime_format(); // 0x0000000180202840
	private void construct_number_format(); // 0x0000000180202890
	private static bool internal_is_lcid_neutral(int lcid, out bool is_neutral); // 0x00000001802035C0
	private void ConstructInvariant(bool read_only); // 0x0000000180200F10
	private TextInfo CreateTextInfo(bool readOnly); // 0x00000001802014E0
	private static void insert_into_shared_tables(CultureInfo c); // 0x0000000180203430
	public static CultureInfo GetCultureInfo(int culture); // 0x0000000180201820
	public static CultureInfo GetCultureInfo(string name); // 0x0000000180201B30
	public static CultureInfo GetCultureInfo(string name, string altName); // 0x0000000180201A60
	public static CultureInfo GetCultureInfoByIetfLanguageTag(string name); // 0x0000000180201610
	internal static CultureInfo CreateCulture(string name, bool reference); // 0x0000000180201260
	internal void ConstructCalendars(); // 0x0000000180200780
}

// Namespace: System.Globalization
[Serializable]
public enum CultureTypes // TypeDefIndex: 386
{
	NeutralCultures = 1,
	SpecificCultures = 2,
	InstalledWin32Cultures = 4,
	AllCultures = 7,
	UserCustomCulture = 8,
	ReplacementCultures = 16,
	WindowsOnlyCultures = 32,
	FrameworkCultures = 64
}

// Namespace: System.Globalization
internal enum DateTimeFormatFlags // TypeDefIndex: 387
{
	Unused = 0,
	But = 1,
	Serialized = 2,
	By = 3,
	Microsoft = 4
}

// Namespace: System.Globalization
[Serializable]
public sealed class DateTimeFormatInfo : ICloneable, IFormatProvider // TypeDefIndex: 388
{
	// Fields
	private const string _RoundtripPattern = "yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK"; // 0x00
	private static readonly string MSG_READONLY; // 0x08
	private static readonly string MSG_ARRAYSIZE_MONTH; // 0x18
	private static readonly string MSG_ARRAYSIZE_DAY; // 0x28
	private static readonly string[] INVARIANT_ABBREVIATED_DAY_NAMES; // 0x38
	private static readonly string[] INVARIANT_DAY_NAMES; // 0x10
	private static readonly string[] INVARIANT_ABBREVIATED_MONTH_NAMES; // 0x20
	private static readonly string[] INVARIANT_MONTH_NAMES; // 0x30
	private static readonly string[] INVARIANT_SHORT_DAY_NAMES; // 0x40
	private static DateTimeFormatInfo theInvariantDateTimeFormatInfo; // 0x50
	private bool m_isReadOnly; // 0x60
	private string amDesignator; // 0x70
	private string pmDesignator; // 0x80
	private string dateSeparator; // 0x90
	private string timeSeparator; // 0xA0
	private string shortDatePattern; // 0xB0
	private string longDatePattern; // 0xC0
	private string shortTimePattern; // 0xD0
	private string longTimePattern; // 0xE0
	private string monthDayPattern; // 0xF0
	private string yearMonthPattern; // 0xFC
	private string fullDateTimePattern; // 0x100
	private string _RFC1123Pattern; // 0x108
	private string _SortableDateTimePattern; // 0x118
	private string _UniversalSortableDateTimePattern; // 0x128
	private int firstDayOfWeek; // 0x138
	private Calendar calendar; // 0x148
	private int calendarWeekRule; // 0x158
	private string[] abbreviatedDayNames; // 0x168
	private string[] dayNames; // 0x10
	private string[] monthNames; // 0x00
	private string[] abbreviatedMonthNames; // 0x00
	private string[] allShortDatePatterns; // 0x00
	private string[] allLongDatePatterns; // 0x00
	private string[] allShortTimePatterns; // 0x00
	private string[] allLongTimePatterns; // 0x10
	private string[] monthDayPatterns; // 0x30
	private string[] yearMonthPatterns; // 0x10
	private string[] shortDayNames; // 0x00
	private int nDataItem; // 0x38
	private bool m_useUserOverride; // 0x00
	private bool m_isDefaultCalendar; // 0x00
	private int CultureID; // 0x10
	private bool bUseCalendarInfo; // 0x00
	private string generalShortTimePattern; // 0x00
	private string generalLongTimePattern; // 0x00
	private string[] m_eraNames; // 0x00
	private string[] m_abbrevEraNames; // 0x00
	private string[] m_abbrevEnglishEraNames; // 0x08
	private string[] m_dateWords; // 0x00
	private int[] optionalCalendars; // 0x08
	private string[] m_superShortDayNames; // 0x10
	private string[] genitiveMonthNames; // 0x10
	private string[] m_genitiveAbbreviatedMonthNames; // 0x18
	private string[] leapYearMonthNames; // 0x10
	private DateTimeFormatFlags formatFlags; // 0x18
	private string m_name; // 0x20
	private string[] all_date_time_patterns; // 0x28

	// Properties
	public bool IsReadOnly { get; } // 0x0000000180113840 
	public string[] AbbreviatedDayNames { get; set; } // 0x0000000180206BE0 0x00000001802071A0
	internal string[] RawAbbreviatedDayNames { get; set; } // 0x0000000180207070 0x00000001802071A0
	public string[] AbbreviatedMonthNames { get; set; } // 0x0000000180206C70 0x0000000180207350
	internal string[] RawAbbreviatedMonthNames { get; set; } // 0x000000018017D2E0 0x0000000180207350
	public string[] DayNames { get; set; } // 0x0000000180206D70 0x0000000180207760
	internal string[] RawDayNames { get; set; } // 0x000000018017D2D0 0x0000000180207760
	public string[] MonthNames { get; set; } // 0x0000000180206F90 0x0000000180207D70
	internal string[] RawMonthNames { get; set; } // 0x000000018017D320 0x0000000180207D70
	public string AMDesignator { get; set; } // 0x00000001800EAEC0 0x00000001802070C0
	public string PMDesignator { get; set; } // 0x00000001800EAEB0 0x0000000180207F10
	public string DateSeparator { get; set; } // 0x000000018013BF80 0x0000000180207680
	public string TimeSeparator { get; set; } // 0x00000001801146E0 0x0000000180208310
	public string LongDatePattern { get; set; } // 0x0000000180114BB0 0x0000000180207AC0
	public string ShortDatePattern { get; set; } // 0x0000000180119440 0x0000000180207FF0
	public string ShortTimePattern { get; set; } // 0x0000000180113E60 0x00000001802080D0
	public string LongTimePattern { get; set; } // 0x00000001801513A0 0x0000000180207BA0
	public string MonthDayPattern { get; set; } // 0x0000000180176AC0 0x0000000180207C80
	public string YearMonthPattern { get; set; } // 0x0000000180114BE0 0x00000001802083F0
	public string FullDateTimePattern { get; set; } // 0x0000000180206DF0 0x00000001802079E0
	public static DateTimeFormatInfo CurrentInfo { get; } // 0x0000000180206CF0 
	public static DateTimeFormatInfo InvariantInfo { get; } // 0x0000000180206E70 
	public DayOfWeek FirstDayOfWeek { get; set; } // 0x00000001801BFAA0 0x0000000180207900
	public Calendar Calendar { get; set; } // 0x000000018017D310 0x00000001802075A0
	public CalendarWeekRule CalendarWeekRule { get; set; } // 0x00000001801C3B20 0x00000001802074F0
	public string RFC1123Pattern { get; } // 0x000000018017D300 
	internal string RoundtripPattern { get; } // 0x0000000180207080 
	public string SortableDateTimePattern { get; } // 0x000000018017D330 
	public string UniversalSortableDateTimePattern { get; } // 0x0000000180113670 
	public string[] AbbreviatedMonthGenitiveNames { get; set; } // 0x0000000180206C60 0x0000000180207340
	public string[] MonthGenitiveNames { get; set; } // 0x0000000180206F80 0x0000000180207D60
	public string NativeCalendarName { get; } // 0x0000000180207010 
	public string[] ShortestDayNames { get; set; } // 0x00000001802070B0 0x00000001802081B0

	// Constructors
	internal DateTimeFormatInfo(bool read_only); // 0x00000001802069F0
	public DateTimeFormatInfo(); // 0x00000001802069E0
	private static DateTimeFormatInfo(); // 0x00000001802056D0

	// Methods
	public static DateTimeFormatInfo GetInstance(IFormatProvider provider); // 0x0000000180204FE0
	public static DateTimeFormatInfo ReadOnly(DateTimeFormatInfo dtfi); // 0x0000000180205470
	public object Clone(); // 0x00000001802037D0
	public object GetFormat(Type formatType); // 0x0000000180204FB0
	public string GetAbbreviatedEraName(int era); // 0x00000001802040C0
	public string GetAbbreviatedMonthName(int month); // 0x00000001802041B0
	public int GetEra(string eraName); // 0x0000000180204CD0
	public string GetEraName(int era); // 0x0000000180204BD0
	public string GetMonthName(int month); // 0x0000000180205190
	public string[] GetAllDateTimePatterns(); // 0x0000000180204280
	internal string[] GetAllDateTimePatternsInternal(); // 0x0000000180204250
	private void FillAllDateTimePatterns(); // 0x0000000180203840
	public string[] GetAllDateTimePatterns(char format); // 0x0000000180204310
	internal string[] GetAllRawDateTimePatterns(char format); // 0x00000001802043A0
	public string GetDayName(DayOfWeek dayofweek); // 0x0000000180204B30
	public string GetAbbreviatedDayName(DayOfWeek dayofweek); // 0x0000000180204020
	private void FillInvariantPatterns(); // 0x0000000180203BC0
	private string[] PopulateCombinedList(string[] dates, string[] times); // 0x00000001802052D0
	public string GetShortestDayName(DayOfWeek dayOfWeek); // 0x0000000180205230
	public void SetAllDateTimePatterns(string[] patterns, char format); // 0x0000000180205520
}

// Namespace: System.Globalization
[Serializable]
public enum DateTimeStyles // TypeDefIndex: 389
{
	None = 0,
	AllowLeadingWhite = 1,
	AllowTrailingWhite = 2,
	AllowInnerWhite = 4,
	AllowWhiteSpaces = 7,
	NoCurrentDateDefault = 8,
	AdjustToUniversal = 16,
	AssumeLocal = 32,
	AssumeUniversal = 64,
	RoundtripKind = 128
}

// Namespace: System.Globalization
[Serializable]
public class DaylightTime // TypeDefIndex: 390
{
	// Fields
	private DateTime m_start; // 0x10
	private DateTime m_end; // 0x30
	private TimeSpan m_delta; // 0x10

	// Properties
	public DateTime Start { get; } // 0x00000001801D6D60 
	public DateTime End { get; } // 0x0000000180143A80 
	public TimeSpan Delta { get; } // 0x00000001801146E0 

	// Constructors
	public DaylightTime(DateTime start, DateTime end, TimeSpan delta); // 0x0000000180325590

}

// Namespace: System.Globalization
[Serializable]
public enum DigitShapes // TypeDefIndex: 391
{
	Context = 0,
	None = 1,
	NativeNational = 2
}

// Namespace: System.Globalization
[Serializable]
public abstract class EastAsianLunisolarCalendar : Calendar // TypeDefIndex: 392
{
	// Fields
	internal readonly CCEastAsianLunisolarEraHandler M_EraHandler; // 0x38

	// Properties
	public override int TwoDigitYearMax { get; set; } // 0x0000000180156360 0x0000000180328680
	internal virtual int ActualCurrentEra { get; } // 0x0000000180119A50 
	public override CalendarAlgorithmType AlgorithmType { get; } // 0x0000000180193F90 

	// Constructors
	internal EastAsianLunisolarCalendar(CCEastAsianLunisolarEraHandler eraHandler); // 0x0000000180328650

	// Methods
	internal void M_CheckDateTime(DateTime time); // 0x0000000180328190
	internal void M_CheckEra(int era); // 0x00000001803281C0
	internal int M_CheckYEG(int year, int era); // 0x0000000180328270
	internal override void M_CheckYE(int year, int era); // 0x0000000180328340
	internal int M_CheckYMEG(int year, int month, int era); // 0x0000000180328420
	internal int M_CheckYMDEG(int year, int month, int day, int era); // 0x0000000180328350
	public override DateTime AddMonths(DateTime time, int months); // 0x0000000180327C20
	public override DateTime AddYears(DateTime time, int years); // 0x0000000180327C90
	public override int GetDayOfMonth(DateTime time); // 0x0000000180327D90
	public override DayOfWeek GetDayOfWeek(DateTime time); // 0x0000000180327DE0
	public override int GetDayOfYear(DateTime time); // 0x0000000180327E30
	public override int GetDaysInMonth(int year, int month, int era); // 0x0000000180327E80
	public override int GetDaysInYear(int year, int era); // 0x0000000180327EC0
	public override int GetLeapMonth(int year, int era); // 0x0000000180327EF0
	public override int GetMonth(DateTime time); // 0x0000000180327F00
	public override int GetMonthsInYear(int year, int era); // 0x0000000180327F50
	public override int GetYear(DateTime time); // 0x0000000180328090
	public override bool IsLeapDay(int year, int month, int day, int era); // 0x00000001803280E0
	public override bool IsLeapMonth(int year, int month, int era); // 0x0000000180328120
	public override bool IsLeapYear(int year, int era); // 0x0000000180328160
	public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era); // 0x00000001803284D0
	public override int ToFourDigitYear(int year); // 0x00000001803285B0
	public int GetCelestialStem(int sexagenaryYear); // 0x0000000180327D00
	public virtual int GetSexagenaryYear(DateTime time); // 0x0000000180327FB0
	public int GetTerrestrialBranch(int sexagenaryYear); // 0x0000000180328000
}

// Namespace: System.Globalization
[Serializable]
public class GregorianCalendar : Calendar // TypeDefIndex: 393
{
	// Fields
	public const int ADEra = 1; // 0x00
	[NonSerialized]	internal GregorianCalendarTypes m_type; // 0x00
	private static Nullable`1<DateTime> Min; // 0x10
	private static Nullable`1<DateTime> Max; // 0x00

	// Properties
	public override int[] Eras { get; } // 0x0000000180329010 
	public override int TwoDigitYearMax { get; set; } // 0x0000000180156360 0x00000001803292E0
	public virtual GregorianCalendarTypes CalendarType { get; set; } // 0x0000000180114770 0x00000001803292B0
	public override DateTime MinSupportedDateTime { get; } // 0x00000001803291A0 
	public override DateTime MaxSupportedDateTime { get; } // 0x0000000180329080 

	// Constructors
	public GregorianCalendar(GregorianCalendarTypes type); // 0x0000000180328D50
	public GregorianCalendar(); // 0x0000000180328EB0

	// Methods
	internal void M_CheckEra(int era); // 0x00000001803289B0
	internal override void M_CheckYE(int year, int era); // 0x0000000180328A20
	internal void M_CheckYME(int year, int month, int era); // 0x0000000180328BB0
	internal void M_CheckYMDE(int year, int month, int day, int era); // 0x0000000180328AF0
	public override DateTime AddMonths(DateTime time, int months); // 0x0000000180328700
	public override DateTime AddYears(DateTime time, int years); // 0x0000000180328740
	public override int GetDayOfMonth(DateTime time); // 0x0000000180328780
	public override DayOfWeek GetDayOfWeek(DateTime time); // 0x00000001803287A0
	public override int GetDayOfYear(DateTime time); // 0x00000001803287D0
	public override int GetDaysInMonth(int year, int month, int era); // 0x00000001803287F0
	public override int GetDaysInYear(int year, int era); // 0x0000000180328830
	public override int GetEra(DateTime time); // 0x0000000180119A50
	public override int GetLeapMonth(int year, int era); // 0x00000001800EA8C0
	public override int GetMonth(DateTime time); // 0x0000000180328860
	public override int GetMonthsInYear(int year, int era); // 0x0000000180328880
	public override int GetWeekOfYear(DateTime time, CalendarWeekRule rule, DayOfWeek firstDayOfWeek); // 0x00000001803288B0
	public override int GetYear(DateTime time); // 0x00000001803288E0
	public override bool IsLeapDay(int year, int month, int day, int era); // 0x0000000180328900
	public override bool IsLeapMonth(int year, int month, int era); // 0x0000000180328950
	public override bool IsLeapYear(int year, int era); // 0x0000000180328980
	public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era); // 0x0000000180328C60
	public override int ToFourDigitYear(int year); // 0x0000000180328D40
}

// Namespace: System.Globalization
[Serializable]
public enum GregorianCalendarTypes // TypeDefIndex: 394
{
	Localized = 1,
	USEnglish = 2,
	MiddleEastFrench = 9,
	Arabic = 10,
	TransliteratedEnglish = 11,
	TransliteratedFrench = 12
}

// Namespace: System.Globalization
[Serializable]
public class HebrewCalendar : Calendar // TypeDefIndex: 395
{
	// Fields
	internal const long M_MinTicks = 499147488000000000; // 0x00
	internal const long M_MaxTicks = 706783967999999999; // 0x00
	internal const int M_MinYear = 5343; // 0x08
	public static readonly int HebrewEra; // 0x00
	private static DateTime Min; // 0x08
	private static DateTime Max; // 0x10

	// Properties
	internal override int M_MaxYear { get; } // 0x000000018032D0C0 
	public override int[] Eras { get; } // 0x000000018032D020 
	public override int TwoDigitYearMax { get; set; } // 0x0000000180156360 0x000000018032D1B0
	public override DateTime MinSupportedDateTime { get; } // 0x000000018032D140 
	public override DateTime MaxSupportedDateTime { get; } // 0x000000018032D0D0 

	// Constructors
	public HebrewCalendar(); // 0x000000018032CEE0
	private static HebrewCalendar(); // 0x000000018032CE00

	// Methods
	internal void M_CheckDateTime(DateTime time); // 0x000000018032C730
	internal void M_CheckEra(int era); // 0x000000018032C7D0
	internal override void M_CheckYE(int year, int era); // 0x000000018032C8B0
	internal void M_CheckYME(int year, int month, int era); // 0x000000018032CAD0
	internal void M_CheckYMDE(int year, int month, int day, int era); // 0x000000018032CA10
	public override DateTime AddMonths(DateTime time, int months); // 0x000000018032BBC0
	public override DateTime AddYears(DateTime time, int years); // 0x000000018032BE00
	public override int GetDayOfMonth(DateTime time); // 0x000000018032BF50
	public override DayOfWeek GetDayOfWeek(DateTime time); // 0x000000018032C010
	public override int GetDayOfYear(DateTime time); // 0x000000018032C0D0
	internal int M_CCMonth(int month, int year); // 0x000000018032C6E0
	internal int M_Month(int ccmonth, int year); // 0x000000018032CBF0
	public override int GetDaysInMonth(int year, int month, int era); // 0x000000018032C1B0
	public override int GetDaysInYear(int year, int era); // 0x000000018032C220
	public override int GetEra(DateTime time); // 0x000000018032C280
	public override int GetLeapMonth(int year, int era); // 0x000000018032C370
	public override int GetMonth(DateTime time); // 0x000000018032C3A0
	public override int GetMonthsInYear(int year, int era); // 0x000000018032C4C0
	public override int GetYear(DateTime time); // 0x000000018032C4F0
	public override bool IsLeapDay(int year, int month, int day, int era); // 0x000000018032C5B0
	public override bool IsLeapMonth(int year, int month, int era); // 0x000000018032C640
	public override bool IsLeapYear(int year, int era); // 0x000000018032C6B0
	public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era); // 0x000000018032CC30
	public override int ToFourDigitYear(int year); // 0x000000018032CD50
}

// Namespace: System.Globalization
[Serializable]
public class HijriCalendar : Calendar // TypeDefIndex: 396
{
	// Fields
	public static readonly int HijriEra; // 0x00
	internal static readonly int M_MinFixed; // 0x08
	internal static readonly int M_MaxFixed; // 0x10
	internal int M_AddHijriDate; // 0x10
	private static DateTime Min; // 0x18
	private static DateTime Max; // 0x10

	// Properties
	public override int[] Eras { get; } // 0x000000018032E6C0 
	public int HijriAdjustment { get; set; } // 0x000000018032E760 0x000000018032E8E0
	public override int TwoDigitYearMax { get; set; } // 0x0000000180156360 0x000000018032E930
	internal virtual int AddHijriDate { get; set; } // 0x0000000180114770 0x000000018032E890
	public override DateTime MinSupportedDateTime { get; } // 0x000000018032E820 
	public override DateTime MaxSupportedDateTime { get; } // 0x000000018032E7B0 

	// Constructors
	public HijriCalendar(); // 0x000000018032E580
	private static HijriCalendar(); // 0x000000018032E460

	// Methods
	internal void M_CheckFixedHijri(string param, int rdHijri); // 0x000000018032DB90
	internal void M_CheckDateTime(DateTime time); // 0x000000018032DA30
	internal int M_FromDateTime(DateTime time); // 0x000000018032E220
	internal DateTime M_ToDateTime(int rd); // 0x000000018032E300
	internal DateTime M_ToDateTime(int date, int hour, int minute, int second, int milliseconds); // 0x000000018032E270
	internal void M_CheckEra(int era); // 0x000000018032DAB0
	internal override void M_CheckYE(int year, int era); // 0x000000018032DF00
	internal void M_CheckYME(int year, int month, int era); // 0x000000018032E140
	internal void M_CheckYMDE(int year, int month, int day, int era); // 0x000000018032E030
	public override DateTime AddMonths(DateTime time, int months); // 0x000000018032D230
	public override DateTime AddYears(DateTime time, int years); // 0x000000018032D3B0
	public override int GetDayOfMonth(DateTime time); // 0x000000018032D500
	public override DayOfWeek GetDayOfWeek(DateTime time); // 0x000000018032D580
	public override int GetDayOfYear(DateTime time); // 0x000000018032D600
	public override int GetDaysInMonth(int year, int month, int era); // 0x000000018032D6A0
	public override int GetDaysInYear(int year, int era); // 0x000000018032D710
	public override int GetEra(DateTime time); // 0x000000018032D770
	public override int GetLeapMonth(int year, int era); // 0x00000001800EA8C0
	public override int GetMonth(DateTime time); // 0x000000018032D850
	public override int GetMonthsInYear(int year, int era); // 0x0000000180328880
	public override int GetYear(DateTime time); // 0x000000018032D8D0
	public override bool IsLeapDay(int year, int month, int day, int era); // 0x000000018032D950
	public override bool IsLeapMonth(int year, int month, int era); // 0x000000018032D9D0
	public override bool IsLeapYear(int year, int era); // 0x000000018032DA00
	public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era); // 0x000000018032E350
	public override int ToFourDigitYear(int year); // 0x0000000180328D40
}

// Namespace: System.Globalization
public sealed class IdnMapping // TypeDefIndex: 397
{
	// Fields
	private bool allow_unassigned; // 0x10
	private bool use_std3; // 0x18
	private Punycode puny; // 0x10

	// Properties
	public bool AllowUnassigned { get; set; } // 0x0000000180113840 0x000000018018FBE0
	public bool UseStd3AsciiRules { get; set; } // 0x0000000180147560 0x000000018018FC00

	// Constructors
	public IdnMapping(); // 0x000000018032FEA0

	// Methods
	public override bool Equals(object obj); // 0x000000018032EC10
	public override int GetHashCode(); // 0x000000018032EEF0
	public string GetAscii(string unicode); // 0x000000018032EC90
	public string GetAscii(string unicode, int index); // 0x000000018032ED20
	public string GetAscii(string unicode, int index, int count); // 0x000000018032EDC0
	private string Convert(string input, int index, int count, bool toAscii); // 0x000000018032E9B0
	private string ToAscii(string s, int offset); // 0x000000018032F2D0
	private void VerifyLength(string s, int offset); // 0x000000018032F880
	private string NamePrep(string s, int offset); // 0x000000018032F170
	private void VerifyProhibitedCharacters(string s, int offset); // 0x000000018032F9D0
	private void VerifyStd3AsciiRules(string s, int offset); // 0x000000018032FC10
	public string GetUnicode(string ascii); // 0x000000018032F0E0
	public string GetUnicode(string ascii, int index); // 0x000000018032F040
	public string GetUnicode(string ascii, int index, int count); // 0x000000018032EF10
	private string ToUnicode(string s, int offset); // 0x000000018032F690
}

// Namespace: System.Globalization
internal class Bootstring // TypeDefIndex: 398
{
	// Fields
	private readonly char delimiter; // 0x10
	private readonly int base_num; // 0x18
	private readonly int tmin; // 0x20
	private readonly int tmax; // 0x28
	private readonly int skew; // 0x00
	private readonly int damp; // 0x18
	private readonly int initial_bias; // 0x00
	private readonly int initial_n; // 0x08

	// Constructors
	public Bootstring(char delimiter, int baseNum, int tmin, int tmax, int skew, int damp, int initialBias, int initialN); // 0x00000001801F6CB0

	// Methods
	public string Encode(string s, int offset); // 0x00000001801F68C0
	private char EncodeDigit(int d); // 0x00000001801F68A0
	private int DecodeDigit(char c); // 0x00000001801F65A0
	private int Adapt(int delta, int numPoints, bool firstTime); // 0x00000001801F6530
	public string Decode(string s, int offset); // 0x00000001801F65D0
}

// Namespace: System.Globalization
internal class Punycode : Bootstring // TypeDefIndex: 399
{
	// Constructors
	public Punycode(); // 0x0000000180338080

}

// Namespace: System.Globalization
[Serializable]
public class JapaneseCalendar : Calendar // TypeDefIndex: 400
{
	// Fields
	internal static readonly CCGregorianEraHandler M_EraHandler; // 0x00
	private static DateTime JapanMin; // 0x18
	private static DateTime JapanMax; // 0x00

	// Properties
	public override int[] Eras { get; } // 0x00000001803310B0 
	public override int TwoDigitYearMax { get; set; } // 0x0000000180156360 0x0000000180331250
	public override DateTime MinSupportedDateTime { get; } // 0x00000001803311E0 
	public override DateTime MaxSupportedDateTime { get; } // 0x0000000180331170 

	// Constructors
	public JapaneseCalendar(); // 0x0000000180330D30
	private static JapaneseCalendar(); // 0x0000000180330AE0

	// Methods
	internal void M_CheckDateTime(DateTime time); // 0x0000000180330570
	internal void M_CheckEra(int era); // 0x00000001803305F0
	internal int M_CheckYEG(int year, int era); // 0x00000001803306B0
	internal override void M_CheckYE(int year, int era); // 0x00000001803307D0
	internal int M_CheckYMEG(int year, int month, int era); // 0x00000001803308B0
	internal int M_CheckYMDEG(int year, int month, int day, int era); // 0x00000001803307E0
	public override DateTime AddMonths(DateTime time, int months); // 0x000000018032FF40
	public override DateTime AddYears(DateTime time, int years); // 0x0000000180330000
	public override int GetDayOfMonth(DateTime time); // 0x00000001803300C0
	public override DayOfWeek GetDayOfWeek(DateTime time); // 0x0000000180330150
	public override int GetDayOfYear(DateTime time); // 0x00000001803301F0
	public override int GetDaysInMonth(int year, int month, int era); // 0x0000000180330280
	public override int GetDaysInYear(int year, int era); // 0x00000001803302C0
	public override int GetEra(DateTime time); // 0x00000001803302F0
	public override int GetLeapMonth(int year, int era); // 0x00000001800EA8C0
	public override int GetMonth(DateTime time); // 0x0000000180330390
	public override int GetMonthsInYear(int year, int era); // 0x0000000180328880
	public override int GetWeekOfYear(DateTime time, CalendarWeekRule rule, DayOfWeek firstDayOfWeek); // 0x00000001803288B0
	public override int GetYear(DateTime time); // 0x0000000180330420
	public override bool IsLeapDay(int year, int month, int day, int era); // 0x00000001803304C0
	public override bool IsLeapMonth(int year, int month, int era); // 0x0000000180330510
	public override bool IsLeapYear(int year, int era); // 0x0000000180330540
	public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era); // 0x0000000180330960
	public override int ToFourDigitYear(int year); // 0x0000000180330A40
}

// Namespace: System.Globalization
[Serializable]
public class JapaneseLunisolarCalendar : EastAsianLunisolarCalendar // TypeDefIndex: 401
{
	// Fields
	public const int JapaneseEra = 1; // 0x00
	internal static readonly CCEastAsianLunisolarEraHandler era_handler; // 0x08
	private static DateTime JapanMin; // 0x00
	private static DateTime JapanMax; // 0x18

	// Properties
	internal override int ActualCurrentEra { get; } // 0x00000001801AECA0 
	public override int[] Eras { get; } // 0x0000000180331590 
	public override DateTime MinSupportedDateTime { get; } // 0x00000001803316C0 
	public override DateTime MaxSupportedDateTime { get; } // 0x0000000180331650 

	// Constructors
	public JapaneseLunisolarCalendar(); // 0x0000000180331510
	private static JapaneseLunisolarCalendar(); // 0x0000000180331370

	// Methods
	public override int GetEra(DateTime time); // 0x00000001803312D0
}

// Namespace: System.Globalization
[Serializable]
public class JulianCalendar : Calendar // TypeDefIndex: 402
{
	// Fields
	public static readonly int JulianEra; // 0x00
	private static DateTime JulianMin; // 0x18
	private static DateTime JulianMax; // 0x00

	// Properties
	public override int[] Eras { get; } // 0x00000001803322C0 
	public override int TwoDigitYearMax { get; set; } // 0x0000000180156360 0x0000000180332440
	public override CalendarAlgorithmType AlgorithmType { get; } // 0x0000000180119A50 
	public override DateTime MinSupportedDateTime { get; } // 0x00000001803323D0 
	public override DateTime MaxSupportedDateTime { get; } // 0x0000000180332360 

	// Constructors
	public JulianCalendar(); // 0x0000000180332180
	private static JulianCalendar(); // 0x00000001803320A0

	// Methods
	internal void M_CheckEra(int era); // 0x0000000180331BE0
	internal override void M_CheckYE(int year, int era); // 0x0000000180331CC0
	internal void M_CheckYME(int year, int month, int era); // 0x0000000180331F00
	internal void M_CheckYMDE(int year, int month, int day, int era); // 0x0000000180331DF0
	public override DateTime AddMonths(DateTime time, int months); // 0x0000000180331730
	public override DateTime AddYears(DateTime time, int years); // 0x0000000180331820
	public override int GetDayOfMonth(DateTime time); // 0x00000001803318F0
	public override DayOfWeek GetDayOfWeek(DateTime time); // 0x00000001803287A0
	public override int GetDayOfYear(DateTime time); // 0x0000000180331920
	public override int GetDaysInMonth(int year, int month, int era); // 0x0000000180331970
	public override int GetDaysInYear(int year, int era); // 0x00000001803319E0
	public override int GetEra(DateTime time); // 0x0000000180331A40
	public override int GetLeapMonth(int year, int era); // 0x00000001800EA8C0
	public override int GetMonth(DateTime time); // 0x0000000180331AA0
	public override int GetMonthsInYear(int year, int era); // 0x0000000180328880
	public override int GetYear(DateTime time); // 0x0000000180331AD0
	public override bool IsLeapDay(int year, int month, int day, int era); // 0x0000000180331B00
	public override bool IsLeapMonth(int year, int month, int era); // 0x0000000180331B80
	public override bool IsLeapYear(int year, int era); // 0x0000000180331BB0
	public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era); // 0x0000000180331FB0
	public override int ToFourDigitYear(int year); // 0x0000000180328D40
}

// Namespace: System.Globalization
[Serializable]
public class KoreanCalendar : Calendar // TypeDefIndex: 403
{
	// Fields
	public const int KoreanEra = 1; // 0x00
	internal static readonly CCGregorianEraHandler M_EraHandler; // 0x08
	private static DateTime KoreanMin; // 0x00
	private static DateTime KoreanMax; // 0x08

	// Properties
	public override int[] Eras { get; } // 0x0000000180332E00 
	public override int TwoDigitYearMax { get; set; } // 0x0000000180156360 0x0000000180332FA0
	public override DateTime MinSupportedDateTime { get; } // 0x0000000180332F30 
	public override DateTime MaxSupportedDateTime { get; } // 0x0000000180332EC0 

	// Constructors
	public KoreanCalendar(); // 0x0000000180332CC0
	private static KoreanCalendar(); // 0x0000000180332B90

	// Methods
	internal void M_CheckEra(int era); // 0x0000000180332740
	internal int M_CheckYEG(int year, int era); // 0x0000000180332800
	internal override void M_CheckYE(int year, int era); // 0x0000000180332920
	internal int M_CheckYMEG(int year, int month, int era); // 0x0000000180332A00
	internal int M_CheckYMDEG(int year, int month, int day, int era); // 0x0000000180332930
	public override DateTime AddMonths(DateTime time, int months); // 0x0000000180328700
	public override DateTime AddYears(DateTime time, int years); // 0x0000000180328740
	public override int GetDayOfMonth(DateTime time); // 0x0000000180328780
	public override DayOfWeek GetDayOfWeek(DateTime time); // 0x00000001803287A0
	public override int GetDayOfYear(DateTime time); // 0x00000001803287D0
	public override int GetDaysInMonth(int year, int month, int era); // 0x00000001803324C0
	public override int GetDaysInYear(int year, int era); // 0x0000000180332500
	public override int GetEra(DateTime time); // 0x0000000180332530
	public override int GetLeapMonth(int year, int era); // 0x00000001800EA8C0
	public override int GetMonth(DateTime time); // 0x0000000180328860
	public override int GetMonthsInYear(int year, int era); // 0x00000001803325D0
	public override int GetWeekOfYear(DateTime time, CalendarWeekRule rule, DayOfWeek firstDayOfWeek); // 0x00000001803288B0
	public override int GetYear(DateTime time); // 0x00000001803325F0
	public override bool IsLeapDay(int year, int month, int day, int era); // 0x0000000180332690
	public override bool IsLeapMonth(int year, int month, int era); // 0x00000001803326E0
	public override bool IsLeapYear(int year, int era); // 0x0000000180332710
	public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era); // 0x0000000180332AB0
	public override int ToFourDigitYear(int year); // 0x0000000180328D40
}

// Namespace: System.Globalization
[Serializable]
public class KoreanLunisolarCalendar : EastAsianLunisolarCalendar // TypeDefIndex: 404
{
	// Fields
	public const int GregorianEra = 1; // 0x00
	internal static readonly CCEastAsianLunisolarEraHandler era_handler; // 0x08
	private static DateTime KoreanMin; // 0x10
	private static DateTime KoreanMax; // 0x20

	// Properties
	public override int[] Eras { get; } // 0x00000001803332B0 
	public override DateTime MinSupportedDateTime { get; } // 0x00000001803333E0 
	public override DateTime MaxSupportedDateTime { get; } // 0x0000000180333370 

	// Constructors
	public KoreanLunisolarCalendar(); // 0x0000000180333230
	private static KoreanLunisolarCalendar(); // 0x00000001803330C0

	// Methods
	public override int GetEra(DateTime time); // 0x0000000180333020
}

// Namespace: System.Globalization
[Serializable]
public sealed class NumberFormatInfo : ICloneable, IFormatProvider // TypeDefIndex: 405
{
	// Fields
	private bool isReadOnly; // 0x10
	private string decimalFormats; // 0x20
	private string currencyFormats; // 0x30
	private string percentFormats; // 0x40
	private string digitPattern; // 0x50
	private string zeroPattern; // 0x60
	private int currencyDecimalDigits; // 0x68
	private string currencyDecimalSeparator; // 0x78
	private string currencyGroupSeparator; // 0x88
	private int[] currencyGroupSizes; // 0x98
	private int currencyNegativePattern; // 0xA8
	private int currencyPositivePattern; // 0xB0
	private string currencySymbol; // 0xC0
	private string nanSymbol; // 0xCC
	private string negativeInfinitySymbol; // 0xD8
	private string negativeSign; // 0xE8
	private int numberDecimalDigits; // 0xF8
	private string numberDecimalSeparator; // 0xFD
	private string numberGroupSeparator; // 0x100
	private int[] numberGroupSizes; // 0x00
	private int numberNegativePattern; // 0x10
	private int percentDecimalDigits; // 0x00
	private string percentDecimalSeparator; // 0x00
	private string percentGroupSeparator; // 0x00
	private int[] percentGroupSizes; // 0x00
	private int percentNegativePattern; // 0x00
	private int percentPositivePattern; // 0x00
	private string percentSymbol; // 0x00
	private string perMilleSymbol; // 0x00
	private string positiveInfinitySymbol; // 0x00
	private string positiveSign; // 0x00
	private string ansiCurrencySymbol; // 0x08
	private int m_dataItem; // 0x00
	private bool m_useUserOverride; // 0x14
	private bool validForParseAsNumber; // 0x20
	private bool validForParseAsCurrency; // 0x30
	private string[] nativeDigits; // 0x40
	private int digitSubstitution; // 0x08
	private static readonly string[] invariantNativeDigits; // 0x10

	// Properties
	public int CurrencyDecimalDigits { get; set; } // 0x00000001802AD3C0 0x0000000180335340
	public string CurrencyDecimalSeparator { get; set; } // 0x0000000180113E60 0x00000001803353F0
	public string CurrencyGroupSeparator { get; set; } // 0x00000001801513A0 0x00000001803354A0
	public int[] CurrencyGroupSizes { get; set; } // 0x0000000180335010 0x0000000180335550
	internal int[] RawCurrencyGroupSizes { get; set; } // 0x0000000180176AC0 0x0000000180336290
	public int CurrencyNegativePattern { get; set; } // 0x000000018019E8D0 0x0000000180335560
	public int CurrencyPositivePattern { get; set; } // 0x0000000180196DD0 0x0000000180335610
	public string CurrencySymbol { get; set; } // 0x00000001801136C0 0x00000001803356C0
	public static NumberFormatInfo CurrentInfo { get; } // 0x0000000180335090 
	public static NumberFormatInfo InvariantInfo { get; } // 0x0000000180335120 
	public bool IsReadOnly { get; } // 0x0000000180113840 
	public string NaNSymbol { get; set; } // 0x000000018017D300 0x0000000180335770
	public string NegativeInfinitySymbol { get; set; } // 0x000000018017D330 0x0000000180335820
	public string NegativeSign { get; set; } // 0x0000000180113670 0x00000001803358D0
	public int NumberDecimalDigits { get; set; } // 0x00000001801BFAA0 0x0000000180335980
	public string NumberDecimalSeparator { get; set; } // 0x000000018017D310 0x0000000180335A30
	public string NumberGroupSeparator { get; set; } // 0x00000001803351E0 0x0000000180335AE0
	public int[] NumberGroupSizes { get; set; } // 0x00000001803351F0 0x0000000180335B90
	internal int[] RawNumberGroupSizes { get; set; } // 0x0000000180207070 0x0000000180336460
	public int NumberNegativePattern { get; set; } // 0x00000001801A6B60 0x0000000180335BA0
	public int PercentDecimalDigits { get; set; } // 0x0000000180335270 0x0000000180335D00
	public string PercentDecimalSeparator { get; set; } // 0x000000018017D320 0x0000000180335DB0
	public string PercentGroupSeparator { get; set; } // 0x000000018017D2E0 0x0000000180335E60
	public int[] PercentGroupSizes { get; set; } // 0x0000000180335280 0x0000000180335F10
	internal int[] RawPercentGroupSizes { get; set; } // 0x0000000180176B20 0x0000000180336630
	public int PercentNegativePattern { get; set; } // 0x000000018017D340 0x0000000180335F20
	public int PercentPositivePattern { get; set; } // 0x0000000180335300 0x0000000180335FD0
	public string PercentSymbol { get; set; } // 0x0000000180335310 0x0000000180336080
	public string PerMilleSymbol { get; set; } // 0x000000018016BC20 0x0000000180335C50
	public string PositiveInfinitySymbol { get; set; } // 0x0000000180335320 0x0000000180336130
	public string PositiveSign { get; set; } // 0x0000000180335330 0x00000001803361E0

	// Constructors
	internal NumberFormatInfo(int lcid, bool read_only); // 0x0000000180334D90
	internal NumberFormatInfo(bool read_only); // 0x0000000180334D70
	public NumberFormatInfo(); // 0x0000000180334D80
	private static NumberFormatInfo(); // 0x0000000180334950

	// Methods
	private void InitPatterns(); // 0x0000000180333700
	public object GetFormat(Type formatType); // 0x00000001803334C0
	public object Clone(); // 0x0000000180333450
	public static NumberFormatInfo ReadOnly(NumberFormatInfo nfi); // 0x00000001803348A0
	public static NumberFormatInfo GetInstance(IFormatProvider formatProvider); // 0x0000000180333540
}

// Namespace: System.Globalization
[Serializable]
public enum NumberStyles // TypeDefIndex: 406
{
	None = 0,
	AllowLeadingWhite = 1,
	AllowTrailingWhite = 2,
	AllowLeadingSign = 4,
	Integer = 7,
	AllowTrailingSign = 8,
	AllowParentheses = 16,
	AllowDecimalPoint = 32,
	AllowThousands = 64,
	Number = 111,
	AllowExponent = 128,
	Float = 167,
	AllowCurrencySymbol = 256,
	Currency = 383,
	Any = 511,
	AllowHexSpecifier = 512,
	HexNumber = 515
}

// Namespace: System.Globalization
[Serializable]
public class PersianCalendar : Calendar // TypeDefIndex: 407
{
	// Fields
	internal const long M_MinTicks = 196036416000000000; // 0x00
	internal const int M_MinYear = 1; // 0x00
	internal const int epoch = 226895; // 0x08
	public static readonly int PersianEra; // 0x00
	private static DateTime PersianMin; // 0x14
	private static DateTime PersianMax; // 0x20

	// Properties
	public override int[] Eras { get; } // 0x0000000180337D90 
	public override int TwoDigitYearMax { get; set; } // 0x0000000180156360 0x0000000180337FE0
	public override CalendarAlgorithmType AlgorithmType { get; } // 0x0000000180119A50 
	public override DateTime MinSupportedDateTime { get; } // 0x0000000180337EA0 
	public override DateTime MaxSupportedDateTime { get; } // 0x0000000180337E30 

	// Constructors
	public PersianCalendar(); // 0x0000000180337B10
	private static PersianCalendar(); // 0x0000000180337A30

	// Methods
	internal void M_CheckDateTime(DateTime time); // 0x00000001803373B0
	internal void M_CheckEra(int era); // 0x0000000180337430
	internal override void M_CheckYE(int year, int era); // 0x0000000180337510
	internal void M_CheckYME(int year, int month, int era); // 0x0000000180337790
	internal void M_CheckYMDE(int year, int month, int day, int era); // 0x0000000180337670
	internal int fixed_from_dmy(int day, int month, int year); // 0x0000000180337D40
	internal int year_from_fixed(int date); // 0x0000000180338060
	internal void my_from_fixed(out int month, out int year, int date); // 0x0000000180337F40
	internal void dmy_from_fixed(out int day, out int month, out int year, int date); // 0x0000000180337C50
	internal bool is_leap_year(int year); // 0x0000000180337F10
	public override DateTime AddMonths(DateTime time, int months); // 0x0000000180336880
	public override DateTime AddYears(DateTime time, int years); // 0x0000000180336A60
	public override int GetDayOfMonth(DateTime time); // 0x0000000180336C40
	public override DayOfWeek GetDayOfWeek(DateTime time); // 0x0000000180336D80
	public override int GetDayOfYear(DateTime time); // 0x0000000180336E30
	public override int GetDaysInMonth(int year, int month, int era); // 0x0000000180336F20
	public override int GetDaysInYear(int year, int era); // 0x0000000180336FA0
	public override int GetEra(DateTime time); // 0x0000000180336FF0
	public override int GetLeapMonth(int year, int era); // 0x00000001800EA8C0
	public override int GetMonth(DateTime time); // 0x00000001803370D0
	public override int GetMonthsInYear(int year, int era); // 0x0000000180328880
	public override int GetYear(DateTime time); // 0x00000001803371F0
	public override bool IsLeapDay(int year, int month, int day, int era); // 0x00000001803372B0
	public override bool IsLeapMonth(int year, int month, int era); // 0x0000000180337330
	public override bool IsLeapYear(int year, int era); // 0x0000000180337360
	public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era); // 0x0000000180337890
	public override int ToFourDigitYear(int year); // 0x00000001803379B0
}

// Namespace: System.Globalization
[Serializable]
public class RegionInfo // TypeDefIndex: 408
{
	// Fields
	private static RegionInfo currentRegion; // 0x00
	private int lcid; // 0x14
	private int regionId; // 0x20
	private string iso2Name; // 0x30
	private string iso3Name; // 0x40
	private string win3Name; // 0x08
	private string englishName; // 0x10
	private string currencySymbol; // 0x00
	private string isoCurrencySymbol; // 0x18
	private string currencyEnglishName; // 0x00
	private static Dictionary`2<string, int> <>f__switch$map1B; // 0x08

	// Properties
	public static RegionInfo CurrentRegion { get; } // 0x0000000180338500 
	public virtual string CurrencyEnglishName { get; } // 0x0000000180113E60 
	public virtual string CurrencySymbol { get; } // 0x0000000180119440 
	public virtual string DisplayName { get; } // 0x00000001801146E0 
	public virtual string EnglishName { get; } // 0x00000001801146E0 
	public virtual int GeoId { get; } // 0x0000000180156360 
	public virtual bool IsMetric { get; } // 0x0000000180338700 
	public virtual string ISOCurrencySymbol { get; } // 0x0000000180114BB0 
	public virtual string NativeName { get; } // 0x0000000180338820 
	public virtual string CurrencyNativeName { get; } // 0x00000001803384B0 
	public virtual string Name { get; } // 0x00000001800EAEC0 
	public virtual string ThreeLetterISORegionName { get; } // 0x00000001800EAEB0 
	public virtual string ThreeLetterWindowsRegionName { get; } // 0x000000018013BF80 
	public virtual string TwoLetterISORegionName { get; } // 0x00000001800EAEC0 

	// Constructors
	public RegionInfo(int culture); // 0x0000000180338260
	public RegionInfo(string name); // 0x0000000180338360

	// Methods
	private bool GetByTerritory(CultureInfo ci); // 0x0000000180338170
	private bool construct_internal_region_from_name(string name); // 0x00000001803384A0
	public override bool Equals(object value); // 0x00000001803380D0
	public override int GetHashCode(); // 0x0000000180338250
	public override string ToString(); // 0x00000001802613A0
}

// Namespace: System.Globalization
[Serializable]
public class StringInfo // TypeDefIndex: 409
{
	// Fields
	private string s; // 0x10
	private int length; // 0x00

	// Properties
	public int LengthInTextElements { get; } // 0x0000000180339AA0 
	public string String { get; set; } // 0x00000001800E20D0 0x0000000180339CE0

	// Constructors
	public StringInfo(); // 0x00000001800E2000
	public StringInfo(string value); // 0x0000000180339A20

	// Methods
	public override bool Equals(object value); // 0x0000000180338EF0
	public override int GetHashCode(); // 0x00000001801AAC10
	public string SubstringByTextElements(int startingTextElement); // 0x0000000180339910
	public string SubstringByTextElements(int startingTextElement, int lengthInTextElements); // 0x0000000180339730
	public static string GetNextTextElement(string str); // 0x00000001803391B0
	public static string GetNextTextElement(string str, int index); // 0x0000000180339230
	private static int GetNextTextElementLength(string str, int index); // 0x0000000180338FB0
	public static TextElementEnumerator GetTextElementEnumerator(string str); // 0x0000000180339380
	public static TextElementEnumerator GetTextElementEnumerator(string str, int index); // 0x00000001803392A0
	public static int[] ParseCombiningCharacters(string str); // 0x0000000180339440
}

// Namespace: System.Globalization
[Serializable]
public class TaiwanCalendar : Calendar // TypeDefIndex: 410
{
	// Fields
	internal static readonly CCGregorianEraHandler M_EraHandler; // 0x00
	private static DateTime TaiwanMin; // 0x18
	private static DateTime TaiwanMax; // 0x00

	// Properties
	public override int[] Eras { get; } // 0x000000018033AB90 
	public override int TwoDigitYearMax { get; set; } // 0x0000000180156360 0x000000018033AD30
	public override DateTime MinSupportedDateTime { get; } // 0x000000018033ACC0 
	public override DateTime MaxSupportedDateTime { get; } // 0x000000018033AC50 

	// Constructors
	public TaiwanCalendar(); // 0x000000018033AA60
	private static TaiwanCalendar(); // 0x000000018033A920

	// Methods
	internal void M_CheckDateTime(DateTime time); // 0x000000018033A3B0
	internal void M_CheckEra(int era); // 0x000000018033A430
	internal int M_CheckYEG(int year, int era); // 0x000000018033A4F0
	internal override void M_CheckYE(int year, int era); // 0x000000018033A610
	internal int M_CheckYMEG(int year, int month, int era); // 0x000000018033A6F0
	internal int M_CheckYMDEG(int year, int month, int day, int era); // 0x000000018033A620
	public override DateTime AddMonths(DateTime time, int months); // 0x0000000180339D60
	public override DateTime AddYears(DateTime time, int years); // 0x0000000180339E20
	public override int GetDayOfMonth(DateTime time); // 0x0000000180339EE0
	public override DayOfWeek GetDayOfWeek(DateTime time); // 0x0000000180339F70
	public override int GetDayOfYear(DateTime time); // 0x000000018033A010
	public override int GetDaysInMonth(int year, int month, int era); // 0x000000018033A0A0
	public override int GetDaysInYear(int year, int era); // 0x000000018033A0E0
	public override int GetEra(DateTime time); // 0x000000018033A110
	public override int GetLeapMonth(int year, int era); // 0x00000001800EA8C0
	public override int GetMonth(DateTime time); // 0x000000018033A1B0
	public override int GetMonthsInYear(int year, int era); // 0x000000018033A240
	public override int GetWeekOfYear(DateTime time, CalendarWeekRule rule, DayOfWeek firstDayOfWeek); // 0x00000001803288B0
	public override int GetYear(DateTime time); // 0x000000018033A260
	public override bool IsLeapDay(int year, int month, int day, int era); // 0x000000018033A300
	public override bool IsLeapMonth(int year, int month, int era); // 0x000000018033A350
	public override bool IsLeapYear(int year, int era); // 0x000000018033A380
	public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era); // 0x000000018033A7A0
	public override int ToFourDigitYear(int year); // 0x000000018033A880
}

// Namespace: System.Globalization
[Serializable]
public class TaiwanLunisolarCalendar : EastAsianLunisolarCalendar // TypeDefIndex: 411
{
	// Fields
	private const int TaiwanEra = 1; // 0x00
	internal static readonly CCEastAsianLunisolarEraHandler era_handler; // 0x08
	private static DateTime TaiwanMin; // 0x10
	private static DateTime TaiwanMax; // 0x18

	// Properties
	public override int[] Eras { get; } // 0x000000018033B050 
	public override DateTime MinSupportedDateTime { get; } // 0x000000018033B180 
	public override DateTime MaxSupportedDateTime { get; } // 0x000000018033B110 

	// Constructors
	public TaiwanLunisolarCalendar(); // 0x000000018033AFD0
	private static TaiwanLunisolarCalendar(); // 0x000000018033AE50

	// Methods
	public override int GetEra(DateTime time); // 0x000000018033ADB0
}

// Namespace: System.Globalization
[Serializable]
public class TextElementEnumerator : IEnumerator // TypeDefIndex: 412
{
	// Fields
	private int index; // 0x10
	private int elementindex; // 0x18
	private int startpos; // 0x28
	private string str; // 0x10
	private string element; // 0x20

	// Properties
	public object Current { get; } // 0x000000018033B370 
	public int ElementIndex { get; } // 0x000000018033B3D0 

	// Constructors
	internal TextElementEnumerator(string str, int startpos); // 0x000000018033B310

	// Methods
	public string GetTextElement(); // 0x000000018033B1F0
	public bool MoveNext(); // 0x000000018033B250
	public void Reset(); // 0x000000018033B300
}

// Namespace: System.Globalization
[Serializable]
public class TextInfo : ICloneable, IDeserializationCallback // TypeDefIndex: 413
{
	// Fields
	private string m_listSeparator; // 0x10
	private bool m_isReadOnly; // 0x20
	private string customCultureName; // 0x2C
	[NonSerialized]	private int m_nDataItem; // 0x38
	private bool m_useUserOverride; // 0x44
	private int m_win32LangID; // 0x10
	[NonSerialized]	private readonly CultureInfo ci; // 0x18
	[NonSerialized]	private readonly bool handleDotI; // 0x20
	[NonSerialized]	private readonly Data data; // 0x00

	// Properties
	public virtual int ANSICodePage { get; } // 0x000000018033C370 
	public virtual int EBCDICCodePage { get; } // 0x000000018033C3C0 
	public int LCID { get; } // 0x0000000180124660 
	public virtual string ListSeparator { get; set; } // 0x000000018033C4C0 0x0000000180114C30
	public virtual int MacCodePage { get; } // 0x000000018033C500 
	public virtual int OEMCodePage { get; } // 0x000000018033C520 
	public string CultureName { get; } // 0x000000018033C380 
	public bool IsReadOnly { get; } // 0x00000001801249E0 
	public bool IsRightToLeft { get; } // 0x000000018033C3E0 

	// Constructors
	internal TextInfo(CultureInfo ci, int lcid, void * data, bool read_only); // 0x000000018033C220
	private TextInfo(TextInfo textInfo); // 0x000000018033C180

	// Methods
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender); // 0x00000001800EA7B0
	public override bool Equals(object obj); // 0x000000018033B4A0
	public override int GetHashCode(); // 0x0000000180124660
	public override string ToString(); // 0x000000018033B900
	public string ToTitleCase(string str); // 0x000000018033BA30
	public virtual char ToLower(char c); // 0x000000018033B740
	public virtual char ToUpper(char c); // 0x000000018033BDD0
	private char ToTitleCase(char c); // 0x000000018033B980
	public virtual string ToLower(string str); // 0x000000018033B5E0
	public virtual string ToUpper(string str); // 0x000000018033C020
	public static TextInfo ReadOnly(TextInfo textInfo); // 0x000000018033B540
	public virtual object Clone(); // 0x000000018033B440
}

// Namespace: 
private struct Data // TypeDefIndex: 414
{
	// Fields
	public int ansi; // 0x10
	public int ebcdic; // 0x18
	public int mac; // 0x20
	public int oem; // 0x00
	public byte list_sep; // 0x08

}

// Namespace: System.Globalization
[Serializable]
public class ThaiBuddhistCalendar : Calendar // TypeDefIndex: 415
{
	// Fields
	public const int ThaiBuddhistEra = 1; // 0x00
	internal static readonly CCGregorianEraHandler M_EraHandler; // 0x08
	private static DateTime ThaiMin; // 0x00
	private static DateTime ThaiMax; // 0x04

	// Properties
	public override int[] Eras { get; } // 0x000000018033CE60 
	public override int TwoDigitYearMax { get; set; } // 0x0000000180156360 0x000000018033D000
	public override DateTime MinSupportedDateTime { get; } // 0x000000018033CF90 
	public override DateTime MaxSupportedDateTime { get; } // 0x000000018033CF20 

	// Constructors
	public ThaiBuddhistCalendar(); // 0x000000018033CD20
	private static ThaiBuddhistCalendar(); // 0x000000018033CBF0

	// Methods
	internal void M_CheckEra(int era); // 0x000000018033C7A0
	internal int M_CheckYEG(int year, int era); // 0x000000018033C860
	internal override void M_CheckYE(int year, int era); // 0x000000018033C980
	internal int M_CheckYMEG(int year, int month, int era); // 0x000000018033CA60
	internal int M_CheckYMDEG(int year, int month, int day, int era); // 0x000000018033C990
	public override DateTime AddMonths(DateTime time, int months); // 0x0000000180328700
	public override DateTime AddYears(DateTime time, int years); // 0x0000000180328740
	public override int GetDayOfMonth(DateTime time); // 0x0000000180328780
	public override DayOfWeek GetDayOfWeek(DateTime time); // 0x00000001803287A0
	public override int GetDayOfYear(DateTime time); // 0x00000001803287D0
	public override int GetDaysInMonth(int year, int month, int era); // 0x000000018033C540
	public override int GetDaysInYear(int year, int era); // 0x000000018033C580
	public override int GetEra(DateTime time); // 0x000000018033C5B0
	public override int GetLeapMonth(int year, int era); // 0x00000001800EA8C0
	public override int GetMonth(DateTime time); // 0x0000000180328860
	public override int GetMonthsInYear(int year, int era); // 0x0000000180328880
	public override int GetWeekOfYear(DateTime time, CalendarWeekRule rule, DayOfWeek firstDayOfWeek); // 0x00000001803288B0
	public override int GetYear(DateTime time); // 0x000000018033C650
	public override bool IsLeapDay(int year, int month, int day, int era); // 0x000000018033C6F0
	public override bool IsLeapMonth(int year, int month, int era); // 0x000000018033C740
	public override bool IsLeapYear(int year, int era); // 0x000000018033C770
	public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era); // 0x000000018033CB10
	public override int ToFourDigitYear(int year); // 0x0000000180328D40
}

// Namespace: System.Globalization
[Serializable]
public class UmAlQuraCalendar : Calendar // TypeDefIndex: 416
{
	// Fields
	public const int UmAlQuraEra = 1; // 0x00
	internal static readonly int M_MinFixed; // 0x04
	internal static readonly int M_MaxFixed; // 0x08
	internal int M_AddHijriDate; // 0x00
	private static DateTime Min; // 0x10
	private static DateTime Max; // 0x00

	// Properties
	public override int[] Eras { get; } // 0x000000018033E1E0 
	public override int TwoDigitYearMax { get; set; } // 0x0000000180156360 0x000000018033E380
	internal virtual int AddHijriDate { get; set; } // 0x0000000180114770 0x000000018033E330
	public override DateTime MinSupportedDateTime { get; } // 0x000000018033E2C0 
	public override DateTime MaxSupportedDateTime { get; } // 0x000000018033E250 

	// Constructors
	public UmAlQuraCalendar(); // 0x000000018033E0A0
	private static UmAlQuraCalendar(); // 0x000000018033DF90

	// Methods
	internal void M_CheckFixedHijri(string param, int rdHijri); // 0x000000018033D880
	internal void M_CheckDateTime(DateTime time); // 0x000000018033D790
	internal int M_FromDateTime(DateTime time); // 0x000000018032E220
	internal DateTime M_ToDateTime(int rd); // 0x000000018032E300
	internal DateTime M_ToDateTime(int date, int hour, int minute, int second, int milliseconds); // 0x000000018032E270
	internal void M_CheckEra(int era); // 0x000000018033D810
	internal override void M_CheckYE(int year, int era); // 0x000000018033DBF0
	internal void M_CheckYME(int year, int month, int era); // 0x000000018033DDA0
	internal void M_CheckYMDE(int year, int month, int day, int era); // 0x000000018033DCC0
	public override DateTime AddMonths(DateTime time, int months); // 0x000000018033D080
	public override DateTime AddYears(DateTime time, int years); // 0x000000018033D200
	public override int GetDayOfMonth(DateTime time); // 0x000000018033D350
	public override DayOfWeek GetDayOfWeek(DateTime time); // 0x000000018033D3D0
	public override int GetDayOfYear(DateTime time); // 0x000000018033D450
	public override int GetDaysInMonth(int year, int month, int era); // 0x000000018033D4F0
	public override int GetDaysInYear(int year, int era); // 0x000000018032D710
	public override int GetEra(DateTime time); // 0x000000018033D560
	public override int GetLeapMonth(int year, int era); // 0x00000001800EA8C0
	public override int GetMonth(DateTime time); // 0x000000018033D5E0
	public override int GetMonthsInYear(int year, int era); // 0x0000000180328880
	public override int GetYear(DateTime time); // 0x000000018033D660
	public override bool IsLeapDay(int year, int month, int day, int era); // 0x000000018033D6E0
	public override bool IsLeapMonth(int year, int month, int era); // 0x000000018033D760
	public override bool IsLeapYear(int year, int era); // 0x000000018032DA00
	public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era); // 0x000000018033DE80
	public override int ToFourDigitYear(int year); // 0x0000000180328D40
}

// Namespace: System.Globalization
[Serializable]
public enum UnicodeCategory // TypeDefIndex: 417
{
	UppercaseLetter = 0,
	LowercaseLetter = 1,
	TitlecaseLetter = 2,
	ModifierLetter = 3,
	OtherLetter = 4,
	NonSpacingMark = 5,
	SpacingCombiningMark = 6,
	EnclosingMark = 7,
	DecimalDigitNumber = 8,
	LetterNumber = 9,
	OtherNumber = 10,
	SpaceSeparator = 11,
	LineSeparator = 12,
	ParagraphSeparator = 13,
	Control = 14,
	Format = 15,
	Surrogate = 16,
	PrivateUse = 17,
	ConnectorPunctuation = 18,
	DashPunctuation = 19,
	OpenPunctuation = 20,
	ClosePunctuation = 21,
	InitialQuotePunctuation = 22,
	FinalQuotePunctuation = 23,
	OtherPunctuation = 24,
	MathSymbol = 25,
	CurrencySymbol = 26,
	ModifierSymbol = 27,
	OtherSymbol = 28,
	OtherNotAssigned = 29
}

// Namespace: System.IO.IsolatedStorage
public interface INormalizeForIsolatedStorage // TypeDefIndex: 418
{
	// Methods
	object Normalize();
}

// Namespace: System.IO.IsolatedStorage
public abstract class IsolatedStorage : MarshalByRefObject // TypeDefIndex: 419
{
	// Fields
	internal IsolatedStorageScope storage_scope; // 0x18
	internal object _assemblyIdentity; // 0x28
	internal object _domainIdentity; // 0x38
	internal object _applicationIdentity; // 0x48

	// Properties
	public object ApplicationIdentity { get; } // 0x000000018034F420 
	public object AssemblyIdentity { get; } // 0x000000018034F520 
	public virtual ulong CurrentSize { get; } // 0x000000018034F5F0 
	public object DomainIdentity { get; } // 0x000000018034F660 
	public virtual ulong MaximumSize { get; } // 0x000000018034F730 
	public IsolatedStorageScope Scope { get; } // 0x00000001800ED060 
	protected virtual char SeparatorExternal { get; } // 0x000000018034F7A0 
	protected virtual char SeparatorInternal { get; } // 0x000000018034F800 

	// Constructors
	protected IsolatedStorage(); // 0x00000001800EAC90

	// Methods
	protected abstract IsolatedStoragePermission GetPermission(PermissionSet ps);
	protected void InitStore(IsolatedStorageScope scope, Type domainEvidenceType, Type assemblyEvidenceType); // 0x000000018034F320
	protected void InitStore(IsolatedStorageScope scope, Type appEvidenceType); // 0x000000018034F280
	public abstract void Remove();
}

// Namespace: System.IO.IsolatedStorage
[Serializable]
public class IsolatedStorageException : Exception // TypeDefIndex: 420
{
	// Constructors
	public IsolatedStorageException(); // 0x000000018034B6B0
	public IsolatedStorageException(string message); // 0x000000018026BC40
	public IsolatedStorageException(string message, Exception inner); // 0x000000018026BCA0
	protected IsolatedStorageException(SerializationInfo info, StreamingContext context); // 0x000000018019B630

}

// Namespace: System.IO.IsolatedStorage
public sealed class IsolatedStorageFile : IsolatedStorage, IDisposable // TypeDefIndex: 421
{
	// Fields
	private bool _resolved; // 0x38
	private ulong _maxSize; // 0x48
	private Evidence _fullEvidences; // 0x50
	private static Mutex mutex; // 0x10
	private DirectoryInfo directory; // 0x20

	// Properties
	public override ulong CurrentSize { get; } // 0x000000018034EF40 
	public override ulong MaximumSize { get; } // 0x000000018034EFA0 
	internal string Root { get; } // 0x000000018034F250 

	// Constructors
	private IsolatedStorageFile(IsolatedStorageScope scope); // 0x000000018034EE40
	internal IsolatedStorageFile(IsolatedStorageScope scope, string location); // 0x000000018034EE70
	private static IsolatedStorageFile(); // 0x000000018034EDE0

	// Methods
	public static IEnumerator GetEnumerator(IsolatedStorageScope scope); // 0x000000018034D220
	public static IsolatedStorageFile GetStore(IsolatedStorageScope scope, Evidence domainEvidence, Type domainEvidenceType, Evidence assemblyEvidence, Type assemblyEvidenceType); // 0x000000018034DEE0
	public static IsolatedStorageFile GetStore(IsolatedStorageScope scope, object domainIdentity, object assemblyIdentity); // 0x000000018034E180
	public static IsolatedStorageFile GetStore(IsolatedStorageScope scope, Type domainEvidenceType, Type assemblyEvidenceType); // 0x000000018034DCE0
	public static IsolatedStorageFile GetStore(IsolatedStorageScope scope, object applicationIdentity); // 0x000000018034E2E0
	public static IsolatedStorageFile GetStore(IsolatedStorageScope scope, Type applicationEvidenceType); // 0x000000018034DC10
	public static IsolatedStorageFile GetMachineStoreForApplication(); // 0x000000018034D6E0
	public static IsolatedStorageFile GetMachineStoreForAssembly(); // 0x000000018034D770
	public static IsolatedStorageFile GetMachineStoreForDomain(); // 0x000000018034D820
	public static IsolatedStorageFile GetUserStoreForApplication(); // 0x000000018034E560
	public static IsolatedStorageFile GetUserStoreForAssembly(); // 0x000000018034E5F0
	public static IsolatedStorageFile GetUserStoreForDomain(); // 0x000000018034E6A0
	public static void Remove(IsolatedStorageScope scope); // 0x000000018034EA60
	internal static string GetIsolatedStorageRoot(IsolatedStorageScope scope); // 0x000000018034D5C0
	private static void Demand(IsolatedStorageScope scope); // 0x000000018034C900
	private static IsolatedStorageContainment ScopeToContainment(IsolatedStorageScope scope); // 0x000000018034ED60
	internal static ulong GetDirectorySize(DirectoryInfo di); // 0x000000018034CE00
	protected override void Finalize(); // 0x000000018021D4B0
	private void PostInit(); // 0x000000018034E780
	public void Close(); // 0x00000001800EA7B0
	public void CreateDirectory(string dir); // 0x000000018034C4E0
	public void DeleteDirectory(string dir); // 0x000000018034C760
	public void DeleteFile(string file); // 0x000000018034C870
	public void Dispose(); // 0x000000018034CA40
	public string[] GetDirectoryNames(string searchPattern); // 0x000000018034CBB0
	private string[] GetNames(FileSystemInfo[] afsi); // 0x000000018034DA20
	public string[] GetFileNames(string searchPattern); // 0x000000018034D370
	public override void Remove(); // 0x000000018034EAC0
	protected override IsolatedStoragePermission GetPermission(PermissionSet ps); // 0x000000018034DB30
	private string GetNameFromIdentity(object identity); // 0x000000018034D900
	private static object GetTypeFromEvidence(Evidence e, Type t); // 0x000000018034E3D0
	internal static object GetAssemblyIdentityFromEvidence(Evidence e); // 0x000000018034CA50
	internal static object GetDomainIdentityFromEvidence(Evidence e); // 0x000000018034D120
	private void SaveIdentities(string root); // 0x000000018034EAF0
}

// Namespace: 
[Serializable]
private struct Identities // TypeDefIndex: 422
{
	// Fields
	public object Application; // 0x10
	public object Assembly; // 0x20
	public object Domain; // 0x10

	// Constructors
	public Identities(object application, object assembly, object domain); // 0x0000000180006650

}

// Namespace: System.IO.IsolatedStorage
internal class IsolatedStorageFileEnumerator : IEnumerator // TypeDefIndex: 423
{
	// Fields
	private IsolatedStorageScope _scope; // 0x10
	private string[] _storages; // 0x20
	private int _pos; // 0x10

	// Properties
	public object Current { get; } // 0x000000018034B7B0 

	// Constructors
	public IsolatedStorageFileEnumerator(IsolatedStorageScope scope, string root); // 0x000000018034B730

	// Methods
	public bool MoveNext(); // 0x000000018034B700
	public void Reset(); // 0x000000018034B720
}

// Namespace: System.IO.IsolatedStorage
public class IsolatedStorageFileStream : FileStream // TypeDefIndex: 424
{
	// Properties
	public override bool CanRead { get; } // 0x0000000180346240 
	public override bool CanSeek { get; } // 0x0000000180346260 
	public override bool CanWrite { get; } // 0x0000000180346270 
	public override SafeFileHandle SafeFileHandle { get; } // 0x000000018034C470 
	public override IntPtr Handle { get; } // 0x000000018034C3F0 
	public override bool IsAsync { get; } // 0x0000000180306140 
	public override long Length { get; } // 0x000000018034C460 
	public override long Position { get; set; } // 0x0000000180346440 0x00000001803465D0

	// Constructors
	public IsolatedStorageFileStream(string path, FileMode mode); // 0x000000018034C050
	public IsolatedStorageFileStream(string path, FileMode mode, FileAccess access); // 0x000000018034C0D0
	public IsolatedStorageFileStream(string path, FileMode mode, FileAccess access, FileShare share); // 0x000000018034C1E0
	public IsolatedStorageFileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize); // 0x000000018034C370
	public IsolatedStorageFileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, IsolatedStorageFile isf); // 0x000000018034C160
	public IsolatedStorageFileStream(string path, FileMode mode, FileAccess access, FileShare share, IsolatedStorageFile isf); // 0x000000018034BFD0
	public IsolatedStorageFileStream(string path, FileMode mode, FileAccess access, IsolatedStorageFile isf); // 0x000000018034C260
	public IsolatedStorageFileStream(string path, FileMode mode, IsolatedStorageFile isf); // 0x000000018034C2F0

	// Methods
	private static string CreateIsolatedPath(IsolatedStorageFile isf, string path, FileMode mode); // 0x000000018034B910
	public override IAsyncResult BeginRead(byte[] buffer, int offset, int numBytes, AsyncCallback userCallback, object stateObject); // 0x000000018034B8F0
	public override IAsyncResult BeginWrite(byte[] buffer, int offset, int numBytes, AsyncCallback userCallback, object stateObject); // 0x000000018034B900
	public override int EndRead(IAsyncResult asyncResult); // 0x000000018034BF50
	public override void EndWrite(IAsyncResult asyncResult); // 0x000000018034BF60
	public override void Flush(); // 0x0000000180343850
	public override int Read(byte[] buffer, int offset, int count); // 0x000000018034BF80
	public override int ReadByte(); // 0x000000018034BF70
	public override long Seek(long offset, SeekOrigin origin); // 0x000000018034BF90
	public override void SetLength(long value); // 0x000000018034BFA0
	public override void Write(byte[] buffer, int offset, int count); // 0x000000018034BFC0
	public override void WriteByte(byte value); // 0x000000018034BFB0
	protected override void Dispose(bool disposing); // 0x000000018034BF40
}

// Namespace: System.IO.IsolatedStorage
[Serializable]
public enum IsolatedStorageScope // TypeDefIndex: 425
{
	None = 0,
	User = 1,
	Domain = 2,
	Assembly = 4,
	Roaming = 8,
	Machine = 16,
	Application = 32
}

// Namespace: System.IO
public class BinaryReader : IDisposable // TypeDefIndex: 426
{
	// Fields
	private const int MaxBufferSize = 128; // 0x00
	private Stream m_stream; // 0x18
	private Encoding m_encoding; // 0x28
	private byte[] m_buffer; // 0x38
	private Decoder decoder; // 0x00
	private char[] charBuffer; // 0x18
	private bool m_disposed; // 0x28

	// Properties
	public virtual Stream BaseStream { get; } // 0x00000001800E20D0 

	// Constructors
	public BinaryReader(Stream input); // 0x0000000180322990
	public BinaryReader(Stream input, Encoding encoding); // 0x0000000180322860

	// Methods
	private void System.IDisposable.Dispose(); // 0x0000000180322840
	public virtual void Close(); // 0x00000001803211E0
	protected virtual void Dispose(bool disposing); // 0x0000000180321210
	protected virtual void FillBuffer(int numBytes); // 0x0000000180321260
	public virtual int PeekChar(); // 0x00000001803213A0
	public virtual int Read(); // 0x00000001803223D0
	public virtual int Read(byte[] buffer, int index, int count); // 0x0000000180322660
	public virtual int Read(char[] buffer, int index, int count); // 0x0000000180322480
	private int ReadCharBytes(char[] buffer, int index, int count, out int bytes_read); // 0x00000001803218C0
	protected int Read7BitEncodedInt(); // 0x0000000180321540
	public virtual bool ReadBoolean(); // 0x0000000180321610
	public virtual byte ReadByte(); // 0x0000000180321630
	public virtual byte[] ReadBytes(int count); // 0x0000000180321720
	public virtual char ReadChar(); // 0x00000001803219D0
	public virtual char[] ReadChars(int count); // 0x0000000180321A40
	public virtual Decimal ReadDecimal(); // 0x0000000180321BA0
	public virtual double ReadDouble(); // 0x0000000180321E10
	public virtual short ReadInt16(); // 0x0000000180321E50
	public virtual int ReadInt32(); // 0x0000000180321ED0
	public virtual long ReadInt64(); // 0x0000000180321F90
	public virtual sbyte ReadSByte(); // 0x0000000180322110
	public virtual string ReadString(); // 0x0000000180322170
	public virtual float ReadSingle(); // 0x0000000180322130
	public virtual ushort ReadUInt16(); // 0x0000000180321E50
	public virtual uint ReadUInt32(); // 0x0000000180321ED0
	public virtual ulong ReadUInt64(); // 0x0000000180321F90
	private void CheckBuffer(int length); // 0x0000000180321150
}

// Namespace: System.IO
[Serializable]
public class BinaryWriter : IDisposable // TypeDefIndex: 427
{
	// Fields
	public static readonly BinaryWriter Null; // 0x00
	protected Stream OutStream; // 0x18
	private Encoding m_encoding; // 0x28
	private byte[] buffer; // 0x38
	private bool disposed; // 0x10
	private byte[] stringBuffer; // 0x20
	private int maxCharsPerRound; // 0x28

	// Properties
	public virtual Stream BaseStream { get; } // 0x00000001800E20D0 

	// Constructors
	protected BinaryWriter(); // 0x0000000180324350
	public BinaryWriter(Stream output); // 0x00000001803243F0
	public BinaryWriter(Stream output, Encoding encoding); // 0x0000000180324210
	private static BinaryWriter(); // 0x0000000180324130

	// Methods
	private void System.IDisposable.Dispose(); // 0x0000000180322840
	public virtual void Close(); // 0x0000000180322840
	protected virtual void Dispose(bool disposing); // 0x0000000180322B00
	public virtual void Flush(); // 0x0000000180322B40
	public virtual long Seek(int offset, SeekOrigin origin); // 0x0000000180322B70
	public virtual void Write(bool value); // 0x0000000180322DE0
	public virtual void Write(byte value); // 0x00000001803238E0
	public virtual void Write(byte[] buffer); // 0x0000000180322FE0
	public virtual void Write(byte[] buffer, int index, int count); // 0x0000000180324030
	public virtual void Write(char ch); // 0x0000000180323F10
	public virtual void Write(char[] chars); // 0x0000000180322EC0
	public virtual void Write(char[] chars, int index, int count); // 0x0000000180323C60
	public virtual void Write(Decimal value); // 0x0000000180323980
	public virtual void Write(double value); // 0x00000001803232E0
	public virtual void Write(short value); // 0x00000001803236F0
	public virtual void Write(int value); // 0x0000000180323D90
	public virtual void Write(long value); // 0x00000001803235E0
	public virtual void Write(sbyte value); // 0x0000000180323800
	public virtual void Write(float value); // 0x00000001803233A0
	public virtual void Write(string value); // 0x0000000180322C00
	public virtual void Write(ushort value); // 0x00000001803231D0
	public virtual void Write(uint value); // 0x0000000180323460
	public virtual void Write(ulong value); // 0x00000001803230C0
	protected void Write7BitEncodedInt(int value); // 0x0000000180322BA0
}

// Namespace: System.IO
public sealed class BufferedStream : Stream // TypeDefIndex: 428
{
	// Fields
	private Stream m_stream; // 0x10
	private byte[] m_buffer; // 0x20
	private int m_buffer_pos; // 0x28
	private int m_buffer_read_ahead; // 0x60
	private bool m_buffer_reading; // 0x10
	private bool disposed; // 0x20

	// Properties
	public override bool CanRead { get; } // 0x0000000180325280 
	public override bool CanWrite { get; } // 0x00000001803252E0 
	public override bool CanSeek { get; } // 0x00000001803252B0 
	public override long Length { get; } // 0x0000000180325310 
	public override long Position { get; set; } // 0x0000000180325350 0x00000001803253A0

	// Constructors
	public BufferedStream(Stream stream); // 0x0000000180324F70
	public BufferedStream(Stream stream, int bufferSize); // 0x00000001803250D0

	// Methods
	protected override void Dispose(bool disposing); // 0x00000001803244E0
	public override void Flush(); // 0x0000000180324530
	public override long Seek(long offset, SeekOrigin origin); // 0x00000001803249C0
	public override void SetLength(long value); // 0x0000000180324AA0
	public override int ReadByte(); // 0x0000000180324620
	public override void WriteByte(byte value); // 0x0000000180324C80
	public override int Read(out byte[] array, int offset, int count); // 0x00000001803246D0
	public override void Write(byte[] array, int offset, int count); // 0x0000000180324D20
	private void CheckObjectDisposedException(); // 0x0000000180324460
}

// Namespace: System.IO
public static class Directory // TypeDefIndex: 429
{
	// Methods
	public static DirectoryInfo CreateDirectory(string path); // 0x00000001803258A0
	private static DirectoryInfo CreateDirectoriesInternal(string path); // 0x0000000180325750
	public static void Delete(string path); // 0x0000000180325DD0
	private static void RecursiveDelete(string path); // 0x0000000180327780
	public static void Delete(string path, bool recursive); // 0x0000000180325C30
	public static bool Exists(string path); // 0x0000000180326110
	public static DateTime GetLastAccessTime(string path); // 0x0000000180326EA0
	public static DateTime GetLastAccessTimeUtc(string path); // 0x0000000180326E60
	public static DateTime GetLastWriteTime(string path); // 0x0000000180326F10
	public static DateTime GetLastWriteTimeUtc(string path); // 0x0000000180326ED0
	public static DateTime GetCreationTime(string path); // 0x00000001803261C0
	public static DateTime GetCreationTimeUtc(string path); // 0x0000000180326180
	public static string GetCurrentDirectory(); // 0x00000001803261F0
	public static string[] GetDirectories(string path); // 0x00000001803264D0
	public static string[] GetDirectories(string path, string searchPattern); // 0x0000000180326380
	public static string[] GetDirectories(string path, string searchPattern, SearchOption searchOption); // 0x00000001803263A0
	private static void GetDirectoriesRecurse(string path, string searchPattern, ArrayList all); // 0x0000000180326290
	public static string GetDirectoryRoot(string path); // 0x0000000180326520
	public static string[] GetFiles(string path); // 0x0000000180326CE0
	public static string[] GetFiles(string path, string searchPattern); // 0x0000000180326CC0
	public static string[] GetFiles(string path, string searchPattern, SearchOption searchOption); // 0x0000000180326D30
	private static void GetFilesRecurse(string path, string searchPattern, ArrayList all); // 0x0000000180326BD0
	public static string[] GetFileSystemEntries(string path); // 0x0000000180326B60
	public static string[] GetFileSystemEntries(string path, string searchPattern); // 0x0000000180326BB0
	public static string[] GetLogicalDrives(); // 0x0000000180326F40
	private static bool IsRootDirectory(string path); // 0x0000000180327250
	public static DirectoryInfo GetParent(string path); // 0x0000000180326F50
	public static void Move(string sourceDirName, string destDirName); // 0x0000000180327350
	public static void SetCreationTime(string path, DateTime creationTime); // 0x0000000180327980
	public static void SetCreationTimeUtc(string path, DateTime creationTimeUtc); // 0x0000000180327940
	public static void SetCurrentDirectory(string path); // 0x00000001803279A0
	public static void SetLastAccessTime(string path, DateTime lastAccessTime); // 0x0000000180327BA0
	public static void SetLastAccessTimeUtc(string path, DateTime lastAccessTimeUtc); // 0x0000000180327B60
	public static void SetLastWriteTime(string path, DateTime lastWriteTime); // 0x0000000180327C00
	public static void SetLastWriteTimeUtc(string path, DateTime lastWriteTimeUtc); // 0x0000000180327BC0
	private static void CheckPathExceptions(string path); // 0x00000001803255E0
	private static string[] GetFileSystemEntries(string path, string searchPattern, FileAttributes mask, FileAttributes attrs); // 0x0000000180326590
}

// Namespace: System.IO
[Serializable]
public sealed class DirectoryInfo : FileSystemInfo // TypeDefIndex: 430
{
	// Fields
	private string current; // 0x60
	private string parent; // 0x10

	// Properties
	public override bool Exists { get; } // 0x000000018033F970 
	public override string Name { get; } // 0x0000000180114BE0 
	public DirectoryInfo Parent { get; } // 0x000000018033FA00 
	public DirectoryInfo Root { get; } // 0x000000018033FA70 

	// Constructors
	public DirectoryInfo(string path); // 0x000000018033F770
	internal DirectoryInfo(string path, bool simpleOriginalPath); // 0x000000018033F850
	private DirectoryInfo(SerializationInfo info, StreamingContext context); // 0x000000018033F6C0

	// Methods
	private void Initialize(); // 0x000000018033F2E0
	public void Create(); // 0x000000018033E4B0
	public DirectoryInfo CreateSubdirectory(string path); // 0x000000018033E400
	public FileInfo[] GetFiles(); // 0x000000018033F100
	public FileInfo[] GetFiles(string searchPattern); // 0x000000018033F140
	public DirectoryInfo[] GetDirectories(); // 0x000000018033E940
	public DirectoryInfo[] GetDirectories(string searchPattern); // 0x000000018033E4E0
	public FileSystemInfo[] GetFileSystemInfos(); // 0x000000018033E980
	public FileSystemInfo[] GetFileSystemInfos(string searchPattern); // 0x000000018033E9C0
	public override void Delete(); // 0x000000018033E4C0
	public void Delete(bool recursive); // 0x000000018033E4D0
	public void MoveTo(string destDirName); // 0x000000018033F590
	public override string ToString(); // 0x00000001800EAEB0
	public DirectoryInfo[] GetDirectories(string searchPattern, SearchOption searchOption); // 0x000000018033E680
	internal int GetFilesSubdirs(ArrayList l, string pattern); // 0x000000018033EC90
	public FileInfo[] GetFiles(string searchPattern, SearchOption searchOption); // 0x000000018033EDC0
}

// Namespace: System.IO
[Serializable]
public class DirectoryNotFoundException : IOException // TypeDefIndex: 431
{
	// Constructors
	public DirectoryNotFoundException(); // 0x000000018033FB10
	public DirectoryNotFoundException(string message); // 0x000000018010E1E0
	public DirectoryNotFoundException(string message, Exception innerException); // 0x000000018010E1D0
	protected DirectoryNotFoundException(SerializationInfo info, StreamingContext context); // 0x000000018010E170

}

// Namespace: System.IO
[Serializable]
public sealed class DriveInfo : ISerializable // TypeDefIndex: 432
{
	// Fields
	private _DriveType _drive_type; // 0x10
	private string drive_format; // 0x20
	private string path; // 0x10

	// Properties
	public long AvailableFreeSpace { get; } // 0x0000000180340440 
	public long TotalFreeSpace { get; } // 0x0000000180340580 
	public long TotalSize { get; } // 0x0000000180340650 
	public string VolumeLabel { get; set; } // 0x00000001800EAEB0 0x0000000180340720
	public string DriveFormat { get; } // 0x00000001800EAEC0 
	public DriveType DriveType { get; } // 0x0000000180340510 
	public string Name { get; } // 0x00000001800EAEB0 
	public DirectoryInfo RootDirectory { get; } // 0x0000000180340520 
	public bool IsReady { get; } // 0x000000018010E420 

	// Constructors
	private DriveInfo(_DriveType _drive_type, string path, string fstype); // 0x00000001803403F0
	public DriveInfo(string driveName); // 0x0000000180340280

	// Methods
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x000000018033FF40
	private static void GetDiskFreeSpace(string path, out ulong availableFreeSpace, out ulong totalSize, out ulong totalFreeSpace); // 0x000000018033FB60
	private static StreamReader TryOpen(string name); // 0x000000018033FF90
	private static DriveInfo[] LinuxGetDrives(); // 0x000000018033FC60
	private static DriveInfo[] UnixGetDrives(); // 0x0000000180340040
	private static DriveInfo[] WindowsGetDrives(); // 0x0000000180340230
	public static DriveInfo[] GetDrives(); // 0x000000018033FC30
	public override string ToString(); // 0x00000001800EAEB0
	private static bool GetDiskFreeSpaceInternal(string pathName, out ulong freeBytesAvail, out ulong totalNumberOfBytes, out ulong totalNumberOfFreeBytes, out MonoIOError error); // 0x000000018033FB50
	private static uint GetDriveTypeInternal(string rootPathName); // 0x000000018033FC20
}

// Namespace: 
private enum _DriveType // TypeDefIndex: 433
{
	GenericUnix = 0,
	Linux = 1,
	Windows = 2
}

// Namespace: System.IO
[Serializable]
public class DriveNotFoundException : IOException // TypeDefIndex: 434
{
	// Fields
	private const int ErrorCode = -2147024893; // 0x00

	// Constructors
	public DriveNotFoundException(); // 0x0000000180340770
	public DriveNotFoundException(string message); // 0x00000001803407E0
	public DriveNotFoundException(string message, Exception innerException); // 0x00000001803407C0
	protected DriveNotFoundException(SerializationInfo info, StreamingContext context); // 0x000000018010E170

}

// Namespace: System.IO
[Serializable]
public enum DriveType // TypeDefIndex: 435
{
	Unknown = 0,
	NoRootDirectory = 1,
	Removable = 2,
	Fixed = 3,
	Network = 4,
	CDRom = 5,
	Ram = 6
}

// Namespace: System.IO
[Serializable]
public class EndOfStreamException : IOException // TypeDefIndex: 436
{
	// Constructors
	public EndOfStreamException(); // 0x0000000180340800
	public EndOfStreamException(string message); // 0x000000018010E1E0
	protected EndOfStreamException(SerializationInfo info, StreamingContext context); // 0x000000018010E170
	public EndOfStreamException(string message, Exception innerException); // 0x000000018010E1D0

}

// Namespace: System.IO
public static class File // TypeDefIndex: 437
{
	// Fields
	private static Nullable`1<DateTime> defaultLocalFileTime; // 0x00

	// Properties
	private static DateTime DefaultLocalFileTime { get; } // 0x000000018034B560 

	// Methods
	public static void AppendAllText(string path, string contents); // 0x0000000180347840
	public static void AppendAllText(string path, string contents, Encoding encoding); // 0x0000000180347730
	public static StreamWriter AppendText(string path); // 0x0000000180347940
	public static void Copy(string sourceFileName, string destFileName); // 0x0000000180347B40
	public static void Copy(string sourceFileName, string destFileName, bool overwrite); // 0x0000000180347B50
	public static FileStream Create(string path); // 0x00000001803483B0
	public static FileStream Create(string path, int bufferSize); // 0x0000000180348330
	public static StreamWriter CreateText(string path); // 0x00000001803482D0
	public static void Delete(string path); // 0x00000001803484A0
	public static bool Exists(string path); // 0x0000000180348820
	public static FileAttributes GetAttributes(string path); // 0x0000000180348960
	public static DateTime GetCreationTime(string path); // 0x0000000180348C90
	public static DateTime GetCreationTimeUtc(string path); // 0x0000000180348B30
	public static DateTime GetLastAccessTime(string path); // 0x0000000180348F10
	public static DateTime GetLastAccessTimeUtc(string path); // 0x0000000180348DB0
	public static DateTime GetLastWriteTime(string path); // 0x0000000180349190
	public static DateTime GetLastWriteTimeUtc(string path); // 0x0000000180349030
	public static void Move(string sourceFileName, string destFileName); // 0x00000001803492B0
	public static FileStream Open(string path, FileMode mode); // 0x0000000180349A20
	public static FileStream Open(string path, FileMode mode, FileAccess access); // 0x0000000180349990
	public static FileStream Open(string path, FileMode mode, FileAccess access, FileShare share); // 0x0000000180349AB0
	public static FileStream OpenRead(string path); // 0x00000001803497E0
	public static StreamReader OpenText(string path); // 0x0000000180349860
	public static FileStream OpenWrite(string path); // 0x0000000180349910
	public static void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName); // 0x000000018034A1C0
	public static void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors); // 0x000000018034A1E0
	public static void SetAttributes(string path, FileAttributes fileAttributes); // 0x000000018034A9F0
	public static void SetCreationTime(string path, DateTime creationTime); // 0x000000018034AAB0
	public static void SetCreationTimeUtc(string path, DateTime creationTimeUtc); // 0x0000000180327940
	public static void SetLastAccessTime(string path, DateTime lastAccessTime); // 0x000000018034ACA0
	public static void SetLastAccessTimeUtc(string path, DateTime lastAccessTimeUtc); // 0x0000000180327B60
	public static void SetLastWriteTime(string path, DateTime lastWriteTime); // 0x000000018034AE90
	public static void SetLastWriteTimeUtc(string path, DateTime lastWriteTimeUtc); // 0x0000000180327BC0
	private static void CheckPathExceptions(string path); // 0x00000001803479A0
	public static byte[] ReadAllBytes(string path); // 0x0000000180349B50
	public static string[] ReadAllLines(string path); // 0x0000000180349DD0
	public static string[] ReadAllLines(string path, Encoding encoding); // 0x0000000180349F30
	private static string[] ReadAllLines(StreamReader reader); // 0x0000000180349D10
	public static string ReadAllText(string path); // 0x000000018034A040
	public static string ReadAllText(string path, Encoding encoding); // 0x000000018034A0A0
	public static void WriteAllBytes(string path, byte[] bytes); // 0x000000018034B080
	public static void WriteAllLines(string path, string[] contents); // 0x000000018034B2F0
	public static void WriteAllLines(string path, string[] contents, Encoding encoding); // 0x000000018034B200
	private static void WriteAllLines(StreamWriter writer, string[] contents); // 0x000000018034B180
	public static void WriteAllText(string path, string contents); // 0x000000018034B4F0
	public static void WriteAllText(string path, string contents, Encoding encoding); // 0x000000018034B3E0
	public static void Encrypt(string path); // 0x00000001803487B0
	public static void Decrypt(string path); // 0x0000000180348430
}

// Namespace: System.IO
[Serializable]
public enum FileAccess // TypeDefIndex: 438
{
	Read = 1,
	Write = 2,
	ReadWrite = 3
}

// Namespace: System.IO
[Serializable]
public enum FileAttributes // TypeDefIndex: 439
{
	ReadOnly = 1,
	Hidden = 2,
	System = 4,
	Directory = 16,
	Archive = 32,
	Device = 64,
	Normal = 128,
	Temporary = 256,
	SparseFile = 512,
	ReparsePoint = 1024,
	Compressed = 2048,
	Offline = 4096,
	NotContentIndexed = 8192,
	Encrypted = 16384
}

// Namespace: System.IO
[Serializable]
public sealed class FileInfo : FileSystemInfo // TypeDefIndex: 440
{
	// Fields
	private bool exists; // 0x60

	// Properties
	public override bool Exists { get; } // 0x00000001803418F0 
	public override string Name { get; } // 0x00000001803415D0 
	public bool IsReadOnly { get; set; } // 0x0000000180341980 0x0000000180341B40
	public long Length { get; } // 0x0000000180341A60 
	public string DirectoryName { get; } // 0x00000001803417F0 
	public DirectoryInfo Directory { get; } // 0x0000000180341850 

	// Constructors
	public FileInfo(string fileName); // 0x00000001803416E0
	private FileInfo(SerializationInfo info, StreamingContext context); // 0x0000000180341630

	// Methods
	internal override void InternalRefresh(); // 0x0000000180340F20
	public void Encrypt(); // 0x0000000180340EB0
	public void Decrypt(); // 0x0000000180340C50
	public StreamReader OpenText(); // 0x0000000180341130
	public StreamWriter CreateText(); // 0x0000000180340BC0
	public StreamWriter AppendText(); // 0x0000000180340850
	public FileStream Create(); // 0x0000000180340C40
	public FileStream OpenRead(); // 0x0000000180341100
	public FileStream OpenWrite(); // 0x0000000180341200
	public FileStream Open(FileMode mode); // 0x00000001803412F0
	public FileStream Open(FileMode mode, FileAccess access); // 0x00000001803412D0
	public FileStream Open(FileMode mode, FileAccess access, FileShare share); // 0x0000000180341230
	public override void Delete(); // 0x0000000180340CC0
	public void MoveTo(string destFileName); // 0x0000000180340F40
	public FileInfo CopyTo(string destFileName); // 0x0000000180340A60
	public FileInfo CopyTo(string destFileName, bool overwrite); // 0x00000001803408D0
	public override string ToString(); // 0x00000001803415D0
	public FileInfo Replace(string destinationFileName, string destinationBackupFileName); // 0x0000000180341310
	public FileInfo Replace(string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors); // 0x0000000180341580
}

// Namespace: System.IO
[Serializable]
public class FileLoadException : IOException // TypeDefIndex: 441
{
	// Fields
	private const int Result = -2147024894; // 0x00
	private string msg; // 0x68
	private string fileName; // 0x10
	private string fusionLog; // 0x00

	// Properties
	public override string Message { get; } // 0x0000000180114BE0 
	public string FileName { get; } // 0x00000001801136C0 
	public string FusionLog { get; } // 0x000000018017D300 

	// Constructors
	public FileLoadException(); // 0x0000000180341EB0
	public FileLoadException(string message); // 0x0000000180342070
	public FileLoadException(string message, string fileName); // 0x0000000180342000
	public FileLoadException(string message, Exception inner); // 0x0000000180342040
	public FileLoadException(string message, string fileName, Exception inner); // 0x0000000180341FB0
	protected FileLoadException(SerializationInfo info, StreamingContext context); // 0x0000000180341F10

	// Methods
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0000000180341CD0
	public override string ToString(); // 0x0000000180341D70
}

// Namespace: System.IO
[Serializable]
public enum FileMode // TypeDefIndex: 442
{
	CreateNew = 1,
	Create = 2,
	Open = 3,
	OpenOrCreate = 4,
	Truncate = 5,
	Append = 6
}

// Namespace: System.IO
[Serializable]
public class FileNotFoundException : IOException // TypeDefIndex: 443
{
	// Fields
	private const int Result = -2146232799; // 0x00
	private string fileName; // 0x68
	private string fusionLog; // 0x10

	// Properties
	public string FileName { get; } // 0x0000000180114BE0 
	public string FusionLog { get; } // 0x00000001801136C0 
	public override string Message { get; } // 0x0000000180342450 

	// Constructors
	public FileNotFoundException(); // 0x00000001803423C0
	public FileNotFoundException(string message); // 0x00000001803422D0
	public FileNotFoundException(string message, Exception innerException); // 0x00000001803422B0
	public FileNotFoundException(string message, string fileName); // 0x00000001803422F0
	public FileNotFoundException(string message, string fileName, Exception innerException); // 0x0000000180342410
	protected FileNotFoundException(SerializationInfo info, StreamingContext context); // 0x0000000180342320

	// Methods
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00000001803420A0
	public override string ToString(); // 0x0000000180342140
}

// Namespace: System.IO
[Serializable]
public enum FileOptions // TypeDefIndex: 444
{
	WriteThrough = -2147483648,
	None = 0,
	Encrypted = 16384,
	DeleteOnClose = 67108864,
	SequentialScan = 134217728,
	RandomAccess = 268435456,
	Asynchronous = 1073741824
}

// Namespace: System.IO
[Serializable]
public enum FileShare // TypeDefIndex: 445
{
	None = 0,
	Read = 1,
	Write = 2,
	ReadWrite = 3,
	Delete = 4,
	Inheritable = 16
}

// Namespace: System.IO
public class FileStream : Stream // TypeDefIndex: 446
{
	// Fields
	internal const int DefaultBufferSize = 8192; // 0x00
	private FileAccess access; // 0x14
	private bool owner; // 0x16
	private bool async; // 0x20
	private bool canseek; // 0x30
	private long append_startpos; // 0x38
	private bool anonymous; // 0x40
	private byte[] buf; // 0x50
	private int buf_size; // 0x10
	private int buf_length; // 0x19
	private int buf_offset; // 0x28
	private bool buf_dirty; // 0x38
	private long buf_start; // 0x48
	private string name; // 0x50
	private IntPtr handle; // 0x58
	private SafeFileHandle safeHandle; // 0x18

	// Properties
	public override bool CanRead { get; } // 0x0000000180346240 
	public override bool CanWrite { get; } // 0x0000000180346270 
	public override bool CanSeek { get; } // 0x0000000180346260 
	public virtual bool IsAsync { get; } // 0x0000000180306140 
	public string Name { get; } // 0x0000000180113E60 
	public override long Length { get; } // 0x0000000180346290 
	public override long Position { get; set; } // 0x0000000180346440 0x00000001803465D0
	public virtual IntPtr Handle { get; } // 0x00000001801513A0 
	public virtual SafeFileHandle SafeFileHandle { get; } // 0x0000000180346540 

	// Constructors
	public FileStream(IntPtr handle, FileAccess access); // 0x00000001803461B0
	public FileStream(IntPtr handle, FileAccess access, bool ownsHandle); // 0x0000000180345E60
	public FileStream(IntPtr handle, FileAccess access, bool ownsHandle, int bufferSize); // 0x0000000180345D40
	public FileStream(IntPtr handle, FileAccess access, bool ownsHandle, int bufferSize, bool isAsync); // 0x00000001803461E0
	internal FileStream(IntPtr handle, FileAccess access, bool ownsHandle, int bufferSize, bool isAsync, bool noBuffering); // 0x0000000180345ED0
	public FileStream(string path, FileMode mode); // 0x00000001803453D0
	public FileStream(string path, FileMode mode, FileAccess access); // 0x0000000180345DD0
	public FileStream(string path, FileMode mode, FileAccess access, FileShare share); // 0x0000000180346210
	public FileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize); // 0x0000000180345E90
	public FileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, bool useAsync); // 0x0000000180345E20
	internal FileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, bool isAsync, bool anonymous); // 0x0000000180345D70
	internal FileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, bool anonymous, FileOptions options); // 0x0000000180345420

	// Methods
	public override int ReadByte(); // 0x0000000180343E10
	public override void WriteByte(byte value); // 0x0000000180344D80
	public override int Read(out byte[] array, int offset, int count); // 0x0000000180344290
	private int ReadInternal(byte[] dest, int offset, int count); // 0x0000000180344110
	public override IAsyncResult BeginRead(byte[] array, int offset, int numBytes, AsyncCallback userCallback, object stateObject); // 0x00000001803427B0
	public override int EndRead(IAsyncResult asyncResult); // 0x0000000180343100
	public override void Write(byte[] array, int offset, int count); // 0x0000000180345150
	private void WriteInternal(byte[] src, int offset, int count); // 0x0000000180344F50
	public override IAsyncResult BeginWrite(byte[] array, int offset, int numBytes, AsyncCallback userCallback, object stateObject); // 0x0000000180342AB0
	public override void EndWrite(IAsyncResult asyncResult); // 0x00000001803433A0
	public override long Seek(long offset, SeekOrigin origin); // 0x0000000180344660
	public override void SetLength(long value); // 0x0000000180344930
	public override void Flush(); // 0x0000000180343850
	public virtual void Lock(long position, long length); // 0x0000000180343BB0
	public virtual void Unlock(long position, long length); // 0x0000000180344BA0
	protected override void Finalize(); // 0x00000001802BAAF0
	protected override void Dispose(bool disposing); // 0x0000000180342F30
	private int ReadSegment(byte[] dest, int dest_offset, int count); // 0x0000000180344230
	private int WriteSegment(byte[] src, int src_offset, int count); // 0x00000001803450E0
	private void FlushBuffer(Stream st); // 0x0000000180343640
	private void FlushBuffer(); // 0x0000000180343840
	private void FlushBufferIfDirty(); // 0x0000000180343620
	private void RefillBuffer(); // 0x0000000180344620
	private int ReadData(IntPtr handle, byte[] buf, int offset, int count); // 0x0000000180343FE0
	private void InitBuffer(int size, bool noBuffering); // 0x0000000180343AF0
	private string GetSecureFileName(string filename); // 0x0000000180343A20
	private string GetSecureFileName(string filename, bool full); // 0x0000000180343910
}

// Namespace: 
private delegate int ReadDelegate(byte[] buffer, int offset, int count); // TypeDefIndex: 447; 0x0000000180355FB0

// Namespace: 
private delegate void WriteDelegate(byte[] buffer, int offset, int count); // TypeDefIndex: 448; 0x0000000180358E20

// Namespace: System.IO
internal class FileStreamAsyncResult : IAsyncResult // TypeDefIndex: 449
{
	// Fields
	private object state; // 0x10
	private bool completed; // 0x19
	private bool done; // 0x28
	private Exception exc; // 0x38
	private ManualResetEvent wh; // 0x48
	private AsyncCallback cb; // 0x50
	private bool completedSynch; // 0x58
	public byte[] Buffer; // 0x18
	public int Offset; // 0x28
	public int Count; // 0x10
	public int OriginalCount; // 0x14
	public int BytesRead; // 0x20
	private AsyncCallback realcb; // 0x2C

	// Properties
	public object AsyncState { get; } // 0x00000001800E20D0 
	public bool CompletedSynchronously { get; } // 0x00000001801B1360 
	public WaitHandle AsyncWaitHandle { get; } // 0x000000018013BF80 
	public bool IsCompleted { get; } // 0x00000001801249E0 
	public Exception Exception { get; } // 0x00000001800EAEB0 
	public bool Done { get; set; } // 0x00000001802A7760 0x00000001802A7770

	// Constructors
	public FileStreamAsyncResult(AsyncCallback cb, object state); // 0x0000000180342700

	// Methods
	private static void CBWrapper(IAsyncResult ares); // 0x0000000180342570
	public void SetComplete(Exception e); // 0x0000000180342660
	public void SetComplete(Exception e, int nbytes); // 0x0000000180342610
	public void SetComplete(Exception e, int nbytes, bool synch); // 0x00000001803426B0
}

// Namespace: System.IO
[Serializable]
public abstract class FileSystemInfo : MarshalByRefObject, ISerializable // TypeDefIndex: 450
{
	// Fields
	protected string FullPath; // 0x18
	protected string OriginalPath; // 0x28
	internal MonoIOStat stat; // 0x10
	internal bool valid; // 0x14

	// Properties
	public abstract bool Exists { get; }
	public abstract string Name { get; }
	public virtual string FullName { get; } // 0x00000001800EAEC0 
	public string Extension { get; } // 0x0000000180346B60 
	public FileAttributes Attributes { get; set; } // 0x0000000180346A20 0x0000000180346F50
	public DateTime CreationTime { get; set; } // 0x0000000180346AE0 0x0000000180347170
	public DateTime CreationTimeUtc { get; set; } // 0x0000000180346A40 0x0000000180347040
	public DateTime LastAccessTime { get; set; } // 0x0000000180346DA0 0x00000001803473C0
	public DateTime LastAccessTimeUtc { get; set; } // 0x0000000180346CF0 0x0000000180347290
	public DateTime LastWriteTime { get; set; } // 0x0000000180346ED0 0x0000000180347610
	public DateTime LastWriteTimeUtc { get; set; } // 0x0000000180346E20 0x00000001803474E0

	// Constructors
	protected FileSystemInfo(); // 0x00000001803469F0
	protected FileSystemInfo(SerializationInfo info, StreamingContext context); // 0x0000000180341630

	// Methods
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0000000180346850
	public abstract void Delete();
	public void Refresh(); // 0x00000001803469E0
	internal void Refresh(bool force); // 0x0000000180346930
	internal virtual void InternalRefresh(); // 0x00000001800EA7B0
	internal void CheckPath(string path); // 0x0000000180346730
}

// Namespace: System.IO
[Serializable]
public class IOException : SystemException // TypeDefIndex: 451
{
	// Constructors
	public IOException(); // 0x000000018034B670
	public IOException(string message); // 0x000000018010E1E0
	public IOException(string message, Exception innerException); // 0x000000018010E1D0
	protected IOException(SerializationInfo info, StreamingContext context); // 0x000000018010E170
	public IOException(string message, int hresult); // 0x0000000180129EB0

}

// Namespace: System.IO
[Serializable]
public class MemoryStream : Stream // TypeDefIndex: 452
{
	// Fields
	private bool canWrite; // 0x10
	private bool allowGetBuffer; // 0x14
	private int capacity; // 0x20
	private int length; // 0x2C
	private byte[] internalBuffer; // 0x30
	private int initialIndex; // 0x10
	private bool expandable; // 0x00
	private bool streamClosed; // 0x00
	private int position; // 0x00
	private int dirty_bytes; // 0x10

	// Properties
	public override bool CanRead { get; } // 0x0000000180350A30 
	public override bool CanSeek { get; } // 0x0000000180350A30 
	public override bool CanWrite { get; } // 0x0000000180350A40 
	public virtual int Capacity { get; set; } // 0x0000000180350A60 0x0000000180350BB0
	public override long Length { get; } // 0x0000000180350AD0 
	public override long Position { get; set; } // 0x0000000180350B40 0x0000000180350E30

	// Constructors
	public MemoryStream(); // 0x0000000180350780
	public MemoryStream(int capacity); // 0x0000000180350800
	public MemoryStream(byte[] buffer); // 0x0000000180350570
	public MemoryStream(byte[] buffer, bool writable); // 0x00000001803508C0
	public MemoryStream(byte[] buffer, int index, int count); // 0x0000000180350990
	public MemoryStream(byte[] buffer, int index, int count, bool writable); // 0x0000000180350630
	public MemoryStream(byte[] buffer, int index, int count, bool writable, bool publiclyVisible); // 0x00000001803506D0

	// Methods
	private void InternalConstructor(byte[] buffer, int index, int count, bool writable, bool publicallyVisible); // 0x000000018034F980
	private void CheckIfClosedThrowDisposed(); // 0x000000018034F830
	protected override void Dispose(bool disposing); // 0x000000018034F8A0
	public override void Flush(); // 0x00000001800EA7B0
	public virtual byte[] GetBuffer(); // 0x000000018034F920
	public override int Read(out byte[] buffer, int offset, int count); // 0x000000018034FB70
	public override int ReadByte(); // 0x000000018034FAC0
	public override long Seek(long offset, SeekOrigin loc); // 0x000000018034FD20
	private int CalculateNewCapacity(int minimum); // 0x000000018034F810
	private void Expand(int newSize); // 0x000000018034F8B0
	public override void SetLength(long value); // 0x000000018034FF20
	public virtual byte[] ToArray(); // 0x00000001803500F0
	public override void Write(byte[] buffer, int offset, int count); // 0x0000000180350380
	public override void WriteByte(byte value); // 0x0000000180350170
	public virtual void WriteTo(Stream stream); // 0x0000000180350290
}

// Namespace: System.IO
internal enum MonoFileType // TypeDefIndex: 453
{
	Unknown = 0,
	Disk = 1,
	Char = 2,
	Pipe = 3,
	Remote = 32768
}

// Namespace: System.IO
internal sealed class MonoIO // TypeDefIndex: 454
{
	// Fields
	public static readonly FileAttributes InvalidFileAttributes; // 0x00
	public static readonly IntPtr InvalidHandle; // 0x10

	// Properties
	public static IntPtr ConsoleOutput { get; } // 0x0000000180351F60 
	public static IntPtr ConsoleInput { get; } // 0x0000000180351F50 
	public static IntPtr ConsoleError { get; } // 0x0000000180351F40 
	public static char VolumeSeparatorChar { get; } // 0x0000000180351F90 
	public static char DirectorySeparatorChar { get; } // 0x0000000180351F70 
	public static char AltDirectorySeparatorChar { get; } // 0x0000000180351F30 
	public static char PathSeparator { get; } // 0x0000000180351F80 

	// Constructors
	public MonoIO(); // 0x00000001800E2000
	private static MonoIO(); // 0x0000000180351ED0

	// Methods
	public static Exception GetException(MonoIOError error); // 0x0000000180351230
	public static Exception GetException(string path, MonoIOError error); // 0x0000000180351330
	public static bool CreateDirectory(string path, out MonoIOError error); // 0x0000000180350F70
	public static bool RemoveDirectory(string path, out MonoIOError error); // 0x00000001803519E0
	public static string[] GetFileSystemEntries(string path, string path_with_pattern, int attrs, int mask, out MonoIOError error); // 0x0000000180351950
	public static string GetCurrentDirectory(out MonoIOError error); // 0x0000000180351220
	public static bool SetCurrentDirectory(string path, out MonoIOError error); // 0x0000000180351AC0
	public static bool MoveFile(string path, string dest, out MonoIOError error); // 0x00000001803519A0
	public static bool CopyFile(string path, string dest, bool overwrite, out MonoIOError error); // 0x0000000180350F60
	public static bool DeleteFile(string path, out MonoIOError error); // 0x0000000180350F90
	public static bool ReplaceFile(string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors, out MonoIOError error); // 0x00000001803519F0
	public static FileAttributes GetFileAttributes(string path, out MonoIOError error); // 0x0000000180351930
	public static bool SetFileAttributes(string path, FileAttributes attrs, out MonoIOError error); // 0x0000000180351AD0
	public static MonoFileType GetFileType(IntPtr handle, out MonoIOError error); // 0x0000000180351960
	public static bool Exists(string path, out MonoIOError error); // 0x0000000180351190
	public static bool ExistsFile(string path, out MonoIOError error); // 0x0000000180351070
	public static bool ExistsDirectory(string path, out MonoIOError error); // 0x0000000180350FB0
	public static bool ExistsSymlink(string path, out MonoIOError error); // 0x0000000180351100
	public static bool GetFileStat(string path, out MonoIOStat stat, out MonoIOError error); // 0x0000000180351940
	public static IntPtr Open(string filename, FileMode mode, FileAccess access, FileShare share, FileOptions options, out MonoIOError error); // 0x00000001803519B0
	public static bool Close(IntPtr handle, out MonoIOError error); // 0x0000000180350F50
	public static int Read(IntPtr handle, byte[] dest, int dest_offset, int count, out MonoIOError error); // 0x00000001803519C0
	public static int Write(IntPtr handle, byte[] src, int src_offset, int count, out MonoIOError error); // 0x0000000180351EC0
	public static long Seek(IntPtr handle, long offset, SeekOrigin origin, out MonoIOError error); // 0x0000000180351A00
	public static bool Flush(IntPtr handle, out MonoIOError error); // 0x0000000180351210
	public static long GetLength(IntPtr handle, out MonoIOError error); // 0x0000000180351970
	public static bool SetLength(IntPtr handle, long length, out MonoIOError error); // 0x0000000180351EA0
	public static bool SetFileTime(IntPtr handle, long creation_time, long last_access_time, long last_write_time, out MonoIOError error); // 0x0000000180351D30
	public static bool SetFileTime(string path, long creation_time, long last_access_time, long last_write_time, out MonoIOError error); // 0x0000000180351C40
	public static bool SetCreationTime(string path, DateTime dateTime, out MonoIOError error); // 0x0000000180351A10
	public static bool SetLastAccessTime(string path, DateTime dateTime, out MonoIOError error); // 0x0000000180351D40
	public static bool SetLastWriteTime(string path, DateTime dateTime, out MonoIOError error); // 0x0000000180351DF0
	public static bool SetFileTime(string path, int type, long creation_time, long last_access_time, long last_write_time, DateTime dateTime, out MonoIOError error); // 0x0000000180351AE0
	public static void Lock(IntPtr handle, long position, long length, out MonoIOError error); // 0x0000000180351990
	public static void Unlock(IntPtr handle, long position, long length, out MonoIOError error); // 0x0000000180351EB0
	public static bool CreatePipe(out IntPtr read_handle, out IntPtr write_handle); // 0x0000000180350F80
	public static bool DuplicateHandle(IntPtr source_process_handle, IntPtr source_handle, IntPtr target_process_handle, out IntPtr target_handle, int access, int inherit, int options); // 0x0000000180350FA0
	public static int GetTempPath(out string path); // 0x0000000180351980
	public static bool RemapPath(string path, out string newPath); // 0x00000001803519D0
}

// Namespace: System.IO
internal enum MonoIOError // TypeDefIndex: 455
{
	ERROR_SUCCESS = 0,
	ERROR_FILE_NOT_FOUND = 2,
	ERROR_PATH_NOT_FOUND = 3,
	ERROR_TOO_MANY_OPEN_FILES = 4,
	ERROR_ACCESS_DENIED = 5,
	ERROR_INVALID_HANDLE = 6,
	ERROR_INVALID_DRIVE = 15,
	ERROR_NOT_SAME_DEVICE = 17,
	ERROR_NO_MORE_FILES = 18,
	ERROR_WRITE_FAULT = 29,
	ERROR_READ_FAULT = 30,
	ERROR_GEN_FAILURE = 31,
	ERROR_SHARING_VIOLATION = 32,
	ERROR_LOCK_VIOLATION = 33,
	ERROR_HANDLE_DISK_FULL = 39,
	ERROR_FILE_EXISTS = 80,
	ERROR_CANNOT_MAKE = 82,
	ERROR_INVALID_PARAMETER = 87,
	ERROR_BROKEN_PIPE = 109,
	ERROR_INVALID_NAME = 123,
	ERROR_DIR_NOT_EMPTY = 145,
	ERROR_ALREADY_EXISTS = 183,
	ERROR_FILENAME_EXCED_RANGE = 206,
	ERROR_ENCRYPTION_FAILED = 6000
}

// Namespace: System.IO
internal struct MonoIOStat // TypeDefIndex: 456
{
	// Fields
	public string Name; // 0x10
	public FileAttributes Attributes; // 0x20
	public long Length; // 0x30
	public long CreationTime; // 0x00
	public long LastAccessTime; // 0x0A
	public long LastWriteTime; // 0x10

}

// Namespace: System.IO
public static class Path // TypeDefIndex: 457
{
	// Fields
	public static readonly char[] InvalidPathChars; // 0x00
	public static readonly char AltDirectorySeparatorChar; // 0x0A
	public static readonly char DirectorySeparatorChar; // 0x10
	public static readonly char PathSeparator; // 0x20
	internal static readonly string DirectorySeparatorStr; // 0x10
	public static readonly char VolumeSeparatorChar; // 0x00
	internal static readonly char[] PathSeparatorChars; // 0x10
	private static readonly bool dirEqualsVolume; // 0x00

	// Constructors
	private static Path(); // 0x0000000180355C40

	// Methods
	public static string ChangeExtension(string path, string extension); // 0x00000001803529B0
	public static string Combine(string path1, string path2); // 0x00000001803530E0
	internal static string CleanPath(string s); // 0x0000000180352C50
	public static string GetDirectoryName(string path); // 0x0000000180353430
	public static string GetExtension(string path); // 0x0000000180353800
	public static string GetFileName(string path); // 0x0000000180353990
	public static string GetFileNameWithoutExtension(string path); // 0x0000000180353930
	public static string GetFullPath(string path); // 0x0000000180353AA0
	internal static string WindowsDriveAdjustment(string path); // 0x0000000180355930
	internal static string InsecureGetFullPath(string path); // 0x0000000180354B30
	private static bool IsDsc(char c); // 0x00000001803551A0
	public static string GetPathRoot(string path); // 0x0000000180353C10
	public static string GetTempFileName(); // 0x0000000180354520
	public static string GetTempPath(); // 0x00000001803548D0
	private static string get_temp_path(); // 0x0000000180355F00
	public static bool HasExtension(string path); // 0x0000000180354A10
	public static bool IsPathRooted(string path); // 0x0000000180355240
	public static char[] GetInvalidFileNameChars(); // 0x0000000180353B00
	public static char[] GetInvalidPathChars(); // 0x0000000180353BA0
	public static string GetRandomFileName(); // 0x0000000180354190
	private static int findExtension(string path); // 0x0000000180355E60
	private static string GetServerAndShare(string path); // 0x00000001803542E0
	private static bool SameRoot(string root, string path); // 0x00000001803555E0
	private static string CanonicalizePath(string path); // 0x0000000180352080
	internal static bool IsPathSubsetOf(string subset, string path); // 0x0000000180355420
}

// Namespace: System.IO
[Serializable]
public class PathTooLongException : IOException // TypeDefIndex: 458
{
	// Constructors
	public PathTooLongException(); // 0x0000000180352030
	public PathTooLongException(string message); // 0x000000018010E1E0
	protected PathTooLongException(SerializationInfo info, StreamingContext context); // 0x000000018010E170
	public PathTooLongException(string message, Exception innerException); // 0x000000018010E1D0

}

// Namespace: System.IO
[Serializable]
public enum SearchOption // TypeDefIndex: 459
{
	TopDirectoryOnly = 0,
	AllDirectories = 1
}

// Namespace: System.IO
internal class SearchPattern // TypeDefIndex: 460
{
	// Fields
	private Op ops; // 0x10
	private bool ignore; // 0x00
	internal static readonly char[] WildcardChars; // 0x10
	internal static readonly char[] InvalidChars; // 0x20

	// Constructors
	public SearchPattern(string pattern); // 0x00000001803569F0
	public SearchPattern(string pattern, bool ignore); // 0x0000000180356A30
	private static SearchPattern(); // 0x0000000180356890

	// Methods
	public bool IsMatch(string text); // 0x00000001803566D0
	private void Compile(string pattern); // 0x00000001803563E0
	private bool Match(Op op, string text, int ptr); // 0x0000000180356700
}

// Namespace: 
private class Op // TypeDefIndex: 461
{
	// Fields
	public OpCode Code; // 0x10
	public string Argument; // 0x20
	public Op Next; // 0x10

	// Constructors
	public Op(OpCode code); // 0x0000000180352000

}

// Namespace: 
private enum OpCode // TypeDefIndex: 462
{
	ExactString = 0,
	AnyChar = 1,
	AnyString = 2,
	End = 3,
	True = 4
}

// Namespace: System.IO
[Serializable]
public enum SeekOrigin // TypeDefIndex: 463
{
	Begin = 0,
	Current = 1,
	End = 2
}

// Namespace: System.IO
[Serializable]
public abstract class Stream : IDisposable // TypeDefIndex: 464
{
	// Fields
	public static readonly Stream Null; // 0x00

	// Properties
	public abstract bool CanRead { get; }
	public abstract bool CanSeek { get; }
	public abstract bool CanWrite { get; }
	public virtual bool CanTimeout { get; } // 0x000000018011A0F0 
	public abstract long Length { get; }
	public abstract long Position { get; set; }
	public virtual int ReadTimeout { get; set; } // 0x0000000180358C00 0x0000000180358CC0
	public virtual int WriteTimeout { get; set; } // 0x0000000180358C60 0x0000000180358D20

	// Constructors
	protected Stream(); // 0x00000001800E2000
	private static Stream(); // 0x0000000180358B70

	// Methods
	public void Dispose(); // 0x00000001802613A0
	protected virtual void Dispose(bool disposing); // 0x00000001800EA7B0
	public virtual void Close(); // 0x00000001802BAAC0
	public static Stream Synchronized(Stream stream); // 0x0000000180358A80
	protected virtual WaitHandle CreateWaitHandle(); // 0x00000001803586C0
	public abstract void Flush();
	public abstract int Read(out byte[] buffer, int offset, int count);
	public virtual int ReadByte(); // 0x00000001803589D0
	public abstract long Seek(long offset, SeekOrigin origin);
	public abstract void SetLength(long value);
	public abstract void Write(byte[] buffer, int offset, int count);
	public virtual void WriteByte(byte value); // 0x0000000180358AD0
	public virtual IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback callback, object state); // 0x0000000180358420
	public virtual IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback callback, object state); // 0x0000000180358570
	public virtual int EndRead(IAsyncResult asyncResult); // 0x0000000180358710
	public virtual void EndWrite(IAsyncResult asyncResult); // 0x0000000180358870
}

// Namespace: System.IO
internal class NullStream : Stream // TypeDefIndex: 465
{
	// Properties
	public override bool CanRead { get; } // 0x000000018010E420 
	public override bool CanSeek { get; } // 0x000000018010E420 
	public override bool CanWrite { get; } // 0x000000018010E420 
	public override long Length { get; } // 0x00000001800EA8C0 
	public override long Position { get; set; } // 0x00000001800EA8C0 0x00000001800EA7B0

	// Constructors
	public NullStream(); // 0x0000000180351FA0

	// Methods
	public override void Flush(); // 0x00000001800EA7B0
	public override int Read(byte[] buffer, int offset, int count); // 0x00000001800EA8C0
	public override int ReadByte(); // 0x0000000180133990
	public override long Seek(long offset, SeekOrigin origin); // 0x00000001800EA8C0
	public override void SetLength(long value); // 0x00000001800EA7B0
	public override void Write(byte[] buffer, int offset, int count); // 0x00000001800EA7B0
	public override void WriteByte(byte value); // 0x00000001800EA7B0
}

// Namespace: System.IO
internal class StreamAsyncResult : IAsyncResult // TypeDefIndex: 466
{
	// Fields
	private object state; // 0x10
	private bool completed; // 0x19
	private bool done; // 0x28
	private Exception exc; // 0x00
	private int nbytes; // 0x00
	private ManualResetEvent wh; // 0x18

	// Properties
	public object AsyncState { get; } // 0x00000001800E20D0 
	public WaitHandle AsyncWaitHandle { get; } // 0x0000000180356B60 
	public virtual bool CompletedSynchronously { get; } // 0x000000018010E420 
	public bool IsCompleted { get; } // 0x00000001801249E0 
	public Exception Exception { get; } // 0x00000001800EAEB0 
	public int NBytes { get; } // 0x0000000180119420 
	public bool Done { get; set; } // 0x00000001802A7760 0x00000001802A7770

	// Constructors
	public StreamAsyncResult(object state); // 0x0000000180356B30

	// Methods
	public void SetComplete(Exception e); // 0x0000000180356A70
	public void SetComplete(Exception e, int nbytes); // 0x0000000180356B20
}

// Namespace: System.IO
[Serializable]
public class StreamReader : TextReader // TypeDefIndex: 467
{
	// Fields
	private const int DefaultBufferSize = 1024; // 0x00
	private const int DefaultFileBufferSize = 4096; // 0x00
	private const int MinimumBufferSize = 128; // 0x18
	private byte[] input_buffer; // 0x24
	private char[] decoded_buffer; // 0x2C
	private int decoded_count; // 0x38
	private int pos; // 0x48
	private int buffer_size; // 0x00
	private int do_checks; // 0x00
	private Encoding encoding; // 0x00
	private Decoder decoder; // 0x28
	private Stream base_stream; // 0x38
	private bool mayBlock; // 0x48
	private StringBuilder line_builder; // 0x54
	public static readonly StreamReader Null; // 0x00
	private bool foundCR; // 0x10

	// Properties
	public virtual Stream BaseStream { get; } // 0x0000000180114BB0 
	public virtual Encoding CurrentEncoding { get; } // 0x00000001803583A0 
	public bool EndOfStream { get; } // 0x0000000180358400 

	// Constructors
	internal StreamReader(); // 0x0000000180358220
	public StreamReader(Stream stream); // 0x0000000180358280
	public StreamReader(Stream stream, bool detectEncodingFromByteOrderMarks); // 0x0000000180357E10
	public StreamReader(Stream stream, Encoding encoding); // 0x0000000180358370
	public StreamReader(Stream stream, Encoding encoding, bool detectEncodingFromByteOrderMarks); // 0x0000000180358350
	public StreamReader(Stream stream, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize); // 0x0000000180358180
	public StreamReader(string path); // 0x0000000180357EA0
	public StreamReader(string path, bool detectEncodingFromByteOrderMarks); // 0x0000000180357D80
	public StreamReader(string path, Encoding encoding); // 0x0000000180358300
	public StreamReader(string path, Encoding encoding, bool detectEncodingFromByteOrderMarks); // 0x0000000180358330
	public StreamReader(string path, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize); // 0x0000000180357F20
	private static StreamReader(); // 0x0000000180357D20

	// Methods
	internal void Initialize(Stream stream, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize); // 0x00000001803571C0
	public override void Close(); // 0x000000018013C040
	protected override void Dispose(bool disposing); // 0x0000000180356CB0
	private int DoChecks(int count); // 0x0000000180356D10
	public void DiscardBufferedData(); // 0x0000000180356C70
	private int ReadBuffer(); // 0x0000000180357490
	public override int Peek(); // 0x00000001803573D0
	internal bool DataAvailable(); // 0x0000000180356C60
	public override int Read(); // 0x0000000180357C50
	public override int Read(out char[] buffer, int index, int count); // 0x0000000180357A30
	private int FindNextEOL(); // 0x0000000180357110
	public override string ReadLine(); // 0x0000000180357630
	public override string ReadToEnd(); // 0x00000001803578D0
}

// Namespace: 
private class NullStreamReader : StreamReader // TypeDefIndex: 468
{
	// Properties
	public override Stream BaseStream { get; } // 0x0000000180133A60 
	public override Encoding CurrentEncoding { get; } // 0x0000000180133AC0 

	// Constructors
	public NullStreamReader(); // 0x0000000180133A00

	// Methods
	public override int Peek(); // 0x0000000180133990
	public override int Read(); // 0x0000000180133990
	public override int Read(out char[] buffer, int index, int count); // 0x00000001800EA8C0
	public override string ReadLine(); // 0x00000001800EA8C0
	public override string ReadToEnd(); // 0x00000001801339A0
}

// Namespace: System.IO
[Serializable]
public class StreamWriter : TextWriter // TypeDefIndex: 469
{
	// Fields
	private const int DefaultBufferSize = 1024; // 0x00
	private const int DefaultFileBufferSize = 4096; // 0x00
	private const int MinimumBufferSize = 256; // 0x28
	private Encoding internalEncoding; // 0x38
	private Stream internalStream; // 0x48
	private bool iflush; // 0x54
	private byte[] byte_buf; // 0x00
	private int byte_pos; // 0x10
	private char[] decode_buf; // 0x1C
	private int decode_pos; // 0x20
	private bool DisposedAlready; // 0x10
	private bool preamble_done; // 0x10
	public static readonly StreamWriter Null; // 0x00

	// Properties
	public virtual bool AutoFlush { get; set; } // 0x000000018013BF70 0x000000018013BF90
	public virtual Stream BaseStream { get; } // 0x000000018013BF80 
	public override Encoding Encoding { get; } // 0x00000001800EAEB0 

	// Constructors
	public StreamWriter(Stream stream); // 0x000000018013BDC0
	public StreamWriter(Stream stream, Encoding encoding); // 0x000000018013BE40
	public StreamWriter(Stream stream, Encoding encoding, int bufferSize); // 0x000000018013BC10
	public StreamWriter(string path); // 0x000000018013BEF0
	public StreamWriter(string path, bool append); // 0x000000018013BE60
	public StreamWriter(string path, bool append, Encoding encoding); // 0x000000018013BA30
	public StreamWriter(string path, bool append, Encoding encoding, int bufferSize); // 0x000000018013BA50
	private static StreamWriter(); // 0x000000018013B950

	// Methods
	internal void Initialize(Encoding encoding, int bufferSize); // 0x000000018013B1C0
	protected override void Dispose(bool disposing); // 0x000000018013AEC0
	public override void Flush(); // 0x000000018013B110
	private void FlushBytes(); // 0x000000018013B060
	private void Decode(); // 0x000000018013AE50
	public override void Write(char[] buffer, int index, int count); // 0x000000018013B790
	private void LowLevelWrite(char[] buffer, int index, int count); // 0x000000018013B2B0
	private void LowLevelWrite(string s); // 0x000000018013B360
	public override void Write(char value); // 0x000000018013B6A0
	public override void Write(char[] buffer); // 0x000000018013B460
	public override void Write(string value); // 0x000000018013B510
	public override void Close(); // 0x000000018013AE30
	protected override void Finalize(); // 0x000000018013AFC0
}

// Namespace: System.IO
[Serializable]
public class StringReader : TextReader // TypeDefIndex: 470
{
	// Fields
	private string source; // 0x10
	private int nextChar; // 0x1C
	private int sourceLength; // 0x20

	// Constructors
	public StringReader(string s); // 0x000000018013C3A0

	// Methods
	public override void Close(); // 0x000000018013C040
	protected override void Dispose(bool disposing); // 0x000000018013C060
	public override int Peek(); // 0x000000018013C080
	public override int Read(); // 0x000000018013C200
	public override int Read(out char[] buffer, int index, int count); // 0x000000018013C250
	public override string ReadLine(); // 0x000000018013C0D0
	public override string ReadToEnd(); // 0x000000018013C1C0
	private void CheckObjectDisposedException(); // 0x000000018013BFB0
}

// Namespace: System.IO
[Serializable]
public class StringWriter : TextWriter // TypeDefIndex: 471
{
	// Fields
	private StringBuilder internalString; // 0x20
	private bool disposed; // 0x10

	// Properties
	public override Encoding Encoding { get; } // 0x000000018013C990 

	// Constructors
	public StringWriter(); // 0x000000018013C860
	public StringWriter(IFormatProvider formatProvider); // 0x000000018013C7F0
	public StringWriter(StringBuilder sb); // 0x000000018013C7E0
	public StringWriter(StringBuilder sb, IFormatProvider formatProvider); // 0x000000018013C8C0

	// Methods
	public override void Close(); // 0x000000018013C450
	protected override void Dispose(bool disposing); // 0x000000018013C480
	public virtual StringBuilder GetStringBuilder(); // 0x00000001800EAEB0
	public override string ToString(); // 0x000000018013C4B0
	public override void Write(char value); // 0x000000018013C740
	public override void Write(string value); // 0x000000018013C6A0
	public override void Write(char[] buffer, int index, int count); // 0x000000018013C4D0
}

// Namespace: System.IO
[Serializable]
public abstract class TextReader : IDisposable // TypeDefIndex: 472
{
	// Fields
	public static readonly TextReader Null; // 0x00

	// Constructors
	protected TextReader(); // 0x00000001800E2000
	private static TextReader(); // 0x000000018013F240

	// Methods
	public virtual void Close(); // 0x000000018013C040
	public void Dispose(); // 0x000000018013C040
	protected virtual void Dispose(bool disposing); // 0x000000018013EF40
	public virtual int Peek(); // 0x0000000180133990
	public virtual int Read(); // 0x0000000180133990
	public virtual int Read(out char[] buffer, int index, int count); // 0x000000018013F090
	public virtual int ReadBlock(out char[] buffer, int index, int count); // 0x000000018013EF50
	public virtual string ReadLine(); // 0x000000018013EFD0
	public virtual string ReadToEnd(); // 0x000000018013F030
	public static TextReader Synchronized(TextReader reader); // 0x000000018013F130
}

// Namespace: 
private class NullTextReader : TextReader // TypeDefIndex: 473
{
	// Constructors
	public NullTextReader(); // 0x0000000180133B10

	// Methods
	public override string ReadLine(); // 0x00000001800EA8C0
}

// Namespace: System.IO
[Serializable]
internal class SynchronizedReader : TextReader // TypeDefIndex: 474
{
	// Fields
	private TextReader reader; // 0x10

	// Constructors
	public SynchronizedReader(TextReader reader); // 0x000000018013CF90

	// Methods
	public override void Close(); // 0x000000018013C9E0
	public override int Peek(); // 0x000000018013CA90
	public override int ReadBlock(char[] buffer, int index, int count); // 0x000000018013CB60
	public override string ReadLine(); // 0x000000018013CC40
	public override string ReadToEnd(); // 0x000000018013CD10
	public override int Read(); // 0x000000018013CEC0
	public override int Read(char[] buffer, int index, int count); // 0x000000018013CDE0
}

// Namespace: System.IO
[Serializable]
public abstract class TextWriter : IDisposable // TypeDefIndex: 475
{
	// Fields
	protected char[] CoreNewLine; // 0x10
	internal IFormatProvider internalFormatProvider; // 0x00
	public static readonly TextWriter Null; // 0x20

	// Properties
	public abstract Encoding Encoding { get; }
	public virtual IFormatProvider FormatProvider { get; } // 0x00000001800EAEC0 
	public virtual string NewLine { get; set; } // 0x00000001801401C0 0x00000001801401D0

	// Constructors
	protected TextWriter(); // 0x0000000180140130
	protected TextWriter(IFormatProvider formatProvider); // 0x0000000180140170
	private static TextWriter(); // 0x0000000180140080

	// Methods
	public virtual void Close(); // 0x000000018013AE30
	protected virtual void Dispose(bool disposing); // 0x000000018013EF40
	public void Dispose(); // 0x000000018013F2D0
	public virtual void Flush(); // 0x00000001800EA7B0
	public static TextWriter Synchronized(TextWriter writer); // 0x000000018013F300
	internal static TextWriter Synchronized(TextWriter writer, bool neverClose); // 0x000000018013F410
	public virtual void Write(bool value); // 0x000000018013FF50
	public virtual void Write(char value); // 0x00000001800EA7B0
	public virtual void Write(char[] buffer); // 0x000000018013FFD0
	public virtual void Write(Decimal value); // 0x000000018013FE80
	public virtual void Write(double value); // 0x000000018013FA10
	public virtual void Write(int value); // 0x000000018013FBB0
	public virtual void Write(long value); // 0x000000018013FEC0
	public virtual void Write(object value); // 0x0000000180140000
	public virtual void Write(float value); // 0x000000018013FF90
	public virtual void Write(string value); // 0x000000018013FDB0
	public virtual void Write(uint value); // 0x000000018013FC40
	public virtual void Write(ulong value); // 0x0000000180140040
	public virtual void Write(string format, object arg0); // 0x000000018013FDF0
	public virtual void Write(string format, object[] arg); // 0x000000018013FC80
	public virtual void Write(char[] buffer, int index, int count); // 0x000000018013FA50
	public virtual void Write(string format, object arg0, object arg1); // 0x000000018013F970
	public virtual void Write(string format, object arg0, object arg1, object arg2); // 0x000000018013FD10
	public virtual void WriteLine(); // 0x000000018013F740
	public virtual void WriteLine(bool value); // 0x000000018013F600
	public virtual void WriteLine(char value); // 0x000000018013F8A0
	public virtual void WriteLine(char[] buffer); // 0x000000018013F860
	public virtual void WriteLine(Decimal value); // 0x000000018013F7E0
	public virtual void WriteLine(double value); // 0x000000018013F760
	public virtual void WriteLine(int value); // 0x000000018013F680
	public virtual void WriteLine(long value); // 0x000000018013F580
	public virtual void WriteLine(object value); // 0x000000018013F8E0
	public virtual void WriteLine(float value); // 0x000000018013F700
	public virtual void WriteLine(string value); // 0x000000018013F7A0
	public virtual void WriteLine(uint value); // 0x000000018013F540
	public virtual void WriteLine(ulong value); // 0x000000018013F820
	public virtual void WriteLine(string format, object arg0); // 0x000000018013F6C0
	public virtual void WriteLine(string format, object[] arg); // 0x000000018013F640
	public virtual void WriteLine(char[] buffer, int index, int count); // 0x000000018013F5C0
	public virtual void WriteLine(string format, object arg0, object arg1); // 0x000000018013F500
	public virtual void WriteLine(string format, object arg0, object arg1, object arg2); // 0x000000018013F920
}

// Namespace: 
private sealed class NullTextWriter : TextWriter // TypeDefIndex: 476
{
	// Properties
	public override Encoding Encoding { get; } // 0x0000000180133BF0 

	// Constructors
	public NullTextWriter(); // 0x0000000180133B70

	// Methods
	public override void Write(string s); // 0x00000001800EA7B0
	public override void Write(char value); // 0x00000001800EA7B0
	public override void Write(char[] value, int index, int count); // 0x00000001800EA7B0
}

// Namespace: System.IO
[Serializable]
internal class SynchronizedWriter : TextWriter // TypeDefIndex: 477
{
	// Fields
	private TextWriter writer; // 0x20
	private bool neverClose; // 0x00

	// Properties
	public override Encoding Encoding { get; } // 0x000000018013EC10 
	public override IFormatProvider FormatProvider { get; } // 0x000000018013ECE0 
	public override string NewLine { get; set; } // 0x000000018013EDB0 0x000000018013EE80

	// Constructors
	public SynchronizedWriter(TextWriter writer); // 0x000000018013EC00
	public SynchronizedWriter(TextWriter writer, bool neverClose); // 0x000000018013EB60

	// Methods
	public override void Close(); // 0x000000018013D000
	public override void Flush(); // 0x000000018013D0C0
	public override void Write(bool value); // 0x000000018013DF20
	public override void Write(char value); // 0x000000018013E6A0
	public override void Write(char[] value); // 0x000000018013E9D0
	public override void Write(Decimal value); // 0x000000018013E2E0
	public override void Write(int value); // 0x000000018013E3A0
	public override void Write(long value); // 0x000000018013E160
	public override void Write(object value); // 0x000000018013E520
	public override void Write(float value); // 0x000000018013E220
	public override void Write(string value); // 0x000000018013E5E0
	public override void Write(uint value); // 0x000000018013E0B0
	public override void Write(ulong value); // 0x000000018013E760
	public override void Write(string format, object value); // 0x000000018013EA90
	public override void Write(string format, object[] value); // 0x000000018013E820
	public override void Write(char[] buffer, int index, int count); // 0x000000018013DFE0
	public override void Write(string format, object arg0, object arg1); // 0x000000018013E450
	public override void Write(string format, object arg0, object arg1, object arg2); // 0x000000018013E8F0
	public override void WriteLine(); // 0x000000018013DDB0
	public override void WriteLine(bool value); // 0x000000018013DCF0
	public override void WriteLine(char value); // 0x000000018013DB60
	public override void WriteLine(char[] value); // 0x000000018013D9D0
	public override void WriteLine(Decimal value); // 0x000000018013DE60
	public override void WriteLine(double value); // 0x000000018013D7A0
	public override void WriteLine(int value); // 0x000000018013D170
	public override void WriteLine(long value); // 0x000000018013D600
	public override void WriteLine(object value); // 0x000000018013D3B0
	public override void WriteLine(float value); // 0x000000018013D470
	public override void WriteLine(string value); // 0x000000018013D220
	public override void WriteLine(uint value); // 0x000000018013D920
	public override void WriteLine(ulong value); // 0x000000018013D860
	public override void WriteLine(string format, object value); // 0x000000018013DA90
	public override void WriteLine(string format, object[] value); // 0x000000018013D2E0
	public override void WriteLine(char[] buffer, int index, int count); // 0x000000018013D530
	public override void WriteLine(string format, object arg0, object arg1); // 0x000000018013DC20
	public override void WriteLine(string format, object arg0, object arg1, object arg2); // 0x000000018013D6C0
}

// Namespace: System.IO
internal class UnexceptionalStreamReader : StreamReader // TypeDefIndex: 478
{
	// Fields
	private static bool[] newline; // 0x00
	private static char newlineChar; // 0x10

	// Constructors
	public UnexceptionalStreamReader(Stream stream); // 0x0000000180140B80
	public UnexceptionalStreamReader(Stream stream, bool detect_encoding_from_bytemarks); // 0x0000000180140BF0
	public UnexceptionalStreamReader(Stream stream, Encoding encoding); // 0x0000000180140900
	public UnexceptionalStreamReader(Stream stream, Encoding encoding, bool detect_encoding_from_bytemarks); // 0x0000000180140C70
	public UnexceptionalStreamReader(Stream stream, Encoding encoding, bool detect_encoding_from_bytemarks, int buffer_size); // 0x0000000180140D00
	public UnexceptionalStreamReader(string path); // 0x0000000180140B10
	public UnexceptionalStreamReader(string path, bool detect_encoding_from_bytemarks); // 0x0000000180140A10
	public UnexceptionalStreamReader(string path, Encoding encoding); // 0x0000000180140A90
	public UnexceptionalStreamReader(string path, Encoding encoding, bool detect_encoding_from_bytemarks); // 0x0000000180140870
	public UnexceptionalStreamReader(string path, Encoding encoding, bool detect_encoding_from_bytemarks, int buffer_size); // 0x0000000180140980
	private static UnexceptionalStreamReader(); // 0x00000001801407E0

	// Methods
	public override int Peek(); // 0x0000000180140450
	public override int Read(); // 0x0000000180140570
	public override int Read(out char[] dest_buffer, int index, int count); // 0x00000001801405D0
	private bool CheckEOL(char current); // 0x0000000180140210
	public override string ReadLine(); // 0x00000001801404B0
	public override string ReadToEnd(); // 0x0000000180140510
}

// Namespace: System.IO
internal class UnexceptionalStreamWriter : StreamWriter // TypeDefIndex: 479
{
	// Constructors
	public UnexceptionalStreamWriter(Stream stream); // 0x00000001801417E0
	public UnexceptionalStreamWriter(Stream stream, Encoding encoding); // 0x0000000180141760
	public UnexceptionalStreamWriter(Stream stream, Encoding encoding, int bufferSize); // 0x0000000180141570
	public UnexceptionalStreamWriter(string path); // 0x0000000180141410
	public UnexceptionalStreamWriter(string path, bool append); // 0x0000000180141690
	public UnexceptionalStreamWriter(string path, bool append, Encoding encoding); // 0x00000001801414D0
	public UnexceptionalStreamWriter(string path, bool append, Encoding encoding, int bufferSize); // 0x0000000180141600

	// Methods
	public override void Flush(); // 0x0000000180140D90
	public override void Write(char[] buffer, int index, int count); // 0x0000000180141020
	public override void Write(char value); // 0x00000001801412F0
	public override void Write(char[] value); // 0x0000000180141210
	public override void Write(string value); // 0x0000000180140E70
}

// Namespace: System.IO
public class UnmanagedMemoryStream : Stream // TypeDefIndex: 480
{
	// Fields
	private long length; // 0x10
	private bool closed; // 0x20
	private long capacity; // 0x30
	private FileAccess fileaccess; // 0x40
	private IntPtr initial_pointer; // 0x10
	private long initial_position; // 0x00
	private long current_position; // 0x00
	private EventHandler Closed; // 0x10

	// Properties
	public override bool CanRead { get; } // 0x00000001801426F0 
	public override bool CanSeek { get; } // 0x0000000180142710 
	public override bool CanWrite { get; } // 0x0000000180142720 
	public long Capacity { get; } // 0x0000000180142740 
	public override long Length { get; } // 0x00000001801427B0 
	public override long Position { get; set; } // 0x00000001801428D0 0x0000000180142A90
	public void * PositionPointer { get; set; } // 0x0000000180142820 0x00000001801429C0

	// Events
	internal event EventHandler Closed {
		add; // 0x0000000180142670
		remove; // 0x0000000180142940
	}

	// Constructors
	protected UnmanagedMemoryStream(); // 0x0000000180142610
	public UnmanagedMemoryStream(void * pointer, long length); // 0x0000000180142580
	public UnmanagedMemoryStream(void * pointer, long length, long capacity, FileAccess access); // 0x00000001801424E0

	// Methods
	public override int Read(out byte[] buffer, int offset, int count); // 0x0000000180141C10
	public override int ReadByte(); // 0x0000000180141B00
	public override long Seek(long offset, SeekOrigin loc); // 0x0000000180141E50
	public override void SetLength(long value); // 0x0000000180141FA0
	public override void Flush(); // 0x00000001801418D0
	protected override void Dispose(bool disposing); // 0x00000001801418A0
	public override void Write(byte[] buffer, int offset, int count); // 0x0000000180142230
	public override void WriteByte(byte value); // 0x00000001801420E0
	protected void Initialize(void * pointer, long length, long capacity, FileAccess access); // 0x0000000180141940
}

// Namespace: System.Reflection.Emit
internal enum NativeResourceType // TypeDefIndex: 481
{
	None = 0,
	Unmanaged = 1,
	Assembly = 2,
	Explicit = 3
}

// Namespace: System.Reflection.Emit
internal struct RefEmitPermissionSet // TypeDefIndex: 482
{
	// Fields
	public SecurityAction action; // 0x10
	public string pset; // 0x10

	// Constructors
	public RefEmitPermissionSet(SecurityAction action, string pset); // 0x0000000180006740

}

// Namespace: System.Reflection.Emit
internal struct MonoResource // TypeDefIndex: 483
{
	// Fields
	public byte[] data; // 0x10
	public string name; // 0x20
	public string filename; // 0x2C
	public ResourceAttributes attrs; // 0x10
	public int offset; // 0x18
	public Stream stream; // 0x00

}

// Namespace: System.Reflection.Emit
internal struct MonoWin32Resource // TypeDefIndex: 484
{
	// Fields
	public int res_type; // 0x10
	public int res_id; // 0x18
	public int lang_id; // 0x00
	public byte[] data; // 0x68

	// Constructors
	public MonoWin32Resource(int res_type, int res_id, int lang_id, byte[] data); // 0x0000000180006DA0

}

// Namespace: System.Reflection.Emit
public sealed class AssemblyBuilder : Assembly, _AssemblyBuilder // TypeDefIndex: 485
{
	// Fields
	private const AssemblyBuilderAccess COMPILER_ACCESS = 2048; // 0x00
	private UIntPtr dynamic_assembly; // 0x68
	private MethodInfo entry_point; // 0x78
	private ModuleBuilder[] modules; // 0x88
	private string name; // 0x98
	private string dir; // 0xA8
	private CustomAttributeBuilder[] cattrs; // 0xB4
	private MonoResource[] resources; // 0xBC
	private byte[] public_key; // 0xC8
	private string version; // 0xD8
	private string culture; // 0xE8
	private uint algid; // 0xF4
	private uint flags; // 0x100
	private PEFileKinds pekind; // 0x110
	private bool delay_sign; // 0x120
	private uint access; // 0x130
	private Module[] loaded_modules; // 0x140
	private MonoWin32Resource[] win32_resources; // 0x148
	private RefEmitPermissionSet[] permissions_minimum; // 0x154
	private RefEmitPermissionSet[] permissions_optional; // 0x160
	private RefEmitPermissionSet[] permissions_refused; // 0x10
	private PortableExecutableKinds peKind; // 0x00
	private ImageFileMachine machine; // 0x00
	private bool corlib_internal; // 0x10
	private Type[] type_forwarders; // 0x20
	private byte[] pktoken; // 0x2C
	internal Type corlib_object_type; // 0x34
	internal Type corlib_value_type; // 0x40
	internal Type corlib_enum_type; // 0x50
	internal Type corlib_void_type; // 0x60
	private ArrayList resource_writers; // 0x10
	private Win32VersionResource version_res; // 0x10
	private bool created; // 0x00
	private bool is_module_only; // 0x10
	private StrongName sn; // 0x20
	private NativeResourceType native_resource; // 0x10
	private readonly bool is_compiler_context; // 0x00
	private string versioninfo_culture; // 0x20
	private ModuleBuilder manifest_module; // 0x10

	// Properties
	public override string CodeBase { get; } // 0x0000000180113680 
	public override MethodInfo EntryPoint { get; } // 0x00000001801136C0 
	public override string Location { get; } // 0x0000000180113730 
	public override string ImageRuntimeVersion { get; } // 0x00000001801136D0 
	public override bool ReflectionOnly { get; } // 0x0000000180113770 
	internal bool IsCompilerContext { get; } // 0x00000001801136E0 
	internal bool IsSave { get; } // 0x0000000180113720 
	internal bool IsRun { get; } // 0x0000000180113700 
	internal string AssemblyDir { get; } // 0x0000000180113670 
	internal bool IsModuleOnly { get; set; } // 0x00000001801136F0 0x00000001801137D0

	// Constructors
	internal AssemblyBuilder(AssemblyName n, string directory, AssemblyBuilderAccess access, bool corlib_internal); // 0x0000000180112270

	// Methods
	private void System.Runtime.InteropServices._AssemblyBuilder.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x0000000180112090
	private void System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x0000000180112130
	private void System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfoCount(out uint pcTInfo); // 0x00000001801120E0
	private void System.Runtime.InteropServices._AssemblyBuilder.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x0000000180112180
	private static void basic_init(AssemblyBuilder ab); // 0x0000000180112750
	public void AddResourceFile(string name, string fileName); // 0x000000018010E680
	public void AddResourceFile(string name, string fileName, ResourceAttributes attribute); // 0x000000018010E850
	private void AddResourceFile(string name, string fileName, ResourceAttributes attribute, bool fileNeedsToExists); // 0x000000018010E6B0
	internal void AddPermissionRequests(PermissionSet required, PermissionSet optional, PermissionSet refused); // 0x00000001800EA7B0
	internal void EmbedResourceFile(string name, string fileName); // 0x00000001801107D0
	internal void EmbedResourceFile(string name, string fileName, ResourceAttributes attribute); // 0x0000000180110570
	internal void EmbedResource(string name, byte[] blob, ResourceAttributes attribute); // 0x00000001801107F0
	internal void AddTypeForwarder(Type t); // 0x000000018010E870
	public ModuleBuilder DefineDynamicModule(string name); // 0x000000018010EC40
	public ModuleBuilder DefineDynamicModule(string name, bool emitSymbolInfo); // 0x000000018010EC10
	public ModuleBuilder DefineDynamicModule(string name, string fileName); // 0x000000018010EBD0
	public ModuleBuilder DefineDynamicModule(string name, string fileName, bool emitSymbolInfo); // 0x000000018010EBF0
	private ModuleBuilder DefineDynamicModule(string name, string fileName, bool emitSymbolInfo, bool transient); // 0x000000018010EC70
	private Module InternalAddModule(string fileName); // 0x0000000180111080
	internal Module AddModule(string fileName); // 0x000000018010E540
	public IResourceWriter DefineResource(string name, string description, string fileName); // 0x000000018010F330
	public IResourceWriter DefineResource(string name, string description, string fileName, ResourceAttributes attribute); // 0x000000018010F410
	private void AddUnmanagedResource(Win32Resource res); // 0x000000018010EA10
	public void DefineUnmanagedResource(byte[] resource); // 0x000000018010F940
	public void DefineUnmanagedResource(string resourceFileName); // 0x000000018010F4F0
	public void DefineVersionInfoResource(); // 0x00000001801104B0
	public void DefineVersionInfoResource(string product, string productVersion, string company, string copyright, string trademark); // 0x00000001801102F0
	internal void DefineIconResource(string iconFileName); // 0x000000018010EF80
	private void DefineVersionInfoResourceImpl(string fileName); // 0x000000018010FA20
	public ModuleBuilder GetDynamicModule(string name); // 0x00000001801109D0
	public override Type[] GetExportedTypes(); // 0x0000000180110B70
	public override FileStream GetFile(string name); // 0x0000000180110BB0
	public override FileStream[] GetFiles(bool getResourceModules); // 0x0000000180110BF0
	internal override Module[] GetModulesInternal(); // 0x0000000180110D90
	internal override Type[] GetTypes(bool exportedOnly); // 0x0000000180110E20
	public override ManifestResourceInfo GetManifestResourceInfo(string resourceName); // 0x0000000180110C90
	public override string[] GetManifestResourceNames(); // 0x0000000180110CD0
	public override Stream GetManifestResourceStream(string name); // 0x0000000180110D10
	public override Stream GetManifestResourceStream(Type type, string name); // 0x0000000180110D50
	internal override Module GetManifestModule(); // 0x0000000180110C30
	public void Save(string assemblyFileName, PortableExecutableKinds portableExecutableKind, ImageFileMachine imageFileMachine); // 0x00000001801110C0
	public void Save(string assemblyFileName); // 0x0000000180111090
	public void SetEntryPoint(MethodInfo entryMethod); // 0x0000000180111EA0
	public void SetEntryPoint(MethodInfo entryMethod, PEFileKinds fileKind); // 0x0000000180111F90
	public void SetCustomAttribute(CustomAttributeBuilder customBuilder); // 0x0000000180111860
	public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute); // 0x0000000180111DB0
	internal void SetCorlibTypeBuilders(Type corlib_object_type, Type corlib_value_type, Type corlib_enum_type); // 0x0000000180111810
	internal void SetCorlibTypeBuilders(Type corlib_object_type, Type corlib_value_type, Type corlib_enum_type, Type corlib_void_type); // 0x0000000180111830
	private Exception not_supported(); // 0x0000000180113780
	private void check_name_and_filename(string name, string fileName, bool fileNeedsToExists); // 0x0000000180112760
	private string create_assembly_version(string version); // 0x0000000180112E30
	private string GetCultureString(string str); // 0x0000000180110930
	internal override AssemblyName UnprotectedGetName(); // 0x00000001801121D0
}

// Namespace: System.Reflection.Emit
[Serializable]
public enum AssemblyBuilderAccess // TypeDefIndex: 486
{
	Run = 1,
	Save = 2,
	RunAndSave = 3,
	ReflectionOnly = 6
}

// Namespace: System.Reflection.Emit
public sealed class ConstructorBuilder : ConstructorInfo, _ConstructorBuilder // TypeDefIndex: 487
{
	// Fields
	private RuntimeMethodHandle mhandle; // 0x10
	private ILGenerator ilgen; // 0x20
	internal Type[] parameters; // 0x2C
	private MethodAttributes attrs; // 0x34
	private MethodImplAttributes iattrs; // 0x40
	private int table_idx; // 0x50
	private CallingConventions call_conv; // 0x60
	private TypeBuilder type; // 0x10
	internal ParameterBuilder[] pinfo; // 0x10
	private CustomAttributeBuilder[] cattrs; // 0x00
	private bool init_locals; // 0x10
	private Type[][] paramModReq; // 0x20
	private Type[][] paramModOpt; // 0x10
	private RefEmitPermissionSet[] permissions; // 0x00

	// Properties
	public override CallingConventions CallingConvention { get; } // 0x0000000180119430 
	public bool InitLocals { get; set; } // 0x0000000180119450 0x0000000180117630
	internal TypeBuilder TypeBuilder { get; } // 0x0000000180119440 
	public override RuntimeMethodHandle MethodHandle { get; } // 0x0000000180119520 
	public override MethodAttributes Attributes { get; } // 0x0000000180119420 
	public override Type ReflectedType { get; } // 0x0000000180119440 
	public override Type DeclaringType { get; } // 0x0000000180119440 
	public Type ReturnType { get; } // 0x00000001800EA8C0 
	public override string Name { get; } // 0x0000000180119570 
	public string Signature { get; } // 0x0000000180119610 
	public override Module Module { get; } // 0x0000000180119560 
	private bool IsCompilerContext { get; } // 0x0000000180119460 

	// Constructors
	internal ConstructorBuilder(TypeBuilder tb, MethodAttributes attributes, CallingConventions callingConvention, Type[] parameterTypes, Type[][] paramModReq, Type[][] paramModOpt); // 0x0000000180119110

	// Methods
	private void System.Runtime.InteropServices._ConstructorBuilder.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x0000000180118F50
	private void System.Runtime.InteropServices._ConstructorBuilder.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x0000000180118FF0
	private void System.Runtime.InteropServices._ConstructorBuilder.GetTypeInfoCount(out uint pcTInfo); // 0x0000000180118FA0
	private void System.Runtime.InteropServices._ConstructorBuilder.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x0000000180119040
	public override MethodImplAttributes GetMethodImplementationFlags(); // 0x0000000180118700
	public override ParameterInfo[] GetParameters(); // 0x0000000180118900
	internal ParameterInfo[] GetParametersInternal(); // 0x0000000180118750
	internal override int GetParameterCount(); // 0x0000000180118740
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x0000000180118990
	public override object Invoke(BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x00000001801189D0
	public void AddDeclarativeSecurity(SecurityAction action, PermissionSet pset); // 0x00000001800EA7B0
	public ParameterBuilder DefineParameter(int iSequence, ParameterAttributes attributes, string strParamName); // 0x0000000180117F30
	public override bool IsDefined(Type attributeType, bool inherit); // 0x0000000180118A10
	public override object[] GetCustomAttributes(bool inherit); // 0x00000001801183C0
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x0000000180118300
	public ILGenerator GetILGenerator(); // 0x0000000180118470
	public ILGenerator GetILGenerator(int streamSize); // 0x00000001801185B0
	public void SetCustomAttribute(CustomAttributeBuilder customBuilder); // 0x0000000180118AD0
	public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute); // 0x0000000180118D90
	public void SetImplementationFlags(MethodImplAttributes attributes); // 0x0000000180118E80
	public Module GetModule(); // 0x0000000180118710
	public MethodToken GetToken(); // 0x0000000180118980
	public void SetSymCustomAttribute(string name, byte[] data); // 0x0000000180118EF0
	public override string ToString(); // 0x0000000180119090
	internal void fixup(); // 0x0000000180119320
	internal void GenerateDebugInfo(ISymbolWriter symbolWriter); // 0x00000001801180E0
	internal override int get_next_table_index(object obj, int table, bool inc); // 0x0000000180119640
	private void RejectIfCreated(); // 0x0000000180118A50
	private Exception not_supported(); // 0x0000000180119710
	private Exception not_after_created(); // 0x0000000180119670
	private Exception not_created(); // 0x00000001801196C0
}

// Namespace: System.Reflection.Emit
internal class ConstructorOnTypeBuilderInst : ConstructorInfo // TypeDefIndex: 488
{
	// Fields
	private MonoGenericClass instantiation; // 0x10
	private ConstructorBuilder cb; // 0x10

	// Properties
	public override Type DeclaringType { get; } // 0x00000001800E20D0 
	public override string Name { get; } // 0x000000018011A240 
	public override Type ReflectedType { get; } // 0x00000001800E20D0 
	public override int MetadataToken { get; } // 0x000000018011A100 
	public override RuntimeMethodHandle MethodHandle { get; } // 0x000000018011A210 
	public override MethodAttributes Attributes { get; } // 0x000000018011A0B0 
	public override CallingConventions CallingConvention { get; } // 0x000000018011A0D0 
	public override bool ContainsGenericParameters { get; } // 0x000000018011A0F0 
	public override bool IsGenericMethodDefinition { get; } // 0x000000018011A0F0 
	public override bool IsGenericMethod { get; } // 0x000000018011A0F0 

	// Constructors
	public ConstructorOnTypeBuilderInst(MonoGenericClass instantiation, ConstructorBuilder cb); // 0x000000018011A030

	// Methods
	public override bool IsDefined(Type attributeType, bool inherit); // 0x0000000180119FF0
	public override object[] GetCustomAttributes(bool inherit); // 0x0000000180119A60
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x0000000180119B10
	public override MethodImplAttributes GetMethodImplementationFlags(); // 0x0000000180119C00
	public override ParameterInfo[] GetParameters(); // 0x0000000180119C50
	internal override int GetParameterCount(); // 0x0000000180119C20
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x0000000180119F40
	public override Type[] GetGenericArguments(); // 0x0000000180119BD0
	public override object Invoke(BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x0000000180119FA0
}

// Namespace: System.Reflection.Emit
public class CustomAttributeBuilder : _CustomAttributeBuilder // TypeDefIndex: 489
{
	// Fields
	private ConstructorInfo ctor; // 0x10
	private byte[] data; // 0x00
	private static Dictionary`2<string, int> <>f__switch$map1C; // 0x10

	// Properties
	internal ConstructorInfo Ctor { get; } // 0x00000001800E20D0 
	internal byte[] Data { get; } // 0x00000001800EAEC0 

	// Constructors
	internal CustomAttributeBuilder(ConstructorInfo con, byte[] cdata); // 0x000000018011B780
	public CustomAttributeBuilder(ConstructorInfo con, object[] constructorArgs); // 0x000000018011B550
	public CustomAttributeBuilder(ConstructorInfo con, object[] constructorArgs, FieldInfo[] namedFields, object[] fieldValues); // 0x000000018011B6D0
	public CustomAttributeBuilder(ConstructorInfo con, object[] constructorArgs, PropertyInfo[] namedProperties, object[] propertyValues); // 0x000000018011B610
	public CustomAttributeBuilder(ConstructorInfo con, object[] constructorArgs, PropertyInfo[] namedProperties, object[] propertyValues, FieldInfo[] namedFields, object[] fieldValues); // 0x000000018011B6C0

	// Methods
	private void System.Runtime.InteropServices._CustomAttributeBuilder.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x000000018011B410
	private void System.Runtime.InteropServices._CustomAttributeBuilder.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x000000018011B4B0
	private void System.Runtime.InteropServices._CustomAttributeBuilder.GetTypeInfoCount(out uint pcTInfo); // 0x000000018011B460
	private void System.Runtime.InteropServices._CustomAttributeBuilder.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x000000018011B500
	private static byte[] GetBlob(Assembly asmb, ConstructorInfo con, object[] constructorArgs, PropertyInfo[] namedProperties, object[] propertyValues, FieldInfo[] namedFields, object[] fieldValues); // 0x000000018011A260
	private bool IsValidType(Type t); // 0x000000018011B350
	private void Initialize(ConstructorInfo con, object[] constructorArgs, PropertyInfo[] namedProperties, object[] propertyValues, FieldInfo[] namedFields, object[] fieldValues); // 0x000000018011A2E0
	internal static int decode_len(byte[] data, int pos, out int rpos); // 0x000000018011C350
	internal static string string_from_bytes(byte[] data, int pos, int len); // 0x000000018011D0E0
	internal string string_arg(); // 0x000000018011D0A0
	internal static UnmanagedMarshal get_umarshal(CustomAttributeBuilder customBuilder, bool is_field); // 0x000000018011C650
	private static Type elementTypeToType(int elementType); // 0x000000018011C4A0
	private static object decode_cattr_value(Type t, byte[] data, int pos, out int rpos); // 0x000000018011BFE0
	internal static CustomAttributeInfo decode_cattr(CustomAttributeBuilder customBuilder); // 0x000000018011B810
	private static ParameterInfo[] GetParameters(ConstructorInfo ctor); // 0x000000018011A270
}

// Namespace: 
internal struct CustomAttributeInfo // TypeDefIndex: 490
{
	// Fields
	public ConstructorInfo ctor; // 0x10
	public object[] ctorArgs; // 0x20
	public string[] namedParamNames; // 0x10
	public object[] namedParamValues; // 0x00

}

// Namespace: System.Reflection.Emit
internal enum TypeKind // TypeDefIndex: 491
{
	ARRAY = 20,
	SZARRAY = 29
}

// Namespace: System.Reflection.Emit
internal abstract class DerivedType : Type // TypeDefIndex: 492
{
	// Fields
	internal Type elementType; // 0x18

	// Properties
	public override bool ContainsGenericParameters { get; } // 0x0000000180122760 
	public override GenericParameterAttributes GenericParameterAttributes { get; } // 0x0000000180122830 
	public override StructLayoutAttribute StructLayoutAttribute { get; } // 0x0000000180122930 
	public override Assembly Assembly { get; } // 0x0000000180122730 
	public override string AssemblyQualifiedName { get; } // 0x0000000180122640 
	public override string FullName { get; } // 0x0000000180122790 
	public override string Name { get; } // 0x00000001801228B0 
	public override Guid GUID { get; } // 0x00000001801227E0 
	public override Module Module { get; } // 0x0000000180122880 
	public override string Namespace { get; } // 0x0000000180122900 
	public override RuntimeTypeHandle TypeHandle { get; } // 0x0000000180122980 
	public override Type UnderlyingSystemType { get; } // 0x00000001801229D0 

	// Constructors
	internal DerivedType(Type elementType); // 0x0000000180117E60

	// Methods
	internal static void create_unmanaged_type(Type type); // 0x0000000180122630
	internal abstract string FormatName(string elementName);
	public override Type GetInterface(string name, bool ignoreCase); // 0x0000000180121FF0
	public override Type[] GetInterfaces(); // 0x0000000180122040
	public override Type GetElementType(); // 0x00000001800EAEC0
	public override EventInfo GetEvent(string name, BindingFlags bindingAttr); // 0x0000000180121E60
	public override EventInfo[] GetEvents(BindingFlags bindingAttr); // 0x0000000180121EB0
	public override FieldInfo GetField(string name, BindingFlags bindingAttr); // 0x0000000180121F00
	public override FieldInfo[] GetFields(BindingFlags bindingAttr); // 0x0000000180121F50
	public override MemberInfo[] GetMembers(BindingFlags bindingAttr); // 0x0000000180122090
	protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x00000001801220E0
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr); // 0x0000000180122130
	public override Type GetNestedType(string name, BindingFlags bindingAttr); // 0x0000000180122180
	public override Type[] GetNestedTypes(BindingFlags bindingAttr); // 0x00000001801221D0
	public override PropertyInfo[] GetProperties(BindingFlags bindingAttr); // 0x0000000180122220
	protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x0000000180122270
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x0000000180121D20
	protected override TypeAttributes GetAttributeFlagsImpl(); // 0x0000000180121D00
	protected override bool HasElementTypeImpl(); // 0x000000018010E420
	protected override bool IsArrayImpl(); // 0x000000018011A0F0
	protected override bool IsByRefImpl(); // 0x000000018011A0F0
	protected override bool IsCOMObjectImpl(); // 0x000000018011A0F0
	protected override bool IsPointerImpl(); // 0x000000018011A0F0
	protected override bool IsPrimitiveImpl(); // 0x000000018011A0F0
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr); // 0x0000000180121D70
	public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters); // 0x00000001801222C0
	public override InterfaceMapping GetInterfaceMap(Type interfaceType); // 0x0000000180121FA0
	public override bool IsInstanceOfType(object o); // 0x000000018011A0F0
	public override bool IsAssignableFrom(Type c); // 0x000000018011A0F0
	public override Type MakeGenericType(Type[] typeArguments); // 0x0000000180122530
	public override Type MakeArrayType(); // 0x0000000180122360
	public override Type MakeArrayType(int rank); // 0x0000000180122400
	public override Type MakeByRefType(); // 0x00000001801224A0
	public override Type MakePointerType(); // 0x0000000180122580
	public override string ToString(); // 0x00000001801225E0
	public override bool IsDefined(Type attributeType, bool inherit); // 0x0000000180122310
	public override object[] GetCustomAttributes(bool inherit); // 0x0000000180121E10
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x0000000180121DC0
}

// Namespace: System.Reflection.Emit
internal class ArrayType : DerivedType // TypeDefIndex: 493
{
	// Fields
	private int rank; // 0x20

	// Properties
	public override Type BaseType { get; } // 0x000000018010E4B0 

	// Constructors
	internal ArrayType(Type elementType, int rank); // 0x000000018010E430

	// Methods
	protected override bool IsArrayImpl(); // 0x000000018010E420
	public override int GetArrayRank(); // 0x000000018010E2F0
	protected override TypeAttributes GetAttributeFlagsImpl(); // 0x000000018010E300
	internal override string FormatName(string elementName); // 0x000000018010E1F0
}

// Namespace: System.Reflection.Emit
internal class ByRefType : DerivedType // TypeDefIndex: 494
{
	// Properties
	public override Type BaseType { get; } // 0x0000000180117ED0 

	// Constructors
	internal ByRefType(Type elementType); // 0x0000000180117E60

	// Methods
	protected override bool IsByRefImpl(); // 0x000000018010E420
	internal override string FormatName(string elementName); // 0x0000000180117C70
	public override Type MakeArrayType(); // 0x0000000180117D40
	public override Type MakeArrayType(int rank); // 0x0000000180117CE0
	public override Type MakeByRefType(); // 0x0000000180117DA0
	public override Type MakePointerType(); // 0x0000000180117E00
}

// Namespace: System.Reflection.Emit
internal class PointerType : DerivedType // TypeDefIndex: 495
{
	// Properties
	public override Type BaseType { get; } // 0x0000000180176460 

	// Constructors
	internal PointerType(Type elementType); // 0x0000000180176450

	// Methods
	protected override bool IsPointerImpl(); // 0x000000018010E420
	internal override string FormatName(string elementName); // 0x00000001801763E0
}

// Namespace: System.Reflection.Emit
public class DynamicILInfo // TypeDefIndex: 496
{
	// Properties
	public DynamicMethod DynamicMethod { get; } // 0x0000000180122E00 

	// Constructors
	internal DynamicILInfo(); // 0x00000001800EA7B0

	// Methods
	public int GetTokenFor(byte[] signature); // 0x0000000180122BD0
	public int GetTokenFor(DynamicMethod method); // 0x0000000180122B30
	public int GetTokenFor(RuntimeFieldHandle field); // 0x00000001801229F0
	public int GetTokenFor(RuntimeMethodHandle method); // 0x0000000180122A90
	public int GetTokenFor(RuntimeTypeHandle type); // 0x0000000180122AE0
	public int GetTokenFor(string literal); // 0x0000000180122B80
	public int GetTokenFor(RuntimeMethodHandle method, RuntimeTypeHandle contextType); // 0x0000000180122A40
	public void SetCode(byte[] code, int maxStackSize); // 0x0000000180122C70
	public void SetCode(void * code, int codeSize, int maxStackSize); // 0x0000000180122C20
	public void SetExceptions(byte[] exceptions); // 0x0000000180122CC0
	public void SetExceptions(void * exceptions, int exceptionsSize); // 0x0000000180122D10
	public void SetLocalSignature(byte[] localSignature); // 0x0000000180122D60
	public void SetLocalSignature(void * localSignature, int signatureSize); // 0x0000000180122DB0
}

// Namespace: System.Reflection.Emit
public sealed class DynamicMethod : MethodInfo // TypeDefIndex: 497
{
	// Fields
	private RuntimeMethodHandle mhandle; // 0x10
	private string name; // 0x20
	private Type returnType; // 0x30
	private Type[] parameters; // 0x38
	private MethodAttributes attributes; // 0x41
	private CallingConventions callingConvention; // 0x50
	private Module module; // 0x60
	private bool skipVisibility; // 0x70
	private bool init_locals; // 0x80
	private ILGenerator ilgen; // 0x10
	private int nrefs; // 0x18
	private object[] refs; // 0x28
	private IntPtr referenced_by; // 0x10
	private Type owner; // 0x20
	private Delegate deleg; // 0x30
	private MonoMethod method; // 0x40
	private ParameterBuilder[] pinfo; // 0x50
	internal bool creating; // 0x18

	// Properties
	public override MethodAttributes Attributes { get; } // 0x0000000180124660 
	public override CallingConventions CallingConvention { get; } // 0x0000000180119430 
	public override Type DeclaringType { get; } // 0x00000001800EA8C0 
	public bool InitLocals { get; set; } // 0x0000000180124670 0x0000000180124720
	public override RuntimeMethodHandle MethodHandle { get; } // 0x00000001800E20D0 
	public override Module Module { get; } // 0x0000000180119440 
	public override string Name { get; } // 0x00000001800EAEC0 
	public override Type ReflectedType { get; } // 0x00000001800EA8C0 
	public override ParameterInfo ReturnParameter { get; } // 0x0000000180124680 
	public override Type ReturnType { get; } // 0x00000001800EAEB0 
	public override ICustomAttributeProvider ReturnTypeCustomAttributes { get; } // 0x00000001801246D0 

	// Constructors
	public DynamicMethod(string name, Type returnType, Type[] parameterTypes, Module m); // 0x00000001801244D0
	public DynamicMethod(string name, Type returnType, Type[] parameterTypes, Type owner); // 0x00000001801240A0
	public DynamicMethod(string name, Type returnType, Type[] parameterTypes, Module m, bool skipVisibility); // 0x0000000180124570
	public DynamicMethod(string name, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility); // 0x0000000180124420
	public DynamicMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility); // 0x0000000180123F50
	public DynamicMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Module m, bool skipVisibility); // 0x0000000180124510
	public DynamicMethod(string name, Type returnType, Type[] parameterTypes); // 0x0000000180124010
	public DynamicMethod(string name, Type returnType, Type[] parameterTypes, bool restrictedSkipVisibility); // 0x0000000180124050
	private DynamicMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type owner, Module m, bool skipVisibility, bool anonHosted); // 0x0000000180124150

	// Methods
	private void create_dynamic_method(DynamicMethod m); // 0x00000001801245C0
	private void destroy_dynamic_method(DynamicMethod m); // 0x0000000180124610
	private void CreateDynMethod(); // 0x00000001801230E0
	protected override void Finalize(); // 0x00000001801234F0
	public Delegate CreateDelegate(Type delegateType); // 0x0000000180122FA0
	public Delegate CreateDelegate(Type delegateType, object target); // 0x0000000180123040
	public ParameterBuilder DefineParameter(int position, ParameterAttributes attributes, string parameterName); // 0x0000000180123320
	public override MethodInfo GetBaseDefinition(); // 0x0000000180123590
	public override object[] GetCustomAttributes(bool inherit); // 0x00000001801235A0
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00000001801235F0
	public DynamicILInfo GetDynamicILInfo(); // 0x0000000180123640
	public ILGenerator GetILGenerator(); // 0x0000000180123740
	public ILGenerator GetILGenerator(int streamSize); // 0x0000000180123690
	public override MethodImplAttributes GetMethodImplementationFlags(); // 0x00000001800EA8C0
	public override ParameterInfo[] GetParameters(); // 0x00000001801237F0
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x00000001801239A0
	public override bool IsDefined(Type attributeType, bool inherit); // 0x0000000180123A90
	public override string ToString(); // 0x0000000180123B50
	private void RejectIfCreated(); // 0x0000000180123AE0
	internal int AddRef(object reference); // 0x0000000180122E50
}

// Namespace: 
private class AnonHostModuleHolder // TypeDefIndex: 498
{
	// Fields
	public static Module anon_host_module; // 0x00

	// Constructors
	public AnonHostModuleHolder(); // 0x00000001800E2000
	private static AnonHostModuleHolder(); // 0x000000018015C730

}

// Namespace: System.Reflection.Emit
internal class DynamicMethodTokenGenerator : TokenGenerator // TypeDefIndex: 499
{
	// Fields
	private DynamicMethod m; // 0x10

	// Constructors
	public DynamicMethodTokenGenerator(DynamicMethod m); // 0x000000018015C840

	// Methods
	public int GetToken(string str); // 0x000000018015C7D0
	public int GetToken(MethodInfo method, Type[] opt_param_types); // 0x000000018015C7F0
	public int GetToken(MemberInfo member); // 0x000000018015C7D0
	public int GetToken(SignatureHelper helper); // 0x000000018015C7D0
}

// Namespace: System.Reflection.Emit
public sealed class EnumBuilder : Type, _EnumBuilder // TypeDefIndex: 500
{
	// Fields
	private TypeBuilder _tb; // 0x18
	private FieldBuilder _underlyingField; // 0x28
	private Type _underlyingType; // 0x10

	// Properties
	public override Assembly Assembly { get; } // 0x000000018015D200 
	public override string AssemblyQualifiedName { get; } // 0x000000018015D1E0 
	public override Type BaseType { get; } // 0x000000018015D220 
	public override Type DeclaringType { get; } // 0x000000018015D240 
	public override string FullName { get; } // 0x000000018015D260 
	public override Guid GUID { get; } // 0x000000018015D290 
	public override Module Module { get; } // 0x000000018015D2D0 
	public override string Name { get; } // 0x000000018015D300 
	public override string Namespace { get; } // 0x000000018015D320 
	public override Type ReflectedType { get; } // 0x000000018015D240 
	public override RuntimeTypeHandle TypeHandle { get; } // 0x000000018015D340 
	public TypeToken TypeToken { get; } // 0x000000018015D360 
	public FieldBuilder UnderlyingField { get; } // 0x00000001800EAEB0 
	public override Type UnderlyingSystemType { get; } // 0x000000018013BF80 

	// Constructors
	internal EnumBuilder(ModuleBuilder mb, string name, TypeAttributes visibility, Type underlyingType); // 0x000000018015D0B0

	// Methods
	private void System.Runtime.InteropServices._EnumBuilder.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x000000018015CF70
	private void System.Runtime.InteropServices._EnumBuilder.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x000000018015D010
	private void System.Runtime.InteropServices._EnumBuilder.GetTypeInfoCount(out uint pcTInfo); // 0x000000018015CFC0
	private void System.Runtime.InteropServices._EnumBuilder.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x000000018015D060
	internal TypeBuilder GetTypeBuilder(); // 0x00000001800EAEC0
	public Type CreateType(); // 0x000000018015C8C0
	private void setup_enum_type(Type t); // 0x000000018015D380
	public FieldBuilder DefineLiteral(string literalName, object literalValue); // 0x000000018015C8E0
	protected override TypeAttributes GetAttributeFlagsImpl(); // 0x000000018015C940
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x000000018015C960
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr); // 0x000000018015C990
	public override object[] GetCustomAttributes(bool inherit); // 0x000000018015C9D0
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x000000018015C9B0
	public override Type GetElementType(); // 0x000000018015C9F0
	public override EventInfo GetEvent(string name, BindingFlags bindingAttr); // 0x000000018015CA10
	public override EventInfo[] GetEvents(); // 0x000000018015CA50
	public override EventInfo[] GetEvents(BindingFlags bindingAttr); // 0x000000018015CA30
	public override FieldInfo GetField(string name, BindingFlags bindingAttr); // 0x000000018015CA70
	public override FieldInfo[] GetFields(BindingFlags bindingAttr); // 0x000000018015CA90
	public override Type GetInterface(string name, bool ignoreCase); // 0x000000018015CAF0
	public override InterfaceMapping GetInterfaceMap(Type interfaceType); // 0x000000018015CAB0
	public override Type[] GetInterfaces(); // 0x000000018015CB10
	public override MemberInfo[] GetMember(string name, MemberTypes type, BindingFlags bindingAttr); // 0x000000018015CB30
	public override MemberInfo[] GetMembers(BindingFlags bindingAttr); // 0x000000018015CB60
	protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x000000018015CB80
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr); // 0x000000018015CBD0
	public override Type GetNestedType(string name, BindingFlags bindingAttr); // 0x000000018015CBF0
	public override Type[] GetNestedTypes(BindingFlags bindingAttr); // 0x000000018015CC10
	public override PropertyInfo[] GetProperties(BindingFlags bindingAttr); // 0x000000018015CC30
	protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x000000018015CC50
	protected override bool HasElementTypeImpl(); // 0x000000018015CC90
	public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters); // 0x000000018015CCB0
	protected override bool IsArrayImpl(); // 0x000000018011A0F0
	protected override bool IsByRefImpl(); // 0x000000018011A0F0
	protected override bool IsCOMObjectImpl(); // 0x000000018011A0F0
	protected override bool IsPointerImpl(); // 0x000000018011A0F0
	protected override bool IsPrimitiveImpl(); // 0x000000018011A0F0
	protected override bool IsValueTypeImpl(); // 0x000000018010E420
	public override bool IsDefined(Type attributeType, bool inherit); // 0x000000018015CCE0
	public override Type MakeArrayType(); // 0x000000018015CD00
	public override Type MakeArrayType(int rank); // 0x000000018015CD60
	public override Type MakeByRefType(); // 0x000000018015CE00
	public override Type MakePointerType(); // 0x000000018015CE60
	public void SetCustomAttribute(CustomAttributeBuilder customBuilder); // 0x000000018015CF50
	public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute); // 0x000000018015CEC0
	private Exception CreateNotSupportedException(); // 0x000000018015C870
}

// Namespace: System.Reflection.Emit
public sealed class EventBuilder : _EventBuilder // TypeDefIndex: 501
{
	// Fields
	internal string name; // 0x10
	private Type type; // 0x20
	private TypeBuilder typeb; // 0x30
	private CustomAttributeBuilder[] cattrs; // 0x40
	internal MethodBuilder add_method; // 0x50
	internal MethodBuilder remove_method; // 0x18
	internal MethodBuilder raise_method; // 0x10
	internal MethodBuilder[] other_methods; // 0x10
	internal EventAttributes attrs; // 0x20
	private int table_idx; // 0x30

	// Constructors
	internal EventBuilder(TypeBuilder tb, string eventName, EventAttributes eventAttrs, Type eventType); // 0x000000018015DB20

	// Methods
	private void System.Runtime.InteropServices._EventBuilder.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x000000018015D9E0
	private void System.Runtime.InteropServices._EventBuilder.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x000000018015DA80
	private void System.Runtime.InteropServices._EventBuilder.GetTypeInfoCount(out uint pcTInfo); // 0x000000018015DA30
	private void System.Runtime.InteropServices._EventBuilder.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x000000018015DAD0
	internal int get_next_table_index(object obj, int table, bool inc); // 0x000000018015DBA0
	public void AddOtherMethod(MethodBuilder mdBuilder); // 0x000000018015D390
	public EventToken GetEventToken(); // 0x000000018015D4C0
	public void SetAddOnMethod(MethodBuilder mdBuilder); // 0x000000018015D550
	public void SetRaiseMethod(MethodBuilder mdBuilder); // 0x000000018015D8E0
	public void SetRemoveOnMethod(MethodBuilder mdBuilder); // 0x000000018015D960
	public void SetCustomAttribute(CustomAttributeBuilder customBuilder); // 0x000000018015D5D0
	public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute); // 0x000000018015D7F0
	private void RejectIfCreated(); // 0x000000018015D4D0
}

// Namespace: System.Reflection.Emit
internal class EventOnTypeBuilderInst : EventInfo // TypeDefIndex: 502
{
	// Fields
	private MonoGenericClass instantiation; // 0x18
	private EventBuilder evt; // 0x10

	// Properties
	public override EventAttributes Attributes { get; } // 0x000000018015DFB0 
	public override Type DeclaringType { get; } // 0x00000001800EAEC0 
	public override string Name { get; } // 0x000000018015DFD0 
	public override Type ReflectedType { get; } // 0x00000001800EAEC0 

	// Constructors
	internal EventOnTypeBuilderInst(MonoGenericClass instantiation, EventBuilder evt); // 0x000000018015DF70

	// Methods
	public override MethodInfo GetAddMethod(bool nonPublic); // 0x000000018015DBD0
	public override MethodInfo GetRaiseMethod(bool nonPublic); // 0x000000018015DE60
	public override MethodInfo GetRemoveMethod(bool nonPublic); // 0x000000018015DEC0
	public override MethodInfo[] GetOtherMethods(bool nonPublic); // 0x000000018015DCD0
	public override bool IsDefined(Type attributeType, bool inherit); // 0x000000018015DF20
	public override object[] GetCustomAttributes(bool inherit); // 0x000000018015DC30
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x000000018015DC80
}

// Namespace: System.Reflection.Emit
[Serializable]
public struct EventToken // TypeDefIndex: 503
{
	// Fields
	internal int tokValue; // 0x10
	public static readonly EventToken Empty; // 0x10

	// Properties
	public int Token { get; } // 0x00000001800034B0 

	// Constructors
	internal EventToken(int val); // 0x0000000180006A40
	private static EventToken(); // 0x000000018015DFF0

	// Methods
	public override bool Equals(object obj); // 0x00000001800069A0
	public bool Equals(EventToken obj); // 0x0000000180006A30
	public override int GetHashCode(); // 0x00000001800034B0
	public static bool op_Equality(EventToken a, EventToken b); // 0x000000018015E030
	public static bool op_Inequality(EventToken a, EventToken b); // 0x000000018015E0A0
}

// Namespace: System.Reflection.Emit
public sealed class FieldBuilder : FieldInfo, _FieldBuilder // TypeDefIndex: 504
{
	// Fields
	private FieldAttributes attrs; // 0x10
	private Type type; // 0x20
	private string name; // 0x30
	private object def_value; // 0x38
	private int offset; // 0x48
	private int table_idx; // 0x58
	internal TypeBuilder typeb; // 0x68
	private byte[] rva_data; // 0x10
	private CustomAttributeBuilder[] cattrs; // 0x10
	private UnmanagedMarshal marshal_info; // 0x10
	private RuntimeFieldHandle handle; // 0x00
	private Type[] modReq; // 0x00
	private Type[] modOpt; // 0x00

	// Properties
	public override FieldAttributes Attributes { get; } // 0x00000001800ECD10 
	public override Type DeclaringType { get; } // 0x0000000180119440 
	public override RuntimeFieldHandle FieldHandle { get; } // 0x000000018015EB20 
	public override Type FieldType { get; } // 0x00000001800EAEC0 
	public override string Name { get; } // 0x00000001800EAEB0 
	public override Type ReflectedType { get; } // 0x0000000180119440 
	internal override UnmanagedMarshal UMarshal { get; } // 0x00000001801513A0 
	public override Module Module { get; } // 0x0000000180119560 

	// Constructors
	internal FieldBuilder(TypeBuilder tb, string fieldName, Type type, FieldAttributes attributes, Type[] modReq, Type[] modOpt); // 0x000000018015EA30

	// Methods
	private void System.Runtime.InteropServices._FieldBuilder.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x000000018015E8F0
	private void System.Runtime.InteropServices._FieldBuilder.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x000000018015E990
	private void System.Runtime.InteropServices._FieldBuilder.GetTypeInfoCount(out uint pcTInfo); // 0x000000018015E940
	private void System.Runtime.InteropServices._FieldBuilder.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x000000018015E9E0
	public override object[] GetCustomAttributes(bool inherit); // 0x000000018015E170
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x000000018015E210
	public FieldToken GetToken(); // 0x000000018015E2C0
	public override object GetValue(object obj); // 0x000000018015E2E0
	public override bool IsDefined(Type attributeType, bool inherit); // 0x000000018015E320
	internal override int GetFieldOffset(); // 0x00000001800EA8C0
	internal void SetRVAData(byte[] data); // 0x000000018015E820
	public void SetConstant(object defaultValue); // 0x000000018015E3E0
	public void SetCustomAttribute(CustomAttributeBuilder customBuilder); // 0x000000018015E410
	public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute); // 0x000000018015E730
	public void SetMarshal(UnmanagedMarshal unmanagedMarshal); // 0x000000018015E7C0
	public void SetOffset(int iOffset); // 0x000000018015E7F0
	public override void SetValue(object obj, object val, BindingFlags invokeAttr, Binder binder, CultureInfo culture); // 0x000000018015E8B0
	private Exception CreateNotSupportedException(); // 0x000000018015E120
	private void RejectIfCreated(); // 0x000000018015E360
}

// Namespace: System.Reflection.Emit
internal class FieldOnTypeBuilderInst : FieldInfo // TypeDefIndex: 505
{
	// Fields
	internal MonoGenericClass instantiation; // 0x10
	internal FieldBuilder fb; // 0x10

	// Properties
	public override Type DeclaringType { get; } // 0x00000001800E20D0 
	public override string Name { get; } // 0x000000018015D320 
	public override Type ReflectedType { get; } // 0x00000001800E20D0 
	public override FieldAttributes Attributes { get; } // 0x000000018015EED0 
	public override RuntimeFieldHandle FieldHandle { get; } // 0x000000018015EEF0 
	public override int MetadataToken { get; } // 0x000000018015F090 
	public override Type FieldType { get; } // 0x000000018015EF40 

	// Constructors
	public FieldOnTypeBuilderInst(MonoGenericClass instantiation, FieldBuilder fb); // 0x000000018015EE90

	// Methods
	public override bool IsDefined(Type attributeType, bool inherit); // 0x000000018015EC50
	public override object[] GetCustomAttributes(bool inherit); // 0x000000018015EB60
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x000000018015EBB0
	public override string ToString(); // 0x000000018015ECF0
	public override object GetValue(object obj); // 0x000000018015EC00
	public override void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, CultureInfo culture); // 0x000000018015ECA0
}

// Namespace: System.Reflection.Emit
[Serializable]
public struct FieldToken // TypeDefIndex: 506
{
	// Fields
	internal int tokValue; // 0x10
	public static readonly FieldToken Empty; // 0x10

	// Properties
	public int Token { get; } // 0x00000001800034B0 

	// Constructors
	internal FieldToken(int val); // 0x0000000180006A40
	private static FieldToken(); // 0x000000018015F1D0

	// Methods
	public override bool Equals(object obj); // 0x0000000180006A50
	public bool Equals(FieldToken obj); // 0x0000000180006A30
	public override int GetHashCode(); // 0x00000001800034B0
	public static bool op_Equality(FieldToken a, FieldToken b); // 0x000000018015F210
	public static bool op_Inequality(FieldToken a, FieldToken b); // 0x000000018015F280
}

// Namespace: System.Reflection.Emit
[Serializable]
public enum FlowControl // TypeDefIndex: 507
{
	Branch = 0,
	Break = 1,
	Call = 2,
	Cond_Branch = 3,
	Meta = 4,
	Next = 5,
	Phi = 6,
	Return = 7,
	Throw = 8
}

// Namespace: System.Reflection.Emit
public sealed class GenericTypeParameterBuilder : Type // TypeDefIndex: 508
{
	// Fields
	private TypeBuilder tbuilder; // 0x18
	private MethodBuilder mbuilder; // 0x28
	private string name; // 0x38
	private int index; // 0x48
	private Type base_type; // 0x00
	private Type[] iface_constraints; // 0x00
	private CustomAttributeBuilder[] cattrs; // 0x00
	private GenericParameterAttributes attrs; // 0x18

	// Properties
	public override Type UnderlyingSystemType { get; } // 0x0000000180123590 
	public override Assembly Assembly { get; } // 0x000000018015D200 
	public override string AssemblyQualifiedName { get; } // 0x00000001800EA8C0 
	public override Type BaseType { get; } // 0x0000000180119440 
	public override string FullName { get; } // 0x00000001800EA8C0 
	public override Guid GUID { get; } // 0x0000000180160450 
	public override string Name { get; } // 0x000000018013BF80 
	public override string Namespace { get; } // 0x00000001800EA8C0 
	public override Module Module { get; } // 0x000000018015D2D0 
	public override Type DeclaringType { get; } // 0x0000000180160430 
	public override Type ReflectedType { get; } // 0x0000000180160430 
	public override RuntimeTypeHandle TypeHandle { get; } // 0x00000001801605B0 
	public override bool ContainsGenericParameters { get; } // 0x000000018010E420 
	public override bool IsGenericParameter { get; } // 0x000000018010E420 
	public override bool IsGenericType { get; } // 0x000000018011A0F0 
	public override bool IsGenericTypeDefinition { get; } // 0x000000018011A0F0 
	public override GenericParameterAttributes GenericParameterAttributes { get; } // 0x0000000180160490 
	public override int GenericParameterPosition { get; } // 0x0000000180124660 
	public override MethodBase DeclaringMethod { get; } // 0x00000001800EAEB0 

	// Constructors
	internal GenericTypeParameterBuilder(TypeBuilder tbuilder, MethodBuilder mbuilder, string name, int index); // 0x0000000180160390

	// Methods
	public void SetBaseTypeConstraint(Type baseTypeConstraint); // 0x0000000180160100
	public void SetInterfaceConstraints(Type[] interfaceConstraints); // 0x0000000180114C20
	public void SetGenericParameterAttributes(GenericParameterAttributes genericParameterAttributes); // 0x00000001800E4CB0
	private void initialize(); // 0x00000001801605F0
	public override bool IsSubclassOf(Type c); // 0x000000018015FDB0
	protected override TypeAttributes GetAttributeFlagsImpl(); // 0x000000018015F310
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x000000018015F420
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr); // 0x000000018015F460
	public override EventInfo GetEvent(string name, BindingFlags bindingAttr); // 0x000000018015F560
	public override EventInfo[] GetEvents(); // 0x000000018015F5A0
	public override EventInfo[] GetEvents(BindingFlags bindingAttr); // 0x000000018015F5E0
	public override FieldInfo GetField(string name, BindingFlags bindingAttr); // 0x000000018015F620
	public override FieldInfo[] GetFields(BindingFlags bindingAttr); // 0x000000018015F660
	public override Type GetInterface(string name, bool ignoreCase); // 0x000000018015FA30
	public override Type[] GetInterfaces(); // 0x000000018015FA70
	public override MemberInfo[] GetMembers(BindingFlags bindingAttr); // 0x000000018015FAF0
	public override MemberInfo[] GetMember(string name, MemberTypes type, BindingFlags bindingAttr); // 0x000000018015FAB0
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr); // 0x000000018015FB70
	protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x000000018015FB30
	public override Type GetNestedType(string name, BindingFlags bindingAttr); // 0x000000018015FBB0
	public override Type[] GetNestedTypes(BindingFlags bindingAttr); // 0x000000018015FBF0
	public override PropertyInfo[] GetProperties(BindingFlags bindingAttr); // 0x000000018015FC30
	protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x000000018015FC70
	protected override bool HasElementTypeImpl(); // 0x000000018011A0F0
	public override bool IsAssignableFrom(Type c); // 0x000000018015FCF0
	public override bool IsInstanceOfType(object o); // 0x000000018015FD70
	protected override bool IsArrayImpl(); // 0x000000018011A0F0
	protected override bool IsByRefImpl(); // 0x000000018011A0F0
	protected override bool IsCOMObjectImpl(); // 0x000000018011A0F0
	protected override bool IsPointerImpl(); // 0x000000018011A0F0
	protected override bool IsPrimitiveImpl(); // 0x000000018011A0F0
	protected override bool IsValueTypeImpl(); // 0x000000018015FF10
	public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters); // 0x000000018015FCB0
	public override Type GetElementType(); // 0x000000018015F520
	public override bool IsDefined(Type attributeType, bool inherit); // 0x000000018015FD30
	public override object[] GetCustomAttributes(bool inherit); // 0x000000018015F4E0
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x000000018015F4A0
	public override InterfaceMapping GetInterfaceMap(Type interfaceType); // 0x000000018015F9F0
	public override Type[] GetGenericArguments(); // 0x000000018015F6A0
	public override Type GetGenericTypeDefinition(); // 0x000000018015F990
	public override Type[] GetGenericParameterConstraints(); // 0x000000018015F6F0
	public void SetCustomAttribute(CustomAttributeBuilder customBuilder); // 0x0000000180160180
	public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute); // 0x0000000180160310
	private Exception not_supported(); // 0x0000000180160600
	public override string ToString(); // 0x000000018013BF80
	public override bool Equals(object o); // 0x000000018015F300
	public override int GetHashCode(); // 0x000000018015F9E0
	public override Type MakeArrayType(); // 0x000000018015FF30
	public override Type MakeArrayType(int rank); // 0x000000018015FF90
	public override Type MakeByRefType(); // 0x0000000180160030
	public override Type MakeGenericType(Type[] typeArguments); // 0x0000000180160090
	public override Type MakePointerType(); // 0x00000001801600A0
}

// Namespace: System.Reflection.Emit
internal struct ILExceptionBlock // TypeDefIndex: 509
{
	// Fields
	public const int CATCH = 0; // 0x00
	public const int FILTER = 1; // 0x00
	public const int FINALLY = 2; // 0x00
	public const int FAULT = 4; // 0x18
	public const int FILTER_START = -1; // 0x20
	internal Type extype; // 0x10
	internal int type; // 0x1C
	internal int start; // 0x10
	internal int len; // 0x00
	internal int filter_offset; // 0x00

	// Methods
	internal void Debug(); // 0x00000001800025C0
}

// Namespace: System.Reflection.Emit
internal struct ILExceptionInfo // TypeDefIndex: 510
{
	// Fields
	private ILExceptionBlock[] handlers; // 0x10
	internal int start; // 0x1C
	private int len; // 0x10
	internal Label end; // 0x00

	// Methods
	internal int NumHandlers(); // 0x0000000180006BD0
	internal void AddCatch(Type extype, int offset); // 0x0000000180006B00
	internal void AddFinally(int offset); // 0x0000000180006B30
	internal void AddFault(int offset); // 0x0000000180006B10
	internal void AddFilter(int offset); // 0x0000000180006B20
	internal void End(int offset); // 0x0000000180006B40
	internal int LastClauseType(); // 0x0000000180006B90
	internal void PatchFilterClause(int start); // 0x0000000180006BF0
	internal void Debug(int b); // 0x00000001800025C0
	private void add_block(int offset); // 0x0000000180006C00
}

// Namespace: System.Reflection.Emit
internal struct ILTokenInfo // TypeDefIndex: 511
{
	// Fields
	public MemberInfo member; // 0x10
	public int code_pos; // 0x00

}

// Namespace: System.Reflection.Emit
internal interface TokenGenerator // TypeDefIndex: 512
{
	// Methods
	int GetToken(string str);
	int GetToken(MemberInfo member);
	int GetToken(MethodInfo method, Type[] opt_param_types);
	int GetToken(SignatureHelper helper);
}

// Namespace: System.Reflection.Emit
public class ILGenerator : _ILGenerator // TypeDefIndex: 513
{
	// Fields
	private const int defaultFixupSize = 4; // 0x00
	private const int defaultLabelsSize = 4; // 0x00
	private const int defaultExceptionStackSize = 2; // 0x10
	private static readonly Type void_type; // 0x1C
	private byte[] code; // 0x28
	private int code_len; // 0x38
	private int max_stack; // 0x48
	private int cur_stack; // 0x58
	private LocalBuilder[] locals; // 0x68
	private ILExceptionInfo[] ex_handlers; // 0x78
	private int num_token_fixups; // 0x88
	private ILTokenInfo[] token_fixups; // 0x10
	private LabelData[] labels; // 0x18
	private int num_labels; // 0x10
	private LabelFixup[] fixups; // 0x00
	private int num_fixups; // 0x18
	internal Module module; // 0x10
	private int cur_block; // 0x18
	private Stack open_blocks; // 0x20
	private TokenGenerator token_gen; // 0x20
	private ArrayList sequencePointLists; // 0x30
	private SequencePointList currentSequence; // 0x00

	// Properties
	internal bool HasDebugInfo { get; } // 0x00000001801654C0 

	// Constructors
	internal ILGenerator(Module m, TokenGenerator token_gen, int size); // 0x0000000180165240
	private static ILGenerator(); // 0x00000001801651D0

	// Methods
	private void System.Runtime.InteropServices._ILGenerator.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x0000000180164E10
	private void System.Runtime.InteropServices._ILGenerator.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x0000000180164EB0
	private void System.Runtime.InteropServices._ILGenerator.GetTypeInfoCount(out uint pcTInfo); // 0x0000000180164E60
	private void System.Runtime.InteropServices._ILGenerator.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x0000000180164F00
	private void add_token_fixup(MemberInfo mi); // 0x00000001801652E0
	private void make_room(int nbytes); // 0x00000001801657A0
	private void emit_int(int val); // 0x00000001801653D0
	private void ll_emit(OpCode opcode); // 0x0000000180165630
	private static int target_len(OpCode opcode); // 0x0000000180165830
	private void InternalEndClause(); // 0x0000000180164A10
	public virtual void BeginCatchBlock(Type exceptionType); // 0x0000000180160BC0
	public virtual void BeginExceptFilterBlock(); // 0x0000000180160E80
	public virtual Label BeginExceptionBlock(); // 0x0000000180160F80
	public virtual void BeginFaultBlock(); // 0x00000001801610F0
	public virtual void BeginFinallyBlock(); // 0x0000000180161330
	public virtual void BeginScope(); // 0x00000001800EA7B0
	public virtual LocalBuilder DeclareLocal(Type localType); // 0x0000000180161790
	public virtual LocalBuilder DeclareLocal(Type localType, bool pinned); // 0x0000000180161570
	public virtual Label DefineLabel(); // 0x00000001801617B0
	public virtual void Emit(OpCode opcode); // 0x0000000180162EF0
	public virtual void Emit(OpCode opcode, byte arg); // 0x0000000180162460
	public virtual void Emit(OpCode opcode, ConstructorInfo con); // 0x0000000180163170
	public virtual void Emit(OpCode opcode, double arg); // 0x0000000180163290
	public virtual void Emit(OpCode opcode, FieldInfo field); // 0x0000000180163A80
	public virtual void Emit(OpCode opcode, short arg); // 0x0000000180162E40
	public virtual void Emit(OpCode opcode, int arg); // 0x0000000180163780
	public virtual void Emit(OpCode opcode, long arg); // 0x0000000180162F30
	public virtual void Emit(OpCode opcode, Label label); // 0x00000001801624E0
	public virtual void Emit(OpCode opcode, Label[] labels); // 0x0000000180163DC0
	public virtual void Emit(OpCode opcode, LocalBuilder local); // 0x00000001801626C0
	public virtual void Emit(OpCode opcode, MethodInfo meth); // 0x00000001801637D0
	private void Emit(OpCode opcode, MethodInfo method, int token); // 0x0000000180163640
	public void Emit(OpCode opcode, sbyte arg); // 0x0000000180162460
	public virtual void Emit(OpCode opcode, SignatureHelper signature); // 0x0000000180162D30
	public virtual void Emit(OpCode opcode, float arg); // 0x0000000180163B70
	public virtual void Emit(OpCode opcode, string str); // 0x0000000180162C30
	public virtual void Emit(OpCode opcode, Type cls); // 0x00000001801623C0
	public virtual void EmitCall(OpCode opcode, MethodInfo methodInfo, Type[] optionalParameterTypes); // 0x0000000180161890
	public virtual void EmitCalli(OpCode opcode, CallingConvention unmanagedCallConv, Type returnType, Type[] parameterTypes); // 0x0000000180161C60
	public virtual void EmitCalli(OpCode opcode, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type[] optionalParameterTypes); // 0x0000000180161CC0
	public virtual void EmitWriteLine(FieldInfo fld); // 0x0000000180161FB0
	public virtual void EmitWriteLine(LocalBuilder localBuilder); // 0x0000000180161D80
	public virtual void EmitWriteLine(string value); // 0x0000000180162220
	public virtual void EndExceptionBlock(); // 0x00000001801640C0
	public virtual void EndScope(); // 0x00000001800EA7B0
	public virtual void MarkLabel(Label loc); // 0x0000000180164BC0
	public virtual void MarkSequencePoint(ISymbolDocumentWriter document, int startLine, int startColumn, int endLine, int endColumn); // 0x0000000180164CE0
	internal void GenerateDebugInfo(ISymbolWriter symbolWriter); // 0x00000001801643A0
	public virtual void ThrowException(Type excType); // 0x0000000180164F50
	public virtual void UsingNamespace(string usingNamespace); // 0x0000000180165180
	internal void label_fixup(); // 0x00000001801654D0
	internal static int Mono_GetCurrentOffset(ILGenerator ig); // 0x0000000180164DF0
}

// Namespace: 
private struct LabelFixup // TypeDefIndex: 514
{
	// Fields
	public int offset; // 0x10
	public int pos; // 0x18
	public int label_idx; // 0x10

}

// Namespace: 
private struct LabelData // TypeDefIndex: 515
{
	// Fields
	public int addr; // 0x10
	public int maxStack; // 0x00

	// Constructors
	public LabelData(int addr, int maxStack); // 0x0000000180006C50

}

// Namespace: System.Reflection.Emit
internal class SequencePointList // TypeDefIndex: 516
{
	// Fields
	private const int arrayGrow = 10; // 0x00
	private ISymbolDocumentWriter doc; // 0x18
	private SequencePoint[] points; // 0x10
	private int count; // 0x18

	// Properties
	public ISymbolDocumentWriter Document { get; } // 0x00000001800E20D0 
	public int StartLine { get; } // 0x00000001801BB2B0 
	public int EndLine { get; } // 0x00000001801BB220 
	public int StartColumn { get; } // 0x00000001801BB270 
	public int EndColumn { get; } // 0x00000001801BB1D0 

	// Constructors
	public SequencePointList(ISymbolDocumentWriter doc); // 0x000000018015C840

	// Methods
	public int[] GetOffsets(); // 0x00000001801BB120
	public int[] GetLines(); // 0x00000001801BB070
	public int[] GetColumns(); // 0x00000001801BAE60
	public int[] GetEndLines(); // 0x00000001801BAFC0
	public int[] GetEndColumns(); // 0x00000001801BAF10
	public void AddSequencePoint(int offset, int line, int col, int endLine, int endCol); // 0x00000001801BAD60
}

// Namespace: System.Reflection.Emit
internal struct SequencePoint // TypeDefIndex: 517
{
	// Fields
	public int Offset; // 0x10
	public int Line; // 0x18
	public int Col; // 0x20
	public int EndLine; // 0x20
	public int EndCol; // 0x30

}

// Namespace: System.Reflection.Emit
[Serializable]
public struct Label // TypeDefIndex: 518
{
	// Fields
	internal int label; // 0x10

	// Constructors
	internal Label(int val); // 0x0000000180006A40

	// Methods
	public override bool Equals(object obj); // 0x0000000180006C60
	public bool Equals(Label obj); // 0x0000000180006A30
	public override int GetHashCode(); // 0x00000001800051D0
	public static bool op_Equality(Label a, Label b); // 0x00000001801658E0
	public static bool op_Inequality(Label a, Label b); // 0x00000001801658F0
}

// Namespace: System.Reflection.Emit
public sealed class LocalBuilder : LocalVariableInfo, _LocalBuilder // TypeDefIndex: 519
{
	// Fields
	private string name; // 0x20
	internal ILGenerator ilgen; // 0x30
	private int startOffset; // 0x00
	private int endOffset; // 0x10

	// Properties
	public override Type LocalType { get; } // 0x00000001800E20D0 
	public override bool IsPinned { get; } // 0x00000001801249E0 
	public override int LocalIndex { get; } // 0x0000000180165AC0 
	internal string Name { get; } // 0x00000001800EAEB0 
	internal int StartOffset { get; } // 0x0000000180124660 
	internal int EndOffset { get; } // 0x0000000180119430 

	// Constructors
	internal LocalBuilder(Type t, ILGenerator ilgen); // 0x0000000180165A80

	// Methods
	private void System.Runtime.InteropServices._LocalBuilder.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x0000000180165940
	private void System.Runtime.InteropServices._LocalBuilder.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x00000001801659E0
	private void System.Runtime.InteropServices._LocalBuilder.GetTypeInfoCount(out uint pcTInfo); // 0x0000000180165990
	private void System.Runtime.InteropServices._LocalBuilder.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x0000000180165A30
	public void SetLocalSymInfo(string name, int startOffset, int endOffset); // 0x0000000180165930
	public void SetLocalSymInfo(string name); // 0x0000000180165920
	internal static int Mono_GetLocalIndex(LocalBuilder builder); // 0x0000000180165900
}

// Namespace: System.Reflection.Emit
public sealed class MethodBuilder : MethodInfo, _MethodBuilder // TypeDefIndex: 520
{
	// Fields
	private RuntimeMethodHandle mhandle; // 0x10
	private Type rtype; // 0x20
	internal Type[] parameters; // 0x2C
	private MethodAttributes attrs; // 0x38
	private MethodImplAttributes iattrs; // 0x48
	private string name; // 0x58
	private int table_idx; // 0x68
	private byte[] code; // 0x78
	private ILGenerator ilgen; // 0x84
	private TypeBuilder type; // 0x8C
	internal ParameterBuilder[] pinfo; // 0x98
	private CustomAttributeBuilder[] cattrs; // 0xA8
	private MethodInfo override_method; // 0xB8
	private string pi_dll; // 0xC8
	private string pi_entry; // 0x10
	private CharSet charset; // 0x20
	private uint extra_flags; // 0x10
	private CallingConvention native_cc; // 0x00
	private CallingConventions call_conv; // 0x40
	private bool init_locals; // 0x50
	private IntPtr generic_container; // 0x60
	internal GenericTypeParameterBuilder[] generic_params; // 0x70
	private Type[] returnModReq; // 0x80
	private Type[] returnModOpt; // 0x90
	private Type[][] paramModReq; // 0xA0
	private Type[][] paramModOpt; // 0xB0
	private RefEmitPermissionSet[] permissions; // 0xC0
	private static Dictionary`2<string, int> <>f__switch$map1D; // 0xD0

	// Properties
	public override bool ContainsGenericParameters { get; } // 0x0000000180168190 
	public bool InitLocals { get; set; } // 0x00000001801681E0 0x0000000180168310
	internal TypeBuilder TypeBuilder { get; } // 0x00000001801513A0 
	public override RuntimeMethodHandle MethodHandle { get; } // 0x0000000180168200 
	public override Type ReturnType { get; } // 0x00000001800EAEC0 
	public override Type ReflectedType { get; } // 0x00000001801513A0 
	public override Type DeclaringType { get; } // 0x00000001801513A0 
	public override string Name { get; } // 0x00000001801146E0 
	public override MethodAttributes Attributes { get; } // 0x0000000180119420 
	public override ICustomAttributeProvider ReturnTypeCustomAttributes { get; } // 0x00000001800EA8C0 
	public override CallingConventions CallingConvention { get; } // 0x0000000180168180 
	public string Signature { get; } // 0x0000000180168240 
	internal bool BestFitMapping { set; } // 0x00000001801682C0
	internal bool ThrowOnUnmappableChar { set; } // 0x0000000180168340
	internal bool ExactSpelling { set; } // 0x00000001801682F0
	internal bool SetLastError { set; } // 0x0000000180168320
	public override bool IsGenericMethodDefinition { get; } // 0x00000001801681F0 
	public override bool IsGenericMethod { get; } // 0x00000001801681F0 
	public override Module Module { get; } // 0x0000000180119560 

	// Constructors
	internal MethodBuilder(TypeBuilder tb, string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] returnModReq, Type[] returnModOpt, Type[] parameterTypes, Type[][] paramModReq, Type[][] paramModOpt); // 0x0000000180167D40
	internal MethodBuilder(TypeBuilder tb, string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] returnModReq, Type[] returnModOpt, Type[] parameterTypes, Type[][] paramModReq, Type[][] paramModOpt, string dllName, string entryName, CallingConvention nativeCConv, CharSet nativeCharset); // 0x0000000180167C90

	// Methods
	private void System.Runtime.InteropServices._MethodBuilder.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x00000001801678F0
	private void System.Runtime.InteropServices._MethodBuilder.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x0000000180167990
	private void System.Runtime.InteropServices._MethodBuilder.GetTypeInfoCount(out uint pcTInfo); // 0x0000000180167940
	private void System.Runtime.InteropServices._MethodBuilder.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x00000001801679E0
	public MethodToken GetToken(); // 0x0000000180166A70
	public override MethodInfo GetBaseDefinition(); // 0x0000000180123590
	public override MethodImplAttributes GetMethodImplementationFlags(); // 0x0000000180118700
	public override ParameterInfo[] GetParameters(); // 0x0000000180166890
	internal override int GetParameterCount(); // 0x0000000180118740
	public Module GetModule(); // 0x0000000180166860
	public void CreateMethodBody(byte[] il, int count); // 0x0000000180165AD0
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x0000000180166A80
	public override bool IsDefined(Type attributeType, bool inherit); // 0x0000000180166AC0
	public override object[] GetCustomAttributes(bool inherit); // 0x0000000180166260
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00000001801661B0
	public ILGenerator GetILGenerator(); // 0x00000001801666C0
	public ILGenerator GetILGenerator(int size); // 0x0000000180166510
	public ParameterBuilder DefineParameter(int position, ParameterAttributes attributes, string strParamName); // 0x0000000180165DF0
	internal void check_override(); // 0x0000000180167F80
	internal void fixup(); // 0x0000000180168050
	internal void GenerateDebugInfo(ISymbolWriter symbolWriter); // 0x0000000180165FB0
	public void SetCustomAttribute(CustomAttributeBuilder customBuilder); // 0x0000000180166CD0
	public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute); // 0x0000000180166BE0
	public void SetImplementationFlags(MethodImplAttributes attributes); // 0x0000000180167610
	public void AddDeclarativeSecurity(SecurityAction action, PermissionSet pset); // 0x00000001800EA7B0
	public void SetMarshal(UnmanagedMarshal unmanagedMarshal); // 0x0000000180167640
	public void SetSymCustomAttribute(string name, byte[] data); // 0x0000000180167890
	public override string ToString(); // 0x0000000180167A30
	public override bool Equals(object obj); // 0x0000000180156370
	public override int GetHashCode(); // 0x00000001801664F0
	internal override int get_next_table_index(object obj, int table, bool inc); // 0x0000000180168290
	internal void set_override(MethodInfo mdecl); // 0x0000000180168370
	private void RejectIfCreated(); // 0x0000000180166B60
	private Exception NotSupported(); // 0x0000000180166B10
	public override MethodInfo MakeGenericMethod(Type[] typeArguments); // 0x0000000180166B00
	public override MethodInfo GetGenericMethodDefinition(); // 0x0000000180166480
	public override Type[] GetGenericArguments(); // 0x0000000180166300
	public GenericTypeParameterBuilder[] DefineGenericParameters(string[] names); // 0x0000000180165C00
	public void SetReturnType(Type returnType); // 0x00000001800EAEE0
	public void SetParameters(Type[] parameterTypes); // 0x00000001801676A0
	public void SetSignature(Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers); // 0x0000000180167770
}

// Namespace: System.Reflection.Emit
internal class MethodOnTypeBuilderInst : MethodInfo // TypeDefIndex: 521
{
	// Fields
	private MonoGenericClass instantiation; // 0x10
	internal MethodBuilder mb; // 0x20
	private Type[] method_arguments; // 0x10
	private MethodOnTypeBuilderInst generic_method_definition; // 0x00

	// Properties
	public override Type DeclaringType { get; } // 0x00000001800E20D0 
	public override string Name { get; } // 0x000000018015D240 
	public override Type ReflectedType { get; } // 0x00000001800E20D0 
	public override Type ReturnType { get; } // 0x0000000180169090 
	public override int MetadataToken { get; } // 0x0000000180168EE0 
	public override RuntimeMethodHandle MethodHandle { get; } // 0x0000000180168FF0 
	public override MethodAttributes Attributes { get; } // 0x000000018011A0B0 
	public override CallingConventions CallingConvention { get; } // 0x0000000180168D70 
	public override bool ContainsGenericParameters { get; } // 0x0000000180168D90 
	public override bool IsGenericMethodDefinition { get; } // 0x0000000180168E70 
	public override bool IsGenericMethod { get; } // 0x0000000180168EB0 
	public override ICustomAttributeProvider ReturnTypeCustomAttributes { get; } // 0x0000000180169040 

	// Constructors
	public MethodOnTypeBuilderInst(MonoGenericClass instantiation, MethodBuilder mb); // 0x000000018015EE90
	internal MethodOnTypeBuilderInst(MethodOnTypeBuilderInst gmd, Type[] typeArguments); // 0x0000000180168CD0

	// Methods
	public override bool IsDefined(Type attributeType, bool inherit); // 0x0000000180168850
	public override object[] GetCustomAttributes(bool inherit); // 0x0000000180168420
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00000001801683D0
	public override string ToString(); // 0x0000000180168A90
	public override MethodImplAttributes GetMethodImplementationFlags(); // 0x0000000180119C00
	public override ParameterInfo[] GetParameters(); // 0x0000000180168520
	internal override int GetParameterCount(); // 0x0000000180119C20
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x0000000180168800
	public override MethodInfo MakeGenericMethod(Type[] typeArguments); // 0x00000001801688A0
	public override Type[] GetGenericArguments(); // 0x0000000180168470
	public override MethodInfo GetGenericMethodDefinition(); // 0x0000000180168510
	public override MethodInfo GetBaseDefinition(); // 0x0000000180168380
}

// Namespace: System.Reflection.Emit
public sealed class MethodRental : _MethodRental // TypeDefIndex: 522
{
	// Fields
	public const int JitImmediate = 1; // 0x00
	public const int JitOnDemand = 0; // 0x14

	// Constructors
	private MethodRental(); // 0x00000001800E2000

	// Methods
	private void System.Runtime.InteropServices._MethodRental.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x0000000180169340
	private void System.Runtime.InteropServices._MethodRental.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x00000001801693E0
	private void System.Runtime.InteropServices._MethodRental.GetTypeInfoCount(out uint pcTInfo); // 0x0000000180169390
	private void System.Runtime.InteropServices._MethodRental.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x0000000180169430
	public static void SwapMethodBody(Type cls, int methodtoken, IntPtr rgIL, int methodSize, int flags); // 0x00000001801691B0
}

// Namespace: System.Reflection.Emit
[Serializable]
public struct MethodToken // TypeDefIndex: 523
{
	// Fields
	internal int tokValue; // 0x10
	public static readonly MethodToken Empty; // 0x00

	// Properties
	public int Token { get; } // 0x00000001800034B0 

	// Constructors
	internal MethodToken(int val); // 0x0000000180006A40
	private static MethodToken(); // 0x0000000180169480

	// Methods
	public override bool Equals(object obj); // 0x0000000180006CF0
	public bool Equals(MethodToken obj); // 0x0000000180006A30
	public override int GetHashCode(); // 0x00000001800034B0
	public static bool op_Equality(MethodToken a, MethodToken b); // 0x00000001801694C0
	public static bool op_Inequality(MethodToken a, MethodToken b); // 0x0000000180169530
}

// Namespace: System.Reflection.Emit
public class ModuleBuilder : Module, _ModuleBuilder // TypeDefIndex: 524
{
	// Fields
	private UIntPtr dynamic_image; // 0x40
	private int num_types; // 0x50
	private TypeBuilder[] types; // 0x60
	private CustomAttributeBuilder[] cattrs; // 0x70
	private byte[] guid; // 0x80
	private int table_idx; // 0x90
	internal AssemblyBuilder assemblyb; // 0xA0
	private MethodBuilder[] global_methods; // 0xB0
	private FieldBuilder[] global_fields; // 0xC0
	private bool is_main; // 0xD0
	private MonoResource[] resources; // 0x00
	private TypeBuilder global_type; // 0x10
	private Type global_type_created; // 0x20
	private Hashtable name_cache; // 0x30
	private Hashtable us_string_cache; // 0x3C
	private int[] table_indexes; // 0x10
	private bool transient; // 0x12
	private ModuleBuilderTokenGenerator token_gen; // 0x14
	private Hashtable resource_writers; // 0x16
	private ISymbolWriter symbolWriter; // 0x10
	private static readonly char[] type_modifiers; // 0x00

	// Properties
	public override string FullyQualifiedName { get; } // 0x00000001800EAEB0 
	internal string FileName { get; } // 0x00000001800EAEB0 
	internal bool IsMain { set; } // 0x000000018016DF80

	// Constructors
	internal ModuleBuilder(AssemblyBuilder assb, string name, string fullyqname, bool emitSymbolInfo, bool transient); // 0x000000018016D500
	private static ModuleBuilder(); // 0x000000018016D440

	// Methods
	private void System.Runtime.InteropServices._ModuleBuilder.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x000000018016D2F0
	private void System.Runtime.InteropServices._ModuleBuilder.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x000000018016D390
	private void System.Runtime.InteropServices._ModuleBuilder.GetTypeInfoCount(out uint pcTInfo); // 0x000000018016D340
	private void System.Runtime.InteropServices._ModuleBuilder.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x000000018016D3E0
	private static void basic_init(ModuleBuilder ab); // 0x000000018016DB50
	private static void set_wrappers_type(ModuleBuilder mb, Type ab); // 0x000000018016DF90
	public bool IsTransient(); // 0x000000018016C760
	public void CreateGlobalFunctions(); // 0x0000000180169830
	public FieldBuilder DefineInitializedData(string name, byte[] data, FieldAttributes attributes); // 0x000000018016A110
	public FieldBuilder DefineUninitializedData(string name, int size, FieldAttributes attributes); // 0x000000018016AF00
	private void addGlobalMethod(MethodBuilder mb); // 0x000000018016D9F0
	public MethodBuilder DefineGlobalMethod(string name, MethodAttributes attributes, Type returnType, Type[] parameterTypes); // 0x0000000180169F90
	public MethodBuilder DefineGlobalMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes); // 0x0000000180169C50
	public MethodBuilder DefineGlobalMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] requiredReturnTypeCustomModifiers, Type[] optionalReturnTypeCustomModifiers, Type[] parameterTypes, Type[][] requiredParameterTypeCustomModifiers, Type[][] optionalParameterTypeCustomModifiers); // 0x0000000180169DE0
	public MethodBuilder DefinePInvokeMethod(string name, string dllName, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, CallingConvention nativeCallConv, CharSet nativeCharSet); // 0x000000018016A6C0
	public MethodBuilder DefinePInvokeMethod(string name, string dllName, string entryName, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, CallingConvention nativeCallConv, CharSet nativeCharSet); // 0x000000018016A510
	public TypeBuilder DefineType(string name); // 0x000000018016ADD0
	public TypeBuilder DefineType(string name, TypeAttributes attr); // 0x000000018016ABA0
	public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent); // 0x000000018016AB70
	private void AddType(TypeBuilder tb); // 0x0000000180169730
	private TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, Type[] interfaces, PackingSize packingSize, int typesize); // 0x000000018016AC80
	internal void RegisterTypeName(TypeBuilder tb, string name); // 0x000000018016C7C0
	internal TypeBuilder GetRegisteredType(string name); // 0x000000018016BA10
	public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, Type[] interfaces); // 0x000000018016AE70
	public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, int typesize); // 0x000000018016AB70
	public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, PackingSize packsize); // 0x000000018016AEA0
	public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, PackingSize packingSize, int typesize); // 0x000000018016AED0
	public MethodInfo GetArrayMethod(Type arrayClass, string methodName, CallingConventions callingConvention, Type returnType, Type[] parameterTypes); // 0x000000018016B5A0
	public EnumBuilder DefineEnum(string name, TypeAttributes visibility, Type underlyingType); // 0x0000000180169A50
	public override Type GetType(string className); // 0x000000018016C240
	public override Type GetType(string className, bool ignoreCase); // 0x000000018016C5A0
	private TypeBuilder search_in_array(TypeBuilder[] arr, int validElementsInArray, string className); // 0x000000018016DD00
	private TypeBuilder search_nested_in_array(TypeBuilder[] arr, int validElementsInArray, string className); // 0x000000018016DE40
	private static Type create_modified_type(TypeBuilder tb, string modifiers); // 0x000000018016DB70
	private TypeBuilder GetMaybeNested(TypeBuilder t, string className); // 0x000000018016B7E0
	public override Type GetType(string className, bool throwOnError, bool ignoreCase); // 0x000000018016C270
	internal int get_next_table_index(object obj, int table, bool inc); // 0x000000018016DBB0
	public void SetCustomAttribute(CustomAttributeBuilder customBuilder); // 0x000000018016CEC0
	public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute); // 0x000000018016D010
	public ISymbolWriter GetSymWriter(); // 0x000000018016BC20
	public ISymbolDocumentWriter DefineDocument(string url, Guid language, Guid languageVendor, Guid documentType); // 0x0000000180169940
	public override Type[] GetTypes(); // 0x000000018016C5D0
	public IResourceWriter DefineResource(string name, string description, ResourceAttributes attribute); // 0x000000018016A860
	public IResourceWriter DefineResource(string name, string description); // 0x000000018016AB50
	public void DefineUnmanagedResource(byte[] resource); // 0x000000018016B3A0
	public void DefineUnmanagedResource(string resourceFileName); // 0x000000018016B200
	public void DefineManifestResource(string name, Stream stream, ResourceAttributes attribute); // 0x000000018016A240
	public void SetSymCustomAttribute(string name, byte[] data); // 0x000000018016D1A0
	public void SetUserEntryPoint(MethodInfo entryPoint); // 0x000000018016D1F0
	public MethodToken GetMethodToken(MethodInfo method); // 0x000000018016B8F0
	public MethodToken GetArrayMethodToken(Type arrayClass, string methodName, CallingConventions callingConvention, Type returnType, Type[] parameterTypes); // 0x000000018016B430
	public MethodToken GetConstructorToken(ConstructorInfo con); // 0x000000018016B630
	public FieldToken GetFieldToken(FieldInfo field); // 0x000000018016B6F0
	public SignatureToken GetSignatureToken(byte[] sigBytes, int sigLength); // 0x000000018016BA90
	public SignatureToken GetSignatureToken(SignatureHelper sigHelper); // 0x000000018016BAE0
	public StringToken GetStringConstant(string str); // 0x000000018016BBA0
	public TypeToken GetTypeToken(Type type); // 0x000000018016C0B0
	public TypeToken GetTypeToken(string name); // 0x000000018016BF10
	private static int getUSIndex(ModuleBuilder mb, string str); // 0x000000018016DBA0
	private static int getToken(ModuleBuilder mb, object obj); // 0x000000018016DB90
	private static int getMethodToken(ModuleBuilder mb, MethodInfo method, Type[] opt_param_types); // 0x000000018016DB80
	internal int GetToken(string str); // 0x000000018016BCA0
	internal int GetToken(MemberInfo member); // 0x000000018016BE40
	internal int GetToken(MethodInfo method, Type[] opt_param_types); // 0x000000018016BEA0
	internal int GetToken(SignatureHelper helper); // 0x000000018016BDE0
	internal void RegisterToken(object obj, int token); // 0x000000018016C7B0
	internal TokenGenerator GetTokenGenerator(); // 0x000000018016BC30
	private static void build_metadata(ModuleBuilder mb); // 0x000000018016DB60
	private void WriteToFile(IntPtr handle); // 0x000000018016D430
	internal void Save(); // 0x000000018016C800
	internal void CreateGlobalType(); // 0x00000001801698C0
	internal override Guid GetModuleVersionId(); // 0x000000018016B9E0
	internal static Guid Mono_GetGuid(ModuleBuilder mb); // 0x000000018016C770
}

// Namespace: System.Reflection.Emit
internal class ModuleBuilderTokenGenerator : TokenGenerator // TypeDefIndex: 525
{
	// Fields
	private ModuleBuilder mb; // 0x10

	// Constructors
	public ModuleBuilderTokenGenerator(ModuleBuilder mb); // 0x000000018015C840

	// Methods
	public int GetToken(string str); // 0x00000001801696A0
	public int GetToken(MemberInfo member); // 0x00000001801696C0
	public int GetToken(MethodInfo method, Type[] opt_param_types); // 0x0000000180169620
	public int GetToken(SignatureHelper helper); // 0x00000001801695B0
}

// Namespace: System.Reflection
internal class MonoArrayMethod : MethodInfo // TypeDefIndex: 526
{
	// Fields
	internal RuntimeMethodHandle mhandle; // 0x10
	internal Type parent; // 0x20
	internal Type ret; // 0x30
	internal Type[] parameters; // 0x3C
	internal string name; // 0x10
	internal int table_idx; // 0x12
	internal CallingConventions call_conv; // 0x14

	// Properties
	public override Type ReturnType { get; } // 0x00000001800EAEB0 
	public override ICustomAttributeProvider ReturnTypeCustomAttributes { get; } // 0x00000001800EA8C0 
	public override RuntimeMethodHandle MethodHandle { get; } // 0x00000001800E20D0 
	public override MethodAttributes Attributes { get; } // 0x00000001800EA8C0 
	public override Type ReflectedType { get; } // 0x00000001800EAEC0 
	public override Type DeclaringType { get; } // 0x00000001800EAEC0 
	public override string Name { get; } // 0x00000001801146E0 

	// Constructors
	internal MonoArrayMethod(Type arrayClass, string methodName, CallingConventions callingConvention, Type returnType, Type[] parameterTypes); // 0x00000001801B2E90

	// Methods
	public override MethodInfo GetBaseDefinition(); // 0x0000000180123590
	public override MethodImplAttributes GetMethodImplementationFlags(); // 0x00000001800EA8C0
	public override ParameterInfo[] GetParameters(); // 0x00000001801B2750
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x00000001801B2790
	public override bool IsDefined(Type attributeType, bool inherit); // 0x00000001801B27E0
	public override object[] GetCustomAttributes(bool inherit); // 0x00000001801B26E0
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00000001801B2660
	public override string ToString(); // 0x00000001801B2860
}

// Namespace: System.Reflection.Emit
public struct OpCode // TypeDefIndex: 527
{
	// Fields
	internal byte op1; // 0x10
	internal byte op2; // 0x12
	private byte push; // 0x14
	private byte pop; // 0x16
	private byte size; // 0x10
	private byte type; // 0x00
	private byte args; // 0x00
	private byte flow; // 0x00

	// Properties
	public string Name { get; } // 0x0000000180006FE0 
	public int Size { get; } // 0x0000000180007010 
	public OpCodeType OpCodeType { get; } // 0x0000000180006FF0 
	public OperandType OperandType { get; } // 0x0000000180007000 
	public FlowControl FlowControl { get; } // 0x0000000180006FD0 
	public StackBehaviour StackBehaviourPop { get; } // 0x0000000180007020 
	public StackBehaviour StackBehaviourPush { get; } // 0x0000000180007030 
	public short Value { get; } // 0x0000000180007040 

	// Constructors
	internal OpCode(int p, int q); // 0x0000000180006F90

	// Methods
	public override int GetHashCode(); // 0x0000000180006F50
	public override bool Equals(object obj); // 0x0000000180006E80
	public bool Equals(OpCode obj); // 0x0000000180006F30
	public override string ToString(); // 0x0000000180006F80
	public static bool op_Equality(OpCode a, OpCode b); // 0x00000001801738E0
	public static bool op_Inequality(OpCode a, OpCode b); // 0x0000000180173900
}

// Namespace: System.Reflection.Emit
internal class OpCodeNames // TypeDefIndex: 528
{
	// Fields
	internal static readonly string[] names; // 0x00

	// Constructors
	public OpCodeNames(); // 0x00000001800E2000
	private static OpCodeNames(); // 0x000000018016DFC0

}

// Namespace: System.Reflection.Emit
[Serializable]
public enum OpCodeType // TypeDefIndex: 529
{
	Annotation = 0,
	Macro = 1,
	Nternal = 2,
	Objmodel = 3,
	Prefix = 4,
	Primitive = 5
}

// Namespace: System.Reflection.Emit
public class OpCodes // TypeDefIndex: 530
{
	// Fields
	public static readonly OpCode Nop; // 0x00
	public static readonly OpCode Break; // 0x10
	public static readonly OpCode Ldarg_0; // 0x20
	public static readonly OpCode Ldarg_1; // 0x30
	public static readonly OpCode Ldarg_2; // 0x40
	public static readonly OpCode Ldarg_3; // 0x50
	public static readonly OpCode Ldloc_0; // 0x60
	public static readonly OpCode Ldloc_1; // 0x70
	public static readonly OpCode Ldloc_2; // 0x80
	public static readonly OpCode Ldloc_3; // 0x90
	public static readonly OpCode Stloc_0; // 0xA0
	public static readonly OpCode Stloc_1; // 0xB0
	public static readonly OpCode Stloc_2; // 0xC0
	public static readonly OpCode Stloc_3; // 0xD0
	public static readonly OpCode Ldarg_S; // 0xE0
	public static readonly OpCode Ldarga_S; // 0xF0
	public static readonly OpCode Starg_S; // 0x100
	public static readonly OpCode Ldloc_S; // 0x110
	public static readonly OpCode Ldloca_S; // 0x120
	public static readonly OpCode Stloc_S; // 0x130
	public static readonly OpCode Ldnull; // 0x140
	public static readonly OpCode Ldc_I4_M1; // 0x150
	public static readonly OpCode Ldc_I4_0; // 0x160
	public static readonly OpCode Ldc_I4_1; // 0x170
	public static readonly OpCode Ldc_I4_2; // 0x180
	public static readonly OpCode Ldc_I4_3; // 0x190
	public static readonly OpCode Ldc_I4_4; // 0x1A0
	public static readonly OpCode Ldc_I4_5; // 0x1B0
	public static readonly OpCode Ldc_I4_6; // 0x1C0
	public static readonly OpCode Ldc_I4_7; // 0x1D0
	public static readonly OpCode Ldc_I4_8; // 0x1E0
	public static readonly OpCode Ldc_I4_S; // 0x1F0
	public static readonly OpCode Ldc_I4; // 0x200
	public static readonly OpCode Ldc_I8; // 0x210
	public static readonly OpCode Ldc_R4; // 0x220
	public static readonly OpCode Ldc_R8; // 0x230
	public static readonly OpCode Dup; // 0x240
	public static readonly OpCode Pop; // 0x250
	public static readonly OpCode Jmp; // 0x260
	public static readonly OpCode Call; // 0x270
	public static readonly OpCode Calli; // 0x280
	public static readonly OpCode Ret; // 0x290
	public static readonly OpCode Br_S; // 0x2A0
	public static readonly OpCode Brfalse_S; // 0x2B0
	public static readonly OpCode Brtrue_S; // 0x2C0
	public static readonly OpCode Beq_S; // 0x2D0
	public static readonly OpCode Bge_S; // 0x2E0
	public static readonly OpCode Bgt_S; // 0x2F0
	public static readonly OpCode Ble_S; // 0x300
	public static readonly OpCode Blt_S; // 0x310
	public static readonly OpCode Bne_Un_S; // 0x320
	public static readonly OpCode Bge_Un_S; // 0x330
	public static readonly OpCode Bgt_Un_S; // 0x340
	public static readonly OpCode Ble_Un_S; // 0x350
	public static readonly OpCode Blt_Un_S; // 0x360
	public static readonly OpCode Br; // 0x370
	public static readonly OpCode Brfalse; // 0x380
	public static readonly OpCode Brtrue; // 0x390
	public static readonly OpCode Beq; // 0x3A0
	public static readonly OpCode Bge; // 0x3B0
	public static readonly OpCode Bgt; // 0x3C0
	public static readonly OpCode Ble; // 0x3D0
	public static readonly OpCode Blt; // 0x3E0
	public static readonly OpCode Bne_Un; // 0x3F0
	public static readonly OpCode Bge_Un; // 0x400
	public static readonly OpCode Bgt_Un; // 0x410
	public static readonly OpCode Ble_Un; // 0x420
	public static readonly OpCode Blt_Un; // 0x430
	public static readonly OpCode Switch; // 0x440
	public static readonly OpCode Ldind_I1; // 0x450
	public static readonly OpCode Ldind_U1; // 0x460
	public static readonly OpCode Ldind_I2; // 0x470
	public static readonly OpCode Ldind_U2; // 0x480
	public static readonly OpCode Ldind_I4; // 0x490
	public static readonly OpCode Ldind_U4; // 0x4A0
	public static readonly OpCode Ldind_I8; // 0x4B0
	public static readonly OpCode Ldind_I; // 0x4C0
	public static readonly OpCode Ldind_R4; // 0x4D0
	public static readonly OpCode Ldind_R8; // 0x4E0
	public static readonly OpCode Ldind_Ref; // 0x4F0
	public static readonly OpCode Stind_Ref; // 0x500
	public static readonly OpCode Stind_I1; // 0x510
	public static readonly OpCode Stind_I2; // 0x520
	public static readonly OpCode Stind_I4; // 0x530
	public static readonly OpCode Stind_I8; // 0x540
	public static readonly OpCode Stind_R4; // 0x550
	public static readonly OpCode Stind_R8; // 0x560
	public static readonly OpCode Add; // 0x570
	public static readonly OpCode Sub; // 0x580
	public static readonly OpCode Mul; // 0x590
	public static readonly OpCode Div; // 0x5A0
	public static readonly OpCode Div_Un; // 0x5B0
	public static readonly OpCode Rem; // 0x5C0
	public static readonly OpCode Rem_Un; // 0x5D0
	public static readonly OpCode And; // 0x5E0
	public static readonly OpCode Or; // 0x5F0
	public static readonly OpCode Xor; // 0x600
	public static readonly OpCode Shl; // 0x610
	public static readonly OpCode Shr; // 0x620
	public static readonly OpCode Shr_Un; // 0x630
	public static readonly OpCode Neg; // 0x640
	public static readonly OpCode Not; // 0x650
	public static readonly OpCode Conv_I1; // 0x660
	public static readonly OpCode Conv_I2; // 0x670
	public static readonly OpCode Conv_I4; // 0x680
	public static readonly OpCode Conv_I8; // 0x690
	public static readonly OpCode Conv_R4; // 0x6A0
	public static readonly OpCode Conv_R8; // 0x6B0
	public static readonly OpCode Conv_U4; // 0x6C0
	public static readonly OpCode Conv_U8; // 0x6D0
	public static readonly OpCode Callvirt; // 0x6E0
	public static readonly OpCode Cpobj; // 0x6F0
	public static readonly OpCode Ldobj; // 0x700
	public static readonly OpCode Ldstr; // 0x00
	public static readonly OpCode Newobj; // 0x10
	public static readonly OpCode Castclass; // 0x00
	public static readonly OpCode Isinst; // 0x00
	public static readonly OpCode Conv_R_Un; // 0x00
	public static readonly OpCode Unbox; // 0x00
	public static readonly OpCode Throw; // 0x00
	public static readonly OpCode Ldfld; // 0x00
	public static readonly OpCode Ldflda; // 0x00
	public static readonly OpCode Stfld; // 0x00
	public static readonly OpCode Ldsfld; // 0x00
	public static readonly OpCode Ldsflda; // 0x10
	public static readonly OpCode Stsfld; // 0x00
	public static readonly OpCode Stobj; // 0x10
	public static readonly OpCode Conv_Ovf_I1_Un; // 0x00
	public static readonly OpCode Conv_Ovf_I2_Un; // 0x00
	public static readonly OpCode Conv_Ovf_I4_Un; // 0x00
	public static readonly OpCode Conv_Ovf_I8_Un; // 0x00
	public static readonly OpCode Conv_Ovf_U1_Un; // 0x10
	public static readonly OpCode Conv_Ovf_U2_Un; // 0x20
	public static readonly OpCode Conv_Ovf_U4_Un; // 0x30
	public static readonly OpCode Conv_Ovf_U8_Un; // 0x38
	public static readonly OpCode Conv_Ovf_I_Un; // 0x10
	public static readonly OpCode Conv_Ovf_U_Un; // 0x10
	public static readonly OpCode Box; // 0x20
	public static readonly OpCode Newarr; // 0x30
	public static readonly OpCode Ldlen; // 0x40
	public static readonly OpCode Ldelema; // 0x50
	public static readonly OpCode Ldelem_I1; // 0x60
	public static readonly OpCode Ldelem_U1; // 0x70
	public static readonly OpCode Ldelem_I2; // 0x10
	public static readonly OpCode Ldelem_U2; // 0x10
	public static readonly OpCode Ldelem_I4; // 0x10
	public static readonly OpCode Ldelem_U4; // 0x20
	public static readonly OpCode Ldelem_I8; // 0x30
	public static readonly OpCode Ldelem_I; // 0x38
	public static readonly OpCode Ldelem_R4; // 0x10
	public static readonly OpCode Ldelem_R8; // 0x00
	public static readonly OpCode Ldelem_Ref; // 0x00
	public static readonly OpCode Stelem_I; // 0x10
	public static readonly OpCode Stelem_I1; // 0x00
	public static readonly OpCode Stelem_I2; // 0x10
	public static readonly OpCode Stelem_I4; // 0x00
	public static readonly OpCode Stelem_I8; // 0x00
	public static readonly OpCode Stelem_R4; // 0x00
	public static readonly OpCode Stelem_R8; // 0x00
	public static readonly OpCode Stelem_Ref; // 0x00
	public static readonly OpCode Ldelem; // 0x00
	public static readonly OpCode Stelem; // 0x00
	public static readonly OpCode Unbox_Any; // 0x00
	public static readonly OpCode Conv_Ovf_I1; // 0x00
	public static readonly OpCode Conv_Ovf_U1; // 0x00
	public static readonly OpCode Conv_Ovf_I2; // 0x00
	public static readonly OpCode Conv_Ovf_U2; // 0x00
	public static readonly OpCode Conv_Ovf_I4; // 0x00
	public static readonly OpCode Conv_Ovf_U4; // 0x00
	public static readonly OpCode Conv_Ovf_I8; // 0x10
	public static readonly OpCode Conv_Ovf_U8; // 0x00
	public static readonly OpCode Refanyval; // 0x20
	public static readonly OpCode Ckfinite; // 0x30
	public static readonly OpCode Mkrefany; // 0x40
	public static readonly OpCode Ldtoken; // 0x50
	public static readonly OpCode Conv_U2; // 0x60
	public static readonly OpCode Conv_U1; // 0x70
	public static readonly OpCode Conv_I; // 0x80
	public static readonly OpCode Conv_Ovf_I; // 0x8C
	public static readonly OpCode Conv_Ovf_U; // 0x98
	public static readonly OpCode Add_Ovf; // 0xA0
	public static readonly OpCode Add_Ovf_Un; // 0xB0
	public static readonly OpCode Mul_Ovf; // 0xC0
	public static readonly OpCode Mul_Ovf_Un; // 0xD0
	public static readonly OpCode Sub_Ovf; // 0x10
	public static readonly OpCode Sub_Ovf_Un; // 0x10
	public static readonly OpCode Endfinally; // 0x18
	public static readonly OpCode Leave; // 0x28
	public static readonly OpCode Leave_S; // 0x38
	public static readonly OpCode Stind_I; // 0x44
	public static readonly OpCode Conv_U; // 0x10
	public static readonly OpCode Prefix7; // 0x20
	public static readonly OpCode Prefix6; // 0x30
	public static readonly OpCode Prefix5; // 0x40
	public static readonly OpCode Prefix4; // 0x50
	public static readonly OpCode Prefix3; // 0x10
	public static readonly OpCode Prefix2; // 0x10
	public static readonly OpCode Prefix1; // 0x10
	public static readonly OpCode Prefixref; // 0x10
	public static readonly OpCode Arglist; // 0x10
	public static readonly OpCode Ceq; // 0x10
	public static readonly OpCode Cgt; // 0x10
	public static readonly OpCode Cgt_Un; // 0x10
	public static readonly OpCode Clt; // 0x20
	public static readonly OpCode Clt_Un; // 0x28
	public static readonly OpCode Ldftn; // 0x30
	public static readonly OpCode Ldvirtftn; // 0x3C
	public static readonly OpCode Ldarg; // 0x48
	public static readonly OpCode Ldarga; // 0x58
	public static readonly OpCode Starg; // 0x68
	public static readonly OpCode Ldloc; // 0x10
	public static readonly OpCode Ldloca; // 0x00
	public static readonly OpCode Stloc; // 0x00
	public static readonly OpCode Localloc; // 0x10
	public static readonly OpCode Endfilter; // 0x10
	public static readonly OpCode Unaligned; // 0x00
	public static readonly OpCode Volatile; // 0x10
	public static readonly OpCode Tailcall; // 0x00
	public static readonly OpCode Initobj; // 0x00
	public static readonly OpCode Constrained; // 0x00
	public static readonly OpCode Cpblk; // 0x00
	public static readonly OpCode Initblk; // 0x00
	public static readonly OpCode Rethrow; // 0x00
	public static readonly OpCode Sizeof; // 0x00
	public static readonly OpCode Refanytype; // 0x00
	public static readonly OpCode Readonly; // 0x00

	// Constructors
	internal OpCodes(); // 0x00000001800E2000
	private static OpCodes(); // 0x0000000180173940

	// Methods
	public static bool TakesSingleByteArgument(OpCode inst); // 0x0000000180173920
}

// Namespace: System.Reflection.Emit
[Serializable]
public enum OperandType // TypeDefIndex: 531
{
	InlineBrTarget = 0,
	InlineField = 1,
	InlineI = 2,
	InlineI8 = 3,
	InlineMethod = 4,
	InlineNone = 5,
	InlinePhi = 6,
	InlineR = 7,
	InlineSig = 9,
	InlineString = 10,
	InlineSwitch = 11,
	InlineTok = 12,
	InlineType = 13,
	InlineVar = 14,
	ShortInlineBrTarget = 15,
	ShortInlineI = 16,
	ShortInlineR = 17,
	ShortInlineVar = 18
}

// Namespace: System.Reflection.Emit
[Serializable]
public enum PEFileKinds // TypeDefIndex: 532
{
	Dll = 1,
	ConsoleApplication = 2,
	WindowApplication = 3
}

// Namespace: System.Reflection.Emit
[Serializable]
public enum PackingSize // TypeDefIndex: 533
{
	Unspecified = 0,
	Size1 = 1,
	Size2 = 2,
	Size4 = 4,
	Size8 = 8,
	Size16 = 16,
	Size32 = 32,
	Size64 = 64,
	Size128 = 128
}

// Namespace: System.Reflection.Emit
public class ParameterBuilder : _ParameterBuilder // TypeDefIndex: 534
{
	// Fields
	private MethodBase methodb; // 0x10
	private string name; // 0x20
	private CustomAttributeBuilder[] cattrs; // 0x30
	private UnmanagedMarshal marshal_info; // 0x38
	private ParameterAttributes attrs; // 0x10
	private int position; // 0x10
	private int table_idx; // 0x20
	private object def_value; // 0x30

	// Properties
	public virtual int Attributes { get; } // 0x0000000180124660 
	public bool IsIn { get; } // 0x0000000180176280 
	public bool IsOut { get; } // 0x00000001801762A0 
	public bool IsOptional { get; } // 0x0000000180176290 
	public virtual string Name { get; } // 0x00000001800EAEC0 
	public virtual int Position { get; } // 0x0000000180119430 

	// Constructors
	internal ParameterBuilder(MethodBase mb, int pos, ParameterAttributes attributes, string strParamName); // 0x00000001801761C0

	// Methods
	private void System.Runtime.InteropServices._ParameterBuilder.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x0000000180176080
	private void System.Runtime.InteropServices._ParameterBuilder.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x0000000180176120
	private void System.Runtime.InteropServices._ParameterBuilder.GetTypeInfoCount(out uint pcTInfo); // 0x00000001801760D0
	private void System.Runtime.InteropServices._ParameterBuilder.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x0000000180176170
	public virtual ParameterToken GetToken(); // 0x0000000180175CC0
	public virtual void SetConstant(object defaultValue); // 0x0000000180175CD0
	public void SetCustomAttribute(CustomAttributeBuilder customBuilder); // 0x0000000180175CE0
	public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute); // 0x0000000180175FF0
	public virtual void SetMarshal(UnmanagedMarshal unmanagedMarshal); // 0x0000000180176070
}

// Namespace: System.Reflection.Emit
[Serializable]
public struct ParameterToken // TypeDefIndex: 535
{
	// Fields
	internal int tokValue; // 0x10
	public static readonly ParameterToken Empty; // 0x10

	// Properties
	public int Token { get; } // 0x00000001800034B0 

	// Constructors
	internal ParameterToken(int val); // 0x0000000180006A40
	private static ParameterToken(); // 0x00000001801762B0

	// Methods
	public override bool Equals(object obj); // 0x0000000180007060
	public bool Equals(ParameterToken obj); // 0x0000000180006A30
	public override int GetHashCode(); // 0x00000001800034B0
	public static bool op_Equality(ParameterToken a, ParameterToken b); // 0x00000001801762F0
	public static bool op_Inequality(ParameterToken a, ParameterToken b); // 0x0000000180176360
}

// Namespace: System.Reflection.Emit
public sealed class PropertyBuilder : PropertyInfo, _PropertyBuilder // TypeDefIndex: 536
{
	// Fields
	private PropertyAttributes attrs; // 0x10
	private string name; // 0x20
	private Type type; // 0x30
	private Type[] parameters; // 0x40
	private CustomAttributeBuilder[] cattrs; // 0x50
	private object def_value; // 0x60
	private MethodBuilder set_method; // 0x70
	private MethodBuilder get_method; // 0x10
	private int table_idx; // 0x10
	internal TypeBuilder typeb; // 0x10
	private Type[] returnModReq; // 0x20
	private Type[] returnModOpt; // 0x30
	private Type[][] paramModReq; // 0x38
	private Type[][] paramModOpt; // 0x10

	// Properties
	public override PropertyAttributes Attributes { get; } // 0x00000001800ECD10 
	public override bool CanRead { get; } // 0x0000000180176AA0 
	public override bool CanWrite { get; } // 0x0000000180176AB0 
	public override Type DeclaringType { get; } // 0x0000000180176AC0 
	public override string Name { get; } // 0x00000001800EAEC0 
	public PropertyToken PropertyToken { get; } // 0x00000001800EA8C0 
	public override Type PropertyType { get; } // 0x00000001800EAEB0 
	public override Type ReflectedType { get; } // 0x0000000180176AC0 
	public override Module Module { get; } // 0x0000000180119560 

	// Constructors
	internal PropertyBuilder(TypeBuilder tb, string name, PropertyAttributes attributes, Type returnType, Type[] returnModReq, Type[] returnModOpt, Type[] parameterTypes, Type[][] paramModReq, Type[][] paramModOpt); // 0x00000001801769A0

	// Methods
	private void System.Runtime.InteropServices._PropertyBuilder.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x0000000180176860
	private void System.Runtime.InteropServices._PropertyBuilder.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x0000000180176900
	private void System.Runtime.InteropServices._PropertyBuilder.GetTypeInfoCount(out uint pcTInfo); // 0x00000001801768B0
	private void System.Runtime.InteropServices._PropertyBuilder.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x0000000180176950
	public void AddOtherMethod(MethodBuilder mdBuilder); // 0x00000001800EA7B0
	public override MethodInfo[] GetAccessors(bool nonPublic); // 0x00000001800EA8C0
	public override object[] GetCustomAttributes(bool inherit); // 0x0000000180176500
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00000001801764C0
	public override MethodInfo GetGetMethod(bool nonPublic); // 0x0000000180113E60
	public override ParameterInfo[] GetIndexParameters(); // 0x0000000180176540
	public override MethodInfo GetSetMethod(bool nonPublic); // 0x0000000180114BB0
	public override object GetValue(object obj, object[] index); // 0x00000001800EA8C0
	public override object GetValue(object obj, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture); // 0x0000000180176580
	public override bool IsDefined(Type attributeType, bool inherit); // 0x00000001801765C0
	public void SetConstant(object defaultValue); // 0x000000018015B770
	public void SetCustomAttribute(CustomAttributeBuilder customBuilder); // 0x0000000180176600
	public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute); // 0x00000001801767D0
	public void SetGetMethod(MethodBuilder mdBuilder); // 0x0000000180176850
	public void SetSetMethod(MethodBuilder mdBuilder); // 0x0000000180114C20
	public override void SetValue(object obj, object value, object[] index); // 0x00000001800EA7B0
	public override void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture); // 0x00000001800EA7B0
	private Exception not_supported(); // 0x0000000180176AD0
}

// Namespace: System.Reflection.Emit
internal class PropertyOnTypeBuilderInst : PropertyInfo // TypeDefIndex: 537
{
	// Fields
	private MonoGenericClass instantiation; // 0x10
	private PropertyInfo prop; // 0x10

	// Properties
	public override PropertyAttributes Attributes { get; } // 0x00000001801BAA70 
	public override bool CanRead { get; } // 0x00000001801BAAC0 
	public override bool CanWrite { get; } // 0x00000001801BAB10 
	public override Type PropertyType { get; } // 0x00000001801BABE0 
	public override Type DeclaringType { get; } // 0x00000001801BAB60 
	public override Type ReflectedType { get; } // 0x00000001800E20D0 
	public override string Name { get; } // 0x00000001801BABB0 

	// Constructors
	internal PropertyOnTypeBuilderInst(MonoGenericClass instantiation, PropertyInfo prop); // 0x00000001801BAA30

	// Methods
	public override MethodInfo[] GetAccessors(bool nonPublic); // 0x00000001801BA530
	public override MethodInfo GetGetMethod(bool nonPublic); // 0x00000001801BA730
	public override ParameterInfo[] GetIndexParameters(); // 0x00000001801BA7B0
	public override MethodInfo GetSetMethod(bool nonPublic); // 0x00000001801BA820
	public override string ToString(); // 0x00000001801BA990
	public override object GetValue(object obj, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture); // 0x00000001801BA8A0
	public override void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture); // 0x00000001801BA940
	public override bool IsDefined(Type attributeType, bool inherit); // 0x00000001801BA8F0
	public override object[] GetCustomAttributes(bool inherit); // 0x00000001801BA690
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00000001801BA6E0
}

// Namespace: System.Reflection.Emit
[Serializable]
public struct PropertyToken // TypeDefIndex: 538
{
	// Fields
	internal int tokValue; // 0x10
	public static readonly PropertyToken Empty; // 0x10

	// Properties
	public int Token { get; } // 0x00000001800034B0 

	// Constructors
	internal PropertyToken(int val); // 0x0000000180006A40
	private static PropertyToken(); // 0x00000001801BAC30

	// Methods
	public override bool Equals(object obj); // 0x00000001800085D0
	public bool Equals(PropertyToken obj); // 0x0000000180006A30
	public override int GetHashCode(); // 0x00000001800034B0
	public static bool op_Equality(PropertyToken a, PropertyToken b); // 0x00000001801BAC70
	public static bool op_Inequality(PropertyToken a, PropertyToken b); // 0x00000001801BACE0
}

// Namespace: System.Reflection.Emit
public sealed class SignatureHelper : _SignatureHelper // TypeDefIndex: 539
{
	// Fields
	private ModuleBuilder module; // 0x10
	private Type[] arguments; // 0x20
	private SignatureHelperType type; // 0x30
	private Type returnType; // 0x38
	private CallingConventions callConv; // 0x10
	private CallingConvention unmanagedCallConv; // 0x00
	private Type[][] modreqs; // 0x00
	private Type[][] modopts; // 0x10

	// Constructors
	internal SignatureHelper(ModuleBuilder module, SignatureHelperType type); // 0x00000001801BC8E0

	// Methods
	private void System.Runtime.InteropServices._SignatureHelper.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x00000001801BC4E0
	private void System.Runtime.InteropServices._SignatureHelper.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x00000001801BC580
	private void System.Runtime.InteropServices._SignatureHelper.GetTypeInfoCount(out uint pcTInfo); // 0x00000001801BC530
	private void System.Runtime.InteropServices._SignatureHelper.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x00000001801BC5D0
	public static SignatureHelper GetFieldSigHelper(Module mod); // 0x00000001801BBAF0
	public static SignatureHelper GetLocalVarSigHelper(Module mod); // 0x00000001801BBC20
	public static SignatureHelper GetLocalVarSigHelper(); // 0x00000001801BBD50
	public static SignatureHelper GetMethodSigHelper(CallingConventions callingConvention, Type returnType); // 0x00000001801BBE30
	public static SignatureHelper GetMethodSigHelper(CallingConvention unmanagedCallingConvention, Type returnType); // 0x00000001801BC250
	public static SignatureHelper GetMethodSigHelper(Module mod, CallingConventions callingConvention, Type returnType); // 0x00000001801BBE10
	public static SignatureHelper GetMethodSigHelper(Module mod, CallingConvention unmanagedCallConv, Type returnType); // 0x00000001801BBDE0
	public static SignatureHelper GetMethodSigHelper(Module mod, Type returnType, Type[] parameterTypes); // 0x00000001801BBDB0
	public static SignatureHelper GetPropertySigHelper(Module mod, Type returnType, Type[] parameterTypes); // 0x00000001801BC3B0
	private static int AppendArray(Type[] array, Type t); // 0x00000001801BB6E0
	private static void AppendArrayAt(Type[][] array, Type[] t, int pos); // 0x00000001801BB5E0
	private static void ValidateParameterModifiers(string name, Type[] parameter_modifiers); // 0x00000001801BC760
	private static void ValidateCustomModifier(int n, Type[][] custom_modifiers, string name); // 0x00000001801BC650
	private static Exception MissingFeature(); // 0x00000001801BC480
	public void AddArguments(Type[] arguments, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers); // 0x00000001801BB470
	public void AddArgument(Type argument, bool pinned); // 0x00000001801BB2F0
	public void AddArgument(Type argument, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers); // 0x00000001801BB370
	public static SignatureHelper GetPropertySigHelper(Module mod, Type returnType, Type[] requiredReturnTypeCustomModifiers, Type[] optionalReturnTypeCustomModifiers, Type[] parameterTypes, Type[][] requiredParameterTypeCustomModifiers, Type[][] optionalParameterTypeCustomModifiers); // 0x00000001801BC360
	public void AddArgument(Type clsArgument); // 0x00000001801BB2F0
	public void AddSentinel(); // 0x00000001801BB590
	private static bool CompareOK(Type[][] one, Type[][] two); // 0x00000001801BB840
	public override bool Equals(object obj); // 0x00000001801BB990
	public override int GetHashCode(); // 0x00000001800EA8C0
	internal byte[] get_signature_local(); // 0x00000001801BC930
	internal byte[] get_signature_field(); // 0x00000001801BC920
	public byte[] GetSignature(); // 0x00000001801BC400
	public override string ToString(); // 0x00000001801BC620
	internal static SignatureHelper GetMethodSigHelper(Module mod, CallingConventions callingConvention, CallingConvention unmanagedCallingConvention, Type returnType, Type[] parameters); // 0x00000001801BBF30
}

// Namespace: 
internal enum SignatureHelperType // TypeDefIndex: 540
{
	HELPER_FIELD = 0,
	HELPER_LOCAL = 1,
	HELPER_METHOD = 2,
	HELPER_PROPERTY = 3
}

// Namespace: System.Reflection.Emit
public struct SignatureToken // TypeDefIndex: 541
{
	// Fields
	internal int tokValue; // 0x10
	public static readonly SignatureToken Empty; // 0x00

	// Properties
	public int Token { get; } // 0x00000001800034B0 

	// Constructors
	internal SignatureToken(int val); // 0x0000000180006A40
	private static SignatureToken(); // 0x00000001801BC940

	// Methods
	public override bool Equals(object obj); // 0x00000001800086C0
	public bool Equals(SignatureToken obj); // 0x0000000180006A30
	public override int GetHashCode(); // 0x00000001800034B0
	public static bool op_Equality(SignatureToken a, SignatureToken b); // 0x00000001801BC980
	public static bool op_Inequality(SignatureToken a, SignatureToken b); // 0x00000001801BC9F0
}

// Namespace: System.Reflection.Emit
[Serializable]
public enum StackBehaviour // TypeDefIndex: 542
{
	Pop0 = 0,
	Pop1 = 1,
	Pop1_pop1 = 2,
	Popi = 3,
	Popi_pop1 = 4,
	Popi_popi = 5,
	Popi_popi8 = 6,
	Popi_popi_popi = 7,
	Popi_popr4 = 8,
	Popi_popr8 = 9,
	Popref = 10,
	Popref_pop1 = 11,
	Popref_popi = 12,
	Popref_popi_popi = 13,
	Popref_popi_popi8 = 14,
	Popref_popi_popr4 = 15,
	Popref_popi_popr8 = 16,
	Popref_popi_popref = 17,
	Push0 = 18,
	Push1 = 19,
	Push1_push1 = 20,
	Pushi = 21,
	Pushi8 = 22,
	Pushr4 = 23,
	Pushr8 = 24,
	Pushref = 25,
	Varpop = 26,
	Varpush = 27,
	Popref_popi_pop1 = 28
}

// Namespace: System.Reflection.Emit
[Serializable]
public struct StringToken // TypeDefIndex: 543
{
	// Fields
	internal int tokValue; // 0x10

	// Properties
	public int Token { get; } // 0x00000001800034B0 

	// Constructors
	internal StringToken(int val); // 0x0000000180006A40
	private static StringToken(); // 0x00000001800EA7B0

	// Methods
	public override bool Equals(object obj); // 0x0000000180008750
	public bool Equals(StringToken obj); // 0x0000000180006A30
	public override int GetHashCode(); // 0x00000001800034B0
	public static bool op_Equality(StringToken a, StringToken b); // 0x00000001801BCA70
	public static bool op_Inequality(StringToken a, StringToken b); // 0x00000001801BCAE0
}

// Namespace: System.Reflection.Emit
public sealed class TypeBuilder : Type, _TypeBuilder // TypeDefIndex: 544
{
	// Fields
	public const int UnspecifiedTypeSize = 0; // 0x00
	private string tname; // 0x20
	private string nspace; // 0x30
	private Type parent; // 0x40
	private Type nesting_type; // 0x50
	internal Type[] interfaces; // 0x60
	internal int num_methods; // 0x70
	internal MethodBuilder[] methods; // 0x80
	internal ConstructorBuilder[] ctors; // 0x8C
	internal PropertyBuilder[] properties; // 0x98
	internal int num_fields; // 0xA0
	internal FieldBuilder[] fields; // 0xB0
	internal EventBuilder[] events; // 0xC0
	private CustomAttributeBuilder[] cattrs; // 0xD0
	internal TypeBuilder[] subtypes; // 0x10
	internal TypeAttributes attrs; // 0x10
	private int table_idx; // 0x18
	private ModuleBuilder pmodule; // 0x28
	private int class_size; // 0x38
	private PackingSize packing_size; // 0x44
	private IntPtr generic_container; // 0x10
	private GenericTypeParameterBuilder[] generic_params; // 0x20
	private RefEmitPermissionSet[] permissions; // 0x30
	private Type created; // 0x40
	private string fullname; // 0x50
	private bool createTypeCalled; // 0x10
	private Type underlying_type; // 0x10
	private static Dictionary`2<string, int> <>f__switch$map1E; // 0x10

	// Properties
	public override Assembly Assembly { get; } // 0x00000001801C3A10 
	public override string AssemblyQualifiedName { get; } // 0x00000001801C3970 
	public override Type BaseType { get; } // 0x000000018013BF80 
	public override Type DeclaringType { get; } // 0x00000001801146E0 
	public override Type UnderlyingSystemType { get; } // 0x00000001801C3BB0 
	public override string FullName { get; } // 0x0000000180176B20 
	public override Guid GUID { get; } // 0x00000001801C3A50 
	public override Module Module { get; } // 0x000000018017D310 
	public override string Name { get; } // 0x00000001800EAEC0 
	public override string Namespace { get; } // 0x00000001800EAEB0 
	public PackingSize PackingSize { get; } // 0x00000001801C3B10 
	public int Size { get; } // 0x00000001801C3B20 
	public override Type ReflectedType { get; } // 0x00000001801146E0 
	public override RuntimeTypeHandle TypeHandle { get; } // 0x00000001801C3B30 
	public TypeToken TypeToken { get; } // 0x00000001801C3BA0 
	internal bool IsCompilerContext { get; } // 0x00000001801C3AD0 
	internal bool is_created { get; } // 0x00000001801C2300 
	public override bool ContainsGenericParameters { get; } // 0x00000001801C3A40 
	public override bool IsGenericParameter { get; } // 0x00000001801C3B00 
	public override GenericParameterAttributes GenericParameterAttributes { get; } // 0x00000001800EA8C0 
	public override bool IsGenericTypeDefinition { get; } // 0x00000001801C3A40 
	public override bool IsGenericType { get; } // 0x00000001801C3A40 
	public override int GenericParameterPosition { get; } // 0x00000001800EA8C0 
	public override MethodBase DeclaringMethod { get; } // 0x00000001800EA8C0 

	// Constructors
	internal TypeBuilder(ModuleBuilder mb, TypeAttributes attr, int table_idx); // 0x00000001801C32D0
	internal TypeBuilder(ModuleBuilder mb, string name, TypeAttributes attr, Type parent, Type[] interfaces, PackingSize packing_size, int type_size, Type nesting_type); // 0x00000001801C3410

	// Methods
	private void System.Runtime.InteropServices._TypeBuilder.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x00000001801C3190
	private void System.Runtime.InteropServices._TypeBuilder.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x00000001801C3230
	private void System.Runtime.InteropServices._TypeBuilder.GetTypeInfoCount(out uint pcTInfo); // 0x00000001801C31E0
	private void System.Runtime.InteropServices._TypeBuilder.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x00000001801C3280
	protected override TypeAttributes GetAttributeFlagsImpl(); // 0x00000001801BFAA0
	private void setup_internal_class(TypeBuilder tb); // 0x00000001801C3EA0
	private void create_internal_class(TypeBuilder tb); // 0x00000001801C3950
	private void setup_generic_class(); // 0x00000001801C3E90
	private void create_generic_class(); // 0x00000001801C3940
	private EventInfo get_event_info(EventBuilder eb); // 0x00000001801C3C80
	private string GetFullName(); // 0x00000001801C0B00
	public void AddDeclarativeSecurity(SecurityAction action, PermissionSet pset); // 0x00000001800EA7B0
	public void AddInterfaceImplementation(Type interfaceType); // 0x00000001801BCB60
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x00000001801BFAB0
	public override bool IsDefined(Type attributeType, bool inherit); // 0x00000001801C2310
	public override object[] GetCustomAttributes(bool inherit); // 0x00000001801C0290
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00000001801C0200
	public TypeBuilder DefineNestedType(string name); // 0x00000001801BE940
	public TypeBuilder DefineNestedType(string name, TypeAttributes attr); // 0x00000001801BE990
	public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent); // 0x00000001801BE8E0
	private TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent, Type[] interfaces, PackingSize packSize, int typeSize); // 0x00000001801BE9E0
	public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent, Type[] interfaces); // 0x00000001801BE910
	public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent, int typeSize); // 0x00000001801BEC70
	public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent, PackingSize packSize); // 0x00000001801BECA0
	public ConstructorBuilder DefineConstructor(MethodAttributes attributes, CallingConventions callingConvention, Type[] parameterTypes); // 0x00000001801BD8D0
	public ConstructorBuilder DefineConstructor(MethodAttributes attributes, CallingConventions callingConvention, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers); // 0x00000001801BD6B0
	public ConstructorBuilder DefineDefaultConstructor(MethodAttributes attributes); // 0x00000001801BD8F0
	private void append_method(MethodBuilder mb); // 0x00000001801C3680
	public MethodBuilder DefineMethod(string name, MethodAttributes attributes, Type returnType, Type[] parameterTypes); // 0x00000001801BE6B0
	public MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes); // 0x00000001801BE710
	public MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers); // 0x00000001801BE4A0
	public MethodBuilder DefinePInvokeMethod(string name, string dllName, string entryName, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, CallingConvention nativeCallConv, CharSet nativeCharSet); // 0x00000001801BF0A0
	public MethodBuilder DefinePInvokeMethod(string name, string dllName, string entryName, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers, CallingConvention nativeCallConv, CharSet nativeCharSet); // 0x00000001801BEEA0
	public MethodBuilder DefinePInvokeMethod(string name, string dllName, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, CallingConvention nativeCallConv, CharSet nativeCharSet); // 0x00000001801BECD0
	public MethodBuilder DefineMethod(string name, MethodAttributes attributes); // 0x00000001801BE6E0
	public MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callingConvention); // 0x00000001801BE690
	public void DefineMethodOverride(MethodInfo methodInfoBody, MethodInfo methodInfoDeclaration); // 0x00000001801BE360
	public FieldBuilder DefineField(string fieldName, Type type, FieldAttributes attributes); // 0x00000001801BDD80
	public FieldBuilder DefineField(string fieldName, Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers, FieldAttributes attributes); // 0x00000001801BDDB0
	public PropertyBuilder DefineProperty(string name, PropertyAttributes attributes, Type returnType, Type[] parameterTypes); // 0x00000001801BF280
	public PropertyBuilder DefineProperty(string name, PropertyAttributes attributes, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers); // 0x00000001801BF2C0
	public ConstructorBuilder DefineTypeInitializer(); // 0x00000001801BF5A0
	private Type create_runtime_class(TypeBuilder tb); // 0x00000001801C3960
	private bool is_nested_in(Type t); // 0x00000001801C3DF0
	private bool has_ctor_method(); // 0x00000001801C3CC0
	public Type CreateType(); // 0x00000001801BCD90
	internal void GenerateDebugInfo(ISymbolWriter symbolWriter); // 0x00000001801BF820
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr); // 0x00000001801C0140
	internal ConstructorInfo[] GetConstructorsInternal(BindingFlags bindingAttr); // 0x00000001801BFFD0
	public override Type GetElementType(); // 0x00000001801C0310
	public override EventInfo GetEvent(string name, BindingFlags bindingAttr); // 0x00000001801C0360
	public override EventInfo[] GetEvents(); // 0x00000001801C05D0
	public override EventInfo[] GetEvents(BindingFlags bindingAttr); // 0x00000001801C0680
	internal EventInfo[] GetEvents_internal(BindingFlags bindingAttr); // 0x00000001801C03F0
	public override FieldInfo GetField(string name, BindingFlags bindingAttr); // 0x00000001801C0740
	public override FieldInfo[] GetFields(BindingFlags bindingAttr); // 0x00000001801C0950
	public override Type GetInterface(string name, bool ignoreCase); // 0x00000001801C0D70
	public override Type[] GetInterfaces(); // 0x00000001801C0E00
	public override MemberInfo[] GetMember(string name, MemberTypes type, BindingFlags bindingAttr); // 0x00000001801C0ED0
	public override MemberInfo[] GetMembers(BindingFlags bindingAttr); // 0x00000001801C0F70
	private MethodInfo[] GetMethodsByName(string name, BindingFlags bindingAttr, bool ignoreCase, Type reflected_type); // 0x00000001801C16F0
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr); // 0x00000001801C1B10
	protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x00000001801C0FE0
	public override Type GetNestedType(string name, BindingFlags bindingAttr); // 0x00000001801C1B40
	public override Type[] GetNestedTypes(BindingFlags bindingAttr); // 0x00000001801C1CC0
	public override PropertyInfo[] GetProperties(BindingFlags bindingAttr); // 0x00000001801C1E90
	protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x00000001801C2080
	protected override bool HasElementTypeImpl(); // 0x00000001801C20C0
	public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters); // 0x00000001801C20E0
	protected override bool IsArrayImpl(); // 0x000000018011A0F0
	protected override bool IsByRefImpl(); // 0x000000018011A0F0
	protected override bool IsCOMObjectImpl(); // 0x00000001801C22F0
	protected override bool IsPointerImpl(); // 0x000000018011A0F0
	protected override bool IsPrimitiveImpl(); // 0x000000018011A0F0
	protected override bool IsValueTypeImpl(); // 0x00000001801C2560
	public override Type MakeArrayType(); // 0x00000001801C2670
	public override Type MakeArrayType(int rank); // 0x00000001801C26D0
	public override Type MakeByRefType(); // 0x00000001801C2770
	public override Type MakeGenericType(Type[] typeArguments); // 0x0000000180160090
	public override Type MakePointerType(); // 0x00000001801C27D0
	internal void SetCharSet(TypeAttributes ta); // 0x00000001801C2830
	public void SetCustomAttribute(CustomAttributeBuilder customBuilder); // 0x00000001801C2840
	public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute); // 0x00000001801C2FF0
	public EventBuilder DefineEvent(string name, EventAttributes attributes, Type eventtype); // 0x00000001801BDB20
	public FieldBuilder DefineInitializedData(string name, byte[] data, FieldAttributes attributes); // 0x00000001801BE290
	public FieldBuilder DefineUninitializedData(string name, int size, FieldAttributes attributes); // 0x00000001801BF5D0
	public void SetParent(Type parent); // 0x00000001801C3070
	internal int get_next_table_index(object obj, int table, bool inc); // 0x00000001801C3C90
	public override InterfaceMapping GetInterfaceMap(Type interfaceType); // 0x00000001801C0CC0
	private Exception not_supported(); // 0x00000001801C3E40
	private void check_not_created(); // 0x00000001801C38D0
	private void check_created(); // 0x00000001801C3780
	private void check_name(string argName, string name); // 0x00000001801C37D0
	public override string ToString(); // 0x0000000180176B20
	public override bool IsAssignableFrom(Type c); // 0x00000001801C2180
	public override bool IsSubclassOf(Type c); // 0x00000001801C23E0
	internal bool IsAssignableTo(Type c); // 0x00000001801C2190
	public bool IsCreated(); // 0x00000001801C2300
	public override Type[] GetGenericArguments(); // 0x00000001801C0BD0
	public override Type GetGenericTypeDefinition(); // 0x00000001801C0C50
	public GenericTypeParameterBuilder[] DefineGenericParameters(string[] names); // 0x00000001801BE0A0
	public static ConstructorInfo GetConstructor(Type type, ConstructorInfo constructor); // 0x00000001801BFF00
	private static bool IsValidGetMethodType(Type type); // 0x00000001801C23F0
	public static MethodInfo GetMethod(Type type, MethodInfo method); // 0x00000001801C1430
	public static FieldInfo GetField(Type type, FieldInfo field); // 0x00000001801C08B0
}

// Namespace: System.Reflection.Emit
[Serializable]
public struct TypeToken // TypeDefIndex: 545
{
	// Fields
	internal int tokValue; // 0x10
	public static readonly TypeToken Empty; // 0x10

	// Properties
	public int Token { get; } // 0x00000001800034B0 

	// Constructors
	internal TypeToken(int val); // 0x0000000180006A40
	private static TypeToken(); // 0x00000001801C3EB0

	// Methods
	public override bool Equals(object obj); // 0x00000001800087E0
	public bool Equals(TypeToken obj); // 0x0000000180006A30
	public override int GetHashCode(); // 0x00000001800034B0
	public static bool op_Equality(TypeToken a, TypeToken b); // 0x00000001801C3EF0
	public static bool op_Inequality(TypeToken a, TypeToken b); // 0x00000001801C3F60
}

// Namespace: System.Reflection.Emit
[Serializable]
public sealed class UnmanagedMarshal // TypeDefIndex: 546
{
	// Fields
	private int count; // 0x10
	private UnmanagedType t; // 0x18
	private UnmanagedType tbase; // 0x28
	private string guid; // 0x38
	private string mcookie; // 0x44
	private string marshaltype; // 0x10
	private Type marshaltyperef; // 0x20
	private int param_num; // 0x30
	private bool has_size; // 0x40

	// Properties
	public UnmanagedType BaseType { get; } // 0x00000001801C44B0 
	public int ElementCount { get; } // 0x00000001800ECD10 
	public UnmanagedType GetUnmanagedType { get; } // 0x0000000180156360 
	public Guid IIDGuid { get; } // 0x00000001801C4520 

	// Constructors
	private UnmanagedMarshal(UnmanagedType maint, int cnt); // 0x00000001801C4470
	private UnmanagedMarshal(UnmanagedType maint, UnmanagedType elemt); // 0x00000001801C4430

	// Methods
	public static UnmanagedMarshal DefineByValArray(int elemCount); // 0x00000001801C3FE0
	public static UnmanagedMarshal DefineByValTStr(int elemCount); // 0x00000001801C4040
	public static UnmanagedMarshal DefineLPArray(UnmanagedType elemType); // 0x00000001801C4260
	public static UnmanagedMarshal DefineSafeArray(UnmanagedType elemType); // 0x00000001801C42C0
	public static UnmanagedMarshal DefineUnmanagedMarshal(UnmanagedType unmanagedType); // 0x00000001801C4320
	public static UnmanagedMarshal DefineCustom(Type typeref, string cookie, string mtype, Guid id); // 0x00000001801C40A0
	internal static UnmanagedMarshal DefineLPArrayInternal(UnmanagedType elemType, int sizeConst, int sizeParamIndex); // 0x00000001801C41E0
	internal MarshalAsAttribute ToMarshalAsAttribute(); // 0x00000001801C4380
}

// Namespace: System.Reflection
[Serializable]
public sealed class AmbiguousMatchException : SystemException // TypeDefIndex: 547
{
	// Constructors
	public AmbiguousMatchException(); // 0x000000018010E190
	public AmbiguousMatchException(string message); // 0x000000018010E1E0
	public AmbiguousMatchException(string message, Exception inner); // 0x000000018010E1D0
	internal AmbiguousMatchException(SerializationInfo info, StreamingContext context); // 0x000000018010E170

}

// Namespace: System.Reflection
[Serializable]
public class Assembly : ICustomAttributeProvider, _Assembly // TypeDefIndex: 548
{
	// Fields
	private IntPtr _mono_assembly; // 0x10
	private ResolveEventHolder resolve_event_holder; // 0x20
	private Evidence _evidence; // 0x30
	internal PermissionSet _minimum; // 0x40
	internal PermissionSet _optional; // 0x50
	internal PermissionSet _refuse; // 0x10
	private PermissionSet _granted; // 0x10
	private PermissionSet _denied; // 0x10
	private bool fromByteArray; // 0x10
	private string assemblyName; // 0x10

	// Properties
	public virtual string CodeBase { get; } // 0x00000001801171A0 
	public virtual string EscapedCodeBase { get; } // 0x0000000180117330 
	public virtual string FullName { get; } // 0x0000000180117350 
	public virtual MethodInfo EntryPoint { get; } // 0x0000000180117320 
	public virtual Evidence Evidence { get; } // 0x0000000180117340 
	public bool GlobalAssemblyCache { get; } // 0x0000000180113770 
	internal bool FromByteArray { set; } // 0x0000000180117630
	public virtual string Location { get; } // 0x00000001801174E0 
	public virtual string ImageRuntimeVersion { get; } // 0x00000001801136D0 
	public long HostContext { get; } // 0x00000001800EA8C0 
	public Module ManifestModule { get; } // 0x0000000180117550 
	public virtual bool ReflectionOnly { get; } // 0x0000000180113770 
	internal PermissionSet GrantedPermissionSet { get; } // 0x0000000180117370 
	internal PermissionSet DeniedPermissionSet { get; } // 0x00000001801171B0 

	// Events
	public event ModuleResolveEventHandler ModuleResolve {
		add; // 0x0000000180117110
		remove; // 0x00000001801175A0
	}

	// Constructors
	internal Assembly(); // 0x00000001801170D0

	// Methods
	private string get_code_base(bool escaped); // 0x0000000180114FB0
	private string get_fullname(); // 0x0000000180117570
	private string get_location(); // 0x0000000180117580
	private string InternalImageRuntimeVersion(); // 0x00000001801136D0
	private string GetCodeBase(bool escaped); // 0x0000000180114FB0
	internal Evidence UnprotectedGetEvidence(); // 0x0000000180116FC0
	private bool get_global_assembly_cache(); // 0x0000000180113770
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0000000180115F20
	public virtual bool IsDefined(Type attributeType, bool inherit); // 0x0000000180116400
	public virtual object[] GetCustomAttributes(bool inherit); // 0x0000000180115040
	public virtual object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x0000000180114FC0
	private object GetFilesInternal(string name, bool getResourceModules); // 0x00000001801150B0
	public virtual FileStream[] GetFiles(); // 0x0000000180115230
	public virtual FileStream[] GetFiles(bool getResourceModules); // 0x0000000180115250
	public virtual FileStream GetFile(string name); // 0x0000000180115110
	internal IntPtr GetManifestResourceInternal(string name, out int size, out Module module); // 0x00000001801156C0
	public virtual Stream GetManifestResourceStream(string name); // 0x0000000180115800
	public virtual Stream GetManifestResourceStream(Type type, string name); // 0x00000001801156E0
	internal virtual Type[] GetTypes(bool exportedOnly); // 0x00000001801163D0
	public virtual Type[] GetTypes(); // 0x00000001801163B0
	public virtual Type[] GetExportedTypes(); // 0x00000001801150F0
	public virtual Type GetType(string name, bool throwOnError); // 0x0000000180116390
	public virtual Type GetType(string name); // 0x0000000180116290
	internal Type InternalGetType(Module module, string name, bool throwOnError, bool ignoreCase); // 0x00000001801163F0
	public Type GetType(string name, bool throwOnError, bool ignoreCase); // 0x00000001801162B0
	internal static void InternalGetAssemblyName(string assemblyFile, AssemblyName aname); // 0x00000001801163E0
	private static void FillName(Assembly ass, AssemblyName aname); // 0x0000000180114F10
	public virtual AssemblyName GetName(bool copiedName); // 0x0000000180115E80
	public virtual AssemblyName GetName(); // 0x0000000180115EF0
	internal virtual AssemblyName UnprotectedGetName(); // 0x0000000180117070
	public override string ToString(); // 0x0000000180116F90
	public static string CreateQualifiedName(string assemblyName, string typeName); // 0x0000000180114EA0
	public static Assembly GetAssembly(Type type); // 0x0000000180114F20
	public static Assembly GetEntryAssembly(); // 0x00000001801150B0
	public Assembly GetSatelliteAssembly(CultureInfo culture); // 0x0000000180115FF0
	public Assembly GetSatelliteAssembly(CultureInfo culture, Version version); // 0x0000000180116270
	internal Assembly GetSatelliteAssemblyNoThrow(CultureInfo culture, Version version); // 0x0000000180115FD0
	private Assembly GetSatelliteAssembly(CultureInfo culture, Version version, bool throwOnError); // 0x0000000180116010
	private static Assembly LoadFrom(string assemblyFile, bool refonly); // 0x00000001801168E0
	public static Assembly LoadFrom(string assemblyFile); // 0x00000001801167C0
	public static Assembly LoadFrom(string assemblyFile, Evidence securityEvidence); // 0x00000001801167C0
	public static Assembly LoadFrom(string assemblyFile, Evidence securityEvidence, byte[] hashValue, AssemblyHashAlgorithm hashAlgorithm); // 0x00000001801167D0
	public static Assembly LoadFile(string path, Evidence securityEvidence); // 0x00000001801166D0
	public static Assembly LoadFile(string path); // 0x00000001801166D0
	public static Assembly Load(string assemblyString); // 0x0000000180116BE0
	public static Assembly Load(string assemblyString, Evidence assemblySecurity); // 0x0000000180116B60
	public static Assembly Load(AssemblyName assemblyRef); // 0x0000000180116CA0
	public static Assembly Load(AssemblyName assemblyRef, Evidence assemblySecurity); // 0x0000000180116B20
	public static Assembly Load(byte[] rawAssembly); // 0x0000000180116C70
	public static Assembly Load(byte[] rawAssembly, byte[] rawSymbolStore); // 0x0000000180116BA0
	public static Assembly Load(byte[] rawAssembly, byte[] rawSymbolStore, Evidence securityEvidence); // 0x0000000180116C10
	public static Assembly ReflectionOnlyLoad(byte[] rawAssembly); // 0x0000000180116D50
	public static Assembly ReflectionOnlyLoad(string assemblyString); // 0x0000000180116DA0
	public static Assembly ReflectionOnlyLoadFrom(string assemblyFile); // 0x0000000180116CE0
	public static Assembly LoadWithPartialName(string partialName); // 0x0000000180116AB0
	public Module LoadModule(string moduleName, byte[] rawModule); // 0x00000001801168F0
	public Module LoadModule(string moduleName, byte[] rawModule, byte[] rawSymbolStore); // 0x0000000180116940
	private static Assembly load_with_partial_name(string name, Evidence e); // 0x0000000180117590
	public static Assembly LoadWithPartialName(string partialName, Evidence securityEvidence); // 0x0000000180116990
	internal static Assembly LoadWithPartialName(string partialName, Evidence securityEvidence, bool oldBehavior); // 0x0000000180116A00
	public object CreateInstance(string typeName); // 0x0000000180114CD0
	public object CreateInstance(string typeName, bool ignoreCase); // 0x0000000180114CE0
	public object CreateInstance(string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes); // 0x0000000180114DB0
	public Module[] GetLoadedModules(); // 0x0000000180115590
	public Module[] GetLoadedModules(bool getResourceModules); // 0x00000001801155A0
	public Module[] GetModules(); // 0x0000000180115590
	public Module GetModule(string name); // 0x0000000180115B60
	internal virtual Module[] GetModulesInternal(); // 0x0000000180115CF0
	public Module[] GetModules(bool getResourceModules); // 0x0000000180115D00
	internal string[] GetNamespaces(); // 0x0000000180115F10
	public virtual string[] GetManifestResourceNames(); // 0x00000001801156D0
	public static Assembly GetExecutingAssembly(); // 0x00000001801150C0
	public static Assembly GetCallingAssembly(); // 0x0000000180114FA0
	public AssemblyName[] GetReferencedAssemblies(); // 0x0000000180115FC0
	private bool GetManifestResourceInfoInternal(string name, ManifestResourceInfo info); // 0x00000001801155C0
	public virtual ManifestResourceInfo GetManifestResourceInfo(string resourceName); // 0x00000001801155D0
	internal static int MonoDebugger_GetMethodToken(MethodBase method); // 0x0000000180116CD0
	internal virtual Module GetManifestModule(); // 0x00000001801155B0
	internal Module GetManifestModuleInternal(); // 0x00000001801155B0
	internal void Resolve(); // 0x0000000180116DE0
	internal static bool LoadPermissions(Assembly a, IntPtr minimum, int minLength, IntPtr optional, int optLength, IntPtr refused, int refLength); // 0x0000000180113770
	private void LoadAssemblyPermissions(); // 0x0000000180116480
	virtual Type System.Runtime.InteropServices._Assembly.GetType(); // 0x0000000180116F80
}

// Namespace: 
internal class ResolveEventHolder // TypeDefIndex: 549
{
	// Fields
	private ModuleResolveEventHandler ModuleResolve; // 0x10

	// Events
	public event ModuleResolveEventHandler ModuleResolve {
		add; // 0x0000000180125930
		remove; // 0x00000001801259B0
	}

	// Constructors
	public ResolveEventHolder(); // 0x00000001800EA7B0

}

// Namespace: 
private class ResourceCloseHandler // TypeDefIndex: 550
{
	// Fields
	private Module module; // 0x10

	// Constructors
	public ResourceCloseHandler(Module module); // 0x0000000180114C30

	// Methods
	public void OnClose(object sender, EventArgs e); // 0x0000000180125A30
}

// Namespace: System.Reflection
public sealed class AssemblyAlgorithmIdAttribute : Attribute // TypeDefIndex: 551
{
	// Fields
	private uint id; // 0x10

	// Properties
	public uint AlgorithmId { get; } // 0x00000001800ECD10 

	// Constructors
	public AssemblyAlgorithmIdAttribute(AssemblyHashAlgorithm algorithmId); // 0x000000018010E510
	public AssemblyAlgorithmIdAttribute(uint algorithmId); // 0x000000018010E510

}

// Namespace: System.Reflection
public sealed class AssemblyCompanyAttribute : Attribute // TypeDefIndex: 552
{
	// Fields
	private string name; // 0x10

	// Properties
	public string Company { get; } // 0x00000001800E20D0 

	// Constructors
	public AssemblyCompanyAttribute(string company); // 0x00000001801137E0

}

// Namespace: System.Reflection
public sealed class AssemblyConfigurationAttribute : Attribute // TypeDefIndex: 553
{
	// Fields
	private string name; // 0x10

	// Properties
	public string Configuration { get; } // 0x00000001800E20D0 

	// Constructors
	public AssemblyConfigurationAttribute(string configuration); // 0x00000001801137E0

}

// Namespace: System.Reflection
public sealed class AssemblyCopyrightAttribute : Attribute // TypeDefIndex: 554
{
	// Fields
	private string name; // 0x10

	// Properties
	public string Copyright { get; } // 0x00000001800E20D0 

	// Constructors
	public AssemblyCopyrightAttribute(string copyright); // 0x00000001801137E0

}

// Namespace: System.Reflection
public sealed class AssemblyDefaultAliasAttribute : Attribute // TypeDefIndex: 555
{
	// Fields
	private string name; // 0x10

	// Properties
	public string DefaultAlias { get; } // 0x00000001800E20D0 

	// Constructors
	public AssemblyDefaultAliasAttribute(string defaultAlias); // 0x00000001801137E0

}

// Namespace: System.Reflection
public sealed class AssemblyDelaySignAttribute : Attribute // TypeDefIndex: 556
{
	// Fields
	private bool delay; // 0x10

	// Properties
	public bool DelaySign { get; } // 0x0000000180113840 

	// Constructors
	public AssemblyDelaySignAttribute(bool delaySign); // 0x0000000180113810

}

// Namespace: System.Reflection
public sealed class AssemblyDescriptionAttribute : Attribute // TypeDefIndex: 557
{
	// Fields
	private string name; // 0x10

	// Properties
	public string Description { get; } // 0x00000001800E20D0 

	// Constructors
	public AssemblyDescriptionAttribute(string description); // 0x00000001801137E0

}

// Namespace: System.Reflection
public sealed class AssemblyFileVersionAttribute : Attribute // TypeDefIndex: 558
{
	// Fields
	private string name; // 0x10

	// Properties
	public string Version { get; } // 0x00000001800E20D0 

	// Constructors
	public AssemblyFileVersionAttribute(string version); // 0x0000000180113850

}

// Namespace: System.Reflection
public sealed class AssemblyFlagsAttribute : Attribute // TypeDefIndex: 559
{
	// Fields
	private uint flags; // 0x10

	// Properties
	public uint Flags { get; } // 0x00000001800ECD10 
	public int AssemblyFlags { get; } // 0x00000001800ECD10 

	// Constructors
	public AssemblyFlagsAttribute(uint flags); // 0x000000018010E510
	public AssemblyFlagsAttribute(int assemblyFlags); // 0x000000018010E510
	public AssemblyFlagsAttribute(AssemblyNameFlags assemblyFlags); // 0x000000018010E510

}

// Namespace: System.Reflection
public sealed class AssemblyInformationalVersionAttribute : Attribute // TypeDefIndex: 560
{
	// Fields
	private string name; // 0x10

	// Properties
	public string InformationalVersion { get; } // 0x00000001800E20D0 

	// Constructors
	public AssemblyInformationalVersionAttribute(string informationalVersion); // 0x00000001801137E0

}

// Namespace: System.Reflection
public sealed class AssemblyKeyFileAttribute : Attribute // TypeDefIndex: 561
{
	// Fields
	private string name; // 0x10

	// Properties
	public string KeyFile { get; } // 0x00000001800E20D0 

	// Constructors
	public AssemblyKeyFileAttribute(string keyFile); // 0x00000001801137E0

}

// Namespace: System.Reflection
public sealed class AssemblyKeyNameAttribute : Attribute // TypeDefIndex: 562
{
	// Fields
	private string name; // 0x10

	// Properties
	public string KeyName { get; } // 0x00000001800E20D0 

	// Constructors
	public AssemblyKeyNameAttribute(string keyName); // 0x00000001801137E0

}

// Namespace: System.Reflection
[Serializable]
public sealed class AssemblyName : ICloneable, ISerializable, _AssemblyName, IDeserializationCallback // TypeDefIndex: 563
{
	// Fields
	private string name; // 0x10
	private string codebase; // 0x20
	private int major; // 0x28
	private int minor; // 0x30
	private int build; // 0x3C
	private int revision; // 0x48
	private CultureInfo cultureinfo; // 0x58
	private AssemblyNameFlags flags; // 0x68
	private AssemblyHashAlgorithm hashalg; // 0x10
	private StrongNameKeyPair keypair; // 0x00
	private byte[] publicKey; // 0x00
	private byte[] keyToken; // 0x10
	private AssemblyVersionCompatibility versioncompat; // 0x10
	private Version version; // 0x00
	private ProcessorArchitecture processor_architecture; // 0x10

	// Properties
	public ProcessorArchitecture ProcessorArchitecture { get; set; } // 0x0000000180114BC0 0x0000000180114C40
	public string Name { get; set; } // 0x00000001800E20D0 0x0000000180114C30
	public string CodeBase { get; set; } // 0x00000001800EAEC0 0x00000001800EAEE0
	public string EscapedCodeBase { get; } // 0x00000001801146F0 
	public CultureInfo CultureInfo { get; set; } // 0x00000001801146E0 0x0000000180114BF0
	public AssemblyNameFlags Flags { get; set; } // 0x0000000180114770 0x0000000180114C00
	public string FullName { get; } // 0x0000000180114780 
	public AssemblyHashAlgorithm HashAlgorithm { get; set; } // 0x0000000180114A80 0x0000000180114C10
	public StrongNameKeyPair KeyPair { get; set; } // 0x0000000180114BB0 0x0000000180114C20
	public Version Version { get; set; } // 0x0000000180114BE0 0x0000000180114C60
	public AssemblyVersionCompatibility VersionCompatibility { get; set; } // 0x0000000180114BD0 0x0000000180114C50
	private bool IsPublicKeyValid { get; } // 0x0000000180114A90 

	// Constructors
	public AssemblyName(); // 0x0000000180114270
	public AssemblyName(string assemblyName); // 0x0000000180114280
	internal AssemblyName(SerializationInfo si, StreamingContext sc); // 0x0000000180114370

	// Methods
	private void System.Runtime.InteropServices._AssemblyName.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x00000001801140E0
	private void System.Runtime.InteropServices._AssemblyName.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x0000000180114180
	private void System.Runtime.InteropServices._AssemblyName.GetTypeInfoCount(out uint pcTInfo); // 0x0000000180114130
	private void System.Runtime.InteropServices._AssemblyName.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x00000001801141D0
	private static bool ParseName(AssemblyName aname, string assemblyName); // 0x0000000180113F90
	public override string ToString(); // 0x0000000180114220
	public byte[] GetPublicKey(); // 0x0000000180113E60
	public byte[] GetPublicKeyToken(); // 0x0000000180113DB0
	private byte[] InternalGetPublicKeyToken(); // 0x0000000180113E70
	private byte[] ComputePublicKeyToken(); // 0x0000000180113A40
	public static bool ReferenceMatchesDefinition(AssemblyName reference, AssemblyName definition); // 0x0000000180113FA0
	public void SetPublicKey(byte[] publicKey); // 0x00000001801140C0
	public void SetPublicKeyToken(byte[] publicKeyToken); // 0x00000001801140B0
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0000000180113BB0
	public object Clone(); // 0x0000000180113990
	public void OnDeserialization(object sender); // 0x0000000180113F20
	public static AssemblyName GetAssemblyName(string assemblyFile); // 0x0000000180113AF0
}

// Namespace: System.Reflection
[Serializable]
public enum AssemblyNameFlags // TypeDefIndex: 564
{
	None = 0,
	PublicKey = 1,
	Retargetable = 256,
	EnableJITcompileOptimizer = 16384,
	EnableJITcompileTracking = 32768
}

// Namespace: System.Reflection
public class AssemblyNameProxy : MarshalByRefObject // TypeDefIndex: 565
{
	// Constructors
	public AssemblyNameProxy(); // 0x00000001800EAC90

	// Methods
	public AssemblyName GetAssemblyName(string assemblyFile); // 0x00000001801138D0
}

// Namespace: System.Reflection
public sealed class AssemblyProductAttribute : Attribute // TypeDefIndex: 566
{
	// Fields
	private string name; // 0x10

	// Properties
	public string Product { get; } // 0x00000001800E20D0 

	// Constructors
	public AssemblyProductAttribute(string product); // 0x00000001801137E0

}

// Namespace: System.Reflection
public sealed class AssemblyTitleAttribute : Attribute // TypeDefIndex: 567
{
	// Fields
	private string name; // 0x10

	// Properties
	public string Title { get; } // 0x00000001800E20D0 

	// Constructors
	public AssemblyTitleAttribute(string title); // 0x00000001801137E0

}

// Namespace: System.Reflection
public sealed class AssemblyTrademarkAttribute : Attribute // TypeDefIndex: 568
{
	// Fields
	private string name; // 0x10

	// Properties
	public string Trademark { get; } // 0x00000001800E20D0 

	// Constructors
	public AssemblyTrademarkAttribute(string trademark); // 0x00000001801137E0

}

// Namespace: System.Reflection
[Serializable]
public abstract class Binder // TypeDefIndex: 569
{
	// Fields
	private static Binder default_binder; // 0x00

	// Properties
	internal static Binder DefaultBinder { get; } // 0x0000000180117C10 

	// Constructors
	protected Binder(); // 0x00000001800EA7B0
	private static Binder(); // 0x0000000180117B80

	// Methods
	public abstract FieldInfo BindToField(BindingFlags bindingAttr, FieldInfo[] match, object value, CultureInfo culture);
	public abstract MethodBase BindToMethod(BindingFlags bindingAttr, MethodBase[] match, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] names, out object state);
	public abstract object ChangeType(object value, Type type, CultureInfo culture);
	public abstract void ReorderArgumentArray(object[] args, object state);
	public abstract MethodBase SelectMethod(BindingFlags bindingAttr, MethodBase[] match, Type[] types, ParameterModifier[] modifiers);
	public abstract PropertyInfo SelectProperty(BindingFlags bindingAttr, PropertyInfo[] match, Type returnType, Type[] indexes, ParameterModifier[] modifiers);
	internal static bool ConvertArgs(Binder binder, object[] args, ParameterInfo[] pinfo, CultureInfo culture); // 0x0000000180117640
	internal static int GetDerivedLevel(Type type); // 0x0000000180117B00
	internal static MethodBase FindMostDerivedMatch(MethodBase[] match); // 0x0000000180117830
}

// Namespace: 
internal sealed class Default : Binder // TypeDefIndex: 570
{
	// Constructors
	public Default(); // 0x0000000180121100

	// Methods
	public override FieldInfo BindToField(BindingFlags bindingAttr, FieldInfo[] match, object value, CultureInfo culture); // 0x000000018011FB10
	public override MethodBase BindToMethod(BindingFlags bindingAttr, MethodBase[] match, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] names, out object state); // 0x000000018011FC20
	private void ReorderParameters(string[] names, object[] args, MethodBase selected); // 0x0000000180120760
	private static bool IsArrayAssignable(Type object_type, Type target_type); // 0x00000001801206B0
	public override object ChangeType(object value, Type type, CultureInfo culture); // 0x000000018011FE00
	public override void ReorderArgumentArray(object[] args, object state); // 0x00000001800EA7B0
	private static bool check_type(Type from, Type to); // 0x00000001801213B0
	private static bool check_arguments(Type[] types, ParameterInfo[] args, bool allowByRefMatch); // 0x0000000180121150
	public override MethodBase SelectMethod(BindingFlags bindingAttr, MethodBase[] match, Type[] types, ParameterModifier[] modifiers); // 0x0000000180120E40
	private MethodBase SelectMethod(BindingFlags bindingAttr, MethodBase[] match, Type[] types, ParameterModifier[] modifiers, bool allowByRefMatch); // 0x00000001801209A0
	private MethodBase GetBetterMethod(MethodBase m1, MethodBase m2, Type[] types); // 0x0000000180120380
	private int CompareCloserType(Type t1, Type t2); // 0x0000000180120150
	public override PropertyInfo SelectProperty(BindingFlags bindingAttr, PropertyInfo[] match, Type returnType, Type[] indexes, ParameterModifier[] modifiers); // 0x0000000180120E70
	private static int check_arguments_with_score(Type[] types, ParameterInfo[] args); // 0x00000001801212D0
	private static int check_type_with_score(Type from, Type to); // 0x0000000180121980
}

// Namespace: System.Reflection
[Serializable]
public enum BindingFlags // TypeDefIndex: 571
{
	Default = 0,
	IgnoreCase = 1,
	DeclaredOnly = 2,
	Instance = 4,
	Static = 8,
	Public = 16,
	NonPublic = 32,
	FlattenHierarchy = 64,
	InvokeMethod = 256,
	CreateInstance = 512,
	GetField = 1024,
	SetField = 2048,
	GetProperty = 4096,
	SetProperty = 8192,
	PutDispProperty = 16384,
	PutRefDispProperty = 32768,
	ExactBinding = 65536,
	SuppressChangeType = 131072,
	OptionalParamBinding = 262144,
	IgnoreReturn = 16777216
}

// Namespace: System.Reflection
[Serializable]
public enum CallingConventions // TypeDefIndex: 572
{
	Standard = 1,
	VarArgs = 2,
	Any = 3,
	HasThis = 32,
	ExplicitThis = 64
}

// Namespace: System.Reflection
[Serializable]
public abstract class ConstructorInfo : MethodBase, _ConstructorInfo // TypeDefIndex: 573
{
	// Fields
	public static readonly string ConstructorName; // 0x00
	public static readonly string TypeConstructorName; // 0x10

	// Properties
	public override MemberTypes MemberType { get; } // 0x0000000180119A50 

	// Constructors
	protected ConstructorInfo(); // 0x00000001800EAC90
	private static ConstructorInfo(); // 0x00000001801199F0

	// Methods
	private void System.Runtime.InteropServices._ConstructorInfo.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x00000001801197E0
	private void System.Runtime.InteropServices._ConstructorInfo.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x0000000180119880
	private void System.Runtime.InteropServices._ConstructorInfo.GetTypeInfoCount(out uint pcTInfo); // 0x0000000180119830
	private void System.Runtime.InteropServices._ConstructorInfo.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x00000001801199A0
	private object System.Runtime.InteropServices._ConstructorInfo.Invoke_2(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x00000001801198D0
	private object System.Runtime.InteropServices._ConstructorInfo.Invoke_3(object obj, object[] parameters); // 0x00000001801198F0
	private object System.Runtime.InteropServices._ConstructorInfo.Invoke_4(BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x0000000180119900
	private object System.Runtime.InteropServices._ConstructorInfo.Invoke_5(object[] parameters); // 0x0000000180119920
	public object Invoke(object[] parameters); // 0x0000000180119760
	public abstract object Invoke(BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture);
	virtual Type System.Runtime.InteropServices._ConstructorInfo.GetType(); // 0x0000000180116F80
}

// Namespace: System.Reflection
[Serializable]
public sealed class CustomAttributeData // TypeDefIndex: 574
{
	// Fields
	private ConstructorInfo ctorInfo; // 0x10
	private IList`1<CustomAttributeTypedArgument> ctorArgs; // 0x20
	private IList`1<CustomAttributeNamedArgument> namedArgs; // 0x10

	// Properties
	public ConstructorInfo Constructor { get; } // 0x00000001800E20D0 
	public IList`1<CustomAttributeTypedArgument> ConstructorArguments { get; } // 0x00000001800EAEC0 
	public IList`1<CustomAttributeNamedArgument> NamedArguments { get; } // 0x00000001800EAEB0 

	// Constructors
	internal CustomAttributeData(ConstructorInfo ctorInfo, object[] ctorArgs, object[] namedArgs); // 0x000000018011E090

	// Methods
	public static IList`1<CustomAttributeData> GetCustomAttributes(Assembly target); // 0x000000018011D690
	public static IList`1<CustomAttributeData> GetCustomAttributes(MemberInfo target); // 0x000000018011D630
	public static IList`1<CustomAttributeData> GetCustomAttributes(Module target); // 0x000000018011D5D0
	public static IList`1<CustomAttributeData> GetCustomAttributes(ParameterInfo target); // 0x000000018011D570
	public override string ToString(); // 0x000000018011DAE0
	private static T[] UnboxValues(object[] values);
	public override bool Equals(object obj); // 0x000000018011D180
	public override int GetHashCode(); // 0x000000018011D6F0
}

// Namespace: System.Reflection
[Serializable]
public class CustomAttributeFormatException : FormatException // TypeDefIndex: 575
{
	// Constructors
	public CustomAttributeFormatException(); // 0x000000018011E170
	public CustomAttributeFormatException(string message); // 0x000000018011E1D0
	public CustomAttributeFormatException(string message, Exception inner); // 0x000000018011E1C0
	protected CustomAttributeFormatException(SerializationInfo info, StreamingContext context); // 0x000000018011E160

}

// Namespace: System.Reflection
[Serializable]
public struct CustomAttributeNamedArgument // TypeDefIndex: 576
{
	// Fields
	private CustomAttributeTypedArgument typedArgument; // 0x10
	private MemberInfo memberInfo; // 0x10

	// Properties
	public MemberInfo MemberInfo { get; } // 0x0000000180002050 
	public CustomAttributeTypedArgument TypedValue { get; } // 0x0000000180002680 

	// Constructors
	internal CustomAttributeNamedArgument(MemberInfo memberInfo, object typedArgument); // 0x0000000180002600

	// Methods
	public override string ToString(); // 0x00000001800025F0
	public override bool Equals(object obj); // 0x00000001800025D0
	public override int GetHashCode(); // 0x00000001800025E0
	public static bool op_Equality(CustomAttributeNamedArgument left, CustomAttributeNamedArgument right); // 0x000000018011E3D0
	public static bool op_Inequality(CustomAttributeNamedArgument left, CustomAttributeNamedArgument right); // 0x000000018011E440
}

// Namespace: System.Reflection
[Serializable]
public struct CustomAttributeTypedArgument // TypeDefIndex: 577
{
	// Fields
	private Type argumentType; // 0x10
	private object value; // 0x10

	// Properties
	public Type ArgumentType { get; } // 0x0000000180002060 
	public object Value { get; } // 0x0000000180002040 

	// Constructors
	internal CustomAttributeTypedArgument(Type argumentType, object value); // 0x0000000180002740

	// Methods
	public override string ToString(); // 0x0000000180002730
	public override bool Equals(object obj); // 0x00000001800026B0
	public override int GetHashCode(); // 0x00000001800026C0
	public static bool op_Equality(CustomAttributeTypedArgument left, CustomAttributeTypedArgument right); // 0x000000018011EA00
	public static bool op_Inequality(CustomAttributeTypedArgument left, CustomAttributeTypedArgument right); // 0x000000018011EA60
}

// Namespace: System.Reflection
[Serializable]
public enum EventAttributes // TypeDefIndex: 578
{
	None = 0,
	SpecialName = 512,
	ReservedMask = 1024,
	RTSpecialName = 1024
}

// Namespace: System.Reflection
[Serializable]
public abstract class EventInfo : MemberInfo, _EventInfo // TypeDefIndex: 579
{
	// Fields
	private AddEventAdapter cached_add_event; // 0x10

	// Properties
	public abstract EventAttributes Attributes { get; }
	public Type EventHandlerType { get; } // 0x00000001801ADDE0 
	public bool IsMulticast { get; } // 0x000000018010E420 
	public bool IsSpecialName { get; } // 0x00000001801ADE50 
	public override MemberTypes MemberType { get; } // 0x00000001801ADE70 

	// Constructors
	protected EventInfo(); // 0x00000001800E2000

	// Methods
	private void System.Runtime.InteropServices._EventInfo.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x00000001801ADCA0
	private void System.Runtime.InteropServices._EventInfo.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x00000001801ADD40
	private void System.Runtime.InteropServices._EventInfo.GetTypeInfoCount(out uint pcTInfo); // 0x00000001801ADCF0
	private void System.Runtime.InteropServices._EventInfo.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x00000001801ADD90
	public void AddEventHandler(object target, Delegate handler); // 0x00000001801AD4B0
	public MethodInfo GetAddMethod(); // 0x00000001801ADAB0
	public abstract MethodInfo GetAddMethod(bool nonPublic);
	public MethodInfo GetRaiseMethod(); // 0x0000000180115230
	public abstract MethodInfo GetRaiseMethod(bool nonPublic);
	public MethodInfo GetRemoveMethod(); // 0x00000001801ADB30
	public abstract MethodInfo GetRemoveMethod(bool nonPublic);
	public virtual MethodInfo[] GetOtherMethods(bool nonPublic); // 0x00000001801ADAF0
	public MethodInfo[] GetOtherMethods(); // 0x00000001801ADAD0
	public void RemoveEventHandler(object target, Delegate handler); // 0x00000001801ADB50
	private static void AddEventFrame(AddEvent`2<T, T> addEvent, object obj, object dele);
	private static void StaticAddEventAdapterFrame(StaticAddEvent`1<T> addEvent, object obj, object dele);
	private static AddEventAdapter CreateAddEventDelegate(MethodInfo method); // 0x00000001801AD6B0
	virtual Type System.Runtime.InteropServices._EventInfo.GetType(); // 0x0000000180199040
}

// Namespace: 
private delegate void AddEventAdapter(object _this, Delegate dele); // TypeDefIndex: 580; 0x00000001801AD090

// Namespace: 
private delegate void AddEvent`2(T _this, T dele); // TypeDefIndex: 581; 0x0000000000000000

// Namespace: 
private delegate void StaticAddEvent`1(T dele); // TypeDefIndex: 582; 0x0000000000000000

// Namespace: System.Reflection
public sealed class ExceptionHandlingClause // TypeDefIndex: 583
{
	// Fields
	internal Type catch_type; // 0x10
	internal int filter_offset; // 0x1C
	internal ExceptionHandlingClauseOptions flags; // 0x24
	internal int try_offset; // 0x2C
	internal int try_length; // 0x10
	internal int handler_offset; // 0x00
	internal int handler_length; // 0x00

	// Properties
	public Type CatchType { get; } // 0x00000001800E20D0 
	public int FilterOffset { get; } // 0x00000001800ED060 
	public ExceptionHandlingClauseOptions Flags { get; } // 0x00000001801AE2C0 
	public int HandlerLength { get; } // 0x0000000180118700 
	public int HandlerOffset { get; } // 0x0000000180119420 
	public int TryLength { get; } // 0x0000000180143130 
	public int TryOffset { get; } // 0x00000001800E2F70 

	// Constructors
	internal ExceptionHandlingClause(); // 0x00000001800E2000

	// Methods
	public override string ToString(); // 0x00000001801ADE80
}

// Namespace: System.Reflection
public enum ExceptionHandlingClauseOptions // TypeDefIndex: 584
{
	Clause = 0,
	Filter = 1,
	Finally = 2,
	Fault = 4
}

// Namespace: System.Reflection
[Serializable]
public enum FieldAttributes // TypeDefIndex: 585
{
	PrivateScope = 0,
	Private = 1,
	FamANDAssem = 2,
	Assembly = 3,
	Family = 4,
	FamORAssem = 5,
	Public = 6,
	FieldAccessMask = 7,
	Static = 16,
	InitOnly = 32,
	Literal = 64,
	NotSerialized = 128,
	HasFieldRVA = 256,
	SpecialName = 512,
	RTSpecialName = 1024,
	HasFieldMarshal = 4096,
	PinvokeImpl = 8192,
	HasDefault = 32768,
	ReservedMask = 38144
}

// Namespace: System.Reflection
[Serializable]
public abstract class FieldInfo : MemberInfo, _FieldInfo // TypeDefIndex: 586
{
	// Properties
	public abstract FieldAttributes Attributes { get; }
	public abstract RuntimeFieldHandle FieldHandle { get; }
	public abstract Type FieldType { get; }
	public override MemberTypes MemberType { get; } // 0x00000001801AECA0 
	public bool IsLiteral { get; } // 0x00000001801AEBB0 
	public bool IsStatic { get; } // 0x00000001801AEC80 
	public bool IsInitOnly { get; } // 0x00000001801AEB90 
	public bool IsPublic { get; } // 0x00000001801AEC30 
	public bool IsPrivate { get; } // 0x00000001801AEC10 
	public bool IsFamily { get; } // 0x00000001801AEB70 
	public bool IsAssembly { get; } // 0x00000001801AEAF0 
	public bool IsFamilyAndAssembly { get; } // 0x00000001801AEB20 
	public bool IsFamilyOrAssembly { get; } // 0x00000001801AEB40 
	public bool IsPinvokeImpl { get; } // 0x00000001801AEBF0 
	public bool IsSpecialName { get; } // 0x00000001801AEC60 
	public bool IsNotSerialized { get; } // 0x00000001801AEBD0 
	internal virtual UnmanagedMarshal UMarshal { get; } // 0x00000001801150B0 

	// Constructors
	protected FieldInfo(); // 0x00000001800E2000

	// Methods
	private void System.Runtime.InteropServices._FieldInfo.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x00000001801AE9B0
	private void System.Runtime.InteropServices._FieldInfo.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x00000001801AEA50
	private void System.Runtime.InteropServices._FieldInfo.GetTypeInfoCount(out uint pcTInfo); // 0x00000001801AEA00
	private void System.Runtime.InteropServices._FieldInfo.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x00000001801AEAA0
	public abstract object GetValue(object obj);
	public abstract void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, CultureInfo culture);
	public void SetValue(object obj, object value); // 0x00000001801AE980
	private static FieldInfo internal_from_handle_type(IntPtr field_handle, IntPtr type_handle); // 0x00000001801AECB0
	public static FieldInfo GetFieldFromHandle(RuntimeFieldHandle handle); // 0x00000001801AE390
	public static FieldInfo GetFieldFromHandle(RuntimeFieldHandle handle, RuntimeTypeHandle declaringType); // 0x00000001801AE2D0
	internal virtual int GetFieldOffset(); // 0x00000001801AE410
	public virtual object GetValueDirect(TypedReference obj); // 0x00000001801AE8E0
	public virtual void SetValueDirect(TypedReference obj, object value); // 0x00000001801AE930
	private UnmanagedMarshal GetUnmanagedMarshal(); // 0x00000001801150B0
	internal object[] GetPseudoCustomAttributes(); // 0x00000001801AE4E0
	private Type[] GetTypeModifiers(bool optional); // 0x00000001801AE8D0
	public virtual Type[] GetOptionalCustomModifiers(); // 0x00000001801AE470
	public virtual Type[] GetRequiredCustomModifiers(); // 0x00000001801AE860
	public virtual object GetRawConstantValue(); // 0x00000001801AE800
	virtual Type System.Runtime.InteropServices._FieldInfo.GetType(); // 0x0000000180199040
}

// Namespace: System.Reflection
public enum GenericParameterAttributes // TypeDefIndex: 587
{
	None = 0,
	Covariant = 1,
	Contravariant = 2,
	VarianceMask = 3,
	ReferenceTypeConstraint = 4,
	NotNullableValueTypeConstraint = 8,
	DefaultConstructorConstraint = 16,
	SpecialConstraintMask = 28
}

// Namespace: System.Reflection
[Serializable]
public enum ImageFileMachine // TypeDefIndex: 588
{
	I386 = 332,
	IA64 = 512,
	AMD64 = 34404
}

// Namespace: System.Reflection
public struct InterfaceMapping // TypeDefIndex: 589
{
	// Fields
	public MethodInfo[] InterfaceMethods; // 0x10
	public Type InterfaceType; // 0x20
	public MethodInfo[] TargetMethods; // 0x10
	public Type TargetType; // 0x1A

}

// Namespace: System.Reflection
[Serializable]
public class InvalidFilterCriteriaException : ApplicationException // TypeDefIndex: 590
{
	// Constructors
	public InvalidFilterCriteriaException(); // 0x00000001801AF0B0
	public InvalidFilterCriteriaException(string message); // 0x00000001801AF100
	public InvalidFilterCriteriaException(string message, Exception inner); // 0x00000001801AF0A0
	protected InvalidFilterCriteriaException(SerializationInfo info, StreamingContext context); // 0x000000018010E170

}

// Namespace: System.Reflection
public class LocalVariableInfo // TypeDefIndex: 591
{
	// Fields
	internal Type type; // 0x10
	internal bool is_pinned; // 0x1A
	internal ushort position; // 0x10

	// Properties
	public virtual bool IsPinned { get; } // 0x00000001801249E0 
	public virtual int LocalIndex { get; } // 0x0000000180165AC0 
	public virtual Type LocalType { get; } // 0x00000001800E20D0 

	// Constructors
	internal LocalVariableInfo(); // 0x00000001800E2000

	// Methods
	public override string ToString(); // 0x00000001801AF110
}

// Namespace: System.Reflection
public class ManifestResourceInfo // TypeDefIndex: 592
{
	// Fields
	private Assembly _assembly; // 0x10
	private string _filename; // 0x20
	private ResourceLocation _location; // 0x00

	// Properties
	public virtual string FileName { get; } // 0x00000001800EAEC0 
	public virtual Assembly ReferencedAssembly { get; } // 0x00000001800E20D0 
	public virtual ResourceLocation ResourceLocation { get; } // 0x00000001800E2F70 

	// Constructors
	internal ManifestResourceInfo(); // 0x00000001800E2000
	internal ManifestResourceInfo(Assembly assembly, string filename, ResourceLocation location); // 0x00000001801AF1D0

}

// Namespace: System.Reflection
[Serializable]
internal class MemberInfoSerializationHolder : ISerializable, IObjectReference // TypeDefIndex: 593
{
	// Fields
	private const BindingFlags DefaultBinding = 60; // 0x00
	private readonly string _memberName; // 0x18
	private readonly string _memberSignature; // 0x28
	private readonly MemberTypes _memberType; // 0x10
	private readonly Type _reflectedType; // 0x00
	private readonly Type[] _genericArguments; // 0x00

	// Constructors
	private MemberInfoSerializationHolder(SerializationInfo info, StreamingContext ctx); // 0x00000001801AFBB0

	// Methods
	public static void Serialize(SerializationInfo info, string name, Type klass, string signature, MemberTypes type); // 0x00000001801AFB80
	public static void Serialize(SerializationInfo info, string name, Type klass, string signature, MemberTypes type, Type[] genericArguments); // 0x00000001801AF990
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00000001801AF250
	public object GetRealObject(StreamingContext context); // 0x00000001801AF2A0
}

// Namespace: System.Reflection
[Serializable]
public enum MemberTypes // TypeDefIndex: 594
{
	Constructor = 1,
	Event = 2,
	Field = 4,
	Method = 8,
	Property = 16,
	TypeInfo = 32,
	Custom = 64,
	NestedType = 128,
	All = 191
}

// Namespace: System.Reflection
[Serializable]
public enum MethodAttributes // TypeDefIndex: 595
{
	PrivateScope = 0,
	ReuseSlot = 0,
	Private = 1,
	FamANDAssem = 2,
	Assembly = 3,
	Family = 4,
	FamORAssem = 5,
	Public = 6,
	MemberAccessMask = 7,
	UnmanagedExport = 8,
	Static = 16,
	Final = 32,
	Virtual = 64,
	HideBySig = 128,
	VtableLayoutMask = 256,
	NewSlot = 256,
	CheckAccessOnOverride = 512,
	Abstract = 1024,
	SpecialName = 2048,
	RTSpecialName = 4096,
	PinvokeImpl = 8192,
	HasSecurity = 16384,
	RequireSecObject = 32768,
	ReservedMask = 53248
}

// Namespace: System.Reflection
[Serializable]
public abstract class MethodBase : MemberInfo, _MethodBase // TypeDefIndex: 596
{
	// Properties
	public abstract RuntimeMethodHandle MethodHandle { get; }
	public abstract MethodAttributes Attributes { get; }
	public virtual CallingConventions CallingConvention { get; } // 0x0000000180119A50 
	public bool IsPublic { get; } // 0x00000001801B04E0 
	public bool IsPrivate { get; } // 0x00000001801B04C0 
	public bool IsFamily { get; } // 0x00000001801B0460 
	public bool IsAssembly { get; } // 0x00000001801B0340 
	public bool IsFamilyAndAssembly { get; } // 0x00000001801B0410 
	public bool IsFamilyOrAssembly { get; } // 0x00000001801B0430 
	public bool IsStatic { get; } // 0x00000001801B0530 
	public bool IsFinal { get; } // 0x00000001801B0480 
	public bool IsVirtual { get; } // 0x00000001801B0550 
	public bool IsHideBySig { get; } // 0x00000001801B04A0 
	public bool IsAbstract { get; } // 0x00000001801B0320 
	public bool IsSpecialName { get; } // 0x00000001801B0510 
	public bool IsConstructor { get; } // 0x00000001801B0370 
	public virtual bool ContainsGenericParameters { get; } // 0x000000018011A0F0 
	public virtual bool IsGenericMethodDefinition { get; } // 0x000000018011A0F0 
	public virtual bool IsGenericMethod { get; } // 0x000000018011A0F0 

	// Constructors
	protected MethodBase(); // 0x00000001800E2000

	// Methods
	private void System.Runtime.InteropServices._MethodBase.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x00000001801B01E0
	private void System.Runtime.InteropServices._MethodBase.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x00000001801B0280
	private void System.Runtime.InteropServices._MethodBase.GetTypeInfoCount(out uint pcTInfo); // 0x00000001801B0230
	private void System.Runtime.InteropServices._MethodBase.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x00000001801B02D0
	public static MethodBase GetCurrentMethod(); // 0x00000001801AFE70
	internal static MethodBase GetMethodFromHandleNoGenericCheck(RuntimeMethodHandle handle); // 0x00000001801AFF80
	private static MethodBase GetMethodFromIntPtr(IntPtr handle, IntPtr declaringType); // 0x00000001801B00B0
	public static MethodBase GetMethodFromHandle(RuntimeMethodHandle handle); // 0x00000001801AFFC0
	private static MethodBase GetMethodFromHandleInternalType(IntPtr method_handle, IntPtr type_handle); // 0x00000001801AFF70
	public static MethodBase GetMethodFromHandle(RuntimeMethodHandle handle, RuntimeTypeHandle declaringType); // 0x00000001801B00A0
	public abstract MethodImplAttributes GetMethodImplementationFlags();
	public abstract ParameterInfo[] GetParameters();
	internal virtual int GetParameterCount(); // 0x00000001801B0170
	public object Invoke(object obj, object[] parameters); // 0x00000001801B01A0
	public abstract object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture);
	internal virtual int get_next_table_index(object obj, int table, bool inc); // 0x00000001801B0570
	public virtual Type[] GetGenericArguments(); // 0x00000001801AFEC0
	internal static MethodBody GetMethodBodyInternal(IntPtr handle); // 0x00000001801AFF10
	internal static MethodBody GetMethodBody(IntPtr handle); // 0x00000001801AFF10
	public virtual MethodBody GetMethodBody(); // 0x00000001801AFF20
	virtual Type System.Runtime.InteropServices._MethodBase.GetType(); // 0x0000000180199040
}

// Namespace: System.Reflection
public sealed class MethodBody // TypeDefIndex: 597
{
	// Fields
	private ExceptionHandlingClause[] clauses; // 0x10
	private LocalVariableInfo[] locals; // 0x20
	private byte[] il; // 0x2C
	private bool init_locals; // 0x10
	private int sig_token; // 0x00
	private int max_stack; // 0x00

	// Properties
	public IList`1<ExceptionHandlingClause> ExceptionHandlingClauses { get; } // 0x00000001801B0690 
	public IList`1<LocalVariableInfo> LocalVariables { get; } // 0x00000001801B06D0 
	public bool InitLocals { get; } // 0x00000001800EA930 
	public int LocalSignatureMetadataToken { get; } // 0x0000000180118700 
	public int MaxStackSize { get; } // 0x0000000180124660 

	// Constructors
	internal MethodBody(); // 0x00000001800E2000

	// Methods
	public byte[] GetILAsByteArray(); // 0x00000001800EAEB0
}

// Namespace: System.Reflection
[Serializable]
public enum MethodImplAttributes // TypeDefIndex: 598
{
	IL = 0,
	Managed = 0,
	Native = 1,
	OPTIL = 2,
	CodeTypeMask = 3,
	Runtime = 3,
	ManagedMask = 4,
	Unmanaged = 4,
	NoInlining = 8,
	ForwardRef = 16,
	Synchronized = 32,
	PreserveSig = 128,
	InternalCall = 4096,
	MaxMethodImplVal = 65535
}

// Namespace: System.Reflection
[Serializable]
public abstract class MethodInfo : MethodBase, _MethodInfo // TypeDefIndex: 599
{
	// Properties
	public override MemberTypes MemberType { get; } // 0x0000000180129DD0 
	public virtual Type ReturnType { get; } // 0x00000001800EA8C0 
	public abstract ICustomAttributeProvider ReturnTypeCustomAttributes { get; }
	public override bool IsGenericMethod { get; } // 0x000000018011A0F0 
	public override bool IsGenericMethodDefinition { get; } // 0x000000018011A0F0 
	public override bool ContainsGenericParameters { get; } // 0x000000018011A0F0 
	public virtual ParameterInfo ReturnParameter { get; } // 0x00000001801B0980 

	// Constructors
	protected MethodInfo(); // 0x00000001800E2000

	// Methods
	private void System.Runtime.InteropServices._MethodInfo.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x00000001801B0840
	private void System.Runtime.InteropServices._MethodInfo.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x00000001801B08E0
	private void System.Runtime.InteropServices._MethodInfo.GetTypeInfoCount(out uint pcTInfo); // 0x00000001801B0890
	private void System.Runtime.InteropServices._MethodInfo.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x00000001801B0930
	public abstract MethodInfo GetBaseDefinition();
	public virtual MethodInfo GetGenericMethodDefinition(); // 0x00000001801B0770
	public virtual MethodInfo MakeGenericMethod(Type[] typeArguments); // 0x00000001801B07C0
	public override Type[] GetGenericArguments(); // 0x00000001801B0710
	virtual Type System.Runtime.InteropServices._MethodInfo.GetType(); // 0x0000000180199040
}

// Namespace: System.Reflection
[Serializable]
public sealed class Missing : ISerializable // TypeDefIndex: 600
{
	// Fields
	public static readonly Missing Value; // 0x00

	// Constructors
	internal Missing(); // 0x00000001800E2000
	private static Missing(); // 0x00000001801B09D0

	// Methods
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00000001800EA7B0
}

// Namespace: System.Reflection
internal enum ResolveTokenError // TypeDefIndex: 601
{
	OutOfRange = 0,
	BadTable = 1,
	Other = 2
}

// Namespace: System.Reflection
[Serializable]
public class Module : ISerializable, ICustomAttributeProvider, _Module // TypeDefIndex: 602
{
	// Fields
	private const BindingFlags defaultBindingFlags = 28; // 0x00
	public static readonly TypeFilter FilterTypeName; // 0x08
	public static readonly TypeFilter FilterTypeNameIgnoreCase; // 0x18
	private IntPtr _impl; // 0x28
	internal Assembly assembly; // 0x38
	internal string fqname; // 0x10
	internal string name; // 0x20
	internal string scopename; // 0x30
	internal bool is_resource; // 0x40
	internal int token; // 0x18

	// Properties
	public Assembly Assembly { get; } // 0x00000001800EAEC0 
	public virtual string FullyQualifiedName { get; } // 0x00000001800EAEB0 
	public string Name { get; } // 0x000000018013BF80 
	public string ScopeName { get; } // 0x00000001801146E0 
	public ModuleHandle ModuleHandle { get; } // 0x00000001800E20D0 
	public int MetadataToken { get; } // 0x00000001801B23E0 
	public int MDStreamVersion { get; } // 0x00000001801B2350 
	internal Guid MvId { get; } // 0x00000001801B23F0 
	public Guid ModuleVersionId { get; } // 0x00000001801B23F0 

	// Constructors
	internal Module(); // 0x00000001800E2000
	private static Module(); // 0x00000001801B2060

	// Methods
	private void System.Runtime.InteropServices._Module.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x00000001801B1F20
	private void System.Runtime.InteropServices._Module.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x00000001801B1FC0
	private void System.Runtime.InteropServices._Module.GetTypeInfoCount(out uint pcTInfo); // 0x00000001801B1F70
	private void System.Runtime.InteropServices._Module.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x00000001801B2010
	internal static int GetMDStreamVersion(IntPtr module_handle); // 0x00000001801B0E80
	public virtual Type[] FindTypes(TypeFilter filter, object filterCriteria); // 0x00000001801B0A30
	public virtual object[] GetCustomAttributes(bool inherit); // 0x00000001801B0BD0
	public virtual object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00000001801B0C40
	public FieldInfo GetField(string name); // 0x00000001801B0D20
	public FieldInfo GetField(string name, BindingFlags bindingAttr); // 0x00000001801B0CC0
	public FieldInfo[] GetFields(); // 0x00000001801B0D70
	public MethodInfo GetMethod(string name); // 0x00000001801B0F20
	public MethodInfo GetMethod(string name, Type[] types); // 0x00000001801B0F80
	public MethodInfo GetMethod(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x00000001801B0F60
	protected virtual MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x00000001801B0E90
	public MethodInfo[] GetMethods(); // 0x00000001801B1040
	public MethodInfo[] GetMethods(BindingFlags bindingFlags); // 0x00000001801B0FC0
	public FieldInfo[] GetFields(BindingFlags bindingFlags); // 0x00000001801B0DE0
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00000001801B10D0
	public virtual Type GetType(string className); // 0x000000018016C240
	public virtual Type GetType(string className, bool ignoreCase); // 0x000000018016C5A0
	public virtual Type GetType(string className, bool throwOnError, bool ignoreCase); // 0x00000001801B11A0
	private Type[] InternalGetTypes(); // 0x00000001801B12D0
	public virtual Type[] GetTypes(); // 0x00000001801B12D0
	public virtual bool IsDefined(Type attributeType, bool inherit); // 0x00000001801B12E0
	public bool IsResource(); // 0x00000001801B1360
	public override string ToString(); // 0x000000018013BF80
	public void GetPEKind(out PortableExecutableKinds peKind, out ImageFileMachine machine); // 0x00000001801B1180
	private Exception resolve_token_exception(int metadataToken, ResolveTokenError error, string tokenType); // 0x00000001801B2530
	private IntPtr[] ptrs_from_types(Type[] types); // 0x00000001801B2420
	public FieldInfo ResolveField(int metadataToken); // 0x00000001801B15C0
	public FieldInfo ResolveField(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments); // 0x00000001801B1460
	public MemberInfo ResolveMember(int metadataToken); // 0x00000001801B1820
	public MemberInfo ResolveMember(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments); // 0x00000001801B1730
	public MethodBase ResolveMethod(int metadataToken); // 0x00000001801B1910
	public MethodBase ResolveMethod(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments); // 0x00000001801B1A30
	public string ResolveString(int metadataToken); // 0x00000001801B1C20
	public Type ResolveType(int metadataToken); // 0x00000001801B1CE0
	public Type ResolveType(int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments); // 0x00000001801B1E00
	public byte[] ResolveSignature(int metadataToken); // 0x00000001801B1B50
	internal static Type MonoDebugger_ResolveType(Module module, int token); // 0x00000001801B1370
	internal static Guid Mono_GetGuid(Module module); // 0x000000018016C770
	internal virtual Guid GetModuleVersionId(); // 0x00000001801B10A0
	private static bool filter_by_type_name(Type m, object filterCriteria); // 0x00000001801B2230
	private static bool filter_by_type_name_ignore_case(Type m, object filterCriteria); // 0x00000001801B20F0
	internal IntPtr GetHINSTANCE(); // 0x00000001801150B0
	private string GetGuidInternal(); // 0x00000001801B0E70
	private Type GetGlobalType(); // 0x00000001801B0E60
	internal static IntPtr ResolveTypeToken(IntPtr module, int token, IntPtr[] type_args, IntPtr[] method_args, out ResolveTokenError error); // 0x00000001801B1CD0
	internal static IntPtr ResolveMethodToken(IntPtr module, int token, IntPtr[] type_args, IntPtr[] method_args, out ResolveTokenError error); // 0x00000001801B1900
	internal static IntPtr ResolveFieldToken(IntPtr module, int token, IntPtr[] type_args, IntPtr[] method_args, out ResolveTokenError error); // 0x00000001801B1450
	internal static string ResolveStringToken(IntPtr module, int token, out ResolveTokenError error); // 0x00000001801B1C10
	internal static MemberInfo ResolveMemberToken(IntPtr module, int token, IntPtr[] type_args, IntPtr[] method_args, out ResolveTokenError error); // 0x00000001801B1720
	internal static byte[] ResolveSignature(IntPtr module, int metadataToken, out ResolveTokenError error); // 0x00000001801B1C00
	internal static void GetPEKind(IntPtr module, out PortableExecutableKinds peKind, out ImageFileMachine machine); // 0x00000001801B1170
}

// Namespace: System.Reflection
internal struct MonoEventInfo // TypeDefIndex: 603
{
	// Fields
	public Type declaring_type; // 0x10
	public Type reflected_type; // 0x20
	public string name; // 0x30
	public MethodInfo add_method; // 0x40
	public MethodInfo remove_method; // 0x18
	public MethodInfo raise_method; // 0x10
	public EventAttributes attrs; // 0x20
	public MethodInfo[] other_methods; // 0x30

	// Methods
	private static void get_event_info(MonoEvent ev, out MonoEventInfo info); // 0x00000001801B3970
	internal static MonoEventInfo GetEventInfo(MonoEvent ev); // 0x00000001801B3930
}

// Namespace: System.Reflection
[Serializable]
internal sealed class MonoEvent : EventInfo, ISerializable // TypeDefIndex: 604
{
	// Fields
	private IntPtr klass; // 0x18
	private IntPtr handle; // 0x10

	// Properties
	public override EventAttributes Attributes { get; } // 0x00000001801B40E0 
	public override Type DeclaringType { get; } // 0x00000001801B4110 
	public override Type ReflectedType { get; } // 0x00000001801B4170 
	public override string Name { get; } // 0x00000001801B4140 

	// Constructors
	public MonoEvent(); // 0x00000001800E2000

	// Methods
	public override MethodInfo GetAddMethod(bool nonPublic); // 0x00000001801B3980
	public override MethodInfo GetRaiseMethod(bool nonPublic); // 0x00000001801B3E60
	public override MethodInfo GetRemoveMethod(bool nonPublic); // 0x00000001801B3EE0
	public override MethodInfo[] GetOtherMethods(bool nonPublic); // 0x00000001801B3C90
	public override string ToString(); // 0x00000001801B3FE0
	public override bool IsDefined(Type attributeType, bool inherit); // 0x00000001801B3F60
	public override object[] GetCustomAttributes(bool inherit); // 0x00000001801B3A80
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00000001801B3A00
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00000001801B3AF0
}

// Namespace: System.Reflection
[Serializable]
internal class MonoField : FieldInfo, ISerializable // TypeDefIndex: 605
{
	// Fields
	internal IntPtr klass; // 0x10
	internal RuntimeFieldHandle fhandle; // 0x20
	private string name; // 0x30
	private Type type; // 0x00
	private FieldAttributes attrs; // 0x28

	// Properties
	public override FieldAttributes Attributes { get; } // 0x0000000180124660 
	public override RuntimeFieldHandle FieldHandle { get; } // 0x00000001800EAEC0 
	public override Type FieldType { get; } // 0x000000018013BF80 
	public override Type ReflectedType { get; } // 0x00000001801B4B20 
	public override Type DeclaringType { get; } // 0x00000001801B4B10 
	public override string Name { get; } // 0x00000001800EAEB0 

	// Constructors
	public MonoField(); // 0x00000001800E2000

	// Methods
	private Type GetParentType(bool declaring); // 0x00000001801B4470
	public override bool IsDefined(Type attributeType, bool inherit); // 0x00000001801B4660
	public override object[] GetCustomAttributes(bool inherit); // 0x00000001801B42D0
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00000001801B4340
	internal override int GetFieldOffset(); // 0x00000001801B43C0
	private object GetValueInternal(object obj); // 0x00000001801B4490
	public override object GetValue(object obj); // 0x00000001801B44A0
	public override string ToString(); // 0x00000001801B4AA0
	private static void SetValueInternal(FieldInfo fi, object obj, object value); // 0x00000001801B46E0
	public override void SetValue(object obj, object val, BindingFlags invokeAttr, Binder binder, CultureInfo culture); // 0x00000001801B46F0
	internal MonoField Clone(string newName); // 0x00000001801B4240
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00000001801B43D0
	public override object GetRawConstantValue(); // 0x00000001801B4480
	private void CheckGeneric(); // 0x00000001801B41A0
}

// Namespace: System.Reflection
internal class MonoGenericClass : MonoType // TypeDefIndex: 606
{
	// Fields
	private const BindingFlags flags = 62; // 0x00
	internal TypeBuilder generic_type; // 0x28
	private Type[] type_arguments; // 0x38
	private bool initialized; // 0x48
	private Hashtable fields; // 0x10
	private Hashtable ctors; // 0x20
	private Hashtable methods; // 0x28
	private int event_count; // 0x10

	// Properties
	public override Type BaseType { get; } // 0x00000001801B7910 
	public override Type UnderlyingSystemType { get; } // 0x0000000180123590 
	public override string Name { get; } // 0x00000001801B79C0 
	public override string Namespace { get; } // 0x00000001801B79E0 
	public override string FullName { get; } // 0x00000001801B7960 
	public override string AssemblyQualifiedName { get; } // 0x00000001801B7900 
	public override Guid GUID { get; } // 0x00000001801B7970 

	// Constructors
	internal MonoGenericClass(); // 0x00000001801B7520
	internal MonoGenericClass(TypeBuilder tb, Type[] args); // 0x00000001801B7580

	// Methods
	private void initialize(MethodInfo[] methods, ConstructorInfo[] ctors, FieldInfo[] fields, PropertyInfo[] properties, EventInfo[] events); // 0x00000001801B80A0
	private void initialize(); // 0x00000001801B7A00
	private Type GetParentType(); // 0x00000001801B6800
	internal Type InflateType(Type type); // 0x00000001801B7110
	internal Type InflateType(Type type, Type[] method_args); // 0x00000001801B6CB0
	private Type[] GetInterfacesInternal(); // 0x00000001801B5EF0
	public override Type[] GetInterfaces(); // 0x00000001801B6040
	protected override bool IsValueTypeImpl(); // 0x00000001801B7330
	internal override MethodInfo GetMethod(MethodInfo fromNoninstanciated); // 0x00000001801B6170
	internal override ConstructorInfo GetConstructor(ConstructorInfo fromNoninstanciated); // 0x00000001801B4C10
	internal override FieldInfo GetField(FieldInfo fromNoninstanciated); // 0x00000001801B5840
	public override MethodInfo[] GetMethods(BindingFlags bf); // 0x00000001801B6570
	private MethodInfo[] GetMethodsInternal(BindingFlags bf, MonoGenericClass reftype); // 0x00000001801B63A0
	public override ConstructorInfo[] GetConstructors(BindingFlags bf); // 0x00000001801B5020
	private ConstructorInfo[] GetConstructorsInternal(BindingFlags bf, MonoGenericClass reftype); // 0x00000001801B4E40
	public override FieldInfo[] GetFields(BindingFlags bf); // 0x00000001801B5C90
	private FieldInfo[] GetFieldsInternal(BindingFlags bf, MonoGenericClass reftype); // 0x00000001801B5AC0
	public override PropertyInfo[] GetProperties(BindingFlags bf); // 0x00000001801B6A40
	private PropertyInfo[] GetPropertiesInternal(BindingFlags bf, MonoGenericClass reftype); // 0x00000001801B6830
	public override EventInfo[] GetEvents(BindingFlags bf); // 0x00000001801B5620
	private EventInfo[] GetEventsInternal(BindingFlags bf, MonoGenericClass reftype); // 0x00000001801B5440
	public override Type[] GetNestedTypes(BindingFlags bf); // 0x00000001801B67E0
	public override bool IsAssignableFrom(Type c); // 0x00000001801B7170
	private string format_name(bool full_name, bool assembly_qualified); // 0x00000001801B75C0
	public override string ToString(); // 0x00000001801B7510
	public override Type MakeArrayType(); // 0x00000001801B73F0
	public override Type MakeArrayType(int rank); // 0x00000001801B7350
	public override Type MakeByRefType(); // 0x00000001801B7450
	public override Type MakePointerType(); // 0x00000001801B74B0
	protected override bool IsCOMObjectImpl(); // 0x000000018011A0F0
	protected override bool IsPrimitiveImpl(); // 0x000000018011A0F0
	protected override TypeAttributes GetAttributeFlagsImpl(); // 0x00000001801B4BA0
	public override Type GetInterface(string name, bool ignoreCase); // 0x00000001801B5EA0
	public override EventInfo GetEvent(string name, BindingFlags bindingAttr); // 0x00000001801B52D0
	public override FieldInfo GetField(string name, BindingFlags bindingAttr); // 0x00000001801B5A70
	public override MemberInfo[] GetMembers(BindingFlags bindingAttr); // 0x00000001801B60D0
	public override Type GetNestedType(string name, BindingFlags bindingAttr); // 0x00000001801B6790
	public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters); // 0x00000001801B7120
	protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x00000001801B6120
	protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x00000001801B6C60
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x00000001801B4BC0
	public override bool IsDefined(Type attributeType, bool inherit); // 0x00000001801B72E0
	public override object[] GetCustomAttributes(bool inherit); // 0x00000001801B5230
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00000001801B5280
}

// Namespace: System.Reflection
[Serializable]
internal class MonoGenericMethod : MonoMethod // TypeDefIndex: 607
{
	// Properties
	public override Type ReflectedType { get; } // 0x00000001801B8110 

	// Constructors
	internal MonoGenericMethod(); // 0x00000001801B80B0

}

// Namespace: System.Reflection
[Serializable]
internal class MonoGenericCMethod : MonoCMethod // TypeDefIndex: 608
{
	// Properties
	public override Type ReflectedType { get; } // 0x00000001801B4B90 

	// Constructors
	internal MonoGenericCMethod(); // 0x00000001801B4B30

}

// Namespace: System.Reflection
internal struct MonoMethodInfo // TypeDefIndex: 609
{
	// Fields
	private Type parent; // 0x10
	private Type ret; // 0x20
	internal MethodAttributes attrs; // 0x28
	internal MethodImplAttributes iattrs; // 0x10
	private CallingConventions callconv; // 0x20

	// Methods
	private static void get_method_info(IntPtr handle, out MonoMethodInfo info); // 0x00000001801B82F0
	internal static MonoMethodInfo GetMethodInfo(IntPtr handle); // 0x00000001801B81E0
	internal static Type GetDeclaringType(IntPtr handle); // 0x00000001801B8180
	internal static Type GetReturnType(IntPtr handle); // 0x00000001801B82C0
	internal static MethodAttributes GetAttributes(IntPtr handle); // 0x00000001801B8120
	internal static CallingConventions GetCallingConvention(IntPtr handle); // 0x00000001801B8150
	internal static MethodImplAttributes GetMethodImplementationFlags(IntPtr handle); // 0x00000001801B81B0
	private static ParameterInfo[] get_parameter_info(IntPtr handle, MemberInfo member); // 0x00000001801B8210
	internal static ParameterInfo[] GetParametersInfo(IntPtr handle, MemberInfo member); // 0x00000001801B8210
	private static UnmanagedMarshal get_retval_marshal(IntPtr handle); // 0x00000001801150B0
	internal static ParameterInfo GetReturnParameterInfo(MonoMethod method); // 0x00000001801B8220
}

// Namespace: System.Reflection
[Serializable]
internal class MonoMethod : MethodInfo, ISerializable // TypeDefIndex: 610
{
	// Fields
	internal IntPtr mhandle; // 0x10
	private string name; // 0x20
	private Type reftype; // 0x10

	// Properties
	public override ParameterInfo ReturnParameter { get; } // 0x00000001801B92F0 
	public override Type ReturnType { get; } // 0x00000001801B9300 
	public override ICustomAttributeProvider ReturnTypeCustomAttributes { get; } // 0x00000001801B92F0 
	public override RuntimeMethodHandle MethodHandle { get; } // 0x00000001800E20D0 
	public override MethodAttributes Attributes { get; } // 0x00000001801B3890 
	public override CallingConventions CallingConvention { get; } // 0x00000001801B38C0 
	public override Type ReflectedType { get; } // 0x00000001800EAEB0 
	public override Type DeclaringType { get; } // 0x00000001801B38F0 
	public override string Name { get; } // 0x00000001801B3920 
	public override bool IsGenericMethodDefinition { get; } // 0x00000001801B92D0 
	public override bool IsGenericMethod { get; } // 0x00000001801B92E0 
	public override bool ContainsGenericParameters { get; } // 0x00000001801B91F0 

	// Constructors
	internal MonoMethod(); // 0x00000001800E2000
	internal MonoMethod(RuntimeMethodHandle mhandle); // 0x00000001801B91C0

	// Methods
	internal static string get_name(MethodBase method); // 0x00000001801B9330
	internal static MonoMethod get_base_definition(MonoMethod method); // 0x00000001801B8300
	public override MethodInfo GetBaseDefinition(); // 0x00000001801B8300
	public override MethodImplAttributes GetMethodImplementationFlags(); // 0x00000001801B3050
	public override ParameterInfo[] GetParameters(); // 0x00000001801B8590
	internal object InternalInvoke(object obj, object[] parameters, out Exception exc); // 0x00000001801B87E0
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x00000001801B87F0
	public override bool IsDefined(Type attributeType, bool inherit); // 0x00000001801B8B60
	public override object[] GetCustomAttributes(bool inherit); // 0x00000001801B8390
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00000001801B8310
	internal static DllImportAttribute GetDllImportAttribute(IntPtr mhandle); // 0x00000001801B8400
	internal object[] GetPseudoCustomAttributes(); // 0x00000001801B8610
	private static bool ShouldPrintFullName(Type type); // 0x00000001801B8DA0
	public override string ToString(); // 0x00000001801B8E50
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00000001801B84A0
	public override MethodInfo MakeGenericMethod(Type[] methodInstantiation); // 0x00000001801B8BF0
	private MethodInfo MakeGenericMethod_impl(Type[] types); // 0x00000001801B8BE0
	public override Type[] GetGenericArguments(); // 0x00000001801B8410
	private MethodInfo GetGenericMethodDefinition_impl(); // 0x00000001801B8420
	public override MethodInfo GetGenericMethodDefinition(); // 0x00000001801B8430
	public override MethodBody GetMethodBody(); // 0x00000001801B3040
}

// Namespace: System.Reflection
internal class MonoCMethod : ConstructorInfo, ISerializable // TypeDefIndex: 611
{
	// Fields
	internal IntPtr mhandle; // 0x10
	private string name; // 0x20
	private Type reftype; // 0x10

	// Properties
	public override RuntimeMethodHandle MethodHandle { get; } // 0x00000001800E20D0 
	public override MethodAttributes Attributes { get; } // 0x00000001801B3890 
	public override CallingConventions CallingConvention { get; } // 0x00000001801B38C0 
	public override Type ReflectedType { get; } // 0x00000001800EAEB0 
	public override Type DeclaringType { get; } // 0x00000001801B38F0 
	public override string Name { get; } // 0x00000001801B3920 

	// Constructors
	public MonoCMethod(); // 0x00000001801B3830

	// Methods
	public override MethodImplAttributes GetMethodImplementationFlags(); // 0x00000001801B3050
	public override ParameterInfo[] GetParameters(); // 0x00000001801B3120
	internal object InternalInvoke(object obj, object[] parameters, out Exception exc); // 0x00000001801B3130
	public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x00000001801B3180
	public override object Invoke(BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture); // 0x00000001801B3140
	public override bool IsDefined(Type attributeType, bool inherit); // 0x00000001801B3600
	public override object[] GetCustomAttributes(bool inherit); // 0x00000001801B2FD0
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00000001801B2F50
	public override MethodBody GetMethodBody(); // 0x00000001801B3040
	public override string ToString(); // 0x00000001801B3680
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00000001801B3080
}

// Namespace: System.Reflection
internal struct MonoPropertyInfo // TypeDefIndex: 612
{
	// Fields
	public Type parent; // 0x10
	public string name; // 0x20
	public MethodInfo get_method; // 0x30
	public MethodInfo set_method; // 0x10
	public PropertyAttributes attrs; // 0x00

	// Methods
	internal static void get_property_info(MonoProperty prop, MonoPropertyInfo info, PInfo req_info); // 0x00000001802600A0
	internal static Type[] GetTypeModifiers(MonoProperty prop, bool optional); // 0x0000000180260090
}

// Namespace: System.Reflection
internal enum PInfo // TypeDefIndex: 613
{
	Attributes = 1,
	GetMethod = 2,
	SetMethod = 4,
	ReflectedType = 8,
	DeclaringType = 16,
	Name = 32
}

// Namespace: System.Reflection
[Serializable]
internal class MonoProperty : PropertyInfo, ISerializable // TypeDefIndex: 614
{
	// Fields
	internal IntPtr klass; // 0x10
	internal IntPtr prop; // 0x20
	private MonoPropertyInfo info; // 0x50
	private PInfo cached; // 0x10
	private GetterAdapter cached_getter; // 0x10

	// Properties
	public override PropertyAttributes Attributes { get; } // 0x00000001801BA300 
	public override bool CanRead { get; } // 0x00000001801BA340 
	public override bool CanWrite { get; } // 0x00000001801BA380 
	public override Type PropertyType { get; } // 0x00000001801BA440 
	public override Type ReflectedType { get; } // 0x00000001801BA4F0 
	public override Type DeclaringType { get; } // 0x00000001801BA3C0 
	public override string Name { get; } // 0x00000001801BA400 

	// Constructors
	public MonoProperty(); // 0x00000001801BA2F0

	// Methods
	private void CachePropertyInfo(PInfo flags); // 0x00000001801B9340
	public override MethodInfo[] GetAccessors(bool nonPublic); // 0x00000001801B96F0
	public override MethodInfo GetGetMethod(bool nonPublic); // 0x00000001801B9970
	public override ParameterInfo[] GetIndexParameters(); // 0x00000001801B99E0
	public override MethodInfo GetSetMethod(bool nonPublic); // 0x00000001801B9D20
	public override bool IsDefined(Type attributeType, bool inherit); // 0x00000001801B9F70
	public override object[] GetCustomAttributes(bool inherit); // 0x00000001801B9910
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x00000001801B98A0
	private static object GetterAdapterFrame(Getter`2<T, T> getter, object obj);
	private static object StaticGetterAdapterFrame(StaticGetter`1<T> getter, object obj);
	private static GetterAdapter CreateGetterDelegate(MethodInfo method); // 0x00000001801B9380
	public override object GetValue(object obj, object[] index); // 0x00000001801B9F30
	public override object GetValue(object obj, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture); // 0x00000001801B9D90
	public override void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture); // 0x00000001801B9FE0
	public override string ToString(); // 0x00000001801BA230
	public override Type[] GetOptionalCustomModifiers(); // 0x00000001801B9C40
	public override Type[] GetRequiredCustomModifiers(); // 0x00000001801B9CB0
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00000001801B9BA0
}

// Namespace: 
private delegate object GetterAdapter(object _this); // TypeDefIndex: 615; 0x0000000180195FA0

// Namespace: 
private delegate T Getter`2(T _this); // TypeDefIndex: 616; 0x0000000000000000

// Namespace: 
private delegate T StaticGetter`1(); // TypeDefIndex: 617; 0x0000000000000000

// Namespace: System.Reflection
public sealed class ObfuscateAssemblyAttribute : Attribute // TypeDefIndex: 618
{
	// Fields
	private bool is_private; // 0x10
	private bool strip; // 0x10

	// Properties
	public bool AssemblyIsPrivate { get; } // 0x0000000180113840 
	public bool StripAfterObfuscation { get; set; } // 0x0000000180147560 0x000000018018FC00

	// Constructors
	public ObfuscateAssemblyAttribute(bool assemblyIsPrivate); // 0x00000001802602C0

}

// Namespace: System.Reflection
public sealed class ObfuscationAttribute : Attribute // TypeDefIndex: 619
{
	// Fields
	private bool exclude; // 0x10
	private bool strip; // 0x12
	private bool applyToMembers; // 0x10
	private string feature; // 0x00

	// Properties
	public bool Exclude { get; set; } // 0x0000000180113840 0x000000018018FBE0
	public bool StripAfterObfuscation { get; set; } // 0x0000000180147560 0x000000018018FC00
	public bool ApplyToMembers { get; set; } // 0x00000001801475D0 0x000000018018FBF0
	public string Feature { get; set; } // 0x00000001800EAEC0 0x00000001800EAEE0

	// Constructors
	public ObfuscationAttribute(); // 0x00000001802602F0

}

// Namespace: System.Reflection
[Serializable]
public enum ParameterAttributes // TypeDefIndex: 620
{
	None = 0,
	In = 1,
	Out = 2,
	Lcid = 4,
	Retval = 8,
	Optional = 16,
	HasDefault = 4096,
	HasFieldMarshal = 8192,
	Reserved3 = 16384,
	Reserved4 = 32768,
	ReservedMask = 61440
}

// Namespace: System.Reflection
[Serializable]
public class ParameterInfo : ICustomAttributeProvider, _ParameterInfo // TypeDefIndex: 621
{
	// Fields
	protected Type ClassImpl; // 0x10
	protected object DefaultValueImpl; // 0x20
	protected MemberInfo MemberImpl; // 0x30
	protected string NameImpl; // 0x38
	protected int PositionImpl; // 0x10
	protected ParameterAttributes AttrsImpl; // 0x10
	private UnmanagedMarshal marshalAs; // 0x00

	// Properties
	public virtual Type ParameterType { get; } // 0x00000001800E20D0 
	public virtual ParameterAttributes Attributes { get; } // 0x0000000180119430 
	public virtual object DefaultValue { get; } // 0x0000000180260E30 
	public bool IsIn { get; } // 0x00000001802610D0 
	public bool IsLcid { get; } // 0x00000001802610F0 
	public bool IsOptional { get; } // 0x0000000180261110 
	public bool IsOut { get; } // 0x0000000180261130 
	public bool IsRetval { get; } // 0x0000000180261150 
	public virtual MemberInfo Member { get; } // 0x00000001800EAEB0 
	public virtual string Name { get; } // 0x000000018013BF80 
	public virtual int Position { get; } // 0x0000000180124660 
	public int MetadataToken { get; } // 0x0000000180261170 
	public virtual object RawDefaultValue { get; } // 0x00000001802613A0 

	// Constructors
	protected ParameterInfo(); // 0x00000001800E2000
	internal ParameterInfo(ParameterBuilder pb, Type type, MemberInfo member, int position); // 0x0000000180260C30
	internal ParameterInfo(ParameterInfo pinfo, MemberInfo member); // 0x0000000180260CE0
	internal ParameterInfo(Type type, MemberInfo member, UnmanagedMarshal marshalAs); // 0x0000000180260D80

	// Methods
	private void System.Runtime.InteropServices._ParameterInfo.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x00000001802608C0
	private void System.Runtime.InteropServices._ParameterInfo.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x0000000180260960
	private void System.Runtime.InteropServices._ParameterInfo.GetTypeInfoCount(out uint pcTInfo); // 0x0000000180260910
	private void System.Runtime.InteropServices._ParameterInfo.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x00000001802609B0
	public override string ToString(); // 0x0000000180260A00
	private int GetMetadataToken(); // 0x0000000180260430
	public virtual object[] GetCustomAttributes(bool inherit); // 0x00000001802603C0
	public virtual object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x0000000180260340
	public virtual bool IsDefined(Type attributeType, bool inherit); // 0x0000000180260840
	internal object[] GetPseudoCustomAttributes(); // 0x00000001802604B0
	private Type[] GetTypeModifiers(bool optional); // 0x0000000180260830
	public virtual Type[] GetOptionalCustomModifiers(); // 0x0000000180260440
	public virtual Type[] GetRequiredCustomModifiers(); // 0x00000001802607C0
}

// Namespace: System.Reflection
[Serializable]
public struct ParameterModifier // TypeDefIndex: 622
{
	// Fields
	private bool[] _byref; // 0x10

	// Properties
	public bool Item { get; set; } // 0x000000018001A150 0x000000018001A190

	// Constructors
	public ParameterModifier(int parameterCount); // 0x000000018001A0D0

}

// Namespace: System.Reflection
[Serializable]
public sealed class Pointer : ISerializable // TypeDefIndex: 623
{
	// Fields
	private void * data; // 0x10
	private Type type; // 0x10

	// Constructors
	private Pointer(); // 0x00000001800E2000

	// Methods
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00000001802614B0
	public static object Box(void * ptr, Type type); // 0x00000001802613C0
	public static void * Unbox(object ptr); // 0x0000000180261510
}

// Namespace: System.Reflection
[Serializable]
public enum PortableExecutableKinds // TypeDefIndex: 624
{
	NotAPortableExecutableImage = 0,
	ILOnly = 1,
	Required32Bit = 2,
	PE32Plus = 4,
	Unmanaged32Bit = 8
}

// Namespace: System.Reflection
[Serializable]
public enum ProcessorArchitecture // TypeDefIndex: 625
{
	None = 0,
	MSIL = 1,
	X86 = 2,
	IA64 = 3,
	Amd64 = 4
}

// Namespace: System.Reflection
[Serializable]
public enum PropertyAttributes // TypeDefIndex: 626
{
	None = 0,
	SpecialName = 512,
	RTSpecialName = 1024,
	HasDefault = 4096,
	Reserved2 = 8192,
	Reserved3 = 16384,
	Reserved4 = 32768,
	ReservedMask = 62464
}

// Namespace: System.Reflection
[Serializable]
public abstract class PropertyInfo : MemberInfo, _PropertyInfo // TypeDefIndex: 627
{
	// Properties
	public abstract PropertyAttributes Attributes { get; }
	public abstract bool CanRead { get; }
	public abstract bool CanWrite { get; }
	public bool IsSpecialName { get; } // 0x00000001802618B0 
	public override MemberTypes MemberType { get; } // 0x00000001802618D0 
	public abstract Type PropertyType { get; }

	// Constructors
	protected PropertyInfo(); // 0x00000001800EAC90

	// Methods
	private void System.Runtime.InteropServices._PropertyInfo.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x0000000180261770
	private void System.Runtime.InteropServices._PropertyInfo.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x0000000180261810
	private void System.Runtime.InteropServices._PropertyInfo.GetTypeInfoCount(out uint pcTInfo); // 0x00000001802617C0
	private void System.Runtime.InteropServices._PropertyInfo.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x0000000180261860
	public MethodInfo[] GetAccessors(); // 0x0000000180261590
	public abstract MethodInfo[] GetAccessors(bool nonPublic);
	public MethodInfo GetGetMethod(); // 0x0000000180261600
	public abstract MethodInfo GetGetMethod(bool nonPublic);
	public abstract ParameterInfo[] GetIndexParameters();
	public MethodInfo GetSetMethod(); // 0x0000000180115EF0
	public abstract MethodInfo GetSetMethod(bool nonPublic);
	public virtual object GetValue(object obj, object[] index); // 0x00000001801B9F30
	public abstract object GetValue(object obj, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture);
	public virtual void SetValue(object obj, object value, object[] index); // 0x0000000180261730
	public abstract void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture);
	public virtual Type[] GetOptionalCustomModifiers(); // 0x0000000180261620
	public virtual Type[] GetRequiredCustomModifiers(); // 0x00000001802616D0
	public virtual object GetConstantValue(); // 0x00000001802615B0
	public virtual object GetRawConstantValue(); // 0x0000000180261680
	virtual Type System.Runtime.InteropServices._PropertyInfo.GetType(); // 0x0000000180199040
}

// Namespace: System.Reflection
[Serializable]
public sealed class ReflectionTypeLoadException : SystemException // TypeDefIndex: 628
{
	// Fields
	private Exception[] loaderExceptions; // 0x60
	private Type[] types; // 0x10

	// Properties
	public Type[] Types { get; } // 0x00000001801136C0 
	public Exception[] LoaderExceptions { get; } // 0x0000000180114BE0 

	// Constructors
	public ReflectionTypeLoadException(Type[] classes, Exception[] exceptions); // 0x0000000180261B20
	public ReflectionTypeLoadException(Type[] classes, Exception[] exceptions, string message); // 0x0000000180261980
	private ReflectionTypeLoadException(SerializationInfo info, StreamingContext sc); // 0x00000001802619C0

	// Methods
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00000001802618E0
}

// Namespace: System.Reflection
[Serializable]
public enum ResourceAttributes // TypeDefIndex: 629
{
	Public = 1,
	Private = 2
}

// Namespace: System.Reflection
[Serializable]
public enum ResourceLocation // TypeDefIndex: 630
{
	Embedded = 1,
	ContainedInAnotherAssembly = 2,
	ContainedInManifestFile = 4
}

// Namespace: System.Reflection
[Serializable]
public class StrongNameKeyPair : ISerializable, IDeserializationCallback // TypeDefIndex: 631
{
	// Fields
	private byte[] _publicKey; // 0x10
	private string _keyPairContainer; // 0x20
	private bool _keyPairExported; // 0x30
	private byte[] _keyPairArray; // 0x00
	[NonSerialized]	private RSA _rsa; // 0x10

	// Properties
	public byte[] PublicKey { get; } // 0x000000018026B920 

	// Constructors
	public StrongNameKeyPair(byte[] keyPairArray); // 0x000000018026B890
	public StrongNameKeyPair(FileStream keyPairFile); // 0x000000018026B7A0
	public StrongNameKeyPair(string keyPairContainer); // 0x000000018026B710
	protected StrongNameKeyPair(SerializationInfo info, StreamingContext context); // 0x000000018026B5A0

	// Methods
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x000000018026B490
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender); // 0x00000001800EA7B0
	private RSA GetRSA(); // 0x000000018026B270
	private void LoadKey(byte[] key); // 0x000000018026B2F0
	internal StrongName StrongName(); // 0x000000018026B3E0
}

// Namespace: System.Reflection
[Serializable]
public class TargetException : Exception // TypeDefIndex: 632
{
	// Constructors
	public TargetException(); // 0x000000018026BC50
	public TargetException(string message); // 0x000000018026BC40
	public TargetException(string message, Exception inner); // 0x000000018026BCA0
	protected TargetException(SerializationInfo info, StreamingContext context); // 0x000000018019B630

}

// Namespace: System.Reflection
[Serializable]
public sealed class TargetInvocationException : Exception // TypeDefIndex: 633
{
	// Constructors
	public TargetInvocationException(Exception inner); // 0x000000018026BCB0
	public TargetInvocationException(string message, Exception inner); // 0x000000018026BCA0
	internal TargetInvocationException(SerializationInfo info, StreamingContext sc); // 0x000000018019B630

}

// Namespace: System.Reflection
[Serializable]
public sealed class TargetParameterCountException : Exception // TypeDefIndex: 634
{
	// Constructors
	public TargetParameterCountException(); // 0x000000018026BD00
	public TargetParameterCountException(string message); // 0x000000018026BC40
	public TargetParameterCountException(string message, Exception inner); // 0x000000018026BCA0
	internal TargetParameterCountException(SerializationInfo info, StreamingContext context); // 0x000000018019B630

}

// Namespace: System.Reflection
[Serializable]
public enum TypeAttributes // TypeDefIndex: 635
{
	NotPublic = 0,
	AutoLayout = 0,
	Class = 0,
	AnsiClass = 0,
	Public = 1,
	NestedPublic = 2,
	NestedPrivate = 3,
	NestedFamily = 4,
	NestedAssembly = 5,
	NestedFamANDAssem = 6,
	VisibilityMask = 7,
	NestedFamORAssem = 7,
	SequentialLayout = 8,
	ExplicitLayout = 16,
	LayoutMask = 24,
	ClassSemanticsMask = 32,
	Interface = 32,
	Abstract = 128,
	Sealed = 256,
	SpecialName = 1024,
	RTSpecialName = 2048,
	Import = 4096,
	Serializable = 8192,
	UnicodeClass = 65536,
	AutoClass = 131072,
	StringFormatMask = 196608,
	CustomFormatClass = 196608,
	HasSecurity = 262144,
	ReservedMask = 264192,
	BeforeFieldInit = 1048576,
	CustomFormatMask = 12582912
}

// Namespace: System.Reflection
[Serializable]
public class TypeDelegator : Type // TypeDefIndex: 636
{
	// Fields
	protected Type typeImpl; // 0x18

	// Properties
	public override Assembly Assembly { get; } // 0x0000000180122730 
	public override string AssemblyQualifiedName { get; } // 0x000000018026C3E0 
	public override Type BaseType { get; } // 0x000000018026C410 
	public override string FullName { get; } // 0x000000018026C440 
	public override Guid GUID { get; } // 0x000000018026C470 
	public override Module Module { get; } // 0x0000000180122880 
	public override string Name { get; } // 0x00000001801BABB0 
	public override string Namespace { get; } // 0x0000000180122900 
	public override RuntimeTypeHandle TypeHandle { get; } // 0x000000018026C4E0 
	public override Type UnderlyingSystemType { get; } // 0x000000018026C510 
	public override int MetadataToken { get; } // 0x000000018026C4B0 

	// Constructors
	protected TypeDelegator(); // 0x000000018026C380
	public TypeDelegator(Type delegatingType); // 0x000000018026C2E0

	// Methods
	protected override TypeAttributes GetAttributeFlagsImpl(); // 0x0000000180121D00
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x000000018015C960
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr); // 0x000000018026BDF0
	public override object[] GetCustomAttributes(bool inherit); // 0x000000018026BE50
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x000000018026BE20
	public override Type GetElementType(); // 0x000000018026BE80
	public override EventInfo GetEvent(string name, BindingFlags bindingAttr); // 0x000000018026BEB0
	public override EventInfo[] GetEvents(); // 0x000000018026BEE0
	public override EventInfo[] GetEvents(BindingFlags bindingAttr); // 0x000000018026BF00
	public override FieldInfo GetField(string name, BindingFlags bindingAttr); // 0x000000018026BF30
	public override FieldInfo[] GetFields(BindingFlags bindingAttr); // 0x000000018026BF60
	public override Type GetInterface(string name, bool ignoreCase); // 0x000000018026BFE0
	public override InterfaceMapping GetInterfaceMap(Type interfaceType); // 0x000000018026BF90
	public override Type[] GetInterfaces(); // 0x000000018026C010
	public override MemberInfo[] GetMember(string name, MemberTypes type, BindingFlags bindingAttr); // 0x000000018026C040
	public override MemberInfo[] GetMembers(BindingFlags bindingAttr); // 0x000000018026C070
	protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x000000018026C0A0
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr); // 0x000000018026C0D0
	public override Type GetNestedType(string name, BindingFlags bindingAttr); // 0x000000018026C100
	public override Type[] GetNestedTypes(BindingFlags bindingAttr); // 0x000000018026C130
	public override PropertyInfo[] GetProperties(BindingFlags bindingAttr); // 0x000000018026C160
	protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x000000018026C190
	protected override bool HasElementTypeImpl(); // 0x000000018015CC90
	public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters); // 0x000000018026C1C0
	protected override bool IsArrayImpl(); // 0x000000018026C1F0
	protected override bool IsByRefImpl(); // 0x000000018026C210
	protected override bool IsCOMObjectImpl(); // 0x000000018026C230
	public override bool IsDefined(Type attributeType, bool inherit); // 0x000000018026C250
	protected override bool IsPointerImpl(); // 0x000000018026C280
	protected override bool IsPrimitiveImpl(); // 0x000000018026C2A0
	protected override bool IsValueTypeImpl(); // 0x000000018026C2C0
}

// Namespace: System.Resources
public interface IResourceReader : IEnumerable, IDisposable // TypeDefIndex: 637
{
	// Methods
	void Close();
	IDictionaryEnumerator GetEnumerator();
}

// Namespace: System.Resources
public interface IResourceWriter : IDisposable // TypeDefIndex: 638
{
	// Methods
	void AddResource(string name, byte[] value);
	void AddResource(string name, object value);
	void AddResource(string name, string value);
	void Close();
	void Generate();
}

// Namespace: System.Resources
[Serializable]
public class MissingManifestResourceException : SystemException // TypeDefIndex: 639
{
	// Constructors
	public MissingManifestResourceException(); // 0x000000018025FFC0
	public MissingManifestResourceException(string message); // 0x000000018010E1E0
	protected MissingManifestResourceException(SerializationInfo info, StreamingContext context); // 0x000000018010E170
	public MissingManifestResourceException(string message, Exception inner); // 0x000000018010E1D0

}

// Namespace: System.Resources
[Serializable]
public class MissingSatelliteAssemblyException : SystemException // TypeDefIndex: 640
{
	// Fields
	private string culture; // 0x60

	// Properties
	public string CultureName { get; } // 0x0000000180114BE0 

	// Constructors
	public MissingSatelliteAssemblyException(); // 0x0000000180260010
	public MissingSatelliteAssemblyException(string message); // 0x000000018010E1E0
	public MissingSatelliteAssemblyException(string message, string cultureName); // 0x0000000180260060
	protected MissingSatelliteAssemblyException(SerializationInfo info, StreamingContext context); // 0x000000018010E170
	public MissingSatelliteAssemblyException(string message, Exception inner); // 0x000000018010E1D0

}

// Namespace: System.Resources
public sealed class NeutralResourcesLanguageAttribute : Attribute // TypeDefIndex: 641
{
	// Fields
	private string culture; // 0x10
	private UltimateResourceFallbackLocation loc; // 0x00

	// Properties
	public string CultureName { get; } // 0x00000001800E20D0 
	public UltimateResourceFallbackLocation Location { get; } // 0x00000001800ED060 

	// Constructors
	public NeutralResourcesLanguageAttribute(string cultureName); // 0x00000001802601B0
	public NeutralResourcesLanguageAttribute(string cultureName, UltimateResourceFallbackLocation location); // 0x0000000180260230

}

// Namespace: System.Resources
[Serializable]
public class ResourceManager // TypeDefIndex: 642
{
	// Fields
	private static Hashtable ResourceCache; // 0x00
	private static Hashtable NonExistent; // 0x10
	public static readonly int HeaderVersionNumber; // 0x10
	public static readonly int MagicNumber; // 0x20
	protected string BaseNameField; // 0x30
	protected Assembly MainAssembly; // 0x40
	protected Hashtable ResourceSets; // 0x50
	private bool ignoreCase; // 0x00
	private Type resourceSource; // 0x10
	private Type resourceSetType; // 0x00
	private string resourceDir; // 0x00
	private CultureInfo neutral_culture; // 0x00
	private UltimateResourceFallbackLocation fallbackLocation; // 0x00

	// Properties
	public virtual string BaseName { get; } // 0x00000001800E20D0 
	public virtual bool IgnoreCase { get; set; } // 0x00000001800EA930 0x00000001801799F0
	public virtual Type ResourceSetType { get; } // 0x0000000180119440 
	protected UltimateResourceFallbackLocation FallbackLocation { get; set; } // 0x0000000180264CC0 0x00000001800E4CB0

	// Constructors
	protected ResourceManager(); // 0x0000000180264840
	public ResourceManager(Type resourceSource); // 0x0000000180264B80
	public ResourceManager(string baseName, Assembly assembly); // 0x00000001802648B0
	public ResourceManager(string baseName, Assembly assembly, Type usingResourceSet); // 0x00000001802646D0
	private ResourceManager(string baseName, string resourceDir, Type usingResourceSet); // 0x0000000180264A00
	private static ResourceManager(); // 0x0000000180264600

	// Methods
	private static Hashtable GetResourceSets(Assembly assembly, string basename); // 0x00000001802630E0
	private Type CheckResourceSetType(Type usingResourceSet, bool verifyType); // 0x0000000180262510
	public static ResourceManager CreateFileBasedResourceManager(string baseName, string resourceDir, Type usingResourceSet); // 0x0000000180262610
	public virtual object GetObject(string name); // 0x0000000180262DD0
	public virtual object GetObject(string name, CultureInfo culture); // 0x0000000180262B20
	public virtual ResourceSet GetResourceSet(CultureInfo culture, bool createIfNotExists, bool tryParents); // 0x0000000180262FA0
	public virtual string GetString(string name); // 0x00000001801FE5E0
	public virtual string GetString(string name, CultureInfo culture); // 0x0000000180263800
	protected virtual string GetResourceFileName(CultureInfo culture); // 0x0000000180262DF0
	private string GetResourceFilePath(CultureInfo culture); // 0x0000000180262F10
	private Stream GetManifestResourceStreamNoCase(Assembly ass, string fn); // 0x00000001802628A0
	public UnmanagedMemoryStream GetStream(string name); // 0x00000001802635A0
	public UnmanagedMemoryStream GetStream(string name, CultureInfo culture); // 0x00000001802635B0
	protected virtual ResourceSet InternalGetResourceSet(CultureInfo culture, bool createIfNotExists, bool tryParents); // 0x0000000180263AB0
	public virtual void ReleaseAllResources(); // 0x0000000180264340
	protected static CultureInfo GetNeutralResourcesLanguage(Assembly a); // 0x0000000180262A00
	protected static Version GetSatelliteContractVersion(Assembly a); // 0x00000001802634A0
	private MissingManifestResourceException AssemblyResourceMissing(string fileName); // 0x00000001802623D0
	private string GetManifestResourceName(string fn); // 0x00000001802627C0
}

// Namespace: System.Resources
internal enum PredefinedResourceType // TypeDefIndex: 643
{
	Null = 0,
	String = 1,
	Bool = 2,
	Char = 3,
	Byte = 4,
	SByte = 5,
	Int16 = 6,
	UInt16 = 7,
	Int32 = 8,
	UInt32 = 9,
	Int64 = 10,
	UInt64 = 11,
	Single = 12,
	Double = 13,
	Decimal = 14,
	DateTime = 15,
	TimeSpan = 16,
	ByteArray = 32,
	Stream = 33,
	FistCustom = 64
}

// Namespace: System.Resources
public sealed class ResourceReader : IEnumerable, IDisposable, IResourceReader // TypeDefIndex: 644
{
	// Fields
	private BinaryReader reader; // 0x10
	private object readerLock; // 0x20
	private IFormatter formatter; // 0x2C
	internal int resourceCount; // 0x38
	private int typeCount; // 0x48
	private string[] typeNames; // 0x58
	private int[] hashes; // 0x68
	private ResourceInfo[] infos; // 0x10
	private int dataSectionOffset; // 0x20
	private long nameSectionOffset; // 0x10
	private int resource_ver; // 0x10
	private ResourceCacheItem[] cache; // 0x1C
	private object cache_lock; // 0x10

	// Constructors
	public ResourceReader(Stream stream); // 0x0000000180267600
	public ResourceReader(string fileName); // 0x00000001802677C0

	// Methods
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x00000001802675C0
	private void System.IDisposable.Dispose(); // 0x0000000180264CD0
	private void ReadHeaders(); // 0x0000000180265A70
	private void CreateResourceInfo(long position, ResourceInfo info); // 0x0000000180264D10
	private int Read7BitEncodedInt(); // 0x0000000180265A10
	private object ReadValueVer2(int type_index); // 0x0000000180266B40
	private object ReadValueVer1(Type type); // 0x00000001802664C0
	private object ReadNonPredefinedValue(Type exp_type); // 0x0000000180266380
	private void LoadResourceValues(ResourceCacheItem[] store); // 0x0000000180265700
	internal UnmanagedMemoryStream ResourceValueAsStream(string name, int index); // 0x0000000180267130
	public void Close(); // 0x0000000180264CD0
	public IDictionaryEnumerator GetEnumerator(); // 0x0000000180264FA0
	public void GetResourceData(string resourceName, out string resourceType, out byte[] resourceData); // 0x00000001802654D0
	private void GetResourceDataAt(int index, out string resourceType, out byte[] data); // 0x0000000180265040
	private void Dispose(bool disposing); // 0x0000000180264F50
}

// Namespace: 
private struct ResourceInfo // TypeDefIndex: 645
{
	// Fields
	public readonly long ValuePosition; // 0x10
	public readonly string ResourceName; // 0x20
	public readonly int TypeIndex; // 0x10

	// Constructors
	public ResourceInfo(string resourceName, long valuePosition, int type_index); // 0x000000018001A460

}

// Namespace: 
private struct ResourceCacheItem // TypeDefIndex: 646
{
	// Fields
	public readonly string ResourceName; // 0x10
	public readonly object ResourceValue; // 0x10

	// Constructors
	public ResourceCacheItem(string name, object value); // 0x0000000180008D40

}

// Namespace: 
internal sealed class ResourceEnumerator : IEnumerator, IDictionaryEnumerator // TypeDefIndex: 647
{
	// Fields
	private ResourceReader reader; // 0x10
	private int index; // 0x1C
	private bool finished; // 0x10

	// Properties
	public int Index { get; } // 0x00000001800ED060 
	public DictionaryEntry Entry { get; } // 0x0000000180261F50 
	public object Key { get; } // 0x0000000180262110 
	public object Value { get; } // 0x00000001802622F0 
	public UnmanagedMemoryStream ValueAsStream { get; } // 0x00000001802621F0 
	public object Current { get; } // 0x0000000180261EF0 

	// Constructors
	internal ResourceEnumerator(ResourceReader readerToEnumerate); // 0x0000000180261EB0

	// Methods
	public bool MoveNext(); // 0x0000000180261D90
	public void Reset(); // 0x0000000180261E30
	private void FillCache(); // 0x0000000180261C50
}

// Namespace: 
private sealed class <ResourceValueAsStream>c__AnonStorey2 // TypeDefIndex: 648
{
	// Fields
	internal IntPtr ptr; // 0x10

	// Constructors
	public <ResourceValueAsStream>c__AnonStorey2(); // 0x00000001800E2000

	// Methods
	internal void <>m__1(object o, EventArgs e); // 0x000000018026C540
}

// Namespace: System.Resources
[Serializable]
public class ResourceSet : IEnumerable, IDisposable // TypeDefIndex: 649
{
	// Fields
	[NonSerialized]	protected IResourceReader Reader; // 0x10
	protected Hashtable Table; // 0x20
	private bool resources_read; // 0x10
	[NonSerialized]	private bool disposed; // 0x10

	// Constructors
	protected ResourceSet(); // 0x00000001802685B0
	public ResourceSet(IResourceReader reader); // 0x0000000180268500
	public ResourceSet(Stream stream); // 0x0000000180268610
	internal ResourceSet(UnmanagedMemoryStream stream); // 0x00000001802682D0
	public ResourceSet(string fileName); // 0x0000000180268360

	// Methods
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x00000001802682B0
	public virtual void Close(); // 0x0000000180267900
	public void Dispose(); // 0x0000000180267900
	protected virtual void Dispose(bool disposing); // 0x0000000180267930
	public virtual Type GetDefaultReader(); // 0x0000000180267990
	public virtual Type GetDefaultWriter(); // 0x00000001802679F0
	public virtual IDictionaryEnumerator GetEnumerator(); // 0x0000000180267A50
	private object GetObjectInternal(string name, bool ignoreCase); // 0x0000000180267AF0
	public virtual object GetObject(string name); // 0x0000000180267E10
	public virtual object GetObject(string name, bool ignoreCase); // 0x0000000180267E00
	private string GetStringInternal(string name, bool ignoreCase); // 0x0000000180267FC0
	public virtual string GetString(string name); // 0x00000001802680A0
	public virtual string GetString(string name, bool ignoreCase); // 0x00000001802680B0
	protected virtual void ReadResources(); // 0x00000001802680C0
	internal UnmanagedMemoryStream GetStream(string name, bool ignoreCase); // 0x0000000180267E20
}

// Namespace: System.Resources
public sealed class ResourceWriter : IDisposable, IResourceWriter // TypeDefIndex: 650
{
	// Fields
	private SortedList resources; // 0x10
	private Stream stream; // 0x10

	// Properties
	internal Stream Stream { get; } // 0x00000001800EAEC0 

	// Constructors
	public ResourceWriter(Stream stream); // 0x000000018026AB00
	public ResourceWriter(string fileName); // 0x000000018026A9A0

	// Methods
	public void AddResource(string name, byte[] value); // 0x0000000180268920
	public void AddResource(string name, object value); // 0x0000000180268BE0
	public void AddResource(string name, string value); // 0x0000000180268A80
	public void Close(); // 0x0000000180268D40
	public void Dispose(); // 0x0000000180268D40
	private void Dispose(bool disposing); // 0x0000000180268D90
	public void AddResourceData(string name, string typeName, byte[] serializedData); // 0x00000001802686A0
	public void Generate(); // 0x0000000180268DF0
	private int GetHash(string name); // 0x000000018026A8D0
	private void Write7BitEncodedInt(BinaryWriter writer, int value); // 0x000000018026A930
}

// Namespace: 
private class TypeByNameObject // TypeDefIndex: 651
{
	// Fields
	public readonly string TypeName; // 0x10
	public readonly byte[] Value; // 0x10

	// Constructors
	public TypeByNameObject(string typeName, byte[] value); // 0x000000018026BD50

}

// Namespace: System.Resources
[Serializable]
internal class RuntimeResourceSet : ResourceSet // TypeDefIndex: 652
{
	// Constructors
	public RuntimeResourceSet(UnmanagedMemoryStream stream); // 0x00000001802682D0
	public RuntimeResourceSet(Stream stream); // 0x0000000180268610
	public RuntimeResourceSet(string fileName); // 0x0000000180268360

	// Methods
	public override object GetObject(string name); // 0x000000018026B020
	public override object GetObject(string name, bool ignoreCase); // 0x000000018026B0B0
	private object CloneDisposableObjectIfPossible(object value); // 0x000000018026AFA0
}

// Namespace: System.Resources
public sealed class SatelliteContractVersionAttribute : Attribute // TypeDefIndex: 653
{
	// Fields
	private Version ver; // 0x10

	// Properties
	public string Version { get; } // 0x000000018026B250 

	// Constructors
	public SatelliteContractVersionAttribute(string version); // 0x000000018026B1E0

}

// Namespace: System.Resources
[Serializable]
public enum UltimateResourceFallbackLocation // TypeDefIndex: 654
{
	MainAssembly = 0,
	Satellite = 1
}

// Namespace: System.Resources
internal enum Win32ResourceType // TypeDefIndex: 655
{
	RT_CURSOR = 1,
	RT_BITMAP = 2,
	RT_ICON = 3,
	RT_MENU = 4,
	RT_DIALOG = 5,
	RT_STRING = 6,
	RT_FONTDIR = 7,
	RT_FONT = 8,
	RT_ACCELERATOR = 9,
	RT_RCDATA = 10,
	RT_MESSAGETABLE = 11,
	RT_GROUP_CURSOR = 12,
	RT_GROUP_ICON = 14,
	RT_VERSION = 16,
	RT_DLGINCLUDE = 17,
	RT_PLUGPLAY = 19,
	RT_VXD = 20,
	RT_ANICURSOR = 21,
	RT_ANIICON = 22,
	RT_HTML = 23
}

// Namespace: System.Resources
internal class NameOrId // TypeDefIndex: 656
{
	// Fields
	private string name; // 0x10
	private int id; // 0x10

	// Properties
	public bool IsName { get; } // 0x0000000180158590 
	public string Name { get; } // 0x00000001800E20D0 
	public int Id { get; } // 0x00000001800ED060 

	// Constructors
	public NameOrId(string name); // 0x000000018015C840
	public NameOrId(int id); // 0x0000000180260180

	// Methods
	public override string ToString(); // 0x00000001802600B0
}

// Namespace: System.Resources
internal abstract class Win32Resource // TypeDefIndex: 657
{
	// Fields
	private NameOrId type; // 0x10
	private NameOrId name; // 0x20
	private int language; // 0x28

	// Properties
	public Win32ResourceType ResourceType { get; } // 0x000000018026DAD0 
	public NameOrId Name { get; } // 0x00000001800EAEC0 
	public NameOrId Type { get; } // 0x00000001800E20D0 
	public int Language { get; } // 0x00000001800E2F70 

	// Constructors
	internal Win32Resource(NameOrId type, NameOrId name, int language); // 0x00000001801AF1D0
	internal Win32Resource(Win32ResourceType type, int name, int language); // 0x000000018026DA20

	// Methods
	public abstract void WriteTo(Stream s);
	public override string ToString(); // 0x000000018026D790
}

// Namespace: System.Resources
internal class Win32EncodedResource : Win32Resource // TypeDefIndex: 658
{
	// Fields
	private byte[] data; // 0x28

	// Properties
	public byte[] Data { get; } // 0x000000018013BF80 

	// Constructors
	internal Win32EncodedResource(NameOrId type, NameOrId name, int language, byte[] data); // 0x000000018026C5F0

	// Methods
	public override void WriteTo(Stream s); // 0x000000018026C5A0
}

// Namespace: System.Resources
internal class Win32IconResource : Win32Resource // TypeDefIndex: 659
{
	// Fields
	private ICONDIRENTRY icon; // 0x28

	// Properties
	public ICONDIRENTRY Icon { get; } // 0x000000018013BF80 

	// Constructors
	public Win32IconResource(int id, int language, ICONDIRENTRY icon); // 0x000000018026CE00

	// Methods
	public override void WriteTo(Stream s); // 0x000000018026CDB0
}

// Namespace: System.Resources
internal class Win32GroupIconResource : Win32Resource // TypeDefIndex: 660
{
	// Fields
	private Win32IconResource[] icons; // 0x28

	// Constructors
	public Win32GroupIconResource(int id, int language, Win32IconResource[] icons); // 0x000000018026C8E0

	// Methods
	public override void WriteTo(Stream s); // 0x000000018026C640
}

// Namespace: System.Resources
internal class Win32VersionResource : Win32Resource // TypeDefIndex: 661
{
	// Fields
	public string[] WellKnownProperties; // 0x28
	private long signature; // 0x38
	private int struct_version; // 0x48
	private long file_version; // 0x54
	private long product_version; // 0x5C
	private int file_flags_mask; // 0x68
	private int file_flags; // 0x74
	private int file_os; // 0x10
	private int file_type; // 0x10
	private int file_subtype; // 0x12
	private long file_date; // 0x14
	private int file_lang; // 0x18
	private int file_codepage; // 0x20
	private Hashtable properties; // 0x10

	// Properties
	public string Version { get; set; } // 0x000000018026F050 0x000000018026FF20
	public virtual string Item { set; } // 0x000000018026F9F0
	public virtual string Comments { get; set; } // 0x000000018026EB40 0x000000018026F4E0
	public virtual string CompanyName { get; set; } // 0x000000018026EBC0 0x000000018026F590
	public virtual string LegalCopyright { get; set; } // 0x000000018026EDD0 0x000000018026FA20
	public virtual string LegalTrademarks { get; set; } // 0x000000018026EE50 0x000000018026FAD0
	public virtual string OriginalFilename { get; set; } // 0x000000018026EED0 0x000000018026FB80
	public virtual string ProductName { get; set; } // 0x000000018026EF50 0x000000018026FC30
	public virtual string ProductVersion { get; set; } // 0x000000018026EFD0 0x000000018026FCE0
	public virtual string InternalName { get; set; } // 0x000000018026ED50 0x000000018026F940
	public virtual string FileDescription { get; set; } // 0x000000018026EC40 0x000000018026F640
	public virtual int FileLanguage { get; set; } // 0x000000018026ECC0 0x000000018026F6F0
	public virtual string FileVersion { get; set; } // 0x000000018026ECD0 0x000000018026F700

	// Constructors
	public Win32VersionResource(int id, int language, bool compilercontext); // 0x000000018026E5F0

	// Methods
	private void emit_padding(BinaryWriter w); // 0x000000018026EAC0
	private void patch_length(BinaryWriter w, long len_pos); // 0x000000018026F420
	public override void WriteTo(Stream ms); // 0x000000018026DB00
}

// Namespace: System.Resources
internal class Win32ResFileReader // TypeDefIndex: 662
{
	// Fields
	private Stream res_file; // 0x10

	// Constructors
	public Win32ResFileReader(Stream s); // 0x000000018015C840

	// Methods
	private int read_int16(); // 0x000000018026D3F0
	private int read_int32(); // 0x000000018026D470
	private void read_padding(); // 0x000000018026D700
	private NameOrId read_ordinal(); // 0x000000018026D4C0
	public ICollection ReadResources(); // 0x000000018026CE40
}

// Namespace: System.Resources
internal class ICONDIRENTRY // TypeDefIndex: 663
{
	// Fields
	public byte bWidth; // 0x10
	public byte bHeight; // 0x12
	public byte bColorCount; // 0x14
	public byte bReserved; // 0x18
	public short wPlanes; // 0x20
	public short wBitCount; // 0x10
	public int dwBytesInRes; // 0x10
	public int dwImageOffset; // 0x10
	public byte[] image; // 0x10

	// Constructors
	public ICONDIRENTRY(); // 0x00000001800E2000

	// Methods
	public override string ToString(); // 0x000000018025B0E0
}

// Namespace: System.Resources
internal class Win32IconFileReader // TypeDefIndex: 664
{
	// Fields
	private Stream iconFile; // 0x10

	// Constructors
	public Win32IconFileReader(Stream s); // 0x000000018015C840

	// Methods
	public ICONDIRENTRY[] ReadIcons(); // 0x000000018026C920
}

// Namespace: System.Runtime.CompilerServices
public sealed class AccessedThroughPropertyAttribute : Attribute // TypeDefIndex: 665
{
	// Fields
	private string name; // 0x10

	// Properties
	public string PropertyName { get; } // 0x00000001800E20D0 

	// Constructors
	public AccessedThroughPropertyAttribute(string propertyName); // 0x00000001801137E0

}

// Namespace: System.Runtime.CompilerServices
public class CallConvCdecl // TypeDefIndex: 666
{
	// Constructors
	public CallConvCdecl(); // 0x00000001800E2000

}

// Namespace: System.Runtime.CompilerServices
public class CallConvFastcall // TypeDefIndex: 667
{
	// Constructors
	public CallConvFastcall(); // 0x00000001800E2000

}

// Namespace: System.Runtime.CompilerServices
public class CallConvStdcall // TypeDefIndex: 668
{
	// Constructors
	public CallConvStdcall(); // 0x00000001800E2000

}

// Namespace: System.Runtime.CompilerServices
public class CallConvThiscall // TypeDefIndex: 669
{
	// Constructors
	public CallConvThiscall(); // 0x00000001800E2000

}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public enum CompilationRelaxations // TypeDefIndex: 670
{
	NoStringInterning = 8
}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public class CompilationRelaxationsAttribute : Attribute // TypeDefIndex: 671
{
	// Fields
	private int relax; // 0x10

	// Properties
	public int CompilationRelaxations { get; } // 0x00000001800ECD10 

	// Constructors
	public CompilationRelaxationsAttribute(int relaxations); // 0x000000018010E510
	public CompilationRelaxationsAttribute(CompilationRelaxations relaxations); // 0x000000018010E510

}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public class CompilerGlobalScopeAttribute : Attribute // TypeDefIndex: 672
{
	// Constructors
	public CompilerGlobalScopeAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Runtime.CompilerServices
public static class CompilerMarshalOverride // TypeDefIndex: 673
{
}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public abstract class CustomConstantAttribute : Attribute // TypeDefIndex: 674
{
	// Properties
	public abstract object Value { get; }

	// Constructors
	protected CustomConstantAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class DateTimeConstantAttribute : CustomConstantAttribute // TypeDefIndex: 675
{
	// Fields
	private long ticks; // 0x10

	// Properties
	internal long Ticks { get; } // 0x00000001800E20D0 
	public override object Value { get; } // 0x000000018025A990 

	// Constructors
	public DateTimeConstantAttribute(long ticks); // 0x00000001801137E0

}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class DefaultDependencyAttribute : Attribute // TypeDefIndex: 676
{
	// Fields
	private LoadHint hint; // 0x10

	// Properties
	public LoadHint LoadHint { get; } // 0x00000001800ECD10 

	// Constructors
	public DefaultDependencyAttribute(LoadHint loadHintArgument); // 0x000000018010E510

}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class DependencyAttribute : Attribute // TypeDefIndex: 677
{
	// Fields
	private string dependentAssembly; // 0x10
	private LoadHint hint; // 0x10

	// Properties
	public string DependentAssembly { get; } // 0x00000001800E20D0 
	public LoadHint LoadHint { get; } // 0x00000001800ED060 

	// Constructors
	public DependencyAttribute(string dependentAssemblyArgument, LoadHint loadHintArgument); // 0x000000018025AB70

}

// Namespace: System.Runtime.CompilerServices
public class DiscardableAttribute : Attribute // TypeDefIndex: 678
{
	// Constructors
	public DiscardableAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class FixedAddressValueTypeAttribute : Attribute // TypeDefIndex: 679
{
	// Constructors
	public FixedAddressValueTypeAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class HasCopySemanticsAttribute : Attribute // TypeDefIndex: 680
{
	// Constructors
	public HasCopySemanticsAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class IDispatchConstantAttribute : CustomConstantAttribute // TypeDefIndex: 681
{
	// Properties
	public override object Value { get; } // 0x00000001800EA8C0 

	// Constructors
	public IDispatchConstantAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class IUnknownConstantAttribute : CustomConstantAttribute // TypeDefIndex: 682
{
	// Properties
	public override object Value { get; } // 0x00000001800EA8C0 

	// Constructors
	public IUnknownConstantAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Runtime.CompilerServices
public static class IsBoxed // TypeDefIndex: 683
{
}

// Namespace: System.Runtime.CompilerServices
public static class IsByValue // TypeDefIndex: 684
{
}

// Namespace: System.Runtime.CompilerServices
public static class IsConst // TypeDefIndex: 685
{
}

// Namespace: System.Runtime.CompilerServices
public static class IsCopyConstructed // TypeDefIndex: 686
{
}

// Namespace: System.Runtime.CompilerServices
public static class IsExplicitlyDereferenced // TypeDefIndex: 687
{
}

// Namespace: System.Runtime.CompilerServices
public static class IsImplicitlyDereferenced // TypeDefIndex: 688
{
}

// Namespace: System.Runtime.CompilerServices
public static class IsJitIntrinsic // TypeDefIndex: 689
{
}

// Namespace: System.Runtime.CompilerServices
public static class IsLong // TypeDefIndex: 690
{
}

// Namespace: System.Runtime.CompilerServices
public static class IsPinned // TypeDefIndex: 691
{
}

// Namespace: System.Runtime.CompilerServices
public static class IsSignUnspecifiedByte // TypeDefIndex: 692
{
}

// Namespace: System.Runtime.CompilerServices
public static class IsUdtReturn // TypeDefIndex: 693
{
}

// Namespace: System.Runtime.CompilerServices
public static class IsVolatile // TypeDefIndex: 694
{
}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public enum LoadHint // TypeDefIndex: 695
{
	Default = 0,
	Always = 1,
	Sometimes = 2
}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public enum MethodCodeType // TypeDefIndex: 696
{
	IL = 0,
	Native = 1,
	OPTIL = 2,
	Runtime = 3
}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public enum MethodImplOptions // TypeDefIndex: 697
{
	Unmanaged = 4,
	NoInlining = 8,
	ForwardRef = 16,
	Synchronized = 32,
	NoOptimization = 64,
	PreserveSig = 128,
	InternalCall = 4096
}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class NativeCppClassAttribute : Attribute // TypeDefIndex: 698
{
	// Constructors
	public NativeCppClassAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class RuntimeWrappedException : Exception // TypeDefIndex: 699
{
	// Fields
	private object wrapped_exception; // 0x60

	// Properties
	public object WrappedException { get; } // 0x0000000180114BE0 

	// Constructors
	private RuntimeWrappedException(); // 0x000000018026B1D0

	// Methods
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x000000018026B150
}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class ScopelessEnumAttribute : Attribute // TypeDefIndex: 700
{
	// Constructors
	public ScopelessEnumAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Runtime.CompilerServices
public sealed class SpecialNameAttribute : Attribute // TypeDefIndex: 701
{
	// Constructors
	public SpecialNameAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Runtime.CompilerServices
[Serializable]
public sealed class StringFreezingAttribute : Attribute // TypeDefIndex: 702
{
	// Constructors
	public StringFreezingAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Runtime.CompilerServices
public sealed class SuppressIldasmAttribute : Attribute // TypeDefIndex: 703
{
	// Constructors
	public SuppressIldasmAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Runtime.ConstrainedExecution
[Serializable]
public enum Cer // TypeDefIndex: 704
{
	None = 0,
	MayFail = 1,
	Success = 2
}

// Namespace: System.Runtime.ConstrainedExecution
[Serializable]
public enum Consistency // TypeDefIndex: 705
{
	MayCorruptProcess = 0,
	MayCorruptAppDomain = 1,
	MayCorruptInstance = 2,
	WillNotCorruptState = 3
}

// Namespace: System.Runtime.ConstrainedExecution
public abstract class CriticalFinalizerObject // TypeDefIndex: 706
{
	// Constructors
	protected CriticalFinalizerObject(); // 0x00000001800E2000

	// Methods
	protected override void Finalize(); // 0x000000018021D4B0
}

// Namespace: System.Runtime.ConstrainedExecution
public sealed class PrePrepareMethodAttribute : Attribute // TypeDefIndex: 707
{
	// Constructors
	public PrePrepareMethodAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Runtime.ConstrainedExecution
public sealed class ReliabilityContractAttribute : Attribute // TypeDefIndex: 708
{
	// Fields
	private Consistency consistency; // 0x10
	private Cer cer; // 0x10

	// Properties
	public Cer Cer { get; } // 0x0000000180156360 
	public Consistency ConsistencyGuarantee { get; } // 0x00000001800ECD10 

	// Constructors
	public ReliabilityContractAttribute(Consistency consistencyGuarantee, Cer cer); // 0x00000001801562F0

}

// Namespace: System.Runtime.Hosting
[Serializable]
public sealed class ActivationArguments // TypeDefIndex: 709
{
	// Fields
	private ActivationContext _context; // 0x10
	private ApplicationIdentity _identity; // 0x20
	private string[] _data; // 0x10

	// Properties
	public ActivationContext ActivationContext { get; } // 0x00000001800E20D0 
	public string[] ActivationData { get; } // 0x00000001800EAEB0 
	public ApplicationIdentity ApplicationIdentity { get; } // 0x00000001800EAEC0 

	// Constructors
	public ActivationArguments(ActivationContext activationData); // 0x0000000180259880
	public ActivationArguments(ApplicationIdentity applicationIdentity); // 0x0000000180259910
	public ActivationArguments(ActivationContext activationContext, string[] activationData); // 0x00000001802597E0
	public ActivationArguments(ApplicationIdentity applicationIdentity, string[] activationData); // 0x0000000180259990

}

// Namespace: System.Runtime.Hosting
public class ApplicationActivator // TypeDefIndex: 710
{
	// Constructors
	public ApplicationActivator(); // 0x00000001800E2000

	// Methods
	public virtual ObjectHandle CreateInstance(ActivationContext activationContext); // 0x0000000180259CA0
	public virtual ObjectHandle CreateInstance(ActivationContext activationContext, string[] activationCustomData); // 0x0000000180259CC0
	protected static ObjectHandle CreateInstanceHelper(AppDomainSetup adSetup); // 0x0000000180259A20
}

// Namespace: System.Runtime.InteropServices.ComTypes
public struct BINDPTR // TypeDefIndex: 711
{
	// Fields
	public IntPtr lpfuncdesc; // 0x10
	public IntPtr lptcomp; // 0x10
	public IntPtr lpvardesc; // 0x10

}

// Namespace: System.Runtime.InteropServices.ComTypes
public struct BIND_OPTS // TypeDefIndex: 712
{
	// Fields
	public int cbStruct; // 0x10
	public int grfFlags; // 0x18
	public int grfMode; // 0x10
	public int dwTickCountDeadline; // 0x00

}

// Namespace: System.Runtime.InteropServices.ComTypes
[Serializable]
public enum CALLCONV // TypeDefIndex: 713
{
	CC_CDECL = 1,
	CC_PASCAL = 2,
	CC_MSCPASCAL = 2,
	CC_MACPASCAL = 3,
	CC_STDCALL = 4,
	CC_RESERVED = 5,
	CC_SYSCALL = 6,
	CC_MPWCDECL = 7,
	CC_MPWPASCAL = 8,
	CC_MAX = 9
}

// Namespace: System.Runtime.InteropServices.ComTypes
public struct CONNECTDATA // TypeDefIndex: 714
{
	// Fields
	public object pUnk; // 0x10
	public int dwCookie; // 0x10

}

// Namespace: System.Runtime.InteropServices.ComTypes
[Serializable]
public enum DESCKIND // TypeDefIndex: 715
{
	DESCKIND_NONE = 0,
	DESCKIND_FUNCDESC = 1,
	DESCKIND_VARDESC = 2,
	DESCKIND_TYPECOMP = 3,
	DESCKIND_IMPLICITAPPOBJ = 4,
	DESCKIND_MAX = 5
}

// Namespace: System.Runtime.InteropServices.ComTypes
public struct DISPPARAMS // TypeDefIndex: 716
{
	// Fields
	public IntPtr rgvarg; // 0x10
	public IntPtr rgdispidNamedArgs; // 0x20
	public int cArgs; // 0x10
	public int cNamedArgs; // 0x10

}

// Namespace: System.Runtime.InteropServices.ComTypes
public struct ELEMDESC // TypeDefIndex: 717
{
	// Fields
	public TYPEDESC tdesc; // 0x10
	public DESCUNION desc; // 0x10

}

// Namespace: 
public struct DESCUNION // TypeDefIndex: 718
{
	// Fields
	public IDLDESC idldesc; // 0x10
	public PARAMDESC paramdesc; // 0x10

}

// Namespace: System.Runtime.InteropServices.ComTypes
public struct EXCEPINFO // TypeDefIndex: 719
{
	// Fields
	public short wCode; // 0x10
	public short wReserved; // 0x18
	public string bstrSource; // 0x28
	public string bstrDescription; // 0x38
	public string bstrHelpFile; // 0x48
	public int dwHelpContext; // 0x10
	public IntPtr pvReserved; // 0x10
	public IntPtr pfnDeferredFillIn; // 0x20
	public int scode; // 0x2C

}

// Namespace: System.Runtime.InteropServices.ComTypes
public struct FILETIME // TypeDefIndex: 720
{
	// Fields
	public int dwLowDateTime; // 0x10
	public int dwHighDateTime; // 0x10

}

// Namespace: System.Runtime.InteropServices.ComTypes
public struct FUNCDESC // TypeDefIndex: 721
{
	// Fields
	public int memid; // 0x10
	public IntPtr lprgscode; // 0x20
	public IntPtr lprgelemdescParam; // 0x2C
	public FUNCKIND funckind; // 0x34
	public INVOKEKIND invkind; // 0x38
	public CALLCONV callconv; // 0x40
	public short cParams; // 0x10
	public short cParamsOpt; // 0x00
	public short oVft; // 0x00
	public short cScodes; // 0x00
	public ELEMDESC elemdescFunc; // 0x00
	public short wFuncFlags; // 0x00

}

// Namespace: System.Runtime.InteropServices.ComTypes
[Serializable]
public enum FUNCFLAGS // TypeDefIndex: 722
{
	FUNCFLAG_FRESTRICTED = 1,
	FUNCFLAG_FSOURCE = 2,
	FUNCFLAG_FBINDABLE = 4,
	FUNCFLAG_FREQUESTEDIT = 8,
	FUNCFLAG_FDISPLAYBIND = 16,
	FUNCFLAG_FDEFAULTBIND = 32,
	FUNCFLAG_FHIDDEN = 64,
	FUNCFLAG_FUSESGETLASTERROR = 128,
	FUNCFLAG_FDEFAULTCOLLELEM = 256,
	FUNCFLAG_FUIDEFAULT = 512,
	FUNCFLAG_FNONBROWSABLE = 1024,
	FUNCFLAG_FREPLACEABLE = 2048,
	FUNCFLAG_FIMMEDIATEBIND = 4096
}

// Namespace: System.Runtime.InteropServices.ComTypes
[Serializable]
public enum FUNCKIND // TypeDefIndex: 723
{
	FUNC_VIRTUAL = 0,
	FUNC_PUREVIRTUAL = 1,
	FUNC_NONVIRTUAL = 2,
	FUNC_STATIC = 3,
	FUNC_DISPATCH = 4
}

// Namespace: System.Runtime.InteropServices.ComTypes
[ComImport]public interface IBindCtx // TypeDefIndex: 724
{
	// Methods
	void RegisterObjectBound(object punk); // 0x000000018025AE40
	void RevokeObjectBound(object punk); // 0x000000018025AFC0
	void ReleaseBoundObjects(); // 0x000000018025AF90
	void SetBindOptions(BIND_OPTS pbindopts); // 0x000000018025B0A0
	void GetBindOptions(BIND_OPTS pbindopts); // 0x000000018025AC70
	void GetRunningObjectTable(out IRunningObjectTable pprot); // 0x000000018025AD80
	void RegisterObjectParam(string pszKey, object punk); // 0x000000018025AED0
	void GetObjectParam(string pszKey, out object ppunk); // 0x000000018025ACB0
	void EnumObjectParam(out IEnumString ppenum); // 0x000000018025ABB0
	int RevokeObjectParam(string pszKey); // 0x000000018025B050
}

// Namespace: System.Runtime.InteropServices.ComTypes
[ComImport]public interface IConnectionPoint // TypeDefIndex: 725
{
	// Methods
	void GetConnectionInterface(out Guid pIID); // 0x000000018025B720
	void GetConnectionPointContainer(out IConnectionPointContainer ppCPC); // 0x000000018025B760
	void Advise(object pUnkSink, out int pdwCookie); // 0x000000018025B5C0
	void Unadvise(int dwCookie); // 0x000000018025B820
	void EnumConnections(out IEnumConnections ppEnum); // 0x000000018025B660
}

// Namespace: System.Runtime.InteropServices.ComTypes
[ComImport]public interface IConnectionPointContainer // TypeDefIndex: 726
{
	// Methods
	void EnumConnectionPoints(out IEnumConnectionPoints ppEnum); // 0x000000018025B430
	void FindConnectionPoint(Guid riid, out IConnectionPoint ppCP); // 0x000000018025B4F0
}

// Namespace: System.Runtime.InteropServices.ComTypes
public struct IDLDESC // TypeDefIndex: 727
{
	// Fields
	public IntPtr dwReserved; // 0x10
	public IDLFLAG wIDLFlags; // 0x10

}

// Namespace: System.Runtime.InteropServices.ComTypes
[Serializable]
public enum IDLFLAG // TypeDefIndex: 728
{
	IDLFLAG_NONE = 0,
	IDLFLAG_FIN = 1,
	IDLFLAG_FOUT = 2,
	IDLFLAG_FLCID = 4,
	IDLFLAG_FRETVAL = 8
}

// Namespace: System.Runtime.InteropServices.ComTypes
[ComImport]public interface IEnumConnectionPoints // TypeDefIndex: 729
{
	// Methods
	int Next(int celt, out IConnectionPoint[] rgelt, IntPtr pceltFetched); // 0x000000018025B920
	int Skip(int celt); // 0x000000018025B970
	void Reset(); // 0x000000018025B940
	void Clone(out IEnumConnectionPoints ppenum); // 0x000000018025B860
}

// Namespace: System.Runtime.InteropServices.ComTypes
[ComImport]public interface IEnumConnections // TypeDefIndex: 730
{
	// Methods
	int Next(int celt, out CONNECTDATA[] rgelt, IntPtr pceltFetched); // 0x000000018025BA80
	int Skip(int celt); // 0x000000018025BC60
	void Reset(); // 0x000000018025BC30
	void Clone(out IEnumConnections ppenum); // 0x000000018025B9C0
}

// Namespace: System.Runtime.InteropServices.ComTypes
[ComImport]public interface IEnumMoniker // TypeDefIndex: 731
{
	// Methods
	int Next(int celt, out IMoniker[] rgelt, IntPtr pceltFetched); // 0x000000018025BD70
	int Skip(int celt); // 0x000000018025BDC0
	void Reset(); // 0x000000018025BD90
	void Clone(out IEnumMoniker ppenum); // 0x000000018025BCB0
}

// Namespace: System.Runtime.InteropServices.ComTypes
[ComImport]public interface IEnumString // TypeDefIndex: 732
{
	// Methods
	int Next(int celt, out string[] rgelt, IntPtr pceltFetched); // 0x000000018025BED0
	int Skip(int celt); // 0x000000018025C010
	void Reset(); // 0x000000018025BFE0
	void Clone(out IEnumString ppenum); // 0x000000018025BE10
}

// Namespace: System.Runtime.InteropServices.ComTypes
[ComImport]public interface IEnumVARIANT // TypeDefIndex: 733
{
	// Methods
	int Next(int celt, out object[] rgVar, IntPtr pceltFetched); // 0x000000018025C110
	int Skip(int celt); // 0x000000018025C180
	int Reset(); // 0x000000018025C130
	IEnumVARIANT Clone(); // 0x000000018025C060
}

// Namespace: System.Runtime.InteropServices.ComTypes
[Serializable]
public enum IMPLTYPEFLAGS // TypeDefIndex: 734
{
	IMPLTYPEFLAG_FDEFAULT = 1,
	IMPLTYPEFLAG_FSOURCE = 2,
	IMPLTYPEFLAG_FRESTRICTED = 4,
	IMPLTYPEFLAG_FDEFAULTVTABLE = 8
}

// Namespace: System.Runtime.InteropServices.ComTypes
[ComImport]public interface IMoniker // TypeDefIndex: 735
{
	// Methods
	void GetClassID(out Guid pClassID); // 0x000000018025C7F0
	int IsDirty(); // 0x000000018025CBA0
	void Load(IStream pStm); // 0x000000018025CE30
	void Save(IStream pStm, bool fClearDirty); // 0x000000018025D350
	void GetSizeMax(out long pcbSize); // 0x000000018025C950
	void BindToObject(IBindCtx pbc, IMoniker pmkToLeft, Guid riidResult, out object ppvResult); // 0x000000018025C1D0
	void BindToStorage(IBindCtx pbc, IMoniker pmkToLeft, Guid riid, out object ppvObj); // 0x000000018025C350
	void Reduce(IBindCtx pbc, int dwReduceHowFar, IMoniker ppmkToLeft, out IMoniker ppmkReduced); // 0x000000018025D050
	void ComposeWith(IMoniker pmkRight, bool fOnlyIfNotGeneric, out IMoniker ppmkComposite); // 0x000000018025C600
	void Enum(bool fForward, out IEnumMoniker ppenumMoniker); // 0x000000018025C720
	int IsEqual(IMoniker pmkOtherMoniker); // 0x000000018025CBF0
	void Hash(out int pdwHash); // 0x000000018025CAA0
	int IsRunning(IBindCtx pbc, IMoniker pmkToLeft, IMoniker pmkNewlyRunning); // 0x000000018025CC90
	void GetTimeOfLastChange(IBindCtx pbc, IMoniker pmkToLeft, out FILETIME pFileTime); // 0x000000018025C990
	void Inverse(out IMoniker ppmk); // 0x000000018025CAE0
	void CommonPrefixWith(IMoniker pmkOther, out IMoniker ppmkPrefix); // 0x000000018025C4D0
	void RelativePathTo(IMoniker pmkOther, out IMoniker ppmkRelPath); // 0x000000018025D220
	void GetDisplayName(IBindCtx pbc, IMoniker pmkToLeft, out string ppszDisplayName); // 0x000000018025C830
	void ParseDisplayName(IBindCtx pbc, IMoniker pmkToLeft, string pszDisplayName, out int pchEaten, out IMoniker ppmkOut); // 0x000000018025CEC0
	int IsSystemMoniker(out int pdwMksys); // 0x000000018025CDE0
}

// Namespace: System.Runtime.InteropServices.ComTypes
[Serializable]
public enum INVOKEKIND // TypeDefIndex: 736
{
	INVOKE_FUNC = 1,
	INVOKE_PROPERTYGET = 2,
	INVOKE_PROPERTYPUT = 4,
	INVOKE_PROPERTYPUTREF = 8
}

// Namespace: System.Runtime.InteropServices.ComTypes
[ComImport]public interface IPersistFile // TypeDefIndex: 737
{
	// Methods
	void GetClassID(out Guid pClassID); // 0x000000018025D3F0
	int IsDirty(); // 0x000000018025D490
	void Load(string pszFileName, int dwMode); // 0x000000018025D4E0
	void Save(string pszFileName, bool fRemember); // 0x000000018025D590
	void SaveCompleted(string pszFileName); // 0x000000018025D540
	void GetCurFile(out string ppszFileName); // 0x000000018025D430
}

// Namespace: System.Runtime.InteropServices.ComTypes
[ComImport]public interface IRunningObjectTable // TypeDefIndex: 738
{
	// Methods
	int Register(int grfFlags, object punkObject, IMoniker pmkObjectName); // 0x000000018025D980
	void Revoke(int dwRegister); // 0x000000018025DA80
	int IsRunning(IMoniker pmkObjectName); // 0x000000018025D890
	int GetObject(IMoniker pmkObjectName, out object ppunkObject); // 0x000000018025D6B0
	void NoteChangeTime(int dwRegister, FILETIME pfiletime); // 0x000000018025D930
	int GetTimeOfLastChange(IMoniker pmkObjectName, out FILETIME pfiletime); // 0x000000018025D7E0
	void EnumRunning(out IEnumMoniker ppenumMoniker); // 0x000000018025D5F0
}

// Namespace: System.Runtime.InteropServices.ComTypes
[ComImport]public interface IStream // TypeDefIndex: 739
{
	// Methods
	void Read(out byte[] pv, int cb, IntPtr pcbRead); // 0x000000018025DCE0
	void Write(byte[] pv, int cb, IntPtr pcbWritten); // 0x000000018025DFC0
	void Seek(long dlibMove, int dwOrigin, IntPtr plibNewPosition); // 0x000000018025DDE0
	void SetSize(long libNewSize); // 0x000000018025DE40
	void CopyTo(IStream pstm, long cb, IntPtr pcbRead, IntPtr pcbWritten); // 0x000000018025DBC0
	void Commit(int grfCommitFlags); // 0x000000018025DB80
	void Revert(); // 0x000000018025DDB0
	void LockRegion(long libOffset, long cb, int dwLockType); // 0x000000018025DC80
	void UnlockRegion(long libOffset, long cb, int dwLockType); // 0x000000018025DF60
	void Stat(out STATSTG pstatstg, int grfStatFlag); // 0x000000018025DE80
	void Clone(out IStream ppstm); // 0x000000018025DAC0
}

// Namespace: System.Runtime.InteropServices.ComTypes
[ComImport]public interface ITypeComp // TypeDefIndex: 740
{
	// Methods
	void Bind(string szName, int lHashVal, short wFlags, out ITypeInfo ppTInfo, out DESCKIND pDescKind, out BINDPTR pBindPtr); // 0x000000018025E180
	void BindType(string szName, int lHashVal, out ITypeInfo ppTInfo, out ITypeComp ppTComp); // 0x000000018025E030
}

// Namespace: System.Runtime.InteropServices.ComTypes
[ComImport]public interface ITypeInfo // TypeDefIndex: 741
{
	// Methods
	void GetTypeAttr(out IntPtr ppTypeAttr); // 0x000000018025FCA0
	void GetTypeComp(out ITypeComp ppTComp); // 0x000000018025FCE0
	void GetFuncDesc(int index, out IntPtr ppFuncDesc); // 0x000000018025F7F0
	void GetVarDesc(int index, out IntPtr ppVarDesc); // 0x000000018025FDA0
	void GetNames(int memid, out string[] rgBstrNames, int cMaxNames, out int pcNames); // 0x000000018025FA70
	void GetRefTypeOfImplType(int index, out int href); // 0x000000018025FC50
	void GetImplTypeFlags(int index, out IMPLTYPEFLAGS pImplTypeFlags); // 0x000000018025F9B0
	void GetIDsOfNames(string[] rgszNames, int cNames, out int[] pMemId); // 0x000000018025F840
	void Invoke(object pvInstance, int memid, short wFlags, DISPPARAMS pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, out int puArgErr); // 0x000000018025FDF0
	void GetDocumentation(int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile); // 0x000000018025F700
	void GetDllEntry(int memid, INVOKEKIND invKind, IntPtr pBstrDllName, IntPtr pBstrName, IntPtr pwOrdinal); // 0x000000018025F690
	void GetRefTypeInfo(int hRef, out ITypeInfo ppTI); // 0x000000018025FB80
	void AddressOfMember(int memid, INVOKEKIND invKind, out IntPtr ppv); // 0x000000018025F430
	void CreateInstance(object pUnkOuter, Guid riid, out object ppvObj); // 0x000000018025F490
	void GetMops(int memid, out string pBstrMops); // 0x000000018025FA00
	void GetContainingTypeLib(out ITypeLib ppTLB, out int pIndex); // 0x000000018025F5C0
	void ReleaseTypeAttr(IntPtr pTypeAttr); // 0x000000018025FF10
	void ReleaseFuncDesc(IntPtr pFuncDesc); // 0x000000018025FED0
	void ReleaseVarDesc(IntPtr pVarDesc); // 0x000000018025FF50
}

// Namespace: System.Runtime.InteropServices.ComTypes
[ComImport]public interface ITypeInfo2 : ITypeInfo // TypeDefIndex: 742
{
	// Methods
	void AddressOfMember(int memid, INVOKEKIND invKind, out IntPtr ppv); // 0x000000018025E290
	void CreateInstance(object pUnkOuter, Guid riid, out object ppvObj); // 0x000000018025E2F0
	void GetContainingTypeLib(out ITypeLib ppTLB, out int pIndex); // 0x000000018025E5A0
	void GetDllEntry(int memid, INVOKEKIND invKind, IntPtr pBstrDllName, IntPtr pBstrName, IntPtr pwOrdinal); // 0x000000018025E6F0
	void GetDocumentation(int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile); // 0x000000018025E820
	void GetIDsOfNames(string[] rgszNames, int cNames, out int[] pMemId); // 0x000000018025EA50
	void GetImplTypeFlags(int index, out IMPLTYPEFLAGS pImplTypeFlags); // 0x000000018025EC50
	void GetTypeKind(out TYPEKIND pTypeKind); // 0x000000018025F120
	void GetTypeFlags(out int pTypeFlags); // 0x000000018025F0E0
	void GetFuncDesc(int index, out IntPtr ppFuncDesc); // 0x000000018025E9A0
	void GetMops(int memid, out string pBstrMops); // 0x000000018025ECA0
	void GetNames(int memid, out string[] rgBstrNames, int cMaxNames, out int pcNames); // 0x000000018025ED10
	void GetRefTypeInfo(int hRef, out ITypeInfo ppTI); // 0x000000018025EEC0
	void GetRefTypeOfImplType(int index, out int href); // 0x000000018025EF90
	void GetTypeAttr(out IntPtr ppTypeAttr); // 0x000000018025EFE0
	void GetTypeComp(out ITypeComp ppTComp); // 0x000000018025F020
	void GetVarDesc(int index, out IntPtr ppVarDesc); // 0x000000018025F1F0
	void GetFuncIndexOfMemId(int memid, INVOKEKIND invKind, out int pFuncIndex); // 0x000000018025E9F0
	void GetVarIndexOfMemId(int memid, out int pVarIndex); // 0x000000018025F240
	void GetCustData(Guid guid, out object pVarVal); // 0x000000018025E670
	void GetFuncCustData(int index, Guid guid, out object pVarVal); // 0x000000018025E910
	void GetParamCustData(int indexFunc, int indexParam, Guid guid, out object pVarVal); // 0x000000018025EE20
	void GetVarCustData(int index, Guid guid, out object pVarVal); // 0x000000018025F160
	void GetImplTypeCustData(int index, Guid guid, out object pVarVal); // 0x000000018025EBC0
	void GetDocumentation2(int memid, out string pbstrHelpString, out int pdwHelpStringContext, out string pbstrHelpStringDll); // 0x000000018025E760
	void GetAllCustData(IntPtr pCustData); // 0x000000018025E410
	void GetAllFuncCustData(int index, IntPtr pCustData); // 0x000000018025E450
	void GetAllParamCustData(int indexFunc, int indexParam, IntPtr pCustData); // 0x000000018025E4F0
	void GetAllVarCustData(int index, IntPtr pCustData); // 0x000000018025E550
	void GetAllImplTypeCustData(int index, IntPtr pCustData); // 0x000000018025E4A0
	void Invoke(object pvInstance, int memid, short wFlags, DISPPARAMS pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, out int puArgErr); // 0x000000018025F290
	void ReleaseTypeAttr(IntPtr pTypeAttr); // 0x000000018025F3B0
	void ReleaseFuncDesc(IntPtr pFuncDesc); // 0x000000018025F370
	void ReleaseVarDesc(IntPtr pVarDesc); // 0x000000018025F3F0
}

// Namespace: System.Runtime.InteropServices.ComTypes
[ComImport]public interface ITypeLib // TypeDefIndex: 743
{
	// Methods
	int GetTypeInfoCount(); // 0x00000001801EAB30
	void GetTypeInfo(int index, out ITypeInfo ppTI); // 0x00000001801EACA0
	void GetTypeInfoType(int index, out TYPEKIND pTKind); // 0x00000001801EAC50
	void GetTypeInfoOfGuid(Guid guid, out ITypeInfo ppTInfo); // 0x00000001801EAB80
	void GetLibAttr(out IntPtr ppTLibAttr); // 0x00000001801EAA30
	void GetTypeComp(out ITypeComp ppTComp); // 0x00000001801EAA70
	void GetDocumentation(int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile); // 0x00000001801EA940
	bool IsName(string szNameBuf, int lHashVal); // 0x00000001801EAD70
	void FindName(string szNameBuf, int lHashVal, out ITypeInfo[] ppTInfo, out int[] rgMemId, short pcFound); // 0x00000001801EA290
	void ReleaseTLibAttr(IntPtr pTLibAttr); // 0x00000001801EADE0
}

// Namespace: System.Runtime.InteropServices.ComTypes
[ComImport]public interface ITypeLib2 : ITypeLib // TypeDefIndex: 744
{
	// Methods
	void FindName(string szNameBuf, int lHashVal, out ITypeInfo[] ppTInfo, out int[] rgMemId, short pcFound); // 0x00000001801EA290
	void GetCustData(Guid guid, out object pVarVal); // 0x00000001801EA2F0
	void GetDocumentation(int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile); // 0x00000001801EA410
	void GetLibAttr(out IntPtr ppTLibAttr); // 0x00000001801EA500
	void GetLibStatistics(IntPtr pcUniqueNames, out int pcchUniqueNames); // 0x00000001801EA540
	void GetDocumentation2(int index, out string pbstrHelpString, out int pdwHelpStringContext, out string pbstrHelpStringDll); // 0x00000001801EA360
	void GetAllCustData(IntPtr pCustData); // 0x00000001801EA2B0
	void GetTypeComp(out ITypeComp ppTComp); // 0x00000001801EA590
	void GetTypeInfo(int index, out ITypeInfo ppTI); // 0x00000001801EA7C0
	void GetTypeInfoOfGuid(Guid guid, out ITypeInfo ppTInfo); // 0x00000001801EA6A0
	void GetTypeInfoType(int index, out TYPEKIND pTKind); // 0x00000001801EA770
	bool IsName(string szNameBuf, int lHashVal); // 0x00000001801EA890
	void ReleaseTLibAttr(IntPtr pTLibAttr); // 0x00000001801EA900
	int GetTypeInfoCount(); // 0x00000001801EA650
}

// Namespace: System.Runtime.InteropServices.ComTypes
[Serializable]
public enum LIBFLAGS // TypeDefIndex: 745
{
	LIBFLAG_FRESTRICTED = 1,
	LIBFLAG_FCONTROL = 2,
	LIBFLAG_FHIDDEN = 4,
	LIBFLAG_FHASDISKIMAGE = 8
}

// Namespace: System.Runtime.InteropServices.ComTypes
public struct PARAMDESC // TypeDefIndex: 746
{
	// Fields
	public IntPtr lpVarValue; // 0x10
	public PARAMFLAG wParamFlags; // 0x10

}

// Namespace: System.Runtime.InteropServices.ComTypes
[Serializable]
public enum PARAMFLAG // TypeDefIndex: 747
{
	PARAMFLAG_NONE = 0,
	PARAMFLAG_FIN = 1,
	PARAMFLAG_FOUT = 2,
	PARAMFLAG_FLCID = 4,
	PARAMFLAG_FRETVAL = 8,
	PARAMFLAG_FOPT = 16,
	PARAMFLAG_FHASDEFAULT = 32,
	PARAMFLAG_FHASCUSTDATA = 64
}

// Namespace: System.Runtime.InteropServices.ComTypes
public struct STATSTG // TypeDefIndex: 748
{
	// Fields
	public string pwcsName; // 0x10
	public int type; // 0x20
	public long cbSize; // 0x30
	public FILETIME mtime; // 0x40
	public FILETIME ctime; // 0x48
	public FILETIME atime; // 0x5C
	public int grfMode; // 0x10
	public int grfLocksSupported; // 0x00
	public Guid clsid; // 0x00
	public int grfStateBits; // 0x00
	public int reserved; // 0x20

}

// Namespace: System.Runtime.InteropServices.ComTypes
[Serializable]
public enum SYSKIND // TypeDefIndex: 749
{
	SYS_WIN16 = 0,
	SYS_WIN32 = 1,
	SYS_MAC = 2,
	SYS_WIN64 = 3
}

// Namespace: System.Runtime.InteropServices.ComTypes
public struct TYPEATTR // TypeDefIndex: 750
{
	// Fields
	public const int MEMBER_ID_NIL = -1; // 0x00
	public Guid guid; // 0x20
	public int lcid; // 0x28
	public int dwReserved; // 0x30
	public int memidConstructor; // 0x3C
	public int memidDestructor; // 0x42
	public IntPtr lpstrSchema; // 0x46
	public int cbSizeInstance; // 0x4C
	public TYPEKIND typekind; // 0x52
	public short cFuncs; // 0x68
	public short cVars; // 0x10
	public short cImplTypes; // 0x00
	public short cbSizeVft; // 0x10
	public short cbAlignment; // 0x00
	public TYPEFLAGS wTypeFlags; // 0x00
	public short wMajorVerNum; // 0x00
	public short wMinorVerNum; // 0x00
	public TYPEDESC tdescAlias; // 0x00
	public IDLDESC idldescType; // 0x00

}

// Namespace: System.Runtime.InteropServices.ComTypes
public struct TYPEDESC // TypeDefIndex: 751
{
	// Fields
	public IntPtr lpValue; // 0x10
	public short vt; // 0x00

}

// Namespace: System.Runtime.InteropServices.ComTypes
[Serializable]
public enum TYPEFLAGS // TypeDefIndex: 752
{
	TYPEFLAG_FAPPOBJECT = 1,
	TYPEFLAG_FCANCREATE = 2,
	TYPEFLAG_FLICENSED = 4,
	TYPEFLAG_FPREDECLID = 8,
	TYPEFLAG_FHIDDEN = 16,
	TYPEFLAG_FCONTROL = 32,
	TYPEFLAG_FDUAL = 64,
	TYPEFLAG_FNONEXTENSIBLE = 128,
	TYPEFLAG_FOLEAUTOMATION = 256,
	TYPEFLAG_FRESTRICTED = 512,
	TYPEFLAG_FAGGREGATABLE = 1024,
	TYPEFLAG_FREPLACEABLE = 2048,
	TYPEFLAG_FDISPATCHABLE = 4096,
	TYPEFLAG_FREVERSEBIND = 8192,
	TYPEFLAG_FPROXY = 16384
}

// Namespace: System.Runtime.InteropServices.ComTypes
[Serializable]
public enum TYPEKIND // TypeDefIndex: 753
{
	TKIND_ENUM = 0,
	TKIND_RECORD = 1,
	TKIND_MODULE = 2,
	TKIND_INTERFACE = 3,
	TKIND_DISPATCH = 4,
	TKIND_COCLASS = 5,
	TKIND_ALIAS = 6,
	TKIND_UNION = 7,
	TKIND_MAX = 8
}

// Namespace: System.Runtime.InteropServices.ComTypes
[Serializable]
public struct TYPELIBATTR // TypeDefIndex: 754
{
	// Fields
	public Guid guid; // 0x10
	public int lcid; // 0x24
	public SYSKIND syskind; // 0x2A
	public short wMajorVerNum; // 0x10
	public short wMinorVerNum; // 0x20
	public LIBFLAGS wLibFlags; // 0x48

}

// Namespace: System.Runtime.InteropServices.ComTypes
public struct VARDESC // TypeDefIndex: 755
{
	// Fields
	public int memid; // 0x10
	public string lpstrSchema; // 0x20
	public DESCUNION desc; // 0x48
	public ELEMDESC elemdescVar; // 0x10
	public short wVarFlags; // 0x10
	public VARKIND varkind; // 0x00

}

// Namespace: 
public struct DESCUNION // TypeDefIndex: 756
{
	// Fields
	public IntPtr lpvarValue; // 0x10
	public int oInst; // 0x10

}

// Namespace: System.Runtime.InteropServices.ComTypes
[Serializable]
public enum VARFLAGS // TypeDefIndex: 757
{
	VARFLAG_FREADONLY = 1,
	VARFLAG_FSOURCE = 2,
	VARFLAG_FBINDABLE = 4,
	VARFLAG_FREQUESTEDIT = 8,
	VARFLAG_FDISPLAYBIND = 16,
	VARFLAG_FDEFAULTBIND = 32,
	VARFLAG_FHIDDEN = 64,
	VARFLAG_FRESTRICTED = 128,
	VARFLAG_FDEFAULTCOLLELEM = 256,
	VARFLAG_FUIDEFAULT = 512,
	VARFLAG_FNONBROWSABLE = 1024,
	VARFLAG_FREPLACEABLE = 2048,
	VARFLAG_FIMMEDIATEBIND = 4096
}

// Namespace: System.Runtime.InteropServices.ComTypes
[Serializable]
public enum VARKIND // TypeDefIndex: 758
{
	VAR_PERINSTANCE = 0,
	VAR_STATIC = 1,
	VAR_CONST = 2,
	VAR_DISPATCH = 3
}

// Namespace: System.Runtime.InteropServices.Expando
public interface IExpando : IReflect // TypeDefIndex: 759
{
	// Methods
	FieldInfo AddField(string name);
	MethodInfo AddMethod(string name, Delegate method);
	PropertyInfo AddProperty(string name);
	void RemoveMember(MemberInfo m);
}

// Namespace: System.Runtime.InteropServices
public sealed class AllowReversePInvokeCallsAttribute : Attribute // TypeDefIndex: 760
{
	// Constructors
	public AllowReversePInvokeCallsAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public struct ArrayWithOffset // TypeDefIndex: 761
{
	// Fields
	private object array; // 0x10
	private int offset; // 0x10

	// Constructors
	public ArrayWithOffset(object array, int offset); // 0x0000000180019CD0

	// Methods
	public override bool Equals(object obj); // 0x0000000180019BE0
	public bool Equals(ArrayWithOffset obj); // 0x0000000180019C90
	public override int GetHashCode(); // 0x0000000180016C80
	public object GetArray(); // 0x0000000180002060
	public int GetOffset(); // 0x0000000180016C80
	public static bool op_Equality(ArrayWithOffset a, ArrayWithOffset b); // 0x0000000180259D60
	public static bool op_Inequality(ArrayWithOffset a, ArrayWithOffset b); // 0x0000000180259DA0
}

// Namespace: System.Runtime.InteropServices
public enum AssemblyRegistrationFlags // TypeDefIndex: 762
{
	None = 0,
	SetCodeBase = 1
}

// Namespace: System.Runtime.InteropServices
public sealed class AutomationProxyAttribute : Attribute // TypeDefIndex: 763
{
	// Fields
	private bool val; // 0x10

	// Properties
	public bool Value { get; } // 0x0000000180113840 

	// Constructors
	public AutomationProxyAttribute(bool val); // 0x0000000180113810

}

// Namespace: System.Runtime.InteropServices
public struct BINDPTR // TypeDefIndex: 764
{
	// Fields
	public IntPtr lpfuncdesc; // 0x10
	public IntPtr lptcomp; // 0x10
	public IntPtr lpvardesc; // 0x10

}

// Namespace: System.Runtime.InteropServices
public struct BIND_OPTS // TypeDefIndex: 765
{
	// Fields
	public int cbStruct; // 0x10
	public int grfFlags; // 0x18
	public int grfMode; // 0x10
	public int dwTickCountDeadline; // 0x10

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public sealed class BStrWrapper // TypeDefIndex: 766
{
	// Fields
	private string _value; // 0x10

	// Properties
	public string WrappedObject { get; } // 0x00000001800E20D0 

	// Constructors
	public BStrWrapper(string value); // 0x000000018015C840

}

// Namespace: System.Runtime.InteropServices
public sealed class BestFitMappingAttribute : Attribute // TypeDefIndex: 767
{
	// Fields
	private bool bfm; // 0x10
	public bool ThrowOnUnmappableChar; // 0x10

	// Properties
	public bool BestFitMapping { get; } // 0x0000000180113840 

	// Constructors
	public BestFitMappingAttribute(bool BestFitMapping); // 0x0000000180113810

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum CALLCONV // TypeDefIndex: 768
{
	CC_CDECL = 1,
	CC_PASCAL = 2,
	CC_MSCPASCAL = 2,
	CC_MACPASCAL = 3,
	CC_STDCALL = 4,
	CC_RESERVED = 5,
	CC_SYSCALL = 6,
	CC_MPWCDECL = 7,
	CC_MPWPASCAL = 8,
	CC_MAX = 9
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public class COMException : ExternalException // TypeDefIndex: 769
{
	// Constructors
	public COMException(); // 0x000000018025A180
	public COMException(string message); // 0x000000018025A170
	public COMException(string message, Exception inner); // 0x000000018025A190
	public COMException(string message, int errorCode); // 0x000000018025A160
	protected COMException(SerializationInfo info, StreamingContext context); // 0x00000001801251B0

	// Methods
	public override string ToString(); // 0x0000000180259DE0
}

// Namespace: System.Runtime.InteropServices
public struct CONNECTDATA // TypeDefIndex: 770
{
	// Fields
	public object pUnk; // 0x10
	public int dwCookie; // 0x10

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum CallingConvention // TypeDefIndex: 771
{
	Winapi = 1,
	Cdecl = 2,
	StdCall = 3,
	ThisCall = 4,
	FastCall = 5
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum CharSet // TypeDefIndex: 772
{
	None = 1,
	Ansi = 2,
	Unicode = 3,
	Auto = 4
}

// Namespace: System.Runtime.InteropServices
public sealed class ClassInterfaceAttribute : Attribute // TypeDefIndex: 773
{
	// Fields
	private ClassInterfaceType ciType; // 0x10

	// Properties
	public ClassInterfaceType Value { get; } // 0x00000001800ECD10 

	// Constructors
	public ClassInterfaceAttribute(short classInterfaceType); // 0x00000001801EA260
	public ClassInterfaceAttribute(ClassInterfaceType classInterfaceType); // 0x000000018010E510

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum ClassInterfaceType // TypeDefIndex: 774
{
	None = 0,
	AutoDispatch = 1,
	AutoDual = 2
}

// Namespace: System.Runtime.InteropServices
public sealed class ComAliasNameAttribute : Attribute // TypeDefIndex: 775
{
	// Fields
	private string val; // 0x10

	// Properties
	public string Value { get; } // 0x00000001800E20D0 

	// Constructors
	public ComAliasNameAttribute(string alias); // 0x00000001801137E0

}

// Namespace: System.Runtime.InteropServices
public sealed class ComCompatibleVersionAttribute : Attribute // TypeDefIndex: 776
{
	// Fields
	private int major; // 0x10
	private int minor; // 0x18
	private int build; // 0x10
	private int revision; // 0x10

	// Properties
	public int MajorVersion { get; } // 0x00000001800ECD10 
	public int MinorVersion { get; } // 0x0000000180156360 
	public int BuildNumber { get; } // 0x00000001800ED060 
	public int RevisionNumber { get; } // 0x00000001801AE2C0 

	// Constructors
	public ComCompatibleVersionAttribute(int major, int minor, int build, int revision); // 0x000000018025A660

}

// Namespace: System.Runtime.InteropServices
public sealed class ComConversionLossAttribute : Attribute // TypeDefIndex: 777
{
	// Constructors
	public ComConversionLossAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Runtime.InteropServices
public sealed class ComDefaultInterfaceAttribute : Attribute // TypeDefIndex: 778
{
	// Fields
	private Type _type; // 0x10

	// Properties
	public Type Value { get; } // 0x00000001800E20D0 

	// Constructors
	public ComDefaultInterfaceAttribute(Type defaultInterface); // 0x00000001801137E0

}

// Namespace: System.Runtime.InteropServices
public sealed class ComEventInterfaceAttribute : Attribute // TypeDefIndex: 779
{
	// Fields
	private Type si; // 0x10
	private Type ep; // 0x10

	// Properties
	public Type EventProvider { get; } // 0x00000001800EAEC0 
	public Type SourceInterface { get; } // 0x00000001800E20D0 

	// Constructors
	public ComEventInterfaceAttribute(Type SourceInterface, Type EventProvider); // 0x000000018015EE90

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum ComInterfaceType // TypeDefIndex: 780
{
	InterfaceIsDual = 0,
	InterfaceIsIUnknown = 1,
	InterfaceIsIDispatch = 2
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum ComMemberType // TypeDefIndex: 781
{
	Method = 0,
	PropGet = 1,
	PropSet = 2
}

// Namespace: System.Runtime.InteropServices
public sealed class ComRegisterFunctionAttribute : Attribute // TypeDefIndex: 782
{
	// Constructors
	public ComRegisterFunctionAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Runtime.InteropServices
public sealed class ComSourceInterfacesAttribute : Attribute // TypeDefIndex: 783
{
	// Fields
	private string internalValue; // 0x10

	// Properties
	public string Value { get; } // 0x00000001800E20D0 

	// Constructors
	public ComSourceInterfacesAttribute(string sourceInterfaces); // 0x00000001801137E0
	public ComSourceInterfacesAttribute(Type sourceInterface); // 0x00000001801F1F10
	public ComSourceInterfacesAttribute(Type sourceInterface1, Type sourceInterface2); // 0x000000018025A6B0
	public ComSourceInterfacesAttribute(Type sourceInterface1, Type sourceInterface2, Type sourceInterface3); // 0x000000018025A890
	public ComSourceInterfacesAttribute(Type sourceInterface1, Type sourceInterface2, Type sourceInterface3, Type sourceInterface4); // 0x000000018025A770

}

// Namespace: System.Runtime.InteropServices
public sealed class ComUnregisterFunctionAttribute : Attribute // TypeDefIndex: 784
{
	// Constructors
	public ComUnregisterFunctionAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Runtime.InteropServices
public abstract class CriticalHandle : CriticalFinalizerObject, IDisposable // TypeDefIndex: 785
{
	// Fields
	protected IntPtr handle; // 0x10
	private bool _disposed; // 0x10

	// Properties
	public bool IsClosed { get; } // 0x00000001801249E0 
	public abstract bool IsInvalid { get; }

	// Constructors
	protected CriticalHandle(IntPtr invalidHandleValue); // 0x00000001801137E0

	// Methods
	protected override void Finalize(); // 0x00000001801E8600
	public void Close(); // 0x00000001801E8560
	public void Dispose(); // 0x00000001801E8560
	protected virtual void Dispose(bool disposing); // 0x00000001801E8580
	protected abstract bool ReleaseHandle();
	protected void SetHandle(IntPtr handle); // 0x0000000180114C30
	public void SetHandleAsInvalid(); // 0x00000001801E86A0
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public sealed class CurrencyWrapper // TypeDefIndex: 786
{
	// Fields
	private Decimal currency; // 0x10

	// Properties
	public Decimal WrappedObject { get; } // 0x00000001801D6D60 

	// Constructors
	public CurrencyWrapper(Decimal obj); // 0x00000001801D6D30
	public CurrencyWrapper(object obj); // 0x00000001801E96D0

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum DESCKIND // TypeDefIndex: 787
{
	DESCKIND_NONE = 0,
	DESCKIND_FUNCDESC = 1,
	DESCKIND_VARDESC = 2,
	DESCKIND_TYPECOMP = 3,
	DESCKIND_IMPLICITAPPOBJ = 4,
	DESCKIND_MAX = 5
}

// Namespace: System.Runtime.InteropServices
public struct DISPPARAMS // TypeDefIndex: 788
{
	// Fields
	public IntPtr rgvarg; // 0x10
	public IntPtr rgdispidNamedArgs; // 0x20
	public int cArgs; // 0x10
	public int cNamedArgs; // 0x10

}

// Namespace: System.Runtime.InteropServices
public sealed class DispIdAttribute : Attribute // TypeDefIndex: 789
{
	// Fields
	private int id; // 0x10

	// Properties
	public int Value { get; } // 0x00000001800ECD10 

	// Constructors
	public DispIdAttribute(int dispId); // 0x000000018010E510

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public sealed class DispatchWrapper // TypeDefIndex: 790
{
	// Fields
	private object wrappedObject; // 0x10

	// Properties
	public object WrappedObject { get; } // 0x00000001800E20D0 

	// Constructors
	public DispatchWrapper(object obj); // 0x00000001801E97E0

}

// Namespace: System.Runtime.InteropServices
public struct ELEMDESC // TypeDefIndex: 791
{
	// Fields
	public TYPEDESC tdesc; // 0x10
	public DESCUNION desc; // 0x10

}

// Namespace: 
public struct DESCUNION // TypeDefIndex: 792
{
	// Fields
	public IDLDESC idldesc; // 0x10
	public PARAMDESC paramdesc; // 0x10

}

// Namespace: System.Runtime.InteropServices
public struct EXCEPINFO // TypeDefIndex: 793
{
	// Fields
	public short wCode; // 0x10
	public short wReserved; // 0x18
	public string bstrSource; // 0x28
	public string bstrDescription; // 0x38
	public string bstrHelpFile; // 0x10
	public int dwHelpContext; // 0x10
	public IntPtr pvReserved; // 0x00
	public IntPtr pfnDeferredFillIn; // 0x10

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public sealed class ErrorWrapper // TypeDefIndex: 794
{
	// Fields
	private int errorCode; // 0x10

	// Properties
	public int ErrorCode { get; } // 0x00000001800ECD10 

	// Constructors
	public ErrorWrapper(Exception e); // 0x00000001801E98A0
	public ErrorWrapper(int errorCode); // 0x0000000180142DC0
	public ErrorWrapper(object errorCode); // 0x00000001801E9920

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum ExporterEventKind // TypeDefIndex: 795
{
	NOTIF_TYPECONVERTED = 0,
	NOTIF_CONVERTWARNING = 1,
	ERROR_REFTOINVALIDASSEMBLY = 2
}

// Namespace: System.Runtime.InteropServices
public sealed class ExtensibleClassFactory // TypeDefIndex: 796
{
	// Fields
	private static Hashtable hashtable; // 0x00

	// Constructors
	private ExtensibleClassFactory(); // 0x00000001800E2000
	private static ExtensibleClassFactory(); // 0x00000001801E9D50

	// Methods
	internal static ObjectCreationDelegate GetObjectCreationCallback(Type t); // 0x00000001801E9B10
	public static void RegisterObjectCreationCallback(ObjectCreationDelegate callback); // 0x00000001801E9BB0
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public class ExternalException : SystemException // TypeDefIndex: 797
{
	// Properties
	public virtual int ErrorCode { get; } // 0x00000001801E9E40 

	// Constructors
	public ExternalException(); // 0x00000001801E9DF0
	public ExternalException(string message); // 0x00000001801E9DB0
	protected ExternalException(SerializationInfo info, StreamingContext context); // 0x000000018010E170
	public ExternalException(string message, Exception inner); // 0x00000001801E9DD0
	public ExternalException(string message, int errorCode); // 0x0000000180129EB0

}

// Namespace: System.Runtime.InteropServices
public struct FILETIME // TypeDefIndex: 798
{
	// Fields
	public int dwLowDateTime; // 0x10
	public int dwHighDateTime; // 0x10

}

// Namespace: System.Runtime.InteropServices
public struct FUNCDESC // TypeDefIndex: 799
{
	// Fields
	public int memid; // 0x10
	public IntPtr lprgscode; // 0x20
	public IntPtr lprgelemdescParam; // 0x2C
	public FUNCKIND funckind; // 0x34
	public INVOKEKIND invkind; // 0x38
	public CALLCONV callconv; // 0x40
	public short cParams; // 0x10
	public short cParamsOpt; // 0x00
	public short oVft; // 0x00
	public short cScodes; // 0x00
	public ELEMDESC elemdescFunc; // 0x00
	public short wFuncFlags; // 0x00

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum FUNCFLAGS // TypeDefIndex: 800
{
	FUNCFLAG_FRESTRICTED = 1,
	FUNCFLAG_FSOURCE = 2,
	FUNCFLAG_FBINDABLE = 4,
	FUNCFLAG_FREQUESTEDIT = 8,
	FUNCFLAG_FDISPLAYBIND = 16,
	FUNCFLAG_FDEFAULTBIND = 32,
	FUNCFLAG_FHIDDEN = 64,
	FUNCFLAG_FUSESGETLASTERROR = 128,
	FUNCFLAG_FDEFAULTCOLLELEM = 256,
	FUNCFLAG_FUIDEFAULT = 512,
	FUNCFLAG_FNONBROWSABLE = 1024,
	FUNCFLAG_FREPLACEABLE = 2048,
	FUNCFLAG_FIMMEDIATEBIND = 4096
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum FUNCKIND // TypeDefIndex: 801
{
	FUNC_VIRTUAL = 0,
	FUNC_PUREVIRTUAL = 1,
	FUNC_NONVIRTUAL = 2,
	FUNC_STATIC = 3,
	FUNC_DISPATCH = 4
}

// Namespace: System.Runtime.InteropServices
public struct GCHandle // TypeDefIndex: 802
{
	// Fields
	private int handle; // 0x10

	// Properties
	public bool IsAllocated { get; } // 0x0000000180008C80 
	public object Target { get; set; } // 0x0000000180008C90 0x0000000180008D10

	// Constructors
	private GCHandle(IntPtr h); // 0x0000000180008C60
	private GCHandle(object obj); // 0x0000000180008C00
	private GCHandle(object value, GCHandleType type); // 0x0000000180008C30

	// Methods
	public IntPtr AddrOfPinnedObject(); // 0x0000000180008AF0
	public static GCHandle Alloc(object value); // 0x00000001801E9E70
	public static GCHandle Alloc(object value, GCHandleType type); // 0x00000001801E9E50
	public void Free(); // 0x0000000180008BE0
	private static bool CheckCurrentDomain(int handle); // 0x00000001801E9E80
	private static object GetTarget(int handle); // 0x00000001801EA020
	private static int GetTargetHandle(object obj, int handle, GCHandleType type); // 0x00000001801EA010
	private static void FreeHandle(int handle); // 0x00000001801E9F10
	private static IntPtr GetAddrOfPinnedObject(int handle); // 0x00000001801EA000
	public override bool Equals(object o); // 0x0000000180008BD0
	public override int GetHashCode(); // 0x00000001800051D0
	public static GCHandle FromIntPtr(IntPtr value); // 0x00000001801E9F40
	public static IntPtr ToIntPtr(GCHandle value); // 0x00000001801EA030
	public static IntPtr op_Explicit(GCHandle value); // 0x00000001801EA030
	public static GCHandle op_Explicit(IntPtr value); // 0x00000001801E9F40
	public static bool op_Equality(GCHandle a, GCHandle b); // 0x00000001801EA0C0
	public static bool op_Inequality(GCHandle a, GCHandle b); // 0x00000001801EA170
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum GCHandleType // TypeDefIndex: 803
{
	Weak = 0,
	WeakTrackResurrection = 1,
	Normal = 2,
	Pinned = 3
}

// Namespace: System.Runtime.InteropServices
public struct HandleRef // TypeDefIndex: 804
{
	// Fields
	private object wrapper; // 0x10
	private IntPtr handle; // 0x10

	// Properties
	public IntPtr Handle { get; } // 0x0000000180002040 
	public object Wrapper { get; } // 0x0000000180002060 

	// Constructors
	public HandleRef(object wrapper, IntPtr handle); // 0x0000000180008D40

	// Methods
	public static IntPtr ToIntPtr(HandleRef value); // 0x00000001801EA250
	public static IntPtr op_Explicit(HandleRef value); // 0x00000001801EA250
}

// Namespace: System.Runtime.InteropServices
public interface ICustomAdapter // TypeDefIndex: 805
{
	// Methods
	object GetUnderlyingObject();
}

// Namespace: System.Runtime.InteropServices
public interface ICustomFactory // TypeDefIndex: 806
{
	// Methods
	MarshalByRefObject CreateInstance(Type serverType);
}

// Namespace: System.Runtime.InteropServices
public interface ICustomMarshaler // TypeDefIndex: 807
{
	// Methods
	void CleanUpManagedData(object ManagedObj);
	void CleanUpNativeData(IntPtr pNativeData);
	int GetNativeDataSize();
	IntPtr MarshalManagedToNative(object ManagedObj);
	object MarshalNativeToManaged(IntPtr pNativeData);
}

// Namespace: System.Runtime.InteropServices
public struct IDLDESC // TypeDefIndex: 808
{
	// Fields
	public int dwReserved; // 0x10
	public IDLFLAG wIDLFlags; // 0x10

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum IDLFLAG // TypeDefIndex: 809
{
	IDLFLAG_NONE = 0,
	IDLFLAG_FIN = 1,
	IDLFLAG_FOUT = 2,
	IDLFLAG_FLCID = 4,
	IDLFLAG_FRETVAL = 8
}

// Namespace: System.Runtime.InteropServices
public sealed class IDispatchImplAttribute : Attribute // TypeDefIndex: 810
{
	// Fields
	private IDispatchImplType Impl; // 0x10

	// Properties
	public IDispatchImplType Value { get; } // 0x00000001800ECD10 

	// Constructors
	public IDispatchImplAttribute(IDispatchImplType implType); // 0x000000018010E510
	public IDispatchImplAttribute(short implType); // 0x00000001801EA260

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum IDispatchImplType // TypeDefIndex: 811
{
	SystemDefinedImpl = 0,
	InternalImpl = 1,
	CompatibleImpl = 2
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum IMPLTYPEFLAGS // TypeDefIndex: 812
{
	IMPLTYPEFLAG_FDEFAULT = 1,
	IMPLTYPEFLAG_FSOURCE = 2,
	IMPLTYPEFLAG_FRESTRICTED = 4,
	IMPLTYPEFLAG_FDEFAULTVTABLE = 8
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum INVOKEKIND // TypeDefIndex: 813
{
	INVOKE_FUNC = 1,
	INVOKE_PROPERTYGET = 2,
	INVOKE_PROPERTYPUT = 4,
	INVOKE_PROPERTYPUTREF = 8
}

// Namespace: System.Runtime.InteropServices
public interface IRegistrationServices // TypeDefIndex: 814
{
	// Methods
	Guid GetManagedCategoryGuid();
	string GetProgIdForType(Type type);
	Type[] GetRegistrableTypesInAssembly(Assembly assembly);
	bool RegisterAssembly(Assembly assembly, AssemblyRegistrationFlags flags);
	void RegisterTypeForComClients(Type type, Guid g);
	bool TypeRepresentsComType(Type type);
	bool TypeRequiresRegistration(Type type);
	bool UnregisterAssembly(Assembly assembly);
}

// Namespace: System.Runtime.InteropServices
public interface ITypeLibConverter // TypeDefIndex: 815
{
	// Methods
	object ConvertAssemblyToTypeLib(Assembly assembly, string typeLibName, TypeLibExporterFlags flags, ITypeLibExporterNotifySink notifySink);
	AssemblyBuilder ConvertTypeLibToAssembly(object typeLib, string asmFileName, int flags, ITypeLibImporterNotifySink notifySink, byte[] publicKey, StrongNameKeyPair keyPair, bool unsafeInterfaces);
	AssemblyBuilder ConvertTypeLibToAssembly(object typeLib, string asmFileName, TypeLibImporterFlags flags, ITypeLibImporterNotifySink notifySink, byte[] publicKey, StrongNameKeyPair keyPair, string asmNamespace, Version asmVersion);
	bool GetPrimaryInteropAssembly(Guid g, int major, int minor, int lcid, out string asmName, out string asmCodeBase);
}

// Namespace: System.Runtime.InteropServices
public interface ITypeLibExporterNameProvider // TypeDefIndex: 816
{
	// Methods
	string[] GetNames();
}

// Namespace: System.Runtime.InteropServices
public interface ITypeLibExporterNotifySink // TypeDefIndex: 817
{
	// Methods
	void ReportEvent(ExporterEventKind eventKind, int eventCode, string eventMsg);
	object ResolveRef(Assembly assembly);
}

// Namespace: System.Runtime.InteropServices
public interface ITypeLibImporterNotifySink // TypeDefIndex: 818
{
	// Methods
	void ReportEvent(ImporterEventKind eventKind, int eventCode, string eventMsg);
	Assembly ResolveRef(object typeLib);
}

// Namespace: System.Runtime.InteropServices
public sealed class ImportedFromTypeLibAttribute : Attribute // TypeDefIndex: 819
{
	// Fields
	private string TlbFile; // 0x10

	// Properties
	public string Value { get; } // 0x00000001800E20D0 

	// Constructors
	public ImportedFromTypeLibAttribute(string tlbFile); // 0x00000001801137E0

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum ImporterEventKind // TypeDefIndex: 820
{
	NOTIF_TYPECONVERTED = 0,
	NOTIF_CONVERTWARNING = 1,
	ERROR_REFTOINVALIDTYPELIB = 2
}

// Namespace: System.Runtime.InteropServices
public sealed class InterfaceTypeAttribute : Attribute // TypeDefIndex: 821
{
	// Fields
	private ComInterfaceType intType; // 0x10

	// Properties
	public ComInterfaceType Value { get; } // 0x00000001800ECD10 

	// Constructors
	public InterfaceTypeAttribute(ComInterfaceType interfaceType); // 0x000000018010E510
	public InterfaceTypeAttribute(short interfaceType); // 0x00000001801EA260

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public class InvalidComObjectException : SystemException // TypeDefIndex: 822
{
	// Fields
	private const int ErrorCode = -2146233049; // 0x00

	// Constructors
	public InvalidComObjectException(); // 0x00000001801EAE20
	public InvalidComObjectException(string message); // 0x00000001801EAE70
	public InvalidComObjectException(string message, Exception inner); // 0x00000001801EAE90
	protected InvalidComObjectException(SerializationInfo info, StreamingContext context); // 0x000000018010E170

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public class InvalidOleVariantTypeException : SystemException // TypeDefIndex: 823
{
	// Fields
	private const int ErrorCode = -2146233039; // 0x00

	// Constructors
	public InvalidOleVariantTypeException(); // 0x00000001801EAED0
	public InvalidOleVariantTypeException(string message); // 0x00000001801EAEB0
	public InvalidOleVariantTypeException(string message, Exception inner); // 0x00000001801EAF20
	protected InvalidOleVariantTypeException(SerializationInfo info, StreamingContext context); // 0x000000018010E170

}

// Namespace: System.Runtime.InteropServices
public sealed class LCIDConversionAttribute : Attribute // TypeDefIndex: 824
{
	// Fields
	private int id; // 0x10

	// Properties
	public int Value { get; } // 0x00000001800ECD10 

	// Constructors
	public LCIDConversionAttribute(int lcid); // 0x000000018010E510

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum LIBFLAGS // TypeDefIndex: 825
{
	LIBFLAG_FRESTRICTED = 1,
	LIBFLAG_FCONTROL = 2,
	LIBFLAG_FHIDDEN = 4,
	LIBFLAG_FHASDISKIMAGE = 8
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum LayoutKind // TypeDefIndex: 826
{
	Sequential = 0,
	Explicit = 2,
	Auto = 3
}

// Namespace: System.Runtime.InteropServices
public static class Marshal // TypeDefIndex: 827
{
	// Fields
	public static readonly int SystemMaxDBCSCharSize; // 0x00
	public static readonly int SystemDefaultCharSize; // 0x10

	// Constructors
	private static Marshal(); // 0x00000001801EF8C0

	// Methods
	private static int AddRefInternal(IntPtr pUnk); // 0x00000001801EAFD0
	public static int AddRef(IntPtr pUnk); // 0x00000001801EAFE0
	public static IntPtr AllocCoTaskMem(int cb); // 0x00000001801EB080
	public static IntPtr AllocHGlobal(IntPtr cb); // 0x00000001801EB0F0
	public static IntPtr AllocHGlobal(int cb); // 0x00000001801EB090
	public static object BindToMoniker(string monikerName); // 0x00000001801EB100
	public static void ChangeWrapperHandleStrength(object otp, bool fIsWeak); // 0x00000001801EB150
	private static void copy_to_unmanaged(Array source, int startIndex, IntPtr destination, int length); // 0x00000001801EF940
	private static void copy_from_unmanaged(IntPtr source, int startIndex, Array destination, int length); // 0x00000001801EF930
	public static void Copy(byte[] source, int startIndex, IntPtr destination, int length); // 0x00000001801EBA90
	public static void Copy(char[] source, int startIndex, IntPtr destination, int length); // 0x00000001801EBB10
	public static void Copy(short[] source, int startIndex, IntPtr destination, int length); // 0x00000001801EBA10
	public static void Copy(int[] source, int startIndex, IntPtr destination, int length); // 0x00000001801EB410
	public static void Copy(long[] source, int startIndex, IntPtr destination, int length); // 0x00000001801EB710
	public static void Copy(float[] source, int startIndex, IntPtr destination, int length); // 0x00000001801EB790
	public static void Copy(double[] source, int startIndex, IntPtr destination, int length); // 0x00000001801EB690
	public static void Copy(IntPtr[] source, int startIndex, IntPtr destination, int length); // 0x00000001801EB890
	public static void Copy(IntPtr source, byte[] destination, int startIndex, int length); // 0x00000001801EB610
	public static void Copy(IntPtr source, char[] destination, int startIndex, int length); // 0x00000001801EB490
	public static void Copy(IntPtr source, short[] destination, int startIndex, int length); // 0x00000001801EB810
	public static void Copy(IntPtr source, int[] destination, int startIndex, int length); // 0x00000001801EB510
	public static void Copy(IntPtr source, long[] destination, int startIndex, int length); // 0x00000001801EB990
	public static void Copy(IntPtr source, float[] destination, int startIndex, int length); // 0x00000001801EB910
	public static void Copy(IntPtr source, double[] destination, int startIndex, int length); // 0x00000001801EB390
	public static void Copy(IntPtr source, IntPtr[] destination, int startIndex, int length); // 0x00000001801EB590
	public static IntPtr CreateAggregatedObject(IntPtr pOuter, object o); // 0x00000001801EBB90
	public static object CreateWrapperOfType(object o, Type t); // 0x00000001801EBBE0
	public static void DestroyStructure(IntPtr ptr, Type structuretype); // 0x00000001801EBE00
	public static void FreeBSTR(IntPtr ptr); // 0x00000001801EBF60
	public static void FreeCoTaskMem(IntPtr ptr); // 0x00000001801EBF70
	public static void FreeHGlobal(IntPtr hglobal); // 0x00000001801EBF80
	private static void ClearBSTR(IntPtr ptr); // 0x00000001801EB240
	public static void ZeroFreeBSTR(IntPtr s); // 0x00000001801EF650
	private static void ClearAnsi(IntPtr ptr); // 0x00000001801EB1A0
	private static void ClearUnicode(IntPtr ptr); // 0x00000001801EB2F0
	public static void ZeroFreeCoTaskMemAnsi(IntPtr s); // 0x00000001801EF740
	public static void ZeroFreeCoTaskMemUnicode(IntPtr s); // 0x00000001801EF7A0
	public static void ZeroFreeGlobalAllocAnsi(IntPtr s); // 0x00000001801EF800
	public static void ZeroFreeGlobalAllocUnicode(IntPtr s); // 0x00000001801EF860
	public static Guid GenerateGuidForType(Type type); // 0x00000001801EBF90
	public static string GenerateProgIdForType(Type type); // 0x00000001801EBFD0
	public static object GetActiveObject(string progID); // 0x00000001801EC020
	private static IntPtr GetCCW(object o, Type T); // 0x00000001801EC070
	private static IntPtr GetComInterfaceForObjectInternal(object o, Type T); // 0x00000001801EC0D0
	public static IntPtr GetComInterfaceForObject(object o, Type T); // 0x00000001801EC200
	public static IntPtr GetComInterfaceForObjectInContext(object o, Type t); // 0x00000001801EC080
	public static object GetComObjectData(object obj, object key); // 0x00000001801EC380
	private static int GetComSlotForMethodInfoInternal(MemberInfo m); // 0x00000001801EC3E0
	public static int GetComSlotForMethodInfo(MemberInfo m); // 0x00000001801EC3F0
	public static int GetEndComSlot(Type t); // 0x00000001801EC720
	public static int GetExceptionCode(); // 0x00000001801EC770
	public static IntPtr GetExceptionPointers(); // 0x00000001801EC930
	public static IntPtr GetHINSTANCE(Module m); // 0x00000001801ECA20
	public static int GetHRForException(Exception e); // 0x00000001801ECA90
	public static int GetHRForLastWin32Error(); // 0x00000001801ECAB0
	private static IntPtr GetIDispatchForObjectInternal(object o); // 0x00000001801ECB50
	public static IntPtr GetIDispatchForObject(object o); // 0x00000001801ECB60
	public static IntPtr GetIDispatchForObjectInContext(object o); // 0x00000001801ECB00
	public static IntPtr GetITypeInfoForType(Type t); // 0x00000001801ECBC0
	private static IntPtr GetIUnknownForObjectInternal(object o); // 0x00000001801ECC60
	public static IntPtr GetIUnknownForObject(object o); // 0x00000001801ECC70
	public static IntPtr GetIUnknownForObjectInContext(object o); // 0x00000001801ECC10
	public static IntPtr GetManagedThunkForUnmanagedMethodPtr(IntPtr pfnMethodToWrap, IntPtr pbSignature, int cbSignature); // 0x00000001801ECCE0
	public static MemberInfo GetMethodInfoForComSlot(Type t, int slot, ComMemberType memberType); // 0x00000001801ECD30
	public static void GetNativeVariantForObject(object obj, IntPtr pDstNativeVariant); // 0x00000001801ECD80
	private static object GetObjectForCCW(IntPtr pUnk); // 0x00000001801ECE30
	public static object GetObjectForIUnknown(IntPtr pUnk); // 0x00000001801ECE40
	public static object GetObjectForNativeVariant(IntPtr pSrcNativeVariant); // 0x00000001801ECF10
	public static object[] GetObjectsForNativeVariants(IntPtr aSrcNativeVariant, int cVars); // 0x00000001801ECFF0
	public static int GetStartComSlot(Type t); // 0x00000001801ED180
	public static Thread GetThreadFromFiberCookie(int cookie); // 0x00000001801ED1D0
	public static object GetTypedObjectForIUnknown(IntPtr pUnk, Type t); // 0x00000001801ED590
	public static Type GetTypeForITypeInfo(IntPtr piTypeInfo); // 0x00000001801ED220
	public static string GetTypeInfoName(UCOMITypeInfo pTI); // 0x00000001801ED2C0
	public static string GetTypeInfoName(ITypeInfo typeInfo); // 0x00000001801ED270
	public static Guid GetTypeLibGuid(UCOMITypeLib pTLB); // 0x00000001801ED360
	public static Guid GetTypeLibGuid(ITypeLib typelib); // 0x00000001801ED3B0
	public static Guid GetTypeLibGuidForAssembly(Assembly asm); // 0x00000001801ED310
	public static int GetTypeLibLcid(UCOMITypeLib pTLB); // 0x00000001801ED450
	public static int GetTypeLibLcid(ITypeLib typelib); // 0x00000001801ED400
	public static string GetTypeLibName(UCOMITypeLib pTLB); // 0x00000001801ED4A0
	public static string GetTypeLibName(ITypeLib typelib); // 0x00000001801ED4F0
	public static void GetTypeLibVersionForAssembly(Assembly inputAssembly, out int majorVersion, out int minorVersion); // 0x00000001801ED540
	public static object GetUniqueObjectForIUnknown(IntPtr unknown); // 0x00000001801ED710
	public static IntPtr GetUnmanagedThunkForManagedMethodPtr(IntPtr pfnMethodToWrap, IntPtr pbSignature, int cbSignature); // 0x00000001801ED760
	public static bool IsComObject(object o); // 0x00000001801ED7B0
	public static bool IsTypeVisibleFromCom(Type t); // 0x00000001801ED7C0
	public static int NumParamBytes(MethodInfo m); // 0x00000001801ED810
	public static int GetLastWin32Error(); // 0x00000001801ECCD0
	public static IntPtr OffsetOf(Type t, string fieldName); // 0x00000001801ED860
	public static void Prelink(MethodInfo m); // 0x00000001801ED880
	public static void PrelinkAll(Type c); // 0x00000001801ED870
	public static string PtrToStringAnsi(IntPtr ptr); // 0x00000001801ED8A0
	public static string PtrToStringAnsi(IntPtr ptr, int len); // 0x00000001801ED890
	public static string PtrToStringAuto(IntPtr ptr); // 0x00000001801ED970
	public static string PtrToStringAuto(IntPtr ptr, int len); // 0x00000001801ED8B0
	public static string PtrToStringUni(IntPtr ptr); // 0x00000001801EDA20
	public static string PtrToStringUni(IntPtr ptr, int len); // 0x00000001801EDA30
	public static string PtrToStringBSTR(IntPtr ptr); // 0x00000001801EDA10
	public static void PtrToStructure(IntPtr ptr, object structure); // 0x00000001801EDA50
	public static object PtrToStructure(IntPtr ptr, Type structureType); // 0x00000001801EDA40
	private static int QueryInterfaceInternal(IntPtr pUnk, Guid iid, out IntPtr ppv); // 0x00000001801EDA60
	public static int QueryInterface(IntPtr pUnk, Guid iid, out IntPtr ppv); // 0x00000001801EDA70
	public static byte ReadByte(IntPtr ptr); // 0x00000001801EDBB0
	public static byte ReadByte(IntPtr ptr, int ofs); // 0x00000001801EDBA0
	public static byte ReadByte(object ptr, int ofs); // 0x00000001801EDB50
	public static short ReadInt16(IntPtr ptr); // 0x00000001801EDC70
	public static short ReadInt16(IntPtr ptr, int ofs); // 0x00000001801EDC10
	public static short ReadInt16(object ptr, int ofs); // 0x00000001801EDC20
	public static int ReadInt32(IntPtr ptr); // 0x00000001801EDCE0
	public static int ReadInt32(IntPtr ptr, int ofs); // 0x00000001801EDCD0
	public static int ReadInt32(object ptr, int ofs); // 0x00000001801EDD40
	public static long ReadInt64(IntPtr ptr); // 0x00000001801EDDF0
	public static long ReadInt64(IntPtr ptr, int ofs); // 0x00000001801EDDE0
	public static long ReadInt64(object ptr, int ofs); // 0x00000001801EDD90
	public static IntPtr ReadIntPtr(IntPtr ptr); // 0x00000001801EDE50
	public static IntPtr ReadIntPtr(IntPtr ptr, int ofs); // 0x00000001801EDDE0
	public static IntPtr ReadIntPtr(object ptr, int ofs); // 0x00000001801EDEB0
	public static IntPtr ReAllocCoTaskMem(IntPtr pv, int cb); // 0x00000001801EDB30
	public static IntPtr ReAllocHGlobal(IntPtr pv, IntPtr cb); // 0x00000001801EDB40
	private static int ReleaseInternal(IntPtr pUnk); // 0x00000001801EE010
	public static int Release(IntPtr pUnk); // 0x00000001801EE070
	private static int ReleaseComObjectInternal(object co); // 0x00000001801EDF00
	public static int ReleaseComObject(object o); // 0x00000001801EDF10
	public static void ReleaseThreadCache(); // 0x00000001801EE020
	public static bool SetComObjectData(object obj, object key, object data); // 0x00000001801EE9F0
	public static int SizeOf(object structure); // 0x00000001801EEA60
	public static int SizeOf(Type t); // 0x00000001801EEA50
	public static IntPtr StringToBSTR(string s); // 0x00000001801EEAD0
	public static IntPtr StringToCoTaskMemAnsi(string s); // 0x00000001801EEAE0
	public static IntPtr StringToCoTaskMemAuto(string s); // 0x00000001801EEC20
	public static IntPtr StringToCoTaskMemUni(string s); // 0x00000001801EEEB0
	public static IntPtr StringToHGlobalAnsi(string s); // 0x00000001801EEFB0
	public static IntPtr StringToHGlobalAuto(string s); // 0x00000001801EEFC0
	public static IntPtr StringToHGlobalUni(string s); // 0x00000001801EF060
	public static IntPtr SecureStringToBSTR(SecureString s); // 0x00000001801EE110
	public static IntPtr SecureStringToCoTaskMemAnsi(SecureString s); // 0x00000001801EE3A0
	public static IntPtr SecureStringToCoTaskMemUnicode(SecureString s); // 0x00000001801EE660
	public static IntPtr SecureStringToGlobalAllocAnsi(SecureString s); // 0x00000001801EE8D0
	public static IntPtr SecureStringToGlobalAllocUnicode(SecureString s); // 0x00000001801EE960
	public static void StructureToPtr(object structure, IntPtr ptr, bool fDeleteOld); // 0x00000001801EF070
	public static void ThrowExceptionForHR(int errorCode); // 0x00000001801EF100
	public static void ThrowExceptionForHR(int errorCode, IntPtr errorInfo); // 0x00000001801EF080
	public static IntPtr UnsafeAddrOfPinnedArrayElement(Array arr, int index); // 0x00000001801EF1B0
	public static void WriteByte(IntPtr ptr, byte val); // 0x00000001801EF1C0
	public static void WriteByte(IntPtr ptr, int ofs, byte val); // 0x00000001801EF230
	public static void WriteByte(out object ptr, int ofs, byte val); // 0x00000001801EF240
	public static void WriteInt16(IntPtr ptr, short val); // 0x00000001801EF290
	public static void WriteInt16(IntPtr ptr, int ofs, short val); // 0x00000001801EF300
	public static void WriteInt16(out object ptr, int ofs, short val); // 0x00000001801EF3D0
	public static void WriteInt16(IntPtr ptr, char val); // 0x00000001801EF360
	public static void WriteInt16(IntPtr ptr, int ofs, char val); // 0x00000001801EF300
	public static void WriteInt16(out object ptr, int ofs, char val); // 0x00000001801EF310
	public static void WriteInt32(IntPtr ptr, int val); // 0x00000001801EF480
	public static void WriteInt32(IntPtr ptr, int ofs, int val); // 0x00000001801EF470
	public static void WriteInt32(out object ptr, int ofs, int val); // 0x00000001801EF420
	public static void WriteInt64(IntPtr ptr, long val); // 0x00000001801EF530
	public static void WriteInt64(IntPtr ptr, int ofs, long val); // 0x00000001801EF590
	public static void WriteInt64(out object ptr, int ofs, long val); // 0x00000001801EF4E0
	public static void WriteIntPtr(IntPtr ptr, IntPtr val); // 0x00000001801EF5A0
	public static void WriteIntPtr(IntPtr ptr, int ofs, IntPtr val); // 0x00000001801EF590
	public static void WriteIntPtr(out object ptr, int ofs, IntPtr val); // 0x00000001801EF600
	public static Exception GetExceptionForHR(int errorCode); // 0x00000001801EC7C0
	public static Exception GetExceptionForHR(int errorCode, IntPtr errorInfo); // 0x00000001801EC820
	public static int FinalReleaseComObject(object o); // 0x00000001801EBE10
	private static Delegate GetDelegateForFunctionPointerInternal(IntPtr ptr, Type t); // 0x00000001801EC560
	public static Delegate GetDelegateForFunctionPointer(IntPtr ptr, Type t); // 0x00000001801EC570
	private static IntPtr GetFunctionPointerForDelegateInternal(Delegate d); // 0x00000001801EC980
	public static IntPtr GetFunctionPointerForDelegate(Delegate d); // 0x00000001801EC990
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public class MarshalDirectiveException : SystemException // TypeDefIndex: 828
{
	// Fields
	private const int ErrorCode = -2146233035; // 0x00

	// Constructors
	public MarshalDirectiveException(); // 0x00000001801EAF60
	public MarshalDirectiveException(string message); // 0x00000001801EAFB0
	public MarshalDirectiveException(string message, Exception inner); // 0x00000001801EAF40
	protected MarshalDirectiveException(SerializationInfo info, StreamingContext context); // 0x000000018010E170

}

// Namespace: System.Runtime.InteropServices
public struct PARAMDESC // TypeDefIndex: 829
{
	// Fields
	public IntPtr lpVarValue; // 0x10
	public PARAMFLAG wParamFlags; // 0x10

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum PARAMFLAG // TypeDefIndex: 830
{
	PARAMFLAG_NONE = 0,
	PARAMFLAG_FIN = 1,
	PARAMFLAG_FOUT = 2,
	PARAMFLAG_FLCID = 4,
	PARAMFLAG_FRETVAL = 8,
	PARAMFLAG_FOPT = 16,
	PARAMFLAG_FHASDEFAULT = 32,
	PARAMFLAG_FHASCUSTDATA = 64
}

// Namespace: System.Runtime.InteropServices
public sealed class PreserveSigAttribute : Attribute // TypeDefIndex: 831
{
	// Constructors
	public PreserveSigAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Runtime.InteropServices
public sealed class PrimaryInteropAssemblyAttribute : Attribute // TypeDefIndex: 832
{
	// Fields
	private int major; // 0x10
	private int minor; // 0x10

	// Properties
	public int MajorVersion { get; } // 0x00000001800ECD10 
	public int MinorVersion { get; } // 0x0000000180156360 

	// Constructors
	public PrimaryInteropAssemblyAttribute(int major, int minor); // 0x00000001801562F0

}

// Namespace: System.Runtime.InteropServices
public sealed class ProgIdAttribute : Attribute // TypeDefIndex: 833
{
	// Fields
	private string pid; // 0x10

	// Properties
	public string Value { get; } // 0x00000001800E20D0 

	// Constructors
	public ProgIdAttribute(string progId); // 0x00000001801137E0

}

// Namespace: System.Runtime.InteropServices
public enum RegistrationClassContext // TypeDefIndex: 834
{
	InProcessServer = 1,
	InProcessHandler = 2,
	LocalServer = 4,
	InProcessServer16 = 8,
	RemoteServer = 16,
	InProcessHandler16 = 32,
	Reserved1 = 64,
	Reserved2 = 128,
	Reserved3 = 256,
	Reserved4 = 512,
	NoCodeDownload = 1024,
	Reserved5 = 2048,
	NoCustomMarshal = 4096,
	EnableCodeDownload = 8192,
	NoFailureLog = 16384,
	DisableActivateAsActivator = 32768,
	EnableActivateAsActivator = 65536,
	FromDefaultContext = 131072
}

// Namespace: System.Runtime.InteropServices
public enum RegistrationConnectionType // TypeDefIndex: 835
{
	SingleUse = 0,
	MultipleUse = 1,
	MultiSeparate = 2,
	Suspended = 4,
	Surrogate = 8
}

// Namespace: System.Runtime.InteropServices
public class RegistrationServices : IRegistrationServices // TypeDefIndex: 836
{
	// Constructors
	public RegistrationServices(); // 0x00000001800E2000

	// Methods
	public virtual Guid GetManagedCategoryGuid(); // 0x00000001801EFD60
	public virtual string GetProgIdForType(Type type); // 0x00000001801EFDB0
	public virtual Type[] GetRegistrableTypesInAssembly(Assembly assembly); // 0x00000001801EFE00
	public virtual bool RegisterAssembly(Assembly assembly, AssemblyRegistrationFlags flags); // 0x00000001801EFE50
	public virtual void RegisterTypeForComClients(Type type, Guid g); // 0x00000001801EFEF0
	public virtual bool TypeRepresentsComType(Type type); // 0x00000001801EFF40
	public virtual bool TypeRequiresRegistration(Type type); // 0x00000001801EFF90
	public virtual bool UnregisterAssembly(Assembly assembly); // 0x00000001801EFFE0
	public virtual int RegisterTypeForComClients(Type type, RegistrationClassContext classContext, RegistrationConnectionType flags); // 0x00000001801EFEA0
	public virtual void UnregisterTypeForComClients(int cookie); // 0x00000001801F0030
}

// Namespace: System.Runtime.InteropServices
public class RuntimeEnvironment // TypeDefIndex: 837
{
	// Properties
	public static string SystemConfigurationFile { get; } // 0x00000001801F0C10 

	// Constructors
	public RuntimeEnvironment(); // 0x00000001800E2000

	// Methods
	public static bool FromGlobalAccessCache(Assembly a); // 0x00000001801F0820
	public static string GetRuntimeDirectory(); // 0x00000001801F0840
	public static string GetSystemVersion(); // 0x00000001801F0900
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public class SEHException : ExternalException // TypeDefIndex: 838
{
	// Constructors
	public SEHException(); // 0x00000001801E9DF0
	public SEHException(string message); // 0x00000001801E9DB0
	public SEHException(string message, Exception inner); // 0x00000001801E9DD0
	protected SEHException(SerializationInfo info, StreamingContext context); // 0x000000018010E170

	// Methods
	public virtual bool CanResume(); // 0x000000018011A0F0
}

// Namespace: System.Runtime.InteropServices
public struct STATSTG // TypeDefIndex: 839
{
	// Fields
	public string pwcsName; // 0x10
	public int type; // 0x20
	public long cbSize; // 0x30
	public FILETIME mtime; // 0x40
	public FILETIME ctime; // 0x48
	public FILETIME atime; // 0x5C
	public int grfMode; // 0x10
	public int grfLocksSupported; // 0x00
	public Guid clsid; // 0x10
	public int grfStateBits; // 0x20
	public int reserved; // 0x00

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum SYSKIND // TypeDefIndex: 840
{
	SYS_WIN16 = 0,
	SYS_WIN32 = 1,
	SYS_MAC = 2
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public class SafeArrayRankMismatchException : SystemException // TypeDefIndex: 841
{
	// Fields
	private const int ErrorCode = -2146233032; // 0x00

	// Constructors
	public SafeArrayRankMismatchException(); // 0x00000001801F0CD0
	public SafeArrayRankMismatchException(string message); // 0x00000001801F0CB0
	public SafeArrayRankMismatchException(string message, Exception inner); // 0x00000001801F0D20
	protected SafeArrayRankMismatchException(SerializationInfo info, StreamingContext context); // 0x000000018010E170

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public class SafeArrayTypeMismatchException : SystemException // TypeDefIndex: 842
{
	// Fields
	private const int ErrorCode = -2146233037; // 0x00

	// Constructors
	public SafeArrayTypeMismatchException(); // 0x00000001801F0D60
	public SafeArrayTypeMismatchException(string message); // 0x00000001801F0DB0
	public SafeArrayTypeMismatchException(string message, Exception inner); // 0x00000001801F0D40
	protected SafeArrayTypeMismatchException(SerializationInfo info, StreamingContext context); // 0x000000018010E170

}

// Namespace: System.Runtime.InteropServices
public abstract class SafeHandle : CriticalFinalizerObject, IDisposable // TypeDefIndex: 843
{
	// Fields
	protected IntPtr handle; // 0x10
	private IntPtr invalid_handle_value; // 0x20
	private int refcount; // 0x00
	private bool owns_handle; // 0x00

	// Properties
	public bool IsClosed { get; } // 0x00000001801F1470 
	public abstract bool IsInvalid { get; }

	// Constructors
	protected SafeHandle(); // 0x00000001801F1410
	protected SafeHandle(IntPtr invalidHandleValue, bool ownsHandle); // 0x00000001801F13D0

	// Methods
	public void Close(); // 0x00000001801F0DD0
	public void DangerousAddRef(bool success); // 0x00000001801F0EE0
	public IntPtr DangerousGetHandle(); // 0x00000001801F1010
	public void DangerousRelease(); // 0x00000001801F10B0
	public void Dispose(); // 0x00000001801F12D0
	public void SetHandleAsInvalid(); // 0x00000001801F13C0
	protected virtual void Dispose(bool disposing); // 0x00000001801F11C0
	protected abstract bool ReleaseHandle();
	protected void SetHandle(IntPtr handle); // 0x0000000180114C30
	protected override void Finalize(); // 0x00000001801F1300
}

// Namespace: System.Runtime.InteropServices
public sealed class SetWin32ContextInIDispatchAttribute : Attribute // TypeDefIndex: 844
{
	// Constructors
	public SetWin32ContextInIDispatchAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Runtime.InteropServices
public struct TYPEATTR // TypeDefIndex: 845
{
	// Fields
	public const int MEMBER_ID_NIL = -1; // 0x00
	public Guid guid; // 0x20
	public int lcid; // 0x28
	public int dwReserved; // 0x30
	public int memidConstructor; // 0x3C
	public int memidDestructor; // 0x42
	public IntPtr lpstrSchema; // 0x46
	public int cbSizeInstance; // 0x4C
	public TYPEKIND typekind; // 0x52
	public short cFuncs; // 0x68
	public short cVars; // 0x10
	public short cImplTypes; // 0x00
	public short cbSizeVft; // 0x10
	public short cbAlignment; // 0x00
	public TYPEFLAGS wTypeFlags; // 0x00
	public short wMajorVerNum; // 0x00
	public short wMinorVerNum; // 0x00
	public TYPEDESC tdescAlias; // 0x00
	public IDLDESC idldescType; // 0x00

}

// Namespace: System.Runtime.InteropServices
public struct TYPEDESC // TypeDefIndex: 846
{
	// Fields
	public IntPtr lpValue; // 0x10
	public short vt; // 0x00

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum TYPEFLAGS // TypeDefIndex: 847
{
	TYPEFLAG_FAPPOBJECT = 1,
	TYPEFLAG_FCANCREATE = 2,
	TYPEFLAG_FLICENSED = 4,
	TYPEFLAG_FPREDECLID = 8,
	TYPEFLAG_FHIDDEN = 16,
	TYPEFLAG_FCONTROL = 32,
	TYPEFLAG_FDUAL = 64,
	TYPEFLAG_FNONEXTENSIBLE = 128,
	TYPEFLAG_FOLEAUTOMATION = 256,
	TYPEFLAG_FRESTRICTED = 512,
	TYPEFLAG_FAGGREGATABLE = 1024,
	TYPEFLAG_FREPLACEABLE = 2048,
	TYPEFLAG_FDISPATCHABLE = 4096,
	TYPEFLAG_FREVERSEBIND = 8192,
	TYPEFLAG_FPROXY = 16384
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum TYPEKIND // TypeDefIndex: 848
{
	TKIND_ENUM = 0,
	TKIND_RECORD = 1,
	TKIND_MODULE = 2,
	TKIND_INTERFACE = 3,
	TKIND_DISPATCH = 4,
	TKIND_COCLASS = 5,
	TKIND_ALIAS = 6,
	TKIND_UNION = 7,
	TKIND_MAX = 8
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public struct TYPELIBATTR // TypeDefIndex: 849
{
	// Fields
	public Guid guid; // 0x10
	public int lcid; // 0x24
	public SYSKIND syskind; // 0x2A
	public short wMajorVerNum; // 0x10
	public short wMinorVerNum; // 0x00
	public LIBFLAGS wLibFlags; // 0x00

}

// Namespace: System.Runtime.InteropServices
public sealed class TypeLibConverter : ITypeLibConverter // TypeDefIndex: 850
{
	// Constructors
	public TypeLibConverter(); // 0x00000001800E2000

	// Methods
	public object ConvertAssemblyToTypeLib(Assembly assembly, string strTypeLibName, TypeLibExporterFlags flags, ITypeLibExporterNotifySink notifySink); // 0x00000001801F1DD0
	public AssemblyBuilder ConvertTypeLibToAssembly(object typeLib, string asmFileName, int flags, ITypeLibImporterNotifySink notifySink, byte[] publicKey, StrongNameKeyPair keyPair, bool unsafeInterfaces); // 0x00000001801F1E20
	public AssemblyBuilder ConvertTypeLibToAssembly(object typeLib, string asmFileName, TypeLibImporterFlags flags, ITypeLibImporterNotifySink notifySink, byte[] publicKey, StrongNameKeyPair keyPair, string asmNamespace, Version asmVersion); // 0x00000001801F1E70
	public bool GetPrimaryInteropAssembly(Guid g, int major, int minor, int lcid, out string asmName, out string asmCodeBase); // 0x00000001801F1EC0
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum TypeLibExporterFlags // TypeDefIndex: 851
{
	None = 0,
	OnlyReferenceRegistered = 1,
	CallerResolvedReferences = 2,
	OldNames = 4,
	ExportAs32Bit = 16,
	ExportAs64Bit = 32
}

// Namespace: System.Runtime.InteropServices
public sealed class TypeLibFuncAttribute : Attribute // TypeDefIndex: 852
{
	// Fields
	private TypeLibFuncFlags flags; // 0x10

	// Properties
	public TypeLibFuncFlags Value { get; } // 0x00000001800ECD10 

	// Constructors
	public TypeLibFuncAttribute(short flags); // 0x00000001801EA260
	public TypeLibFuncAttribute(TypeLibFuncFlags flags); // 0x000000018010E510

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum TypeLibFuncFlags // TypeDefIndex: 853
{
	FRestricted = 1,
	FSource = 2,
	FBindable = 4,
	FRequestEdit = 8,
	FDisplayBind = 16,
	FDefaultBind = 32,
	FHidden = 64,
	FUsesGetLastError = 128,
	FDefaultCollelem = 256,
	FUiDefault = 512,
	FNonBrowsable = 1024,
	FReplaceable = 2048,
	FImmediateBind = 4096
}

// Namespace: System.Runtime.InteropServices
public sealed class TypeLibImportClassAttribute : Attribute // TypeDefIndex: 854
{
	// Fields
	private string _importClass; // 0x10

	// Properties
	public string Value { get; } // 0x00000001800E20D0 

	// Constructors
	public TypeLibImportClassAttribute(Type importClass); // 0x00000001801F1F10

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum TypeLibImporterFlags // TypeDefIndex: 855
{
	None = 0,
	PrimaryInteropAssembly = 1,
	UnsafeInterfaces = 2,
	SafeArrayAsSystemArray = 4,
	TransformDispRetVals = 8,
	PreventClassMembers = 16,
	SerializableValueClasses = 32,
	ImportAsX86 = 256,
	ImportAsX64 = 512,
	ImportAsItanium = 1024,
	ImportAsAgnostic = 2048,
	ReflectionOnlyLoading = 4096
}

// Namespace: System.Runtime.InteropServices
public sealed class TypeLibTypeAttribute : Attribute // TypeDefIndex: 856
{
	// Fields
	private TypeLibTypeFlags flags; // 0x10

	// Properties
	public TypeLibTypeFlags Value { get; } // 0x00000001800ECD10 

	// Constructors
	public TypeLibTypeAttribute(short flags); // 0x00000001801EA260
	public TypeLibTypeAttribute(TypeLibTypeFlags flags); // 0x000000018010E510

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum TypeLibTypeFlags // TypeDefIndex: 857
{
	FAppObject = 1,
	FCanCreate = 2,
	FLicensed = 4,
	FPreDeclId = 8,
	FHidden = 16,
	FControl = 32,
	FDual = 64,
	FNonExtensible = 128,
	FOleAutomation = 256,
	FRestricted = 512,
	FAggregatable = 1024,
	FReplaceable = 2048,
	FDispatchable = 4096,
	FReverseBind = 8192
}

// Namespace: System.Runtime.InteropServices
public sealed class TypeLibVarAttribute : Attribute // TypeDefIndex: 858
{
	// Fields
	private TypeLibVarFlags flags; // 0x10

	// Properties
	public TypeLibVarFlags Value { get; } // 0x00000001800ECD10 

	// Constructors
	public TypeLibVarAttribute(short flags); // 0x00000001801EA260
	public TypeLibVarAttribute(TypeLibVarFlags flags); // 0x000000018010E510

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum TypeLibVarFlags // TypeDefIndex: 859
{
	FReadOnly = 1,
	FSource = 2,
	FBindable = 4,
	FRequestEdit = 8,
	FDisplayBind = 16,
	FDefaultBind = 32,
	FHidden = 64,
	FRestricted = 128,
	FDefaultCollelem = 256,
	FUiDefault = 512,
	FNonBrowsable = 1024,
	FReplaceable = 2048,
	FImmediateBind = 4096
}

// Namespace: System.Runtime.InteropServices
public sealed class TypeLibVersionAttribute : Attribute // TypeDefIndex: 860
{
	// Fields
	private int major; // 0x10
	private int minor; // 0x10

	// Properties
	public int MajorVersion { get; } // 0x00000001800ECD10 
	public int MinorVersion { get; } // 0x0000000180156360 

	// Constructors
	public TypeLibVersionAttribute(int major, int minor); // 0x00000001801562F0

}

// Namespace: System.Runtime.InteropServices
[ComImport]public interface UCOMIBindCtx // TypeDefIndex: 861
{
	// Methods
	void RegisterObjectBound(object punk); // 0x00000001801F21F0
	void RevokeObjectBound(object punk); // 0x00000001801F2370
	void ReleaseBoundObjects(); // 0x00000001801F2340
	void SetBindOptions(BIND_OPTS pbindopts); // 0x00000001801F2450
	void GetBindOptions(BIND_OPTS pbindopts); // 0x00000001801F2020
	void GetRunningObjectTable(out UCOMIRunningObjectTable pprot); // 0x00000001801F2130
	void RegisterObjectParam(string pszKey, object punk); // 0x00000001801F2280
	void GetObjectParam(string pszKey, out object ppunk); // 0x00000001801F2060
	void EnumObjectParam(out UCOMIEnumString ppenum); // 0x00000001801F1F60
	void RevokeObjectParam(string pszKey); // 0x00000001801F2400
}

// Namespace: System.Runtime.InteropServices
[ComImport]public interface UCOMIConnectionPoint // TypeDefIndex: 862
{
	// Methods
	void GetConnectionInterface(out Guid pIID); // 0x00000001801F2780
	void GetConnectionPointContainer(out UCOMIConnectionPointContainer ppCPC); // 0x00000001801F27C0
	void Advise(object pUnkSink, out int pdwCookie); // 0x00000001801F2620
	void Unadvise(int dwCookie); // 0x00000001801F2880
	void EnumConnections(out UCOMIEnumConnections ppEnum); // 0x00000001801F26C0
}

// Namespace: System.Runtime.InteropServices
[ComImport]public interface UCOMIConnectionPointContainer // TypeDefIndex: 863
{
	// Methods
	void EnumConnectionPoints(out UCOMIEnumConnectionPoints ppEnum); // 0x00000001801F2490
	void FindConnectionPoint(Guid riid, out UCOMIConnectionPoint ppCP); // 0x00000001801F2550
}

// Namespace: System.Runtime.InteropServices
[ComImport]public interface UCOMIEnumConnectionPoints // TypeDefIndex: 864
{
	// Methods
	int Next(int celt, out UCOMIConnectionPoint[] rgelt, out int pceltFetched); // 0x00000001801F2980
	int Skip(int celt); // 0x00000001801F29F0
	int Reset(); // 0x00000001801F29A0
	void Clone(out UCOMIEnumConnectionPoints ppenum); // 0x00000001801F28C0
}

// Namespace: System.Runtime.InteropServices
[ComImport]public interface UCOMIEnumConnections // TypeDefIndex: 865
{
	// Methods
	int Next(int celt, out CONNECTDATA[] rgelt, out int pceltFetched); // 0x00000001801F2B00
	int Skip(int celt); // 0x00000001801F2C50
	void Reset(); // 0x00000001801F2C20
	void Clone(out UCOMIEnumConnections ppenum); // 0x00000001801F2A40
}

// Namespace: System.Runtime.InteropServices
[ComImport]public interface UCOMIEnumMoniker // TypeDefIndex: 866
{
	// Methods
	int Next(int celt, out UCOMIMoniker[] rgelt, out int pceltFetched); // 0x00000001801F2D60
	int Skip(int celt); // 0x00000001801F2DD0
	int Reset(); // 0x00000001801F2D80
	void Clone(out UCOMIEnumMoniker ppenum); // 0x00000001801F2CA0
}

// Namespace: System.Runtime.InteropServices
[ComImport]public interface UCOMIEnumString // TypeDefIndex: 867
{
	// Methods
	int Next(int celt, out string[] rgelt, out int pceltFetched); // 0x00000001801F2EE0
	int Skip(int celt); // 0x00000001801F3040
	int Reset(); // 0x00000001801F2FF0
	void Clone(out UCOMIEnumString ppenum); // 0x00000001801F2E20
}

// Namespace: System.Runtime.InteropServices
[ComImport]public interface UCOMIEnumVARIANT // TypeDefIndex: 868
{
	// Methods
	int Next(int celt, int rgvar, int pceltFetched); // 0x00000001801F30D0
	int Skip(int celt); // 0x00000001801F3190
	int Reset(); // 0x00000001801F3140
	void Clone(int ppenum); // 0x00000001801F3090
}

// Namespace: System.Runtime.InteropServices
[ComImport]public interface UCOMIMoniker // TypeDefIndex: 869
{
	// Methods
	void GetClassID(out Guid pClassID); // 0x00000001801F3800
	int IsDirty(); // 0x00000001801F3BB0
	void Load(UCOMIStream pStm); // 0x00000001801F3E20
	void Save(UCOMIStream pStm, bool fClearDirty); // 0x00000001801F4340
	void GetSizeMax(out long pcbSize); // 0x00000001801F3960
	void BindToObject(UCOMIBindCtx pbc, UCOMIMoniker pmkToLeft, Guid riidResult, out object ppvResult); // 0x00000001801F31E0
	void BindToStorage(UCOMIBindCtx pbc, UCOMIMoniker pmkToLeft, Guid riid, out object ppvObj); // 0x00000001801F3360
	void Reduce(UCOMIBindCtx pbc, int dwReduceHowFar, UCOMIMoniker ppmkToLeft, out UCOMIMoniker ppmkReduced); // 0x00000001801F4040
	void ComposeWith(UCOMIMoniker pmkRight, bool fOnlyIfNotGeneric, out UCOMIMoniker ppmkComposite); // 0x00000001801F3610
	void Enum(bool fForward, out UCOMIEnumMoniker ppenumMoniker); // 0x00000001801F3730
	void IsEqual(UCOMIMoniker pmkOtherMoniker); // 0x00000001801F3C00
	void Hash(out int pdwHash); // 0x00000001801F3AB0
	void IsRunning(UCOMIBindCtx pbc, UCOMIMoniker pmkToLeft, UCOMIMoniker pmkNewlyRunning); // 0x00000001801F3C90
	void GetTimeOfLastChange(UCOMIBindCtx pbc, UCOMIMoniker pmkToLeft, out FILETIME pFileTime); // 0x00000001801F39A0
	void Inverse(out UCOMIMoniker ppmk); // 0x00000001801F3AF0
	void CommonPrefixWith(UCOMIMoniker pmkOther, out UCOMIMoniker ppmkPrefix); // 0x00000001801F34E0
	void RelativePathTo(UCOMIMoniker pmkOther, out UCOMIMoniker ppmkRelPath); // 0x00000001801F4210
	void GetDisplayName(UCOMIBindCtx pbc, UCOMIMoniker pmkToLeft, out string ppszDisplayName); // 0x00000001801F3840
	void ParseDisplayName(UCOMIBindCtx pbc, UCOMIMoniker pmkToLeft, string pszDisplayName, out int pchEaten, out UCOMIMoniker ppmkOut); // 0x00000001801F3EB0
	void IsSystemMoniker(out int pdwMksys); // 0x00000001801F3DE0
}

// Namespace: System.Runtime.InteropServices
[ComImport]public interface UCOMIPersistFile // TypeDefIndex: 870
{
	// Methods
	void GetClassID(out Guid pClassID); // 0x00000001801F43E0
	int IsDirty(); // 0x00000001801F4480
	void Load(string pszFileName, int dwMode); // 0x00000001801F44D0
	void Save(string pszFileName, bool fRemember); // 0x00000001801F4580
	void SaveCompleted(string pszFileName); // 0x00000001801F4530
	void GetCurFile(out string ppszFileName); // 0x00000001801F4420
}

// Namespace: System.Runtime.InteropServices
[ComImport]public interface UCOMIRunningObjectTable // TypeDefIndex: 871
{
	// Methods
	void Register(int grfFlags, object punkObject, UCOMIMoniker pmkObjectName, out int pdwRegister); // 0x00000001801F4940
	void Revoke(int dwRegister); // 0x00000001801F4A50
	void IsRunning(UCOMIMoniker pmkObjectName); // 0x00000001801F4860
	void GetObject(UCOMIMoniker pmkObjectName, out object ppunkObject); // 0x00000001801F46A0
	void NoteChangeTime(int dwRegister, FILETIME pfiletime); // 0x00000001801F48F0
	void GetTimeOfLastChange(UCOMIMoniker pmkObjectName, out FILETIME pfiletime); // 0x00000001801F47C0
	void EnumRunning(out UCOMIEnumMoniker ppenumMoniker); // 0x00000001801F45E0
}

// Namespace: System.Runtime.InteropServices
[ComImport]public interface UCOMIStream // TypeDefIndex: 872
{
	// Methods
	void Read(out byte[] pv, int cb, IntPtr pcbRead); // 0x00000001801F4CB0
	void Write(byte[] pv, int cb, IntPtr pcbWritten); // 0x00000001801F4FC0
	void Seek(long dlibMove, int dwOrigin, IntPtr plibNewPosition); // 0x00000001801F4DB0
	void SetSize(long libNewSize); // 0x00000001801F4E10
	void CopyTo(UCOMIStream pstm, long cb, IntPtr pcbRead, IntPtr pcbWritten); // 0x00000001801F4B90
	void Commit(int grfCommitFlags); // 0x00000001801F4B50
	void Revert(); // 0x00000001801F4D80
	void LockRegion(long libOffset, long cb, int dwLockType); // 0x00000001801F4C50
	void UnlockRegion(long libOffset, long cb, int dwLockType); // 0x00000001801F4F60
	void Stat(out STATSTG pstatstg, int grfStatFlag); // 0x00000001801F4E50
	void Clone(out UCOMIStream ppstm); // 0x00000001801F4A90
}

// Namespace: System.Runtime.InteropServices
[ComImport]public interface UCOMITypeComp // TypeDefIndex: 873
{
	// Methods
	void Bind(string szName, int lHashVal, short wFlags, out UCOMITypeInfo ppTInfo, out DESCKIND pDescKind, out BINDPTR pBindPtr); // 0x00000001801F5180
	void BindType(string szName, int lHashVal, out UCOMITypeInfo ppTInfo, out UCOMITypeComp ppTComp); // 0x00000001801F5030
}

// Namespace: System.Runtime.InteropServices
[ComImport]public interface UCOMITypeInfo // TypeDefIndex: 874
{
	// Methods
	void GetTypeAttr(out IntPtr ppTypeAttr); // 0x00000001801F5B50
	void GetTypeComp(out UCOMITypeComp ppTComp); // 0x00000001801F5B90
	void GetFuncDesc(int index, out IntPtr ppFuncDesc); // 0x00000001801F56A0
	void GetVarDesc(int index, out IntPtr ppVarDesc); // 0x00000001801F5C50
	void GetNames(int memid, out string[] rgBstrNames, int cMaxNames, out int pcNames); // 0x00000001801F5920
	void GetRefTypeOfImplType(int index, out int href); // 0x00000001801F5B00
	void GetImplTypeFlags(int index, out int pImplTypeFlags); // 0x00000001801F5860
	void GetIDsOfNames(string[] rgszNames, int cNames, out int[] pMemId); // 0x00000001801F56F0
	void Invoke(object pvInstance, int memid, short wFlags, DISPPARAMS pDispParams, out object pVarResult, out EXCEPINFO pExcepInfo, out int puArgErr); // 0x00000001801F5CA0
	void GetDocumentation(int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile); // 0x00000001801F55B0
	void GetDllEntry(int memid, INVOKEKIND invKind, out string pBstrDllName, out string pBstrName, out short pwOrdinal); // 0x00000001801F54F0
	void GetRefTypeInfo(int hRef, out UCOMITypeInfo ppTI); // 0x00000001801F5A30
	void AddressOfMember(int memid, INVOKEKIND invKind, out IntPtr ppv); // 0x00000001801F5290
	void CreateInstance(object pUnkOuter, Guid riid, out object ppvObj); // 0x00000001801F52F0
	void GetMops(int memid, out string pBstrMops); // 0x00000001801F58B0
	void GetContainingTypeLib(out UCOMITypeLib ppTLB, out int pIndex); // 0x00000001801F5420
	void ReleaseTypeAttr(IntPtr pTypeAttr); // 0x00000001801F5EB0
	void ReleaseFuncDesc(IntPtr pFuncDesc); // 0x00000001801F5E70
	void ReleaseVarDesc(IntPtr pVarDesc); // 0x00000001801F5EF0
}

// Namespace: System.Runtime.InteropServices
[ComImport]public interface UCOMITypeLib // TypeDefIndex: 875
{
	// Methods
	int GetTypeInfoCount(); // 0x00000001801F6140
	void GetTypeInfo(int index, out UCOMITypeInfo ppTI); // 0x00000001801F62B0
	void GetTypeInfoType(int index, out TYPEKIND pTKind); // 0x00000001801F6260
	void GetTypeInfoOfGuid(Guid guid, out UCOMITypeInfo ppTInfo); // 0x00000001801F6190
	void GetLibAttr(out IntPtr ppTLibAttr); // 0x00000001801F6040
	void GetTypeComp(out UCOMITypeComp ppTComp); // 0x00000001801F6080
	void GetDocumentation(int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile); // 0x00000001801F5F50
	bool IsName(string szNameBuf, int lHashVal); // 0x00000001801F6380
	void FindName(string szNameBuf, int lHashVal, out UCOMITypeInfo[] ppTInfo, out int[] rgMemId, short pcFound); // 0x00000001801F5F30
	void ReleaseTLibAttr(IntPtr pTLibAttr); // 0x00000001801F63F0
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public sealed class UnknownWrapper // TypeDefIndex: 876
{
	// Fields
	private object InternalObject; // 0x10

	// Properties
	public object WrappedObject { get; } // 0x00000001800E20D0 

	// Constructors
	public UnknownWrapper(object obj); // 0x000000018015C840

}

// Namespace: System.Runtime.InteropServices
public sealed class UnmanagedFunctionPointerAttribute : Attribute // TypeDefIndex: 877
{
	// Fields
	private CallingConvention call_conv; // 0x10
	public CharSet CharSet; // 0x18
	public bool SetLastError; // 0x1A
	public bool BestFitMapping; // 0x00
	public bool ThrowOnUnmappableChar; // 0x10

	// Properties
	public CallingConvention CallingConvention { get; } // 0x00000001800ECD10 

	// Constructors
	public UnmanagedFunctionPointerAttribute(CallingConvention callingConvention); // 0x000000018010E510

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum UnmanagedType // TypeDefIndex: 878
{
	Bool = 2,
	I1 = 3,
	U1 = 4,
	I2 = 5,
	U2 = 6,
	I4 = 7,
	U4 = 8,
	I8 = 9,
	U8 = 10,
	R4 = 11,
	R8 = 12,
	Currency = 15,
	BStr = 19,
	LPStr = 20,
	LPWStr = 21,
	LPTStr = 22,
	ByValTStr = 23,
	IUnknown = 25,
	IDispatch = 26,
	Struct = 27,
	Interface = 28,
	SafeArray = 29,
	ByValArray = 30,
	SysInt = 31,
	SysUInt = 32,
	VBByRefStr = 34,
	AnsiBStr = 35,
	TBStr = 36,
	VariantBool = 37,
	FunctionPtr = 38,
	AsAny = 40,
	LPArray = 42,
	LPStruct = 43,
	CustomMarshaler = 44,
	Error = 45
}

// Namespace: System.Runtime.InteropServices
public struct VARDESC // TypeDefIndex: 879
{
	// Fields
	public int memid; // 0x10
	public string lpstrSchema; // 0x20
	public ELEMDESC elemdescVar; // 0x44
	public short wVarFlags; // 0x10
	public VarEnum varkind; // 0x10

}

// Namespace: 
public struct DESCUNION // TypeDefIndex: 880
{
	// Fields
	public IntPtr lpvarValue; // 0x10
	public int oInst; // 0x10

}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum VARFLAGS // TypeDefIndex: 881
{
	VARFLAG_FREADONLY = 1,
	VARFLAG_FSOURCE = 2,
	VARFLAG_FBINDABLE = 4,
	VARFLAG_FREQUESTEDIT = 8,
	VARFLAG_FDISPLAYBIND = 16,
	VARFLAG_FDEFAULTBIND = 32,
	VARFLAG_FHIDDEN = 64,
	VARFLAG_FRESTRICTED = 128,
	VARFLAG_FDEFAULTCOLLELEM = 256,
	VARFLAG_FUIDEFAULT = 512,
	VARFLAG_FNONBROWSABLE = 1024,
	VARFLAG_FREPLACEABLE = 2048,
	VARFLAG_FIMMEDIATEBIND = 4096
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public enum VarEnum // TypeDefIndex: 882
{
	VT_EMPTY = 0,
	VT_NULL = 1,
	VT_I2 = 2,
	VT_I4 = 3,
	VT_R4 = 4,
	VT_R8 = 5,
	VT_CY = 6,
	VT_DATE = 7,
	VT_BSTR = 8,
	VT_DISPATCH = 9,
	VT_ERROR = 10,
	VT_BOOL = 11,
	VT_VARIANT = 12,
	VT_UNKNOWN = 13,
	VT_DECIMAL = 14,
	VT_I1 = 16,
	VT_UI1 = 17,
	VT_UI2 = 18,
	VT_UI4 = 19,
	VT_I8 = 20,
	VT_UI8 = 21,
	VT_INT = 22,
	VT_UINT = 23,
	VT_VOID = 24,
	VT_HRESULT = 25,
	VT_PTR = 26,
	VT_SAFEARRAY = 27,
	VT_CARRAY = 28,
	VT_USERDEFINED = 29,
	VT_LPSTR = 30,
	VT_LPWSTR = 31,
	VT_RECORD = 36,
	VT_FILETIME = 64,
	VT_BLOB = 65,
	VT_STREAM = 66,
	VT_STORAGE = 67,
	VT_STREAMED_OBJECT = 68,
	VT_STORED_OBJECT = 69,
	VT_BLOB_OBJECT = 70,
	VT_CF = 71,
	VT_CLSID = 72,
	VT_VECTOR = 4096,
	VT_ARRAY = 8192,
	VT_BYREF = 16384
}

// Namespace: System.Runtime.InteropServices
[Serializable]
public sealed class VariantWrapper // TypeDefIndex: 883
{
	// Fields
	private object _wrappedObject; // 0x10

	// Properties
	public object WrappedObject { get; } // 0x00000001800E20D0 

	// Constructors
	public VariantWrapper(object obj); // 0x000000018015C840

}

// Namespace: System.Runtime.InteropServices
public interface _Activator // TypeDefIndex: 884
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Runtime.InteropServices
public interface _Assembly // TypeDefIndex: 885
{
	// Properties
	string CodeBase { get; }
	string EscapedCodeBase { get; }
	string FullName { get; }
	MethodInfo EntryPoint { get; }
	string Location { get; }

	// Events
	event ModuleResolveEventHandler ModuleResolve {
		add; // 0x0000000000000000
		remove; // 0x0000000000000000
	}

	// Methods
	string ToString();
	bool Equals(object other);
	int GetHashCode();
	Type GetType();
	AssemblyName GetName();
	AssemblyName GetName(bool copiedName);
	Type GetType(string name);
	Type GetType(string name, bool throwOnError);
	Type[] GetExportedTypes();
	Type[] GetTypes();
	Stream GetManifestResourceStream(Type type, string name);
	Stream GetManifestResourceStream(string name);
	FileStream GetFile(string name);
	FileStream[] GetFiles();
	FileStream[] GetFiles(bool getResourceModules);
	string[] GetManifestResourceNames();
	ManifestResourceInfo GetManifestResourceInfo(string resourceName);
	object[] GetCustomAttributes(Type attributeType, bool inherit);
	object[] GetCustomAttributes(bool inherit);
	bool IsDefined(Type attributeType, bool inherit);
	void GetObjectData(SerializationInfo info, StreamingContext context);
	Type GetType(string name, bool throwOnError, bool ignoreCase);
	Assembly GetSatelliteAssembly(CultureInfo culture);
	Assembly GetSatelliteAssembly(CultureInfo culture, Version version);
	Module LoadModule(string moduleName, byte[] rawModule);
	Module LoadModule(string moduleName, byte[] rawModule, byte[] rawSymbolStore);
	object CreateInstance(string typeName);
	object CreateInstance(string typeName, bool ignoreCase);
	object CreateInstance(string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes);
	Module[] GetLoadedModules();
	Module[] GetLoadedModules(bool getResourceModules);
	Module[] GetModules();
	Module[] GetModules(bool getResourceModules);
	Module GetModule(string name);
	AssemblyName[] GetReferencedAssemblies();
}

// Namespace: System.Runtime.InteropServices
public interface _AssemblyBuilder // TypeDefIndex: 886
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Runtime.InteropServices
public interface _AssemblyName // TypeDefIndex: 887
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Runtime.InteropServices
public interface _ConstructorBuilder // TypeDefIndex: 888
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Runtime.InteropServices
public interface _ConstructorInfo // TypeDefIndex: 889
{
	// Properties
	MethodAttributes Attributes { get; }
	CallingConventions CallingConvention { get; }
	Type DeclaringType { get; }
	bool IsAbstract { get; }
	bool IsAssembly { get; }
	bool IsConstructor { get; }
	bool IsFamily { get; }
	bool IsFamilyAndAssembly { get; }
	bool IsFamilyOrAssembly { get; }
	bool IsFinal { get; }
	bool IsHideBySig { get; }
	bool IsPrivate { get; }
	bool IsPublic { get; }
	bool IsSpecialName { get; }
	bool IsStatic { get; }
	bool IsVirtual { get; }
	MemberTypes MemberType { get; }
	RuntimeMethodHandle MethodHandle { get; }
	string Name { get; }
	Type ReflectedType { get; }

	// Methods
	bool Equals(object other);
	object[] GetCustomAttributes(bool inherit);
	object[] GetCustomAttributes(Type attributeType, bool inherit);
	int GetHashCode();
	MethodImplAttributes GetMethodImplementationFlags();
	ParameterInfo[] GetParameters();
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
	Type GetType();
	object Invoke_5(object[] parameters);
	object Invoke_3(object obj, object[] parameters);
	object Invoke_4(BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture);
	object Invoke_2(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture);
	bool IsDefined(Type attributeType, bool inherit);
	string ToString();
}

// Namespace: System.Runtime.InteropServices
public interface _CustomAttributeBuilder // TypeDefIndex: 890
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Runtime.InteropServices
public interface _EnumBuilder // TypeDefIndex: 891
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Runtime.InteropServices
public interface _EventBuilder // TypeDefIndex: 892
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Runtime.InteropServices
public interface _EventInfo // TypeDefIndex: 893
{
	// Properties
	EventAttributes Attributes { get; }
	Type DeclaringType { get; }
	Type EventHandlerType { get; }
	bool IsMulticast { get; }
	bool IsSpecialName { get; }
	MemberTypes MemberType { get; }
	string Name { get; }
	Type ReflectedType { get; }

	// Methods
	void AddEventHandler(object target, Delegate handler);
	bool Equals(object other);
	MethodInfo GetAddMethod();
	MethodInfo GetAddMethod(bool nonPublic);
	object[] GetCustomAttributes(bool inherit);
	object[] GetCustomAttributes(Type attributeType, bool inherit);
	int GetHashCode();
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
	MethodInfo GetRaiseMethod();
	MethodInfo GetRaiseMethod(bool nonPublic);
	MethodInfo GetRemoveMethod();
	MethodInfo GetRemoveMethod(bool nonPublic);
	Type GetType();
	bool IsDefined(Type attributeType, bool inherit);
	void RemoveEventHandler(object target, Delegate handler);
	string ToString();
}

// Namespace: System.Runtime.InteropServices
public interface _FieldBuilder // TypeDefIndex: 894
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Runtime.InteropServices
public interface _FieldInfo // TypeDefIndex: 895
{
	// Properties
	FieldAttributes Attributes { get; }
	Type DeclaringType { get; }
	RuntimeFieldHandle FieldHandle { get; }
	Type FieldType { get; }
	bool IsAssembly { get; }
	bool IsFamily { get; }
	bool IsFamilyAndAssembly { get; }
	bool IsFamilyOrAssembly { get; }
	bool IsInitOnly { get; }
	bool IsLiteral { get; }
	bool IsNotSerialized { get; }
	bool IsPinvokeImpl { get; }
	bool IsPrivate { get; }
	bool IsPublic { get; }
	bool IsSpecialName { get; }
	bool IsStatic { get; }
	MemberTypes MemberType { get; }
	string Name { get; }
	Type ReflectedType { get; }

	// Methods
	bool Equals(object other);
	object[] GetCustomAttributes(bool inherit);
	object[] GetCustomAttributes(Type attributeType, bool inherit);
	int GetHashCode();
	Type GetType();
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
	object GetValue(object obj);
	object GetValueDirect(TypedReference obj);
	bool IsDefined(Type attributeType, bool inherit);
	void SetValue(object obj, object value);
	void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, CultureInfo culture);
	void SetValueDirect(TypedReference obj, object value);
	string ToString();
}

// Namespace: System.Runtime.InteropServices
public interface _ILGenerator // TypeDefIndex: 896
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Runtime.InteropServices
public interface _LocalBuilder // TypeDefIndex: 897
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Runtime.InteropServices
public interface _MethodBase // TypeDefIndex: 898
{
	// Properties
	MethodAttributes Attributes { get; }
	CallingConventions CallingConvention { get; }
	Type DeclaringType { get; }
	bool IsAbstract { get; }
	bool IsAssembly { get; }
	bool IsConstructor { get; }
	bool IsFamily { get; }
	bool IsFamilyAndAssembly { get; }
	bool IsFamilyOrAssembly { get; }
	bool IsFinal { get; }
	bool IsHideBySig { get; }
	bool IsPrivate { get; }
	bool IsPublic { get; }
	bool IsSpecialName { get; }
	bool IsStatic { get; }
	bool IsVirtual { get; }
	MemberTypes MemberType { get; }
	RuntimeMethodHandle MethodHandle { get; }
	string Name { get; }
	Type ReflectedType { get; }

	// Methods
	bool Equals(object other);
	object[] GetCustomAttributes(bool inherit);
	object[] GetCustomAttributes(Type attributeType, bool inherit);
	int GetHashCode();
	MethodImplAttributes GetMethodImplementationFlags();
	ParameterInfo[] GetParameters();
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
	Type GetType();
	object Invoke(object obj, object[] parameters);
	object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture);
	bool IsDefined(Type attributeType, bool inherit);
	string ToString();
}

// Namespace: System.Runtime.InteropServices
public interface _MethodBuilder // TypeDefIndex: 899
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Runtime.InteropServices
public interface _MethodInfo // TypeDefIndex: 900
{
	// Properties
	MethodAttributes Attributes { get; }
	CallingConventions CallingConvention { get; }
	Type DeclaringType { get; }
	bool IsAbstract { get; }
	bool IsAssembly { get; }
	bool IsConstructor { get; }
	bool IsFamily { get; }
	bool IsFamilyAndAssembly { get; }
	bool IsFamilyOrAssembly { get; }
	bool IsFinal { get; }
	bool IsHideBySig { get; }
	bool IsPrivate { get; }
	bool IsPublic { get; }
	bool IsSpecialName { get; }
	bool IsStatic { get; }
	bool IsVirtual { get; }
	MemberTypes MemberType { get; }
	RuntimeMethodHandle MethodHandle { get; }
	string Name { get; }
	Type ReflectedType { get; }
	Type ReturnType { get; }
	ICustomAttributeProvider ReturnTypeCustomAttributes { get; }

	// Methods
	bool Equals(object other);
	MethodInfo GetBaseDefinition();
	object[] GetCustomAttributes(bool inherit);
	object[] GetCustomAttributes(Type attributeType, bool inherit);
	int GetHashCode();
	MethodImplAttributes GetMethodImplementationFlags();
	ParameterInfo[] GetParameters();
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
	Type GetType();
	object Invoke(object obj, object[] parameters);
	object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture);
	bool IsDefined(Type attributeType, bool inherit);
	string ToString();
}

// Namespace: System.Runtime.InteropServices
public interface _MethodRental // TypeDefIndex: 901
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Runtime.InteropServices
public interface _Module // TypeDefIndex: 902
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Runtime.InteropServices
public interface _ModuleBuilder // TypeDefIndex: 903
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Runtime.InteropServices
public interface _ParameterBuilder // TypeDefIndex: 904
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Runtime.InteropServices
public interface _ParameterInfo // TypeDefIndex: 905
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Runtime.InteropServices
public interface _PropertyBuilder // TypeDefIndex: 906
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Runtime.InteropServices
public interface _PropertyInfo // TypeDefIndex: 907
{
	// Properties
	PropertyAttributes Attributes { get; }
	bool CanRead { get; }
	bool CanWrite { get; }
	Type DeclaringType { get; }
	bool IsSpecialName { get; }
	MemberTypes MemberType { get; }
	string Name { get; }
	Type PropertyType { get; }
	Type ReflectedType { get; }

	// Methods
	bool Equals(object other);
	MethodInfo[] GetAccessors();
	MethodInfo[] GetAccessors(bool nonPublic);
	object[] GetCustomAttributes(bool inherit);
	object[] GetCustomAttributes(Type attributeType, bool inherit);
	MethodInfo GetGetMethod();
	MethodInfo GetGetMethod(bool nonPublic);
	int GetHashCode();
	ParameterInfo[] GetIndexParameters();
	MethodInfo GetSetMethod();
	MethodInfo GetSetMethod(bool nonPublic);
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
	Type GetType();
	object GetValue(object obj, object[] index);
	object GetValue(object obj, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture);
	bool IsDefined(Type attributeType, bool inherit);
	void SetValue(object obj, object value, object[] index);
	void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture);
	string ToString();
}

// Namespace: System.Runtime.InteropServices
public interface _SignatureHelper // TypeDefIndex: 908
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Runtime.InteropServices
public interface _Thread // TypeDefIndex: 909
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Runtime.InteropServices
public interface _TypeBuilder // TypeDefIndex: 910
{
	// Methods
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System.Runtime.Remoting.Activation
internal class ActivationServices // TypeDefIndex: 911
{
	// Fields
	private static IActivator _constructionActivator; // 0x00

	// Properties
	private static IActivator ConstructionActivator { get; } // 0x00000001801E18B0 

	// Constructors
	public ActivationServices(); // 0x00000001800E2000

	// Methods
	public static IMessage Activate(RemotingProxy proxy, ConstructionCall ctorCall); // 0x00000001801E0870
	public static IMessage RemoteActivate(IConstructionCallMessage ctorCall); // 0x00000001801E17F0
	public static object CreateProxyFromAttributes(Type type, object[] activationAttributes); // 0x00000001801E15D0
	public static ConstructionCall CreateConstructionCall(Type type, string activationUrl, object[] activationAttributes); // 0x00000001801E0A50
	public static IMessage CreateInstanceFromMessage(IConstructionCallMessage ctorCall); // 0x00000001801E11A0
	public static object CreateProxyForType(Type type); // 0x00000001801E1470
	public static object AllocateUninitializedClassInstance(Type type); // 0x00000001801E0A40
	public static void EnableProxyActivation(Type type, bool enable); // 0x00000001801E17E0
}

// Namespace: System.Runtime.Remoting.Activation
[Serializable]
public enum ActivatorLevel // TypeDefIndex: 912
{
	Construction = 4,
	Context = 8,
	AppDomain = 12,
	Process = 16,
	Machine = 20
}

// Namespace: System.Runtime.Remoting.Activation
internal class AppDomainLevelActivator : IActivator // TypeDefIndex: 913
{
	// Fields
	private string _activationUrl; // 0x10
	private IActivator _next; // 0x10

	// Properties
	public ActivatorLevel Level { get; } // 0x00000001801E2960 
	public IActivator NextActivator { get; set; } // 0x00000001800EAEC0 0x00000001800EAEE0

	// Constructors
	public AppDomainLevelActivator(string activationUrl, IActivator next); // 0x000000018014B260

	// Methods
	public IConstructionReturnMessage Activate(IConstructionCallMessage ctorCall); // 0x00000001801E26A0
}

// Namespace: System.Runtime.Remoting.Activation
[Serializable]
internal class ConstructionLevelActivator : IActivator // TypeDefIndex: 914
{
	// Properties
	public ActivatorLevel Level { get; } // 0x00000001801AECA0 
	public IActivator NextActivator { get; set; } // 0x00000001800EA8C0 0x00000001800EA7B0

	// Constructors
	public ConstructionLevelActivator(); // 0x00000001800E2000

	// Methods
	public IConstructionReturnMessage Activate(IConstructionCallMessage msg); // 0x00000001801E8260
}

// Namespace: System.Runtime.Remoting.Activation
[Serializable]
internal class ContextLevelActivator : IActivator // TypeDefIndex: 915
{
	// Fields
	private IActivator m_NextActivator; // 0x10

	// Properties
	public ActivatorLevel Level { get; } // 0x0000000180129DD0 
	public IActivator NextActivator { get; set; } // 0x00000001800E20D0 0x0000000180114C30

	// Constructors
	public ContextLevelActivator(IActivator next); // 0x000000018015C840

	// Methods
	public IConstructionReturnMessage Activate(IConstructionCallMessage ctorCall); // 0x00000001801E8320
}

// Namespace: System.Runtime.Remoting.Activation
public interface IActivator // TypeDefIndex: 916
{
	// Properties
	ActivatorLevel Level { get; }
	IActivator NextActivator { get; set; }

	// Methods
	IConstructionReturnMessage Activate(IConstructionCallMessage msg);
}

// Namespace: System.Runtime.Remoting.Activation
public interface IConstructionCallMessage : IMessage, IMethodCallMessage, IMethodMessage // TypeDefIndex: 917
{
	// Properties
	Type ActivationType { get; }
	string ActivationTypeName { get; }
	IActivator Activator { get; set; }
	object[] CallSiteActivationAttributes { get; }
	IList ContextProperties { get; }

}

// Namespace: System.Runtime.Remoting.Activation
public interface IConstructionReturnMessage : IMessage, IMethodMessage, IMethodReturnMessage // TypeDefIndex: 918
{
}

// Namespace: System.Runtime.Remoting.Activation
internal class RemoteActivationAttribute : Attribute, IContextAttribute // TypeDefIndex: 919
{
	// Fields
	private IList _contextProperties; // 0x10

	// Constructors
	public RemoteActivationAttribute(); // 0x00000001800EAC90
	public RemoteActivationAttribute(IList contextProperties); // 0x00000001801137E0

	// Methods
	public bool IsContextOK(Context ctx, IConstructionCallMessage ctor); // 0x000000018011A0F0
	public void GetPropertiesForNewContext(IConstructionCallMessage ctor); // 0x00000001801F0080
}

// Namespace: System.Runtime.Remoting.Activation
internal class RemoteActivator : MarshalByRefObject, IActivator // TypeDefIndex: 920
{
	// Properties
	public ActivatorLevel Level { get; } // 0x00000001801F0730 
	public IActivator NextActivator { get; set; } // 0x00000001801F0780 0x00000001801F07D0

	// Constructors
	public RemoteActivator(); // 0x00000001800EAC90

	// Methods
	public IConstructionReturnMessage Activate(IConstructionCallMessage msg); // 0x00000001801F0340
	public override object InitializeLifetimeService(); // 0x00000001801F05F0
}

// Namespace: System.Runtime.Remoting.Activation
[Serializable]
public sealed class UrlAttribute : ContextAttribute // TypeDefIndex: 921
{
	// Fields
	private string url; // 0x18

	// Properties
	public string UrlValue { get; } // 0x00000001800EAEC0 

	// Constructors
	public UrlAttribute(string callsiteURL); // 0x00000001801F6500

	// Methods
	public override bool Equals(object o); // 0x00000001801F6430
	public override int GetHashCode(); // 0x00000001801F64E0
	public override void GetPropertiesForNewContext(IConstructionCallMessage ctorMsg); // 0x00000001800EA7B0
	public override bool IsContextOK(Context ctx, IConstructionCallMessage msg); // 0x000000018010E420
}

// Namespace: System.Runtime.Remoting.Channels
internal class AggregateDictionary : IEnumerable, ICollection, IDictionary // TypeDefIndex: 922
{
	// Fields
	private IDictionary[] dictionaries; // 0x10
	private ArrayList _values; // 0x20
	private ArrayList _keys; // 0x10

	// Properties
	public bool IsFixedSize { get; } // 0x000000018010E420 
	public bool IsReadOnly { get; } // 0x000000018010E420 
	public object Item { get; set; } // 0x00000001801E1EC0 0x00000001801E2290
	public ICollection Keys { get; } // 0x00000001801E1F90 
	public ICollection Values { get; } // 0x00000001801E2110 
	public int Count { get; } // 0x00000001801E1D80 
	public bool IsSynchronized { get; } // 0x000000018011A0F0 
	public object SyncRoot { get; } // 0x0000000180123590 

	// Constructors
	public AggregateDictionary(IDictionary[] dics); // 0x000000018015C840

	// Methods
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x00000001801E1D20
	public void Add(object key, object value); // 0x00000001801E1930
	public void Clear(); // 0x00000001801E1980
	public bool Contains(object ob); // 0x00000001801E19D0
	public IDictionaryEnumerator GetEnumerator(); // 0x00000001801E1C70
	public void Remove(object ob); // 0x00000001801E1CD0
	public void CopyTo(Array array, int index); // 0x00000001801E1A90
}

// Namespace: System.Runtime.Remoting.Channels
internal class AggregateEnumerator : IEnumerator, IDictionaryEnumerator // TypeDefIndex: 923
{
	// Fields
	private IDictionary[] dictionaries; // 0x10
	private int pos; // 0x20
	private IDictionaryEnumerator currente; // 0x18

	// Properties
	public DictionaryEntry Entry { get; } // 0x00000001801E2530 
	public object Key { get; } // 0x00000001801E2600 
	public object Value { get; } // 0x00000001801E2650 
	public object Current { get; } // 0x00000001801E24E0 

	// Constructors
	public AggregateEnumerator(IDictionary[] dics); // 0x00000001801E2440

	// Methods
	public bool MoveNext(); // 0x00000001801E22E0
	public void Reset(); // 0x00000001801E23C0
}

// Namespace: System.Runtime.Remoting.Channels
public abstract class BaseChannelObjectWithProperties : IEnumerable, ICollection, IDictionary // TypeDefIndex: 924
{
	// Fields
	private Hashtable table; // 0x10

	// Properties
	public virtual int Count { get; } // 0x000000018015AE50 
	public virtual bool IsFixedSize { get; } // 0x000000018010E420 
	public virtual bool IsReadOnly { get; } // 0x000000018011A0F0 
	public virtual bool IsSynchronized { get; } // 0x000000018011A0F0 
	public virtual object Item { get; set; } // 0x00000001801E2BB0 0x00000001801E2C60
	public virtual ICollection Keys { get; } // 0x00000001801E2C00 
	public virtual IDictionary Properties { get; } // 0x0000000180123590 
	public virtual object SyncRoot { get; } // 0x0000000180123590 
	public virtual ICollection Values { get; } // 0x00000001801E2C30 

	// Constructors
	protected BaseChannelObjectWithProperties(); // 0x00000001801E2B50

	// Methods
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x00000001801E2AD0
	public virtual void Add(object key, object value); // 0x00000001801E29B0
	public virtual void Clear(); // 0x00000001801E2A00
	public virtual bool Contains(object key); // 0x00000001801E2A50
	public virtual void CopyTo(Array array, int index); // 0x00000001801E2A80
	public virtual IDictionaryEnumerator GetEnumerator(); // 0x00000001801E2AD0
	public virtual void Remove(object key); // 0x00000001801E2B00
}

// Namespace: System.Runtime.Remoting.Channels
public abstract class BaseChannelSinkWithProperties : BaseChannelObjectWithProperties // TypeDefIndex: 925
{
	// Constructors
	protected BaseChannelSinkWithProperties(); // 0x00000001801E2B50

}

// Namespace: System.Runtime.Remoting.Channels
public abstract class BaseChannelWithProperties : BaseChannelObjectWithProperties // TypeDefIndex: 926
{
	// Fields
	protected IChannelSinkBase SinksWithProperties; // 0x18

	// Properties
	public override IDictionary Properties { get; } // 0x00000001801E2CB0 

	// Constructors
	protected BaseChannelWithProperties(); // 0x00000001801E2B50

}

// Namespace: System.Runtime.Remoting.Channels
[Serializable]
public class ChannelDataStore : IChannelDataStore // TypeDefIndex: 927
{
	// Fields
	private string[] _channelURIs; // 0x10
	private DictionaryEntry[] _extraData; // 0x10

	// Properties
	public string[] ChannelUris { get; set; } // 0x00000001800E20D0 0x0000000180114C30
	public object Item { get; set; } // 0x00000001801E3180 0x00000001801E3230

	// Constructors
	public ChannelDataStore(string[] channelURIs); // 0x000000018015C840

}

// Namespace: System.Runtime.Remoting
[Serializable]
internal class ChannelInfo : IChannelInfo // TypeDefIndex: 928
{
	// Fields
	private object[] channelData; // 0x10

	// Properties
	public object[] ChannelData { get; set; } // 0x00000001800E20D0 0x0000000180114C30

	// Constructors
	public ChannelInfo(); // 0x00000001801E3D80
	public ChannelInfo(object remoteChannelData); // 0x00000001801E3DE0

}

// Namespace: System.Runtime.Remoting.Channels
public sealed class ChannelServices // TypeDefIndex: 929
{
	// Fields
	private static ArrayList registeredChannels; // 0x00
	private static ArrayList delayedClientChannels; // 0x10
	private static CrossContextChannel _crossContextSink; // 0x20
	internal static string CrossContextUrl; // 0x10
	private static IList oldStartModeTypes; // 0x10

	// Properties
	internal static CrossContextChannel CrossContextChannel { get; } // 0x00000001801E7780 
	public static IChannel[] RegisteredChannels { get; } // 0x00000001801E77E0 

	// Constructors
	private ChannelServices(); // 0x00000001800E2000
	private static ChannelServices(); // 0x00000001801E75D0

	// Methods
	internal static IMessageSink CreateClientChannelSinkChain(string url, object remoteChannelData, out string objectUri); // 0x00000001801E4350
	internal static IMessageSink CreateClientChannelSinkChain(IChannelSender sender, string url, object[] channelDataArray, out string objectUri); // 0x00000001801E4930
	public static IServerChannelSink CreateServerChannelSinkChain(IServerChannelSinkProvider provider, IChannelReceiver channel); // 0x00000001801E4DB0
	public static ServerProcessing DispatchMessage(IServerChannelSinkStack sinkStack, IMessage msg, out IMessage replyMsg); // 0x00000001801E4F70
	public static IChannel GetChannel(string name); // 0x00000001801E5580
	public static IDictionary GetChannelSinkProperties(object obj); // 0x00000001801E5170
	public static string[] GetUrlsForObject(MarshalByRefObject obj); // 0x00000001801E5BC0
	public static void RegisterChannel(IChannel chnl); // 0x00000001801E6BA0
	public static void RegisterChannel(IChannel chnl, bool ensureSecurity); // 0x00000001801E6C00
	internal static void RegisterChannelConfig(ChannelData channel); // 0x00000001801E6000
	private static object CreateProvider(ProviderData prov); // 0x00000001801E4A40
	public static IMessage SyncDispatchMessage(IMessage msg); // 0x00000001801E7230
	public static IMessageCtrl AsyncDispatchMessage(IMessage msg, IMessageSink replySink); // 0x00000001801E3EA0
	private static ReturnMessage CheckIncomingMessage(IMessage msg); // 0x00000001801E4020
	internal static IMessage CheckReturnMessage(IMessage callMsg, IMessage retMsg); // 0x00000001801E4210
	private static bool IsLocalCall(IMessage callMsg); // 0x000000018010E420
	public static void UnregisterChannel(IChannel chnl); // 0x00000001801E7310
	internal static object[] GetCurrentChannelInfo(); // 0x00000001801E5890
}

// Namespace: System.Runtime.Remoting.Channels
internal class ExceptionFilterSink : IMessageSink // TypeDefIndex: 930
{
	// Fields
	private IMessageSink _next; // 0x10
	private IMessage _call; // 0x10

	// Properties
	public IMessageSink NextSink { get; } // 0x00000001800E20D0 

	// Constructors
	public ExceptionFilterSink(IMessage call, IMessageSink next); // 0x00000001801D9B20

	// Methods
	public IMessage SyncProcessMessage(IMessage msg); // 0x00000001801E9A70
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x00000001801E9A20
}

// Namespace: System.Runtime.Remoting.Channels
internal class ChanelSinkStackEntry // TypeDefIndex: 931
{
	// Fields
	public IChannelSinkBase Sink; // 0x10
	public object State; // 0x20
	public ChanelSinkStackEntry Next; // 0x10

	// Constructors
	public ChanelSinkStackEntry(IChannelSinkBase sink, object state, ChanelSinkStackEntry next); // 0x000000018015B4D0

}

// Namespace: System.Runtime.Remoting.Channels
public class ClientChannelSinkStack : IClientChannelSinkStack, IClientResponseChannelSinkStack // TypeDefIndex: 932
{
	// Fields
	private IMessageSink _replySink; // 0x10
	private ChanelSinkStackEntry _sinkStack; // 0x10

	// Constructors
	public ClientChannelSinkStack(); // 0x00000001800E2000
	public ClientChannelSinkStack(IMessageSink replySink); // 0x000000018015C840

	// Methods
	public void AsyncProcessResponse(ITransportHeaders headers, Stream stream); // 0x00000001801E7CD0
	public void DispatchException(Exception e); // 0x00000001801E7E60
	public void DispatchReplyMessage(IMessage msg); // 0x00000001801E7F00
	public object Pop(IClientChannelSink sink); // 0x00000001801E7F50
	public void Push(IClientChannelSink sink, object state); // 0x00000001801E7FE0
}

// Namespace: System.Runtime.Remoting.Channels
[Serializable]
internal class CrossAppDomainData // TypeDefIndex: 933
{
	// Fields
	private object _ContextID; // 0x10
	private int _DomainID; // 0x20
	private string _processGuid; // 0x00

	// Properties
	internal int DomainID { get; } // 0x00000001800ED060 
	internal string ProcessID { get; } // 0x00000001800EAEB0 

	// Constructors
	internal CrossAppDomainData(int domainId); // 0x00000001801E8B90

}

// Namespace: System.Runtime.Remoting.Channels
[Serializable]
internal class CrossAppDomainChannel : IChannel, IChannelReceiver, IChannelSender // TypeDefIndex: 934
{
	// Fields
	private const string _strName = "MONOCAD"; // 0x00
	private const string _strBaseURI = "MONOCADURI"; // 0x00
	private static object s_lock; // 0x00

	// Properties
	public virtual string ChannelName { get; } // 0x00000001801E8B50 
	public virtual int ChannelPriority { get; } // 0x00000001801E8B80 
	public virtual object ChannelData { get; } // 0x00000001801E8A70 

	// Constructors
	public CrossAppDomainChannel(); // 0x00000001800E2000
	private static CrossAppDomainChannel(); // 0x00000001801E8A10

	// Methods
	internal static void RegisterCrossAppDomainChannel(); // 0x00000001801E88B0
	public string Parse(string url, out string objectURI); // 0x00000001801E88A0
	public virtual string[] GetUrlsForUri(string objectURI); // 0x00000001801E8840
	public virtual void StartListening(object data); // 0x00000001800EA7B0
	public virtual void StopListening(object data); // 0x00000001800EA7B0
	public virtual IMessageSink CreateMessageSink(string url, object data, out string uri); // 0x00000001801E86B0
}

// Namespace: System.Runtime.Remoting.Channels
internal class CrossAppDomainSink : IMessageSink // TypeDefIndex: 935
{
	// Fields
	private static Hashtable s_sinks; // 0x00
	private static MethodInfo processMessageMethod; // 0x10
	private int _domainID; // 0x10

	// Properties
	internal int TargetDomainId { get; } // 0x00000001800ECD10 
	public IMessageSink NextSink { get; } // 0x00000001800EA8C0 

	// Constructors
	internal CrossAppDomainSink(int domainID); // 0x0000000180142DC0
	private static CrossAppDomainSink(); // 0x00000001801E9610

	// Methods
	internal static CrossAppDomainSink GetSink(int domainID); // 0x00000001801E8CD0
	private static ProcessMessageRes ProcessMessageInDomain(byte[] arrRequest, CADMethodCallMessage cadMsg); // 0x00000001801E8FD0
	public virtual IMessage SyncProcessMessage(IMessage msgRequest); // 0x00000001801E91A0
	public virtual IMessageCtrl AsyncProcessMessage(IMessage reqMsg, IMessageSink replySink); // 0x00000001801E8C20
	public void SendAsyncMessage(object data); // 0x00000001801E90E0
}

// Namespace: 
private struct ProcessMessageRes // TypeDefIndex: 936
{
	// Fields
	public byte[] arrResponse; // 0x10
	public CADMethodReturnMessage cadMrm; // 0x10

}

// Namespace: System.Runtime.Remoting.Channels
internal class CADSerializer // TypeDefIndex: 937
{
	// Constructors
	public CADSerializer(); // 0x00000001800E2000

	// Methods
	internal static IMessage DeserializeMessage(MemoryStream mem, IMethodCallMessage msg); // 0x00000001801E2E10
	internal static MemoryStream SerializeMessage(IMessage msg); // 0x00000001801E2FC0
	internal static MemoryStream SerializeObject(object obj); // 0x00000001801E30A0
	internal static object DeserializeObject(MemoryStream mem); // 0x00000001801E2F30
}

// Namespace: System.Runtime.Remoting.Channels
internal class AsyncRequest // TypeDefIndex: 938
{
	// Fields
	internal IMessageSink ReplySink; // 0x10
	internal IMessage MsgRequest; // 0x10

	// Constructors
	public AsyncRequest(IMessage msgRequest, IMessageSink replySink); // 0x00000001801E2970

}

// Namespace: System.Runtime.Remoting.Channels
public interface IChannel // TypeDefIndex: 939
{
	// Properties
	string ChannelName { get; }
	int ChannelPriority { get; }

	// Methods
	string Parse(string url, out string objectURI);
}

// Namespace: System.Runtime.Remoting.Channels
public interface IChannelDataStore // TypeDefIndex: 940
{
	// Properties
	string[] ChannelUris { get; }
	object Item { get; set; }

}

// Namespace: System.Runtime.Remoting.Channels
public interface IChannelReceiver : IChannel // TypeDefIndex: 941
{
	// Properties
	object ChannelData { get; }

	// Methods
	string[] GetUrlsForUri(string objectURI);
	void StartListening(object data);
	void StopListening(object data);
}

// Namespace: System.Runtime.Remoting.Channels
public interface IChannelReceiverHook // TypeDefIndex: 942
{
	// Properties
	string ChannelScheme { get; }
	IServerChannelSink ChannelSinkChain { get; }
	bool WantsToListen { get; }

	// Methods
	void AddHookChannelUri(string channelUri);
}

// Namespace: System.Runtime.Remoting.Channels
public interface IChannelSender : IChannel // TypeDefIndex: 943
{
	// Methods
	IMessageSink CreateMessageSink(string url, object remoteChannelData, out string objectURI);
}

// Namespace: System.Runtime.Remoting.Channels
public interface IChannelSinkBase // TypeDefIndex: 944
{
	// Properties
	IDictionary Properties { get; }

}

// Namespace: System.Runtime.Remoting.Channels
public interface IClientChannelSink : IChannelSinkBase // TypeDefIndex: 945
{
	// Properties
	IClientChannelSink NextChannelSink { get; }

	// Methods
	void AsyncProcessRequest(IClientChannelSinkStack sinkStack, IMessage msg, ITransportHeaders headers, Stream stream);
	void AsyncProcessResponse(IClientResponseChannelSinkStack sinkStack, object state, ITransportHeaders headers, Stream stream);
	Stream GetRequestStream(IMessage msg, ITransportHeaders headers);
	void ProcessMessage(IMessage msg, ITransportHeaders requestHeaders, Stream requestStream, out ITransportHeaders responseHeaders, out Stream responseStream);
}

// Namespace: System.Runtime.Remoting.Channels
public interface IClientChannelSinkProvider // TypeDefIndex: 946
{
	// Properties
	IClientChannelSinkProvider Next { get; set; }

	// Methods
	IClientChannelSink CreateSink(IChannelSender channel, string url, object remoteChannelData);
}

// Namespace: System.Runtime.Remoting.Channels
public interface IClientChannelSinkStack : IClientResponseChannelSinkStack // TypeDefIndex: 947
{
	// Methods
	object Pop(IClientChannelSink sink);
	void Push(IClientChannelSink sink, object state);
}

// Namespace: System.Runtime.Remoting.Channels
public interface IClientFormatterSink : IChannelSinkBase, IClientChannelSink, IMessageSink // TypeDefIndex: 948
{
}

// Namespace: System.Runtime.Remoting.Channels
public interface IClientFormatterSinkProvider : IClientChannelSinkProvider // TypeDefIndex: 949
{
}

// Namespace: System.Runtime.Remoting.Channels
public interface IClientResponseChannelSinkStack // TypeDefIndex: 950
{
	// Methods
	void AsyncProcessResponse(ITransportHeaders headers, Stream stream);
	void DispatchException(Exception e);
	void DispatchReplyMessage(IMessage msg);
}

// Namespace: System.Runtime.Remoting.Channels
public interface ISecurableChannel // TypeDefIndex: 951
{
	// Properties
	bool IsSecured { get; set; }

}

// Namespace: System.Runtime.Remoting.Channels
public interface IServerChannelSink : IChannelSinkBase // TypeDefIndex: 952
{
	// Properties
	IServerChannelSink NextChannelSink { get; }

	// Methods
	void AsyncProcessResponse(IServerResponseChannelSinkStack sinkStack, object state, IMessage msg, ITransportHeaders headers, Stream stream);
	Stream GetResponseStream(IServerResponseChannelSinkStack sinkStack, object state, IMessage msg, ITransportHeaders headers);
	ServerProcessing ProcessMessage(IServerChannelSinkStack sinkStack, IMessage requestMsg, ITransportHeaders requestHeaders, Stream requestStream, out IMessage responseMsg, out ITransportHeaders responseHeaders, out Stream responseStream);
}

// Namespace: System.Runtime.Remoting.Channels
public interface IServerChannelSinkProvider // TypeDefIndex: 953
{
	// Properties
	IServerChannelSinkProvider Next { get; set; }

	// Methods
	IServerChannelSink CreateSink(IChannelReceiver channel);
	void GetChannelData(IChannelDataStore channelData);
}

// Namespace: System.Runtime.Remoting.Channels
public interface IServerChannelSinkStack : IServerResponseChannelSinkStack // TypeDefIndex: 954
{
	// Methods
	object Pop(IServerChannelSink sink);
	void Push(IServerChannelSink sink, object state);
	void ServerCallback(IAsyncResult ar);
	void Store(IServerChannelSink sink, object state);
	void StoreAndDispatch(IServerChannelSink sink, object state);
}

// Namespace: System.Runtime.Remoting.Channels
public interface IServerFormatterSinkProvider : IServerChannelSinkProvider // TypeDefIndex: 955
{
}

// Namespace: System.Runtime.Remoting.Channels
public interface IServerResponseChannelSinkStack // TypeDefIndex: 956
{
	// Methods
	void AsyncProcessResponse(IMessage msg, ITransportHeaders headers, Stream stream);
	Stream GetResponseStream(IMessage msg, ITransportHeaders headers);
}

// Namespace: System.Runtime.Remoting.Channels
public interface ITransportHeaders // TypeDefIndex: 957
{
	// Properties
	object Item { get; set; }

	// Methods
	IEnumerator GetEnumerator();
}

// Namespace: System.Runtime.Remoting.Channels
public class ServerChannelSinkStack : IServerChannelSinkStack, IServerResponseChannelSinkStack // TypeDefIndex: 958
{
	// Fields
	private ChanelSinkStackEntry _sinkStack; // 0x10

	// Constructors
	public ServerChannelSinkStack(); // 0x00000001800E2000

	// Methods
	public Stream GetResponseStream(IMessage msg, ITransportHeaders headers); // 0x00000001801F1630
	public object Pop(IServerChannelSink sink); // 0x00000001801F17C0
	public void Push(IServerChannelSink sink, object state); // 0x00000001801F1850
	public void ServerCallback(IAsyncResult ar); // 0x00000001801F18E0
	public void Store(IServerChannelSink sink, object state); // 0x00000001801F1980
	public void StoreAndDispatch(IServerChannelSink sink, object state); // 0x00000001801F1930
	public void AsyncProcessResponse(IMessage msg, ITransportHeaders headers, Stream stream); // 0x00000001801F1480
}

// Namespace: System.Runtime.Remoting.Channels
internal class ServerDispatchSink : IChannelSinkBase, IServerChannelSink // TypeDefIndex: 959
{
	// Properties
	public IServerChannelSink NextChannelSink { get; } // 0x00000001800EA8C0 
	public IDictionary Properties { get; } // 0x00000001800EA8C0 

	// Constructors
	public ServerDispatchSink(); // 0x00000001800E2000

	// Methods
	public void AsyncProcessResponse(IServerResponseChannelSinkStack sinkStack, object state, IMessage msg, ITransportHeaders headers, Stream stream); // 0x00000001801F1A70
	public Stream GetResponseStream(IServerResponseChannelSinkStack sinkStack, object state, IMessage msg, ITransportHeaders headers); // 0x00000001800EA8C0
	public ServerProcessing ProcessMessage(IServerChannelSinkStack sinkStack, IMessage requestMsg, ITransportHeaders requestHeaders, Stream requestStream, out IMessage responseMsg, out ITransportHeaders responseHeaders, out Stream responseStream); // 0x00000001801F1AC0
}

// Namespace: System.Runtime.Remoting.Channels
internal class ServerDispatchSinkProvider : IServerChannelSinkProvider, IServerFormatterSinkProvider // TypeDefIndex: 960
{
	// Properties
	public IServerChannelSinkProvider Next { get; set; } // 0x00000001800EA8C0 0x00000001801F1A20

	// Constructors
	public ServerDispatchSinkProvider(); // 0x00000001800E2000
	public ServerDispatchSinkProvider(IDictionary properties, ICollection providerData); // 0x00000001800E2000

	// Methods
	public IServerChannelSink CreateSink(IChannelReceiver channel); // 0x00000001801F19D0
	public void GetChannelData(IChannelDataStore channelData); // 0x00000001800EA7B0
}

// Namespace: System.Runtime.Remoting.Channels
[Serializable]
public enum ServerProcessing // TypeDefIndex: 961
{
	Complete = 0,
	OneWay = 1,
	Async = 2
}

// Namespace: System.Runtime.Remoting.Channels
public class SinkProviderData // TypeDefIndex: 962
{
	// Fields
	private string sinkName; // 0x10
	private ArrayList children; // 0x20
	private Hashtable properties; // 0x10

	// Properties
	public IList Children { get; } // 0x00000001800EAEC0 
	public string Name { get; } // 0x00000001800E20D0 
	public IDictionary Properties { get; } // 0x00000001800EAEB0 

	// Constructors
	public SinkProviderData(string name); // 0x00000001801F1B40

}

// Namespace: System.Runtime.Remoting.Channels
[Serializable]
public class TransportHeaders : ITransportHeaders // TypeDefIndex: 963
{
	// Fields
	private Hashtable hash_table; // 0x10

	// Properties
	public object Item { get; set; } // 0x0000000180177070 0x00000001801F1DA0

	// Constructors
	public TransportHeaders(); // 0x00000001801F1C40

	// Methods
	public IEnumerator GetEnumerator(); // 0x00000001801E2AD0
}

// Namespace: System.Runtime.Remoting.Contexts
public class Context // TypeDefIndex: 964
{
	// Fields
	private int domain_id; // 0x10
	private int context_id; // 0x18
	private UIntPtr static_data; // 0x20
	private static IMessageSink default_server_context_sink; // 0x30
	private IMessageSink server_context_sink_chain; // 0x40
	private IMessageSink client_context_sink_chain; // 0x10
	private object[] datastore; // 0x48
	private ArrayList context_properties; // 0x10
	private bool frozen; // 0x10
	private static int global_count; // 0x10
	private static Hashtable namedSlots; // 0x10
	private static DynamicPropertyCollection global_dynamic_properties; // 0x10
	private DynamicPropertyCollection context_dynamic_properties; // 0x20
	private ContextCallbackObject callback_object; // 0x00

	// Properties
	public static Context DefaultContext { get; } // 0x000000018021ED40 
	public virtual int ContextID { get; } // 0x0000000180156360 
	public virtual IContextProperty[] ContextProperties { get; } // 0x000000018021EC70 
	internal bool IsDefaultContext { get; } // 0x000000018021EF30 
	internal bool NeedsContextSink { get; } // 0x000000018021EF40 
	internal static bool HasGlobalDynamicSinks { get; } // 0x000000018021EE70 
	internal bool HasDynamicSinks { get; } // 0x000000018021ED50 
	internal bool HasExitSinks { get; } // 0x000000018021EDA0 

	// Constructors
	public Context(); // 0x000000018021EBD0
	private static Context(); // 0x000000018021EB70

	// Methods
	protected override void Finalize(); // 0x000000018021D4B0
	public static bool RegisterDynamicProperty(IDynamicProperty prop, ContextBoundObject obj, Context ctx); // 0x000000018021E650
	public static bool UnregisterDynamicProperty(string name, ContextBoundObject obj, Context ctx); // 0x000000018021EAE0
	private static DynamicPropertyCollection GetDynamicPropertyCollection(ContextBoundObject obj, Context ctx); // 0x000000018021DC40
	internal static void NotifyGlobalDynamicSinks(bool start, IMessage req_msg, bool client_site, bool async); // 0x000000018021E510
	internal void NotifyDynamicSinks(bool start, IMessage req_msg, bool client_site, bool async); // 0x000000018021E480
	public virtual IContextProperty GetProperty(string name); // 0x000000018021E120
	public virtual void SetProperty(IContextProperty prop); // 0x000000018021E8E0
	public virtual void Freeze(); // 0x000000018021D670
	public override string ToString(); // 0x000000018021EA60
	internal IMessageSink GetServerContextSinkChain(); // 0x000000018021E310
	internal IMessageSink GetClientContextSinkChain(); // 0x000000018021D8C0
	internal IMessageSink CreateServerObjectSinkChain(MarshalByRefObject obj, bool forceInternalExecute); // 0x000000018021D220
	internal IMessageSink CreateEnvoySink(MarshalByRefObject serverObject); // 0x000000018021C950
	internal static Context SwitchToContext(Context newContext); // 0x000000018021EA50
	internal static Context CreateNewContext(IConstructionCallMessage msg); // 0x000000018021CB90
	public void DoCallBack(CrossContextDelegate deleg); // 0x000000018021D390
	public static LocalDataStoreSlot AllocateDataSlot(); // 0x000000018021C750
	public static LocalDataStoreSlot AllocateNamedDataSlot(string name); // 0x000000018021C7A0
	public static void FreeNamedDataSlot(string name); // 0x000000018021D510
	public static object GetData(LocalDataStoreSlot slot); // 0x000000018021DAF0
	public static LocalDataStoreSlot GetNamedDataSlot(string name); // 0x000000018021DF50
	public static void SetData(LocalDataStoreSlot slot, object data); // 0x000000018021E6E0
}

// Namespace: System.Runtime.Remoting.Contexts
internal class DynamicPropertyCollection // TypeDefIndex: 965
{
	// Fields
	private ArrayList _properties; // 0x10

	// Properties
	public bool HasProperties { get; } // 0x0000000180221330 

	// Constructors
	public DynamicPropertyCollection(); // 0x00000001802212D0

	// Methods
	public bool RegisterDynamicProperty(IDynamicProperty prop); // 0x0000000180220F80
	public bool UnregisterDynamicProperty(string name); // 0x0000000180221160
	public void NotifyMessage(bool start, IMessage msg, bool client_site, bool async); // 0x0000000180220BB0
	private int FindProperty(string name); // 0x0000000180220A10
}

// Namespace: 
private class DynamicPropertyReg // TypeDefIndex: 966
{
	// Fields
	public IDynamicProperty Property; // 0x10
	public IDynamicMessageSink Sink; // 0x10

	// Constructors
	public DynamicPropertyReg(); // 0x00000001800E2000

}

// Namespace: System.Runtime.Remoting.Contexts
internal class ContextCallbackObject : ContextBoundObject // TypeDefIndex: 967
{
	// Constructors
	public ContextCallbackObject(); // 0x00000001801BA2F0

	// Methods
	public void DoCallBack(CrossContextDelegate deleg); // 0x00000001800EA7B0
}

// Namespace: System.Runtime.Remoting.Contexts
[Serializable]
public class ContextAttribute : Attribute, IContextAttribute, IContextProperty // TypeDefIndex: 968
{
	// Fields
	protected string AttributeName; // 0x10

	// Properties
	public virtual string Name { get; } // 0x00000001800E20D0 

	// Constructors
	public ContextAttribute(string name); // 0x00000001801137E0

	// Methods
	public override bool Equals(object o); // 0x000000018021C1D0
	public virtual void Freeze(Context newContext); // 0x00000001800EA7B0
	public override int GetHashCode(); // 0x000000018021C2E0
	public virtual void GetPropertiesForNewContext(IConstructionCallMessage ctorMsg); // 0x000000018021C300
	public virtual bool IsContextOK(Context ctx, IConstructionCallMessage ctorMsg); // 0x000000018021C3B0
	public virtual bool IsNewContextOK(Context newCtx); // 0x000000018010E420
}

// Namespace: System.Runtime.Remoting.Contexts
public class ContextProperty // TypeDefIndex: 969
{
	// Fields
	private string name; // 0x10
	private object prop; // 0x10

	// Properties
	public virtual string Name { get; } // 0x00000001800E20D0 
	public virtual object Property { get; } // 0x00000001800EAEC0 

	// Constructors
	private ContextProperty(string name, object prop); // 0x000000018014B260

}

// Namespace: System.Runtime.Remoting.Contexts
internal class CrossContextChannel : IMessageSink // TypeDefIndex: 970
{
	// Properties
	public IMessageSink NextSink { get; } // 0x00000001800EA8C0 

	// Constructors
	public CrossContextChannel(); // 0x00000001800E2000

	// Methods
	public IMessage SyncProcessMessage(IMessage msg); // 0x000000018021F4A0
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x000000018021F040
}

// Namespace: 
private class ContextRestoreSink : IMessageSink // TypeDefIndex: 971
{
	// Fields
	private IMessageSink _next; // 0x10
	private Context _context; // 0x20
	private IMessage _call; // 0x00

	// Properties
	public IMessageSink NextSink { get; } // 0x00000001800E20D0 

	// Constructors
	public ContextRestoreSink(IMessageSink next, Context context, IMessage call); // 0x000000018015B4D0

	// Methods
	public IMessage SyncProcessMessage(IMessage msg); // 0x000000018021C520
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x000000018021C4D0
}

// Namespace: System.Runtime.Remoting.Contexts
public interface IContextAttribute // TypeDefIndex: 972
{
	// Methods
	void GetPropertiesForNewContext(IConstructionCallMessage msg);
	bool IsContextOK(Context ctx, IConstructionCallMessage msg);
}

// Namespace: System.Runtime.Remoting.Contexts
public interface IContextProperty // TypeDefIndex: 973
{
	// Properties
	string Name { get; }

	// Methods
	void Freeze(Context newContext);
	bool IsNewContextOK(Context newCtx);
}

// Namespace: System.Runtime.Remoting.Contexts
public interface IContextPropertyActivator // TypeDefIndex: 974
{
	// Methods
	void CollectFromClientContext(IConstructionCallMessage msg);
	void CollectFromServerContext(IConstructionReturnMessage msg);
	bool DeliverClientContextToServerContext(IConstructionCallMessage msg);
	bool DeliverServerContextToClientContext(IConstructionReturnMessage msg);
	bool IsOKToActivate(IConstructionCallMessage msg);
}

// Namespace: System.Runtime.Remoting.Contexts
public interface IContributeClientContextSink // TypeDefIndex: 975
{
	// Methods
	IMessageSink GetClientContextSink(IMessageSink nextSink);
}

// Namespace: System.Runtime.Remoting.Contexts
public interface IContributeDynamicSink // TypeDefIndex: 976
{
	// Methods
	IDynamicMessageSink GetDynamicSink();
}

// Namespace: System.Runtime.Remoting.Contexts
public interface IContributeEnvoySink // TypeDefIndex: 977
{
	// Methods
	IMessageSink GetEnvoySink(MarshalByRefObject obj, IMessageSink nextSink);
}

// Namespace: System.Runtime.Remoting.Contexts
public interface IContributeObjectSink // TypeDefIndex: 978
{
	// Methods
	IMessageSink GetObjectSink(MarshalByRefObject obj, IMessageSink nextSink);
}

// Namespace: System.Runtime.Remoting.Contexts
public interface IContributeServerContextSink // TypeDefIndex: 979
{
	// Methods
	IMessageSink GetServerContextSink(IMessageSink nextSink);
}

// Namespace: System.Runtime.Remoting.Contexts
public interface IDynamicMessageSink // TypeDefIndex: 980
{
	// Methods
	void ProcessMessageFinish(IMessage replyMsg, bool bCliSide, bool bAsync);
	void ProcessMessageStart(IMessage reqMsg, bool bCliSide, bool bAsync);
}

// Namespace: System.Runtime.Remoting.Contexts
public interface IDynamicProperty // TypeDefIndex: 981
{
	// Properties
	string Name { get; }

}

// Namespace: System.Runtime.Remoting.Contexts
[Serializable]
public class SynchronizationAttribute : ContextAttribute, IContributeClientContextSink, IContributeServerContextSink // TypeDefIndex: 982
{
	// Fields
	public const int NOT_SUPPORTED = 1; // 0x00
	public const int SUPPORTED = 2; // 0x00
	public const int REQUIRED = 4; // 0x18
	public const int REQUIRES_NEW = 8; // 0x20
	private bool _bReEntrant; // 0x28
	private int _flavor; // 0x10
	[NonSerialized]	private bool _locked; // 0x10
	[NonSerialized]	private int _lockCount; // 0x10
	[NonSerialized]	private Mutex _mutex; // 0x20
	[NonSerialized]	private Thread _ownerThread; // 0x18

	// Properties
	public virtual bool IsReEntrant { get; } // 0x00000001801249E0 
	public virtual bool Locked { get; set; } // 0x000000018022D900 0x000000018022D910

	// Constructors
	public SynchronizationAttribute(); // 0x000000018022D800
	public SynchronizationAttribute(bool reEntrant); // 0x000000018022D810
	public SynchronizationAttribute(int flag); // 0x000000018022D8F0
	public SynchronizationAttribute(int flag, bool reEntrant); // 0x000000018022D820

	// Methods
	internal void AcquireLock(); // 0x000000018022D160
	internal void ReleaseLock(); // 0x000000018022D700
	public override void GetPropertiesForNewContext(IConstructionCallMessage ctorMsg); // 0x000000018022D4F0
	public virtual IMessageSink GetClientContextSink(IMessageSink nextSink); // 0x000000018022D480
	public virtual IMessageSink GetServerContextSink(IMessageSink nextSink); // 0x000000018022D570
	public override bool IsContextOK(Context ctx, IConstructionCallMessage msg); // 0x000000018022D5E0
	internal static void ExitContext(); // 0x000000018022D370
	internal static void EnterContext(); // 0x000000018022D260
}

// Namespace: System.Runtime.Remoting.Contexts
internal class SynchronizedClientContextSink : IMessageSink // TypeDefIndex: 983
{
	// Fields
	private IMessageSink _next; // 0x10
	private SynchronizationAttribute _att; // 0x10

	// Properties
	public IMessageSink NextSink { get; } // 0x00000001800E20D0 

	// Constructors
	public SynchronizedClientContextSink(IMessageSink next, SynchronizationAttribute att); // 0x000000018022DD30

	// Methods
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x000000018022DB00
	public IMessage SyncProcessMessage(IMessage msg); // 0x000000018022DBE0
}

// Namespace: System.Runtime.Remoting.Contexts
internal class SynchronizedServerContextSink : IMessageSink // TypeDefIndex: 984
{
	// Fields
	private IMessageSink _next; // 0x10
	private SynchronizationAttribute _att; // 0x10

	// Properties
	public IMessageSink NextSink { get; } // 0x00000001800E20D0 

	// Constructors
	public SynchronizedServerContextSink(IMessageSink next, SynchronizationAttribute att); // 0x000000018022DD30

	// Methods
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x000000018022DF40
	public IMessage SyncProcessMessage(IMessage msg); // 0x000000018022E000
}

// Namespace: System.Runtime.Remoting.Contexts
internal class SynchronizedContextReplySink : IMessageSink // TypeDefIndex: 985
{
	// Fields
	private IMessageSink _next; // 0x10
	private bool _newLock; // 0x20
	private SynchronizationAttribute _att; // 0x18

	// Properties
	public IMessageSink NextSink { get; } // 0x00000001800E20D0 

	// Constructors
	public SynchronizedContextReplySink(IMessageSink next, SynchronizationAttribute att, bool newLock); // 0x000000018022DEF0

	// Methods
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x000000018022DD70
	public IMessage SyncProcessMessage(IMessage msg); // 0x000000018022DDC0
}

// Namespace: System.Runtime.Remoting.Lifetime
public class ClientSponsor : MarshalByRefObject, ISponsor // TypeDefIndex: 986
{
	// Fields
	private TimeSpan renewal_time; // 0x18
	private Hashtable registered_objects; // 0x18

	// Properties
	public TimeSpan RenewalTime { get; set; } // 0x00000001800EAEC0 0x00000001800EAEE0

	// Constructors
	public ClientSponsor(); // 0x0000000180217640
	public ClientSponsor(TimeSpan renewalTime); // 0x00000001802176D0

	// Methods
	public void Close(); // 0x0000000180217160
	protected override void Finalize(); // 0x0000000180217420
	public override object InitializeLifetimeService(); // 0x00000001801C9170
	public bool Register(MarshalByRefObject obj); // 0x00000001802174B0
	public TimeSpan Renewal(ILease lease); // 0x00000001800EAEC0
	public void Unregister(MarshalByRefObject obj); // 0x0000000180217580
}

// Namespace: System.Runtime.Remoting.Lifetime
public interface ILease // TypeDefIndex: 987
{
	// Properties
	TimeSpan CurrentLeaseTime { get; }
	LeaseState CurrentState { get; }
	TimeSpan InitialLeaseTime { get; set; }
	TimeSpan RenewOnCallTime { get; set; }
	TimeSpan SponsorshipTimeout { get; set; }

	// Methods
	void Register(ISponsor obj);
	void Register(ISponsor obj, TimeSpan renewalTime);
	TimeSpan Renew(TimeSpan renewalTime);
	void Unregister(ISponsor obj);
}

// Namespace: System.Runtime.Remoting.Lifetime
public interface ISponsor // TypeDefIndex: 988
{
	// Methods
	TimeSpan Renewal(ILease lease);
}

// Namespace: System.Runtime.Remoting.Lifetime
internal class Lease : MarshalByRefObject, ILease // TypeDefIndex: 989
{
	// Fields
	private DateTime _leaseExpireTime; // 0x18
	private LeaseState _currentState; // 0x30
	private TimeSpan _initialLeaseTime; // 0x40
	private TimeSpan _renewOnCallTime; // 0x50
	private TimeSpan _sponsorshipTimeout; // 0x10
	private ArrayList _sponsors; // 0x10
	private Queue _renewingSponsors; // 0x10
	private RenewalDelegate _renewalDelegate; // 0x00

	// Properties
	public TimeSpan CurrentLeaseTime { get; } // 0x00000001802237C0 
	public LeaseState CurrentState { get; } // 0x0000000180119420 
	public TimeSpan InitialLeaseTime { get; set; } // 0x00000001801146E0 0x0000000180223850
	public TimeSpan RenewOnCallTime { get; set; } // 0x0000000180119440 0x00000001802239D0
	public TimeSpan SponsorshipTimeout { get; set; } // 0x0000000180114BB0 0x0000000180223AA0

	// Constructors
	public Lease(); // 0x0000000180223600

	// Methods
	public void Activate(); // 0x0000000180222CA0
	public void Register(ISponsor obj); // 0x0000000180223220
	public void Register(ISponsor obj, TimeSpan renewalTime); // 0x00000001802230B0
	public TimeSpan Renew(TimeSpan renewalTime); // 0x00000001802232A0
	public void Unregister(ISponsor obj); // 0x0000000180223360
	internal void UpdateState(); // 0x0000000180223490
	private void CheckNextSponsor(); // 0x0000000180222CB0
	private void ProcessSponsorResponse(object state, bool timedOut); // 0x0000000180222F10
}

// Namespace: 
private delegate TimeSpan RenewalDelegate(ILease lease); // TypeDefIndex: 990; 0x0000000180195FA0

// Namespace: System.Runtime.Remoting.Lifetime
internal class LeaseManager // TypeDefIndex: 991
{
	// Fields
	private ArrayList _objects; // 0x10
	private Timer _timer; // 0x10

	// Constructors
	public LeaseManager(); // 0x0000000180222990

	// Methods
	public void SetPollTime(TimeSpan timeSpan); // 0x00000001802223C0
	public void TrackLifetime(ServerIdentity identity); // 0x0000000180222730
	public void StopTrackingLifetime(ServerIdentity identity); // 0x0000000180222640
	public void StartManager(); // 0x00000001802224A0
	public void StopManager(); // 0x0000000180222610
	public void ManageLeases(object state); // 0x0000000180222160
}

// Namespace: System.Runtime.Remoting.Lifetime
internal class LeaseSink : IMessageSink // TypeDefIndex: 992
{
	// Fields
	private IMessageSink _nextSink; // 0x10

	// Properties
	public IMessageSink NextSink { get; } // 0x00000001800E20D0 

	// Constructors
	public LeaseSink(IMessageSink nextSink); // 0x000000018015C840

	// Methods
	public IMessage SyncProcessMessage(IMessage msg); // 0x0000000180222C30
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x00000001802229F0
	private void RenewLease(IMessage msg); // 0x0000000180222A70
}

// Namespace: System.Runtime.Remoting.Lifetime
[Serializable]
public enum LeaseState // TypeDefIndex: 993
{
	Null = 0,
	Initial = 1,
	Active = 2,
	Renewing = 3,
	Expired = 4
}

// Namespace: System.Runtime.Remoting.Lifetime
public sealed class LifetimeServices // TypeDefIndex: 994
{
	// Fields
	private static TimeSpan _leaseManagerPollTime; // 0x00
	private static TimeSpan _leaseTime; // 0x10
	private static TimeSpan _renewOnCallTime; // 0x20
	private static TimeSpan _sponsorshipTimeout; // 0x10
	private static LeaseManager _leaseManager; // 0x00

	// Properties
	public static TimeSpan LeaseManagerPollTime { get; set; } // 0x0000000180223DB0 0x0000000180223F30
	public static TimeSpan LeaseTime { get; set; } // 0x0000000180223E10 0x0000000180223FC0
	public static TimeSpan RenewOnCallTime { get; set; } // 0x0000000180223E70 0x0000000180224080
	public static TimeSpan SponsorshipTimeout { get; set; } // 0x0000000180223ED0 0x0000000180224140

	// Constructors
	public LifetimeServices(); // 0x00000001800E2000
	private static LifetimeServices(); // 0x0000000180223C70

	// Methods
	internal static void TrackLifetime(ServerIdentity identity); // 0x0000000180223BF0
	internal static void StopTrackingLifetime(ServerIdentity identity); // 0x0000000180223B70
}

// Namespace: System.Runtime.Remoting.Messaging
internal enum ArgInfoType : byte // TypeDefIndex: 995
{
	In = 0,
	Out = 1
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ArgInfo // TypeDefIndex: 996
{
	// Fields
	private int[] _paramMap; // 0x10
	private int _inoutArgCount; // 0x20
	private MethodBase _method; // 0x10

	// Constructors
	public ArgInfo(MethodBase method, ArgInfoType type); // 0x00000001802132E0

	// Methods
	public int GetInOutArgIndex(int inoutArgNum); // 0x00000001802130E0
	public virtual string GetInOutArgName(int index); // 0x0000000180213120
	public int GetInOutArgCount(); // 0x00000001800ED060
	public object[] GetInOutArgs(object[] args); // 0x00000001802131C0
}

// Namespace: System.Runtime.Remoting.Messaging
public class AsyncResult : IAsyncResult, IMessageSink // TypeDefIndex: 997
{
	// Fields
	private object async_state; // 0x10
	private WaitHandle handle; // 0x20
	private object async_delegate; // 0x30
	private IntPtr data; // 0x39
	private object object_data; // 0x40
	private bool sync_completed; // 0x50
	private bool completed; // 0x60
	private bool endinvoke_called; // 0x70
	private object async_callback; // 0x10
	private ExecutionContext current; // 0x10
	private ExecutionContext original; // 0x20
	private int gchandle; // 0x30
	private MonoMethodMessage call_message; // 0x40
	private IMessageCtrl message_ctrl; // 0x30
	private IMessage reply_message; // 0x80000000

	// Properties
	public virtual object AsyncState { get; } // 0x00000001800E20D0 
	public virtual WaitHandle AsyncWaitHandle { get; } // 0x00000001802137A0 
	public virtual bool CompletedSynchronously { get; } // 0x00000001801B1360 
	public virtual bool IsCompleted { get; } // 0x00000001802138B0 
	public bool EndInvokeCalled { get; set; } // 0x00000001802138A0 0x00000001802138C0
	public virtual object AsyncDelegate { get; } // 0x00000001800EAEB0 
	public IMessageSink NextSink { get; } // 0x00000001800EA8C0 
	internal MonoMethodMessage CallMessage { get; set; } // 0x0000000180114BE0 0x000000018017D3C0

	// Constructors
	internal AsyncResult(); // 0x00000001800E2000

	// Methods
	public virtual IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x0000000180213500
	public virtual IMessage GetReplyMessage(); // 0x000000018017D300
	public virtual void SetMessageCtrl(IMessageCtrl mc); // 0x0000000180168370
	internal void SetCompletedSynchronously(bool completed); // 0x0000000180213640
	internal IMessage EndInvoke(); // 0x0000000180213550
	public virtual IMessage SyncProcessMessage(IMessage msg); // 0x0000000180213650
}

// Namespace: System.Runtime.Remoting.Messaging
internal class CADArgHolder // TypeDefIndex: 998
{
	// Fields
	public int index; // 0x10

	// Constructors
	public CADArgHolder(int i); // 0x0000000180142DC0

}

// Namespace: System.Runtime.Remoting.Messaging
internal class CADObjRef // TypeDefIndex: 999
{
	// Fields
	private ObjRef objref; // 0x10
	public int SourceDomain; // 0x10

	// Properties
	public string TypeName { get; } // 0x0000000180216010 
	public string URI { get; } // 0x00000001800ED0A0 

	// Constructors
	public CADObjRef(ObjRef o, int sourceDomain); // 0x0000000180125A40

}

// Namespace: System.Runtime.Remoting.Messaging
internal class CADMessageBase // TypeDefIndex: 1000
{
	// Fields
	protected object[] _args; // 0x10
	protected byte[] _serializedArgs; // 0x20
	protected int _propertyCount; // 0x30
	protected CADArgHolder _callContext; // 0x40

	// Constructors
	public CADMessageBase(); // 0x00000001800E2000

	// Methods
	internal static int MarshalProperties(IDictionary dict, ArrayList args); // 0x0000000180213F00
	internal static void UnmarshalProperties(IDictionary dict, int count, ArrayList args); // 0x0000000180215060
	private static bool IsPossibleToIgnoreMarshal(object obj); // 0x0000000180213960
	protected object MarshalArgument(object arg, ArrayList args); // 0x0000000180213AC0
	protected object UnmarshalArgument(object arg, ArrayList args); // 0x00000001802144B0
	internal object[] MarshalArguments(object[] arguments, ArrayList args); // 0x0000000180213DD0
	internal object[] UnmarshalArguments(object[] arguments, ArrayList args); // 0x0000000180214F30
	protected void SaveLogicalCallContext(IMethodMessage msg, ArrayList serializeList); // 0x0000000180214350
	internal LogicalCallContext GetLogicalCallContext(ArrayList args); // 0x00000001802138D0
}

// Namespace: System.Runtime.Remoting.Messaging
internal class CADMethodCallMessage : CADMessageBase // TypeDefIndex: 1001
{
	// Fields
	private string _uri; // 0x30
	internal RuntimeMethodHandle MethodHandle; // 0x40
	internal string FullTypeName; // 0x30

	// Properties
	internal string Uri { get; } // 0x00000001801146E0 
	internal int PropertiesCount { get; } // 0x00000001800E2F70 

	// Constructors
	internal CADMethodCallMessage(IMethodCallMessage callMsg); // 0x0000000180215A50

	// Methods
	internal static CADMethodCallMessage Create(IMessage callMsg); // 0x00000001802151C0
	internal ArrayList GetArguments(); // 0x0000000180215250
	internal object[] GetArgs(ArrayList args); // 0x0000000180215240
	private static Type[] GetSignature(MethodBase methodBase, bool load); // 0x0000000180215830
	internal MethodBase GetMethod(); // 0x0000000180215330
}

// Namespace: System.Runtime.Remoting.Messaging
internal class CADMethodReturnMessage : CADMessageBase // TypeDefIndex: 1002
{
	// Fields
	private object _returnValue; // 0x30
	private CADArgHolder _exception; // 0x80000000

	// Properties
	internal int PropertiesCount { get; } // 0x00000001800E2F70 

	// Constructors
	internal CADMethodReturnMessage(IMethodReturnMessage retMsg); // 0x0000000180215E20

	// Methods
	internal static CADMethodReturnMessage Create(IMessage callMsg); // 0x0000000180215BF0
	internal ArrayList GetArguments(); // 0x0000000180215C70
	internal object[] GetArgs(ArrayList args); // 0x0000000180215240
	internal object GetReturnValue(ArrayList args); // 0x0000000180215E10
	internal Exception GetException(ArrayList args); // 0x0000000180215D50
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
public sealed class CallContext // TypeDefIndex: 1003
{
	// Fields
	private static Header[] Headers; // 0x80000000
	private static Hashtable datastore; // 0x10

	// Properties
	public static object HostContext { get; set; } // 0x0000000180216AC0 0x0000000180216B10
	private static Hashtable Datastore { get; } // 0x0000000180216A50 

	// Constructors
	private CallContext(); // 0x00000001800E2000

	// Methods
	public static void FreeNamedDataSlot(string name); // 0x0000000180216400
	public static object GetData(string name); // 0x0000000180216440
	public static void SetData(string name, object data); // 0x0000000180216730
	public static object LogicalGetData(string name); // 0x00000001802164C0
	public static void LogicalSetData(string name, object data); // 0x0000000180216510
	public static Header[] GetHeaders(); // 0x0000000180216480
	public static void SetHeaders(Header[] headers); // 0x0000000180216780
	internal static LogicalCallContext CreateLogicalCallContext(bool createEmpty); // 0x00000001802160E0
	internal static object SetCurrentCallContext(LogicalCallContext ctx); // 0x00000001802165F0
	internal static void UpdateCurrentCallContext(LogicalCallContext ctx); // 0x00000001802167C0
	internal static void RestoreCallContext(object oldContext); // 0x0000000180216560
}

// Namespace: System.Runtime.Remoting.Messaging
public interface ILogicalThreadAffinative // TypeDefIndex: 1004
{
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ClientContextTerminatorSink : IMessageSink // TypeDefIndex: 1005
{
	// Fields
	private Context _context; // 0x10

	// Properties
	public IMessageSink NextSink { get; } // 0x00000001800EA8C0 

	// Constructors
	public ClientContextTerminatorSink(Context ctx); // 0x000000018015C840

	// Methods
	public IMessage SyncProcessMessage(IMessage msg); // 0x0000000180216F40
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x0000000180216CA0
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ClientContextReplySink : IMessageSink // TypeDefIndex: 1006
{
	// Fields
	private IMessageSink _replySink; // 0x10
	private Context _context; // 0x70

	// Properties
	public IMessageSink NextSink { get; } // 0x00000001800E20D0 

	// Constructors
	public ClientContextReplySink(Context ctx, IMessageSink replySink); // 0x00000001801E2970

	// Methods
	public IMessage SyncProcessMessage(IMessage msg); // 0x0000000180216BB0
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x0000000180216B60
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
public class ConstructionCall : MethodCall, IConstructionCallMessage, IMessage, IMethodCallMessage, IMethodMessage // TypeDefIndex: 1007
{
	// Fields
	private IActivator _activator; // 0x70
	private object[] _activationAttributes; // 0x80
	private IList _contextProperties; // 0x90
	private Type _activationType; // 0xA0
	private string _activationTypeName; // 0x00
	private bool _isContextOk; // 0x10
	[NonSerialized]	private RemotingProxy _sourceProxy; // 0x10
	private static Dictionary`2<string, int> <>f__switch$map20; // 0x20

	// Properties
	internal bool IsContextOk { get; set; } // 0x0000000180196C80 0x0000000180196E40
	public Type ActivationType { get; } // 0x000000018021BCB0 
	public string ActivationTypeName { get; } // 0x000000018017D310 
	public IActivator Activator { get; set; } // 0x000000018017D300 0x000000018017D3A0
	public object[] CallSiteActivationAttributes { get; } // 0x000000018017D330 
	public IList ContextProperties { get; } // 0x000000018021BD40 
	public override IDictionary Properties { get; } // 0x000000018021BDB0 
	internal RemotingProxy SourceProxy { get; set; } // 0x0000000180207070 0x00000001801967D0

	// Constructors
	public ConstructionCall(IMessage m); // 0x000000018021BB40
	internal ConstructionCall(Type type); // 0x000000018021BC50
	public ConstructionCall(Header[] headers); // 0x000000018021BA90
	internal ConstructionCall(SerializationInfo info, StreamingContext context); // 0x000000018021BBB0

	// Methods
	internal override void InitDictionary(); // 0x000000018021B7A0
	internal void SetActivationAttributes(object[] attributes); // 0x000000018017D3E0
	internal override void InitMethodProperty(string key, object value); // 0x000000018021B870
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x000000018021B6A0
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ConstructionCallDictionary : MethodDictionary // TypeDefIndex: 1008
{
	// Fields
	public static string[] InternalKeys; // 0x00
	private static Dictionary`2<string, int> <>f__switch$map23; // 0x10
	private static Dictionary`2<string, int> <>f__switch$map24; // 0x10

	// Constructors
	public ConstructionCallDictionary(IConstructionCallMessage message); // 0x000000018021B620
	private static ConstructionCallDictionary(); // 0x000000018021B1A0

	// Methods
	protected override object GetMethodProperty(string key); // 0x000000018021AB50
	protected override void SetMethodProperty(string key, object value); // 0x000000018021AEE0
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
public class ConstructionResponse : MethodResponse, IConstructionReturnMessage, IMessage, IMethodMessage, IMethodReturnMessage // TypeDefIndex: 1009
{
	// Properties
	public override IDictionary Properties { get; } // 0x000000018021C130 

	// Constructors
	public ConstructionResponse(Header[] h, IMethodCallMessage mcm); // 0x000000018021BFC0
	internal ConstructionResponse(object resultObject, LogicalCallContext callCtx, IMethodCallMessage msg); // 0x000000018021BDE0
	internal ConstructionResponse(Exception e, IMethodCallMessage msg); // 0x000000018021BF00
	internal ConstructionResponse(SerializationInfo info, StreamingContext context); // 0x000000018021BE70

}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
internal class EnvoyTerminatorSink : IMessageSink // TypeDefIndex: 1010
{
	// Fields
	public static EnvoyTerminatorSink Instance; // 0x00

	// Properties
	public IMessageSink NextSink { get; } // 0x00000001800EA8C0 

	// Constructors
	public EnvoyTerminatorSink(); // 0x00000001800E2000
	private static EnvoyTerminatorSink(); // 0x0000000180221480

	// Methods
	public IMessage SyncProcessMessage(IMessage msg); // 0x0000000180221400
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x0000000180221360
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
internal class ErrorMessage : IMessage, IMethodCallMessage, IMethodMessage // TypeDefIndex: 1011
{
	// Fields
	private string _uri; // 0x10

	// Properties
	public int ArgCount { get; } // 0x00000001800EA8C0 
	public object[] Args { get; } // 0x00000001800EA8C0 
	public bool HasVarArgs { get; } // 0x000000018011A0F0 
	public MethodBase MethodBase { get; } // 0x00000001800EA8C0 
	public string MethodName { get; } // 0x0000000180221550 
	public object MethodSignature { get; } // 0x00000001800EA8C0 
	public virtual IDictionary Properties { get; } // 0x00000001800EA8C0 
	public string TypeName { get; } // 0x0000000180221580 
	public string Uri { get; set; } // 0x00000001800E20D0 0x0000000180114C30
	public int InArgCount { get; } // 0x00000001800EA8C0 
	public object[] InArgs { get; } // 0x00000001800EA8C0 
	public LogicalCallContext LogicalCallContext { get; } // 0x00000001800EA8C0 

	// Constructors
	public ErrorMessage(); // 0x0000000180221510

	// Methods
	public object GetArg(int arg_num); // 0x00000001800EA8C0
	public string GetArgName(int arg_num); // 0x00000001802214E0
	public string GetInArgName(int index); // 0x00000001800EA8C0
	public object GetInArg(int argNum); // 0x00000001800EA8C0
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
public class Header // TypeDefIndex: 1012
{
	// Fields
	public string HeaderNamespace; // 0x10
	public bool MustUnderstand; // 0x20
	public string Name; // 0x10
	public object Value; // 0x10

	// Constructors
	public Header(string _Name, object _Value); // 0x0000000180221680
	public Header(string _Name, object _Value, bool _MustUnderstand); // 0x0000000180221620
	public Header(string _Name, object _Value, bool _MustUnderstand, string _HeaderNamespace); // 0x00000001802215C0

}

// Namespace: System.Runtime.Remoting.Messaging
internal interface IInternalMessage // TypeDefIndex: 1013
{
	// Properties
	Identity TargetIdentity { get; set; }
	string Uri { get; set; }

}

// Namespace: System.Runtime.Remoting.Messaging
public interface IMessage // TypeDefIndex: 1014
{
	// Properties
	IDictionary Properties { get; }

}

// Namespace: System.Runtime.Remoting.Messaging
public interface IMessageCtrl // TypeDefIndex: 1015
{
	// Methods
	void Cancel(int msToCancel);
}

// Namespace: System.Runtime.Remoting.Messaging
public interface IMessageSink // TypeDefIndex: 1016
{
	// Properties
	IMessageSink NextSink { get; }

	// Methods
	IMessage SyncProcessMessage(IMessage msg);
	IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink);
}

// Namespace: System.Runtime.Remoting.Messaging
public interface IMethodCallMessage : IMessage, IMethodMessage // TypeDefIndex: 1017
{
	// Properties
	int InArgCount { get; }
	object[] InArgs { get; }

	// Methods
	object GetInArg(int argNum);
	string GetInArgName(int index);
}

// Namespace: System.Runtime.Remoting.Messaging
public interface IMethodMessage : IMessage // TypeDefIndex: 1018
{
	// Properties
	int ArgCount { get; }
	object[] Args { get; }
	bool HasVarArgs { get; }
	LogicalCallContext LogicalCallContext { get; }
	MethodBase MethodBase { get; }
	string MethodName { get; }
	object MethodSignature { get; }
	string TypeName { get; }
	string Uri { get; }

	// Methods
	object GetArg(int argNum);
	string GetArgName(int index);
}

// Namespace: System.Runtime.Remoting.Messaging
public interface IMethodReturnMessage : IMessage, IMethodMessage // TypeDefIndex: 1019
{
	// Properties
	Exception Exception { get; }
	int OutArgCount { get; }
	object[] OutArgs { get; }
	object ReturnValue { get; }

	// Methods
	object GetOutArg(int argNum);
	string GetOutArgName(int index);
}

// Namespace: System.Runtime.Remoting.Messaging
public interface IRemotingFormatter : IFormatter // TypeDefIndex: 1020
{
	// Methods
	object Deserialize(Stream serializationStream, HeaderHandler handler);
	void Serialize(Stream serializationStream, object graph, Header[] headers);
}

// Namespace: System.Runtime.Remoting.Messaging
internal interface ISerializationRootObject // TypeDefIndex: 1021
{
	// Methods
	void RootSetObjectData(SerializationInfo info, StreamingContext context);
}

// Namespace: System.Runtime.Remoting.Messaging
public class InternalMessageWrapper // TypeDefIndex: 1022
{
	// Fields
	protected IMessage WrappedMessage; // 0x10

	// Constructors
	public InternalMessageWrapper(IMessage msg); // 0x000000018015C840

}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
public sealed class LogicalCallContext : ICloneable, ISerializable // TypeDefIndex: 1023
{
	// Fields
	private Hashtable _data; // 0x10
	private CallContextRemotingData _remotingData; // 0x10

	// Properties
	public bool HasInfo { get; } // 0x00000001802249D0 
	internal Hashtable Datastore { get; } // 0x00000001800E20D0 

	// Constructors
	internal LogicalCallContext(); // 0x0000000180224970
	internal LogicalCallContext(SerializationInfo info, StreamingContext context); // 0x0000000180224840

	// Methods
	public void FreeNamedDataSlot(string name); // 0x0000000180224530
	public object GetData(string name); // 0x0000000180224550
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0000000180224570
	public void SetData(string name, object data); // 0x00000001802247A0
	public object Clone(); // 0x0000000180224200
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
internal class CallContextRemotingData : ICloneable // TypeDefIndex: 1024
{
	// Fields
	private string _logicalCallID; // 0x10

	// Properties
	public string LogicalCallID { get; set; } // 0x00000001800E20D0 0x0000000180114C30

	// Constructors
	public CallContextRemotingData(); // 0x00000001800E2000

	// Methods
	public object Clone(); // 0x0000000180216070
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
public class MethodCall : ISerializable, IInternalMessage, IMessage, IMethodCallMessage, IMethodMessage, ISerializationRootObject // TypeDefIndex: 1025
{
	// Fields
	private string _uri; // 0x10
	private string _typeName; // 0x20
	private string _methodName; // 0x30
	private object[] _args; // 0x40
	private Type[] _methodSignature; // 0x50
	private MethodBase _methodBase; // 0x60
	private LogicalCallContext _callContext; // 0x00
	private ArgInfo _inArgInfo; // 0x18
	private Identity _targetIdentity; // 0x28
	private Type[] _genericArguments; // 0x30
	protected IDictionary ExternalProperties; // 0x10
	protected IDictionary InternalProperties; // 0x20
	private static Dictionary`2<string, int> <>f__switch$map1F; // 0x00

	// Properties
	private string System.Runtime.Remoting.Messaging.IInternalMessage.Uri { get; set; } // 0x00000001800E20D0 0x0000000180114C30
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.TargetIdentity { get; set; } // 0x00000001801513A0 0x00000001801140B0
	public int ArgCount { get; } // 0x00000001802275E0 
	public object[] Args { get; } // 0x000000018013BF80 
	public bool HasVarArgs { get; } // 0x0000000180227650 
	public int InArgCount { get; } // 0x00000001802276A0 
	public object[] InArgs { get; } // 0x0000000180227720 
	public LogicalCallContext LogicalCallContext { get; } // 0x00000001802277B0 
	public MethodBase MethodBase { get; } // 0x0000000180227850 
	public string MethodName { get; } // 0x0000000180227880 
	public object MethodSignature { get; } // 0x00000001802278C0 
	public virtual IDictionary Properties { get; } // 0x000000018021BDB0 
	public string TypeName { get; } // 0x0000000180227A20 
	public string Uri { get; set; } // 0x00000001800E20D0 0x0000000180114C30
	private Type[] GenericArguments { get; } // 0x0000000180227600 

	// Constructors
	public MethodCall(Header[] h1); // 0x000000018021BA90
	internal MethodCall(SerializationInfo info, StreamingContext context); // 0x000000018021BBB0
	internal MethodCall(CADMethodCallMessage msg); // 0x0000000180226FA0
	public MethodCall(IMessage msg); // 0x00000001802271C0
	internal MethodCall(string uri, string typeName, string methodName, object[] args); // 0x0000000180227570
	internal MethodCall(); // 0x00000001800E2000

	// Methods
	internal void CopyFrom(IMethodMessage call); // 0x0000000180225CE0
	internal virtual void InitMethodProperty(string key, object value); // 0x00000001802264A0
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0000000180226060
	internal virtual void InitDictionary(); // 0x0000000180226410
	public object GetArg(int argNum); // 0x0000000180225EA0
	public string GetArgName(int index); // 0x0000000180225E30
	public object GetInArg(int argNum); // 0x0000000180225F80
	public string GetInArgName(int index); // 0x0000000180225EE0
	public virtual object HeaderHandler(Header[] h); // 0x00000001802263C0
	public virtual void Init(); // 0x00000001800EA7B0
	public void ResolveMethod(); // 0x00000001802267B0
	private Type CastTo(string clientType, Type serverType); // 0x0000000180225A70
	private static string GetTypeNameFromAssemblyQualifiedName(string aqname); // 0x0000000180226320
	public void RootSetObjectData(SerializationInfo info, StreamingContext ctx); // 0x0000000180226F50
}

// Namespace: System.Runtime.Remoting.Messaging
internal class MethodCallDictionary : MethodDictionary // TypeDefIndex: 1026
{
	// Fields
	public static string[] InternalKeys; // 0x00

	// Constructors
	public MethodCallDictionary(IMethodMessage message); // 0x0000000180225050
	private static MethodCallDictionary(); // 0x0000000180224DB0

}

// Namespace: System.Runtime.Remoting.Messaging
public class MethodCallMessageWrapper : InternalMessageWrapper, IMessage, IMethodCallMessage, IMethodMessage // TypeDefIndex: 1027
{
	// Fields
	private object[] _args; // 0x18
	private ArgInfo _inArgInfo; // 0x28
	private DictionaryWrapper _properties; // 0x30

	// Properties
	public virtual int ArgCount { get; } // 0x0000000180225360 
	public virtual object[] Args { get; set; } // 0x00000001800EAEC0 0x00000001800EAEE0
	public virtual bool HasVarArgs { get; } // 0x0000000180225400 
	public virtual int InArgCount { get; } // 0x00000001802254A0 
	public virtual object[] InArgs { get; } // 0x00000001802254C0 
	public virtual LogicalCallContext LogicalCallContext { get; } // 0x00000001802254F0 
	public virtual MethodBase MethodBase { get; } // 0x0000000180225590 
	public virtual string MethodName { get; } // 0x0000000180225630 
	public virtual object MethodSignature { get; } // 0x00000001802256D0 
	public virtual IDictionary Properties { get; } // 0x0000000180225770 
	public virtual string TypeName { get; } // 0x0000000180225880 
	public virtual string Uri { get; set; } // 0x0000000180225920 0x00000001802259C0

	// Constructors
	public MethodCallMessageWrapper(IMethodCallMessage msg); // 0x0000000180225260

	// Methods
	public virtual object GetArg(int argNum); // 0x0000000180225180
	public virtual string GetArgName(int index); // 0x00000001802250D0
	public virtual object GetInArg(int argNum); // 0x00000001802251F0
	public virtual string GetInArgName(int index); // 0x00000001802251C0
}

// Namespace: 
private class DictionaryWrapper : MethodCallDictionary // TypeDefIndex: 1028
{
	// Fields
	private IDictionary _wrappedDictionary; // 0x30
	private static string[] _keys; // 0x10

	// Constructors
	public DictionaryWrapper(IMethodMessage message, IDictionary wrappedDictionary); // 0x00000001802208A0
	private static DictionaryWrapper(); // 0x0000000180220740

	// Methods
	protected override IDictionary AllocInternalProperties(); // 0x00000001801146E0
	protected override void SetMethodProperty(string key, object value); // 0x00000001802204B0
	protected override object GetMethodProperty(string key); // 0x0000000180220140
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
internal class MethodDictionary : IEnumerable, ICollection, IDictionary // TypeDefIndex: 1029
{
	// Fields
	private IDictionary _internalProperties; // 0x10
	protected IMethodMessage _message; // 0x20
	private string[] _methodKeys; // 0x00
	private bool _ownProperties; // 0x10
	private static Dictionary`2<string, int> <>f__switch$map21; // 0x20
	private static Dictionary`2<string, int> <>f__switch$map22; // 0x10

	// Properties
	internal bool HasInternalProperties { get; } // 0x00000001802288B0 
	internal IDictionary InternalProperties { get; } // 0x00000001802289D0 
	public string[] MethodKeys { get; set; } // 0x00000001800EAEB0 0x00000001800EAED0
	public bool IsFixedSize { get; } // 0x000000018011A0F0 
	public bool IsReadOnly { get; } // 0x000000018011A0F0 
	public object Item { get; set; } // 0x0000000180228AD0 0x0000000180227A80
	public ICollection Keys { get; } // 0x0000000180228C30 
	public ICollection Values { get; } // 0x0000000180228F40 
	public int Count { get; } // 0x0000000180228840 
	public bool IsSynchronized { get; } // 0x000000018011A0F0 
	public object SyncRoot { get; } // 0x0000000180123590 

	// Constructors
	public MethodDictionary(IMethodMessage message); // 0x00000001801945B0
	public MethodDictionary(string[] keys); // 0x0000000180228810

	// Methods
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x00000001802287B0
	protected virtual IDictionary AllocInternalProperties(); // 0x0000000180227C00
	public IDictionary GetInternalProperties(); // 0x0000000180227F20
	private bool IsOverridenKey(string key); // 0x0000000180228310
	protected virtual object GetMethodProperty(string key); // 0x0000000180227F50
	protected virtual void SetMethodProperty(string key, object value); // 0x0000000180228550
	public void Add(object key, object value); // 0x0000000180227A80
	public void Clear(); // 0x0000000180227C50
	public bool Contains(object key); // 0x0000000180227CA0
	public void Remove(object key); // 0x00000001802283E0
	public void CopyTo(Array array, int index); // 0x0000000180227DE0
	public IDictionaryEnumerator GetEnumerator(); // 0x0000000180227EC0
}

// Namespace: 
private class DictionaryEnumerator : IEnumerator, IDictionaryEnumerator // TypeDefIndex: 1030
{
	// Fields
	private MethodDictionary _methodDictionary; // 0x10
	private IDictionaryEnumerator _hashtableEnum; // 0x20
	private int _posMethod; // 0x10

	// Properties
	public object Current { get; } // 0x000000018021FD90 
	public DictionaryEntry Entry { get; } // 0x000000018021FDC0 
	public object Key { get; } // 0x000000018021FF30 
	public object Value { get; } // 0x000000018021FD90 

	// Constructors
	public DictionaryEnumerator(MethodDictionary methodDictionary); // 0x000000018021FD10

	// Methods
	public bool MoveNext(); // 0x000000018021FBA0
	public void Reset(); // 0x000000018021FCB0
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
public class MethodResponse : ISerializable, IInternalMessage, IMessage, IMethodMessage, IMethodReturnMessage, ISerializationRootObject // TypeDefIndex: 1031
{
	// Fields
	private string _methodName; // 0x10
	private string _uri; // 0x20
	private string _typeName; // 0x30
	private MethodBase _methodBase; // 0x40
	private object _returnValue; // 0x50
	private Exception _exception; // 0x60
	private Type[] _methodSignature; // 0x70
	private ArgInfo _inArgInfo; // 0x80
	private object[] _args; // 0x00
	private object[] _outArgs; // 0x18
	private IMethodCallMessage _callMsg; // 0x28
	private LogicalCallContext _callContext; // 0x38
	private Identity _targetIdentity; // 0x30
	protected IDictionary ExternalProperties; // 0x10
	protected IDictionary InternalProperties; // 0x20
	private static Dictionary`2<string, int> <>f__switch$map25; // 0x30

	// Properties
	private string System.Runtime.Remoting.Messaging.IInternalMessage.Uri { get; set; } // 0x0000000180229C00 0x00000001800EAEE0
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.TargetIdentity { get; set; } // 0x000000018017D300 0x000000018017D3A0
	public int ArgCount { get; } // 0x0000000180229FB0 
	public object[] Args { get; } // 0x00000001801513A0 
	public Exception Exception { get; } // 0x0000000180119440 
	public bool HasVarArgs { get; } // 0x0000000180229FC0 
	public LogicalCallContext LogicalCallContext { get; } // 0x000000018022A000 
	public MethodBase MethodBase { get; } // 0x000000018022A0A0 
	public string MethodName { get; } // 0x000000018022A1C0 
	public object MethodSignature { get; } // 0x000000018022A220 
	public int OutArgCount { get; } // 0x000000018022A2C0 
	public object[] OutArgs { get; } // 0x000000018022A360 
	public virtual IDictionary Properties { get; } // 0x000000018021C130 
	public object ReturnValue { get; } // 0x00000001801146E0 
	public string TypeName { get; } // 0x000000018022A410 
	public string Uri { get; set; } // 0x0000000180229C00 0x00000001800EAEE0

	// Constructors
	public MethodResponse(Header[] h1, IMethodCallMessage mcm); // 0x000000018021BFC0
	internal MethodResponse(Exception e, IMethodCallMessage msg); // 0x000000018021BF00
	internal MethodResponse(object returnValue, object[] outArgs, LogicalCallContext callCtx, IMethodCallMessage msg); // 0x0000000180229C60
	internal MethodResponse(IMethodCallMessage msg, CADMethodReturnMessage retmsg); // 0x0000000180229CF0
	internal MethodResponse(SerializationInfo info, StreamingContext context); // 0x000000018021BE70

	// Methods
	internal void InitMethodProperty(string key, object value); // 0x0000000180229880
	public object GetArg(int argNum); // 0x0000000180229300
	public string GetArgName(int index); // 0x0000000180229290
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0000000180229340
	public object GetOutArg(int argNum); // 0x0000000180229730
	public string GetOutArgName(int index); // 0x0000000180229620
	public virtual object HeaderHandler(Header[] h); // 0x0000000180229830
	public void RootSetObjectData(SerializationInfo info, StreamingContext ctx); // 0x0000000180229BB0
}

// Namespace: System.Runtime.Remoting.Messaging
internal class MethodReturnDictionary : MethodDictionary // TypeDefIndex: 1032
{
	// Fields
	public static string[] InternalReturnKeys; // 0x00
	public static string[] InternalExceptionKeys; // 0x18

	// Constructors
	public MethodReturnDictionary(IMethodReturnMessage message); // 0x000000018022A7F0
	private static MethodReturnDictionary(); // 0x000000018022A470

}

// Namespace: System.Runtime.Remoting.Messaging
public class MethodReturnMessageWrapper : InternalMessageWrapper, IMessage, IMethodMessage, IMethodReturnMessage // TypeDefIndex: 1033
{
	// Fields
	private object[] _args; // 0x18
	private ArgInfo _outArgInfo; // 0x28
	private DictionaryWrapper _properties; // 0x38
	private Exception _exception; // 0x30
	private object _return; // 0x10

	// Properties
	public virtual int ArgCount { get; } // 0x000000018022AAB0 
	public virtual object[] Args { get; set; } // 0x00000001800EAEC0 0x00000001800EAEE0
	public virtual Exception Exception { get; set; } // 0x00000001801146E0 0x0000000180114BF0
	public virtual bool HasVarArgs { get; } // 0x000000018022AAD0 
	public virtual LogicalCallContext LogicalCallContext { get; } // 0x000000018022AB70 
	public virtual MethodBase MethodBase { get; } // 0x000000018022AC10 
	public virtual string MethodName { get; } // 0x000000018022ACB0 
	public virtual object MethodSignature { get; } // 0x000000018022AD50 
	public virtual int OutArgCount { get; } // 0x000000018022ADF0 
	public virtual object[] OutArgs { get; } // 0x000000018022AE00 
	public virtual IDictionary Properties { get; } // 0x000000018022AE30 
	public virtual object ReturnValue { get; set; } // 0x0000000180119440 0x000000018015B770
	public virtual string TypeName { get; } // 0x000000018022AF40 
	public string Uri { get; set; } // 0x000000018022AFE0 0x000000018022B080

	// Constructors
	public MethodReturnMessageWrapper(IMethodReturnMessage msg); // 0x000000018022A980

	// Methods
	public virtual object GetArg(int argNum); // 0x0000000180225180
	public virtual string GetArgName(int index); // 0x000000018022A8D0
	public virtual object GetOutArg(int argNum); // 0x00000001802251F0
	public virtual string GetOutArgName(int index); // 0x00000001802251C0
}

// Namespace: 
private class DictionaryWrapper : MethodReturnDictionary // TypeDefIndex: 1034
{
	// Fields
	private IDictionary _wrappedDictionary; // 0x30
	private static string[] _keys; // 0x10

	// Constructors
	public DictionaryWrapper(IMethodReturnMessage message, IDictionary wrappedDictionary); // 0x00000001802207F0
	private static DictionaryWrapper(); // 0x0000000180220630

	// Methods
	protected override IDictionary AllocInternalProperties(); // 0x00000001801146E0
	protected override void SetMethodProperty(string key, object value); // 0x0000000180220250
	protected override object GetMethodProperty(string key); // 0x000000018021FF50
}

// Namespace: System.Runtime.Remoting.Messaging
[Serializable]
internal class MonoMethodMessage : IInternalMessage, IMessage, IMethodCallMessage, IMethodMessage, IMethodReturnMessage // TypeDefIndex: 1035
{
	// Fields
	private MonoMethod method; // 0x10
	private object[] args; // 0x20
	private string[] names; // 0x30
	private byte[] arg_types; // 0x40
	public LogicalCallContext ctx; // 0x50
	public object rval; // 0x60
	public Exception exc; // 0x70
	private AsyncResult asyncResult; // 0x10
	private CallType call_type; // 0x00
	private string uri; // 0x00
	private MethodCallDictionary properties; // 0x00
	private Type[] methodSignature; // 0x10
	private Identity identity; // 0x18

	// Properties
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.TargetIdentity { get; set; } // 0x000000018017D300 0x000000018017D3A0
	public IDictionary Properties { get; } // 0x000000018022BE40 
	public int ArgCount { get; } // 0x000000018022B750 
	public object[] Args { get; } // 0x00000001800EAEC0 
	public bool HasVarArgs { get; } // 0x000000018011A0F0 
	public LogicalCallContext LogicalCallContext { get; set; } // 0x00000001801146E0 0x0000000180114BF0
	public MethodBase MethodBase { get; } // 0x00000001800E20D0 
	public string MethodName { get; } // 0x000000018022BA40 
	public object MethodSignature { get; } // 0x000000018022BAC0 
	public string TypeName { get; } // 0x000000018022BEB0 
	public string Uri { get; set; } // 0x0000000180176AC0 0x0000000180196F80
	public int InArgCount { get; } // 0x000000018022B810 
	public object[] InArgs { get; } // 0x000000018022B8A0 
	public Exception Exception { get; } // 0x0000000180114BB0 
	public int OutArgCount { get; } // 0x000000018022BC20 
	public object[] OutArgs { get; } // 0x000000018022BC90 
	public object ReturnValue { get; } // 0x0000000180119440 
	public bool IsAsync { get; } // 0x0000000180176AA0 
	public AsyncResult AsyncResult { get; } // 0x0000000180113E60 
	internal CallType CallType { get; } // 0x000000018022B790 

	// Constructors
	public MonoMethodMessage(MethodBase method, object[] out_args); // 0x000000018022B690
	public MonoMethodMessage(Type type, string method_name, object[] in_args); // 0x000000018022B510

	// Methods
	internal void InitMessage(MonoMethod method, object[] out_args); // 0x000000018022B470
	public object GetArg(int arg_num); // 0x000000018022B1B0
	public string GetArgName(int arg_num); // 0x000000018022B100
	public object GetInArg(int arg_num); // 0x000000018022B290
	public string GetInArgName(int arg_num); // 0x000000018022B1F0
	public object GetOutArg(int arg_num); // 0x000000018022B3D0
	public string GetOutArgName(int arg_num); // 0x000000018022B330
	public bool NeedsOutProcessing(out int outCount); // 0x000000018022B480
}

// Namespace: System.Runtime.Remoting.Messaging
internal enum CallType // TypeDefIndex: 1036
{
	Sync = 0,
	BeginInvoke = 1,
	EndInvoke = 2,
	OneWay = 3
}

// Namespace: System.Runtime.Remoting.Messaging
public class OneWayAttribute : Attribute // TypeDefIndex: 1037
{
	// Constructors
	public OneWayAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Runtime.Remoting.Messaging
internal class RemotingSurrogate : ISerializationSurrogate // TypeDefIndex: 1038
{
	// Constructors
	public RemotingSurrogate(); // 0x00000001800E2000

	// Methods
	public virtual void GetObjectData(object obj, SerializationInfo si, StreamingContext sc); // 0x000000018022C4C0
	public virtual object SetObjectData(object obj, SerializationInfo si, StreamingContext sc, ISurrogateSelector selector); // 0x000000018022C610
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ObjRefSurrogate : ISerializationSurrogate // TypeDefIndex: 1039
{
	// Constructors
	public ObjRefSurrogate(); // 0x00000001800E2000

	// Methods
	public virtual void GetObjectData(object obj, SerializationInfo si, StreamingContext sc); // 0x000000018022BF50
	public virtual object SetObjectData(object obj, SerializationInfo si, StreamingContext sc, ISurrogateSelector selector); // 0x000000018022C090
}

// Namespace: System.Runtime.Remoting.Messaging
public class RemotingSurrogateSelector : ISurrogateSelector // TypeDefIndex: 1040
{
	// Fields
	private static Type s_cachedTypeObjRef; // 0x00
	private static ObjRefSurrogate _objRefSurrogate; // 0x10
	private static RemotingSurrogate _objRemotingSurrogate; // 0x18
	private object _rootObj; // 0x10
	private MessageSurrogateFilter _filter; // 0x20
	private ISurrogateSelector _next; // 0x30

	// Properties
	public MessageSurrogateFilter Filter { get; set; } // 0x00000001800EAEC0 0x00000001800EAEE0

	// Constructors
	public RemotingSurrogateSelector(); // 0x00000001800E2000
	private static RemotingSurrogateSelector(); // 0x000000018022C400

	// Methods
	public virtual void ChainSelector(ISurrogateSelector selector); // 0x000000018022C0F0
	public virtual ISurrogateSelector GetNextSelector(); // 0x00000001800EAEB0
	public object GetRootObject(); // 0x00000001800E20D0
	public virtual ISerializationSurrogate GetSurrogate(Type type, StreamingContext context, out ISurrogateSelector ssout); // 0x000000018022C160
	public void SetRootObject(object obj); // 0x000000018022C340
	public virtual void UseSoapFormat(); // 0x000000018022C3B0
}

// Namespace: System.Runtime.Remoting.Messaging
public class ReturnMessage : IInternalMessage, IMessage, IMethodMessage, IMethodReturnMessage // TypeDefIndex: 1041
{
	// Fields
	private object[] _outArgs; // 0x10
	private object[] _args; // 0x20
	private int _outArgsCount; // 0x30
	private LogicalCallContext _callCtx; // 0x40
	private object _returnValue; // 0x50
	private string _uri; // 0x60
	private Exception _exception; // 0x70
	private MethodBase _methodBase; // 0x10
	private string _methodName; // 0x10
	private Type[] _methodSignature; // 0x10
	private string _typeName; // 0x10
	private MethodReturnDictionary _properties; // 0x00
	private Identity _targetIdentity; // 0x18
	private ArgInfo _inArgInfo; // 0x00

	// Properties
	private string System.Runtime.Remoting.Messaging.IInternalMessage.Uri { get; set; } // 0x0000000180119440 0x000000018015B770
	private Identity System.Runtime.Remoting.Messaging.IInternalMessage.TargetIdentity { get; set; } // 0x000000018017D300 0x000000018017D3A0
	public int ArgCount { get; } // 0x000000018022AAB0 
	public object[] Args { get; } // 0x00000001800EAEC0 
	public bool HasVarArgs { get; } // 0x000000018022C9C0 
	public LogicalCallContext LogicalCallContext { get; } // 0x000000018022C9F0 
	public MethodBase MethodBase { get; } // 0x0000000180113E60 
	public string MethodName { get; } // 0x000000018022CA90 
	public object MethodSignature { get; } // 0x000000018022CAD0 
	public virtual IDictionary Properties { get; } // 0x000000018022CD80 
	public string TypeName { get; } // 0x000000018022CDF0 
	public string Uri { get; set; } // 0x0000000180119440 0x000000018015B770
	public Exception Exception { get; } // 0x0000000180114BB0 
	public int OutArgCount { get; } // 0x000000018022CC30 
	public object[] OutArgs { get; } // 0x000000018022CCD0 
	public virtual object ReturnValue { get; } // 0x00000001801146E0 

	// Constructors
	public ReturnMessage(object ret, object[] outArgs, int outArgsCount, LogicalCallContext callCtx, IMethodCallMessage mcm); // 0x000000018022C850
	public ReturnMessage(Exception e, IMethodCallMessage mcm); // 0x000000018022C920

	// Methods
	public object GetArg(int argNum); // 0x0000000180225180
	public string GetArgName(int index); // 0x000000018022C660
	public object GetOutArg(int argNum); // 0x000000018022C770
	public string GetOutArgName(int index); // 0x000000018022C6D0
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ServerContextTerminatorSink : IMessageSink // TypeDefIndex: 1042
{
	// Properties
	public IMessageSink NextSink { get; } // 0x00000001800EA8C0 

	// Constructors
	public ServerContextTerminatorSink(); // 0x00000001800E2000

	// Methods
	public IMessage SyncProcessMessage(IMessage msg); // 0x000000018022CF20
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x000000018022CE50
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ServerObjectTerminatorSink : IMessageSink // TypeDefIndex: 1043
{
	// Fields
	private IMessageSink _nextSink; // 0x10

	// Properties
	public IMessageSink NextSink { get; } // 0x00000001800E20D0 

	// Constructors
	public ServerObjectTerminatorSink(IMessageSink nextSink); // 0x000000018015C840

	// Methods
	public IMessage SyncProcessMessage(IMessage msg); // 0x00000001801D51B0
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x00000001801D5030
}

// Namespace: System.Runtime.Remoting.Messaging
internal class ServerObjectReplySink : IMessageSink // TypeDefIndex: 1044
{
	// Fields
	private IMessageSink _replySink; // 0x10
	private ServerIdentity _identity; // 0x10

	// Properties
	public IMessageSink NextSink { get; } // 0x00000001800E20D0 

	// Constructors
	public ServerObjectReplySink(ServerIdentity identity, IMessageSink replySink); // 0x00000001801E2970

	// Methods
	public IMessage SyncProcessMessage(IMessage msg); // 0x000000018022D0A0
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x000000018022D050
}

// Namespace: System.Runtime.Remoting.Messaging
internal class StackBuilderSink : IMessageSink // TypeDefIndex: 1045
{
	// Fields
	private MarshalByRefObject _target; // 0x10
	private RealProxy _rp; // 0x10

	// Properties
	public IMessageSink NextSink { get; } // 0x00000001800EA8C0 

	// Constructors
	public StackBuilderSink(MarshalByRefObject obj, bool forceInternalExecute); // 0x00000001801DE580

	// Methods
	public IMessage SyncProcessMessage(IMessage msg); // 0x00000001801DE4B0
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x00000001801DDDF0
	private void ExecuteAsyncMessage(object ob); // 0x00000001801DE300
	private void CheckParameters(IMessage msg); // 0x00000001801DDF40
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
public interface ISoapXsd // TypeDefIndex: 1046
{
	// Methods
	string GetXsdType();
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapAnyUri : ISoapXsd // TypeDefIndex: 1047
{
	// Fields
	private string _value; // 0x10

	// Properties
	public string Value { get; set; } // 0x00000001800E20D0 0x0000000180114C30
	public static string XsdType { get; } // 0x00000001801D58A0 

	// Constructors
	public SoapAnyUri(); // 0x00000001800E2000
	public SoapAnyUri(string value); // 0x000000018015C840

	// Methods
	public string GetXsdType(); // 0x00000001801D58A0
	public static SoapAnyUri Parse(string value); // 0x00000001801D58D0
	public override string ToString(); // 0x00000001800E20D0
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapBase64Binary : ISoapXsd // TypeDefIndex: 1048
{
	// Fields
	private byte[] _value; // 0x10

	// Properties
	public byte[] Value { get; set; } // 0x00000001800E20D0 0x0000000180114C30
	public static string XsdType { get; } // 0x00000001801D5930 

	// Constructors
	public SoapBase64Binary(); // 0x00000001800E2000
	public SoapBase64Binary(byte[] value); // 0x000000018015C840

	// Methods
	public string GetXsdType(); // 0x00000001801D5930
	public static SoapBase64Binary Parse(string value); // 0x00000001801D5960
	public override string ToString(); // 0x00000001801D59E0
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapDate : ISoapXsd // TypeDefIndex: 1049
{
	// Fields
	private static readonly string[] _datetimeFormats; // 0x00
	private int _sign; // 0x18
	private DateTime _value; // 0x00

	// Properties
	public int Sign { get; set; } // 0x00000001800ECD10 0x0000000180143AD0
	public DateTime Value { get; set; } // 0x00000001801A7E00 0x00000001801D6A60
	public static string XsdType { get; } // 0x00000001801D6A30 

	// Constructors
	public SoapDate(); // 0x00000001800E2000
	public SoapDate(DateTime value); // 0x00000001801D69C0
	public SoapDate(DateTime value, int sign); // 0x00000001801D69F0
	private static SoapDate(); // 0x00000001801D6720

	// Methods
	public string GetXsdType(); // 0x00000001801D6510
	public static SoapDate Parse(string value); // 0x00000001801D6580
	public override string ToString(); // 0x00000001801D6680
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
public sealed class SoapDateTime // TypeDefIndex: 1050
{
	// Fields
	private static readonly string[] _datetimeFormats; // 0x00

	// Properties
	public static string XsdType { get; } // 0x00000001801D64E0 

	// Constructors
	public SoapDateTime(); // 0x00000001800E2000
	private static SoapDateTime(); // 0x00000001801D5B70

	// Methods
	public static DateTime Parse(string value); // 0x00000001801D5A40
	public static string ToString(DateTime value); // 0x00000001801D5B00
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapDay : ISoapXsd // TypeDefIndex: 1051
{
	// Fields
	private static readonly string[] _datetimeFormats; // 0x00
	private DateTime _value; // 0x10

	// Properties
	public DateTime Value { get; set; } // 0x00000001801D6D60 0x00000001801D6DA0
	public static string XsdType { get; } // 0x00000001801D6D70 

	// Constructors
	public SoapDay(); // 0x00000001800E2000
	public SoapDay(DateTime value); // 0x00000001801D6D30
	private static SoapDay(); // 0x00000001801D6C20

	// Methods
	public string GetXsdType(); // 0x00000001801D6A70
	public static SoapDay Parse(string value); // 0x00000001801D6AE0
	public override string ToString(); // 0x00000001801D6BB0
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
public sealed class SoapDuration // TypeDefIndex: 1052
{
	// Properties
	public static string XsdType { get; } // 0x00000001801D7600 

	// Constructors
	public SoapDuration(); // 0x00000001800E2000

	// Methods
	public static TimeSpan Parse(string value); // 0x00000001801D6DB0
	public static string ToString(TimeSpan timeSpan); // 0x00000001801D72A0
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapEntities : ISoapXsd // TypeDefIndex: 1053
{
	// Fields
	private string _value; // 0x10

	// Properties
	public string Value { get; set; } // 0x00000001800E20D0 0x0000000180114C30
	public static string XsdType { get; } // 0x00000001801D7630 

	// Constructors
	public SoapEntities(); // 0x00000001800E2000
	public SoapEntities(string value); // 0x000000018015C840

	// Methods
	public string GetXsdType(); // 0x00000001801D7630
	public static SoapEntities Parse(string value); // 0x00000001801D7660
	public override string ToString(); // 0x00000001800E20D0
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapEntity : ISoapXsd // TypeDefIndex: 1054
{
	// Fields
	private string _value; // 0x10

	// Properties
	public string Value { get; set; } // 0x00000001800E20D0 0x0000000180114C30
	public static string XsdType { get; } // 0x00000001801D76C0 

	// Constructors
	public SoapEntity(); // 0x00000001800E2000
	public SoapEntity(string value); // 0x000000018015C840

	// Methods
	public string GetXsdType(); // 0x00000001801D76C0
	public static SoapEntity Parse(string value); // 0x00000001801D76F0
	public override string ToString(); // 0x00000001800E20D0
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
internal class SoapHelper // TypeDefIndex: 1055
{
	// Constructors
	public SoapHelper(); // 0x00000001800E2000

	// Methods
	public static Exception GetException(ISoapXsd type, string msg); // 0x00000001801D7810
	public static string Normalize(string s); // 0x0000000180123590
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapHexBinary : ISoapXsd // TypeDefIndex: 1056
{
	// Fields
	private byte[] _value; // 0x10
	private StringBuilder sb; // 0x10

	// Properties
	public byte[] Value { get; set; } // 0x00000001800E20D0 0x0000000180114C30
	public static string XsdType { get; } // 0x00000001801D7D00 

	// Constructors
	public SoapHexBinary(); // 0x00000001801D7ED0
	public SoapHexBinary(byte[] value); // 0x00000001801D7F30

	// Methods
	public string GetXsdType(); // 0x00000001801D7D00
	public static SoapHexBinary Parse(string value); // 0x00000001801D7D30
	internal static byte[] FromBinHexString(string value); // 0x00000001801D7A80
	private static byte FromHex(char hexDigit, string value); // 0x00000001801D7C50
	private static Exception CreateInvalidValueException(string value); // 0x00000001801D78D0
	public override string ToString(); // 0x00000001801D7DE0
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapId : ISoapXsd // TypeDefIndex: 1057
{
	// Fields
	private string _value; // 0x10

	// Properties
	public string Value { get; set; } // 0x00000001800E20D0 0x0000000180114C30
	public static string XsdType { get; } // 0x00000001801D7FA0 

	// Constructors
	public SoapId(); // 0x00000001800E2000
	public SoapId(string value); // 0x000000018015C840

	// Methods
	public string GetXsdType(); // 0x00000001801D7FA0
	public static SoapId Parse(string value); // 0x00000001801D7FD0
	public override string ToString(); // 0x00000001800E20D0
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapIdref : ISoapXsd // TypeDefIndex: 1058
{
	// Fields
	private string _value; // 0x10

	// Properties
	public string Value { get; set; } // 0x00000001800E20D0 0x0000000180114C30
	public static string XsdType { get; } // 0x00000001801D8030 

	// Constructors
	public SoapIdref(); // 0x00000001800E2000
	public SoapIdref(string value); // 0x000000018015C840

	// Methods
	public string GetXsdType(); // 0x00000001801D8030
	public static SoapIdref Parse(string value); // 0x00000001801D8060
	public override string ToString(); // 0x00000001800E20D0
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapIdrefs : ISoapXsd // TypeDefIndex: 1059
{
	// Fields
	private string _value; // 0x10

	// Properties
	public string Value { get; set; } // 0x00000001800E20D0 0x0000000180114C30
	public static string XsdType { get; } // 0x00000001801D80C0 

	// Constructors
	public SoapIdrefs(); // 0x00000001800E2000
	public SoapIdrefs(string value); // 0x000000018015C840

	// Methods
	public string GetXsdType(); // 0x00000001801D80C0
	public static SoapIdrefs Parse(string value); // 0x00000001801D80F0
	public override string ToString(); // 0x00000001800E20D0
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapInteger : ISoapXsd // TypeDefIndex: 1060
{
	// Fields
	private Decimal _value; // 0x10

	// Properties
	public Decimal Value { get; set; } // 0x00000001801D6D60 0x00000001801D6DA0
	public static string XsdType { get; } // 0x00000001801D8150 

	// Constructors
	public SoapInteger(); // 0x00000001800E2000
	public SoapInteger(Decimal value); // 0x00000001801D6D30

	// Methods
	public string GetXsdType(); // 0x00000001801D8150
	public static SoapInteger Parse(string value); // 0x00000001801D8180
	public override string ToString(); // 0x00000001801D8210
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapLanguage : ISoapXsd // TypeDefIndex: 1061
{
	// Fields
	private string _value; // 0x10

	// Properties
	public string Value { get; set; } // 0x00000001800E20D0 0x0000000180114C30
	public static string XsdType { get; } // 0x00000001801D8220 

	// Constructors
	public SoapLanguage(); // 0x00000001800E2000
	public SoapLanguage(string value); // 0x000000018015C840

	// Methods
	public string GetXsdType(); // 0x00000001801D8220
	public static SoapLanguage Parse(string value); // 0x00000001801D8250
	public override string ToString(); // 0x00000001800E20D0
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapMonth : ISoapXsd // TypeDefIndex: 1062
{
	// Fields
	private static readonly string[] _datetimeFormats; // 0x00
	private DateTime _value; // 0x00

	// Properties
	public DateTime Value { get; set; } // 0x00000001801D6D60 0x00000001801D6DA0
	public static string XsdType { get; } // 0x00000001801D8B10 

	// Constructors
	public SoapMonth(); // 0x00000001800E2000
	public SoapMonth(DateTime value); // 0x00000001801D6D30
	private static SoapMonth(); // 0x00000001801D8A00

	// Methods
	public string GetXsdType(); // 0x00000001801D8850
	public static SoapMonth Parse(string value); // 0x00000001801D88C0
	public override string ToString(); // 0x00000001801D8990
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapMonthDay : ISoapXsd // TypeDefIndex: 1063
{
	// Fields
	private static readonly string[] _datetimeFormats; // 0x00
	private DateTime _value; // 0x10

	// Properties
	public DateTime Value { get; set; } // 0x00000001801D6D60 0x00000001801D6DA0
	public static string XsdType { get; } // 0x00000001801D8820 

	// Constructors
	public SoapMonthDay(); // 0x00000001800E2000
	public SoapMonthDay(DateTime value); // 0x00000001801D6D30
	private static SoapMonthDay(); // 0x00000001801D8710

	// Methods
	public string GetXsdType(); // 0x00000001801D8560
	public static SoapMonthDay Parse(string value); // 0x00000001801D85D0
	public override string ToString(); // 0x00000001801D86A0
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapName : ISoapXsd // TypeDefIndex: 1064
{
	// Fields
	private string _value; // 0x10

	// Properties
	public string Value { get; set; } // 0x00000001800E20D0 0x0000000180114C30
	public static string XsdType { get; } // 0x00000001801D8B40 

	// Constructors
	public SoapName(); // 0x00000001800E2000
	public SoapName(string value); // 0x000000018015C840

	// Methods
	public string GetXsdType(); // 0x00000001801D8B40
	public static SoapName Parse(string value); // 0x00000001801D8B70
	public override string ToString(); // 0x00000001800E20D0
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapNcName : ISoapXsd // TypeDefIndex: 1065
{
	// Fields
	private string _value; // 0x10

	// Properties
	public string Value { get; set; } // 0x00000001800E20D0 0x0000000180114C30
	public static string XsdType { get; } // 0x00000001801D8BD0 

	// Constructors
	public SoapNcName(); // 0x00000001800E2000
	public SoapNcName(string value); // 0x000000018015C840

	// Methods
	public string GetXsdType(); // 0x00000001801D8BD0
	public static SoapNcName Parse(string value); // 0x00000001801D8C00
	public override string ToString(); // 0x00000001800E20D0
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapNegativeInteger : ISoapXsd // TypeDefIndex: 1066
{
	// Fields
	private Decimal _value; // 0x10

	// Properties
	public Decimal Value { get; set; } // 0x00000001801D6D60 0x00000001801D6DA0
	public static string XsdType { get; } // 0x00000001801D8C60 

	// Constructors
	public SoapNegativeInteger(); // 0x00000001800E2000
	public SoapNegativeInteger(Decimal value); // 0x00000001801D8E00

	// Methods
	public string GetXsdType(); // 0x00000001801D8C60
	public static SoapNegativeInteger Parse(string value); // 0x00000001801D8C90
	public override string ToString(); // 0x00000001801D8210
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapNmtoken : ISoapXsd // TypeDefIndex: 1067
{
	// Fields
	private string _value; // 0x10

	// Properties
	public string Value { get; set; } // 0x00000001800E20D0 0x0000000180114C30
	public static string XsdType { get; } // 0x00000001801D8F10 

	// Constructors
	public SoapNmtoken(); // 0x00000001800E2000
	public SoapNmtoken(string value); // 0x000000018015C840

	// Methods
	public string GetXsdType(); // 0x00000001801D8F10
	public static SoapNmtoken Parse(string value); // 0x00000001801D8F40
	public override string ToString(); // 0x00000001800E20D0
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapNmtokens : ISoapXsd // TypeDefIndex: 1068
{
	// Fields
	private string _value; // 0x10

	// Properties
	public string Value { get; set; } // 0x00000001800E20D0 0x0000000180114C30
	public static string XsdType { get; } // 0x00000001801D8FA0 

	// Constructors
	public SoapNmtokens(); // 0x00000001800E2000
	public SoapNmtokens(string value); // 0x000000018015C840

	// Methods
	public string GetXsdType(); // 0x00000001801D8FA0
	public static SoapNmtokens Parse(string value); // 0x00000001801D8FD0
	public override string ToString(); // 0x00000001800E20D0
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapNonNegativeInteger : ISoapXsd // TypeDefIndex: 1069
{
	// Fields
	private Decimal _value; // 0x10

	// Properties
	public Decimal Value { get; set; } // 0x00000001801D6D60 0x00000001801D6DA0
	public static string XsdType { get; } // 0x00000001801D9030 

	// Constructors
	public SoapNonNegativeInteger(); // 0x00000001800E2000
	public SoapNonNegativeInteger(Decimal value); // 0x00000001801D91D0

	// Methods
	public string GetXsdType(); // 0x00000001801D9030
	public static SoapNonNegativeInteger Parse(string value); // 0x00000001801D9060
	public override string ToString(); // 0x00000001801D8210
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapNonPositiveInteger : ISoapXsd // TypeDefIndex: 1070
{
	// Fields
	private Decimal _value; // 0x10

	// Properties
	public Decimal Value { get; set; } // 0x00000001801D6D60 0x00000001801D6DA0
	public static string XsdType { get; } // 0x00000001801D92E0 

	// Constructors
	public SoapNonPositiveInteger(); // 0x00000001800E2000
	public SoapNonPositiveInteger(Decimal value); // 0x00000001801D9480

	// Methods
	public string GetXsdType(); // 0x00000001801D92E0
	public static SoapNonPositiveInteger Parse(string value); // 0x00000001801D9310
	public override string ToString(); // 0x00000001801D8210
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapNormalizedString : ISoapXsd // TypeDefIndex: 1071
{
	// Fields
	private string _value; // 0x10

	// Properties
	public string Value { get; set; } // 0x00000001800E20D0 0x0000000180114C30
	public static string XsdType { get; } // 0x00000001801D9590 

	// Constructors
	public SoapNormalizedString(); // 0x00000001800E2000
	public SoapNormalizedString(string value); // 0x000000018015C840

	// Methods
	public string GetXsdType(); // 0x00000001801D9590
	public static SoapNormalizedString Parse(string value); // 0x00000001801D95C0
	public override string ToString(); // 0x00000001800E20D0
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapNotation : ISoapXsd // TypeDefIndex: 1072
{
	// Fields
	private string _value; // 0x10

	// Properties
	public string Value { get; set; } // 0x00000001800E20D0 0x0000000180114C30
	public static string XsdType { get; } // 0x00000001801D9620 

	// Constructors
	public SoapNotation(); // 0x00000001800E2000
	public SoapNotation(string value); // 0x000000018015C840

	// Methods
	public string GetXsdType(); // 0x00000001801D9620
	public static SoapNotation Parse(string value); // 0x00000001801D9650
	public override string ToString(); // 0x00000001800E20D0
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapPositiveInteger : ISoapXsd // TypeDefIndex: 1073
{
	// Fields
	private Decimal _value; // 0x10

	// Properties
	public Decimal Value { get; set; } // 0x00000001801D6D60 0x00000001801D6DA0
	public static string XsdType { get; } // 0x00000001801D96B0 

	// Constructors
	public SoapPositiveInteger(); // 0x00000001800E2000
	public SoapPositiveInteger(Decimal value); // 0x00000001801D9850

	// Methods
	public string GetXsdType(); // 0x00000001801D96B0
	public static SoapPositiveInteger Parse(string value); // 0x00000001801D96E0
	public override string ToString(); // 0x00000001801D8210
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapQName : ISoapXsd // TypeDefIndex: 1074
{
	// Fields
	private string _name; // 0x10
	private string _key; // 0x20
	private string _namespace; // 0x00

	// Properties
	public string Key { get; set; } // 0x00000001800EAEC0 0x00000001800EAEE0
	public string Name { get; set; } // 0x00000001800E20D0 0x0000000180114C30
	public string Namespace { get; set; } // 0x00000001800EAEB0 0x00000001800EAED0
	public static string XsdType { get; } // 0x00000001801D9960 

	// Constructors
	public SoapQName(); // 0x00000001800E2000
	public SoapQName(string value); // 0x000000018015C840
	public SoapQName(string key, string name); // 0x00000001801D9B20
	public SoapQName(string key, string name, string namespaceValue); // 0x00000001801D9B60

	// Methods
	public string GetXsdType(); // 0x00000001801D9960
	public static SoapQName Parse(string value); // 0x00000001801D9990
	public override string ToString(); // 0x00000001801D9A50
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapTime : ISoapXsd // TypeDefIndex: 1075
{
	// Fields
	private static readonly string[] _datetimeFormats; // 0x00
	private DateTime _value; // 0x10

	// Properties
	public DateTime Value { get; set; } // 0x00000001801D6D60 0x00000001801D6DA0
	public static string XsdType { get; } // 0x00000001801DD0C0 

	// Constructors
	public SoapTime(); // 0x00000001800E2000
	public SoapTime(DateTime value); // 0x00000001801D6D30
	private static SoapTime(); // 0x00000001801DC750

	// Methods
	public string GetXsdType(); // 0x00000001801DC5A0
	public static SoapTime Parse(string value); // 0x00000001801DC610
	public override string ToString(); // 0x00000001801DC6E0
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapToken : ISoapXsd // TypeDefIndex: 1076
{
	// Fields
	private string _value; // 0x10

	// Properties
	public string Value { get; set; } // 0x00000001800E20D0 0x0000000180114C30
	public static string XsdType { get; } // 0x00000001801DD0F0 

	// Constructors
	public SoapToken(); // 0x00000001800E2000
	public SoapToken(string value); // 0x000000018015C840

	// Methods
	public string GetXsdType(); // 0x00000001801DD0F0
	public static SoapToken Parse(string value); // 0x00000001801DD120
	public override string ToString(); // 0x00000001800E20D0
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapYear : ISoapXsd // TypeDefIndex: 1077
{
	// Fields
	private static readonly string[] _datetimeFormats; // 0x00
	private int _sign; // 0x18
	private DateTime _value; // 0x00

	// Properties
	public int Sign { get; set; } // 0x00000001800ECD10 0x0000000180143AD0
	public DateTime Value { get; set; } // 0x00000001801A7E00 0x00000001801D6A60
	public static string XsdType { get; } // 0x00000001801DDDC0 

	// Constructors
	public SoapYear(); // 0x00000001800E2000
	public SoapYear(DateTime value); // 0x00000001801D69C0
	public SoapYear(DateTime value, int sign); // 0x00000001801D69F0
	private static SoapYear(); // 0x00000001801DDB20

	// Methods
	public string GetXsdType(); // 0x00000001801DD910
	public static SoapYear Parse(string value); // 0x00000001801DD980
	public override string ToString(); // 0x00000001801DDA80
}

// Namespace: System.Runtime.Remoting.Metadata.W3cXsd2001
[Serializable]
public sealed class SoapYearMonth : ISoapXsd // TypeDefIndex: 1078
{
	// Fields
	private static readonly string[] _datetimeFormats; // 0x00
	private int _sign; // 0x18
	private DateTime _value; // 0x10

	// Properties
	public int Sign { get; set; } // 0x00000001800ECD10 0x0000000180143AD0
	public DateTime Value { get; set; } // 0x00000001801A7E00 0x00000001801D6A60
	public static string XsdType { get; } // 0x00000001801DD8E0 

	// Constructors
	public SoapYearMonth(); // 0x00000001800E2000
	public SoapYearMonth(DateTime value); // 0x00000001801D69C0
	public SoapYearMonth(DateTime value, int sign); // 0x00000001801D69F0
	private static SoapYearMonth(); // 0x00000001801DD640

	// Methods
	public string GetXsdType(); // 0x00000001801DD430
	public static SoapYearMonth Parse(string value); // 0x00000001801DD4A0
	public override string ToString(); // 0x00000001801DD5A0
}

// Namespace: System.Runtime.Remoting.Metadata
public class SoapAttribute : Attribute // TypeDefIndex: 1079
{
	// Fields
	private bool _nested; // 0x10
	private bool _useAttribute; // 0x18
	protected string ProtXmlNamespace; // 0x28
	protected object ReflectInfo; // 0x38

	// Properties
	public virtual bool Embedded { get; set; } // 0x0000000180113840 0x000000018018FBE0
	public virtual bool UseAttribute { get; set; } // 0x0000000180147560 0x000000018018FC00
	public virtual string XmlNamespace { get; set; } // 0x00000001800EAEC0 0x00000001800EAEE0

	// Constructors
	public SoapAttribute(); // 0x00000001800EAC90

	// Methods
	internal virtual void SetReflectionObject(object reflectionObject); // 0x00000001800EAED0
}

// Namespace: System.Runtime.Remoting.Metadata
public sealed class SoapFieldAttribute : SoapAttribute // TypeDefIndex: 1080
{
	// Fields
	private int _order; // 0x28
	private string _elementName; // 0x38
	private bool _isElement; // 0x28

	// Properties
	public int Order { get; set; } // 0x0000000180119420 0x00000001801CAD10
	public string XmlElementName { get; set; } // 0x00000001801146E0 0x00000001801D7800

	// Constructors
	public SoapFieldAttribute(); // 0x00000001800EAC90

	// Methods
	public bool IsInteropXmlElement(); // 0x00000001801B1360
	internal override void SetReflectionObject(object reflectionObject); // 0x00000001801D7750
}

// Namespace: System.Runtime.Remoting.Metadata
public sealed class SoapMethodAttribute : SoapAttribute // TypeDefIndex: 1081
{
	// Fields
	private string _responseElement; // 0x28
	private string _responseNamespace; // 0x38
	private string _returnElement; // 0x48
	private string _soapAction; // 0x10
	private bool _useAttribute; // 0x00
	private string _namespace; // 0x00

	// Properties
	public string ResponseXmlElementName { get; set; } // 0x000000018013BF80 0x000000018015B760
	public string ResponseXmlNamespace { get; set; } // 0x00000001801146E0 0x0000000180114BF0
	public string ReturnXmlElementName { get; set; } // 0x0000000180119440 0x000000018015B770
	public string SoapAction { get; set; } // 0x0000000180114BB0 0x0000000180114C20
	public override bool UseAttribute { get; set; } // 0x00000001801D8540 0x00000001801D8550
	public override string XmlNamespace { get; set; } // 0x00000001801513A0 0x00000001801140B0

	// Constructors
	public SoapMethodAttribute(); // 0x00000001800EAC90

	// Methods
	internal override void SetReflectionObject(object reflectionObject); // 0x00000001801D82B0
}

// Namespace: System.Runtime.Remoting.Metadata
[Serializable]
public enum SoapOption // TypeDefIndex: 1082
{
	None = 0,
	AlwaysIncludeTypes = 1,
	XsdString = 2,
	EmbedAll = 4,
	Option1 = 8,
	Option2 = 16
}

// Namespace: System.Runtime.Remoting.Metadata
public sealed class SoapParameterAttribute : SoapAttribute // TypeDefIndex: 1083
{
	// Constructors
	public SoapParameterAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Runtime.Remoting.Metadata
public sealed class SoapTypeAttribute : SoapAttribute // TypeDefIndex: 1084
{
	// Fields
	private SoapOption _soapOption; // 0x28
	private bool _useAttribute; // 0x30
	private string _xmlElementName; // 0x40
	private XmlFieldOrderOption _xmlFieldOrder; // 0x50
	private string _xmlNamespace; // 0x59
	private string _xmlTypeName; // 0x10
	private string _xmlTypeNamespace; // 0x00
	private bool _isType; // 0x10
	private bool _isElement; // 0x20

	// Properties
	public SoapOption SoapOptions { get; set; } // 0x0000000180119420 0x00000001801CAD10
	public override bool UseAttribute { get; set; } // 0x00000001801DD3D0 0x00000001801DD3E0
	public string XmlElementName { get; set; } // 0x00000001801146E0 0x00000001801DD3F0
	public XmlFieldOrderOption XmlFieldOrder { get; set; } // 0x0000000180114770 0x0000000180114C00
	public override string XmlNamespace { get; set; } // 0x0000000180114BB0 0x00000001801DD400
	public string XmlTypeName { get; set; } // 0x0000000180113E60 0x00000001801DD410
	public string XmlTypeNamespace { get; set; } // 0x00000001801513A0 0x00000001801DD420
	internal bool IsInteropXmlElement { get; } // 0x00000001801DD3C0 
	internal bool IsInteropXmlType { get; } // 0x00000001800E3550 

	// Constructors
	public SoapTypeAttribute(); // 0x00000001800EAC90

	// Methods
	internal override void SetReflectionObject(object reflectionObject); // 0x00000001801DD180
}

// Namespace: System.Runtime.Remoting.Metadata
[Serializable]
public enum XmlFieldOrderOption // TypeDefIndex: 1085
{
	All = 0,
	Sequence = 1,
	Choice = 2
}

// Namespace: System.Runtime.Remoting.Proxies
public class ProxyAttribute : Attribute, IContextAttribute // TypeDefIndex: 1086
{
	// Constructors
	public ProxyAttribute(); // 0x00000001800EAC90

	// Methods
	public virtual MarshalByRefObject CreateInstance(Type serverType); // 0x00000001801C97C0
	public virtual RealProxy CreateProxy(ObjRef objRef, Type serverType, object serverObject, Context serverContext); // 0x00000001801C98D0
	public void GetPropertiesForNewContext(IConstructionCallMessage msg); // 0x00000001800EA7B0
	public bool IsContextOK(Context ctx, IConstructionCallMessage msg); // 0x000000018010E420
}

// Namespace: System.Runtime.Remoting.Proxies
internal class TransparentProxy // TypeDefIndex: 1087
{
	// Fields
	public RealProxy _rp; // 0x10
	private IntPtr _class; // 0x20
	private bool _custom_type_info; // 0x10

	// Constructors
	public TransparentProxy(); // 0x00000001800E2000

}

// Namespace: System.Runtime.Remoting.Proxies
public abstract class RealProxy // TypeDefIndex: 1088
{
	// Fields
	private Type class_to_proxy; // 0x10
	internal Context _targetContext; // 0x20
	private MarshalByRefObject _server; // 0x30
	private int _targetDomainId; // 0x40
	internal string _targetUri; // 0x00
	internal Identity _objectIdentity; // 0x50
	private object _objTP; // 0x60
	private object _stubData; // 0x20

	// Properties
	internal Identity ObjectIdentity { get; set; } // 0x0000000180119440 0x000000018015B770

	// Constructors
	protected RealProxy(); // 0x00000001801CAD70
	protected RealProxy(Type classToProxy); // 0x00000001801CAEF0
	internal RealProxy(Type classToProxy, ClientIdentity identity); // 0x00000001801CAE80
	protected RealProxy(Type classToProxy, IntPtr stub, object stubData); // 0x00000001801CAD80

	// Methods
	private static Type InternalGetProxyType(object transparentProxy); // 0x00000001801C9FC0
	public Type GetProxiedType(); // 0x00000001801C9D80
	public virtual ObjRef CreateObjRef(Type requestedType); // 0x00000001801C9940
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00000001801C9BA0
	public virtual IntPtr GetCOMIUnknown(bool fIsMarshalled); // 0x00000001801C9B50
	public virtual void SetCOMIUnknown(IntPtr i); // 0x00000001801CACA0
	public virtual IntPtr SupportsInterface(Guid iid); // 0x00000001801CAD20
	public static object GetStubData(RealProxy rp); // 0x00000001801C9E10
	public static void SetStubData(RealProxy rp, object stubData); // 0x00000001801CACF0
	public abstract IMessage Invoke(IMessage msg);
	internal static object PrivateInvoke(RealProxy rp, IMessage msg, out Exception exc, out object[] out_args); // 0x00000001801C9FE0
	internal virtual object InternalGetTransparentProxy(string className); // 0x00000001801C9FD0
	public virtual object GetTransparentProxy(); // 0x00000001801C9E30
	public IConstructionReturnMessage InitializeServerObject(IConstructionCallMessage ctorMsg); // 0x00000001801C9F70
	protected void AttachServer(MarshalByRefObject s); // 0x00000001800EAED0
	protected MarshalByRefObject DetachServer(); // 0x00000001801C9A10
	protected MarshalByRefObject GetUnwrappedServer(); // 0x00000001800EAEB0
	internal void SetTargetDomain(int domainId); // 0x00000001801CAD10
	internal object GetAppDomainTarget(); // 0x00000001801C9A20
	private static object[] ProcessResponse(IMethodReturnMessage mrm, MonoMethodMessage call); // 0x00000001801CA730
}

// Namespace: System.Runtime.Remoting.Proxies
internal class RemotingProxy : RealProxy, IRemotingTypeInfo // TypeDefIndex: 1089
{
	// Fields
	private static MethodInfo _cache_GetTypeMethod; // 0x00
	private static MethodInfo _cache_GetHashCodeMethod; // 0x50
	private IMessageSink _sink; // 0x60
	private bool _hasEnvoySink; // 0x20
	private ConstructionCall _ctorCall; // 0x20

	// Properties
	public string TypeName { get; set; } // 0x00000001801CF180 0x00000001801CF290

	// Constructors
	internal RemotingProxy(Type type, ClientIdentity identity); // 0x00000001801CF060
	internal RemotingProxy(Type type, string activationUrl, object[] activationAttributes); // 0x00000001801CF0F0
	private static RemotingProxy(); // 0x00000001801CEFA0

	// Methods
	public override IMessage Invoke(IMessage request); // 0x00000001801CEB80
	internal void AttachIdentity(Identity identity); // 0x00000001801CE4B0
	internal IMessage ActivateRemoteObject(IMethodMessage request); // 0x00000001801CE3E0
	public bool CanCastTo(Type fromType, object o); // 0x00000001801CE800
	protected override void Finalize(); // 0x00000001801CEA70
}

// Namespace: System.Runtime.Remoting.Services
public sealed class EnterpriseServicesHelper // TypeDefIndex: 1090
{
	// Constructors
	public EnterpriseServicesHelper(); // 0x00000001800E2000

	// Methods
	public static IConstructionReturnMessage CreateConstructionReturnMessage(IConstructionCallMessage ctorMsg, MarshalByRefObject retObj); // 0x00000001801C5E10
	public static void SwitchWrappers(RealProxy oldcp, RealProxy newcp); // 0x00000001801C5E80
	public static object WrapIUnknownWithComObject(IntPtr punk); // 0x00000001801C5ED0
}

// Namespace: System.Runtime.Remoting.Services
public interface ITrackingHandler // TypeDefIndex: 1091
{
	// Methods
	void DisconnectedObject(object obj);
	void MarshaledObject(object obj, ObjRef or);
	void UnmarshaledObject(object obj, ObjRef or);
}

// Namespace: System.Runtime.Remoting.Services
public class TrackingServices // TypeDefIndex: 1092
{
	// Fields
	private static ArrayList _handlers; // 0x00

	// Properties
	public static ITrackingHandler[] RegisteredHandlers { get; } // 0x00000001801DF4A0 

	// Constructors
	public TrackingServices(); // 0x00000001800E2000
	private static TrackingServices(); // 0x00000001801DF440

	// Methods
	public static void RegisterTrackingHandler(ITrackingHandler handler); // 0x00000001801DF000
	public static void UnregisterTrackingHandler(ITrackingHandler handler); // 0x00000001801DF220
	internal static void NotifyMarshaledObject(object obj, ObjRef or); // 0x00000001801DE960
	internal static void NotifyUnmarshaledObject(object obj, ObjRef or); // 0x00000001801DECB0
	internal static void NotifyDisconnectedObject(object obj); // 0x00000001801DE630
}

// Namespace: System.Runtime.Remoting
public class ActivatedClientTypeEntry : TypeEntry // TypeDefIndex: 1093
{
	// Fields
	private string applicationUrl; // 0x20
	private Type obj_type; // 0x20

	// Properties
	public string ApplicationUrl { get; } // 0x00000001800EAEB0 
	public IContextAttribute[] ContextAttributes { get; set; } // 0x00000001800EA8C0 0x00000001800EA7B0
	public Type ObjectType { get; } // 0x000000018013BF80 

	// Constructors
	public ActivatedClientTypeEntry(Type type, string appUrl); // 0x00000001801E04C0
	public ActivatedClientTypeEntry(string typeName, string assemblyName, string appUrl); // 0x00000001801E0550

	// Methods
	public override string ToString(); // 0x00000001801E0440
}

// Namespace: System.Runtime.Remoting
public class ActivatedServiceTypeEntry : TypeEntry // TypeDefIndex: 1094
{
	// Fields
	private Type obj_type; // 0x20

	// Properties
	public IContextAttribute[] ContextAttributes { get; set; } // 0x00000001800EA8C0 0x00000001800EA7B0
	public Type ObjectType { get; } // 0x00000001800EAEB0 

	// Constructors
	public ActivatedServiceTypeEntry(Type type); // 0x00000001801E07F0
	public ActivatedServiceTypeEntry(string typeName, string assemblyName); // 0x00000001801E06E0

	// Methods
	public override string ToString(); // 0x00000001801E0670
}

// Namespace: System.Runtime.Remoting
public enum CustomErrorsModes // TypeDefIndex: 1095
{
	On = 0,
	Off = 1,
	RemoteOnly = 2
}

// Namespace: System.Runtime.Remoting
[Serializable]
internal class EnvoyInfo : IEnvoyInfo // TypeDefIndex: 1096
{
	// Fields
	private IMessageSink envoySinks; // 0x10

	// Properties
	public IMessageSink EnvoySinks { get; set; } // 0x00000001800E20D0 0x0000000180114C30

	// Constructors
	public EnvoyInfo(IMessageSink sinks); // 0x000000018015C840

}

// Namespace: System.Runtime.Remoting
public interface IChannelInfo // TypeDefIndex: 1097
{
	// Properties
	object[] ChannelData { get; set; }

}

// Namespace: System.Runtime.Remoting
public interface IEnvoyInfo // TypeDefIndex: 1098
{
	// Properties
	IMessageSink EnvoySinks { get; set; }

}

// Namespace: System.Runtime.Remoting
public interface IObjectHandle // TypeDefIndex: 1099
{
	// Methods
	object Unwrap();
}

// Namespace: System.Runtime.Remoting
public interface IRemotingTypeInfo // TypeDefIndex: 1100
{
	// Properties
	string TypeName { get; set; }

	// Methods
	bool CanCastTo(Type fromType, object o);
}

// Namespace: System.Runtime.Remoting
internal abstract class Identity // TypeDefIndex: 1101
{
	// Fields
	protected string _objectUri; // 0x10
	protected IMessageSink _channelSink; // 0x20
	protected IMessageSink _envoySink; // 0x30
	private DynamicPropertyCollection _clientDynamicProperties; // 0x40
	private DynamicPropertyCollection _serverDynamicProperties; // 0x10
	protected ObjRef _objRef; // 0x20
	private bool _disposed; // 0x30

	// Properties
	public bool IsFromThisAppDomain { get; } // 0x0000000180221940 
	public IMessageSink ChannelSink { get; set; } // 0x00000001800EAEC0 0x00000001800EAEE0
	public IMessageSink EnvoySink { get; } // 0x00000001800EAEB0 
	public string ObjectUri { get; set; } // 0x00000001800E20D0 0x0000000180114C30
	public bool IsConnected { get; } // 0x0000000180158590 
	public bool Disposed { get; set; } // 0x0000000180221890 0x00000001802219F0
	public DynamicPropertyCollection ClientDynamicProperties { get; } // 0x00000001802217F0 
	public DynamicPropertyCollection ServerDynamicProperties { get; } // 0x0000000180221950 
	public bool HasClientDynamicSinks { get; } // 0x00000001802218A0 
	public bool HasServerDynamicSinks { get; } // 0x00000001802218F0 

	// Constructors
	public Identity(string objectUri); // 0x000000018015C840

	// Methods
	public abstract ObjRef CreateObjRef(Type requestedType);
	public void NotifyClientDynamicSinks(bool start, IMessage req_msg, bool client_site, bool async); // 0x00000001802216D0
	public void NotifyServerDynamicSinks(bool start, IMessage req_msg, bool client_site, bool async); // 0x0000000180221760
}

// Namespace: System.Runtime.Remoting
internal class ClientIdentity : Identity // TypeDefIndex: 1102
{
	// Fields
	private WeakReference _proxyReference; // 0x48

	// Properties
	public MarshalByRefObject ClientProxy { get; set; } // 0x00000001801E8120 0x00000001801E81F0
	public string TargetUri { get; } // 0x00000001801E81C0 

	// Constructors
	public ClientIdentity(string objectUri, ObjRef objRef); // 0x00000001801E8070

	// Methods
	public override ObjRef CreateObjRef(Type requestedType); // 0x0000000180119440
}

// Namespace: System.Runtime.Remoting
public class InternalRemotingServices // TypeDefIndex: 1103
{
	// Fields
	private static Hashtable _soapAttributes; // 0x00

	// Constructors
	public InternalRemotingServices(); // 0x00000001800E2000
	private static InternalRemotingServices(); // 0x0000000180222100

	// Methods
	public static void DebugOutChnl(string s); // 0x0000000180221A00
	public static SoapAttribute GetCachedSoapAttribute(object reflectionObject); // 0x0000000180221A50
	public static void RemotingAssert(bool condition, string message); // 0x0000000180221F80
	public static void RemotingTrace(object[] messages); // 0x0000000180221FD0
	public static void SetServerIdentity(MethodCall m, object srvID); // 0x0000000180222020
}

// Namespace: System.Runtime.Remoting
[Serializable]
public class ObjRef : ISerializable, IObjectReference // TypeDefIndex: 1104
{
	// Fields
	private IChannelInfo channel_info; // 0x10
	private string uri; // 0x20
	private IRemotingTypeInfo typeInfo; // 0x30
	private IEnvoyInfo envoyInfo; // 0x00
	private int flags; // 0x08
	private Type _serverType; // 0x00
	private static int MarshalledObjectRef; // 0x10
	private static int WellKnowObjectRef; // 0x19
	private static Dictionary`2<string, int> <>f__switch$map26; // 0x28

	// Properties
	internal bool IsReferenceToWellKnow { get; } // 0x00000001801C9050 
	public virtual IChannelInfo ChannelInfo { get; set; } // 0x00000001800E20D0 0x0000000180114C30
	public virtual IEnvoyInfo EnvoyInfo { get; set; } // 0x000000018013BF80 0x000000018015B760
	public virtual IRemotingTypeInfo TypeInfo { get; set; } // 0x00000001800EAEB0 0x00000001800EAED0
	public virtual string URI { get; set; } // 0x00000001800EAEC0 0x00000001800EAEE0
	internal Type ServerType { get; } // 0x00000001801C90C0 

	// Constructors
	public ObjRef(); // 0x00000001801C8AA0
	internal ObjRef(string typeName, string uri, IChannelInfo cinfo); // 0x00000001801C8DE0
	internal ObjRef(ObjRef o, bool unmarshalAsProxy); // 0x00000001801C8EB0
	public ObjRef(MarshalByRefObject o, Type requestedType); // 0x00000001801C8B00
	internal ObjRef(Type type, string url, object remoteChannelData); // 0x00000001801C8F70
	protected ObjRef(SerializationInfo info, StreamingContext context); // 0x00000001801C8610
	private static ObjRef(); // 0x00000001801C85C0

	// Methods
	internal bool IsPossibleToCAD(); // 0x000000018011A0F0
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00000001801C8130
	public virtual object GetRealObject(StreamingContext context); // 0x00000001801C8280
	public bool IsFromThisAppDomain(); // 0x00000001801C8370
	public bool IsFromThisProcess(); // 0x00000001801C83E0
	internal void UpdateChannelInfo(); // 0x00000001801C8570
}

// Namespace: System.Runtime.Remoting
public class ObjectHandle : MarshalByRefObject, IObjectHandle // TypeDefIndex: 1105
{
	// Fields
	private object _wrapped; // 0x18

	// Constructors
	public ObjectHandle(object o); // 0x00000001801C9180

	// Methods
	public override object InitializeLifetimeService(); // 0x00000001801C9170
	public object Unwrap(); // 0x00000001800EAEC0
}

// Namespace: System.Runtime.Remoting
public static class RemotingConfiguration // TypeDefIndex: 1106
{
	// Fields
	private static string applicationID; // 0x00
	private static string applicationName; // 0x10
	private static string processGuid; // 0x19
	private static bool defaultConfigRead; // 0x28
	private static bool defaultDelayedConfigRead; // 0x38
	private static string _errorMode; // 0x48
	private static Hashtable wellKnownClientEntries; // 0x58
	private static Hashtable activatedClientEntries; // 0x10
	private static Hashtable wellKnownServiceEntries; // 0x20
	private static Hashtable activatedServiceEntries; // 0x30
	private static Hashtable channelTemplates; // 0x40
	private static Hashtable clientProviderTemplates; // 0x00
	private static Hashtable serverProviderTemplates; // 0x10

	// Properties
	public static string ApplicationId { get; } // 0x00000001801CE0F0 
	public static string ApplicationName { get; set; } // 0x00000001801CE1A0 0x00000001801CE330
	public static CustomErrorsModes CustomErrorsMode { get; set; } // 0x00000001801CE200 0x00000001801CE390
	public static string ProcessId { get; } // 0x00000001801CE250 

	// Constructors
	private static RemotingConfiguration(); // 0x00000001801CDF40

	// Methods
	public static void Configure(string filename, bool ensureSecurity); // 0x00000001801CAF40
	public static void Configure(string filename); // 0x00000001801CB0E0
	private static void ReadConfigFile(string filename); // 0x00000001801CC170
	internal static void LoadDefaultDelayedChannels(); // 0x00000001801CBEE0
	public static ActivatedClientTypeEntry[] GetRegisteredActivatedClientTypes(); // 0x00000001801CB270
	public static ActivatedServiceTypeEntry[] GetRegisteredActivatedServiceTypes(); // 0x00000001801CB420
	public static WellKnownClientTypeEntry[] GetRegisteredWellKnownClientTypes(); // 0x00000001801CB5D0
	public static WellKnownServiceTypeEntry[] GetRegisteredWellKnownServiceTypes(); // 0x00000001801CB780
	public static bool IsActivationAllowed(Type svrType); // 0x00000001801CB930
	public static ActivatedClientTypeEntry IsRemotelyActivatedClientType(Type svrType); // 0x00000001801CBB10
	public static ActivatedClientTypeEntry IsRemotelyActivatedClientType(string typeName, string assemblyName); // 0x00000001801CBA80
	public static WellKnownClientTypeEntry IsWellKnownClientType(Type svrType); // 0x00000001801CBCB0
	public static WellKnownClientTypeEntry IsWellKnownClientType(string typeName, string assemblyName); // 0x00000001801CBE50
	public static void RegisterActivatedClientType(ActivatedClientTypeEntry entry); // 0x00000001801CC430
	public static void RegisterActivatedClientType(Type type, string appUrl); // 0x00000001801CC330
	public static void RegisterActivatedServiceType(ActivatedServiceTypeEntry entry); // 0x00000001801CC770
	public static void RegisterActivatedServiceType(Type type); // 0x00000001801CC6F0
	public static void RegisterWellKnownClientType(Type type, string objectUrl); // 0x00000001801CD990
	public static void RegisterWellKnownClientType(WellKnownClientTypeEntry entry); // 0x00000001801CD6D0
	public static void RegisterWellKnownServiceType(Type type, string objectUri, WellKnownObjectMode mode); // 0x00000001801CDAF0
	public static void RegisterWellKnownServiceType(WellKnownServiceTypeEntry entry); // 0x00000001801CDBF0
	internal static void RegisterChannelTemplate(ChannelData channel); // 0x00000001801CC8C0
	internal static void RegisterClientProviderTemplate(ProviderData prov); // 0x00000001801CD170
	internal static void RegisterServerProviderTemplate(ProviderData prov); // 0x00000001801CD200
	internal static void RegisterChannels(ArrayList channels, bool onlyDelayed); // 0x00000001801CC950
	internal static void RegisterTypes(ArrayList types); // 0x00000001801CD290
	public static bool CustomErrorsEnabled(bool isLocalRequest); // 0x00000001801CB140
	internal static void SetCustomErrorsMode(string mode); // 0x00000001801CDD90
}

// Namespace: System.Runtime.Remoting
internal class ConfigHandler : IContentHandler // TypeDefIndex: 1107
{
	// Fields
	private ArrayList typeEntries; // 0x10
	private ArrayList channelInstances; // 0x20
	private ChannelData currentChannel; // 0x30
	private Stack currentProviderData; // 0x40
	private string currentClientUrl; // 0x00
	private string appName; // 0x10
	private string currentXmlPath; // 0x20
	private bool onlyDelayedChannels; // 0x30
	private static Dictionary`2<string, int> <>f__switch$map27; // 0x40
	private static Dictionary`2<string, int> <>f__switch$map28; // 0x10

	// Constructors
	public ConfigHandler(bool onlyDelayedChannels); // 0x000000018021AA90

	// Methods
	private void ValidatePath(string element, string[] paths); // 0x000000018021A980
	private bool CheckPath(string path); // 0x0000000180217740
	public void OnStartParsing(SmallXmlParser parser); // 0x00000001800EA7B0
	public void OnProcessingInstruction(string name, string text); // 0x00000001800EA7B0
	public void OnIgnorableWhitespace(string s); // 0x00000001800EA7B0
	public void OnStartElement(string name, IAttrList attrs); // 0x0000000180217C40
	public void ParseElement(string name, IAttrList attrs); // 0x0000000180217DA0
	public void OnEndElement(string name); // 0x0000000180217A80
	private void ReadCustomProviderData(string name, IAttrList attrs); // 0x0000000180219850
	private void ReadLifetine(IAttrList attrs); // 0x0000000180219E00
	private TimeSpan ParseTime(string s); // 0x0000000180218E80
	private void ReadChannel(IAttrList attrs, bool isTemplate); // 0x0000000180219290
	private ProviderData ReadProvider(string name, IAttrList attrs, bool isTemplate); // 0x000000018021A3B0
	private void ReadClientActivated(IAttrList attrs); // 0x0000000180219610
	private void ReadServiceActivated(IAttrList attrs); // 0x000000018021A6E0
	private void ReadClientWellKnown(IAttrList attrs); // 0x0000000180219760
	private void ReadServiceWellKnown(IAttrList attrs); // 0x000000018021A7A0
	private void ReadInteropXml(IAttrList attrs, bool isElement); // 0x0000000180219BF0
	private void ReadPreload(IAttrList attrs); // 0x000000018021A200
	private string GetNotNull(IAttrList attrs, string name); // 0x0000000180217970
	private string ExtractAssembly(string type); // 0x0000000180217870
	public void OnChars(string ch); // 0x00000001800EA7B0
	public void OnEndParsing(SmallXmlParser parser); // 0x0000000180217B10
}

// Namespace: System.Runtime.Remoting
internal class ChannelData // TypeDefIndex: 1108
{
	// Fields
	internal string Ref; // 0x10
	internal string Type; // 0x20
	internal string Id; // 0x30
	internal string DelayLoadAsClientChannel; // 0x40
	private ArrayList _serverProviders; // 0x10
	private ArrayList _clientProviders; // 0x20
	private Hashtable _customProperties; // 0x30

	// Properties
	internal ArrayList ServerProviders { get; } // 0x00000001801E3D20 
	public ArrayList ClientProviders { get; } // 0x00000001801E3C60 
	public Hashtable CustomProperties { get; } // 0x00000001801E3CC0 

	// Constructors
	public ChannelData(); // 0x00000001801E3BC0

	// Methods
	public void CopyFrom(ChannelData other); // 0x00000001801E33B0
}

// Namespace: System.Runtime.Remoting
internal class ProviderData // TypeDefIndex: 1109
{
	// Fields
	internal string Ref; // 0x10
	internal string Type; // 0x20
	internal string Id; // 0x30
	internal Hashtable CustomProperties; // 0x00
	internal IList CustomData; // 0x10

	// Constructors
	public ProviderData(); // 0x00000001801C9760

	// Methods
	public void CopyFrom(ProviderData other); // 0x00000001801C91B0
}

// Namespace: System.Runtime.Remoting
internal class FormatterData : ProviderData // TypeDefIndex: 1110
{
	// Constructors
	public FormatterData(); // 0x00000001802215B0

}

// Namespace: System.Runtime.Remoting
[Serializable]
public class RemotingException : SystemException // TypeDefIndex: 1111
{
	// Constructors
	public RemotingException(); // 0x00000001801919A0
	public RemotingException(string message); // 0x000000018010E1E0
	protected RemotingException(SerializationInfo info, StreamingContext context); // 0x000000018010E170
	public RemotingException(string message, Exception InnerException); // 0x000000018010E1D0

}

// Namespace: System.Runtime.Remoting
public sealed class RemotingServices // TypeDefIndex: 1112
{
	// Fields
	private static Hashtable uri_hash; // 0x00
	private static BinaryFormatter _serializationFormatter; // 0x10
	private static BinaryFormatter _deserializationFormatter; // 0x20
	internal static string app_id; // 0x28
	private static int next_id; // 0x10
	private static readonly BindingFlags methodBindings; // 0x48
	private static readonly MethodInfo FieldSetterMethod; // 0x58
	private static readonly MethodInfo FieldGetterMethod; // 0x68

	// Constructors
	private RemotingServices(); // 0x00000001800E2000
	private static RemotingServices(); // 0x00000001801D4770

	// Methods
	internal static object InternalExecute(MethodBase method, object obj, object[] parameters, out object[] out_args); // 0x00000001801D2A80
	internal static MethodBase GetVirtualMethod(Type type, MethodBase method); // 0x00000001801D23F0
	public static bool IsTransparentProxy(object proxy); // 0x0000000180113770
	internal static IMethodReturnMessage InternalExecuteMessage(MarshalByRefObject target, IMethodCallMessage reqMsg); // 0x00000001801D2400
	public static IMethodReturnMessage ExecuteMessage(MarshalByRefObject target, IMethodCallMessage reqMsg); // 0x00000001801D0200
	public static object Connect(Type classToProxy, string url); // 0x00000001801CF2E0
	public static object Connect(Type classToProxy, string url, object data); // 0x00000001801CF380
	public static bool Disconnect(MarshalByRefObject obj); // 0x00000001801CFDF0
	public static Type GetServerTypeForUri(string URI); // 0x00000001801D2300
	public static string GetObjectUri(MarshalByRefObject obj); // 0x00000001801D1910
	public static object Unmarshal(ObjRef objectRef); // 0x00000001801D4220
	public static object Unmarshal(ObjRef objectRef, bool fRefine); // 0x00000001801D4280
	public static ObjRef Marshal(MarshalByRefObject Obj); // 0x00000001801D3530
	public static ObjRef Marshal(MarshalByRefObject Obj, string URI); // 0x00000001801D3590
	public static ObjRef Marshal(MarshalByRefObject Obj, string ObjURI, Type RequestedType); // 0x00000001801D3130
	private static string NewUri(); // 0x00000001801D3600
	public static RealProxy GetRealProxy(object proxy); // 0x00000001801D2050
	public static MethodBase GetMethodBaseFromMethodMessage(IMethodMessage msg); // 0x00000001801D1140
	internal static MethodBase GetMethodBaseFromName(Type type, string methodName, Type[] signature); // 0x00000001801D1320
	private static MethodBase FindInterfaceMethod(Type type, string methodName, Type[] signature); // 0x00000001801D0310
	public static void GetObjectData(object obj, SerializationInfo info, StreamingContext context); // 0x00000001801D16F0
	public static ObjRef GetObjRefForProxy(MarshalByRefObject obj); // 0x00000001801D1670
	public static object GetLifetimeService(MarshalByRefObject obj); // 0x00000001801D0DE0
	public static IMessageSink GetEnvoyChainForProxy(MarshalByRefObject obj); // 0x00000001801D08C0
	public static void LogRemotingStage(int stage); // 0x00000001801D30E0
	public static string GetSessionIdForMethodMessage(IMethodMessage msg); // 0x00000001801D23A0
	public static bool IsMethodOverloaded(IMethodMessage msg); // 0x00000001801D2CD0
	public static bool IsObjectOutOfAppDomain(object tp); // 0x00000001801D2DE0
	public static bool IsObjectOutOfContext(object tp); // 0x00000001801D2F00
	public static bool IsOneWay(MethodBase method); // 0x00000001801D3050
	internal static bool IsAsyncMessage(IMessage msg); // 0x00000001801D2A90
	public static void SetObjectUriForMarshal(MarshalByRefObject obj, string uri); // 0x00000001801D4070
	internal static object CreateClientProxy(ActivatedClientTypeEntry entry, object[] activationAttributes); // 0x00000001801CF850
	internal static object CreateClientProxy(Type objectType, string url, object[] activationAttributes); // 0x00000001801CF6F0
	internal static object CreateClientProxy(WellKnownClientTypeEntry entry); // 0x00000001801CF9B0
	internal static object CreateClientProxyForContextBound(Type type, object[] activationAttributes); // 0x00000001801CF560
	internal static Identity GetIdentityForUri(string uri); // 0x00000001801D0A10
	private static string RemoveAppNameFromUri(string uri); // 0x00000001801D3B40
	internal static Identity GetObjectIdentity(MarshalByRefObject obj); // 0x00000001801D1870
	internal static ClientIdentity GetOrCreateClientIdentity(ObjRef objRef, Type proxyType, out object clientProxy); // 0x00000001801D1A40
	private static IMessageSink GetClientChannelSinkChain(string url, object channelData, out string objectUri); // 0x00000001801D04A0
	internal static ClientActivatedIdentity CreateContextBoundObjectIdentity(Type objectType); // 0x00000001801CFAA0
	internal static ClientActivatedIdentity CreateClientActivatedServerIdentity(MarshalByRefObject realObject, Type objectType, string objectUri); // 0x00000001801CF430
	internal static ServerIdentity CreateWellKnownServerIdentity(Type objectType, string objectUri, WellKnownObjectMode mode); // 0x00000001801CFB80
	private static void RegisterServerIdentity(ServerIdentity identity); // 0x00000001801D3910
	internal static object GetProxyForRemoteObject(ObjRef objref, Type classToProxy); // 0x00000001801D1F40
	internal static object GetRemoteObject(ObjRef objRef, Type proxyType); // 0x00000001801D2170
	internal static object GetServerObject(string uri); // 0x00000001801D21F0
	internal static byte[] SerializeCallData(object obj); // 0x00000001801D3C70
	internal static object DeserializeCallData(byte[] array); // 0x00000001801CFC80
	internal static byte[] SerializeExceptionData(Exception ex); // 0x00000001801D3D90
	internal static object GetDomainProxy(AppDomain domain); // 0x00000001801D05E0
	private static void RegisterInternalChannels(); // 0x00000001801D38C0
	internal static void DisposeIdentity(Identity ident); // 0x00000001801D0000
	internal static Identity GetMessageTargetIdentity(IMessage msg); // 0x00000001801D0DF0
	internal static void SetMessageTargetIdentity(IMessage msg, Identity ident); // 0x00000001801D3FB0
	internal static bool UpdateOutArgObject(ParameterInfo pi, object local, object remote); // 0x00000001801D45B0
	private static string GetNormalizedUri(string uri); // 0x00000001801D1600
}

// Namespace: 
[Serializable]
private class CACD // TypeDefIndex: 1113
{
	// Fields
	public object d; // 0x10
	public object c; // 0x48

	// Constructors
	public CACD(); // 0x00000001800E2000

}

// Namespace: System.Runtime.Remoting
[Serializable]
public class RemotingTimeoutException : RemotingException // TypeDefIndex: 1114
{
	// Constructors
	public RemotingTimeoutException(); // 0x00000001801919A0
	public RemotingTimeoutException(string message); // 0x000000018010E1E0
	public RemotingTimeoutException(string message, Exception InnerException); // 0x000000018010E1D0
	internal RemotingTimeoutException(SerializationInfo info, StreamingContext context); // 0x000000018010E170

}

// Namespace: System.Runtime.Remoting
[Serializable]
public class ServerException : SystemException // TypeDefIndex: 1115
{
	// Constructors
	public ServerException(); // 0x00000001801919A0
	public ServerException(string message); // 0x000000018010E1E0
	public ServerException(string message, Exception InnerException); // 0x000000018010E1D0
	internal ServerException(SerializationInfo info, StreamingContext context); // 0x000000018010E170

}

// Namespace: System.Runtime.Remoting
internal abstract class ServerIdentity : Identity // TypeDefIndex: 1116
{
	// Fields
	protected Type _objectType; // 0x48
	protected MarshalByRefObject _serverObject; // 0x58
	protected IMessageSink _serverSink; // 0x68
	protected Context _context; // 0x10
	protected Lease _lease; // 0x00

	// Properties
	public Type ObjectType { get; } // 0x0000000180113E60 
	public Lease Lease { get; } // 0x00000001801136C0 
	public Context Context { get; set; } // 0x0000000180114BE0 0x000000018017D3C0

	// Constructors
	public ServerIdentity(string objectUri, Context context, Type objectType); // 0x00000001801D4FF0

	// Methods
	public void StartTrackingLifetime(ILease lease); // 0x00000001801D4EC0
	public virtual void OnLifetimeExpired(); // 0x00000001801D4EB0
	public override ObjRef CreateObjRef(Type requestedType); // 0x00000001801D4C50
	public void AttachServerObject(MarshalByRefObject serverObject, Context context); // 0x00000001801D4B40
	public abstract IMessage SyncObjectProcessMessage(IMessage msg);
	public abstract IMessageCtrl AsyncObjectProcessMessage(IMessage msg, IMessageSink replySink);
	protected void DisposeServerObject(); // 0x00000001801D4E30
}

// Namespace: System.Runtime.Remoting
internal class ClientActivatedIdentity : ServerIdentity // TypeDefIndex: 1117
{
	// Fields
	private MarshalByRefObject _targetThis; // 0x70

	// Constructors
	public ClientActivatedIdentity(string objectUri, Type objectType); // 0x00000001801E7CB0

	// Methods
	public MarshalByRefObject GetServerObject(); // 0x00000001801513A0
	public MarshalByRefObject GetClientProxy(); // 0x000000018017D300
	public void SetClientProxy(MarshalByRefObject obj); // 0x000000018017D3A0
	public override void OnLifetimeExpired(); // 0x00000001801E7BC0
	public override IMessage SyncObjectProcessMessage(IMessage msg); // 0x00000001801E7C20
	public override IMessageCtrl AsyncObjectProcessMessage(IMessage msg, IMessageSink replySink); // 0x00000001801E7AB0
}

// Namespace: System.Runtime.Remoting
internal class SingletonIdentity : ServerIdentity // TypeDefIndex: 1118
{
	// Constructors
	public SingletonIdentity(string objectUri, Context context, Type objectType); // 0x00000001801D4FF0

	// Methods
	public MarshalByRefObject GetServerObject(); // 0x00000001801D5640
	public override IMessage SyncObjectProcessMessage(IMessage msg); // 0x00000001801D5810
	public override IMessageCtrl AsyncObjectProcessMessage(IMessage msg, IMessageSink replySink); // 0x00000001801D55A0
}

// Namespace: System.Runtime.Remoting
internal class SingleCallIdentity : ServerIdentity // TypeDefIndex: 1119
{
	// Constructors
	public SingleCallIdentity(string objectUri, Context context, Type objectType); // 0x00000001801D4FF0

	// Methods
	public override IMessage SyncObjectProcessMessage(IMessage msg); // 0x00000001801D5440
	public override IMessageCtrl AsyncObjectProcessMessage(IMessage msg, IMessageSink replySink); // 0x00000001801D52D0
}

// Namespace: System.Runtime.Remoting
internal class DisposerReplySink : IMessageSink // TypeDefIndex: 1120
{
	// Fields
	private IMessageSink _next; // 0x10
	private IDisposable _disposable; // 0x00

	// Properties
	public IMessageSink NextSink { get; } // 0x00000001800E20D0 

	// Constructors
	public DisposerReplySink(IMessageSink next, IDisposable disposable); // 0x000000018014B260

	// Methods
	public IMessage SyncProcessMessage(IMessage msg); // 0x00000001802209A0
	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink); // 0x0000000180220950
}

// Namespace: System.Runtime.Remoting
public class SoapServices // TypeDefIndex: 1121
{
	// Fields
	private static Hashtable _xmlTypes; // 0x00
	private static Hashtable _xmlElements; // 0x10
	private static Hashtable _soapActions; // 0x20
	private static Hashtable _soapActionsMethods; // 0x10
	private static Hashtable _typeInfos; // 0x10

	// Properties
	public static string XmlNsForClrType { get; } // 0x00000001801DC570 
	public static string XmlNsForClrTypeWithAssembly { get; } // 0x00000001801DC4E0 
	public static string XmlNsForClrTypeWithNs { get; } // 0x00000001801DC540 
	public static string XmlNsForClrTypeWithNsAndAssembly { get; } // 0x00000001801DC510 

	// Constructors
	private SoapServices(); // 0x00000001800E2000
	private static SoapServices(); // 0x00000001801DC3E0

	// Methods
	public static string CodeXmlNamespaceForClrTypeNamespace(string typeNamespace, string assemblyName); // 0x00000001801D9BB0
	public static bool DecodeXmlNamespaceForClrTypeNamespace(string inNamespace, out string typeNamespace, out string assemblyName); // 0x00000001801D9E90
	public static void GetInteropFieldTypeAndNameFromXmlAttribute(Type containingType, string xmlAttribute, string xmlNamespace, out Type type, out string name); // 0x00000001801DA550
	public static void GetInteropFieldTypeAndNameFromXmlElement(Type containingType, string xmlElement, string xmlNamespace, out Type type, out string name); // 0x00000001801DA690
	private static void GetInteropFieldInfo(Hashtable fields, string xmlName, string xmlNamespace, out Type type, out string name); // 0x00000001801DA420
	private static string GetNameKey(string name, string namspace); // 0x00000001801DABF0
	public static Type GetInteropTypeFromXmlElement(string xmlElement, string xmlNamespace); // 0x00000001801DA7D0
	public static Type GetInteropTypeFromXmlType(string xmlType, string xmlTypeNamespace); // 0x00000001801DA9E0
	private static string GetAssemblyName(MethodBase mb); // 0x00000001801DA2C0
	public static string GetSoapActionFromMethodBase(MethodBase mb); // 0x00000001801DAC70
	public static bool GetTypeAndMethodNameFromSoapAction(string soapAction, out string typeName, out string methodName); // 0x00000001801DACD0
	public static bool GetXmlElementForInteropType(Type type, out string xmlElement, out string xmlNamespace); // 0x00000001801DB0A0
	public static string GetXmlNamespaceForMethodCall(MethodBase mb); // 0x00000001801DB170
	public static string GetXmlNamespaceForMethodResponse(MethodBase mb); // 0x00000001801DB220
	public static bool GetXmlTypeForInteropType(Type type, out string xmlType, out string xmlTypeNamespace); // 0x00000001801DB2D0
	public static bool IsClrTypeNamespace(string namespaceString); // 0x00000001801DB630
	public static bool IsSoapActionValidForMethodBase(string soapAction, MethodBase mb); // 0x00000001801DB6C0
	public static void PreLoad(Assembly assembly); // 0x00000001801DBDA0
	public static void PreLoad(Type type); // 0x00000001801DB800
	public static void RegisterInteropXmlElement(string xmlElement, string xmlNamespace, Type type); // 0x00000001801DBE70
	public static void RegisterInteropXmlType(string xmlType, string xmlTypeNamespace, Type type); // 0x00000001801DC020
	public static void RegisterSoapActionForMethodBase(MethodBase mb); // 0x00000001801DC380
	private static string InternalGetSoapAction(MethodBase mb); // 0x00000001801DB3A0
	public static void RegisterSoapActionForMethodBase(MethodBase mb, string soapAction); // 0x00000001801DC1D0
	private static string EncodeNs(string ns); // 0x00000001801DA230
	private static string DecodeNs(string ns); // 0x00000001801D9E00
}

// Namespace: 
private class TypeInfo // TypeDefIndex: 1122
{
	// Fields
	public Hashtable Attributes; // 0x10
	public Hashtable Elements; // 0x10

	// Constructors
	public TypeInfo(); // 0x00000001800E2000

}

// Namespace: System.Runtime.Remoting
public class TypeEntry // TypeDefIndex: 1123
{
	// Fields
	private string assembly_name; // 0x10
	private string type_name; // 0x10

	// Properties
	public string AssemblyName { get; set; } // 0x00000001800E20D0 0x0000000180114C30
	public string TypeName { get; set; } // 0x00000001800EAEC0 0x00000001800EAEE0

	// Constructors
	protected TypeEntry(); // 0x00000001800E2000

}

// Namespace: System.Runtime.Remoting
[Serializable]
internal class TypeInfo : IRemotingTypeInfo // TypeDefIndex: 1124
{
	// Fields
	private string serverType; // 0x10
	private string[] serverHierarchy; // 0x20
	private string[] interfacesImplemented; // 0x20

	// Properties
	public string TypeName { get; set; } // 0x00000001800E20D0 0x0000000180114C30

	// Constructors
	public TypeInfo(Type type); // 0x00000001801DF9C0

	// Methods
	public bool CanCastTo(Type fromType, object o); // 0x00000001801DF6F0
}

// Namespace: System.Runtime.Remoting
public class WellKnownClientTypeEntry : TypeEntry // TypeDefIndex: 1125
{
	// Fields
	private Type obj_type; // 0x20
	private string obj_url; // 0x30
	private string app_url; // 0x10

	// Properties
	public string ApplicationUrl { get; set; } // 0x00000001801146E0 0x0000000180114BF0
	public Type ObjectType { get; } // 0x00000001800EAEB0 
	public string ObjectUrl { get; } // 0x000000018013BF80 

	// Constructors
	public WellKnownClientTypeEntry(Type type, string objectUrl); // 0x00000001801DFFA0
	public WellKnownClientTypeEntry(string typeName, string assemblyName, string objectUrl); // 0x00000001801DFE80

	// Methods
	public override string ToString(); // 0x00000001801DFDC0
}

// Namespace: System.Runtime.Remoting
[Serializable]
public enum WellKnownObjectMode // TypeDefIndex: 1126
{
	Singleton = 1,
	SingleCall = 2
}

// Namespace: System.Runtime.Remoting
public class WellKnownServiceTypeEntry : TypeEntry // TypeDefIndex: 1127
{
	// Fields
	private Type obj_type; // 0x20
	private string obj_uri; // 0x30
	private WellKnownObjectMode obj_mode; // 0x00

	// Properties
	public IContextAttribute[] ContextAttributes { get; set; } // 0x00000001800EA8C0 0x00000001800EA7B0
	public WellKnownObjectMode Mode { get; } // 0x0000000180124660 
	public Type ObjectType { get; } // 0x00000001800EAEB0 
	public string ObjectUri { get; } // 0x000000018013BF80 

	// Constructors
	public WellKnownServiceTypeEntry(Type type, string objectUri, WellKnownObjectMode mode); // 0x00000001801E03A0
	public WellKnownServiceTypeEntry(string typeName, string assemblyName, string objectUri, WellKnownObjectMode mode); // 0x00000001801E0280

	// Methods
	public override string ToString(); // 0x00000001801E0030
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class BinaryCommon // TypeDefIndex: 1128
{
	// Fields
	public static byte[] BinaryHeader; // 0x00
	private static Type[] _typeCodesToType; // 0x10
	private static byte[] _typeCodeMap; // 0x10
	public static bool UseReflectionSerialization; // 0x00

	// Constructors
	public BinaryCommon(); // 0x00000001800E2000
	private static BinaryCommon(); // 0x00000001801C5090

	// Methods
	public static bool IsPrimitive(Type type); // 0x00000001801C4B80
	public static byte GetTypeCode(Type type); // 0x00000001801C49F0
	public static Type GetTypeFromCode(int code); // 0x00000001801C4AF0
	public static void CheckSerializable(Type type, ISurrogateSelector selector, StreamingContext context); // 0x00000001801C4870
	public static void SwapBytes(byte[] byteArray, int size, int dataSize); // 0x00000001801C4CC0
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal enum BinaryElement : byte // TypeDefIndex: 1129
{
	Header = 0,
	RefTypeObject = 1,
	UntypedRuntimeObject = 2,
	UntypedExternalObject = 3,
	RuntimeObject = 4,
	ExternalObject = 5,
	String = 6,
	GenericArray = 7,
	BoxedPrimitiveTypeValue = 8,
	ObjectReference = 9,
	NullValue = 10,
	End = 11,
	Assembly = 12,
	ArrayFiller8b = 13,
	ArrayFiller32b = 14,
	ArrayOfPrimitiveType = 15,
	ArrayOfObject = 16,
	ArrayOfString = 17,
	Method = 18,
	_Unknown4 = 19,
	_Unknown5 = 20,
	MethodCall = 21,
	MethodResponse = 22
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal enum TypeTag : byte // TypeDefIndex: 1130
{
	PrimitiveType = 0,
	String = 1,
	ObjectType = 2,
	RuntimeType = 3,
	GenericType = 4,
	ArrayOfObject = 5,
	ArrayOfString = 6,
	ArrayOfPrimitiveType = 7
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal enum ArrayStructure : byte // TypeDefIndex: 1131
{
	SingleDimensional = 0,
	Jagged = 1,
	MultiDimensional = 2
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal enum MethodFlags // TypeDefIndex: 1132
{
	NoArguments = 1,
	PrimitiveArguments = 2,
	ArgumentsInSimpleArray = 4,
	ArgumentsInMultiArray = 8,
	FormatMask = 15,
	ExcludeLogicalCallContext = 16,
	IncludesLogicalCallContext = 64,
	IncludesSignature = 128,
	GenericArguments = 32768,
	NeedsInfoArrayMask = 32972
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal enum ReturnTypeTag : byte // TypeDefIndex: 1133
{
	Null = 2,
	PrimitiveType = 8,
	ObjectType = 16,
	Exception = 32
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal enum BinaryTypeCode : byte // TypeDefIndex: 1134
{
	Boolean = 1,
	Byte = 2,
	Char = 3,
	Decimal = 5,
	Double = 6,
	Int16 = 7,
	Int32 = 8,
	Int64 = 9,
	SByte = 10,
	Single = 11,
	TimeSpan = 12,
	DateTime = 13,
	UInt16 = 14,
	UInt32 = 15,
	UInt64 = 16,
	Null = 17,
	String = 18
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
public sealed class BinaryFormatter : IRemotingFormatter, IFormatter // TypeDefIndex: 1135
{
	// Fields
	private FormatterAssemblyStyle assembly_format; // 0x10
	private SerializationBinder binder; // 0x20
	private StreamingContext context; // 0x38
	private ISurrogateSelector surrogate_selector; // 0x00
	private FormatterTypeStyle type_format; // 0x00
	private TypeFilterLevel filter_level; // 0x10
	private static ISurrogateSelector <DefaultSurrogateSelector>k__BackingField; // 0x28

	// Properties
	public static ISurrogateSelector DefaultSurrogateSelector { get; set; } // 0x0000000180143A90 0x0000000180143AF0
	public FormatterAssemblyStyle AssemblyFormat { get; set; } // 0x00000001800ECD10 0x0000000180143AD0
	public SerializationBinder Binder { get; set; } // 0x00000001800EAEC0 0x00000001800EAEE0
	public StreamingContext Context { get; set; } // 0x0000000180143A80 0x0000000180143AE0
	public ISurrogateSelector SurrogateSelector { get; set; } // 0x00000001801146E0 0x0000000180114BF0
	public FormatterTypeStyle TypeFormat { get; set; } // 0x0000000180114770 0x0000000180114C00
	public TypeFilterLevel FilterLevel { get; set; } // 0x0000000180114A80 0x0000000180114C10

	// Constructors
	public BinaryFormatter(); // 0x00000001801439C0
	public BinaryFormatter(ISurrogateSelector selector, StreamingContext context); // 0x0000000180143A30

	// Methods
	public object Deserialize(Stream serializationStream); // 0x0000000180143160
	public object Deserialize(Stream serializationStream, HeaderHandler handler); // 0x0000000180143150
	private object NoCheckDeserialize(Stream serializationStream, HeaderHandler handler); // 0x0000000180143340
	public object DeserializeMethodResponse(Stream serializationStream, HeaderHandler handler, IMethodCallMessage methodCallMessage); // 0x0000000180143140
	private object NoCheckDeserializeMethodResponse(Stream serializationStream, HeaderHandler handler, IMethodCallMessage methodCallMessage); // 0x0000000180143170
	public void Serialize(Stream serializationStream, object graph); // 0x0000000180143660
	public void Serialize(Stream serializationStream, object graph, Header[] headers); // 0x0000000180143680
	public object UnsafeDeserialize(Stream serializationStream, HeaderHandler handler); // 0x0000000180143150
	public object UnsafeDeserializeMethodResponse(Stream serializationStream, HeaderHandler handler, IMethodCallMessage methodCallMessage); // 0x0000000180143140
	private void WriteBinaryHeader(BinaryWriter writer, bool hasHeaders); // 0x0000000180143910
	private void ReadBinaryHeader(BinaryReader reader, out bool hasHeaders); // 0x00000001801435D0
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class CodeGenerator // TypeDefIndex: 1136
{
	// Fields
	private static object monitor; // 0x00
	private static ModuleBuilder _module; // 0x10

	// Constructors
	public CodeGenerator(); // 0x00000001800E2000
	private static CodeGenerator(); // 0x0000000180146FE0

	// Methods
	public static Type GenerateMetadataType(Type type, StreamingContext context); // 0x0000000180146740
	public static Type GenerateMetadataTypeInternal(Type type, StreamingContext context); // 0x0000000180144DF0
	public static void LoadFromPtr(ILGenerator ig, Type t); // 0x0000000180146870
	private static void EmitWriteTypeSpec(ILGenerator gen, Type type, string member); // 0x0000000180144520
	private static void EmitLoadTypeAssembly(ILGenerator gen, Type type, string member); // 0x0000000180143EC0
	private static void EmitWrite(ILGenerator gen, Type type); // 0x0000000180144A00
	public static void EmitWritePrimitiveValue(ILGenerator gen, Type type); // 0x0000000180144050
	public static Type EnumToUnderlying(Type t); // 0x0000000180144B70
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class MessageFormatter // TypeDefIndex: 1137
{
	// Constructors
	public MessageFormatter(); // 0x00000001800E2000

	// Methods
	public static void WriteMethodCall(BinaryWriter writer, object obj, Header[] headers, ISurrogateSelector surrogateSelector, StreamingContext context, FormatterAssemblyStyle assemblyFormat, FormatterTypeStyle typeFormat); // 0x000000018014A270
	public static void WriteMethodResponse(BinaryWriter writer, object obj, Header[] headers, ISurrogateSelector surrogateSelector, StreamingContext context, FormatterAssemblyStyle assemblyFormat, FormatterTypeStyle typeFormat); // 0x000000018014AA30
	public static object ReadMethodCall(BinaryReader reader, bool hasHeaders, HeaderHandler headerHandler, BinaryFormatter formatter); // 0x0000000180148F10
	public static object ReadMethodCall(BinaryElement elem, BinaryReader reader, bool hasHeaders, HeaderHandler headerHandler, BinaryFormatter formatter); // 0x0000000180148F80
	public static object ReadMethodResponse(BinaryReader reader, bool hasHeaders, HeaderHandler headerHandler, IMethodCallMessage methodCallMessage, BinaryFormatter formatter); // 0x000000018014A1F0
	public static object ReadMethodResponse(BinaryElement elem, BinaryReader reader, bool hasHeaders, HeaderHandler headerHandler, IMethodCallMessage methodCallMessage, BinaryFormatter formatter); // 0x00000001801499A0
	private static bool AllTypesArePrimitive(object[] objects); // 0x00000001801489A0
	public static bool IsMethodPrimitive(Type type); // 0x0000000180148E00
	private static object[] GetExtraProperties(IDictionary properties, string[] internalKeys); // 0x0000000180148A20
	private static bool IsInternalKey(string key, string[] internalKeys); // 0x0000000180148D30
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class ObjectReader // TypeDefIndex: 1138
{
	// Fields
	private ISurrogateSelector _surrogateSelector; // 0x10
	private StreamingContext _context; // 0x28
	private SerializationBinder _binder; // 0x38
	private TypeFilterLevel _filterLevel; // 0x48
	private ObjectManager _manager; // 0x58
	private Hashtable _registeredAssemblies; // 0x68
	private Hashtable _typeMetadataCache; // 0x10
	private object _lastObject; // 0x20
	private long _lastObjectID; // 0x30
	private long _rootObjectID; // 0x10
	private byte[] arrayBuffer; // 0x10
	private int ArrayBufferLength; // 0x20

	// Properties
	public object CurrentObject { get; } // 0x00000001801513A0 

	// Constructors
	public ObjectReader(BinaryFormatter formatter); // 0x0000000180151230

	// Methods
	public void ReadObjectGraph(BinaryReader reader, bool readHeaders, out object result, out Header[] headers); // 0x000000018014EB80
	public void ReadObjectGraph(BinaryElement elem, BinaryReader reader, bool readHeaders, out object result, out Header[] headers); // 0x000000018014E830
	private bool ReadNextObject(BinaryElement element, BinaryReader reader); // 0x000000018014E340
	public bool ReadNextObject(BinaryReader reader); // 0x000000018014E1F0
	private void ReadObject(BinaryElement element, BinaryReader reader, out long objectId, out object value, out SerializationInfo info); // 0x000000018014ECC0
	private void ReadAssembly(BinaryReader reader); // 0x000000018014DDF0
	private void ReadObjectInstance(BinaryReader reader, bool isRuntimeObject, bool hasTypeInfo, out long objectId, out object value, out SerializationInfo info); // 0x000000018014EC00
	private void ReadRefTypeObjectInstance(BinaryReader reader, out long objectId, out object value, out SerializationInfo info); // 0x000000018014F7C0
	private void ReadObjectContent(BinaryReader reader, TypeMetadata metadata, long objectId, out object objectInstance, out SerializationInfo info); // 0x000000018014E470
	private void RegisterObject(long objectId, object objectInstance, SerializationInfo info, long parentObjectId, MemberInfo parentObjectMemeber, int[] indices); // 0x0000000180150C60
	private void ReadStringIntance(BinaryReader reader, out long objectId, out object value); // 0x000000018014FAD0
	private void ReadGenericArray(BinaryReader reader, out long objectId, out object val); // 0x000000018014DEE0
	private object ReadBoxedPrimitiveTypeValue(BinaryReader reader); // 0x000000018014DEB0
	private void ReadArrayOfPrimitiveType(BinaryReader reader, out long objectId, out object val); // 0x000000018014D400
	private void BlockRead(BinaryReader reader, Array array, int dataSize); // 0x000000018014D020
	private void ReadArrayOfObject(BinaryReader reader, out long objectId, out object array); // 0x000000018014D350
	private void ReadArrayOfString(BinaryReader reader, out long objectId, out object array); // 0x000000018014DD40
	private void ReadSimpleArray(BinaryReader reader, Type elementType, out long objectId, out object val); // 0x000000018014F960
	private TypeMetadata ReadTypeMetadata(BinaryReader reader, bool isRuntimeObject, bool hasTypeInfo); // 0x000000018014FB40
	private void ReadValue(BinaryReader reader, object parentObject, long parentObjectId, SerializationInfo info, Type valueType, string fieldName, MemberInfo memberInfo, int[] indices); // 0x00000001801507B0
	private void SetObjectValue(object parentObject, string fieldName, MemberInfo memberInfo, SerializationInfo info, object value, Type valueType, int[] indices); // 0x0000000180150DC0
	private void RecordFixup(long parentObjectId, long childObjectId, object parentObject, SerializationInfo info, string fieldName, MemberInfo memberInfo, int[] indices); // 0x0000000180150AA0
	private Type GetDeserializationType(long assemblyId, string className); // 0x000000018014D1D0
	public Type ReadType(BinaryReader reader, TypeTag code); // 0x00000001801503B0
	public static object ReadPrimitiveTypeValue(BinaryReader reader, Type type); // 0x000000018014F220
}

// Namespace: 
private class TypeMetadata // TypeDefIndex: 1139
{
	// Fields
	public Type Type; // 0x10
	public Type[] MemberTypes; // 0x20
	public string[] MemberNames; // 0x30
	public MemberInfo[] MemberInfos; // 0x10
	public int FieldCount; // 0x10
	public bool NeedsSerializationInfo; // 0x20

	// Constructors
	public TypeMetadata(); // 0x00000001800E2000

}

// Namespace: 
private class ArrayNullFiller // TypeDefIndex: 1140
{
	// Fields
	public int NullCount; // 0x10

	// Constructors
	public ArrayNullFiller(int count); // 0x0000000180142DC0

}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal abstract class TypeMetadata // TypeDefIndex: 1141
{
	// Fields
	public string TypeAssemblyName; // 0x10
	public string InstanceTypeName; // 0x20

	// Properties
	public abstract bool RequiresTypes { get; }

	// Constructors
	protected TypeMetadata(); // 0x00000001800E2000

	// Methods
	public abstract void WriteAssemblies(ObjectWriter ow, BinaryWriter writer);
	public abstract void WriteTypeData(ObjectWriter ow, BinaryWriter writer, bool writeTypes);
	public abstract void WriteObjectData(ObjectWriter ow, BinaryWriter writer, object data);
	public virtual bool IsCompatible(TypeMetadata other); // 0x000000018010E420
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal abstract class ClrTypeMetadata : TypeMetadata // TypeDefIndex: 1142
{
	// Fields
	public Type InstanceType; // 0x20

	// Properties
	public override bool RequiresTypes { get; } // 0x000000018011A0F0 

	// Constructors
	public ClrTypeMetadata(Type instanceType); // 0x0000000180143E40

}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class SerializableTypeMetadata : TypeMetadata // TypeDefIndex: 1143
{
	// Fields
	private Type[] types; // 0x20
	private string[] names; // 0x28

	// Properties
	public override bool RequiresTypes { get; } // 0x000000018010E420 

	// Constructors
	public SerializableTypeMetadata(Type itype, SerializationInfo info); // 0x0000000180157650

	// Methods
	public override bool IsCompatible(TypeMetadata other); // 0x0000000180156F40
	public override void WriteAssemblies(ObjectWriter ow, BinaryWriter writer); // 0x00000001801571E0
	public override void WriteTypeData(ObjectWriter ow, BinaryWriter writer, bool writeTypes); // 0x00000001801574A0
	public override void WriteObjectData(ObjectWriter ow, BinaryWriter writer, object data); // 0x00000001801572C0
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class MemberTypeMetadata : ClrTypeMetadata // TypeDefIndex: 1144
{
	// Fields
	private MemberInfo[] members; // 0x28

	// Constructors
	public MemberTypeMetadata(Type type, StreamingContext context); // 0x00000001801488F0

	// Methods
	public override void WriteAssemblies(ObjectWriter ow, BinaryWriter writer); // 0x00000001801482E0
	public override void WriteTypeData(ObjectWriter ow, BinaryWriter writer, bool writeTypes); // 0x00000001801485F0
	public override void WriteObjectData(ObjectWriter ow, BinaryWriter writer, object data); // 0x0000000180148440
}

// Namespace: System.Runtime.Serialization.Formatters.Binary
internal class ObjectWriter // TypeDefIndex: 1145
{
	// Fields
	private ObjectIDGenerator _idGenerator; // 0x10
	private Hashtable _cachedMetadata; // 0x20
	private Queue _pendingObjects; // 0x00
	private Hashtable _assemblyCache; // 0x10
	private static Hashtable _cachedTypes; // 0x38
	internal static Assembly CorlibAssembly; // 0x4C
	internal static string CorlibAssemblyName; // 0x58
	private ISurrogateSelector _surrogateSelector; // 0x10
	private StreamingContext _context; // 0x10
	private FormatterAssemblyStyle _assemblyFormat; // 0x00
	private FormatterTypeStyle _typeFormat; // 0x10
	private byte[] arrayBuffer; // 0x00
	private int ArrayBufferLength; // 0x10
	private SerializationObjectManager _manager; // 0x20

	// Constructors
	public ObjectWriter(ISurrogateSelector surrogateSelector, StreamingContext context, FormatterAssemblyStyle assemblyFormat, FormatterTypeStyle typeFormat); // 0x0000000180156110
	private static ObjectWriter(); // 0x0000000180156000

	// Methods
	public void WriteObjectGraph(BinaryWriter writer, object obj, Header[] headers); // 0x0000000180153E00
	public void QueueObject(object obj); // 0x00000001801530D0
	public void WriteQueuedObjects(BinaryWriter writer); // 0x0000000180155500
	public void WriteObjectInstance(BinaryWriter writer, object obj, bool isValueObject); // 0x0000000180153F80
	public static void WriteSerializationEnd(BinaryWriter writer); // 0x0000000180155590
	private void WriteObject(BinaryWriter writer, long id, object obj); // 0x00000001801541B0
	private void GetObjectData(object obj, out TypeMetadata metadata, out object data); // 0x0000000180152710
	private TypeMetadata CreateMemberTypeMetadata(Type type); // 0x0000000180152410
	private void WriteArray(BinaryWriter writer, long id, Array array); // 0x0000000180153250
	private void WriteGenericArray(BinaryWriter writer, long id, Array array); // 0x00000001801537F0
	private void WriteObjectArray(BinaryWriter writer, long id, Array array); // 0x0000000180153D00
	private void WriteStringArray(BinaryWriter writer, long id, Array array); // 0x0000000180155800
	private void WritePrimitiveTypeArray(BinaryWriter writer, long id, Array array); // 0x00000001801544F0
	private void BlockWrite(BinaryWriter writer, Array array, int dataSize); // 0x0000000180152280
	private void WriteSingleDimensionArrayElements(BinaryWriter writer, Array array, Type elementType); // 0x00000001801555C0
	private void WriteNullFiller(BinaryWriter writer, int numNulls); // 0x0000000180153C40
	private void WriteObjectReference(BinaryWriter writer, long id); // 0x0000000180154150
	public void WriteValue(BinaryWriter writer, Type valueType, object val); // 0x0000000180155D10
	private void WriteString(BinaryWriter writer, long id, string str); // 0x0000000180155900
	public int WriteAssembly(BinaryWriter writer, Assembly assembly); // 0x00000001801537A0
	public int WriteAssemblyName(BinaryWriter writer, string assembly); // 0x0000000180153520
	public int GetAssemblyId(Assembly assembly); // 0x00000001801525D0
	public int GetAssemblyNameId(string assembly); // 0x0000000180152680
	private int RegisterAssembly(string assembly, out bool firstTime); // 0x0000000180153100
	public static void WritePrimitiveValue(BinaryWriter writer, object value); // 0x0000000180154E60
	public static void WriteTypeCode(BinaryWriter writer, Type type); // 0x0000000180155980
	public static TypeTag GetTypeTag(Type type); // 0x0000000180152DF0
	public void WriteTypeSpec(BinaryWriter writer, Type type); // 0x0000000180155A10
}

// Namespace: 
private class MetadataReference // TypeDefIndex: 1146
{
	// Fields
	public TypeMetadata Metadata; // 0x10
	public long ObjectID; // 0x10

	// Constructors
	public MetadataReference(TypeMetadata metadata, long id); // 0x000000018014B260

}

// Namespace: System.Runtime.Serialization.Formatters
[Serializable]
public enum FormatterAssemblyStyle // TypeDefIndex: 1147
{
	Simple = 0,
	Full = 1
}

// Namespace: System.Runtime.Serialization.Formatters
[Serializable]
public enum FormatterTypeStyle // TypeDefIndex: 1148
{
	TypesWhenNeeded = 0,
	TypesAlways = 1,
	XsdString = 2
}

// Namespace: System.Runtime.Serialization.Formatters
public interface IFieldInfo // TypeDefIndex: 1149
{
	// Properties
	string[] FieldNames { get; set; }
	Type[] FieldTypes { get; set; }

}

// Namespace: System.Runtime.Serialization.Formatters
public interface ISoapMessage // TypeDefIndex: 1150
{
	// Properties
	Header[] Headers { get; set; }
	string MethodName { get; set; }
	string[] ParamNames { get; set; }
	Type[] ParamTypes { get; set; }
	object[] ParamValues { get; set; }
	string XmlNameSpace { get; set; }

}

// Namespace: System.Runtime.Serialization.Formatters
public sealed class InternalRM // TypeDefIndex: 1151
{
	// Constructors
	public InternalRM(); // 0x00000001800E2000

	// Methods
	public static void InfoSoap(object[] messages); // 0x0000000180148060
	public static bool SoapCheckEnabled(); // 0x00000001801480B0
}

// Namespace: System.Runtime.Serialization.Formatters
public sealed class InternalST // TypeDefIndex: 1152
{
	// Constructors
	private InternalST(); // 0x00000001800E2000

	// Methods
	public static void InfoSoap(object[] messages); // 0x0000000180148100
	public static Assembly LoadAssemblyFromString(string assemblyString); // 0x0000000180148150
	public static void SerializationSetValue(FieldInfo fi, object target, object value); // 0x00000001801481A0
	public static void Soap(object[] messages); // 0x0000000180148290
	public static void SoapAssert(bool condition, string message); // 0x00000001801481F0
	public static bool SoapCheckEnabled(); // 0x0000000180148240
}

// Namespace: System.Runtime.Serialization.Formatters
[Serializable]
public sealed class ServerFault // TypeDefIndex: 1153
{
	// Fields
	private string exceptionType; // 0x10
	private string message; // 0x20
	private string stackTrace; // 0x10
	private Exception exception; // 0x20

	// Properties
	public string ExceptionType { get; set; } // 0x00000001800E20D0 0x0000000180114C30
	public string ExceptionMessage { get; set; } // 0x00000001800EAEC0 0x00000001800EAEE0
	public string StackTrace { get; set; } // 0x00000001800EAEB0 0x00000001800EAED0

	// Constructors
	public ServerFault(string exceptionType, string message, string stackTrace); // 0x000000018015B4D0

}

// Namespace: System.Runtime.Serialization.Formatters
[Serializable]
public sealed class SoapFault : ISerializable // TypeDefIndex: 1154
{
	// Fields
	private string code; // 0x10
	private string actor; // 0x20
	private string faultString; // 0x10
	private object detail; // 0x20

	// Properties
	public object Detail { get; set; } // 0x000000018013BF80 0x000000018015B760
	public string FaultActor { get; set; } // 0x00000001800EAEC0 0x00000001800EAEE0
	public string FaultCode { get; set; } // 0x00000001800E20D0 0x0000000180114C30
	public string FaultString { get; set; } // 0x00000001800EAEB0 0x00000001800EAED0

	// Constructors
	public SoapFault(); // 0x00000001800E2000
	private SoapFault(SerializationInfo info, StreamingContext context); // 0x000000018015B630
	public SoapFault(string faultCode, string faultString, string faultActor, ServerFault serverFault); // 0x000000018015B700

	// Methods
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x000000018015B520
}

// Namespace: System.Runtime.Serialization.Formatters
[Serializable]
public class SoapMessage : ISoapMessage // TypeDefIndex: 1155
{
	// Fields
	private Header[] headers; // 0x10
	private string methodName; // 0x20
	private string[] paramNames; // 0x30
	private Type[] paramTypes; // 0x10
	private object[] paramValues; // 0x00
	private string xmlNameSpace; // 0x10

	// Properties
	public Header[] Headers { get; set; } // 0x00000001800E20D0 0x0000000180114C30
	public string MethodName { get; set; } // 0x00000001800EAEC0 0x00000001800EAEE0
	public string[] ParamNames { get; set; } // 0x00000001800EAEB0 0x00000001800EAED0
	public Type[] ParamTypes { get; set; } // 0x000000018013BF80 0x000000018015B760
	public object[] ParamValues { get; set; } // 0x00000001801146E0 0x0000000180114BF0
	public string XmlNameSpace { get; set; } // 0x0000000180119440 0x000000018015B770

	// Constructors
	public SoapMessage(); // 0x00000001800E2000

}

// Namespace: System.Runtime.Serialization.Formatters
public enum TypeFilterLevel // TypeDefIndex: 1156
{
	Low = 2,
	Full = 3
}

// Namespace: System.Runtime.Serialization
[Serializable]
public abstract class Formatter : IFormatter // TypeDefIndex: 1157
{
	// Fields
	protected ObjectIDGenerator m_idGenerator; // 0x10
	protected Queue m_objectQueue; // 0x10

	// Properties
	public abstract SerializationBinder Binder { get; set; }
	public abstract StreamingContext Context { get; set; }
	public abstract ISurrogateSelector SurrogateSelector { get; set; }

	// Constructors
	protected Formatter(); // 0x00000001801C80B0

	// Methods
	public abstract object Deserialize(Stream serializationStream);
	protected virtual object GetNext(out long objID); // 0x00000001801C76B0
	protected virtual long Schedule(object obj); // 0x00000001801C7760
	public abstract void Serialize(Stream serializationStream, object graph);
	protected abstract void WriteArray(object obj, string name, Type memberType);
	protected abstract void WriteBoolean(bool val, string name);
	protected abstract void WriteByte(byte val, string name);
	protected abstract void WriteChar(char val, string name);
	protected abstract void WriteDateTime(DateTime val, string name);
	protected abstract void WriteDecimal(Decimal val, string name);
	protected abstract void WriteDouble(double val, string name);
	protected abstract void WriteInt16(short val, string name);
	protected abstract void WriteInt32(int val, string name);
	protected abstract void WriteInt64(long val, string name);
	protected virtual void WriteMember(string memberName, object data); // 0x00000001801C77F0
	protected abstract void WriteObjectRef(object obj, string name, Type memberType);
	protected abstract void WriteSByte(sbyte val, string name);
	protected abstract void WriteSingle(float val, string name);
	protected abstract void WriteTimeSpan(TimeSpan val, string name);
	protected abstract void WriteUInt16(ushort val, string name);
	protected abstract void WriteUInt32(uint val, string name);
	protected abstract void WriteUInt64(ulong val, string name);
	protected abstract void WriteValueType(object obj, string name, Type memberType);
}

// Namespace: System.Runtime.Serialization
public class FormatterConverter : IFormatterConverter // TypeDefIndex: 1158
{
	// Constructors
	public FormatterConverter(); // 0x00000001800E2000

	// Methods
	public object Convert(object value, Type type); // 0x00000001801C5F60
	public object Convert(object value, TypeCode typeCode); // 0x00000001801C5FD0
	public bool ToBoolean(object value); // 0x00000001801C6030
	public byte ToByte(object value); // 0x00000001801C60C0
	public char ToChar(object value); // 0x00000001801C6150
	public DateTime ToDateTime(object value); // 0x00000001801C61E0
	public Decimal ToDecimal(object value); // 0x00000001801C6290
	public double ToDouble(object value); // 0x00000001801C6340
	public short ToInt16(object value); // 0x00000001801C63D0
	public int ToInt32(object value); // 0x00000001801C6460
	public long ToInt64(object value); // 0x00000001801C64F0
	public float ToSingle(object value); // 0x00000001801C6610
	public string ToString(object value); // 0x00000001801C66A0
	public sbyte ToSByte(object value); // 0x00000001801C6580
	public ushort ToUInt16(object value); // 0x00000001801C6730
	public uint ToUInt32(object value); // 0x00000001801C67C0
	public ulong ToUInt64(object value); // 0x00000001801C6850
}

// Namespace: System.Runtime.Serialization
public sealed class FormatterServices // TypeDefIndex: 1159
{
	// Fields
	private const BindingFlags fieldFlags = 54; // 0x00

	// Constructors
	private FormatterServices(); // 0x00000001800E2000

	// Methods
	public static object[] GetObjectData(object obj, MemberInfo[] members); // 0x00000001801C6D40
	public static MemberInfo[] GetSerializableMembers(Type type); // 0x00000001801C72B0
	public static MemberInfo[] GetSerializableMembers(Type type, StreamingContext context); // 0x00000001801C70E0
	private static void GetFields(Type reflectedType, Type type, ArrayList fields); // 0x00000001801C6B50
	public static Type GetTypeFromAssembly(Assembly assem, string name); // 0x00000001801C7300
	public static object GetUninitializedObject(Type type); // 0x00000001801C7000
	public static object PopulateObjectMembers(object obj, MemberInfo[] members, object[] data); // 0x00000001801C73C0
	public static void CheckTypeSecurity(Type t, TypeFilterLevel securityLevel); // 0x00000001801C6A80
	private static void CheckNotAssignable(Type basetype, Type type); // 0x00000001801C68E0
	public static object GetSafeUninitializedObject(Type type); // 0x00000001801C7000
}

// Namespace: System.Runtime.Serialization
public interface IDeserializationCallback // TypeDefIndex: 1160
{
	// Methods
	void OnDeserialization(object sender);
}

// Namespace: System.Runtime.Serialization
public interface IFormatter // TypeDefIndex: 1161
{
	// Properties
	SerializationBinder Binder { get; set; }
	StreamingContext Context { get; set; }
	ISurrogateSelector SurrogateSelector { get; set; }

	// Methods
	object Deserialize(Stream serializationStream);
	void Serialize(Stream serializationStream, object graph);
}

// Namespace: System.Runtime.Serialization
public interface IFormatterConverter // TypeDefIndex: 1162
{
	// Methods
	object Convert(object value, Type type);
	object Convert(object value, TypeCode typeCode);
	bool ToBoolean(object value);
	byte ToByte(object value);
	char ToChar(object value);
	DateTime ToDateTime(object value);
	Decimal ToDecimal(object value);
	double ToDouble(object value);
	short ToInt16(object value);
	int ToInt32(object value);
	long ToInt64(object value);
	sbyte ToSByte(object value);
	float ToSingle(object value);
	string ToString(object value);
	ushort ToUInt16(object value);
	uint ToUInt32(object value);
	ulong ToUInt64(object value);
}

// Namespace: System.Runtime.Serialization
public interface IObjectReference // TypeDefIndex: 1163
{
	// Methods
	object GetRealObject(StreamingContext context);
}

// Namespace: System.Runtime.Serialization
public interface ISerializationSurrogate // TypeDefIndex: 1164
{
	// Methods
	void GetObjectData(object obj, SerializationInfo info, StreamingContext context);
	object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector);
}

// Namespace: System.Runtime.Serialization
public interface ISurrogateSelector // TypeDefIndex: 1165
{
	// Methods
	void ChainSelector(ISurrogateSelector selector);
	ISurrogateSelector GetNextSelector();
	ISerializationSurrogate GetSurrogate(Type type, StreamingContext context, out ISurrogateSelector selector);
}

// Namespace: System.Runtime.Serialization
[Serializable]
public class ObjectIDGenerator // TypeDefIndex: 1166
{
	// Fields
	private Hashtable table; // 0x10
	private long current; // 0x00
	private static InstanceComparer comparer; // 0x10

	// Properties
	internal long NextId { get; } // 0x000000018014B650 

	// Constructors
	public ObjectIDGenerator(); // 0x000000018014B5A0
	private static ObjectIDGenerator(); // 0x000000018014B540

	// Methods
	public virtual long GetId(object obj, out bool firstTime); // 0x000000018014B310
	public virtual long HasId(object obj, out bool firstTime); // 0x000000018014B450
}

// Namespace: 
private class InstanceComparer : IComparer, IHashCodeProvider // TypeDefIndex: 1167
{
	// Constructors
	public InstanceComparer(); // 0x00000001800E2000

	// Methods
	private int System.Collections.IComparer.Compare(object o1, object o2); // 0x0000000180147FC0
	private int System.Collections.IHashCodeProvider.GetHashCode(object o); // 0x0000000180148050
}

// Namespace: System.Runtime.Serialization
public class ObjectManager // TypeDefIndex: 1168
{
	// Fields
	private ObjectRecord _objectRecordChain; // 0x10
	private ObjectRecord _lastObjectRecord; // 0x20
	private ArrayList _deserializedRecords; // 0x30
	private ArrayList _onDeserializedCallbackRecords; // 0x40
	private Hashtable _objectRecords; // 0x58
	private bool _finalFixup; // 0x10
	private ISurrogateSelector _selector; // 0x20
	private StreamingContext _context; // 0x30
	private int _registeredObjectsCount; // 0x30

	// Constructors
	public ObjectManager(ISurrogateSelector selector, StreamingContext context); // 0x000000018014CF60

	// Methods
	public virtual void DoFixups(); // 0x000000018014B6A0
	internal ObjectRecord GetObjectRecord(long objectID); // 0x000000018014BAA0
	public virtual object GetObject(long objectID); // 0x000000018014BD10
	public virtual void RaiseDeserializationEvent(); // 0x000000018014BE40
	public void RaiseOnDeserializingEvent(object obj); // 0x000000018014C1E0
	private void RaiseOnDeserializedEvent(object obj); // 0x000000018014C0E0
	private void AddFixup(BaseFixupRecord record); // 0x000000018014B660
	public virtual void RecordArrayElementFixup(long arrayToBeFixed, int index, long objectRequired); // 0x000000018014C470
	public virtual void RecordArrayElementFixup(long arrayToBeFixed, int[] indices, long objectRequired); // 0x000000018014C2E0
	public virtual void RecordDelayedFixup(long objectToBeFixed, string memberName, long objectRequired); // 0x000000018014C5D0
	public virtual void RecordFixup(long objectToBeFixed, MemberInfo member, long objectRequired); // 0x000000018014C770
	private void RegisterObjectInternal(object obj, ObjectRecord record); // 0x000000018014C910
	public virtual void RegisterObject(object obj, long objectID); // 0x000000018014CD50
	public void RegisterObject(object obj, long objectID, SerializationInfo info); // 0x000000018014CE60
	public void RegisterObject(object obj, long objectID, SerializationInfo info, long idOfContainingObj, MemberInfo member); // 0x000000018014CE30
	public void RegisterObject(object obj, long objectID, SerializationInfo info, long idOfContainingObj, MemberInfo member, int[] arrayIndex); // 0x000000018014CC30
}

// Namespace: System.Runtime.Serialization
internal abstract class BaseFixupRecord // TypeDefIndex: 1169
{
	// Fields
	protected internal ObjectRecord ObjectToBeFixed; // 0x10
	protected internal ObjectRecord ObjectRequired; // 0x20
	public BaseFixupRecord NextSameContainer; // 0x30
	public BaseFixupRecord NextSameRequired; // 0x30

	// Constructors
	public BaseFixupRecord(ObjectRecord objectToBeFixed, ObjectRecord objectRequired); // 0x000000018014B260

	// Methods
	public bool DoFixup(ObjectManager manager, bool strict); // 0x00000001801C4650
	protected abstract void FixupImpl(ObjectManager manager);
}

// Namespace: System.Runtime.Serialization
internal class ArrayFixupRecord : BaseFixupRecord // TypeDefIndex: 1170
{
	// Fields
	private int _index; // 0x30

	// Constructors
	public ArrayFixupRecord(ObjectRecord objectToBeFixed, int index, ObjectRecord objectRequired); // 0x00000001801C4600

	// Methods
	protected override void FixupImpl(ObjectManager manager); // 0x00000001801C4550
}

// Namespace: System.Runtime.Serialization
internal class MultiArrayFixupRecord : BaseFixupRecord // TypeDefIndex: 1171
{
	// Fields
	private int[] _indices; // 0x30

	// Constructors
	public MultiArrayFixupRecord(ObjectRecord objectToBeFixed, int[] indices, ObjectRecord objectRequired); // 0x000000018014B2E0

	// Methods
	protected override void FixupImpl(ObjectManager manager); // 0x000000018014B2A0
}

// Namespace: System.Runtime.Serialization
internal class FixupRecord : BaseFixupRecord // TypeDefIndex: 1172
{
	// Fields
	public MemberInfo _member; // 0x30

	// Constructors
	public FixupRecord(ObjectRecord objectToBeFixed, MemberInfo member, ObjectRecord objectRequired); // 0x00000001801C5DC0

	// Methods
	protected override void FixupImpl(ObjectManager manager); // 0x00000001801C5F20
}

// Namespace: System.Runtime.Serialization
internal class DelayedFixupRecord : BaseFixupRecord // TypeDefIndex: 1173
{
	// Fields
	public string _memberName; // 0x30

	// Constructors
	public DelayedFixupRecord(ObjectRecord objectToBeFixed, string memberName, ObjectRecord objectRequired); // 0x00000001801C5DC0

	// Methods
	protected override void FixupImpl(ObjectManager manager); // 0x00000001801C5D80
}

// Namespace: System.Runtime.Serialization
internal enum ObjectRecordStatus : byte // TypeDefIndex: 1174
{
	Unregistered = 0,
	ReferenceUnsolved = 1,
	ReferenceSolvingDelayed = 2,
	ReferenceSolved = 3
}

// Namespace: System.Runtime.Serialization
internal class ObjectRecord // TypeDefIndex: 1175
{
	// Fields
	public ObjectRecordStatus Status; // 0x10
	public object OriginalObject; // 0x20
	public object ObjectInstance; // 0x30
	public long ObjectID; // 0x40
	public SerializationInfo Info; // 0x50
	public long IdOfContainingObj; // 0x60
	public ISerializationSurrogate Surrogate; // 0x70
	public ISurrogateSelector SurrogateSelector; // 0x00
	public MemberInfo Member; // 0x18
	public int[] ArrayIndex; // 0x28
	public BaseFixupRecord FixupChainAsContainer; // 0x08
	public BaseFixupRecord FixupChainAsRequired; // 0x10
	public ObjectRecord Next; // 0x20

	// Properties
	public bool IsInstanceReady { get; } // 0x0000000180152200 
	public bool IsUnsolvedObjectReference { get; } // 0x0000000180152270 
	public bool IsRegistered { get; } // 0x0000000180152260 
	public bool HasPendingFixups { get; } // 0x00000001801521F0 

	// Constructors
	public ObjectRecord(); // 0x00000001800E2000

	// Methods
	public void SetMemberValue(ObjectManager manager, MemberInfo member, object value); // 0x0000000180151EC0
	public void SetArrayValue(ObjectManager manager, object value, int[] indices); // 0x0000000180151D30
	public void SetMemberValue(ObjectManager manager, string memberName, object value); // 0x0000000180151E10
	public bool DoFixups(bool asContainer, ObjectManager manager, bool strict); // 0x00000001801513F0
	public void RemoveFixup(BaseFixupRecord fixupToRemove, bool asContainer); // 0x0000000180151CC0
	private void UnchainFixup(BaseFixupRecord fixup, BaseFixupRecord prevFixup, bool asContainer); // 0x0000000180152190
	public void ChainFixup(BaseFixupRecord fixup, bool asContainer); // 0x00000001801513B0
	public bool LoadData(ObjectManager manager, ISurrogateSelector selector, StreamingContext context); // 0x0000000180151550
}

// Namespace: System.Runtime.Serialization
public sealed class OnDeserializedAttribute : Attribute // TypeDefIndex: 1176
{
	// Constructors
	public OnDeserializedAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Runtime.Serialization
public sealed class OnDeserializingAttribute : Attribute // TypeDefIndex: 1177
{
	// Constructors
	public OnDeserializingAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Runtime.Serialization
public sealed class OnSerializedAttribute : Attribute // TypeDefIndex: 1178
{
	// Constructors
	public OnSerializedAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Runtime.Serialization
public sealed class OnSerializingAttribute : Attribute // TypeDefIndex: 1179
{
	// Constructors
	public OnSerializingAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Runtime.Serialization
public sealed class OptionalFieldAttribute : Attribute // TypeDefIndex: 1180
{
	// Fields
	private int version_added; // 0x10

	// Properties
	public int VersionAdded { get; set; } // 0x00000001800ECD10 0x0000000180143AD0

	// Constructors
	public OptionalFieldAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Runtime.Serialization
[Serializable]
public abstract class SerializationBinder // TypeDefIndex: 1181
{
	// Constructors
	protected SerializationBinder(); // 0x00000001800E2000

	// Methods
	public abstract Type BindToType(string assemblyName, string typeName);
}

// Namespace: System.Runtime.Serialization
internal sealed class SerializationCallbacks // TypeDefIndex: 1182
{
	// Fields
	private const BindingFlags DefaultBindingFlags = 54; // 0x00
	private readonly ArrayList onSerializingList; // 0x18
	private readonly ArrayList onSerializedList; // 0x28
	private readonly ArrayList onDeserializingList; // 0x08
	private readonly ArrayList onDeserializedList; // 0x10
	private static Hashtable cache; // 0x20
	private static object cache_lock; // 0x10

	// Properties
	public bool HasSerializingCallbacks { get; } // 0x0000000180158590 
	public bool HasSerializedCallbacks { get; } // 0x0000000180158580 
	public bool HasDeserializingCallbacks { get; } // 0x0000000180158570 
	public bool HasDeserializedCallbacks { get; } // 0x0000000180158560 

	// Constructors
	public SerializationCallbacks(Type type); // 0x0000000180158450
	private static SerializationCallbacks(); // 0x00000001801583D0

	// Methods
	private static ArrayList GetMethodsByAttribute(Type type, Type attr); // 0x0000000180157950
	private static void Invoke(ArrayList list, object target, StreamingContext context); // 0x0000000180157F60
	public void RaiseOnSerializing(object target, StreamingContext contex); // 0x0000000180158350
	public void RaiseOnSerialized(object target, StreamingContext contex); // 0x00000001801582D0
	public void RaiseOnDeserializing(object target, StreamingContext contex); // 0x0000000180158250
	public void RaiseOnDeserialized(object target, StreamingContext contex); // 0x00000001801581D0
	public static SerializationCallbacks GetSerializationCallbacks(Type t); // 0x0000000180157B90
}

// Namespace: 
public delegate void CallbackHandler(StreamingContext context); // TypeDefIndex: 1183; 0x0000000180143BC0

// Namespace: System.Runtime.Serialization
public struct SerializationEntry // TypeDefIndex: 1184
{
	// Fields
	private string name; // 0x10
	private Type objectType; // 0x20
	private object value; // 0x10

	// Properties
	public string Name { get; } // 0x0000000180002060 
	public Type ObjectType { get; } // 0x0000000180002040 
	public object Value { get; } // 0x0000000180002050 

	// Constructors
	internal SerializationEntry(string name, Type type, object value); // 0x0000000180006650

}

// Namespace: System.Runtime.Serialization
[Serializable]
public class SerializationException : SystemException // TypeDefIndex: 1185
{
	// Constructors
	public SerializationException(); // 0x00000001801585A0
	public SerializationException(string message); // 0x000000018010E1E0
	public SerializationException(string message, Exception innerException); // 0x000000018010E1D0
	protected SerializationException(SerializationInfo info, StreamingContext context); // 0x000000018010E170

}

// Namespace: System.Runtime.Serialization
public sealed class SerializationInfo // TypeDefIndex: 1186
{
	// Fields
	private Hashtable serialized; // 0x10
	private ArrayList values; // 0x20
	private string assemblyName; // 0x30
	private string fullTypeName; // 0x10
	private IFormatterConverter converter; // 0x28

	// Properties
	public string AssemblyName { get; set; } // 0x00000001800EAEB0 0x000000018015B020
	public string FullTypeName { get; set; } // 0x000000018013BF80 0x000000018015B0A0
	public int MemberCount { get; } // 0x000000018015AE50 

	// Constructors
	private SerializationInfo(Type type); // 0x000000018015A9B0
	private SerializationInfo(Type type, SerializationEntry[] data); // 0x000000018015AC20
	public SerializationInfo(Type type, IFormatterConverter converter); // 0x000000018015AAB0

	// Methods
	public void AddValue(string name, object value, Type type); // 0x0000000180158950
	public object GetValue(string name, Type type); // 0x000000018015A680
	public void SetType(Type type); // 0x000000018015A8F0
	public SerializationInfoEnumerator GetEnumerator(); // 0x0000000180159C50
	public void AddValue(string name, short value); // 0x0000000180159160
	public void AddValue(string name, ushort value); // 0x0000000180158EA0
	public void AddValue(string name, int value); // 0x0000000180158B20
	public void AddValue(string name, byte value); // 0x0000000180158DF0
	public void AddValue(string name, bool value); // 0x0000000180158F50
	public void AddValue(string name, char value); // 0x0000000180158BD0
	public void AddValue(string name, sbyte value); // 0x0000000180159390
	public void AddValue(string name, double value); // 0x00000001801594F0
	public void AddValue(string name, Decimal value); // 0x0000000180158C80
	public void AddValue(string name, DateTime value); // 0x0000000180159210
	public void AddValue(string name, float value); // 0x00000001801592D0
	public void AddValue(string name, uint value); // 0x0000000180158D40
	public void AddValue(string name, long value); // 0x00000001801590B0
	public void AddValue(string name, ulong value); // 0x0000000180159440
	public void AddValue(string name, object value); // 0x0000000180159000
	public bool GetBoolean(string name); // 0x00000001801595B0
	public byte GetByte(string name); // 0x00000001801596C0
	public char GetChar(string name); // 0x00000001801597D0
	public DateTime GetDateTime(string name); // 0x00000001801598E0
	public Decimal GetDecimal(string name); // 0x0000000180159A10
	public double GetDouble(string name); // 0x0000000180159B40
	public short GetInt16(string name); // 0x0000000180159CD0
	public int GetInt32(string name); // 0x0000000180159DE0
	public long GetInt64(string name); // 0x0000000180159EF0
	public sbyte GetSByte(string name); // 0x000000018015A000
	public float GetSingle(string name); // 0x000000018015A110
	public string GetString(string name); // 0x000000018015A220
	public ushort GetUInt16(string name); // 0x000000018015A350
	public uint GetUInt32(string name); // 0x000000018015A460
	public ulong GetUInt64(string name); // 0x000000018015A570
	private SerializationEntry[] get_entries(); // 0x000000018015AE80
}

// Namespace: System.Runtime.Serialization
public sealed class SerializationInfoEnumerator : IEnumerator // TypeDefIndex: 1187
{
	// Fields
	private IEnumerator enumerator; // 0x10

	// Properties
	private object System.Collections.IEnumerator.Current { get; } // 0x0000000180158680 
	public SerializationEntry Current { get; } // 0x0000000180158720 
	public string Name { get; } // 0x00000001801587C0 
	public Type ObjectType { get; } // 0x0000000180158840 
	public object Value { get; } // 0x00000001801588C0 

	// Constructors
	internal SerializationInfoEnumerator(ArrayList list); // 0x00000001801586D0

	// Methods
	public bool MoveNext(); // 0x00000001801585E0
	public void Reset(); // 0x0000000180158630
}

// Namespace: System.Runtime.Serialization
public sealed class SerializationObjectManager // TypeDefIndex: 1188
{
	// Fields
	private readonly StreamingContext context; // 0x10
	private readonly Hashtable seen; // 0x28
	private CallbackHandler callbacks; // 0x10

	// Events
	private event CallbackHandler callbacks {
		add; // 0x000000018015B3D0
		remove; // 0x000000018015B450
	}

	// Constructors
	public SerializationObjectManager(StreamingContext context); // 0x000000018015B360

	// Methods
	public void RegisterObject(object obj); // 0x000000018015B150
	public void RaiseOnSerializedEvent(); // 0x000000018015B120
}

// Namespace: 
private sealed class <RegisterObject>c__AnonStorey3 // TypeDefIndex: 1189
{
	// Fields
	internal SerializationCallbacks sc; // 0x10
	internal object obj; // 0x10

	// Constructors
	public <RegisterObject>c__AnonStorey3(); // 0x00000001800E2000

	// Methods
	internal void <>m__2(StreamingContext ctx); // 0x000000018015BD70
}

// Namespace: System.Runtime.Serialization
[Serializable]
public struct StreamingContext // TypeDefIndex: 1190
{
	// Fields
	private StreamingContextStates state; // 0x10
	private object additional; // 0x10

	// Properties
	public object Context { get; } // 0x0000000180002040 
	public StreamingContextStates State { get; } // 0x00000001800034B0 

	// Constructors
	public StreamingContext(StreamingContextStates state); // 0x0000000180006730
	public StreamingContext(StreamingContextStates state, object additional); // 0x0000000180006740

	// Methods
	public override bool Equals(object obj); // 0x0000000180006680
	public override int GetHashCode(); // 0x00000001800034B0
}

// Namespace: System.Runtime.Serialization
[Serializable]
public enum StreamingContextStates // TypeDefIndex: 1191
{
	CrossProcess = 1,
	CrossMachine = 2,
	File = 4,
	Persistence = 8,
	Remoting = 16,
	Other = 32,
	Clone = 64,
	CrossAppDomain = 128,
	All = 255
}

// Namespace: System.Runtime.Serialization
public class SurrogateSelector : ISurrogateSelector // TypeDefIndex: 1192
{
	// Fields
	private Hashtable Surrogates; // 0x10
	private ISurrogateSelector nextSelector; // 0x10

	// Constructors
	public SurrogateSelector(); // 0x000000018015BD10

	// Methods
	public virtual void AddSurrogate(Type type, StreamingContext context, ISerializationSurrogate surrogate); // 0x000000018015B7A0
	public virtual void ChainSelector(ISurrogateSelector selector); // 0x000000018015B9A0
	public virtual ISurrogateSelector GetNextSelector(); // 0x00000001800EAEC0
	public virtual ISerializationSurrogate GetSurrogate(Type type, StreamingContext context, out ISurrogateSelector selector); // 0x000000018015BA30
	public virtual void RemoveSurrogate(Type type, StreamingContext context); // 0x000000018015BBE0
}

// Namespace: System.Runtime.Versioning
public sealed class ResourceConsumptionAttribute : Attribute // TypeDefIndex: 1193
{
	// Fields
	private ResourceScope resource; // 0x10
	private ResourceScope consumption; // 0x10

	// Properties
	public ResourceScope ConsumptionScope { get; } // 0x0000000180156360 
	public ResourceScope ResourceScope { get; } // 0x00000001800ECD10 

	// Constructors
	public ResourceConsumptionAttribute(ResourceScope resourceScope); // 0x0000000180156330
	public ResourceConsumptionAttribute(ResourceScope resourceScope, ResourceScope consumptionScope); // 0x00000001801562F0

}

// Namespace: System.Runtime.Versioning
public sealed class ResourceExposureAttribute : Attribute // TypeDefIndex: 1194
{
	// Fields
	private ResourceScope exposure; // 0x10

	// Properties
	public ResourceScope ResourceExposureLevel { get; } // 0x00000001800ECD10 

	// Constructors
	public ResourceExposureAttribute(ResourceScope exposureLevel); // 0x000000018010E510

}

// Namespace: System.Runtime.Versioning
public enum ResourceScope // TypeDefIndex: 1195
{
	None = 0,
	Machine = 1,
	Process = 2,
	AppDomain = 4,
	Library = 8,
	Private = 16,
	Assembly = 32
}

// Namespace: System.Runtime.Versioning
public static class VersioningHelper // TypeDefIndex: 1196
{
	// Methods
	private static int GetDomainId(); // 0x00000001800EA8C0
	private static int GetProcessId(); // 0x00000001800EA8C0
	private static string SafeName(string name, bool process, bool appdomain); // 0x000000018015C430
	private static string ConvertFromMachine(string name, ResourceScope to, Type type); // 0x000000018015BE90
	private static string ConvertFromProcess(string name, ResourceScope to, Type type); // 0x000000018015BFD0
	private static string ConvertFromAppDomain(string name, ResourceScope to, Type type); // 0x000000018015BE00
	public static string MakeVersionSafeName(string name, ResourceScope from, ResourceScope to); // 0x000000018015C0D0
	public static string MakeVersionSafeName(string name, ResourceScope from, ResourceScope to, Type type); // 0x000000018015C0F0
}

// Namespace: System.Runtime
[Serializable]
public enum GCLatencyMode // TypeDefIndex: 1197
{
	Batch = 0,
	Interactive = 1,
	LowLatency = 2
}

// Namespace: System.Runtime
public static class GCSettings // TypeDefIndex: 1198
{
	// Properties
	public static bool IsServerGC { get; } // 0x000000018011A0F0 
	public static GCLatencyMode LatencyMode { get; set; } // 0x0000000180119A50 0x00000001800EA7B0

}

// Namespace: System.Runtime
public sealed class MemoryFailPoint : CriticalFinalizerObject, IDisposable // TypeDefIndex: 1199
{
	// Constructors
	public MemoryFailPoint(int sizeInMegabytes); // 0x00000001801EFA00

	// Methods
	protected override void Finalize(); // 0x00000001801EF9A0
	public void Dispose(); // 0x00000001801EF950
}

// Namespace: System.Security.AccessControl
public enum AccessControlActions // TypeDefIndex: 1200
{
	None = 0,
	View = 1,
	Change = 2
}

// Namespace: System.Security.AccessControl
public enum AccessControlModification // TypeDefIndex: 1201
{
	Add = 0,
	Set = 1,
	Reset = 2,
	Remove = 3,
	RemoveAll = 4,
	RemoveSpecific = 5
}

// Namespace: System.Security.AccessControl
public enum AccessControlSections // TypeDefIndex: 1202
{
	None = 0,
	Audit = 1,
	Access = 2,
	Owner = 4,
	Group = 8,
	All = 15
}

// Namespace: System.Security.AccessControl
public enum AccessControlType // TypeDefIndex: 1203
{
	Allow = 0,
	Deny = 1
}

// Namespace: System.Security.AccessControl
public abstract class AccessRule : AuthorizationRule // TypeDefIndex: 1204
{
	// Fields
	private AccessControlType type; // 0x28

	// Properties
	public AccessControlType AccessControlType { get; } // 0x0000000180119420 

	// Constructors
	protected AccessRule(IdentityReference identity, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type); // 0x0000000180142B90

}

// Namespace: System.Security.AccessControl
public sealed class AceEnumerator : IEnumerator // TypeDefIndex: 1205
{
	// Fields
	private GenericAcl owner; // 0x10
	private int current; // 0x10

	// Properties
	private object System.Collections.IEnumerator.Current { get; } // 0x0000000180142D50 
	public GenericAce Current { get; } // 0x0000000180142D50 

	// Constructors
	internal AceEnumerator(GenericAcl owner); // 0x0000000180142D90

	// Methods
	public bool MoveNext(); // 0x0000000180142CE0
	public void Reset(); // 0x0000000180142D40
}

// Namespace: System.Security.AccessControl
public enum AceFlags : byte // TypeDefIndex: 1206
{
	None = 0,
	ObjectInherit = 1,
	ContainerInherit = 2,
	NoPropagateInherit = 4,
	InheritOnly = 8,
	InheritanceFlags = 15,
	Inherited = 16,
	SuccessfulAccess = 64,
	FailedAccess = 128,
	AuditFlags = 192
}

// Namespace: System.Security.AccessControl
public enum AceQualifier // TypeDefIndex: 1207
{
	AccessAllowed = 0,
	AccessDenied = 1,
	SystemAudit = 2,
	SystemAlarm = 3
}

// Namespace: System.Security.AccessControl
public enum AceType // TypeDefIndex: 1208
{
	AccessAllowed = 0,
	AccessDenied = 1,
	SystemAudit = 2,
	SystemAlarm = 3,
	AccessAllowedCompound = 4,
	AccessAllowedObject = 5,
	AccessDeniedObject = 6,
	SystemAuditObject = 7,
	SystemAlarmObject = 8,
	AccessAllowedCallback = 9,
	AccessDeniedCallback = 10,
	AccessAllowedCallbackObject = 11,
	AccessDeniedCallbackObject = 12,
	SystemAuditCallback = 13,
	SystemAlarmCallback = 14,
	SystemAuditCallbackObject = 15,
	SystemAlarmCallbackObject = 16,
	MaxDefinedAceType = 16
}

// Namespace: System.Security.AccessControl
public enum AuditFlags // TypeDefIndex: 1209
{
	None = 0,
	Success = 1,
	Failure = 2
}

// Namespace: System.Security.AccessControl
public abstract class AuditRule : AuthorizationRule // TypeDefIndex: 1210
{
	// Fields
	private AuditFlags auditFlags; // 0x28

	// Properties
	public AuditFlags AuditFlags { get; } // 0x0000000180119420 

	// Constructors
	protected AuditRule(IdentityReference identity, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags auditFlags); // 0x0000000180142DF0

}

// Namespace: System.Security.AccessControl
public abstract class AuthorizationRule // TypeDefIndex: 1211
{
	// Fields
	private IdentityReference identity; // 0x10
	private int accessMask; // 0x1C
	private bool isInherited; // 0x24
	private InheritanceFlags inheritanceFlags; // 0x00
	private PropagationFlags propagationFlags; // 0x11

	// Properties
	public IdentityReference IdentityReference { get; } // 0x00000001800E20D0 
	public InheritanceFlags InheritanceFlags { get; } // 0x00000001800E2F70 
	public bool IsInherited { get; } // 0x0000000180143120 
	public PropagationFlags PropagationFlags { get; } // 0x0000000180143130 
	protected internal int AccessMask { get; } // 0x00000001800ED060 

	// Constructors
	internal AuthorizationRule(); // 0x00000001800E2000
	protected internal AuthorizationRule(IdentityReference identity, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags); // 0x0000000180143030

}

// Namespace: System.Security.AccessControl
public sealed class AuthorizationRuleCollection : ReadOnlyCollectionBase // TypeDefIndex: 1212
{
	// Properties
	public AuthorizationRule Item { get; } // 0x0000000180142F80 

	// Constructors
	private AuthorizationRuleCollection(AuthorizationRule[] rules); // 0x0000000180142F30

	// Methods
	public void CopyTo(AuthorizationRule[] rules, int index); // 0x0000000180142F00
}

// Namespace: System.Security.AccessControl
public sealed class CommonAce : QualifiedAce // TypeDefIndex: 1213
{
	// Properties
	public override int BinaryLength { get; } // 0x00000001801471E0 

	// Constructors
	public CommonAce(AceFlags flags, AceQualifier qualifier, int accessMask, SecurityIdentifier sid, bool isCallback, byte[] opaque); // 0x0000000180147180

	// Methods
	public override void GetBinaryForm(byte[] binaryForm, int offset); // 0x00000001801470E0
	public static int MaxOpaqueLength(bool isCallback); // 0x0000000180147130
}

// Namespace: System.Security.AccessControl
public abstract class CommonAcl : GenericAcl // TypeDefIndex: 1214
{
	// Fields
	private const int default_capacity = 10; // 0x00
	private bool is_container; // 0x11
	private bool is_ds; // 0x18
	private byte revision; // 0x18
	private List`1<GenericAce> list; // 0x10

	// Properties
	public sealed override int BinaryLength { get; } // 0x0000000180147480 
	public sealed override int Count { get; } // 0x00000001801474D0 
	public bool IsCanonical { get; } // 0x0000000180147510 
	public bool IsContainer { get; } // 0x0000000180113840 
	public bool IsDS { get; } // 0x0000000180147560 
	public sealed override GenericAce Item { get; set; } // 0x0000000180147570 0x00000001801475E0
	public sealed override byte Revision { get; } // 0x00000001801475D0 

	// Constructors
	internal CommonAcl(bool isContainer, bool isDS, byte revision); // 0x00000001801473D0
	internal CommonAcl(bool isContainer, bool isDS, byte revision, int capacity); // 0x0000000180147320

	// Methods
	public sealed override void GetBinaryForm(byte[] binaryForm, int offset); // 0x0000000180147230
	public void Purge(SecurityIdentifier sid); // 0x0000000180147280
	public void RemoveInheritedAces(); // 0x00000001801472D0
}

// Namespace: System.Security.AccessControl
public abstract class CommonObjectSecurity : ObjectSecurity // TypeDefIndex: 1215
{
	// Fields
	private List`1<AccessRule> access_rules; // 0x18
	private List`1<AuditRule> audit_rules; // 0x10

	// Constructors
	protected CommonObjectSecurity(bool isContainer); // 0x0000000180147F20

	// Methods
	public AuthorizationRuleCollection GetAccessRules(bool includeExplicit, bool includeInherited, Type targetType); // 0x0000000180147710
	public AuthorizationRuleCollection GetAuditRules(bool includeExplicit, bool includeInherited, Type targetType); // 0x0000000180147760
	protected void AddAccessRule(AccessRule rule); // 0x0000000180147650
	protected bool RemoveAccessRule(AccessRule rule); // 0x0000000180147CF0
	protected void RemoveAccessRuleAll(AccessRule rule); // 0x0000000180147C50
	protected void RemoveAccessRuleSpecific(AccessRule rule); // 0x0000000180147CA0
	protected void ResetAccessRule(AccessRule rule); // 0x0000000180147E30
	protected void SetAccessRule(AccessRule rule); // 0x0000000180147E80
	protected override bool ModifyAccess(AccessControlModification modification, AccessRule rule, out bool modified); // 0x00000001801477B0
	protected void AddAuditRule(AuditRule rule); // 0x00000001801476B0
	protected bool RemoveAuditRule(AuditRule rule); // 0x0000000180147DE0
	protected void RemoveAuditRuleAll(AuditRule rule); // 0x0000000180147D40
	protected void RemoveAuditRuleSpecific(AuditRule rule); // 0x0000000180147D90
	protected void SetAuditRule(AuditRule rule); // 0x0000000180147ED0
	protected override bool ModifyAudit(AccessControlModification modification, AuditRule rule, out bool modified); // 0x0000000180147A00
}

// Namespace: System.Security.AccessControl
public sealed class CommonSecurityDescriptor : GenericSecurityDescriptor // TypeDefIndex: 1216
{
	// Fields
	private bool isContainer; // 0x10
	private bool isDS; // 0x14
	private ControlFlags flags; // 0x20
	private SecurityIdentifier owner; // 0x30
	private SecurityIdentifier group; // 0x10
	private SystemAcl systemAcl; // 0x00
	private DiscretionaryAcl discretionaryAcl; // 0x10

	// Properties
	public override ControlFlags ControlFlags { get; } // 0x0000000180156360 
	public DiscretionaryAcl DiscretionaryAcl { get; set; } // 0x00000001801146E0 0x00000001802F3C20
	public override SecurityIdentifier Group { get; set; } // 0x00000001800EAEB0 0x00000001800EAED0
	public bool IsContainer { get; } // 0x0000000180113840 
	public bool IsDiscretionaryAclCanonical { get; } // 0x00000001802F3B80 
	public bool IsDS { get; } // 0x0000000180147560 
	public bool IsSystemAclCanonical { get; } // 0x00000001802F3BD0 
	public override SecurityIdentifier Owner { get; set; } // 0x00000001800EAEC0 0x00000001800EAEE0
	public SystemAcl SystemAcl { get; set; } // 0x000000018013BF80 0x000000018015B760

	// Constructors
	public CommonSecurityDescriptor(bool isContainer, bool isDS, RawSecurityDescriptor rawSecurityDescriptor); // 0x00000001802F3AC0
	public CommonSecurityDescriptor(bool isContainer, bool isDS, string sddlForm); // 0x00000001802F3B20
	public CommonSecurityDescriptor(bool isContainer, bool isDS, byte[] binaryForm, int offset); // 0x00000001802F3A60
	public CommonSecurityDescriptor(bool isContainer, bool isDS, ControlFlags flags, SecurityIdentifier owner, SecurityIdentifier group, SystemAcl systemAcl, DiscretionaryAcl discretionaryAcl); // 0x00000001802F3990

	// Methods
	public void PurgeAccessControl(SecurityIdentifier sid); // 0x00000001802F3850
	public void PurgeAudit(SecurityIdentifier sid); // 0x00000001802F38A0
	public void SetDiscretionaryAclProtection(bool isProtected, bool preserveInheritance); // 0x00000001802F38F0
	public void SetSystemAclProtection(bool isProtected, bool preserveInheritance); // 0x00000001802F3940
}

// Namespace: System.Security.AccessControl
public sealed class CompoundAce : KnownAce // TypeDefIndex: 1217
{
	// Fields
	private CompoundAceType compound_ace_type; // 0x30

	// Properties
	public override int BinaryLength { get; } // 0x00000001802F3CE0 
	public CompoundAceType CompoundAceType { get; set; } // 0x0000000180124660 0x00000001802F3D30

	// Constructors
	public CompoundAce(AceFlags flags, int accessMask, CompoundAceType compoundAceType, SecurityIdentifier sid); // 0x00000001802F3C80

	// Methods
	public override void GetBinaryForm(byte[] binaryForm, int offset); // 0x00000001802F3C30
}

// Namespace: System.Security.AccessControl
public enum CompoundAceType // TypeDefIndex: 1218
{
	Impersonation = 1
}

// Namespace: System.Security.AccessControl
public enum ControlFlags // TypeDefIndex: 1219
{
	None = 0,
	OwnerDefaulted = 1,
	GroupDefaulted = 2,
	DiscretionaryAclPresent = 4,
	DiscretionaryAclDefaulted = 8,
	SystemAclPresent = 16,
	SystemAclDefaulted = 32,
	DiscretionaryAclUntrusted = 64,
	ServerSecurity = 128,
	DiscretionaryAclAutoInheritRequired = 256,
	SystemAclAutoInheritRequired = 512,
	DiscretionaryAclAutoInherited = 1024,
	SystemAclAutoInherited = 2048,
	DiscretionaryAclProtected = 4096,
	SystemAclProtected = 8192,
	RMControlValid = 16384,
	SelfRelative = 32768
}

// Namespace: System.Security.AccessControl
public sealed class CryptoKeyAccessRule : AccessRule // TypeDefIndex: 1220
{
	// Fields
	private CryptoKeyRights rights; // 0x30

	// Properties
	public CryptoKeyRights CryptoKeyRights { get; } // 0x0000000180124660 

	// Constructors
	public CryptoKeyAccessRule(IdentityReference identity, CryptoKeyRights cryptoKeyRights, AccessControlType type); // 0x00000001802F61B0
	public CryptoKeyAccessRule(string identity, CryptoKeyRights cryptoKeyRights, AccessControlType type); // 0x00000001802F61F0

}

// Namespace: System.Security.AccessControl
public sealed class CryptoKeyAuditRule : AuditRule // TypeDefIndex: 1221
{
	// Fields
	private CryptoKeyRights rights; // 0x30

	// Properties
	public CryptoKeyRights CryptoKeyRights { get; } // 0x0000000180124660 

	// Constructors
	public CryptoKeyAuditRule(IdentityReference identity, CryptoKeyRights cryptoKeyRights, AuditFlags flags); // 0x00000001802F6290
	public CryptoKeyAuditRule(string identity, CryptoKeyRights cryptoKeyRights, AuditFlags flags); // 0x00000001802F62D0

}

// Namespace: System.Security.AccessControl
public enum CryptoKeyRights // TypeDefIndex: 1222
{
	GenericRead = -2147483648,
	ReadData = 1,
	WriteData = 2,
	ReadExtendedAttributes = 8,
	WriteExtendedAttributes = 16,
	ReadAttributes = 128,
	WriteAttributes = 256,
	Delete = 65536,
	ReadPermissions = 131072,
	ChangePermissions = 262144,
	TakeOwnership = 524288,
	Synchronize = 1048576,
	FullControl = 2032027,
	GenericAll = 268435456,
	GenericExecute = 536870912,
	GenericWrite = 1073741824
}

// Namespace: System.Security.AccessControl
public sealed class CryptoKeySecurity : NativeObjectSecurity // TypeDefIndex: 1223
{
	// Properties
	public override Type AccessRightType { get; } // 0x00000001802F67F0 
	public override Type AccessRuleType { get; } // 0x00000001802F6850 
	public override Type AuditRuleType { get; } // 0x00000001802F68B0 

	// Constructors
	public CryptoKeySecurity(); // 0x00000001802F67E0
	public CryptoKeySecurity(CommonSecurityDescriptor securityDescriptor); // 0x00000001802F67E0

	// Methods
	public sealed override AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type); // 0x00000001802F6370
	public void AddAccessRule(CryptoKeyAccessRule rule); // 0x00000001802F63F0
	public bool RemoveAccessRule(CryptoKeyAccessRule rule); // 0x00000001802F65B0
	public void RemoveAccessRuleAll(CryptoKeyAccessRule rule); // 0x00000001802F6510
	public void RemoveAccessRuleSpecific(CryptoKeyAccessRule rule); // 0x00000001802F6560
	public void ResetAccessRule(CryptoKeyAccessRule rule); // 0x00000001802F66F0
	public void SetAccessRule(CryptoKeyAccessRule rule); // 0x00000001802F6740
	public sealed override AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags); // 0x00000001802F6490
	public void AddAuditRule(CryptoKeyAuditRule rule); // 0x00000001802F6440
	public bool RemoveAuditRule(CryptoKeyAuditRule rule); // 0x00000001802F66A0
	public void RemoveAuditRuleAll(CryptoKeyAuditRule rule); // 0x00000001802F6600
	public void RemoveAuditRuleSpecific(CryptoKeyAuditRule rule); // 0x00000001802F6650
	public void SetAuditRule(CryptoKeyAuditRule rule); // 0x00000001802F6790
}

// Namespace: System.Security.AccessControl
public sealed class CustomAce : GenericAce // TypeDefIndex: 1224
{
	// Fields
	private byte[] opaque; // 0x20
	public static readonly int MaxOpaqueLength; // 0x30

	// Properties
	public override int BinaryLength { get; } // 0x00000001802F8380 
	public int OpaqueLength { get; } // 0x00000001802254A0 

	// Constructors
	public CustomAce(AceType type, AceFlags flags, byte[] opaque); // 0x00000001802F8250

	// Methods
	public override void GetBinaryForm(byte[] binaryForm, int offset); // 0x00000001802F80C0
	public byte[] GetOpaque(); // 0x00000001802F8110
	public void SetOpaque(byte[] opaque); // 0x00000001802F8190
}

// Namespace: System.Security.AccessControl
public abstract class DirectoryObjectSecurity : ObjectSecurity // TypeDefIndex: 1225
{
	// Constructors
	protected DirectoryObjectSecurity(); // 0x00000001802FCEB0
	protected DirectoryObjectSecurity(CommonSecurityDescriptor securityDescriptor); // 0x00000001802FCED0

	// Methods
	public virtual AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type, Guid objectType, Guid inheritedObjectType); // 0x00000001802FC960
	public virtual AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags, Guid objectType, Guid inheritedObjectType); // 0x00000001802FCA50
	public AuthorizationRuleCollection GetAccessRules(bool includeExplicit, bool includeInherited, Type targetType); // 0x00000001802FCAA0
	public AuthorizationRuleCollection GetAuditRules(bool includeExplicit, bool includeInherited, Type targetType); // 0x00000001802FCAF0
	protected void AddAccessRule(ObjectAccessRule rule); // 0x00000001802FC9B0
	protected void AddAuditRule(ObjectAuditRule rule); // 0x00000001802FCA00
	protected override bool ModifyAccess(AccessControlModification modification, AccessRule rule, out bool modified); // 0x00000001802FCB40
	protected override bool ModifyAudit(AccessControlModification modification, AuditRule rule, out bool modified); // 0x00000001802FCB90
	protected bool RemoveAccessRule(ObjectAccessRule rule); // 0x00000001802FCC80
	protected void RemoveAccessRuleAll(ObjectAccessRule rule); // 0x00000001802FCBE0
	protected void RemoveAccessRuleSpecific(ObjectAccessRule rule); // 0x00000001802FCC30
	protected bool RemoveAuditRule(ObjectAuditRule rule); // 0x00000001802FCD70
	protected void RemoveAuditRuleAll(ObjectAuditRule rule); // 0x00000001802FCCD0
	protected void RemoveAuditRuleSpecific(ObjectAuditRule rule); // 0x00000001802FCD20
	protected void ResetAccessRule(ObjectAccessRule rule); // 0x00000001802FCDC0
	protected void SetAccessRule(ObjectAccessRule rule); // 0x00000001802FCE10
	protected void SetAuditRule(ObjectAuditRule rule); // 0x00000001802FCE60
}

// Namespace: System.Security.AccessControl
public sealed class DirectorySecurity : FileSystemSecurity // TypeDefIndex: 1226
{
	// Constructors
	public DirectorySecurity(); // 0x00000001802FD000
	public DirectorySecurity(string name, AccessControlSections includeSections); // 0x00000001802FCF80

}

// Namespace: System.Security.AccessControl
public sealed class DiscretionaryAcl : CommonAcl // TypeDefIndex: 1227
{
	// Constructors
	public DiscretionaryAcl(bool isContainer, bool isDS, int capacity); // 0x00000001802FD300
	public DiscretionaryAcl(bool isContainer, bool isDS, RawAcl rawAcl); // 0x00000001802FD2E0
	public DiscretionaryAcl(bool isContainer, bool isDS, byte revision, int capacity); // 0x00000001802FD390

	// Methods
	public void AddAccess(AccessControlType accessType, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags); // 0x00000001802FD060
	public void AddAccess(AccessControlType accessType, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType); // 0x00000001802FD0B0
	public bool RemoveAccess(AccessControlType accessType, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags); // 0x00000001802FD1A0
	public bool RemoveAccess(AccessControlType accessType, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType); // 0x00000001802FD1F0
	public void RemoveAccessSpecific(AccessControlType accessType, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags); // 0x00000001802FD100
	public void RemoveAccessSpecific(AccessControlType accessType, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType); // 0x00000001802FD150
	public void SetAccess(AccessControlType accessType, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags); // 0x00000001802FD290
	public void SetAccess(AccessControlType accessType, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType); // 0x00000001802FD240
}

// Namespace: System.Security.AccessControl
public sealed class EventWaitHandleAccessRule : AccessRule // TypeDefIndex: 1228
{
	// Fields
	private EventWaitHandleRights rights; // 0x30

	// Properties
	public EventWaitHandleRights EventWaitHandleRights { get; } // 0x0000000180124660 

	// Constructors
	public EventWaitHandleAccessRule(IdentityReference identity, EventWaitHandleRights eventRights, AccessControlType type); // 0x00000001802F61B0
	public EventWaitHandleAccessRule(string identity, EventWaitHandleRights eventRights, AccessControlType type); // 0x00000001802FD3A0

}

// Namespace: System.Security.AccessControl
public sealed class EventWaitHandleAuditRule : AuditRule // TypeDefIndex: 1229
{
	// Fields
	private EventWaitHandleRights rights; // 0x30

	// Properties
	public EventWaitHandleRights EventWaitHandleRights { get; } // 0x0000000180124660 

	// Constructors
	public EventWaitHandleAuditRule(IdentityReference identity, EventWaitHandleRights eventRights, AuditFlags flags); // 0x00000001802FD440

}

// Namespace: System.Security.AccessControl
public enum EventWaitHandleRights // TypeDefIndex: 1230
{
	Modify = 2,
	Delete = 65536,
	ReadPermissions = 131072,
	ChangePermissions = 262144,
	TakeOwnership = 524288,
	Synchronize = 1048576,
	FullControl = 2031619
}

// Namespace: System.Security.AccessControl
public sealed class EventWaitHandleSecurity : NativeObjectSecurity // TypeDefIndex: 1231
{
	// Properties
	public override Type AccessRightType { get; } // 0x00000001802FDC60 
	public override Type AccessRuleType { get; } // 0x00000001802FDCC0 
	public override Type AuditRuleType { get; } // 0x00000001802FDD20 

	// Constructors
	public EventWaitHandleSecurity(); // 0x00000001802FDC00

	// Methods
	public override AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type); // 0x00000001802FD610
	public void AddAccessRule(EventWaitHandleAccessRule rule); // 0x00000001802FD690
	public bool RemoveAccessRule(EventWaitHandleAccessRule rule); // 0x00000001802FD9D0
	public void RemoveAccessRuleAll(EventWaitHandleAccessRule rule); // 0x00000001802FD930
	public void RemoveAccessRuleSpecific(EventWaitHandleAccessRule rule); // 0x00000001802FD980
	public void ResetAccessRule(EventWaitHandleAccessRule rule); // 0x00000001802FDB10
	public void SetAccessRule(EventWaitHandleAccessRule rule); // 0x00000001802FDB60
	public override AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags); // 0x00000001802FD730
	public void AddAuditRule(EventWaitHandleAuditRule rule); // 0x00000001802FD6E0
	public bool RemoveAuditRule(EventWaitHandleAuditRule rule); // 0x00000001802FDAC0
	public void RemoveAuditRuleAll(EventWaitHandleAuditRule rule); // 0x00000001802FDA20
	public void RemoveAuditRuleSpecific(EventWaitHandleAuditRule rule); // 0x00000001802FDA70
	public void SetAuditRule(EventWaitHandleAuditRule rule); // 0x00000001802FDBB0
}

// Namespace: System.Security.AccessControl
public sealed class FileSecurity : FileSystemSecurity // TypeDefIndex: 1232
{
	// Constructors
	public FileSecurity(); // 0x00000001802FE130
	public FileSecurity(string fileName, AccessControlSections includeSections); // 0x00000001802FE0B0

}

// Namespace: System.Security.AccessControl
public sealed class FileSystemAccessRule : AccessRule // TypeDefIndex: 1233
{
	// Fields
	private FileSystemRights rights; // 0x30

	// Properties
	public FileSystemRights FileSystemRights { get; } // 0x0000000180124660 

	// Constructors
	public FileSystemAccessRule(IdentityReference identity, FileSystemRights fileSystemRights, AccessControlType type); // 0x00000001802FE240
	public FileSystemAccessRule(string identity, FileSystemRights fileSystemRights, AccessControlType type); // 0x00000001802FE2D0
	public FileSystemAccessRule(IdentityReference identity, FileSystemRights fileSystemRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type); // 0x00000001802FE280
	public FileSystemAccessRule(string identity, FileSystemRights fileSystemRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type); // 0x00000001802FE190

}

// Namespace: System.Security.AccessControl
public sealed class FileSystemAuditRule : AuditRule // TypeDefIndex: 1234
{
	// Fields
	private FileSystemRights rights; // 0x30

	// Properties
	public FileSystemRights FileSystemRights { get; } // 0x0000000180124660 

	// Constructors
	public FileSystemAuditRule(IdentityReference identity, FileSystemRights fileSystemRights, AuditFlags flags); // 0x00000001802F6290
	public FileSystemAuditRule(string identity, FileSystemRights fileSystemRights, AuditFlags flags); // 0x00000001802FE420
	public FileSystemAuditRule(IdentityReference identity, FileSystemRights fileSystemRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags); // 0x00000001802FE4C0
	public FileSystemAuditRule(string identity, FileSystemRights fileSystemRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags); // 0x00000001802FE370

}

// Namespace: System.Security.AccessControl
public enum FileSystemRights // TypeDefIndex: 1235
{
	ListDirectory = 1,
	ReadData = 1,
	CreateFiles = 2,
	WriteData = 2,
	AppendData = 4,
	CreateDirectories = 4,
	ReadExtendedAttributes = 8,
	WriteExtendedAttributes = 16,
	ExecuteFile = 32,
	Traverse = 32,
	DeleteSubdirectoriesAndFiles = 64,
	ReadAttributes = 128,
	WriteAttributes = 256,
	Write = 278,
	Delete = 65536,
	ReadPermissions = 131072,
	Read = 131209,
	ReadAndExecute = 131241,
	Modify = 197055,
	ChangePermissions = 262144,
	TakeOwnership = 524288,
	Synchronize = 1048576,
	FullControl = 2032127
}

// Namespace: System.Security.AccessControl
public abstract class FileSystemSecurity : NativeObjectSecurity // TypeDefIndex: 1236
{
	// Properties
	public override Type AccessRightType { get; } // 0x00000001802FE9B0 
	public override Type AccessRuleType { get; } // 0x00000001802FEA10 
	public override Type AuditRuleType { get; } // 0x00000001802FEA70 

	// Constructors
	internal FileSystemSecurity(bool isContainer); // 0x00000001802FE9A0
	internal FileSystemSecurity(bool isContainer, string name, AccessControlSections includeSections); // 0x00000001802FE9A0

	// Methods
	public sealed override AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type); // 0x00000001802FE510
	public void AddAccessRule(FileSystemAccessRule rule); // 0x00000001802FE5A0
	public bool RemoveAccessRule(FileSystemAccessRule rule); // 0x00000001802FE770
	public void RemoveAccessRuleAll(FileSystemAccessRule rule); // 0x00000001802FE6D0
	public void RemoveAccessRuleSpecific(FileSystemAccessRule rule); // 0x00000001802FE720
	public void ResetAccessRule(FileSystemAccessRule rule); // 0x00000001802FE8B0
	public void SetAccessRule(FileSystemAccessRule rule); // 0x00000001802FE900
	public sealed override AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags); // 0x00000001802FE640
	public void AddAuditRule(FileSystemAuditRule rule); // 0x00000001802FE5F0
	public bool RemoveAuditRule(FileSystemAuditRule rule); // 0x00000001802FE860
	public void RemoveAuditRuleAll(FileSystemAuditRule rule); // 0x00000001802FE7C0
	public void RemoveAuditRuleSpecific(FileSystemAuditRule rule); // 0x00000001802FE810
	public void SetAuditRule(FileSystemAuditRule rule); // 0x00000001802FE950
}

// Namespace: System.Security.AccessControl
public abstract class GenericAce // TypeDefIndex: 1237
{
	// Fields
	private InheritanceFlags inheritance; // 0x10
	private PropagationFlags propagation; // 0x18
	private AceFlags aceflags; // 0x00
	private AceType ace_type; // 0x04

	// Properties
	public AceFlags AceFlags { get; set; } // 0x00000001801249E0 0x00000001801AB4A0
	public AceType AceType { get; } // 0x00000001801AE2C0 
	public AuditFlags AuditFlags { get; } // 0x00000001802FFAA0 
	public abstract int BinaryLength { get; }
	public InheritanceFlags InheritanceFlags { get; } // 0x00000001800ECD10 
	public bool IsInherited { get; } // 0x000000018011A0F0 
	public PropagationFlags PropagationFlags { get; } // 0x0000000180156360 

	// Constructors
	internal GenericAce(InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags); // 0x00000001802FF9E0
	internal GenericAce(AceType type); // 0x00000001802FFA20

	// Methods
	public GenericAce Copy(); // 0x00000001802FF8A0
	public static GenericAce CreateFromBinaryForm(byte[] binaryForm, int offset); // 0x00000001802FF8F0
	public sealed override bool Equals(object o); // 0x00000001802FF940
	public abstract void GetBinaryForm(byte[] binaryForm, int offset);
	public sealed override int GetHashCode(); // 0x00000001802FF990
	public static bool op_Equality(GenericAce left, GenericAce right); // 0x00000001802FFAC0
	public static bool op_Inequality(GenericAce left, GenericAce right); // 0x00000001802FFB10
}

// Namespace: System.Security.AccessControl
public abstract class GenericAcl : IEnumerable, ICollection // TypeDefIndex: 1238
{
	// Fields
	public static readonly byte AclRevision; // 0x00
	public static readonly byte AclRevisionDS; // 0x04
	public static readonly int MaxBinaryLength; // 0x10

	// Properties
	public abstract int BinaryLength { get; }
	public abstract int Count { get; }
	public bool IsSynchronized { get; } // 0x000000018011A0F0 
	public abstract GenericAce Item { get; set; }
	public abstract byte Revision { get; }
	public object SyncRoot { get; } // 0x0000000180123590 

	// Constructors
	protected GenericAcl(); // 0x00000001800E2000
	private static GenericAcl(); // 0x00000001802FFF50

	// Methods
	private void System.Collections.ICollection.CopyTo(Array array, int index); // 0x00000001802FFD60
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x00000001802FFD00
	public void CopyTo(GenericAce[] array, int index); // 0x00000001802FFB60
	public abstract void GetBinaryForm(byte[] binaryForm, int offset);
	public AceEnumerator GetEnumerator(); // 0x00000001802FFD00
}

// Namespace: System.Security.AccessControl
public abstract class GenericSecurityDescriptor // TypeDefIndex: 1239
{
	// Properties
	public int BinaryLength { get; } // 0x00000001803000A0 
	public abstract ControlFlags ControlFlags { get; }
	public abstract SecurityIdentifier Group { get; set; }
	public abstract SecurityIdentifier Owner { get; set; }
	public static byte Revision { get; } // 0x00000001803000F0 

	// Constructors
	protected GenericSecurityDescriptor(); // 0x00000001800E2000

	// Methods
	public void GetBinaryForm(byte[] binaryForm, int offset); // 0x00000001802FFFB0
	public string GetSddlForm(AccessControlSections includeSections); // 0x0000000180300000
	public static bool IsSddlConversionSupported(); // 0x0000000180300050
}

// Namespace: System.Security.AccessControl
public enum InheritanceFlags // TypeDefIndex: 1240
{
	None = 0,
	ContainerInherit = 1,
	ObjectInherit = 2
}

// Namespace: System.Security.AccessControl
public abstract class KnownAce : GenericAce // TypeDefIndex: 1241
{
	// Fields
	private int access_mask; // 0x20
	private SecurityIdentifier identifier; // 0x30

	// Properties
	public int AccessMask { get; set; } // 0x00000001800E2F70 0x000000018018FC20
	public SecurityIdentifier SecurityIdentifier { get; set; } // 0x000000018013BF80 0x000000018015B760

	// Constructors
	internal KnownAce(InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags); // 0x00000001802FF9E0

}

// Namespace: System.Security.AccessControl
public sealed class MutexAccessRule : AccessRule // TypeDefIndex: 1242
{
	// Fields
	private MutexRights rights; // 0x30

	// Properties
	public MutexRights MutexRights { get; } // 0x0000000180124660 

	// Constructors
	public MutexAccessRule(IdentityReference identity, MutexRights eventRights, AccessControlType type); // 0x0000000180304C50
	public MutexAccessRule(string identity, MutexRights eventRights, AccessControlType type); // 0x0000000180304BB0

}

// Namespace: System.Security.AccessControl
public sealed class MutexAuditRule : AuditRule // TypeDefIndex: 1243
{
	// Fields
	private MutexRights rights; // 0x30

	// Properties
	public MutexRights MutexRights { get; } // 0x0000000180124660 

	// Constructors
	public MutexAuditRule(IdentityReference identity, MutexRights eventRights, AuditFlags flags); // 0x00000001802F6290

}

// Namespace: System.Security.AccessControl
public enum MutexRights // TypeDefIndex: 1244
{
	Modify = 1,
	Delete = 65536,
	ReadPermissions = 131072,
	ChangePermissions = 262144,
	TakeOwnership = 524288,
	Synchronize = 1048576,
	FullControl = 2031617
}

// Namespace: System.Security.AccessControl
public sealed class MutexSecurity : NativeObjectSecurity // TypeDefIndex: 1245
{
	// Properties
	public override Type AccessRightType { get; } // 0x0000000180305100 
	public override Type AccessRuleType { get; } // 0x0000000180305160 
	public override Type AuditRuleType { get; } // 0x00000001803051C0 

	// Constructors
	public MutexSecurity(); // 0x00000001802F67E0
	public MutexSecurity(string name, AccessControlSections includeSections); // 0x00000001802F67E0

	// Methods
	public override AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type); // 0x0000000180304C90
	public void AddAccessRule(MutexAccessRule rule); // 0x0000000180304D10
	public bool RemoveAccessRule(MutexAccessRule rule); // 0x0000000180304ED0
	public void RemoveAccessRuleAll(MutexAccessRule rule); // 0x0000000180304E30
	public void RemoveAccessRuleSpecific(MutexAccessRule rule); // 0x0000000180304E80
	public void ResetAccessRule(MutexAccessRule rule); // 0x0000000180305010
	public void SetAccessRule(MutexAccessRule rule); // 0x0000000180305060
	public override AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags); // 0x0000000180304DB0
	public void AddAuditRule(MutexAuditRule rule); // 0x0000000180304D60
	public bool RemoveAuditRule(MutexAuditRule rule); // 0x0000000180304FC0
	public void RemoveAuditRuleAll(MutexAuditRule rule); // 0x0000000180304F20
	public void RemoveAuditRuleSpecific(MutexAuditRule rule); // 0x0000000180304F70
	public void SetAuditRule(MutexAuditRule rule); // 0x00000001803050B0
}

// Namespace: System.Security.AccessControl
public abstract class NativeObjectSecurity : CommonObjectSecurity // TypeDefIndex: 1246
{
	// Constructors
	internal NativeObjectSecurity(); // 0x00000001802F67E0
	protected NativeObjectSecurity(bool isContainer, ResourceType resourceType); // 0x00000001802FE9A0
	protected NativeObjectSecurity(bool isContainer, ResourceType resourceType, ExceptionFromErrorCode exceptionFromErrorCode, object exceptionContext); // 0x00000001802FE9A0
	protected NativeObjectSecurity(bool isContainer, ResourceType resourceType, SafeHandle handle, AccessControlSections includeSections); // 0x00000001802FE9A0
	protected NativeObjectSecurity(bool isContainer, ResourceType resourceType, string name, AccessControlSections includeSections); // 0x00000001802FE9A0
	protected NativeObjectSecurity(bool isContainer, ResourceType resourceType, SafeHandle handle, AccessControlSections includeSections, ExceptionFromErrorCode exceptionFromErrorCode, object exceptionContext); // 0x00000001802FE9A0
	protected NativeObjectSecurity(bool isContainer, ResourceType resourceType, string name, AccessControlSections includeSections, ExceptionFromErrorCode exceptionFromErrorCode, object exceptionContext); // 0x00000001802FE9A0

	// Methods
	protected sealed override void Persist(SafeHandle handle, AccessControlSections includeSections); // 0x0000000180305270
	protected sealed override void Persist(string name, AccessControlSections includeSections); // 0x0000000180305220
	protected void Persist(SafeHandle handle, AccessControlSections includeSections, object exceptionContext); // 0x0000000180305310
	protected void Persist(string name, AccessControlSections includeSections, object exceptionContext); // 0x00000001803052C0
}

// Namespace: 
protected internal delegate Exception ExceptionFromErrorCode(int errorCode, string name, SafeHandle handle, object context); // TypeDefIndex: 1247; 0x00000001802FDE20

// Namespace: System.Security.AccessControl
public abstract class ObjectAccessRule : AccessRule // TypeDefIndex: 1248
{
	// Fields
	private Guid object_type; // 0x30
	private Guid inherited_object_type; // 0x40

	// Properties
	public Guid InheritedObjectType { get; } // 0x00000001803053C0 
	public ObjectAceFlags ObjectFlags { get; } // 0x00000001803053D0 
	public Guid ObjectType { get; } // 0x00000001801A6B50 

	// Constructors
	protected ObjectAccessRule(IdentityReference identity, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, Guid objectType, Guid inheritedObjectType, AccessControlType type); // 0x0000000180305360

}

// Namespace: System.Security.AccessControl
public sealed class ObjectAce : QualifiedAce // TypeDefIndex: 1249
{
	// Fields
	private Guid object_ace_type; // 0x40
	private Guid inherited_object_type; // 0x60
	private ObjectAceFlags object_ace_flags; // 0x10

	// Properties
	public override int BinaryLength { get; } // 0x0000000180305690 
	public Guid InheritedObjectAceType { get; set; } // 0x00000001803056E0 0x00000001803056F0
	public ObjectAceFlags ObjectAceFlags { get; set; } // 0x000000018019E8D0 0x0000000180305700
	public Guid ObjectAceType { get; set; } // 0x00000001803053C0 0x0000000180305710

	// Constructors
	public ObjectAce(AceFlags aceFlags, AceQualifier qualifier, int accessMask, SecurityIdentifier sid, ObjectAceFlags flags, Guid type, Guid inheritedType, bool isCallback, byte[] opaque); // 0x0000000180305570

	// Methods
	public override void GetBinaryForm(byte[] binaryForm, int offset); // 0x00000001803054D0
	public static int MaxOpaqueLength(bool isCallback); // 0x0000000180305520
}

// Namespace: System.Security.AccessControl
public enum ObjectAceFlags // TypeDefIndex: 1250
{
	None = 0,
	ObjectAceTypePresent = 1,
	InheritedObjectAceTypePresent = 2
}

// Namespace: System.Security.AccessControl
public abstract class ObjectAuditRule : AuditRule // TypeDefIndex: 1251
{
	// Fields
	private Guid inherited_object_type; // 0x30
	private Guid object_type; // 0x10

	// Properties
	public Guid InheritedObjectType { get; } // 0x00000001801A6B50 
	public ObjectAceFlags ObjectFlags { get; } // 0x0000000180305780 
	public Guid ObjectType { get; } // 0x00000001803053C0 

	// Constructors
	protected ObjectAuditRule(IdentityReference identity, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, Guid objectType, Guid inheritedObjectType, AuditFlags auditFlags); // 0x0000000180305720

}

// Namespace: System.Security.AccessControl
public abstract class ObjectSecurity // TypeDefIndex: 1252
{
	// Fields
	private bool is_container; // 0x10
	private bool is_ds; // 0x12
	private bool access_rules_modified; // 0x14
	private bool audit_rules_modified; // 0x10
	private bool group_modified; // 0x00
	private bool owner_modified; // 0x30

	// Properties
	public abstract Type AccessRightType { get; }
	public abstract Type AccessRuleType { get; }
	public abstract Type AuditRuleType { get; }
	public bool AreAccessRulesCanonical { get; } // 0x0000000180306000 
	public bool AreAccessRulesProtected { get; } // 0x0000000180306050 
	public bool AreAuditRulesCanonical { get; } // 0x00000001803060A0 
	public bool AreAuditRulesProtected { get; } // 0x00000001803060F0 
	protected bool AccessRulesModified { get; set; } // 0x00000001801475D0 0x000000018018FBF0
	protected bool AuditRulesModified { get; set; } // 0x000000018018FBD0 0x000000018018FC10
	protected bool GroupModified { get; set; } // 0x000000018029EB30 0x000000018029EB40
	protected bool IsContainer { get; } // 0x0000000180113840 
	protected bool IsDS { get; } // 0x0000000180147560 
	protected bool OwnerModified { get; set; } // 0x0000000180306140 0x0000000180306150

	// Constructors
	internal ObjectSecurity(); // 0x00000001800E2000
	protected ObjectSecurity(bool isContainer, bool isDS); // 0x00000001802C64B0

	// Methods
	public abstract AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
	public abstract AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
	public IdentityReference GetGroup(Type targetType); // 0x0000000180305880
	public IdentityReference GetOwner(Type targetType); // 0x00000001803058D0
	public byte[] GetSecurityDescriptorBinaryForm(); // 0x0000000180305920
	public string GetSecurityDescriptorSddlForm(AccessControlSections includeSections); // 0x0000000180305970
	public static bool IsSddlConversionSupported(); // 0x00000001803059C0
	public virtual bool ModifyAccessRule(AccessControlModification modification, AccessRule rule, out bool modified); // 0x0000000180305A10
	public virtual bool ModifyAuditRule(AccessControlModification modification, AuditRule rule, out bool modified); // 0x0000000180305A60
	public virtual void PurgeAccessRules(IdentityReference identity); // 0x0000000180305BA0
	public virtual void PurgeAuditRules(IdentityReference identity); // 0x0000000180305BF0
	public void SetAccessRuleProtection(bool isProtected, bool preserveInheritance); // 0x0000000180305CE0
	public void SetAuditRuleProtection(bool isProtected, bool preserveInheritance); // 0x0000000180305D30
	public void SetGroup(IdentityReference identity); // 0x0000000180305D80
	public void SetOwner(IdentityReference identity); // 0x0000000180305DD0
	public void SetSecurityDescriptorBinaryForm(byte[] binaryForm); // 0x0000000180305E70
	public void SetSecurityDescriptorBinaryForm(byte[] binaryForm, AccessControlSections includeSections); // 0x0000000180305E20
	public void SetSecurityDescriptorSddlForm(string sddlForm); // 0x0000000180305F10
	public void SetSecurityDescriptorSddlForm(string sddlForm, AccessControlSections includeSections); // 0x0000000180305EC0
	protected abstract bool ModifyAccess(AccessControlModification modification, AccessRule rule, out bool modified);
	protected abstract bool ModifyAudit(AccessControlModification modification, AuditRule rule, out bool modified);
	protected virtual void Persist(SafeHandle handle, AccessControlSections includeSections); // 0x0000000180305AB0
	protected virtual void Persist(string name, AccessControlSections includeSections); // 0x0000000180305B00
	protected virtual void Persist(bool enableOwnershipPrivilege, string name, AccessControlSections includeSections); // 0x0000000180305B50
	protected void ReadLock(); // 0x0000000180305C40
	protected void ReadUnlock(); // 0x0000000180305C90
	protected void WriteLock(); // 0x0000000180305F60
	protected void WriteUnlock(); // 0x0000000180305FB0
}

// Namespace: System.Security.AccessControl
[Serializable]
public sealed class PrivilegeNotHeldException : UnauthorizedAccessException, ISerializable // TypeDefIndex: 1253
{
	// Properties
	public string PrivilegeName { get; } // 0x00000001803061E0 

	// Constructors
	public PrivilegeNotHeldException(); // 0x00000001803061C0
	public PrivilegeNotHeldException(string privilege); // 0x00000001803061B0
	public PrivilegeNotHeldException(string privilege, Exception inner); // 0x00000001803061D0

	// Methods
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0000000180306160
}

// Namespace: System.Security.AccessControl
public enum PropagationFlags // TypeDefIndex: 1254
{
	None = 0,
	NoPropagateInherit = 1,
	InheritOnly = 2
}

// Namespace: System.Security.AccessControl
public abstract class QualifiedAce : KnownAce // TypeDefIndex: 1255
{
	// Fields
	private AceQualifier ace_qualifier; // 0x30
	private bool is_callback; // 0x38
	private byte[] opaque; // 0x10

	// Properties
	public AceQualifier AceQualifier { get; } // 0x0000000180124660 
	public bool IsCallback { get; } // 0x0000000180306450 
	public int OpaqueLength { get; } // 0x0000000180306460 

	// Constructors
	internal QualifiedAce(InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AceQualifier aceQualifier, bool isCallback, byte[] opaque); // 0x0000000180306370

	// Methods
	public byte[] GetOpaque(); // 0x0000000180306230
	public void SetOpaque(byte[] opaque); // 0x00000001803062B0
}

// Namespace: System.Security.AccessControl
public sealed class RawAcl : GenericAcl // TypeDefIndex: 1256
{
	// Fields
	private byte revision; // 0x10
	private List`1<GenericAce> list; // 0x30

	// Properties
	public override int BinaryLength { get; } // 0x00000001803066A0 
	public override int Count { get; } // 0x00000001803066F0 
	public override GenericAce Item { get; set; } // 0x0000000180306730 0x0000000180306790
	public override byte Revision { get; } // 0x0000000180113840 

	// Constructors
	public RawAcl(byte revision, int capacity); // 0x0000000180306570
	public RawAcl(byte[] binaryForm, int offset); // 0x0000000180306610

	// Methods
	public override void GetBinaryForm(byte[] binaryForm, int offset); // 0x0000000180306480
	public void InsertAce(int index, GenericAce ace); // 0x00000001803064D0
	public void RemoveAce(int index); // 0x0000000180306510
}

// Namespace: System.Security.AccessControl
public sealed class RawSecurityDescriptor : GenericSecurityDescriptor // TypeDefIndex: 1257
{
	// Properties
	public override ControlFlags ControlFlags { get; } // 0x0000000180306850 
	public RawAcl DiscretionaryAcl { get; set; } // 0x00000001803068A0 0x0000000180306A30
	public override SecurityIdentifier Group { get; set; } // 0x00000001803068F0 0x0000000180306A80
	public override SecurityIdentifier Owner { get; set; } // 0x0000000180306940 0x0000000180306AD0
	public byte ResourceManagerControl { get; set; } // 0x0000000180306990 0x0000000180306B20
	public RawAcl SystemAcl { get; set; } // 0x00000001803069E0 0x0000000180306B70

	// Constructors
	public RawSecurityDescriptor(string sddlForm); // 0x00000001800E2000
	public RawSecurityDescriptor(byte[] binaryForm, int offset); // 0x00000001800E2000
	public RawSecurityDescriptor(ControlFlags flags, SecurityIdentifier owner, SecurityIdentifier group, RawAcl systemAcl, RawAcl discretionaryAcl); // 0x00000001800E2000

	// Methods
	public void SetFlags(ControlFlags flags); // 0x0000000180306800
}

// Namespace: System.Security.AccessControl
public sealed class RegistryAccessRule : AccessRule // TypeDefIndex: 1258
{
	// Fields
	private RegistryRights rights; // 0x30

	// Properties
	public RegistryRights RegistryRights { get; } // 0x0000000180124660 

	// Constructors
	public RegistryAccessRule(IdentityReference identity, RegistryRights registryRights, AccessControlType type); // 0x0000000180304C50
	public RegistryAccessRule(string identity, RegistryRights registryRights, AccessControlType type); // 0x0000000180306CC0
	public RegistryAccessRule(IdentityReference identity, RegistryRights registryRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type); // 0x0000000180306C70
	public RegistryAccessRule(string identity, RegistryRights registryRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type); // 0x0000000180306BC0

}

// Namespace: System.Security.AccessControl
public sealed class RegistryAuditRule : AuditRule // TypeDefIndex: 1259
{
	// Fields
	private RegistryRights rights; // 0x30

	// Properties
	public RegistryRights RegistryRights { get; } // 0x0000000180124660 

	// Constructors
	public RegistryAuditRule(IdentityReference identity, RegistryRights registryRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags); // 0x00000001802FE4C0
	public RegistryAuditRule(string identity, RegistryRights registryRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags); // 0x0000000180306D60

}

// Namespace: System.Security.AccessControl
public enum RegistryRights // TypeDefIndex: 1260
{
	QueryValues = 1,
	SetValue = 2,
	CreateSubKey = 4,
	EnumerateSubKeys = 8,
	Notify = 16,
	CreateLink = 32,
	Delete = 65536,
	ReadPermissions = 131072,
	WriteKey = 131078,
	ReadKey = 131097,
	ExecuteKey = 131097,
	ChangePermissions = 262144,
	TakeOwnership = 524288,
	FullControl = 983103
}

// Namespace: System.Security.AccessControl
public sealed class RegistrySecurity : NativeObjectSecurity // TypeDefIndex: 1261
{
	// Properties
	public override Type AccessRightType { get; } // 0x00000001803072A0 
	public override Type AccessRuleType { get; } // 0x0000000180307300 
	public override Type AuditRuleType { get; } // 0x0000000180307360 

	// Constructors
	public RegistrySecurity(); // 0x00000001802F67E0

	// Methods
	public override AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type); // 0x0000000180306E10
	public void AddAccessRule(RegistryAccessRule rule); // 0x0000000180306EA0
	public void AddAuditRule(RegistryAuditRule rule); // 0x0000000180306EF0
	public override AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags); // 0x0000000180306F40
	public bool RemoveAccessRule(RegistryAccessRule rule); // 0x0000000180307070
	public void RemoveAccessRuleAll(RegistryAccessRule rule); // 0x0000000180306FD0
	public void RemoveAccessRuleSpecific(RegistryAccessRule rule); // 0x0000000180307020
	public bool RemoveAuditRule(RegistryAuditRule rule); // 0x0000000180307160
	public void RemoveAuditRuleAll(RegistryAuditRule rule); // 0x00000001803070C0
	public void RemoveAuditRuleSpecific(RegistryAuditRule rule); // 0x0000000180307110
	public void ResetAccessRule(RegistryAccessRule rule); // 0x00000001803071B0
	public void SetAccessRule(RegistryAccessRule rule); // 0x0000000180307200
	public void SetAuditRule(RegistryAuditRule rule); // 0x0000000180307250
}

// Namespace: System.Security.AccessControl
public enum ResourceType // TypeDefIndex: 1262
{
	Unknown = 0,
	FileObject = 1,
	Service = 2,
	Printer = 3,
	RegistryKey = 4,
	LMShare = 5,
	KernelObject = 6,
	WindowObject = 7,
	DSObject = 8,
	DSObjectAll = 9,
	ProviderDefined = 10,
	WmiGuidObject = 11,
	RegistryWow6432Key = 12
}

// Namespace: System.Security.AccessControl
public enum SecurityInfos // TypeDefIndex: 1263
{
	Owner = 1,
	Group = 2,
	DiscretionaryAcl = 4,
	SystemAcl = 8
}

// Namespace: System.Security.AccessControl
public sealed class SystemAcl : CommonAcl // TypeDefIndex: 1264
{
	// Constructors
	public SystemAcl(bool isContainer, bool isDS, int capacity); // 0x0000000180307640
	public SystemAcl(bool isContainer, bool isDS, RawAcl rawAcl); // 0x0000000180307660
	public SystemAcl(bool isContainer, bool isDS, byte revision, int capacity); // 0x00000001802FD390

	// Methods
	public void AddAudit(AuditFlags auditFlags, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags); // 0x00000001803073C0
	public void AddAudit(AuditFlags auditFlags, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType); // 0x0000000180307410
	public bool RemoveAudit(AuditFlags auditFlags, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags); // 0x0000000180307500
	public bool RemoveAudit(AuditFlags auditFlags, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType); // 0x0000000180307550
	public void RemoveAuditSpecific(AuditFlags auditFlags, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags); // 0x00000001803074B0
	public void RemoveAuditSpecific(AuditFlags auditFlags, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType); // 0x0000000180307460
	public void SetAudit(AuditFlags auditFlags, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags); // 0x00000001803075A0
	public void SetAudit(AuditFlags auditFlags, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType); // 0x00000001803075F0
}

// Namespace: System.Security.Cryptography.X509Certificates
[Serializable]
public class X509Certificate : ISerializable, IDeserializationCallback // TypeDefIndex: 1265
{
	// Fields
	private X509Certificate x509; // 0x10
	private bool hideDates; // 0x20
	private byte[] cachedCertificateHash; // 0x30
	private string issuer_name; // 0x10
	private string subject_name; // 0x20

	// Properties
	public string Issuer { get; } // 0x00000001802BE890 
	public string Subject { get; } // 0x00000001802BE960 
	public IntPtr Handle { get; } // 0x00000001802BE860 

	// Constructors
	internal X509Certificate(byte[] data, bool dates); // 0x00000001802BE2B0
	public X509Certificate(byte[] data); // 0x00000001802BE810
	public X509Certificate(IntPtr handle); // 0x00000001802BE760
	public X509Certificate(X509Certificate cert); // 0x00000001802BE310
	public X509Certificate(); // 0x00000001800E2000
	public X509Certificate(byte[] rawData, string password); // 0x00000001802BE250
	public X509Certificate(byte[] rawData, SecureString password); // 0x00000001802BE6A0
	public X509Certificate(byte[] rawData, string password, X509KeyStorageFlags keyStorageFlags); // 0x00000001802BE640
	public X509Certificate(byte[] rawData, SecureString password, X509KeyStorageFlags keyStorageFlags); // 0x00000001802BE4F0
	public X509Certificate(string fileName); // 0x00000001802BE440
	public X509Certificate(string fileName, string password); // 0x00000001802BE700
	public X509Certificate(string fileName, SecureString password); // 0x00000001802BE490
	public X509Certificate(string fileName, string password, X509KeyStorageFlags keyStorageFlags); // 0x00000001802BE3E0
	public X509Certificate(string fileName, SecureString password, X509KeyStorageFlags keyStorageFlags); // 0x00000001802BE1F0
	public X509Certificate(SerializationInfo info, StreamingContext context); // 0x00000001802BE550

	// Methods
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender); // 0x00000001800EA7B0
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00000001802BDE80
	private string tostr(byte[] data); // 0x00000001802BEA30
	public static X509Certificate CreateFromCertFile(string filename); // 0x00000001802BC620
	public static X509Certificate CreateFromSignedFile(string filename); // 0x00000001802BC6B0
	private void InitFromHandle(IntPtr handle); // 0x00000001802BDBA0
	public virtual bool Equals(X509Certificate other); // 0x00000001802BC940
	public virtual byte[] GetCertHash(); // 0x00000001802BCE90
	public virtual string GetCertHashString(); // 0x00000001802BCE60
	public virtual string GetEffectiveDateString(); // 0x00000001802BD010
	public virtual string GetExpirationDateString(); // 0x00000001802BD0E0
	public virtual string GetFormat(); // 0x00000001802BD1B0
	public override int GetHashCode(); // 0x00000001802BD1E0
	public virtual string GetIssuerName(); // 0x00000001802BD2B0
	public virtual string GetKeyAlgorithm(); // 0x00000001802BD450
	public virtual byte[] GetKeyAlgorithmParameters(); // 0x00000001802BD370
	public virtual string GetKeyAlgorithmParametersString(); // 0x00000001802BD340
	public virtual string GetName(); // 0x00000001802BD4E0
	public virtual byte[] GetPublicKey(); // 0x00000001802BD5A0
	public virtual string GetPublicKeyString(); // 0x00000001802BD570
	public virtual byte[] GetRawCertData(); // 0x00000001802BD6D0
	public virtual string GetRawCertDataString(); // 0x00000001802BD630
	public virtual byte[] GetSerialNumber(); // 0x00000001802BD7B0
	public virtual string GetSerialNumberString(); // 0x00000001802BD760
	public override string ToString(); // 0x00000001802BDEF0
	public virtual string ToString(bool fVerbose); // 0x00000001802BDF00
	private static byte[] Load(string fileName); // 0x00000001802BDD00
	public override bool Equals(object obj); // 0x00000001802BC8A0
	public virtual byte[] Export(X509ContentType contentType); // 0x00000001802BCB50
	public virtual byte[] Export(X509ContentType contentType, string password); // 0x00000001802BCDB0
	public virtual byte[] Export(X509ContentType contentType, SecureString password); // 0x00000001802BCB10
	internal byte[] Export(X509ContentType contentType, byte[] password); // 0x00000001802BCB60
	public virtual void Import(byte[] rawData); // 0x00000001802BDAB0
	public virtual void Import(byte[] rawData, string password, X509KeyStorageFlags keyStorageFlags); // 0x00000001802BD840
	public virtual void Import(byte[] rawData, SecureString password, X509KeyStorageFlags keyStorageFlags); // 0x00000001802BDAE0
	public virtual void Import(string fileName); // 0x00000001802BDB00
	public virtual void Import(string fileName, string password, X509KeyStorageFlags keyStorageFlags); // 0x00000001802BDB40
	public virtual void Import(string fileName, SecureString password, X509KeyStorageFlags keyStorageFlags); // 0x00000001802BDA60
	public virtual void Reset(); // 0x00000001802BDE60
}

// Namespace: 
internal struct CertificateContext // TypeDefIndex: 1266
{
	// Fields
	public uint dwCertEncodingType; // 0x10
	public IntPtr pbCertEncoded; // 0x20
	public uint cbCertEncoded; // 0x30
	public IntPtr pCertInfo; // 0x10
	public IntPtr hCertStore; // 0x00

}

// Namespace: System.Security.Cryptography.X509Certificates
public enum X509ContentType // TypeDefIndex: 1267
{
	Unknown = 0,
	Cert = 1,
	SerializedCert = 2,
	Pfx = 3,
	Pkcs12 = 3,
	SerializedStore = 4,
	Pkcs7 = 5,
	Authenticode = 6
}

// Namespace: System.Security.Cryptography.X509Certificates
[Serializable]
public enum X509KeyStorageFlags // TypeDefIndex: 1268
{
	DefaultKeySet = 0,
	UserKeySet = 1,
	MachineKeySet = 2,
	Exportable = 4,
	UserProtected = 8,
	PersistKeySet = 16
}

// Namespace: System.Security.Cryptography
public abstract class AsymmetricAlgorithm : IDisposable // TypeDefIndex: 1269
{
	// Fields
	protected int KeySizeValue; // 0x10
	protected KeySizes[] LegalKeySizesValue; // 0x00

	// Properties
	public abstract string KeyExchangeAlgorithm { get; }
	public virtual int KeySize { get; set; } // 0x00000001800ECD10 0x00000001802F22A0
	public virtual KeySizes[] LegalKeySizes { get; } // 0x00000001800EAEC0 
	public abstract string SignatureAlgorithm { get; }

	// Constructors
	protected AsymmetricAlgorithm(); // 0x00000001800E2000

	// Methods
	private void System.IDisposable.Dispose(); // 0x000000018013F2D0
	public void Clear(); // 0x00000001802F1F50
	protected abstract void Dispose(bool disposing);
	public abstract void FromXmlString(string xmlString);
	public abstract string ToXmlString(bool includePrivateParameters);
	public static AsymmetricAlgorithm Create(); // 0x00000001802F1F70
	public static AsymmetricAlgorithm Create(string algName); // 0x00000001802F2070
	internal static byte[] GetNamedParam(string xml, string param); // 0x00000001802F2150
}

// Namespace: System.Security.Cryptography
public abstract class AsymmetricKeyExchangeDeformatter // TypeDefIndex: 1270
{
	// Properties
	public abstract string Parameters { get; set; }

	// Constructors
	protected AsymmetricKeyExchangeDeformatter(); // 0x00000001800E2000

	// Methods
	public abstract byte[] DecryptKeyExchange(byte[] rgb);
	public abstract void SetKey(AsymmetricAlgorithm key);
}

// Namespace: System.Security.Cryptography
public abstract class AsymmetricKeyExchangeFormatter // TypeDefIndex: 1271
{
	// Properties
	public abstract string Parameters { get; }

	// Constructors
	protected AsymmetricKeyExchangeFormatter(); // 0x00000001800E2000

	// Methods
	public abstract byte[] CreateKeyExchange(byte[] data);
	public abstract byte[] CreateKeyExchange(byte[] data, Type symAlgType);
	public abstract void SetKey(AsymmetricAlgorithm key);
}

// Namespace: System.Security.Cryptography
public abstract class AsymmetricSignatureDeformatter // TypeDefIndex: 1272
{
	// Constructors
	protected AsymmetricSignatureDeformatter(); // 0x00000001800E2000

	// Methods
	public abstract void SetHashAlgorithm(string strName);
	public abstract void SetKey(AsymmetricAlgorithm key);
	public abstract bool VerifySignature(byte[] rgbHash, byte[] rgbSignature);
	public virtual bool VerifySignature(HashAlgorithm hash, byte[] rgbSignature); // 0x00000001802F23A0
}

// Namespace: System.Security.Cryptography
public abstract class AsymmetricSignatureFormatter // TypeDefIndex: 1273
{
	// Constructors
	protected AsymmetricSignatureFormatter(); // 0x00000001800E2000

	// Methods
	public abstract void SetHashAlgorithm(string strName);
	public abstract void SetKey(AsymmetricAlgorithm key);
	public abstract byte[] CreateSignature(byte[] rgbHash);
	public virtual byte[] CreateSignature(HashAlgorithm hash); // 0x00000001802F2480
}

// Namespace: System.Security.Cryptography
internal static class Base64Constants // TypeDefIndex: 1274
{
	// Fields
	public static readonly byte[] EncodeTable; // 0x00
	public static readonly byte[] DecodeTable; // 0x10

	// Constructors
	private static Base64Constants(); // 0x00000001802F2550

}

// Namespace: System.Security.Cryptography
[Serializable]
public enum CipherMode // TypeDefIndex: 1275
{
	CBC = 1,
	ECB = 2,
	OFB = 3,
	CFB = 4,
	CTS = 5
}

// Namespace: System.Security.Cryptography
public sealed class CryptoAPITransform : IDisposable, ICryptoTransform // TypeDefIndex: 1276
{
	// Fields
	private bool m_disposed; // 0x10

	// Properties
	public bool CanReuseTransform { get; } // 0x000000018010E420 
	public bool CanTransformMultipleBlocks { get; } // 0x000000018010E420 
	public int InputBlockSize { get; } // 0x00000001800EA8C0 
	public IntPtr KeyHandle { get; } // 0x00000001802F3D60 
	public int OutputBlockSize { get; } // 0x00000001800EA8C0 

	// Constructors
	internal CryptoAPITransform(); // 0x000000018023C6F0

	// Methods
	private void System.IDisposable.Dispose(); // 0x00000001802F3D40
	public void Clear(); // 0x00000001802BAAE0
	private void Dispose(bool disposing); // 0x00000001802BAAE0
	public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset); // 0x00000001800EA8C0
	public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x00000001800EA8C0
	public void Reset(); // 0x00000001800EA7B0
}

// Namespace: System.Security.Cryptography
public class CryptoConfig // TypeDefIndex: 1277
{
	// Fields
	private const string defaultNamespace = "System.Security.Cryptography."; // 0x00
	private const string defaultSHA1 = "System.Security.Cryptography.SHA1CryptoServiceProvider"; // 0x00
	private const string defaultMD5 = "System.Security.Cryptography.MD5CryptoServiceProvider"; // 0x00
	private const string defaultSHA256 = "System.Security.Cryptography.SHA256Managed"; // 0x00
	private const string defaultSHA384 = "System.Security.Cryptography.SHA384Managed"; // 0x00
	private const string defaultSHA512 = "System.Security.Cryptography.SHA512Managed"; // 0x00
	private const string defaultRSA = "System.Security.Cryptography.RSACryptoServiceProvider"; // 0x00
	private const string defaultDSA = "System.Security.Cryptography.DSACryptoServiceProvider"; // 0x00
	private const string defaultDES = "System.Security.Cryptography.DESCryptoServiceProvider"; // 0x00
	private const string default3DES = "System.Security.Cryptography.TripleDESCryptoServiceProvider"; // 0x00
	private const string defaultRC2 = "System.Security.Cryptography.RC2CryptoServiceProvider"; // 0x00
	private const string defaultAES = "System.Security.Cryptography.RijndaelManaged"; // 0x00
	private const string defaultRNG = "System.Security.Cryptography.RNGCryptoServiceProvider"; // 0x00
	private const string defaultHMAC = "System.Security.Cryptography.HMACSHA1"; // 0x00
	private const string defaultMAC3DES = "System.Security.Cryptography.MACTripleDES"; // 0x00
	private const string defaultDSASigDesc = "System.Security.Cryptography.DSASignatureDescription"; // 0x00
	private const string defaultRSASigDesc = "System.Security.Cryptography.RSAPKCS1SHA1SignatureDescription"; // 0x00
	private const string defaultRIPEMD160 = "System.Security.Cryptography.RIPEMD160Managed"; // 0x00
	private const string defaultHMACMD5 = "System.Security.Cryptography.HMACMD5"; // 0x00
	private const string defaultHMACRIPEMD160 = "System.Security.Cryptography.HMACRIPEMD160"; // 0x00
	private const string defaultHMACSHA256 = "System.Security.Cryptography.HMACSHA256"; // 0x00
	private const string defaultHMACSHA384 = "System.Security.Cryptography.HMACSHA384"; // 0x00
	private const string defaultHMACSHA512 = "System.Security.Cryptography.HMACSHA512"; // 0x00
	private const string defaultC14N = "System.Security.Cryptography.Xml.XmlDsigC14NTransform, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	private const string defaultC14NWithComments = "System.Security.Cryptography.Xml.XmlDsigC14NWithCommentsTransform, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	private const string defaultBase64 = "System.Security.Cryptography.Xml.XmlDsigBase64Transform, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	private const string defaultXPath = "System.Security.Cryptography.Xml.XmlDsigXPathTransform, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	private const string defaultXslt = "System.Security.Cryptography.Xml.XmlDsigXsltTransform, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	private const string defaultEnveloped = "System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	private const string defaultXmlDecryption = "System.Security.Cryptography.Xml.XmlDecryptionTransform, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	private const string defaultExcC14N = "System.Security.Cryptography.Xml.XmlDsigExcC14NTransform, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	private const string defaultExcC14NWithComments = "System.Security.Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	private const string defaultX509Data = "System.Security.Cryptography.Xml.KeyInfoX509Data, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	private const string defaultKeyName = "System.Security.Cryptography.Xml.KeyInfoName, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	private const string defaultKeyValueDSA = "System.Security.Cryptography.Xml.DSAKeyValue, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	private const string defaultKeyValueRSA = "System.Security.Cryptography.Xml.RSAKeyValue, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	private const string defaultRetrievalMethod = "System.Security.Cryptography.Xml.KeyInfoRetrievalMethod, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	private const string managedSHA1 = "System.Security.Cryptography.SHA1Managed"; // 0x00
	private const string oidSHA1 = "1.3.14.3.2.26"; // 0x00
	private const string oidMD5 = "1.2.840.113549.2.5"; // 0x00
	private const string oidSHA256 = "2.16.840.1.101.3.4.2.1"; // 0x00
	private const string oidSHA384 = "2.16.840.1.101.3.4.2.2"; // 0x00
	private const string oidSHA512 = "2.16.840.1.101.3.4.2.3"; // 0x00
	private const string oidDSA = "1.2.840.10040.4.1"; // 0x00
	private const string oidDES = "1.3.14.3.2.7"; // 0x00
	private const string oid3DES = "1.2.840.113549.3.7"; // 0x00
	private const string oidRC2 = "1.2.840.113549.3.2"; // 0x00
	private const string oid3DESKeyWrap = "1.2.840.113549.1.9.16.3.6"; // 0x00
	private const string nameSHA1a = "SHA"; // 0x00
	private const string nameSHA1b = "SHA1"; // 0x00
	private const string nameSHA1c = "System.Security.Cryptography.SHA1"; // 0x00
	private const string nameSHA1d = "System.Security.Cryptography.HashAlgorithm"; // 0x00
	private const string nameMD5a = "MD5"; // 0x00
	private const string nameMD5b = "System.Security.Cryptography.MD5"; // 0x00
	private const string nameSHA256a = "SHA256"; // 0x00
	private const string nameSHA256b = "SHA-256"; // 0x00
	private const string nameSHA256c = "System.Security.Cryptography.SHA256"; // 0x00
	private const string nameSHA384a = "SHA384"; // 0x00
	private const string nameSHA384b = "SHA-384"; // 0x00
	private const string nameSHA384c = "System.Security.Cryptography.SHA384"; // 0x00
	private const string nameSHA512a = "SHA512"; // 0x00
	private const string nameSHA512b = "SHA-512"; // 0x00
	private const string nameSHA512c = "System.Security.Cryptography.SHA512"; // 0x00
	private const string nameRSAa = "RSA"; // 0x00
	private const string nameRSAb = "System.Security.Cryptography.RSA"; // 0x00
	private const string nameRSAc = "System.Security.Cryptography.AsymmetricAlgorithm"; // 0x00
	private const string nameDSAa = "DSA"; // 0x00
	private const string nameDSAb = "System.Security.Cryptography.DSA"; // 0x00
	private const string nameDESa = "DES"; // 0x00
	private const string nameDESb = "System.Security.Cryptography.DES"; // 0x10
	private const string name3DESa = "3DES"; // 0x10
	private const string name3DESb = "TripleDES"; // 0x20
	private const string name3DESc = "Triple DES"; // 0x30
	private const string name3DESd = "System.Security.Cryptography.TripleDES"; // 0x10
	private const string nameRC2a = "RC2"; // 0x20
	private const string nameRC2b = "System.Security.Cryptography.RC2"; // 0x30
	private const string nameAESa = "Rijndael"; // 0x34
	private const string nameAESb = "System.Security.Cryptography.Rijndael"; // 0x40
	private const string nameAESc = "System.Security.Cryptography.SymmetricAlgorithm"; // 0x50
	private const string nameRNGa = "RandomNumberGenerator"; // 0x5C
	private const string nameRNGb = "System.Security.Cryptography.RandomNumberGenerator"; // 0x68
	private const string nameKeyHasha = "System.Security.Cryptography.KeyedHashAlgorithm"; // 0x10
	private const string nameHMACSHA1a = "HMACSHA1"; // 0x00
	private const string nameHMACSHA1b = "System.Security.Cryptography.HMACSHA1"; // 0x10
	private const string nameMAC3DESa = "MACTripleDES"; // 0x10
	private const string nameMAC3DESb = "System.Security.Cryptography.MACTripleDES"; // 0x20
	private const string name3DESKeyWrap = "TripleDESKeyWrap"; // 0x30
	private const string nameRIPEMD160a = "RIPEMD160"; // 0x40
	private const string nameRIPEMD160b = "RIPEMD-160"; // 0x10
	private const string nameRIPEMD160c = "System.Security.Cryptography.RIPEMD160"; // 0x00
	private const string nameHMACa = "HMAC"; // 0x00
	private const string nameHMACb = "System.Security.Cryptography.HMAC"; // 0x00
	private const string nameHMACMD5a = "HMACMD5"; // 0x00
	private const string nameHMACMD5b = "System.Security.Cryptography.HMACMD5"; // 0x00
	private const string nameHMACRIPEMD160a = "HMACRIPEMD160"; // 0x08
	private const string nameHMACRIPEMD160b = "System.Security.Cryptography.HMACRIPEMD160"; // 0x00
	private const string nameHMACSHA256a = "HMACSHA256"; // 0x08
	private const string nameHMACSHA256b = "System.Security.Cryptography.HMACSHA256"; // 0x58
	private const string nameHMACSHA384a = "HMACSHA384"; // 0x68
	private const string nameHMACSHA384b = "System.Security.Cryptography.HMACSHA384"; // 0x18
	private const string nameHMACSHA512a = "HMACSHA512"; // 0x28
	private const string nameHMACSHA512b = "System.Security.Cryptography.HMACSHA512"; // 0x38
	private const string urlXmlDsig = "http://www.w3.org/2000/09/xmldsig#"; // 0x00
	private const string urlDSASHA1 = "http://www.w3.org/2000/09/xmldsig#dsa-sha1"; // 0x28
	private const string urlRSASHA1 = "http://www.w3.org/2000/09/xmldsig#rsa-sha1"; // 0x2A
	private const string urlSHA1 = "http://www.w3.org/2000/09/xmldsig#sha1"; // 0x30
	private const string urlC14N = "http://www.w3.org/TR/2001/REC-xml-c14n-20010315"; // 0x10
	private const string urlC14NWithComments = "http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments"; // 0x20
	private const string urlBase64 = "http://www.w3.org/2000/09/xmldsig#base64"; // 0x30
	private const string urlXPath = "http://www.w3.org/TR/1999/REC-xpath-19991116"; // 0x40
	private const string urlXslt = "http://www.w3.org/TR/1999/REC-xslt-19991116"; // 0x10
	private const string urlEnveloped = "http://www.w3.org/2000/09/xmldsig#enveloped-signature"; // 0x10
	private const string urlXmlDecryption = "http://www.w3.org/2002/07/decrypt#XML"; // 0x00
	private const string urlExcC14NWithComments = "http://www.w3.org/2001/10/xml-exc-c14n#WithComments"; // 0x00
	private const string urlExcC14N = "http://www.w3.org/2001/10/xml-exc-c14n#"; // 0x18
	private const string urlSHA256 = "http://www.w3.org/2001/04/xmlenc#sha256"; // 0x24
	private const string urlSHA512 = "http://www.w3.org/2001/04/xmlenc#sha512"; // 0x30
	private const string urlHMACSHA256 = "http://www.w3.org/2001/04/xmldsig-more#hmac-sha256"; // 0x40
	private const string urlHMACSHA384 = "http://www.w3.org/2001/04/xmldsig-more#hmac-sha384"; // 0x50
	private const string urlHMACSHA512 = "http://www.w3.org/2001/04/xmldsig-more#hmac-sha512"; // 0x00
	private const string urlHMACRIPEMD160 = "http://www.w3.org/2001/04/xmldsig-more#hmac-ripemd160"; // 0x00
	private const string urlX509Data = "http://www.w3.org/2000/09/xmldsig# X509Data"; // 0x10
	private const string urlKeyName = "http://www.w3.org/2000/09/xmldsig# KeyName"; // 0x1C
	private const string urlKeyValueDSA = "http://www.w3.org/2000/09/xmldsig# KeyValue/DSAKeyValue"; // 0x10
	private const string urlKeyValueRSA = "http://www.w3.org/2000/09/xmldsig# KeyValue/RSAKeyValue"; // 0x00
	private const string urlRetrievalMethod = "http://www.w3.org/2000/09/xmldsig# RetrievalMethod"; // 0x10
	private const string oidX509SubjectKeyIdentifier = "2.5.29.14"; // 0x18
	private const string oidX509KeyUsage = "2.5.29.15"; // 0x30
	private const string oidX509BasicConstraints = "2.5.29.19"; // 0x40
	private const string oidX509EnhancedKeyUsage = "2.5.29.37"; // 0x00
	private const string nameX509SubjectKeyIdentifier = "System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"; // 0x28
	private const string nameX509KeyUsage = "System.Security.Cryptography.X509Certificates.X509KeyUsageExtension, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"; // 0x38
	private const string nameX509BasicConstraints = "System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"; // 0x48
	private const string nameX509EnhancedKeyUsage = "System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"; // 0x10
	private const string nameX509Chain = "X509Chain"; // 0x10
	private const string defaultX509Chain = "System.Security.Cryptography.X509Certificates.X509Chain, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"; // 0x00
	private static object lockObject; // 0x00
	private static Hashtable algorithms; // 0x10
	private static Hashtable oid; // 0x20

	// Constructors
	public CryptoConfig(); // 0x00000001800E2000
	private static CryptoConfig(); // 0x00000001802F5850

	// Methods
	private static void Initialize(); // 0x00000001802F4680
	private static void LoadConfig(string filename, Hashtable algorithms, Hashtable oid); // 0x00000001802F54A0
	public static object CreateFromName(string name); // 0x00000001802F4020
	public static object CreateFromName(string name, object[] args); // 0x00000001802F3D90
	public static string MapNameToOID(string name); // 0x00000001802F5650
	public static byte[] EncodeOID(string str); // 0x00000001802F4210
	private static byte[] EncodeLongNumber(long x); // 0x00000001802F4080
}

// Namespace: 
private class CryptoHandler : IContentHandler // TypeDefIndex: 1278
{
	// Fields
	private Hashtable algorithms; // 0x10
	private Hashtable oid; // 0x20
	private Hashtable names; // 0x30
	private Hashtable classnames; // 0x10
	private int level; // 0x20

	// Constructors
	public CryptoHandler(Hashtable algorithms, Hashtable oid); // 0x00000001802F6120

	// Methods
	public void OnStartParsing(SmallXmlParser parser); // 0x00000001800EA7B0
	public void OnEndParsing(SmallXmlParser parser); // 0x00000001802F5BA0
	private string Get(IAttrList attrs, string name); // 0x00000001802F58B0
	public void OnStartElement(string name, IAttrList attrs); // 0x00000001802F5DC0
	public void OnEndElement(string name); // 0x00000001802F5A30
	public void OnProcessingInstruction(string name, string text); // 0x00000001800EA7B0
	public void OnChars(string text); // 0x00000001800EA7B0
	public void OnIgnorableWhitespace(string text); // 0x00000001800EA7B0
}

// Namespace: System.Security.Cryptography
public class CryptoStream : Stream // TypeDefIndex: 1279
{
	// Fields
	private Stream _stream; // 0x10
	private ICryptoTransform _transform; // 0x20
	private CryptoStreamMode _mode; // 0x30
	private byte[] _currentBlock; // 0x34
	private bool _disposed; // 0x40
	private bool _flushedFinalBlock; // 0x50
	private int _partialCount; // 0x5C
	private bool _endOfStream; // 0x68
	private byte[] _waitingBlock; // 0x10
	private int _waitingCount; // 0x00
	private byte[] _transformedBlock; // 0x10
	private int _transformedPos; // 0x10
	private int _transformedCount; // 0x20
	private byte[] _workingBlock; // 0x30
	private int _workingCount; // 0x40

	// Properties
	public override bool CanRead { get; } // 0x00000001802F79B0 
	public override bool CanSeek { get; } // 0x000000018011A0F0 
	public override bool CanWrite { get; } // 0x0000000180192930 
	public override long Length { get; } // 0x00000001802F79C0 
	public override long Position { get; set; } // 0x00000001802F7A20 0x00000001802F7A80

	// Constructors
	public CryptoStream(Stream stream, ICryptoTransform transform, CryptoStreamMode mode); // 0x00000001802F7790

	// Methods
	protected override void Finalize(); // 0x00000001802BAAF0
	public void Clear(); // 0x00000001802BB1E0
	public override void Close(); // 0x00000001802F6910
	public override int Read(out byte[] buffer, int offset, int count); // 0x00000001802F6BC0
	public override void Write(byte[] buffer, int offset, int count); // 0x00000001802F7230
	public override void Flush(); // 0x00000001802F6BA0
	public void FlushFinalBlock(); // 0x00000001802F69D0
	public override long Seek(long offset, SeekOrigin origin); // 0x00000001802F7170
	public override void SetLength(long value); // 0x00000001802F71D0
	protected override void Dispose(bool disposing); // 0x00000001802F6960
}

// Namespace: System.Security.Cryptography
[Serializable]
public enum CryptoStreamMode // TypeDefIndex: 1280
{
	Read = 0,
	Write = 1
}

// Namespace: System.Security.Cryptography
[Serializable]
public class CryptographicException : SystemException, _Exception // TypeDefIndex: 1281
{
	// Constructors
	public CryptographicException(); // 0x00000001802F7BE0
	public CryptographicException(int hr); // 0x00000001802F7AE0
	public CryptographicException(string message); // 0x00000001802F7BA0
	public CryptographicException(string message, Exception inner); // 0x00000001802F7BC0
	public CryptographicException(string format, string insert); // 0x00000001802F7B10
	protected CryptographicException(SerializationInfo info, StreamingContext context); // 0x000000018010E170

}

// Namespace: System.Security.Cryptography
[Serializable]
public class CryptographicUnexpectedOperationException : CryptographicException // TypeDefIndex: 1282
{
	// Constructors
	public CryptographicUnexpectedOperationException(); // 0x00000001802F7C70
	public CryptographicUnexpectedOperationException(string message); // 0x00000001802F7C30
	public CryptographicUnexpectedOperationException(string message, Exception inner); // 0x00000001802F7C50
	public CryptographicUnexpectedOperationException(string format, string insert); // 0x00000001802F7CC0
	protected CryptographicUnexpectedOperationException(SerializationInfo info, StreamingContext context); // 0x000000018010E170

}

// Namespace: System.Security.Cryptography
public sealed class CspKeyContainerInfo // TypeDefIndex: 1283
{
	// Fields
	private CspParameters _params; // 0x10
	internal bool _random; // 0x10

	// Properties
	public bool Accessible { get; } // 0x000000018010E420 
	public CryptoKeySecurity CryptoKeySecurity { get; } // 0x00000001800EA8C0 
	public bool Exportable { get; } // 0x000000018010E420 
	public bool HardwareDevice { get; } // 0x000000018011A0F0 
	public string KeyContainerName { get; } // 0x00000001802F7D80 
	public KeyNumber KeyNumber { get; } // 0x00000001802F7DA0 
	public bool MachineKeyStore { get; } // 0x000000018011A0F0 
	public bool Protected { get; } // 0x000000018011A0F0 
	public string ProviderName { get; } // 0x00000001802F7DC0 
	public int ProviderType { get; } // 0x00000001802F7DE0 
	public bool RandomlyGenerated { get; } // 0x00000001801249E0 
	public bool Removable { get; } // 0x000000018011A0F0 
	public string UniqueKeyContainerName { get; } // 0x00000001802F7E00 

	// Constructors
	public CspKeyContainerInfo(CspParameters parameters); // 0x00000001802F7D50

}

// Namespace: System.Security.Cryptography
public sealed class CspParameters // TypeDefIndex: 1284
{
	// Fields
	private CspProviderFlags _Flags; // 0x10
	public string KeyContainerName; // 0x20
	public int KeyNumber; // 0x30
	public string ProviderName; // 0x40
	public int ProviderType; // 0x10
	private SecureString _password; // 0x00
	private IntPtr _windowHandle; // 0x00

	// Properties
	public CspProviderFlags Flags { get; set; } // 0x00000001800ECD10 0x0000000180143AD0
	public CryptoKeySecurity CryptoKeySecurity { get; set; } // 0x00000001802F8020 0x00000001802F8070
	public SecureString KeyPassword { get; set; } // 0x0000000180119440 0x000000018015B770
	public IntPtr ParentWindowHandle { get; set; } // 0x0000000180114BB0 0x0000000180114C20

	// Constructors
	public CspParameters(); // 0x00000001802F7FF0
	public CspParameters(int dwTypeIn); // 0x00000001802F7FB0
	public CspParameters(int dwTypeIn, string strProviderNameIn); // 0x00000001802F7FB0
	public CspParameters(int dwTypeIn, string strProviderNameIn, string strContainerNameIn); // 0x00000001802F7EF0
	public CspParameters(int providerType, string providerName, string keyContainerName, CryptoKeySecurity cryptoKeySecurity, IntPtr parentWindowHandle); // 0x00000001802F7E80
	public CspParameters(int providerType, string providerName, string keyContainerName, CryptoKeySecurity cryptoKeySecurity, SecureString keyPassword); // 0x00000001802F7F40

}

// Namespace: System.Security.Cryptography
[Serializable]
public enum CspProviderFlags // TypeDefIndex: 1285
{
	NoFlags = 0,
	UseMachineKeyStore = 1,
	UseDefaultKeyContainer = 2,
	UseNonExportableKey = 4,
	UseExistingKey = 8,
	UseArchivableKey = 16,
	UseUserProtectedKey = 32,
	NoPrompt = 64
}

// Namespace: System.Security.Cryptography
public abstract class DES : SymmetricAlgorithm // TypeDefIndex: 1286
{
	// Fields
	private const int keySizeByte = 8; // 0x00
	internal static readonly byte[] weakKeys; // 0x08
	internal static readonly byte[] semiWeakKeys; // 0x00

	// Properties
	public override byte[] Key { get; set; } // 0x00000001802FAA50 0x00000001802FAAF0

	// Constructors
	protected DES(); // 0x00000001802FA8C0
	private static DES(); // 0x00000001802FA800

	// Methods
	public static DES Create(); // 0x00000001802FA270
	public static DES Create(string algName); // 0x00000001802FA190
	public static bool IsWeakKey(byte[] rgbKey); // 0x00000001802FA5D0
	public static bool IsSemiWeakKey(byte[] rgbKey); // 0x00000001802FA390
}

// Namespace: System.Security.Cryptography
internal class DESTransform : SymmetricTransform // TypeDefIndex: 1287
{
	// Fields
	internal static readonly int KEY_BIT_SIZE; // 0x00
	internal static readonly int KEY_BYTE_SIZE; // 0x08
	internal static readonly int BLOCK_BIT_SIZE; // 0x58
	internal static readonly int BLOCK_BYTE_SIZE; // 0x68
	private byte[] keySchedule; // 0x18
	private byte[] byteBuff; // 0x28
	private uint[] dwordBuff; // 0x38
	private static readonly uint[] spBoxes; // 0x00
	private static readonly byte[] PC1; // 0x28
	private static readonly byte[] leftRotTotal; // 0x2A
	private static readonly byte[] PC2; // 0x30
	internal static readonly uint[] ipTab; // 0x10
	internal static readonly uint[] fpTab; // 0x20

	// Constructors
	internal DESTransform(SymmetricAlgorithm symmAlgo, bool encryption, byte[] key, byte[] iv); // 0x00000001802F9F50
	private static DESTransform(); // 0x00000001802F9D70

	// Methods
	private uint CipherFunct(uint r, int n); // 0x00000001802F8850
	internal static void Permutation(byte[] input, byte[] output, uint[] permTab, bool preSwap); // 0x00000001802F8D90
	private static void BSwap(byte[] byteBuff); // 0x00000001802F8760
	internal void SetKey(byte[] key); // 0x00000001802F98C0
	public void ProcessBlock(byte[] input, byte[] output); // 0x00000001802F9400
	protected override void ECB(byte[] input, byte[] output); // 0x00000001802F8BF0
	internal static byte[] GetStrongKey(); // 0x00000001802F8CC0
}

// Namespace: System.Security.Cryptography
public sealed class DESCryptoServiceProvider : DES // TypeDefIndex: 1288
{
	// Constructors
	public DESCryptoServiceProvider(); // 0x00000001802F85A0

	// Methods
	public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV); // 0x00000001802F83D0
	public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV); // 0x00000001802F8450
	public override void GenerateIV(); // 0x00000001802F84D0
	public override void GenerateKey(); // 0x00000001802F8540
}

// Namespace: System.Security.Cryptography
public abstract class DSA : AsymmetricAlgorithm // TypeDefIndex: 1289
{
	// Constructors
	protected DSA(); // 0x00000001800E2000

	// Methods
	public static DSA Create(); // 0x00000001802FC030
	public static DSA Create(string algName); // 0x00000001802FC130
	public abstract byte[] CreateSignature(byte[] rgbHash);
	public abstract DSAParameters ExportParameters(bool includePrivateParameters);
	internal void ZeroizePrivateKey(DSAParameters parameters); // 0x00000001802FC940
	public override void FromXmlString(string xmlString); // 0x00000001802FC210
	public abstract void ImportParameters(DSAParameters parameters);
	public override string ToXmlString(bool includePrivateParameters); // 0x00000001802FC4B0
	public abstract bool VerifySignature(byte[] rgbHash, byte[] rgbSignature);
}

// Namespace: System.Security.Cryptography
public sealed class DSACryptoServiceProvider : DSA, ICspAsymmetricAlgorithm // TypeDefIndex: 1290
{
	// Fields
	private const int PROV_DSS_DH = 13; // 0x00
	private KeyPairPersistence store; // 0x28
	private bool persistKey; // 0x2A
	private bool persisted; // 0x30
	private bool privateKeyExportable; // 0x10
	private bool m_disposed; // 0x20
	private DSAManaged dsa; // 0x30
	private static bool useMachineKeyStore; // 0x40

	// Properties
	public override string KeyExchangeAlgorithm { get; } // 0x00000001800EA8C0 
	public override int KeySize { get; } // 0x00000001802FB9E0 
	public bool PersistKeyInCsp { get; set; } // 0x00000001800EA930 0x00000001801799F0
	public bool PublicOnly { get; } // 0x00000001802FBA10 
	public override string SignatureAlgorithm { get; } // 0x00000001802FBA30 
	public static bool UseMachineKeyStore { get; set; } // 0x00000001802FBA60 0x00000001802FBAC0
	public CspKeyContainerInfo CspKeyContainerInfo { get; } // 0x00000001800EA8C0 

	// Constructors
	public DSACryptoServiceProvider(); // 0x00000001802FB9C0
	public DSACryptoServiceProvider(CspParameters parameters); // 0x00000001802FB730
	public DSACryptoServiceProvider(int dwKeySize); // 0x00000001802FB9D0
	public DSACryptoServiceProvider(int dwKeySize, CspParameters parameters); // 0x00000001802FB740
	private static DSACryptoServiceProvider(); // 0x00000001800EA7B0

	// Methods
	protected override void Finalize(); // 0x00000001802FAE10
	public override DSAParameters ExportParameters(bool includePrivateParameters); // 0x00000001802FAD30
	public override void ImportParameters(DSAParameters parameters); // 0x00000001802FB0E0
	public override byte[] CreateSignature(byte[] rgbHash); // 0x00000001800E97B0
	public byte[] SignData(byte[] buffer); // 0x00000001802FB240
	public byte[] SignData(byte[] buffer, int offset, int count); // 0x00000001802FB1C0
	public byte[] SignData(Stream inputStream); // 0x00000001802FB2A0
	public byte[] SignHash(byte[] rgbHash, string str); // 0x00000001802FB430
	public bool VerifyData(byte[] rgbData, byte[] rgbSignature); // 0x00000001802FB550
	public bool VerifyHash(byte[] rgbHash, string str, byte[] rgbSignature); // 0x00000001802FB5C0
	public override bool VerifySignature(byte[] rgbHash, byte[] rgbSignature); // 0x00000001802FB700
	protected override void Dispose(bool disposing); // 0x00000001802FACB0
	private void OnKeyGenerated(object sender, EventArgs e); // 0x00000001802FB130
	public byte[] ExportCspBlob(bool includePrivateParameters); // 0x00000001802FAD10
	public void ImportCspBlob(byte[] keyBlob); // 0x00000001802FAEE0
}

// Namespace: System.Security.Cryptography
[Serializable]
public struct DSAParameters // TypeDefIndex: 1291
{
	// Fields
	public int Counter; // 0x10
	public byte[] G; // 0x20
	public byte[] J; // 0x30
	public byte[] P; // 0x40
	public byte[] Q; // 0x10
	public byte[] Seed; // 0x10
	[NonSerialized]	public byte[] X; // 0x00
	public byte[] Y; // 0x00

}

// Namespace: System.Security.Cryptography
public class DSASignatureDeformatter : AsymmetricSignatureDeformatter // TypeDefIndex: 1292
{
	// Fields
	private DSA dsa; // 0x10

	// Constructors
	public DSASignatureDeformatter(); // 0x00000001800E2000
	public DSASignatureDeformatter(AsymmetricAlgorithm key); // 0x00000001802FBD60

	// Methods
	public override void SetHashAlgorithm(string strName); // 0x00000001802FBB20
	public override void SetKey(AsymmetricAlgorithm key); // 0x00000001802FBBF0
	public override bool VerifySignature(byte[] rgbHash, byte[] rgbSignature); // 0x00000001802FBCB0
}

// Namespace: System.Security.Cryptography
public class DSASignatureFormatter : AsymmetricSignatureFormatter // TypeDefIndex: 1293
{
	// Fields
	private DSA dsa; // 0x10

	// Constructors
	public DSASignatureFormatter(); // 0x00000001800E2000
	public DSASignatureFormatter(AsymmetricAlgorithm key); // 0x00000001802FBD60

	// Methods
	public override byte[] CreateSignature(byte[] rgbHash); // 0x00000001802FBE00
	public override void SetHashAlgorithm(string strName); // 0x00000001802FBEA0
	public override void SetKey(AsymmetricAlgorithm key); // 0x00000001802FBF70
}

// Namespace: System.Security.Cryptography
public abstract class DeriveBytes // TypeDefIndex: 1294
{
	// Constructors
	protected DeriveBytes(); // 0x00000001800E2000

	// Methods
	public abstract byte[] GetBytes(int cb);
	public abstract void Reset();
}

// Namespace: System.Security.Cryptography
[Serializable]
public enum FromBase64TransformMode // TypeDefIndex: 1295
{
	IgnoreWhiteSpaces = 0,
	DoNotIgnoreWhiteSpaces = 1
}

// Namespace: System.Security.Cryptography
public class FromBase64Transform : IDisposable, ICryptoTransform // TypeDefIndex: 1296
{
	// Fields
	private const byte TerminatorByte = 61; // 0x00
	private FromBase64TransformMode mode; // 0x18
	private byte[] accumulator; // 0x24
	private int accPtr; // 0x30
	private bool m_disposed; // 0x40
	private byte[] lookupTable; // 0x50

	// Properties
	public bool CanTransformMultipleBlocks { get; } // 0x000000018011A0F0 
	public virtual bool CanReuseTransform { get; } // 0x000000018010E420 
	public int InputBlockSize { get; } // 0x0000000180119A50 
	public int OutputBlockSize { get; } // 0x0000000180193F90 

	// Constructors
	public FromBase64Transform(); // 0x00000001802FF6E0
	public FromBase64Transform(FromBase64TransformMode whitespaces); // 0x00000001802FF740

	// Methods
	private void System.IDisposable.Dispose(); // 0x00000001802BB1E0
	protected override void Finalize(); // 0x00000001802BAAF0
	public void Clear(); // 0x00000001802BAAC0
	protected virtual void Dispose(bool disposing); // 0x00000001802FECA0
	private byte lookup(byte input); // 0x00000001802FF7B0
	private int ProcessBlock(byte[] output, int offset); // 0x00000001802FECF0
	private void CheckInputParameters(byte[] inputBuffer, int inputOffset, int inputCount); // 0x00000001802FEAD0
	public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset); // 0x00000001802FF140
	public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x00000001802FF390
}

// Namespace: System.Security.Cryptography
public abstract class HMAC : KeyedHashAlgorithm // TypeDefIndex: 1297
{
	// Fields
	private bool _disposed; // 0x30
	private string _hashName; // 0x40
	private HashAlgorithm _algo; // 0x50
	private BlockProcessor _block; // 0x00
	private int _blockSizeValue; // 0x00

	// Properties
	protected int BlockSizeValue { get; set; } // 0x0000000180264CC0 0x00000001800E4CB0
	public string HashName { get; set; } // 0x0000000180119440 0x0000000180301600
	public override byte[] Key { get; set; } // 0x0000000180301530 0x0000000180301630
	internal BlockProcessor Block { get; } // 0x00000001803014A0 

	// Constructors
	protected HMAC(); // 0x0000000180301470

	// Methods
	private byte[] KeySetup(byte[] key, byte padding); // 0x0000000180301370
	protected override void Dispose(bool disposing); // 0x0000000180300E40
	protected override void HashCore(byte[] rgb, int ib, int cb); // 0x0000000180300E70
	protected override byte[] HashFinal(); // 0x0000000180300F50
	public override void Initialize(); // 0x0000000180301250
	public static HMAC Create(); // 0x0000000180300C60
	public static HMAC Create(string algorithmName); // 0x0000000180300D60
}

// Namespace: System.Security.Cryptography
public class HMACMD5 : HMAC // TypeDefIndex: 1298
{
	// Constructors
	public HMACMD5(); // 0x0000000180300140
	public HMACMD5(byte[] key); // 0x00000001803001E0

}

// Namespace: System.Security.Cryptography
public class HMACRIPEMD160 : HMAC // TypeDefIndex: 1299
{
	// Constructors
	public HMACRIPEMD160(); // 0x0000000180300300
	public HMACRIPEMD160(byte[] key); // 0x0000000180300270

}

// Namespace: System.Security.Cryptography
public class HMACSHA1 : HMAC // TypeDefIndex: 1300
{
	// Constructors
	public HMACSHA1(); // 0x00000001803003A0
	public HMACSHA1(byte[] key); // 0x0000000180300440
	public HMACSHA1(byte[] key, bool useManagedSha1); // 0x00000001803004D0

}

// Namespace: System.Security.Cryptography
public class HMACSHA256 : HMAC // TypeDefIndex: 1301
{
	// Constructors
	public HMACSHA256(); // 0x0000000180300640
	public HMACSHA256(byte[] key); // 0x00000001803005B0

}

// Namespace: System.Security.Cryptography
public class HMACSHA384 : HMAC // TypeDefIndex: 1302
{
	// Fields
	private static bool legacy_mode; // 0x00
	private bool legacy; // 0x00

	// Properties
	public bool ProduceLegacyHmacValues { get; set; } // 0x00000001800E3550 0x0000000180300990

	// Constructors
	public HMACSHA384(); // 0x0000000180300760
	public HMACSHA384(byte[] key); // 0x00000001803008B0
	private static HMACSHA384(); // 0x00000001803006E0

}

// Namespace: System.Security.Cryptography
public class HMACSHA512 : HMAC // TypeDefIndex: 1303
{
	// Fields
	private static bool legacy_mode; // 0x00
	private bool legacy; // 0x10

	// Properties
	public bool ProduceLegacyHmacValues { get; set; } // 0x00000001800E3550 0x0000000180300990

	// Constructors
	public HMACSHA512(); // 0x0000000180300A30
	public HMACSHA512(byte[] key); // 0x0000000180300B80
	private static HMACSHA512(); // 0x00000001803009B0

}

// Namespace: System.Security.Cryptography
public abstract class HashAlgorithm : IDisposable, ICryptoTransform // TypeDefIndex: 1304
{
	// Fields
	protected internal byte[] HashValue; // 0x10
	protected int HashSizeValue; // 0x1C
	protected int State; // 0x10
	private bool disposed; // 0x00

	// Properties
	public virtual bool CanTransformMultipleBlocks { get; } // 0x000000018010E420 
	public virtual bool CanReuseTransform { get; } // 0x000000018010E420 
	public virtual byte[] Hash { get; } // 0x0000000180302080 
	public virtual int HashSize { get; } // 0x00000001800ED060 
	public virtual int InputBlockSize { get; } // 0x0000000180119A50 
	public virtual int OutputBlockSize { get; } // 0x0000000180119A50 

	// Constructors
	protected HashAlgorithm(); // 0x0000000180302060

	// Methods
	private void System.IDisposable.Dispose(); // 0x0000000180301C30
	public void Clear(); // 0x0000000180301700
	public byte[] ComputeHash(byte[] buffer); // 0x0000000180301A70
	public byte[] ComputeHash(byte[] buffer, int offset, int count); // 0x0000000180301720
	public byte[] ComputeHash(Stream inputStream); // 0x0000000180301920
	public static HashAlgorithm Create(); // 0x0000000180301B00
	public static HashAlgorithm Create(string hashName); // 0x0000000180301B40
	protected abstract void HashCore(byte[] array, int ibStart, int cbSize);
	protected abstract byte[] HashFinal();
	public abstract void Initialize();
	protected virtual void Dispose(bool disposing); // 0x0000000180301C20
	public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset); // 0x0000000180301C60
	public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x0000000180301EB0
}

// Namespace: System.Security.Cryptography
public interface ICryptoTransform : IDisposable // TypeDefIndex: 1305
{
	// Properties
	bool CanReuseTransform { get; }
	bool CanTransformMultipleBlocks { get; }
	int InputBlockSize { get; }
	int OutputBlockSize { get; }

	// Methods
	int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
	byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount);
}

// Namespace: System.Security.Cryptography
public interface ICspAsymmetricAlgorithm // TypeDefIndex: 1306
{
	// Properties
	CspKeyContainerInfo CspKeyContainerInfo { get; }

	// Methods
	byte[] ExportCspBlob(bool includePrivateParameters);
	void ImportCspBlob(byte[] rawData);
}

// Namespace: System.Security.Cryptography
[Serializable]
public enum KeyNumber // TypeDefIndex: 1307
{
	Exchange = 1,
	Signature = 2
}

// Namespace: System.Security.Cryptography
public sealed class KeySizes // TypeDefIndex: 1308
{
	// Fields
	private int _maxSize; // 0x10
	private int _minSize; // 0x18
	private int _skipSize; // 0x30

	// Properties
	public int MaxSize { get; } // 0x00000001800ECD10 
	public int MinSize { get; } // 0x0000000180156360 
	public int SkipSize { get; } // 0x00000001800ED060 

	// Constructors
	public KeySizes(int minSize, int maxSize, int skipSize); // 0x00000001803021D0

	// Methods
	internal bool IsLegal(int keySize); // 0x00000001803021A0
	internal static bool IsLegalKeySize(KeySizes[] legalKeys, int size); // 0x0000000180302100
}

// Namespace: System.Security.Cryptography
public abstract class KeyedHashAlgorithm : HashAlgorithm // TypeDefIndex: 1309
{
	// Fields
	protected byte[] KeyValue; // 0x28

	// Properties
	public virtual byte[] Key { get; set; } // 0x0000000180302450 0x00000001803024D0

	// Constructors
	protected KeyedHashAlgorithm(); // 0x0000000180302060

	// Methods
	protected override void Finalize(); // 0x00000001800E81F0
	protected override void Dispose(bool disposing); // 0x0000000180302400
	private void ZeroizeKey(); // 0x0000000180302430
	public static KeyedHashAlgorithm Create(); // 0x0000000180302220
	public static KeyedHashAlgorithm Create(string algName); // 0x0000000180302320
}

// Namespace: System.Security.Cryptography
public class MACTripleDES : KeyedHashAlgorithm // TypeDefIndex: 1310
{
	// Fields
	private TripleDES tdes; // 0x30
	private MACAlgorithm mac; // 0x40
	private bool m_disposed; // 0x00

	// Properties
	public PaddingMode Padding { get; set; } // 0x0000000180302B80 0x0000000180302BB0

	// Constructors
	public MACTripleDES(); // 0x0000000180302A80
	public MACTripleDES(byte[] rgbKey); // 0x00000001803029F0
	public MACTripleDES(string strTripleDES, byte[] rgbKey); // 0x0000000180302AD0

	// Methods
	private void Setup(string strTripleDES, byte[] rgbKey); // 0x00000001803028D0
	protected override void Finalize(); // 0x0000000180302650
	protected override void Dispose(bool disposing); // 0x00000001803025C0
	public override void Initialize(); // 0x0000000180302840
	protected override void HashCore(byte[] rgbData, int ibStart, int cbSize); // 0x00000001803026F0
	protected override byte[] HashFinal(); // 0x00000001803027C0
}

// Namespace: System.Security.Cryptography
public abstract class MD5 : HashAlgorithm // TypeDefIndex: 1311
{
	// Constructors
	protected MD5(); // 0x0000000180304B80

	// Methods
	public static MD5 Create(); // 0x00000001803049A0
	public static MD5 Create(string algName); // 0x0000000180304AA0
}

// Namespace: System.Security.Cryptography
public sealed class MD5CryptoServiceProvider : MD5 // TypeDefIndex: 1312
{
	// Fields
	private const int BLOCK_SIZE_BYTES = 64; // 0x00
	private const int HASH_SIZE_BYTES = 16; // 0x28
	private uint[] _H; // 0x38
	private uint[] buff; // 0x48
	private ulong count; // 0x10
	private byte[] _ProcessingBuffer; // 0x10
	private int _ProcessingBufferCount; // 0x00
	private static readonly uint[] K; // 0x00

	// Constructors
	public MD5CryptoServiceProvider(); // 0x0000000180304860
	private static MD5CryptoServiceProvider(); // 0x0000000180304800

	// Methods
	protected override void Finalize(); // 0x0000000180302DE0
	protected override void Dispose(bool disposing); // 0x0000000180302D60
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x0000000180302E50
	protected override byte[] HashFinal(); // 0x0000000180302F70
	public override void Initialize(); // 0x0000000180303080
	private void ProcessBlock(byte[] inputBuffer, int inputOffset); // 0x0000000180303140
	private void ProcessFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x0000000180304640
	internal void AddLength(ulong length, byte[] buffer, int position); // 0x0000000180302BE0
}

// Namespace: System.Security.Cryptography
public abstract class MaskGenerationMethod // TypeDefIndex: 1313
{
	// Constructors
	protected MaskGenerationMethod(); // 0x00000001800E2000

	// Methods
	public abstract byte[] GenerateMask(byte[] rgbSeed, int cbReturn);
}

// Namespace: System.Security.Cryptography
public class PKCS1MaskGenerationMethod : MaskGenerationMethod // TypeDefIndex: 1314
{
	// Fields
	private string hashName; // 0x10

	// Properties
	public string HashName { get; set; } // 0x00000001800E20D0 0x00000001800E20E0

	// Constructors
	public PKCS1MaskGenerationMethod(); // 0x00000001800E2090

	// Methods
	public override byte[] GenerateMask(byte[] rgbSeed, int cbReturn); // 0x00000001800E2010
}

// Namespace: System.Security.Cryptography
[Serializable]
public enum PaddingMode // TypeDefIndex: 1315
{
	None = 1,
	PKCS7 = 2,
	Zeros = 3,
	ANSIX923 = 4,
	ISO10126 = 5
}

// Namespace: System.Security.Cryptography
public class PasswordDeriveBytes : DeriveBytes // TypeDefIndex: 1316
{
	// Fields
	private string HashNameValue; // 0x10
	private byte[] SaltValue; // 0x20
	private int IterationsValue; // 0x30
	private HashAlgorithm hash; // 0x40
	private int state; // 0x50
	private byte[] password; // 0x50
	private byte[] initial; // 0x58
	private byte[] output; // 0x5C
	private int position; // 0x60
	private int hashnumber; // 0x00

	// Properties
	public string HashName { get; set; } // 0x00000001800E20D0 0x00000001800E3000
	public int IterationCount { get; set; } // 0x00000001800E2F70 0x00000001800E30C0
	public byte[] Salt { get; set; } // 0x00000001800E2F80 0x00000001800E3180

	// Constructors
	public PasswordDeriveBytes(string strPassword, byte[] rgbSalt); // 0x00000001800E2A70
	public PasswordDeriveBytes(string strPassword, byte[] rgbSalt, CspParameters cspParams); // 0x00000001800E2D70
	public PasswordDeriveBytes(string strPassword, byte[] rgbSalt, string strHashName, int iterations); // 0x00000001800E2E40
	public PasswordDeriveBytes(string strPassword, byte[] rgbSalt, string strHashName, int iterations, CspParameters cspParams); // 0x00000001800E2CA0
	public PasswordDeriveBytes(byte[] password, byte[] salt); // 0x00000001800E2AF0
	public PasswordDeriveBytes(byte[] password, byte[] salt, CspParameters cspParams); // 0x00000001800E2BD0
	public PasswordDeriveBytes(byte[] password, byte[] salt, string hashName, int iterations); // 0x00000001800E2B70
	public PasswordDeriveBytes(byte[] password, byte[] salt, string hashName, int iterations, CspParameters cspParams); // 0x00000001800E2EA0

	// Methods
	protected override void Finalize(); // 0x00000001800E21F0
	private void Prepare(string strPassword, byte[] rgbSalt, string strHashName, int iterations); // 0x00000001800E25A0
	private void Prepare(byte[] password, byte[] rgbSalt, string strHashName, int iterations); // 0x00000001800E26C0
	public byte[] CryptDeriveKey(string algname, string alghashname, int keySize, byte[] rgbIV); // 0x00000001800E2140
	public override byte[] GetBytes(int cb); // 0x00000001800E22B0
	public override void Reset(); // 0x00000001800E29A0
}

// Namespace: System.Security.Cryptography
public abstract class RC2 : SymmetricAlgorithm // TypeDefIndex: 1317
{
	// Fields
	protected int EffectiveKeySizeValue; // 0x50

	// Properties
	public virtual int EffectiveKeySize { get; set; } // 0x00000001800E3540 0x00000001800E4CB0
	public override int KeySize { get; set; } // 0x00000001800E2F70 0x00000001800E4CC0

	// Constructors
	protected RC2(); // 0x00000001800E33A0

	// Methods
	public static RC2 Create(); // 0x00000001800E4BF0
	public static RC2 Create(string AlgName); // 0x00000001800E4B50
}

// Namespace: System.Security.Cryptography
public sealed class RC2CryptoServiceProvider : RC2 // TypeDefIndex: 1318
{
	// Fields
	private bool _useSalt; // 0x58

	// Properties
	public override int EffectiveKeySize { get; set; } // 0x00000001800E3540 0x00000001800E3560
	public bool UseSalt { get; set; } // 0x00000001800E3550 0x00000001800E35E0

	// Constructors
	public RC2CryptoServiceProvider(); // 0x00000001800E33A0

	// Methods
	public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV); // 0x00000001800E3260
	public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV); // 0x00000001800E32E0
	public override void GenerateIV(); // 0x00000001800E3360
	public override void GenerateKey(); // 0x00000001800E3380
}

// Namespace: System.Security.Cryptography
internal class RC2Transform : SymmetricTransform // TypeDefIndex: 1319
{
	// Fields
	private ushort R0; // 0x58
	private ushort R1; // 0x5C
	private ushort R2; // 0x60
	private ushort R3; // 0x00
	private ushort[] K; // 0x00
	private int j; // 0x30
	private static readonly byte[] pitable; // 0x40

	// Constructors
	public RC2Transform(RC2 rc2Algo, bool encryption, byte[] key, byte[] iv); // 0x00000001800E44F0
	private static RC2Transform(); // 0x00000001800E4490

	// Methods
	protected override void ECB(byte[] input, byte[] output); // 0x00000001800E35F0
}

// Namespace: System.Security.Cryptography
public abstract class RIPEMD160 : HashAlgorithm // TypeDefIndex: 1320
{
	// Constructors
	protected RIPEMD160(); // 0x00000001800E8D60

	// Methods
	public static RIPEMD160 Create(); // 0x00000001800E8C00
	public static RIPEMD160 Create(string hashName); // 0x00000001800E8CC0
}

// Namespace: System.Security.Cryptography
public class RIPEMD160Managed : RIPEMD160 // TypeDefIndex: 1321
{
	// Fields
	private const int BLOCK_SIZE_BYTES = 64; // 0x00
	private byte[] _ProcessingBuffer; // 0x30
	private uint[] _X; // 0x40
	private uint[] _HashValue; // 0x00
	private ulong _Length; // 0x00
	private int _ProcessingBufferCount; // 0x28

	// Constructors
	public RIPEMD160Managed(); // 0x00000001800E8B70

	// Methods
	public override void Initialize(); // 0x00000001800E8790
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x00000001800E8430
	protected override byte[] HashFinal(); // 0x00000001800E8560
	protected override void Finalize(); // 0x00000001800E81F0
	private void ProcessBlock(byte[] buffer, int offset); // 0x00000001800E89A0
	private void Compress(); // 0x00000001800E4EC0
	private void CompressFinal(ulong length); // 0x00000001800E4CF0
	private uint ROL(uint x, int n); // 0x00000001800E8B50
	private uint F(uint x, uint y, uint z); // 0x00000001800E81E0
	private uint G(uint x, uint y, uint z); // 0x00000001800E8350
	private uint H(uint x, uint y, uint z); // 0x00000001800E8420
	private uint I(uint x, uint y, uint z); // 0x00000001800E8780
	private uint J(uint x, uint y, uint z); // 0x00000001800E8990
	private void FF(uint a, uint b, uint c, uint d, uint e, uint x, int s); // 0x00000001800E8190
	private void GG(uint a, uint b, uint c, uint d, uint e, uint x, int s); // 0x00000001800E82F0
	private void HH(uint a, uint b, uint c, uint d, uint e, uint x, int s); // 0x00000001800E83C0
	private void II(uint a, uint b, uint c, uint d, uint e, uint x, int s); // 0x00000001800E8720
	private void JJ(uint a, uint b, uint c, uint d, uint e, uint x, int s); // 0x00000001800E8930
	private void FFF(uint a, uint b, uint c, uint d, uint e, uint x, int s); // 0x00000001800E8190
	private void GGG(uint a, uint b, uint c, uint d, uint e, uint x, int s); // 0x00000001800E8290
	private void HHH(uint a, uint b, uint c, uint d, uint e, uint x, int s); // 0x00000001800E8360
	private void III(uint a, uint b, uint c, uint d, uint e, uint x, int s); // 0x00000001800E86C0
	private void JJJ(uint a, uint b, uint c, uint d, uint e, uint x, int s); // 0x00000001800E88D0
}

// Namespace: System.Security.Cryptography
public sealed class RNGCryptoServiceProvider : RandomNumberGenerator // TypeDefIndex: 1322
{
	// Fields
	private static object _lock; // 0x00
	private IntPtr _handle; // 0x00

	// Constructors
	public RNGCryptoServiceProvider(); // 0x00000001800E92D0
	private static RNGCryptoServiceProvider(); // 0x00000001800E9260

	// Methods
	private void Check(); // 0x00000001800E8D80
	private static bool RngOpen(); // 0x00000001800E9250
	private static IntPtr RngInitialize(byte[] seed); // 0x00000001800E9240
	private static IntPtr RngGetBytes(IntPtr handle, byte[] data); // 0x00000001800E9230
	private static void RngClose(IntPtr handle); // 0x00000001800E9220
	public override void GetBytes(byte[] data); // 0x00000001800E8F00
	public override void GetNonZeroBytes(byte[] data); // 0x00000001800E90C0
	protected override void Finalize(); // 0x00000001800E8E10
}

// Namespace: System.Security.Cryptography
public abstract class RSA : AsymmetricAlgorithm // TypeDefIndex: 1323
{
	// Constructors
	protected RSA(); // 0x00000001800EAC90

	// Methods
	public static RSA Create(); // 0x00000001800EB880
	public static RSA Create(string algName); // 0x00000001800EB940
	public abstract byte[] EncryptValue(byte[] rgb);
	public abstract byte[] DecryptValue(byte[] rgb);
	public abstract RSAParameters ExportParameters(bool includePrivateParameters);
	public abstract void ImportParameters(RSAParameters parameters);
	internal void ZeroizePrivateKey(RSAParameters parameters); // 0x00000001800EC180
	public override void FromXmlString(string xmlString); // 0x00000001800EB9E0
	public override string ToXmlString(bool includePrivateParameters); // 0x00000001800EBD50
}

// Namespace: System.Security.Cryptography
public sealed class RSACryptoServiceProvider : RSA, ICspAsymmetricAlgorithm // TypeDefIndex: 1324
{
	// Fields
	private const int PROV_RSA_FULL = 1; // 0x00
	private KeyPairPersistence store; // 0x28
	private bool persistKey; // 0x2A
	private bool persisted; // 0x30
	private bool privateKeyExportable; // 0x08
	private bool m_disposed; // 0x10
	private RSAManaged rsa; // 0x20
	private static bool useMachineKeyStore; // 0x10
	private static Dictionary`2<string, int> <>f__switch$map29; // 0x10

	// Properties
	public static bool UseMachineKeyStore { get; set; } // 0x00000001800EA990 0x00000001800EAA80
	public override string KeyExchangeAlgorithm { get; } // 0x00000001800EA8D0 
	public override int KeySize { get; } // 0x00000001800EA900 
	public bool PersistKeyInCsp { get; set; } // 0x00000001800EA930 0x00000001800EA9F0
	public bool PublicOnly { get; } // 0x00000001800EA940 
	public override string SignatureAlgorithm { get; } // 0x00000001800EA960 
	public CspKeyContainerInfo CspKeyContainerInfo { get; } // 0x00000001800EA8C0 

	// Constructors
	public RSACryptoServiceProvider(); // 0x00000001800EA890
	public RSACryptoServiceProvider(CspParameters parameters); // 0x00000001800EA810
	public RSACryptoServiceProvider(int dwKeySize); // 0x00000001800EA850
	public RSACryptoServiceProvider(int dwKeySize, CspParameters parameters); // 0x00000001800EA7C0
	private static RSACryptoServiceProvider(); // 0x00000001800EA7B0

	// Methods
	private void Common(int dwKeySize, CspParameters p); // 0x00000001800E9340
	protected override void Finalize(); // 0x00000001800E99D0
	public byte[] Decrypt(byte[] rgb, bool fOAEP); // 0x00000001800E9670
	public override byte[] DecryptValue(byte[] rgb); // 0x00000001800E95C0
	public byte[] Encrypt(byte[] rgb, bool fOAEP); // 0x00000001800E97E0
	public override byte[] EncryptValue(byte[] rgb); // 0x00000001800E97B0
	public override RSAParameters ExportParameters(bool includePrivateParameters); // 0x00000001800E9900
	public override void ImportParameters(RSAParameters parameters); // 0x00000001800EA0F0
	private HashAlgorithm GetHash(object halg); // 0x00000001800E9CA0
	public byte[] SignData(byte[] buffer, object halg); // 0x00000001800EA1D0
	public byte[] SignData(Stream inputStream, object halg); // 0x00000001800EA2F0
	public byte[] SignData(byte[] buffer, int offset, int count, object halg); // 0x00000001800EA390
	private string GetHashNameFromOID(string oid); // 0x00000001800E9AA0
	public byte[] SignHash(byte[] rgbHash, string str); // 0x00000001800EA460
	public bool VerifyData(byte[] buffer, object halg, byte[] signature); // 0x00000001800EA540
	public bool VerifyHash(byte[] rgbHash, string str, byte[] rgbSignature); // 0x00000001800EA680
	protected override void Dispose(bool disposing); // 0x00000001800E9760
	private void OnKeyGenerated(object sender, EventArgs e); // 0x00000001800EA140
	public byte[] ExportCspBlob(bool includePrivateParameters); // 0x00000001800E98B0
	public void ImportCspBlob(byte[] keyBlob); // 0x00000001800E9EF0
}

// Namespace: System.Security.Cryptography
public class RSAOAEPKeyExchangeDeformatter : AsymmetricKeyExchangeDeformatter // TypeDefIndex: 1325
{
	// Fields
	private RSA rsa; // 0x10

	// Properties
	public override string Parameters { get; set; } // 0x00000001800EA8C0 0x00000001800EA7B0

	// Constructors
	public RSAOAEPKeyExchangeDeformatter(); // 0x00000001800EAC90
	public RSAOAEPKeyExchangeDeformatter(AsymmetricAlgorithm key); // 0x00000001800EACA0

	// Methods
	public override byte[] DecryptKeyExchange(byte[] rgbData); // 0x00000001800EAAE0
	public override void SetKey(AsymmetricAlgorithm key); // 0x00000001800EABF0
}

// Namespace: System.Security.Cryptography
public class RSAOAEPKeyExchangeFormatter : AsymmetricKeyExchangeFormatter // TypeDefIndex: 1326
{
	// Fields
	private RSA rsa; // 0x10
	private RandomNumberGenerator random; // 0x20
	private byte[] param; // 0x10

	// Properties
	public byte[] Parameter { get; set; } // 0x00000001800EAEB0 0x00000001800EAED0
	public override string Parameters { get; } // 0x00000001800EA8C0 
	public RandomNumberGenerator Rng { get; set; } // 0x00000001800EAEC0 0x00000001800EAEE0

	// Constructors
	public RSAOAEPKeyExchangeFormatter(); // 0x00000001800EAE90
	public RSAOAEPKeyExchangeFormatter(AsymmetricAlgorithm key); // 0x00000001800EACA0

	// Methods
	public override byte[] CreateKeyExchange(byte[] rgbData); // 0x00000001800EAD00
	public override byte[] CreateKeyExchange(byte[] rgbData, Type symAlgType); // 0x00000001800EACE0
	public override void SetKey(AsymmetricAlgorithm key); // 0x00000001800EADF0
}

// Namespace: System.Security.Cryptography
public class RSAPKCS1KeyExchangeDeformatter : AsymmetricKeyExchangeDeformatter // TypeDefIndex: 1327
{
	// Fields
	private RSA rsa; // 0x10
	private RandomNumberGenerator random; // 0x10

	// Properties
	public override string Parameters { get; set; } // 0x00000001800EA8C0 0x00000001800EA7B0
	public RandomNumberGenerator RNG { get; set; } // 0x00000001800EAEC0 0x00000001800EAEE0

	// Constructors
	public RSAPKCS1KeyExchangeDeformatter(); // 0x00000001800EAC90
	public RSAPKCS1KeyExchangeDeformatter(AsymmetricAlgorithm key); // 0x00000001800EACA0

	// Methods
	public override byte[] DecryptKeyExchange(byte[] rgbIn); // 0x00000001800EAEF0
	public override void SetKey(AsymmetricAlgorithm key); // 0x00000001800EAFE0
}

// Namespace: System.Security.Cryptography
public class RSAPKCS1KeyExchangeFormatter : AsymmetricKeyExchangeFormatter // TypeDefIndex: 1328
{
	// Fields
	private RSA rsa; // 0x10
	private RandomNumberGenerator random; // 0x10

	// Properties
	public RandomNumberGenerator Rng { get; set; } // 0x00000001800EAEC0 0x00000001800EAEE0
	public override string Parameters { get; } // 0x00000001800EB2A0 

	// Constructors
	public RSAPKCS1KeyExchangeFormatter(); // 0x00000001800EAC90
	public RSAPKCS1KeyExchangeFormatter(AsymmetricAlgorithm key); // 0x00000001800EB270

	// Methods
	public override byte[] CreateKeyExchange(byte[] rgbData); // 0x00000001800EB080
	public override byte[] CreateKeyExchange(byte[] rgbData, Type symAlgType); // 0x00000001800EACE0
	private void SetRSAKey(AsymmetricAlgorithm key); // 0x00000001800EB1B0
	public override void SetKey(AsymmetricAlgorithm key); // 0x00000001800EB1A0
}

// Namespace: System.Security.Cryptography
public class RSAPKCS1SignatureDeformatter : AsymmetricSignatureDeformatter // TypeDefIndex: 1329
{
	// Fields
	private RSA rsa; // 0x10
	private string hashName; // 0x10

	// Constructors
	public RSAPKCS1SignatureDeformatter(); // 0x00000001800EAC90
	public RSAPKCS1SignatureDeformatter(AsymmetricAlgorithm key); // 0x00000001800EB620

	// Methods
	public override void SetHashAlgorithm(string strName); // 0x00000001800EB340
	public override void SetKey(AsymmetricAlgorithm key); // 0x00000001800EB3C0
	public override bool VerifySignature(byte[] rgbHash, byte[] rgbSignature); // 0x00000001800EB480
}

// Namespace: System.Security.Cryptography
public class RSAPKCS1SignatureFormatter : AsymmetricSignatureFormatter // TypeDefIndex: 1330
{
	// Fields
	private RSA rsa; // 0x10
	private HashAlgorithm hash; // 0x10

	// Constructors
	public RSAPKCS1SignatureFormatter(); // 0x00000001800EAC90
	public RSAPKCS1SignatureFormatter(AsymmetricAlgorithm key); // 0x00000001800EB620

	// Methods
	public override byte[] CreateSignature(byte[] rgbHash); // 0x00000001800EB660
	public override void SetHashAlgorithm(string strName); // 0x00000001800EB7A0
	public override void SetKey(AsymmetricAlgorithm key); // 0x00000001800EB7C0
}

// Namespace: System.Security.Cryptography
[Serializable]
public struct RSAParameters // TypeDefIndex: 1331
{
	// Fields
	[NonSerialized]	public byte[] P; // 0x10
	[NonSerialized]	public byte[] Q; // 0x20
	[NonSerialized]	public byte[] D; // 0x30
	[NonSerialized]	public byte[] DP; // 0x40
	[NonSerialized]	public byte[] DQ; // 0x00
	[NonSerialized]	public byte[] InverseQ; // 0x18
	public byte[] Modulus; // 0x28
	public byte[] Exponent; // 0x34

}

// Namespace: System.Security.Cryptography
public abstract class RandomNumberGenerator // TypeDefIndex: 1332
{
	// Constructors
	protected RandomNumberGenerator(); // 0x00000001800E2000

	// Methods
	public static RandomNumberGenerator Create(); // 0x00000001800EC220
	public static RandomNumberGenerator Create(string rngName); // 0x00000001800EC2E0
	public abstract void GetBytes(byte[] data);
	public abstract void GetNonZeroBytes(byte[] data);
}

// Namespace: System.Security.Cryptography
public class Rfc2898DeriveBytes : DeriveBytes // TypeDefIndex: 1333
{
	// Fields
	private const int defaultIterations = 1000; // 0x00
	private int _iteration; // 0x18
	private byte[] _salt; // 0x28
	private HMACSHA1 _hmac; // 0x34
	private byte[] _buffer; // 0x58
	private int _pos; // 0x64
	private int _f; // 0x00

	// Properties
	public int IterationCount { get; set; } // 0x00000001800ECD10 0x00000001800ECDA0
	public byte[] Salt { get; set; } // 0x00000001800ECD20 0x00000001800ECE10

	// Constructors
	public Rfc2898DeriveBytes(string password, byte[] salt); // 0x00000001800EC720
	public Rfc2898DeriveBytes(string password, byte[] salt, int iterations); // 0x00000001800ECBE0
	public Rfc2898DeriveBytes(byte[] password, byte[] salt, int iterations); // 0x00000001800EC840
	public Rfc2898DeriveBytes(string password, int saltSize); // 0x00000001800ECA80
	public Rfc2898DeriveBytes(string password, int saltSize, int iterations); // 0x00000001800EC910

	// Methods
	private byte[] F(byte[] s, int c, int i); // 0x00000001800EC380
	public override byte[] GetBytes(int cb); // 0x00000001800EC510
	public override void Reset(); // 0x00000001800EC710
}

// Namespace: System.Security.Cryptography
public abstract class Rijndael : SymmetricAlgorithm // TypeDefIndex: 1334
{
	// Constructors
	protected Rijndael(); // 0x00000001800ED230

	// Methods
	public static Rijndael Create(); // 0x000000018010E0B0
	public static Rijndael Create(string algName); // 0x000000018010E010
}

// Namespace: System.Security.Cryptography
public sealed class RijndaelManaged : Rijndael // TypeDefIndex: 1335
{
	// Constructors
	public RijndaelManaged(); // 0x00000001800ED230

	// Methods
	public override void GenerateIV(); // 0x00000001800E3360
	public override void GenerateKey(); // 0x00000001800E3380
	public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV); // 0x00000001800ED130
	public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV); // 0x00000001800ED1B0
}

// Namespace: System.Security.Cryptography
internal class RijndaelTransform : SymmetricTransform // TypeDefIndex: 1336
{
	// Fields
	private uint[] expandedKey; // 0x58
	private int Nb; // 0x64
	private int Nk; // 0x00
	private int Nr; // 0x10
	private static readonly uint[] Rcon; // 0x20
	private static readonly byte[] SBox; // 0x30
	private static readonly byte[] iSBox; // 0x40
	private static readonly uint[] T0; // 0x50
	private static readonly uint[] T1; // 0x10
	private static readonly uint[] T2; // 0x00
	private static readonly uint[] T3; // 0x10
	private static readonly uint[] iT0; // 0x20
	private static readonly uint[] iT1; // 0x30
	private static readonly uint[] iT2; // 0x28
	private static readonly uint[] iT3; // 0x00

	// Constructors
	public RijndaelTransform(Rijndael algo, bool encryption, byte[] key, byte[] iv); // 0x000000018010D6E0
	private static RijndaelTransform(); // 0x000000018010D450

	// Methods
	public void Clear(); // 0x00000001800ED3D0
	protected override void ECB(byte[] input, byte[] output); // 0x00000001800FD3E0
	private uint SubByte(uint a); // 0x000000018010D330
	private void Encrypt128(byte[] indata, byte[] outdata, uint[] ekey); // 0x00000001800FD4D0
	private void Encrypt192(byte[] indata, byte[] outdata, uint[] ekey); // 0x0000000180100FC0
	private void Encrypt256(byte[] indata, byte[] outdata, uint[] ekey); // 0x00000001801063D0
	private void Decrypt128(byte[] indata, byte[] outdata, uint[] ekey); // 0x00000001800ED3F0
	private void Decrypt192(byte[] indata, byte[] outdata, uint[] ekey); // 0x00000001800F0EA0
	private void Decrypt256(byte[] indata, byte[] outdata, uint[] ekey); // 0x00000001800F63B0
}

// Namespace: System.Security.Cryptography
public sealed class RijndaelManagedTransform : IDisposable, ICryptoTransform // TypeDefIndex: 1337
{
	// Fields
	private RijndaelTransform _st; // 0x10
	private int _bs; // 0x00

	// Properties
	public int BlockSizeValue { get; } // 0x00000001800ED060 
	public bool CanTransformMultipleBlocks { get; } // 0x00000001800ED0A0 
	public bool CanReuseTransform { get; } // 0x00000001800ED070 
	public int InputBlockSize { get; } // 0x00000001800ED0D0 
	public int OutputBlockSize { get; } // 0x00000001800ED100 

	// Constructors
	internal RijndaelManagedTransform(Rijndael algo, bool encryption, byte[] key, byte[] iv); // 0x00000001800ECF90

	// Methods
	private void System.IDisposable.Dispose(); // 0x00000001800ECF00
	public void Clear(); // 0x00000001800ECF00
	public void Reset(); // 0x00000001800EA7B0
	public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset); // 0x00000001800ECF30
	public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x00000001800ECF60
}

// Namespace: System.Security.Cryptography
public abstract class SHA1 : HashAlgorithm // TypeDefIndex: 1338
{
	// Constructors
	protected SHA1(); // 0x00000001800E8D60

	// Methods
	public static SHA1 Create(); // 0x00000001802B68E0
	public static SHA1 Create(string hashName); // 0x00000001802B69A0
}

// Namespace: System.Security.Cryptography
internal class SHA1Internal // TypeDefIndex: 1339
{
	// Fields
	private const int BLOCK_SIZE_BYTES = 64; // 0x00
	private const int HASH_SIZE_BYTES = 20; // 0x10
	private uint[] _H; // 0x20
	private ulong count; // 0x30
	private byte[] _ProcessingBuffer; // 0x28
	private int _ProcessingBufferCount; // 0x00
	private uint[] buff; // 0x28

	// Constructors
	public SHA1Internal(); // 0x00000001802B67F0

	// Methods
	public void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x00000001802B4D50
	public byte[] HashFinal(); // 0x00000001802B4E70
	public void Initialize(); // 0x00000001802B5C40
	private void ProcessBlock(byte[] inputBuffer, uint inputOffset); // 0x00000001802B5D30
	private static void InitialiseBuff(uint[] buff, byte[] input, uint inputOffset); // 0x00000001802B4F80
	private static void FillBuff(uint[] buff); // 0x00000001802B46F0
	private void ProcessFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x00000001802B6620
	internal void AddLength(ulong length, byte[] buffer, int position); // 0x00000001802B4570
}

// Namespace: System.Security.Cryptography
public sealed class SHA1CryptoServiceProvider : SHA1 // TypeDefIndex: 1340
{
	// Fields
	private SHA1Internal sha; // 0x28

	// Constructors
	public SHA1CryptoServiceProvider(); // 0x00000001802B4500

	// Methods
	protected override void Finalize(); // 0x00000001802B43F0
	protected override void Dispose(bool disposing); // 0x00000001802B43E0
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x00000001802B4480
	protected override byte[] HashFinal(); // 0x00000001802B44B0
	public override void Initialize(); // 0x00000001802B44E0
}

// Namespace: System.Security.Cryptography
public class SHA1Managed : SHA1 // TypeDefIndex: 1341
{
	// Fields
	private SHA1Internal sha; // 0x28

	// Constructors
	public SHA1Managed(); // 0x00000001802B6870

	// Methods
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x00000001802B4480
	protected override byte[] HashFinal(); // 0x00000001802B44B0
	public override void Initialize(); // 0x00000001802B44E0
}

// Namespace: System.Security.Cryptography
public abstract class SHA256 : HashAlgorithm // TypeDefIndex: 1342
{
	// Constructors
	protected SHA256(); // 0x00000001802B7830

	// Methods
	public static SHA256 Create(); // 0x00000001802B7770
	public static SHA256 Create(string hashName); // 0x00000001802B76D0
}

// Namespace: System.Security.Cryptography
public class SHA256Managed : SHA256 // TypeDefIndex: 1343
{
	// Fields
	private const int BLOCK_SIZE_BYTES = 64; // 0x00
	private const int HASH_SIZE_BYTES = 32; // 0x28
	private uint[] _H; // 0x38
	private ulong count; // 0x48
	private byte[] _ProcessingBuffer; // 0x28
	private int _ProcessingBufferCount; // 0x38
	private uint[] buff; // 0x48

	// Constructors
	public SHA256Managed(); // 0x00000001802B7640

	// Methods
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x00000001802B6A40
	protected override byte[] HashFinal(); // 0x00000001802B6B60
	public override void Initialize(); // 0x00000001802B6C70
	private void ProcessBlock(byte[] inputBuffer, int inputOffset); // 0x00000001802B6E00
	private void ProcessFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x00000001802B7480
	internal void AddLength(ulong length, byte[] buffer, int position); // 0x00000001802B4570
}

// Namespace: System.Security.Cryptography
public abstract class SHA384 : HashAlgorithm // TypeDefIndex: 1344
{
	// Constructors
	protected SHA384(); // 0x00000001802B8970

	// Methods
	public static SHA384 Create(); // 0x00000001802B8810
	public static SHA384 Create(string hashName); // 0x00000001802B88D0
}

// Namespace: System.Security.Cryptography
public class SHA384Managed : SHA384 // TypeDefIndex: 1345
{
	// Fields
	private byte[] xBuf; // 0x28
	private int xBufOff; // 0x38
	private ulong byteCount1; // 0x48
	private ulong byteCount2; // 0x58
	private ulong H1; // 0x68
	private ulong H2; // 0x78
	private ulong H3; // 0x88
	private ulong H4; // 0x28
	private ulong H5; // 0x38
	private ulong H6; // 0x48
	private ulong H7; // 0x58
	private ulong H8; // 0x68
	private ulong[] W; // 0x78
	private int wOff; // 0x88

	// Constructors
	public SHA384Managed(); // 0x00000001802B7E30

	// Methods
	private void Initialize(bool reuse); // 0x00000001802B7CC0
	public override void Initialize(); // 0x00000001802B7E20
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x00000001802B7850
	protected override byte[] HashFinal(); // 0x00000001802B7A20
	private void update(byte input); // 0x00000001802B8790
	private void processWord(byte[] input, int inOff); // 0x00000001802B8400
	private void unpackWord(ulong word, byte[] output, int outOff); // 0x00000001802B8610
	private void adjustByteCounts(); // 0x00000001802B7F10
	private void processLength(ulong lowW, ulong hiW); // 0x00000001802B8360
	private void processBlock(); // 0x00000001802B7F40
}

// Namespace: System.Security.Cryptography
public abstract class SHA512 : HashAlgorithm // TypeDefIndex: 1346
{
	// Constructors
	protected SHA512(); // 0x00000001802B9AB0

	// Methods
	public static SHA512 Create(); // 0x00000001802B9950
	public static SHA512 Create(string hashName); // 0x00000001802B9A10
}

// Namespace: System.Security.Cryptography
public class SHA512Managed : SHA512 // TypeDefIndex: 1347
{
	// Fields
	private byte[] xBuf; // 0x28
	private int xBufOff; // 0x38
	private ulong byteCount1; // 0x48
	private ulong byteCount2; // 0x58
	private ulong H1; // 0x68
	private ulong H2; // 0x78
	private ulong H3; // 0x88
	private ulong H4; // 0x00
	private ulong H5; // 0x10
	private ulong H6; // 0x20
	private ulong H7; // 0x10
	private ulong H8; // 0x20
	private ulong[] W; // 0x30
	private int wOff; // 0x40

	// Constructors
	public SHA512Managed(); // 0x00000001802B90B0

	// Methods
	private void Initialize(bool reuse); // 0x00000001802B8E60
	public override void Initialize(); // 0x00000001802B8E50
	protected override void HashCore(byte[] rgb, int ibStart, int cbSize); // 0x00000001802B89A0
	protected override byte[] HashFinal(); // 0x00000001802B8B70
	private void update(byte input); // 0x00000001802B98D0
	private void processWord(byte[] input, int inOff); // 0x00000001802B96A0
	private void unpackWord(ulong word, byte[] output, int outOff); // 0x00000001802B8610
	private void adjustByteCounts(); // 0x00000001802B7F10
	private void processLength(ulong lowW, ulong hiW); // 0x00000001802B9600
	private void processBlock(); // 0x00000001802B9190
	private ulong rotateRight(ulong x, int n); // 0x00000001802B98B0
	private ulong Ch(ulong x, ulong y, ulong z); // 0x00000001802B8990
	private ulong Maj(ulong x, ulong y, ulong z); // 0x00000001802B8FC0
	private ulong Sum0(ulong x); // 0x00000001802B9030
	private ulong Sum1(ulong x); // 0x00000001802B9070
	private ulong Sigma0(ulong x); // 0x00000001802B8FD0
	private ulong Sigma1(ulong x); // 0x00000001802B9000
}

// Namespace: System.Security.Cryptography
internal static class SHAConstants // TypeDefIndex: 1348
{
	// Fields
	public static readonly uint[] K1; // 0x00
	public static readonly ulong[] K2; // 0x10

	// Constructors
	private static SHAConstants(); // 0x00000001802B9AD0

}

// Namespace: System.Security.Cryptography
public class SignatureDescription // TypeDefIndex: 1349
{
	// Fields
	private string _DeformatterAlgorithm; // 0x10
	private string _DigestAlgorithm; // 0x20
	private string _FormatterAlgorithm; // 0x10
	private string _KeyAlgorithm; // 0x20

	// Properties
	public string DeformatterAlgorithm { get; set; } // 0x00000001800E20D0 0x0000000180114C30
	public string DigestAlgorithm { get; set; } // 0x00000001800EAEC0 0x00000001800EAEE0
	public string FormatterAlgorithm { get; set; } // 0x00000001800EAEB0 0x00000001800EAED0
	public string KeyAlgorithm { get; set; } // 0x000000018013BF80 0x000000018015B760

	// Constructors
	public SignatureDescription(); // 0x00000001800E2000
	public SignatureDescription(SecurityElement el); // 0x00000001802B9F10

	// Methods
	public virtual AsymmetricSignatureDeformatter CreateDeformatter(AsymmetricAlgorithm key); // 0x00000001802B9B70
	public virtual HashAlgorithm CreateDigest(); // 0x00000001802B9CD0
	public virtual AsymmetricSignatureFormatter CreateFormatter(AsymmetricAlgorithm key); // 0x00000001802B9DB0
}

// Namespace: System.Security.Cryptography
internal class DSASignatureDescription : SignatureDescription // TypeDefIndex: 1350
{
	// Constructors
	public DSASignatureDescription(); // 0x00000001802FBDA0

}

// Namespace: System.Security.Cryptography
internal class RSAPKCS1SHA1SignatureDescription : SignatureDescription // TypeDefIndex: 1351
{
	// Constructors
	public RSAPKCS1SHA1SignatureDescription(); // 0x00000001800EB2E0

	// Methods
	public override AsymmetricSignatureDeformatter CreateDeformatter(AsymmetricAlgorithm key); // 0x00000001800EB2D0
}

// Namespace: System.Security.Cryptography
public abstract class SymmetricAlgorithm : IDisposable // TypeDefIndex: 1352
{
	// Fields
	protected int BlockSizeValue; // 0x10
	protected byte[] IVValue; // 0x20
	protected int KeySizeValue; // 0x30
	protected byte[] KeyValue; // 0x40
	protected KeySizes[] LegalBlockSizesValue; // 0x48
	protected KeySizes[] LegalKeySizesValue; // 0x00
	protected int FeedbackSizeValue; // 0x10
	protected CipherMode ModeValue; // 0x58
	protected PaddingMode PaddingValue; // 0x68
	private bool m_disposed; // 0x78

	// Properties
	public virtual int BlockSize { get; set; } // 0x00000001800ECD10 0x00000001802BA4E0
	public virtual int FeedbackSize { get; set; } // 0x00000001802AD3C0 0x00000001802BA580
	public virtual byte[] IV { get; set; } // 0x00000001802BA380 0x00000001802BA610
	public virtual byte[] Key { get; set; } // 0x00000001802BA420 0x00000001802BA7B0
	public virtual int KeySize { get; set; } // 0x00000001800E2F70 0x00000001802BA710
	public virtual KeySizes[] LegalBlockSizes { get; } // 0x00000001801146E0 
	public virtual KeySizes[] LegalKeySizes { get; } // 0x0000000180119440 
	public virtual CipherMode Mode { get; set; } // 0x00000001802BA4C0 0x00000001802BA8C0
	public virtual PaddingMode Padding { get; set; } // 0x00000001802BA4D0 0x00000001802BA9C0

	// Constructors
	protected SymmetricAlgorithm(); // 0x00000001802BA350

	// Methods
	private void System.IDisposable.Dispose(); // 0x00000001801F12D0
	protected override void Finalize(); // 0x00000001802BA2A0
	public void Clear(); // 0x00000001801E8560
	protected virtual void Dispose(bool disposing); // 0x00000001802BA260
	public virtual ICryptoTransform CreateDecryptor(); // 0x00000001802BA040
	public abstract ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV);
	public virtual ICryptoTransform CreateEncryptor(); // 0x00000001802BA0A0
	public abstract ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV);
	public abstract void GenerateIV();
	public abstract void GenerateKey();
	public bool ValidKeySize(int bitLength); // 0x00000001802BA340
	public static SymmetricAlgorithm Create(); // 0x00000001802BA1A0
	public static SymmetricAlgorithm Create(string algName); // 0x00000001802BA100
}

// Namespace: System.Security.Cryptography
public class ToBase64Transform : IDisposable, ICryptoTransform // TypeDefIndex: 1353
{
	// Fields
	private const int inputBlockSize = 3; // 0x00
	private const int outputBlockSize = 4; // 0x10
	private bool m_disposed; // 0x58

	// Properties
	public bool CanTransformMultipleBlocks { get; } // 0x000000018011A0F0 
	public virtual bool CanReuseTransform { get; } // 0x000000018010E420 
	public int InputBlockSize { get; } // 0x0000000180193F90 
	public int OutputBlockSize { get; } // 0x00000001801AECA0 

	// Constructors
	public ToBase64Transform(); // 0x00000001800E2000

	// Methods
	private void System.IDisposable.Dispose(); // 0x00000001802BB1E0
	protected override void Finalize(); // 0x00000001802BAAF0
	public void Clear(); // 0x00000001802BAAC0
	protected virtual void Dispose(bool disposing); // 0x00000001802BAAE0
	public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset); // 0x00000001802BB210
	internal static void InternalTransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset); // 0x00000001802BAB90
	public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x00000001802BB500
	internal static byte[] InternalTransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount); // 0x00000001802BADF0
}

// Namespace: System.Security.Cryptography
public abstract class TripleDES : SymmetricAlgorithm // TypeDefIndex: 1354
{
	// Properties
	public override byte[] Key { get; set; } // 0x00000001802BC3E0 0x00000001802BC4B0

	// Constructors
	protected TripleDES(); // 0x00000001802BB7D0

	// Methods
	public static bool IsWeakKey(byte[] rgbKey); // 0x00000001802BC1D0
	public static TripleDES Create(); // 0x00000001802BC070
	public static TripleDES Create(string str); // 0x00000001802BC130
}

// Namespace: System.Security.Cryptography
public sealed class TripleDESCryptoServiceProvider : TripleDES // TypeDefIndex: 1355
{
	// Constructors
	public TripleDESCryptoServiceProvider(); // 0x00000001802BB7D0

	// Methods
	public override void GenerateIV(); // 0x00000001800E3360
	public override void GenerateKey(); // 0x00000001802BB7B0
	public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV); // 0x00000001802BB6B0
	public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV); // 0x00000001802BB730
}

// Namespace: System.Security.Cryptography
internal class TripleDESTransform : SymmetricTransform // TypeDefIndex: 1356
{
	// Fields
	private DESTransform E1; // 0x58
	private DESTransform D2; // 0x68
	private DESTransform E3; // 0x78
	private DESTransform D1; // 0x00
	private DESTransform E2; // 0x18
	private DESTransform D3; // 0x10

	// Constructors
	public TripleDESTransform(TripleDES algo, bool encryption, byte[] key, byte[] iv); // 0x00000001802BBD40

	// Methods
	protected override void ECB(byte[] input, byte[] output); // 0x00000001802BB980
	internal static byte[] GetStrongKey(); // 0x00000001802BBB00
}

// Namespace: System.Security.Permissions
[Serializable]
public abstract class CodeAccessSecurityAttribute : SecurityAttribute // TypeDefIndex: 1357
{
	// Constructors
	protected CodeAccessSecurityAttribute(SecurityAction action); // 0x00000001802A5E50

}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class EnvironmentPermission : CodeAccessPermission, IBuiltInPermission, IUnrestrictedPermission // TypeDefIndex: 1358
{
	// Fields
	private const int version = 1; // 0x00
	private PermissionState _state; // 0x18
	private ArrayList readList; // 0x10
	private ArrayList writeList; // 0x00

	// Constructors
	public EnvironmentPermission(PermissionState state); // 0x00000001802A7570
	public EnvironmentPermission(EnvironmentPermissionAccess flag, string pathList); // 0x00000001802A7600

	// Methods
	private int System.Security.Permissions.IBuiltInPermission.GetTokenIndex(); // 0x00000001800EA8C0
	public void AddPathList(EnvironmentPermissionAccess flag, string pathList); // 0x00000001802A5ED0
	public override IPermission Copy(); // 0x00000001802A6310
	public override void FromXml(SecurityElement esd); // 0x00000001802A63D0
	public string GetPathList(EnvironmentPermissionAccess flag); // 0x00000001802A64B0
	public override IPermission Intersect(IPermission target); // 0x00000001802A67D0
	public override bool IsSubsetOf(IPermission target); // 0x00000001802A6B20
	public bool IsUnrestricted(); // 0x00000001802A2600
	public void SetPathList(EnvironmentPermissionAccess flag, string pathList); // 0x00000001802A6EB0
	public override SecurityElement ToXml(); // 0x00000001802A7300
	public override IPermission Union(IPermission other); // 0x00000001802A73D0
	private bool IsEmpty(); // 0x00000001802A6AB0
	private EnvironmentPermission Cast(IPermission target); // 0x00000001802A6270
	internal void ThrowInvalidFlag(EnvironmentPermissionAccess flag, bool context); // 0x00000001802A7230
	private string GetPathList(ArrayList list); // 0x00000001802A6510
}

// Namespace: System.Security.Permissions
[Serializable]
public enum EnvironmentPermissionAccess // TypeDefIndex: 1359
{
	NoAccess = 0,
	Read = 1,
	Write = 2,
	AllAccess = 3
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class EnvironmentPermissionAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 1360
{
	// Fields
	private string read; // 0x18
	private string write; // 0x00

	// Properties
	public string All { get; set; } // 0x00000001802A5E60 0x00000001802A5EC0
	public string Read { get; set; } // 0x00000001800EAEC0 0x00000001800EAEE0
	public string Write { get; set; } // 0x00000001800EAEB0 0x00000001800EAED0

	// Constructors
	public EnvironmentPermissionAttribute(SecurityAction action); // 0x00000001802A5E50

	// Methods
	public override IPermission CreatePermission(); // 0x00000001800EA8C0
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class FileDialogPermission : CodeAccessPermission, IBuiltInPermission, IUnrestrictedPermission // TypeDefIndex: 1361
{
	// Fields
	private const int version = 1; // 0x00
	private FileDialogPermissionAccess _access; // 0x10

	// Properties
	public FileDialogPermissionAccess Access { get; set; } // 0x00000001800ECD10 0x00000001802A7E20

	// Constructors
	public FileDialogPermission(PermissionState state); // 0x00000001802A7C80
	public FileDialogPermission(FileDialogPermissionAccess access); // 0x00000001802A7CC0

	// Methods
	private int System.Security.Permissions.IBuiltInPermission.GetTokenIndex(); // 0x0000000180119A50
	public override IPermission Copy(); // 0x00000001802A7820
	public override void FromXml(SecurityElement esd); // 0x00000001802A7880
	public override IPermission Intersect(IPermission target); // 0x00000001802A79E0
	public override bool IsSubsetOf(IPermission target); // 0x00000001802A7A70
	public bool IsUnrestricted(); // 0x00000001802A7AA0
	public override SecurityElement ToXml(); // 0x00000001802A7AB0
	public override IPermission Union(IPermission target); // 0x00000001802A7B60
	private FileDialogPermission Cast(IPermission target); // 0x00000001802A7780
}

// Namespace: System.Security.Permissions
[Serializable]
public enum FileDialogPermissionAccess // TypeDefIndex: 1362
{
	None = 0,
	Open = 1,
	Save = 2,
	OpenSave = 3
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class FileDialogPermissionAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 1363
{
	// Fields
	private bool canOpen; // 0x18
	private bool canSave; // 0x00

	// Properties
	public bool Open { get; set; } // 0x00000001801249E0 0x00000001801AB4A0
	public bool Save { get; set; } // 0x00000001802A7760 0x00000001802A7770

	// Constructors
	public FileDialogPermissionAttribute(SecurityAction action); // 0x00000001802A5E50

	// Methods
	public override IPermission CreatePermission(); // 0x00000001802A76A0
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class FileIOPermission : CodeAccessPermission, IBuiltInPermission, IUnrestrictedPermission // TypeDefIndex: 1364
{
	// Fields
	private const int version = 1; // 0x00
	private static char[] BadPathNameCharacters; // 0x08
	private static char[] BadFileNameCharacters; // 0x14
	private bool m_Unrestricted; // 0x20
	private FileIOPermissionAccess m_AllFilesAccess; // 0x30
	private FileIOPermissionAccess m_AllLocalFilesAccess; // 0x10
	private ArrayList readList; // 0x00
	private ArrayList writeList; // 0x00
	private ArrayList appendList; // 0x00
	private ArrayList pathList; // 0x18

	// Properties
	public FileIOPermissionAccess AllFiles { get; set; } // 0x0000000180156360 0x00000001802AACB0
	public FileIOPermissionAccess AllLocalFiles { get; set; } // 0x00000001800ED060 0x00000001802AACC0

	// Constructors
	public FileIOPermission(PermissionState state); // 0x00000001802AAC00
	public FileIOPermission(FileIOPermissionAccess access, string path); // 0x00000001802AAAF0
	public FileIOPermission(FileIOPermissionAccess access, string[] pathList); // 0x00000001802AAA50
	public FileIOPermission(FileIOPermissionAccess access, AccessControlActions control, string path); // 0x00000001802AAC50
	public FileIOPermission(FileIOPermissionAccess access, AccessControlActions control, string[] pathList); // 0x00000001802AA9F0
	private static FileIOPermission(); // 0x00000001802AA970

	// Methods
	private int System.Security.Permissions.IBuiltInPermission.GetTokenIndex(); // 0x00000001801ADE70
	internal void CreateLists(); // 0x00000001802A8710
	public void AddPathList(FileIOPermissionAccess access, string path); // 0x00000001802A8160
	public void AddPathList(FileIOPermissionAccess access, string[] pathList); // 0x00000001802A8210
	internal void AddPathInternal(FileIOPermissionAccess access, string path); // 0x00000001802A8050
	public override IPermission Copy(); // 0x00000001802A8440
	public override void FromXml(SecurityElement esd); // 0x00000001802A87C0
	public string[] GetPathList(FileIOPermissionAccess access); // 0x00000001802A8A50
	public override IPermission Intersect(IPermission target); // 0x00000001802A8FF0
	public override bool IsSubsetOf(IPermission target); // 0x00000001802A9260
	public bool IsUnrestricted(); // 0x0000000180113840
	public void SetPathList(FileIOPermissionAccess access, string path); // 0x00000001802A9830
	public void SetPathList(FileIOPermissionAccess access, string[] pathList); // 0x00000001802A9730
	public override SecurityElement ToXml(); // 0x00000001802A9D00
	public override IPermission Union(IPermission other); // 0x00000001802AA3E0
	public override bool Equals(object obj); // 0x000000018011A0F0
	public override int GetHashCode(); // 0x00000001802A8A40
	private bool IsEmpty(); // 0x00000001802A91B0
	private static FileIOPermission Cast(IPermission target); // 0x00000001802A8300
	internal static void ThrowInvalidFlag(FileIOPermissionAccess access, bool context); // 0x00000001802A9C30
	internal static void ThrowIfInvalidPath(string path); // 0x00000001802A99A0
	internal static void ThrowIfInvalidPath(string[] paths); // 0x00000001802A98F0
	internal void Clear(FileIOPermissionAccess access); // 0x00000001802A83A0
	internal static bool KeyIsSubsetOf(IList local, IList target); // 0x00000001802A9420
	internal static void UnionKeys(IList list, string[] paths); // 0x00000001802AA210
	internal static void IntersectKeys(IList local, IList target, IList result); // 0x00000001802A8C30
}

// Namespace: System.Security.Permissions
[Serializable]
public enum FileIOPermissionAccess // TypeDefIndex: 1365
{
	NoAccess = 0,
	Read = 1,
	Write = 2,
	Append = 4,
	PathDiscovery = 8,
	AllAccess = 15
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class FileIOPermissionAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 1366
{
	// Fields
	private string append; // 0x18
	private string path; // 0x28
	private string read; // 0x38
	private string write; // 0x40
	private FileIOPermissionAccess allFiles; // 0x18
	private FileIOPermissionAccess allLocalFiles; // 0x00
	private string changeAccessControl; // 0x10
	private string viewAccessControl; // 0x00

	// Properties
	public string All { get; set; } // 0x00000001802A7F80 0x00000001802A8030
	public string Append { get; set; } // 0x00000001800EAEC0 0x00000001800EAEE0
	public string PathDiscovery { get; set; } // 0x00000001800EAEB0 0x00000001800EAED0
	public string Read { get; set; } // 0x000000018013BF80 0x000000018015B760
	public string Write { get; set; } // 0x00000001801146E0 0x0000000180114BF0
	public FileIOPermissionAccess AllFiles { get; set; } // 0x0000000180114770 0x0000000180114C00
	public FileIOPermissionAccess AllLocalFiles { get; set; } // 0x0000000180114A80 0x0000000180114C10
	public string ChangeAccessControl { get; set; } // 0x0000000180114BB0 0x0000000180114C20
	public string ViewAccessControl { get; set; } // 0x0000000180113E60 0x0000000180176850
	public string ViewAndModify { get; set; } // 0x00000001802A7FE0 0x00000001802A8030

	// Constructors
	public FileIOPermissionAttribute(SecurityAction action); // 0x00000001802A5E50

	// Methods
	public override IPermission CreatePermission(); // 0x00000001800EA8C0
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class GacIdentityPermission : CodeAccessPermission, IBuiltInPermission // TypeDefIndex: 1367
{
	// Fields
	private const int version = 1; // 0x00

	// Constructors
	public GacIdentityPermission(); // 0x00000001800EAC90
	public GacIdentityPermission(PermissionState state); // 0x00000001802A0030

	// Methods
	private int System.Security.Permissions.IBuiltInPermission.GetTokenIndex(); // 0x00000001802AAEE0
	public override IPermission Copy(); // 0x00000001802AADC0
	public override IPermission Intersect(IPermission target); // 0x00000001802AAE60
	public override bool IsSubsetOf(IPermission target); // 0x00000001802AAEC0
	public override IPermission Union(IPermission target); // 0x00000001802AAF00
	public override void FromXml(SecurityElement securityElement); // 0x00000001802AAE10
	public override SecurityElement ToXml(); // 0x00000001802AAEF0
	private GacIdentityPermission Cast(IPermission target); // 0x00000001802AAD20
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class GacIdentityPermissionAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 1368
{
	// Constructors
	public GacIdentityPermissionAttribute(SecurityAction action); // 0x00000001802A5E50

	// Methods
	public override IPermission CreatePermission(); // 0x00000001802AACD0
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class HostProtectionAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 1369
{
	// Fields
	private HostProtectionResource _resources; // 0x18

	// Properties
	public bool ExternalProcessMgmt { get; set; } // 0x000000018029EC30 0x000000018029EDD0
	public bool ExternalThreading { get; set; } // 0x000000018029EBE0 0x000000018029ED30
	public bool MayLeakOnAbort { get; set; } // 0x000000018029EBA0 0x000000018029ECB0
	public bool SecurityInfrastructure { get; set; } // 0x000000018029EBC0 0x000000018029ECF0
	public bool SelfAffectingProcessMgmt { get; set; } // 0x000000018029EBF0 0x000000018029ED50
	public bool SelfAffectingThreading { get; set; } // 0x000000018029EBB0 0x000000018029ECD0
	public bool SharedState { get; set; } // 0x000000018029EC40 0x000000018029EDF0
	public bool Synchronization { get; set; } // 0x000000018029EB70 0x000000018029EC50
	public bool UI { get; set; } // 0x000000018029EC20 0x000000018029EDB0
	public HostProtectionResource Resources { get; set; } // 0x00000001800ED060 0x000000018019DD90

	// Constructors
	public HostProtectionAttribute(); // 0x00000001802AAF50
	public HostProtectionAttribute(SecurityAction action); // 0x00000001802AAF60

	// Methods
	public override IPermission CreatePermission(); // 0x00000001800EA8C0
}

// Namespace: System.Security.Permissions
[Serializable]
internal sealed class HostProtectionPermission : CodeAccessPermission, IBuiltInPermission, IUnrestrictedPermission // TypeDefIndex: 1370
{
	// Fields
	private const int version = 1; // 0x00
	private HostProtectionResource _resources; // 0x10

	// Properties
	public HostProtectionResource Resources { get; set; } // 0x00000001800ECD10 0x00000001802AB870

	// Constructors
	public HostProtectionPermission(PermissionState state); // 0x00000001802AB6D0
	public HostProtectionPermission(HostProtectionResource resources); // 0x00000001802AB710

	// Methods
	private int System.Security.Permissions.IBuiltInPermission.GetTokenIndex(); // 0x00000001802AB500
	public override IPermission Copy(); // 0x00000001802AB200
	public override IPermission Intersect(IPermission target); // 0x00000001802AB370
	public override IPermission Union(IPermission target); // 0x00000001802AB5B0
	public override bool IsSubsetOf(IPermission target); // 0x00000001802AB490
	public override void FromXml(SecurityElement e); // 0x00000001802AB260
	public override SecurityElement ToXml(); // 0x00000001802AB510
	public bool IsUnrestricted(); // 0x00000001802AB4F0
	private HostProtectionPermission Cast(IPermission target); // 0x00000001802AB160
}

// Namespace: System.Security.Permissions
[Serializable]
public enum HostProtectionResource // TypeDefIndex: 1371
{
	None = 0,
	Synchronization = 1,
	SharedState = 2,
	ExternalProcessMgmt = 4,
	SelfAffectingProcessMgmt = 8,
	ExternalThreading = 16,
	SelfAffectingThreading = 32,
	SecurityInfrastructure = 64,
	UI = 128,
	MayLeakOnAbort = 256,
	All = 511
}

// Namespace: System.Security.Permissions
internal interface IBuiltInPermission // TypeDefIndex: 1372
{
	// Methods
	int GetTokenIndex();
}

// Namespace: System.Security.Permissions
internal enum BuiltInToken // TypeDefIndex: 1373
{
	Environment = 0,
	FileDialog = 1,
	FileIO = 2,
	IsolatedStorageFile = 3,
	Reflection = 4,
	Registry = 5,
	Security = 6,
	UI = 7,
	Principal = 8,
	HostProtection = 9,
	PublisherIdentity = 10,
	SiteIdentity = 11,
	StrongNameIdentity = 12,
	UrlIdentity = 13,
	ZoneIdentity = 14,
	GacIdentity = 15,
	KeyContainer = 16
}

// Namespace: System.Security.Permissions
public interface IUnrestrictedPermission // TypeDefIndex: 1374
{
	// Methods
	bool IsUnrestricted();
}

// Namespace: System.Security.Permissions
[Serializable]
public enum IsolatedStorageContainment // TypeDefIndex: 1375
{
	None = 0,
	DomainIsolationByUser = 16,
	ApplicationIsolationByUser = 21,
	AssemblyIsolationByUser = 32,
	DomainIsolationByMachine = 48,
	AssemblyIsolationByMachine = 64,
	ApplicationIsolationByMachine = 69,
	DomainIsolationByRoamingUser = 80,
	AssemblyIsolationByRoamingUser = 96,
	ApplicationIsolationByRoamingUser = 101,
	AdministerIsolatedStorageByUser = 112,
	UnrestrictedIsolatedStorage = 240
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class IsolatedStorageFilePermission : IsolatedStoragePermission, IBuiltInPermission // TypeDefIndex: 1376
{
	// Fields
	private const int version = 1; // 0x00

	// Constructors
	public IsolatedStorageFilePermission(PermissionState state); // 0x00000001802AC3E0

	// Methods
	private int System.Security.Permissions.IBuiltInPermission.GetTokenIndex(); // 0x0000000180193F90
	public override IPermission Copy(); // 0x00000001802ABEF0
	public override IPermission Intersect(IPermission target); // 0x00000001802ABFA0
	public override bool IsSubsetOf(IPermission target); // 0x00000001802AC0D0
	public override IPermission Union(IPermission target); // 0x00000001802AC240
	public override SecurityElement ToXml(); // 0x00000001802AC150
	private IsolatedStorageFilePermission Cast(IPermission target); // 0x00000001802ABE50
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class IsolatedStorageFilePermissionAttribute : IsolatedStoragePermissionAttribute // TypeDefIndex: 1377
{
	// Constructors
	public IsolatedStorageFilePermissionAttribute(SecurityAction action); // 0x00000001802A5E50

	// Methods
	public override IPermission CreatePermission(); // 0x00000001802ABD70
}

// Namespace: System.Security.Permissions
[Serializable]
public abstract class IsolatedStoragePermission : CodeAccessPermission, IUnrestrictedPermission // TypeDefIndex: 1378
{
	// Fields
	private const int version = 1; // 0x00
	internal long m_userQuota; // 0x18
	internal long m_machineQuota; // 0x28
	internal long m_expirationDays; // 0x18
	internal bool m_permanentData; // 0x00
	internal IsolatedStorageContainment m_allowed; // 0x18

	// Properties
	public long UserQuota { get; set; } // 0x00000001800E20D0 0x0000000180114C30
	public IsolatedStorageContainment UsageAllowed { get; set; } // 0x0000000180118700 0x00000001802AC620

	// Constructors
	protected IsolatedStoragePermission(PermissionState state); // 0x00000001802AC3E0

	// Methods
	public bool IsUnrestricted(); // 0x00000001802AC610
	public override SecurityElement ToXml(); // 0x00000001802AC150
	public override void FromXml(SecurityElement esd); // 0x00000001802AC430
	internal bool IsEmpty(); // 0x00000001802AC5F0
}

// Namespace: System.Security.Permissions
[Serializable]
public abstract class IsolatedStoragePermissionAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 1379
{
	// Fields
	private IsolatedStorageContainment usage_allowed; // 0x18
	private long user_quota; // 0x00

	// Properties
	public IsolatedStorageContainment UsageAllowed { get; set; } // 0x00000001800ED060 0x000000018019DD90
	public long UserQuota { get; set; } // 0x00000001800EAEB0 0x00000001800EAED0

	// Constructors
	protected IsolatedStoragePermissionAttribute(SecurityAction action); // 0x00000001802A5E50

}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class KeyContainerPermission : CodeAccessPermission, IBuiltInPermission, IUnrestrictedPermission // TypeDefIndex: 1380
{
	// Fields
	private const int version = 1; // 0x00
	private KeyContainerPermissionAccessEntryCollection _accessEntries; // 0x18
	private KeyContainerPermissionFlags _flags; // 0x10

	// Properties
	public KeyContainerPermissionAccessEntryCollection AccessEntries { get; } // 0x00000001800E20D0 
	public KeyContainerPermissionFlags Flags { get; } // 0x00000001800ED060 

	// Constructors
	public KeyContainerPermission(PermissionState state); // 0x00000001802ADF20
	public KeyContainerPermission(KeyContainerPermissionFlags flags); // 0x00000001802ADEF0
	public KeyContainerPermission(KeyContainerPermissionFlags flags, KeyContainerPermissionAccessEntry[] accessList); // 0x00000001802ADF60

	// Methods
	private int System.Security.Permissions.IBuiltInPermission.GetTokenIndex(); // 0x00000001802618D0
	public override IPermission Copy(); // 0x00000001802AD480
	public override void FromXml(SecurityElement securityElement); // 0x00000001802AD5D0
	public override IPermission Intersect(IPermission target); // 0x00000001800EA8C0
	public override bool IsSubsetOf(IPermission target); // 0x000000018011A0F0
	public bool IsUnrestricted(); // 0x00000001802AD710
	public override SecurityElement ToXml(); // 0x00000001802AD7F0
	public override IPermission Union(IPermission target); // 0x00000001802AD870
	private void SetFlags(KeyContainerPermissionFlags flags); // 0x00000001802AD720
	private KeyContainerPermission Cast(IPermission target); // 0x00000001802AD3E0
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class KeyContainerPermissionAccessEntry // TypeDefIndex: 1381
{
	// Fields
	private KeyContainerPermissionFlags _flags; // 0x10
	private string _containerName; // 0x20
	private int _spec; // 0x30
	private string _store; // 0x10
	private string _providerName; // 0x18
	private int _type; // 0x28

	// Properties
	public KeyContainerPermissionFlags Flags { get; set; } // 0x00000001800ECD10 0x00000001802AD070
	public string KeyContainerName { get; set; } // 0x00000001800EAEC0 0x00000001800EAEE0
	public int KeySpec { get; set; } // 0x00000001800E2F70 0x000000018018FC20
	public string KeyStore { get; set; } // 0x000000018013BF80 0x000000018015B760
	public string ProviderName { get; set; } // 0x00000001801146E0 0x0000000180114BF0
	public int ProviderType { get; set; } // 0x0000000180114770 0x0000000180114C00

	// Constructors
	public KeyContainerPermissionAccessEntry(CspParameters parameters, KeyContainerPermissionFlags flags); // 0x00000001802ACFC0
	public KeyContainerPermissionAccessEntry(string keyContainerName, KeyContainerPermissionFlags flags); // 0x00000001802ACF10
	public KeyContainerPermissionAccessEntry(string keyStore, string providerName, int providerType, string keyContainerName, int keySpec, KeyContainerPermissionFlags flags); // 0x00000001802ACF50

	// Methods
	public override bool Equals(object o); // 0x00000001802ACD70
	public override int GetHashCode(); // 0x00000001802ACEA0
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class KeyContainerPermissionAccessEntryCollection : IEnumerable, ICollection // TypeDefIndex: 1382
{
	// Fields
	private ArrayList _list; // 0x10

	// Properties
	public int Count { get; } // 0x000000018015AE50 
	public bool IsSynchronized { get; } // 0x000000018011A0F0 
	public KeyContainerPermissionAccessEntry Item { get; } // 0x00000001802ACB90 
	public object SyncRoot { get; } // 0x0000000180123590 

	// Constructors
	internal KeyContainerPermissionAccessEntryCollection(); // 0x00000001802ACB30
	internal KeyContainerPermissionAccessEntryCollection(KeyContainerPermissionAccessEntry[] entries); // 0x00000001802ACAB0

	// Methods
	private void System.Collections.ICollection.CopyTo(Array array, int index); // 0x0000000180142F00
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x00000001802ACA30
	public int Add(KeyContainerPermissionAccessEntry accessEntry); // 0x0000000180177070
	public void Clear(); // 0x00000001801770A0
	public void CopyTo(KeyContainerPermissionAccessEntry[] array, int index); // 0x0000000180142F00
	public KeyContainerPermissionAccessEntryEnumerator GetEnumerator(); // 0x00000001802AC7A0
	public int IndexOf(KeyContainerPermissionAccessEntry accessEntry); // 0x00000001802AC820
	public void Remove(KeyContainerPermissionAccessEntry accessEntry); // 0x00000001802AC920
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class KeyContainerPermissionAccessEntryEnumerator : IEnumerator // TypeDefIndex: 1383
{
	// Fields
	private IEnumerator e; // 0x10

	// Properties
	private object System.Collections.IEnumerator.Current { get; } // 0x00000001802ACCB0 
	public KeyContainerPermissionAccessEntry Current { get; } // 0x00000001802ACD00 

	// Constructors
	internal KeyContainerPermissionAccessEntryEnumerator(ArrayList list); // 0x00000001801586D0

	// Methods
	public bool MoveNext(); // 0x00000001802ACC10
	public void Reset(); // 0x00000001802ACC60
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class KeyContainerPermissionAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 1384
{
	// Fields
	private KeyContainerPermissionFlags _flags; // 0x18
	private string _containerName; // 0x28
	private int _spec; // 0x38
	private string _store; // 0x10
	private string _providerName; // 0x00
	private int _type; // 0x00

	// Properties
	public KeyContainerPermissionFlags Flags { get; set; } // 0x00000001800ED060 0x000000018019DD90
	public string KeyContainerName { get; set; } // 0x00000001800EAEB0 0x00000001800EAED0
	public int KeySpec { get; set; } // 0x0000000180119420 0x00000001801CAD10
	public string KeyStore { get; set; } // 0x00000001801146E0 0x0000000180114BF0
	public string ProviderName { get; set; } // 0x0000000180119440 0x000000018015B770
	public int ProviderType { get; set; } // 0x00000001802AD3C0 0x00000001802AD3D0

	// Constructors
	public KeyContainerPermissionAttribute(SecurityAction action); // 0x00000001802AD390

	// Methods
	public override IPermission CreatePermission(); // 0x00000001802AD140
	private bool EmptyEntry(); // 0x00000001802AD360
}

// Namespace: System.Security.Permissions
[Serializable]
public enum KeyContainerPermissionFlags // TypeDefIndex: 1385
{
	NoFlags = 0,
	Create = 1,
	Open = 2,
	Delete = 4,
	Import = 16,
	Export = 32,
	Sign = 256,
	Decrypt = 512,
	ViewAcl = 4096,
	ChangeAcl = 8192,
	AllFlags = 13111
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class PermissionSetAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 1386
{
	// Fields
	private string file; // 0x18
	private string name; // 0x28
	private bool isUnicodeEncoded; // 0x38
	private string xml; // 0x10
	private string hex; // 0x00

	// Properties
	public string File { get; set; } // 0x00000001800EAEC0 0x00000001800EAEE0
	public string Hex { get; set; } // 0x0000000180119440 0x000000018015B770
	public string Name { get; set; } // 0x00000001800EAEB0 0x00000001800EAED0
	public bool UnicodeEncoded { get; set; } // 0x00000001800EA930 0x00000001801799F0
	public string XML { get; set; } // 0x00000001801146E0 0x0000000180114BF0

	// Constructors
	public PermissionSetAttribute(SecurityAction action); // 0x00000001802A5E50

	// Methods
	public override IPermission CreatePermission(); // 0x00000001800EA8C0
	private PermissionSet CreateFromXml(string xml); // 0x00000001800EA8C0
	public PermissionSet CreatePermissionSet(); // 0x00000001800EA8C0
}

// Namespace: System.Security.Permissions
[Serializable]
public enum PermissionState // TypeDefIndex: 1387
{
	None = 0,
	Unrestricted = 1
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class PrincipalPermission : IBuiltInPermission, IUnrestrictedPermission, IPermission, ISecurityEncodable // TypeDefIndex: 1388
{
	// Fields
	private const int version = 1; // 0x00
	private ArrayList principals; // 0x10

	// Constructors
	public PrincipalPermission(PermissionState state); // 0x00000001802B0E90
	public PrincipalPermission(string name, string role); // 0x00000001802B0E70
	public PrincipalPermission(string name, string role, bool isAuthenticated); // 0x00000001802B0F60
	internal PrincipalPermission(ArrayList principals); // 0x00000001802B1030

	// Methods
	private int System.Security.Permissions.IBuiltInPermission.GetTokenIndex(); // 0x0000000180129DD0
	public IPermission Copy(); // 0x00000001802AF0B0
	public void Demand(); // 0x00000001802AF110
	public void FromXml(SecurityElement elem); // 0x00000001802AF8C0
	public IPermission Intersect(IPermission target); // 0x00000001802AFBF0
	public bool IsSubsetOf(IPermission target); // 0x00000001802B0160
	public bool IsUnrestricted(); // 0x00000001802B05B0
	public override string ToString(); // 0x00000001802B07A0
	public SecurityElement ToXml(); // 0x00000001802B07D0
	public IPermission Union(IPermission other); // 0x00000001802B0BB0
	public override bool Equals(object obj); // 0x00000001802AF470
	public override int GetHashCode(); // 0x000000018026AD10
	private PrincipalPermission Cast(IPermission target); // 0x00000001802AED40
	private bool IsEmpty(); // 0x000000018019CD80
	internal int CheckSecurityElement(SecurityElement se, string parameterName, int minimumVersion, int maximumVersion); // 0x00000001802AEDE0
}

// Namespace: 
internal class PrincipalInfo // TypeDefIndex: 1389
{
	// Fields
	private string _name; // 0x10
	private string _role; // 0x20
	private bool _isAuthenticated; // 0x18

	// Properties
	public string Name { get; } // 0x00000001800E20D0 
	public string Role { get; } // 0x00000001800EAEC0 
	public bool IsAuthenticated { get; } // 0x000000018022D900 

	// Constructors
	public PrincipalInfo(string name, string role, bool isAuthenticated); // 0x00000001802AEC20

}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class PrincipalPermissionAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 1390
{
	// Fields
	private bool authenticated; // 0x18
	private string name; // 0x28
	private string role; // 0x00

	// Properties
	public bool Authenticated { get; set; } // 0x00000001801249E0 0x00000001801AB4A0
	public string Name { get; set; } // 0x00000001800EAEB0 0x00000001800EAED0
	public string Role { get; set; } // 0x000000018013BF80 0x000000018015B760

	// Constructors
	public PrincipalPermissionAttribute(SecurityAction action); // 0x00000001802AED20

	// Methods
	public override IPermission CreatePermission(); // 0x00000001802AEC70
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class PublisherIdentityPermission : CodeAccessPermission, IBuiltInPermission // TypeDefIndex: 1391
{
	// Fields
	private const int version = 1; // 0x00
	private X509Certificate x509; // 0x18

	// Properties
	public X509Certificate Certificate { get; set; } // 0x00000001800E20D0 0x00000001802B1960

	// Constructors
	public PublisherIdentityPermission(PermissionState state); // 0x00000001802A0030
	public PublisherIdentityPermission(X509Certificate certificate); // 0x00000001802B1930

	// Methods
	private int System.Security.Permissions.IBuiltInPermission.GetTokenIndex(); // 0x00000001802B16C0
	public override IPermission Copy(); // 0x00000001802B1330
	public override void FromXml(SecurityElement esd); // 0x00000001802B13B0
	public override IPermission Intersect(IPermission target); // 0x00000001802B14C0
	public override bool IsSubsetOf(IPermission target); // 0x00000001802B15E0
	public override SecurityElement ToXml(); // 0x00000001802B16D0
	public override IPermission Union(IPermission target); // 0x00000001802B1760
	private PublisherIdentityPermission Cast(IPermission target); // 0x00000001802B1290
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class PublisherIdentityPermissionAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 1392
{
	// Fields
	private string certFile; // 0x18
	private string signedFile; // 0x28
	private string x509data; // 0x00

	// Properties
	public string CertFile { get; set; } // 0x00000001800EAEC0 0x00000001800EAEE0
	public string SignedFile { get; set; } // 0x00000001800EAEB0 0x00000001800EAED0
	public string X509Certificate { get; set; } // 0x000000018013BF80 0x000000018015B760

	// Constructors
	public PublisherIdentityPermissionAttribute(SecurityAction action); // 0x00000001802A5E50

	// Methods
	public override IPermission CreatePermission(); // 0x00000001802B10F0
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class ReflectionPermission : CodeAccessPermission, IBuiltInPermission, IUnrestrictedPermission // TypeDefIndex: 1393
{
	// Fields
	private const int version = 1; // 0x00
	private ReflectionPermissionFlag flags; // 0x18

	// Properties
	public ReflectionPermissionFlag Flags { get; set; } // 0x00000001800ECD10 0x00000001802B2250

	// Constructors
	public ReflectionPermission(PermissionState state); // 0x00000001802B21E0
	public ReflectionPermission(ReflectionPermissionFlag flag); // 0x00000001802B2220

	// Methods
	private int System.Security.Permissions.IBuiltInPermission.GetTokenIndex(); // 0x00000001801AECA0
	public override IPermission Copy(); // 0x00000001802B1B40
	public override void FromXml(SecurityElement esd); // 0x00000001802B1BA0
	public override IPermission Intersect(IPermission target); // 0x00000001802B1CE0
	public override bool IsSubsetOf(IPermission target); // 0x00000001802B1E30
	public bool IsUnrestricted(); // 0x00000001802B1E90
	public override SecurityElement ToXml(); // 0x00000001802B1EA0
	public override IPermission Union(IPermission other); // 0x00000001802B20A0
	private ReflectionPermission Cast(IPermission target); // 0x00000001802B1AA0
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class ReflectionPermissionAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 1394
{
	// Fields
	private ReflectionPermissionFlag flags; // 0x18
	private bool memberAccess; // 0x1D
	private bool reflectionEmit; // 0x10
	private bool typeInfo; // 0x00

	// Properties
	public ReflectionPermissionFlag Flags { get; set; } // 0x00000001800ED060 0x00000001802B1A00
	public bool MemberAccess { get; set; } // 0x0000000180143120 0x00000001802B1A20
	public bool ReflectionEmit { get; set; } // 0x00000001802B19E0 0x00000001802B1A40
	public bool RestrictedMemberAccess { get; set; } // 0x000000018029EBF0 0x00000001802B1A60
	public bool TypeInformation { get; set; } // 0x00000001802B19F0 0x00000001802B1A80

	// Constructors
	public ReflectionPermissionAttribute(SecurityAction action); // 0x00000001802A5E50

	// Methods
	public override IPermission CreatePermission(); // 0x00000001800EA8C0
}

// Namespace: System.Security.Permissions
[Serializable]
public enum ReflectionPermissionFlag // TypeDefIndex: 1395
{
	NoFlags = 0,
	TypeInformation = 1,
	MemberAccess = 2,
	ReflectionEmit = 4,
	AllFlags = 7,
	RestrictedMemberAccess = 8
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class RegistryPermission : CodeAccessPermission, IBuiltInPermission, IUnrestrictedPermission // TypeDefIndex: 1396
{
	// Fields
	private const int version = 1; // 0x00
	private PermissionState _state; // 0x18
	private ArrayList createList; // 0x28
	private ArrayList readList; // 0x10
	private ArrayList writeList; // 0x00

	// Constructors
	public RegistryPermission(PermissionState state); // 0x00000001802B4330
	public RegistryPermission(RegistryPermissionAccess access, string pathList); // 0x00000001802B40E0
	public RegistryPermission(RegistryPermissionAccess access, AccessControlActions control, string pathList); // 0x00000001802B41B0

	// Methods
	private int System.Security.Permissions.IBuiltInPermission.GetTokenIndex(); // 0x00000001802B3C80
	public void AddPathList(RegistryPermissionAccess access, string pathList); // 0x00000001802B2370
	public void AddPathList(RegistryPermissionAccess access, AccessControlActions control, string pathList); // 0x00000001802B2320
	public string GetPathList(RegistryPermissionAccess access); // 0x00000001802B2E20
	public void SetPathList(RegistryPermissionAccess access, string pathList); // 0x00000001802B37E0
	public override IPermission Copy(); // 0x00000001802B2750
	public override void FromXml(SecurityElement esd); // 0x00000001802B2940
	public override IPermission Intersect(IPermission target); // 0x00000001802B3230
	public override bool IsSubsetOf(IPermission target); // 0x00000001802B3410
	public bool IsUnrestricted(); // 0x00000001802A2600
	public override SecurityElement ToXml(); // 0x00000001802B3D60
	public override IPermission Union(IPermission other); // 0x00000001802B3E70
	private bool IsEmpty(); // 0x00000001802B3380
	private RegistryPermission Cast(IPermission target); // 0x00000001802B26B0
	internal void ThrowInvalidFlag(RegistryPermissionAccess flag, bool context); // 0x00000001802B3C90
	private string GetPathList(ArrayList list); // 0x00000001802B2B60
	internal bool KeyIsSubsetOf(IList local, IList target); // 0x00000001802B34E0
	internal void AddWithUnionKey(IList list, string pathList); // 0x00000001802B2490
	internal void IntersectKeys(IList local, IList target, IList result); // 0x00000001802B2EB0
}

// Namespace: System.Security.Permissions
[Serializable]
public enum RegistryPermissionAccess // TypeDefIndex: 1397
{
	NoAccess = 0,
	Read = 1,
	Write = 2,
	Create = 4,
	AllAccess = 7
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class RegistryPermissionAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 1398
{
	// Fields
	private string create; // 0x18
	private string read; // 0x28
	private string write; // 0x38
	private string changeAccessControl; // 0x10
	private string viewAccessControl; // 0x00

	// Properties
	public string All { get; set; } // 0x000000018029E6B0 0x000000018029E760
	public string Create { get; set; } // 0x00000001800EAEC0 0x00000001800EAEE0
	public string Read { get; set; } // 0x00000001800EAEB0 0x00000001800EAED0
	public string Write { get; set; } // 0x000000018013BF80 0x000000018015B760
	public string ChangeAccessControl { get; set; } // 0x00000001801146E0 0x0000000180114BF0
	public string ViewAccessControl { get; set; } // 0x0000000180119440 0x000000018015B770
	public string ViewAndModify { get; set; } // 0x000000018029E710 0x000000018029E760

	// Constructors
	public RegistryPermissionAttribute(SecurityAction action); // 0x000000018029E6A0

	// Methods
	public override IPermission CreatePermission(); // 0x000000018029E5C0
}

// Namespace: System.Security.Permissions
[Serializable]
public enum SecurityAction // TypeDefIndex: 1399
{
	Demand = 2,
	Assert = 3,
	Deny = 4,
	PermitOnly = 5,
	LinkDemand = 6,
	InheritanceDemand = 7,
	RequestMinimum = 8,
	RequestOptional = 9,
	RequestRefuse = 10
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class SecurityPermission : CodeAccessPermission, IBuiltInPermission, IUnrestrictedPermission // TypeDefIndex: 1400
{
	// Fields
	private const int version = 1; // 0x00
	private SecurityPermissionFlag flags; // 0x18

	// Properties
	public SecurityPermissionFlag Flags { get; set; } // 0x00000001800ECD10 0x000000018029F540

	// Constructors
	public SecurityPermission(PermissionState state); // 0x000000018029F500
	public SecurityPermission(SecurityPermissionFlag flag); // 0x000000018029F420

	// Methods
	private int System.Security.Permissions.IBuiltInPermission.GetTokenIndex(); // 0x000000018029F230
	public bool IsUnrestricted(); // 0x000000018029F220
	public override IPermission Copy(); // 0x000000018029EEB0
	public override IPermission Intersect(IPermission target); // 0x000000018029F070
	public override IPermission Union(IPermission target); // 0x000000018029F300
	public override bool IsSubsetOf(IPermission target); // 0x000000018029F1C0
	public override void FromXml(SecurityElement esd); // 0x000000018029EF10
	public override SecurityElement ToXml(); // 0x000000018029F240
	private bool IsEmpty(); // 0x000000018029F1B0
	private SecurityPermission Cast(IPermission target); // 0x000000018029EE10
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class SecurityPermissionAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 1401
{
	// Fields
	private SecurityPermissionFlag m_Flags; // 0x18

	// Properties
	public bool Assertion { get; set; } // 0x000000018029EB70 0x000000018029EC50
	public bool BindingRedirects { get; set; } // 0x000000018029EB80 0x000000018029EC70
	public bool ControlAppDomain { get; set; } // 0x000000018029EB90 0x000000018029EC90
	public bool ControlDomainPolicy { get; set; } // 0x000000018029EBA0 0x000000018029ECB0
	public bool ControlEvidence { get; set; } // 0x000000018029EBB0 0x000000018029ECD0
	public bool ControlPolicy { get; set; } // 0x000000018029EBC0 0x000000018029ECF0
	public bool ControlPrincipal { get; set; } // 0x000000018029EBD0 0x000000018029ED10
	public bool ControlThread { get; set; } // 0x000000018029EBE0 0x000000018029ED30
	public bool Execution { get; set; } // 0x000000018029EBF0 0x000000018029ED50
	public bool Infrastructure { get; set; } // 0x000000018029EC00 0x000000018029ED70
	public bool RemotingConfiguration { get; set; } // 0x000000018029EC10 0x000000018029ED90
	public bool SerializationFormatter { get; set; } // 0x000000018029EC20 0x000000018029EDB0
	public bool SkipVerification { get; set; } // 0x000000018029EC30 0x000000018029EDD0
	public bool UnmanagedCode { get; set; } // 0x000000018029EC40 0x000000018029EDF0
	public SecurityPermissionFlag Flags { get; set; } // 0x00000001800ED060 0x000000018019DD90

	// Constructors
	public SecurityPermissionAttribute(SecurityAction action); // 0x000000018029EB50

	// Methods
	public override IPermission CreatePermission(); // 0x00000001800EA8C0
}

// Namespace: System.Security.Permissions
[Serializable]
public enum SecurityPermissionFlag // TypeDefIndex: 1402
{
	NoFlags = 0,
	Assertion = 1,
	UnmanagedCode = 2,
	SkipVerification = 4,
	Execution = 8,
	ControlThread = 16,
	ControlEvidence = 32,
	ControlPolicy = 64,
	SerializationFormatter = 128,
	ControlDomainPolicy = 256,
	ControlPrincipal = 512,
	ControlAppDomain = 1024,
	RemotingConfiguration = 2048,
	Infrastructure = 4096,
	BindingRedirects = 8192,
	AllFlags = 16383
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class SiteIdentityPermission : CodeAccessPermission, IBuiltInPermission // TypeDefIndex: 1403
{
	// Fields
	private const int version = 1; // 0x00
	private string _site; // 0x00
	private static bool[] valid; // 0x00

	// Properties
	public string Site { get; set; } // 0x00000001802A0050 0x00000001802A00C0

	// Constructors
	public SiteIdentityPermission(PermissionState state); // 0x00000001802A0030
	public SiteIdentityPermission(string site); // 0x00000001802A0000
	private static SiteIdentityPermission(); // 0x000000018029FFA0

	// Methods
	private int System.Security.Permissions.IBuiltInPermission.GetTokenIndex(); // 0x000000018029FD60
	public override IPermission Copy(); // 0x000000018029F770
	public override void FromXml(SecurityElement esd); // 0x000000018029F7F0
	public override IPermission Intersect(IPermission target); // 0x000000018029F880
	public override bool IsSubsetOf(IPermission target); // 0x000000018029F980
	public override SecurityElement ToXml(); // 0x000000018029FD70
	public override IPermission Union(IPermission target); // 0x000000018029FDE0
	private bool IsEmpty(); // 0x000000018029F970
	private SiteIdentityPermission Cast(IPermission target); // 0x000000018029F6D0
	private bool IsValid(string s); // 0x000000018029FAA0
	private bool Match(string target); // 0x000000018029FBF0
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class SiteIdentityPermissionAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 1404
{
	// Fields
	private string site; // 0x18

	// Properties
	public string Site { get; set; } // 0x00000001800EAEC0 0x00000001800EAEE0

	// Constructors
	public SiteIdentityPermissionAttribute(SecurityAction action); // 0x000000018029E6A0

	// Methods
	public override IPermission CreatePermission(); // 0x000000018029F620
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class StrongNameIdentityPermission : CodeAccessPermission, IBuiltInPermission // TypeDefIndex: 1405
{
	// Fields
	private const int version = 1; // 0x00
	private static Version defaultVersion; // 0x10
	private PermissionState _state; // 0x10
	private ArrayList _list; // 0x20

	// Properties
	public string Name { get; set; } // 0x00000001802A3550 0x00000001802A37C0
	public StrongNamePublicKeyBlob PublicKey { get; set; } // 0x00000001802A3620 0x00000001802A3920
	public Version Version { get; set; } // 0x00000001802A36F0 0x00000001802A3A80

	// Constructors
	public StrongNameIdentityPermission(PermissionState state); // 0x00000001802A3340
	public StrongNameIdentityPermission(StrongNamePublicKeyBlob blob, string name, Version version); // 0x00000001802A3400
	internal StrongNameIdentityPermission(StrongNameIdentityPermission snip); // 0x00000001802A30C0
	private static StrongNameIdentityPermission(); // 0x00000001802A3060

	// Methods
	private int System.Security.Permissions.IBuiltInPermission.GetTokenIndex(); // 0x00000001801E2960
	internal void ResetToDefault(); // 0x00000001802A2790
	public override IPermission Copy(); // 0x00000001802A17C0
	public override void FromXml(SecurityElement e); // 0x00000001802A19D0
	private SNIP FromSecurityElement(SecurityElement se); // 0x00000001802A18E0
	public override IPermission Intersect(IPermission target); // 0x00000001802A1CC0
	public override bool IsSubsetOf(IPermission target); // 0x00000001802A21E0
	public override SecurityElement ToXml(); // 0x00000001802A29F0
	private void ToSecurityElement(SecurityElement se, SNIP snip); // 0x00000001802A2830
	public override IPermission Union(IPermission target); // 0x00000001802A2D70
	private bool IsUnrestricted(); // 0x00000001802A2600
	private bool Contains(SNIP snip); // 0x00000001802A1530
	private bool IsEmpty(SNIP snip); // 0x00000001802A20E0
	private bool IsEmpty(); // 0x00000001802A1FB0
	private StrongNameIdentityPermission Cast(IPermission target); // 0x00000001802A1490
	private bool Match(string target); // 0x00000001802A2610
}

// Namespace: 
private struct SNIP // TypeDefIndex: 1406
{
	// Fields
	public StrongNamePublicKeyBlob PublicKey; // 0x10
	public string Name; // 0x20
	public Version AssemblyVersion; // 0x18

	// Constructors
	internal SNIP(StrongNamePublicKeyBlob pk, string name, Version version); // 0x0000000180006650

	// Methods
	internal static SNIP CreateDefault(); // 0x000000018029E910
	internal bool IsNameSubsetOf(string target); // 0x000000018001ACD0
	internal bool IsSubsetOf(SNIP target); // 0x000000018001ACE0
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class StrongNameIdentityPermissionAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 1407
{
	// Fields
	private string name; // 0x18
	private string key; // 0x28
	private string version; // 0x00

	// Properties
	public string Name { get; set; } // 0x00000001800EAEC0 0x00000001800EAEE0
	public string PublicKey { get; set; } // 0x00000001800EAEB0 0x00000001800EAED0
	public string Version { get; set; } // 0x000000018013BF80 0x000000018015B760

	// Constructors
	public StrongNameIdentityPermissionAttribute(SecurityAction action); // 0x000000018029E6A0

	// Methods
	public override IPermission CreatePermission(); // 0x00000001800EA8C0
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class StrongNamePublicKeyBlob // TypeDefIndex: 1408
{
	// Fields
	internal byte[] pubkey; // 0x10

	// Constructors
	public StrongNamePublicKeyBlob(byte[] publicKey); // 0x00000001802A4060

	// Methods
	internal static StrongNamePublicKeyBlob FromString(string s); // 0x00000001802A3CE0
	private static byte CharToByte(char c); // 0x00000001802A3B90
	public override bool Equals(object obj); // 0x00000001802A3C00
	public override int GetHashCode(); // 0x00000001802A3EF0
	public override string ToString(); // 0x00000001802A3F80
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class UIPermission : CodeAccessPermission, IBuiltInPermission, IUnrestrictedPermission // TypeDefIndex: 1409
{
	// Fields
	private const int version = 1; // 0x00
	private UIPermissionWindow _window; // 0x14
	private UIPermissionClipboard _clipboard; // 0x18

	// Properties
	public UIPermissionClipboard Clipboard { get; set; } // 0x0000000180156360 0x00000001802A4980
	public UIPermissionWindow Window { get; set; } // 0x00000001800ECD10 0x00000001802A4AE0

	// Constructors
	public UIPermission(PermissionState state); // 0x00000001802A4910
	public UIPermission(UIPermissionClipboard clipboardFlag); // 0x00000001802A4890
	public UIPermission(UIPermissionWindow windowFlag); // 0x00000001802A4950
	public UIPermission(UIPermissionWindow windowFlag, UIPermissionClipboard clipboardFlag); // 0x00000001802A48C0

	// Methods
	private int System.Security.Permissions.IBuiltInPermission.GetTokenIndex(); // 0x00000001801FBFD0
	public override IPermission Copy(); // 0x00000001802A4250
	public override void FromXml(SecurityElement esd); // 0x00000001802A42D0
	public override IPermission Intersect(IPermission target); // 0x00000001802A44F0
	public override bool IsSubsetOf(IPermission target); // 0x00000001802A45C0
	public bool IsUnrestricted(); // 0x00000001802A4620
	public override SecurityElement ToXml(); // 0x00000001802A4640
	public override IPermission Union(IPermission target); // 0x00000001802A4770
	private bool IsEmpty(UIPermissionWindow w, UIPermissionClipboard c); // 0x00000001802A45B0
	private UIPermission Cast(IPermission target); // 0x00000001802A41B0
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class UIPermissionAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 1410
{
	// Fields
	private UIPermissionClipboard clipboard; // 0x18
	private UIPermissionWindow window; // 0x10

	// Properties
	public UIPermissionClipboard Clipboard { get; set; } // 0x00000001800ED060 0x000000018019DD90
	public UIPermissionWindow Window { get; set; } // 0x00000001801AE2C0 0x00000001802A41A0

	// Constructors
	public UIPermissionAttribute(SecurityAction action); // 0x000000018029E6A0

	// Methods
	public override IPermission CreatePermission(); // 0x00000001802A40E0
}

// Namespace: System.Security.Permissions
[Serializable]
public enum UIPermissionClipboard // TypeDefIndex: 1411
{
	NoClipboard = 0,
	OwnClipboard = 1,
	AllClipboard = 2
}

// Namespace: System.Security.Permissions
[Serializable]
public enum UIPermissionWindow // TypeDefIndex: 1412
{
	NoWindows = 0,
	SafeSubWindows = 1,
	SafeTopLevelWindows = 2,
	AllWindows = 3
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class UrlIdentityPermission : CodeAccessPermission, IBuiltInPermission // TypeDefIndex: 1413
{
	// Fields
	private const int version = 1; // 0x00
	private string url; // 0x18

	// Properties
	public string Url { get; set; } // 0x00000001800E20D0 0x00000001802A5560

	// Constructors
	public UrlIdentityPermission(PermissionState state); // 0x00000001802A5450
	public UrlIdentityPermission(string site); // 0x00000001802A54E0

	// Methods
	private int System.Security.Permissions.IBuiltInPermission.GetTokenIndex(); // 0x00000001802A5270
	public override IPermission Copy(); // 0x00000001802A4D80
	public override void FromXml(SecurityElement esd); // 0x00000001802A4E00
	public override IPermission Intersect(IPermission target); // 0x00000001802A4EF0
	public override bool IsSubsetOf(IPermission target); // 0x00000001802A4FB0
	public override SecurityElement ToXml(); // 0x00000001802A5280
	public override IPermission Union(IPermission target); // 0x00000001802A5300
	private bool IsEmpty(); // 0x00000001802A4F90
	private UrlIdentityPermission Cast(IPermission target); // 0x00000001802A4CE0
	private bool Match(string target); // 0x00000001802A5120
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class UrlIdentityPermissionAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 1414
{
	// Fields
	private string url; // 0x18

	// Properties
	public string Url { get; set; } // 0x00000001800EAEC0 0x00000001800EAEE0

	// Constructors
	public UrlIdentityPermissionAttribute(SecurityAction action); // 0x000000018029E6A0

	// Methods
	public override IPermission CreatePermission(); // 0x00000001802A4C40
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class ZoneIdentityPermission : CodeAccessPermission, IBuiltInPermission // TypeDefIndex: 1415
{
	// Fields
	private const int version = 1; // 0x00
	private SecurityZone zone; // 0x18

	// Properties
	public SecurityZone SecurityZone { get; set; } // 0x00000001800ECD10 0x00000001802A5CF0

	// Constructors
	public ZoneIdentityPermission(PermissionState state); // 0x00000001802A5B50
	public ZoneIdentityPermission(SecurityZone zone); // 0x00000001802A5B90

	// Methods
	private int System.Security.Permissions.IBuiltInPermission.GetTokenIndex(); // 0x00000001802A59A0
	public override IPermission Copy(); // 0x00000001802A5730
	public override bool IsSubsetOf(IPermission target); // 0x00000001802A5950
	public override IPermission Union(IPermission target); // 0x00000001802A5A50
	public override IPermission Intersect(IPermission target); // 0x00000001802A58D0
	public override void FromXml(SecurityElement esd); // 0x00000001802A5790
	public override SecurityElement ToXml(); // 0x00000001802A59B0
	private ZoneIdentityPermission Cast(IPermission target); // 0x00000001802A5690
}

// Namespace: System.Security.Permissions
[Serializable]
public sealed class ZoneIdentityPermissionAttribute : CodeAccessSecurityAttribute // TypeDefIndex: 1416
{
	// Fields
	private SecurityZone zone; // 0x18

	// Properties
	public SecurityZone Zone { get; set; } // 0x00000001800ED060 0x000000018019DD90

	// Constructors
	public ZoneIdentityPermissionAttribute(SecurityAction action); // 0x00000001802A5670

	// Methods
	public override IPermission CreatePermission(); // 0x00000001802A55E0
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class AllMembershipCondition : IConstantMembershipCondition, IMembershipCondition, ISecurityEncodable, ISecurityPolicyEncodable // TypeDefIndex: 1417
{
	// Fields
	private readonly int version; // 0x10

	// Constructors
	public AllMembershipCondition(); // 0x000000018018F3A0

	// Methods
	public bool Check(Evidence evidence); // 0x000000018010E420
	public IMembershipCondition Copy(); // 0x000000018028CFB0
	public override bool Equals(object o); // 0x000000018028D000
	public void FromXml(SecurityElement e); // 0x000000018028D050
	public void FromXml(SecurityElement e, PolicyLevel level); // 0x000000018028D050
	public override int GetHashCode(); // 0x000000018028D0D0
	public override string ToString(); // 0x000000018028D150
	public SecurityElement ToXml(); // 0x000000018028D180
	public SecurityElement ToXml(PolicyLevel level); // 0x000000018028D180
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class ApplicationDirectory : IBuiltInEvidence // TypeDefIndex: 1418
{
	// Fields
	private string directory; // 0x10

	// Properties
	public string Directory { get; } // 0x00000001800E20D0 

	// Constructors
	public ApplicationDirectory(string name); // 0x000000018028DA80

	// Methods
	private int System.Security.Policy.IBuiltInEvidence.GetRequiredSize(bool verbose); // 0x00000001801917F0
	private int System.Security.Policy.IBuiltInEvidence.InitFromBuffer(char[] buffer, int position); // 0x00000001800EA8C0
	private int System.Security.Policy.IBuiltInEvidence.OutputToBuffer(char[] buffer, int position, bool verbose); // 0x00000001800EA8C0
	public object Copy(); // 0x000000018028D700
	public override bool Equals(object o); // 0x000000018028D7F0
	public override int GetHashCode(); // 0x00000001801AAC10
	public override string ToString(); // 0x000000018028D9A0
	private void ThrowOnInvalid(string appdir); // 0x000000018028D8A0
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class ApplicationDirectoryMembershipCondition : IConstantMembershipCondition, IMembershipCondition, ISecurityEncodable, ISecurityPolicyEncodable // TypeDefIndex: 1419
{
	// Fields
	private readonly int version; // 0x10

	// Constructors
	public ApplicationDirectoryMembershipCondition(); // 0x000000018018F3A0

	// Methods
	public bool Check(Evidence evidence); // 0x000000018028D220
	public IMembershipCondition Copy(); // 0x000000018028D490
	public override bool Equals(object o); // 0x000000018028D4E0
	public void FromXml(SecurityElement e); // 0x000000018028D530
	public void FromXml(SecurityElement e, PolicyLevel level); // 0x000000018028D530
	public override int GetHashCode(); // 0x000000018028D5B0
	public override string ToString(); // 0x000000018028D630
	public SecurityElement ToXml(); // 0x000000018028D660
	public SecurityElement ToXml(PolicyLevel level); // 0x000000018028D660
}

// Namespace: System.Security.Policy
public sealed class ApplicationSecurityInfo // TypeDefIndex: 1420
{
	// Fields
	private ActivationContext _context; // 0x10
	private Evidence _evidence; // 0x20
	private ApplicationId _appid; // 0x30
	private PermissionSet _defaultSet; // 0x00
	private ApplicationId _deployid; // 0x08

	// Properties
	public Evidence ApplicationEvidence { get; set; } // 0x00000001800EAEC0 0x000000018028DC30
	public ApplicationId ApplicationId { get; set; } // 0x00000001800EAEB0 0x000000018028DCB0
	public PermissionSet DefaultRequestSet { get; set; } // 0x000000018028DBD0 0x000000018028DD30
	public ApplicationId DeploymentId { get; set; } // 0x00000001801146E0 0x000000018028DDB0

	// Constructors
	public ApplicationSecurityInfo(ActivationContext activationContext); // 0x000000018028DB50

}

// Namespace: System.Security.Policy
public static class ApplicationSecurityManager // TypeDefIndex: 1421
{
	// Fields
	private const string config = "ApplicationTrust.config"; // 0x00
	private static IApplicationTrustManager _appTrustManager; // 0x08
	private static ApplicationTrustCollection _userAppTrusts; // 0x10

	// Properties
	public static IApplicationTrustManager ApplicationTrustManager { get; } // 0x000000018028DFA0 
	public static ApplicationTrustCollection UserApplicationTrusts { get; } // 0x000000018028E020 

	// Methods
	public static bool DetermineApplicationTrust(ActivationContext activationContext, TrustManagerContext context); // 0x000000018028DE30
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class ApplicationTrust : ISecurityEncodable // TypeDefIndex: 1422
{
	// Fields
	private ApplicationIdentity _appid; // 0x10
	private PolicyStatement _defaultPolicy; // 0x20
	private object _xtranfo; // 0x29
	private bool _trustrun; // 0x10
	private bool _persist; // 0x10
	private IList`1<StrongName> fullTrustAssemblies; // 0x00

	// Properties
	public ApplicationIdentity ApplicationIdentity { get; set; } // 0x00000001800E20D0 0x000000018028FF60
	public PolicyStatement DefaultGrantSet { get; set; } // 0x000000018028FE90 0x00000001800EAEE0
	public object ExtraInfo { get; set; } // 0x00000001800EAEB0 0x00000001800EAED0
	public bool IsApplicationTrustedToRun { get; set; } // 0x00000001800EA930 0x00000001801799F0
	public bool Persist { get; set; } // 0x00000001801799D0 0x00000001801799E0

	// Constructors
	public ApplicationTrust(); // 0x000000018028FD50
	public ApplicationTrust(ApplicationIdentity applicationIdentity); // 0x000000018028FDC0
	internal ApplicationTrust(PermissionSet defaultGrantSet, IEnumerable`1<StrongName> fullTrustAssemblies); // 0x000000018028FA40

	// Methods
	public void FromXml(SecurityElement element); // 0x000000018028F1C0
	public SecurityElement ToXml(); // 0x000000018028F670
	private PolicyStatement GetDefaultGrantSet(); // 0x000000018028F5C0
}

// Namespace: System.Security.Policy
public sealed class ApplicationTrustCollection : IEnumerable, ICollection // TypeDefIndex: 1423
{
	// Fields
	private ArrayList _list; // 0x10

	// Properties
	public int Count { get; } // 0x000000018015AE50 
	public bool IsSynchronized { get; } // 0x000000018011A0F0 
	public object SyncRoot { get; } // 0x0000000180123590 
	public ApplicationTrust Item { get; } // 0x000000018028EE40 
	public ApplicationTrust Item { get; } // 0x000000018028EEC0 

	// Constructors
	internal ApplicationTrustCollection(); // 0x000000018028EDE0

	// Methods
	private void System.Collections.ICollection.CopyTo(Array array, int index); // 0x0000000180142F00
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x000000018028ED80
	public int Add(ApplicationTrust trust); // 0x000000018028E400
	public void AddRange(ApplicationTrust[] trusts); // 0x000000018028E0F0
	public void AddRange(ApplicationTrustCollection trusts); // 0x000000018028E220
	public void Clear(); // 0x00000001801770A0
	public void CopyTo(ApplicationTrust[] array, int index); // 0x0000000180142F00
	public ApplicationTrustCollection Find(ApplicationIdentity applicationIdentity, ApplicationVersionMatch versionMatch); // 0x000000018028E4E0
	public ApplicationTrustEnumerator GetEnumerator(); // 0x000000018028E830
	public void Remove(ApplicationTrust trust); // 0x000000018028ECB0
	public void Remove(ApplicationIdentity applicationIdentity, ApplicationVersionMatch versionMatch); // 0x000000018028EB80
	public void RemoveRange(ApplicationTrust[] trusts); // 0x000000018028E950
	public void RemoveRange(ApplicationTrustCollection trusts); // 0x000000018028EA10
	internal void RemoveAllInstances(ApplicationTrust trust); // 0x000000018028E890
}

// Namespace: System.Security.Policy
public sealed class ApplicationTrustEnumerator : IEnumerator // TypeDefIndex: 1424
{
	// Fields
	private IEnumerator e; // 0x10

	// Properties
	private object System.Collections.IEnumerator.Current { get; } // 0x000000018028F080 
	public ApplicationTrust Current { get; } // 0x000000018028F150 

	// Constructors
	internal ApplicationTrustEnumerator(ApplicationTrustCollection collection); // 0x000000018028F0D0

	// Methods
	public bool MoveNext(); // 0x000000018028EFE0
	public void Reset(); // 0x000000018028F030
}

// Namespace: System.Security.Policy
public enum ApplicationVersionMatch // TypeDefIndex: 1425
{
	MatchExactVersion = 0,
	MatchAllVersions = 1
}

// Namespace: System.Security.Policy
[Serializable]
public class CodeConnectAccess // TypeDefIndex: 1426
{
	// Fields
	public static readonly string AnyScheme; // 0x00
	public static readonly int DefaultPort; // 0x0C
	public static readonly int OriginPort; // 0x10
	public static readonly string OriginScheme; // 0x10
	private string _scheme; // 0x20
	private int _port; // 0x30

	// Properties
	public int Port { get; } // 0x00000001800ED060 
	public string Scheme { get; } // 0x00000001800E20D0 

	// Constructors
	public CodeConnectAccess(string allowScheme, int allowPort); // 0x0000000180290290
	private static CodeConnectAccess(); // 0x0000000180290210

	// Methods
	public override bool Equals(object o); // 0x0000000180290100
	public override int GetHashCode(); // 0x00000001802901E0
	public static CodeConnectAccess CreateAnySchemeAccess(int allowPort); // 0x000000018028FFE0
	public static CodeConnectAccess CreateOriginSchemeAccess(int allowPort); // 0x0000000180290070
}

// Namespace: System.Security.Policy
[Serializable]
public abstract class CodeGroup // TypeDefIndex: 1427
{
	// Fields
	private PolicyStatement m_policy; // 0x10
	private IMembershipCondition m_membershipCondition; // 0x20
	private string m_description; // 0x30
	private string m_name; // 0x00
	private ArrayList m_children; // 0x00
	private static Dictionary`2<string, int> <>f__switch$map2A; // 0x00

	// Properties
	public abstract string MergeLogic { get; }
	public PolicyStatement PolicyStatement { get; set; } // 0x00000001800E20D0 0x0000000180114C30
	public string Description { get; set; } // 0x00000001800EAEB0 0x00000001800EAED0
	public IMembershipCondition MembershipCondition { get; set; } // 0x00000001800EAEC0 0x0000000180291900
	public string Name { get; set; } // 0x000000018013BF80 0x000000018015B760
	public IList Children { get; set; } // 0x00000001801146E0 0x0000000180291860
	public virtual string AttributeString { get; } // 0x00000001802916F0 
	public virtual string PermissionSetName { get; } // 0x00000001802917A0 

	// Constructors
	protected CodeGroup(IMembershipCondition membershipCondition, PolicyStatement policy); // 0x0000000180291610
	internal CodeGroup(SecurityElement e, PolicyLevel level); // 0x0000000180291580

	// Methods
	public abstract CodeGroup Copy();
	public abstract PolicyStatement Resolve(Evidence evidence);
	public abstract CodeGroup ResolveMatchingCodeGroups(Evidence evidence);
	public void AddChild(CodeGroup group); // 0x0000000180290360
	public override bool Equals(object o); // 0x0000000180290A20
	public bool Equals(CodeGroup cg, bool compareChildren); // 0x0000000180290780
	public void RemoveChild(CodeGroup group); // 0x0000000180291130
	public override int GetHashCode(); // 0x00000001802910C0
	public void FromXml(SecurityElement e); // 0x0000000180290AB0
	public void FromXml(SecurityElement e, PolicyLevel level); // 0x0000000180290AC0
	protected virtual void ParseXml(SecurityElement e, PolicyLevel level); // 0x00000001800EA7B0
	public SecurityElement ToXml(); // 0x0000000180291570
	public SecurityElement ToXml(PolicyLevel level); // 0x0000000180291170
	protected virtual void CreateXml(SecurityElement element, PolicyLevel level); // 0x00000001800EA7B0
	internal static CodeGroup CreateFromXml(SecurityElement se, PolicyLevel level); // 0x0000000180290410
}

// Namespace: System.Security.Policy
internal static class DefaultPolicies // TypeDefIndex: 1428
{
	// Fields
	private const string DnsPermissionClass = "System.Net.DnsPermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"; // 0x00
	private const string EventLogPermissionClass = "System.Diagnostics.EventLogPermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"; // 0x00
	private const string PrintingPermissionClass = "System.Drawing.Printing.PrintingPermission, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	private const string SocketPermissionClass = "System.Net.SocketPermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"; // 0x00
	private const string WebPermissionClass = "System.Net.WebPermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"; // 0x00
	private const string PerformanceCounterPermissionClass = "System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"; // 0x00
	private const string DirectoryServicesPermissionClass = "System.DirectoryServices.DirectoryServicesPermission, System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x00
	private const string MessageQueuePermissionClass = "System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x08
	private const string ServiceControllerPermissionClass = "System.ServiceProcess.ServiceControllerPermission, System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x18
	private const string OleDbPermissionClass = "System.Data.OleDb.OleDbPermission, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"; // 0x28
	private const string SqlClientPermissionClass = "System.Data.SqlClient.SqlClientPermission, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"; // 0x38
	private const string DataProtectionPermissionClass = "System.Security.Permissions.DataProtectionPermission, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x48
	private const string StorePermissionClass = "System.Security.Permissions.StorePermission, System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"; // 0x58
	private static Version _fxVersion; // 0x10
	private static byte[] _ecmaKey; // 0x00
	private static StrongNamePublicKeyBlob _ecma; // 0x10
	private static byte[] _msFinalKey; // 0x20
	private static StrongNamePublicKeyBlob _msFinal; // 0x10
	private static NamedPermissionSet _fullTrust; // 0x20
	private static NamedPermissionSet _localIntranet; // 0x10
	private static NamedPermissionSet _internet; // 0x10
	private static NamedPermissionSet _skipVerification; // 0x20
	private static NamedPermissionSet _execution; // 0x10
	private static NamedPermissionSet _nothing; // 0x20
	private static NamedPermissionSet _everything; // 0x00
	private static Dictionary`2<string, int> <>f__switch$map2B; // 0x38

	// Properties
	public static PermissionSet FullTrust { get; } // 0x0000000180292D50 
	public static PermissionSet LocalIntranet { get; } // 0x0000000180292F30 
	public static PermissionSet Internet { get; } // 0x0000000180292E60 
	public static PermissionSet SkipVerification { get; } // 0x0000000180293110 
	public static PermissionSet Execution { get; } // 0x0000000180292BF0 
	public static PermissionSet Nothing { get; } // 0x0000000180293000 
	public static PermissionSet Everything { get; } // 0x0000000180292B20 

	// Constructors
	private static DefaultPolicies(); // 0x0000000180292A60

	// Methods
	public static PermissionSet GetSpecialPermissionSet(string name); // 0x00000001802925F0
	public static StrongNameMembershipCondition FullTrustMembership(string name, Key key); // 0x0000000180292340
	private static NamedPermissionSet BuildFullTrust(); // 0x0000000180291DD0
	private static NamedPermissionSet BuildLocalIntranet(); // 0x0000000180292000
	private static NamedPermissionSet BuildInternet(); // 0x0000000180291E20
	private static NamedPermissionSet BuildSkipVerification(); // 0x0000000180292290
	private static NamedPermissionSet BuildExecution(); // 0x0000000180291D20
	private static NamedPermissionSet BuildNothing(); // 0x0000000180292240
	private static NamedPermissionSet BuildEverything(); // 0x0000000180291980
	private static SecurityElement PrintingPermission(string level); // 0x00000001802929B0
}

// Namespace: 
public static class ReservedNames // TypeDefIndex: 1429
{
	// Fields
	public const string FullTrust = "FullTrust"; // 0x00
	public const string LocalIntranet = "LocalIntranet"; // 0x00
	public const string Internet = "Internet"; // 0x00
	public const string SkipVerification = "SkipVerification"; // 0x00
	public const string Execution = "Execution"; // 0x00
	public const string Nothing = "Nothing"; // 0x00
	public const string Everything = "Everything"; // 0x00
	private static Dictionary`2<string, int> <>f__switch$map2C; // 0x00

	// Methods
	public static bool IsReserved(string name); // 0x000000018029E770
}

// Namespace: 
public enum Key // TypeDefIndex: 1430
{
	Ecma = 0,
	MsFinal = 1
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class Evidence : IEnumerable, ICollection // TypeDefIndex: 1431
{
	// Fields
	private bool _locked; // 0x10
	private ArrayList hostEvidenceList; // 0x20
	private ArrayList assemblyEvidenceList; // 0x10
	private int _hashCode; // 0x20

	// Properties
	public int Count { get; } // 0x0000000180294250 
	public bool IsReadOnly { get; } // 0x000000018011A0F0 
	public bool IsSynchronized { get; } // 0x000000018011A0F0 
	public bool Locked { get; set; } // 0x0000000180113840 0x000000018018FBE0
	public object SyncRoot { get; } // 0x0000000180123590 
	internal ArrayList HostEvidenceList { get; } // 0x00000001802942B0 
	internal ArrayList AssemblyEvidenceList { get; } // 0x00000001802941C0 

	// Constructors
	public Evidence(); // 0x00000001800E2000
	public Evidence(Evidence evidence); // 0x0000000180294180
	public Evidence(object[] hostEvidence, object[] assemblyEvidence); // 0x00000001802940F0

	// Methods
	public void AddAssembly(object id); // 0x0000000180293400
	public void AddHost(object id); // 0x0000000180293450
	public void Clear(); // 0x0000000180293540
	public void CopyTo(Array array, int index); // 0x0000000180293590
	public override bool Equals(object obj); // 0x0000000180293650
	public IEnumerator GetEnumerator(); // 0x00000001802939B0
	public IEnumerator GetAssemblyEnumerator(); // 0x0000000180293930
	public override int GetHashCode(); // 0x0000000180293A60
	public IEnumerator GetHostEnumerator(); // 0x0000000180293B90
	public void Merge(Evidence evidence); // 0x0000000180293BD0
	public void RemoveType(Type t); // 0x0000000180293FF0
	private static bool IsAuthenticodePresent(Assembly a); // 0x0000000180293BC0
	internal static Evidence GetDefaultHostEvidence(Assembly a); // 0x0000000180293960
}

// Namespace: 
private class EvidenceEnumerator : IEnumerator // TypeDefIndex: 1432
{
	// Fields
	private IEnumerator currentEnum; // 0x10
	private IEnumerator hostEnum; // 0x20
	private IEnumerator assemblyEnum; // 0x10

	// Properties
	public object Current { get; } // 0x00000001802933B0 

	// Constructors
	public EvidenceEnumerator(IEnumerator hostenum, IEnumerator assemblyenum); // 0x0000000180293370

	// Methods
	public bool MoveNext(); // 0x0000000180293270
	public void Reset(); // 0x00000001802932F0
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class FileCodeGroup : CodeGroup // TypeDefIndex: 1433
{
	// Fields
	private FileIOPermissionAccess m_access; // 0x38

	// Properties
	public override string MergeLogic { get; } // 0x0000000180294EB0 
	public override string AttributeString { get; } // 0x00000001800EA8C0 
	public override string PermissionSetName { get; } // 0x0000000180294EE0 

	// Constructors
	public FileCodeGroup(IMembershipCondition membershipCondition, FileIOPermissionAccess access); // 0x0000000180294E80
	internal FileCodeGroup(SecurityElement e, PolicyLevel level); // 0x0000000180190440

	// Methods
	public override CodeGroup Copy(); // 0x0000000180294340
	public override PolicyStatement Resolve(Evidence evidence); // 0x0000000180294B80
	public override CodeGroup ResolveMatchingCodeGroups(Evidence evidence); // 0x00000001802948A0
	public override bool Equals(object o); // 0x0000000180294630
	public override int GetHashCode(); // 0x0000000180294710
	protected override void ParseXml(SecurityElement e, PolicyLevel level); // 0x0000000180294790
	protected override void CreateXml(SecurityElement element, PolicyLevel level); // 0x00000001802945A0
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class FirstMatchCodeGroup : CodeGroup // TypeDefIndex: 1434
{
	// Properties
	public override string MergeLogic { get; } // 0x0000000180295710 

	// Constructors
	public FirstMatchCodeGroup(IMembershipCondition membershipCondition, PolicyStatement policy); // 0x0000000180190430
	internal FirstMatchCodeGroup(SecurityElement e, PolicyLevel level); // 0x0000000180190440

	// Methods
	public override CodeGroup Copy(); // 0x0000000180295010
	public override PolicyStatement Resolve(Evidence evidence); // 0x00000001802954B0
	public override CodeGroup ResolveMatchingCodeGroups(Evidence evidence); // 0x0000000180295240
	private FirstMatchCodeGroup CopyNoChildren(); // 0x0000000180294F80
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class GacInstalled : IBuiltInEvidence, IIdentityPermissionFactory // TypeDefIndex: 1435
{
	// Constructors
	public GacInstalled(); // 0x00000001800E2000

	// Methods
	private int System.Security.Policy.IBuiltInEvidence.GetRequiredSize(bool verbose); // 0x0000000180119A50
	private int System.Security.Policy.IBuiltInEvidence.InitFromBuffer(char[] buffer, int position); // 0x0000000180295830
	private int System.Security.Policy.IBuiltInEvidence.OutputToBuffer(char[] buffer, int position, bool verbose); // 0x0000000180295840
	public object Copy(); // 0x0000000180295740
	public IPermission CreateIdentityPermission(Evidence evidence); // 0x0000000180295790
	public override bool Equals(object o); // 0x00000001802957E0
	public override int GetHashCode(); // 0x00000001800EA8C0
	public override string ToString(); // 0x0000000180295880
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class GacMembershipCondition : IConstantMembershipCondition, IMembershipCondition, ISecurityEncodable, ISecurityPolicyEncodable // TypeDefIndex: 1436
{
	// Fields
	private readonly int version; // 0x10

	// Constructors
	public GacMembershipCondition(); // 0x000000018018F3A0

	// Methods
	public bool Check(Evidence evidence); // 0x0000000180295930
	public IMembershipCondition Copy(); // 0x00000001802959E0
	public override bool Equals(object o); // 0x0000000180295A30
	public void FromXml(SecurityElement e); // 0x0000000180295A80
	public void FromXml(SecurityElement e, PolicyLevel level); // 0x0000000180295A80
	public override int GetHashCode(); // 0x00000001800EA8C0
	public override string ToString(); // 0x0000000180295B00
	public SecurityElement ToXml(); // 0x0000000180295B30
	public SecurityElement ToXml(PolicyLevel level); // 0x0000000180295B30
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class Hash : ISerializable, IBuiltInEvidence // TypeDefIndex: 1437
{
	// Fields
	private Assembly assembly; // 0x10
	private byte[] data; // 0x20
	internal byte[] _md5; // 0x10
	internal byte[] _sha1; // 0x20

	// Properties
	public byte[] MD5 { get; } // 0x0000000180296D40 
	public byte[] SHA1 { get; } // 0x0000000180296DF0 

	// Constructors
	public Hash(Assembly assembly); // 0x0000000180296BF0
	internal Hash(); // 0x00000001800E2000
	internal Hash(SerializationInfo info, StreamingContext context); // 0x0000000180296C70

	// Methods
	private int System.Security.Policy.IBuiltInEvidence.GetRequiredSize(bool verbose); // 0x0000000180296A50
	private int System.Security.Policy.IBuiltInEvidence.InitFromBuffer(char[] buffer, int position); // 0x00000001800EA8C0
	private int System.Security.Policy.IBuiltInEvidence.OutputToBuffer(char[] buffer, int position, bool verbose); // 0x00000001800EA8C0
	public byte[] GenerateHash(HashAlgorithm hashAlg); // 0x00000001802967D0
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00000001802969C0
	public override string ToString(); // 0x0000000180296A60
	private byte[] GetData(); // 0x0000000180296860
	public static Hash CreateMD5(byte[] md5); // 0x0000000180296690
	public static Hash CreateSHA1(byte[] sha1); // 0x0000000180296730
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class HashMembershipCondition : ISerializable, IDeserializationCallback, IMembershipCondition, ISecurityEncodable, ISecurityPolicyEncodable // TypeDefIndex: 1438
{
	// Fields
	private readonly int version; // 0x10
	private HashAlgorithm hash_algorithm; // 0x20
	private byte[] hash_value; // 0x00

	// Properties
	public HashAlgorithm HashAlgorithm { get; set; } // 0x0000000180296440 0x0000000180296550
	public byte[] HashValue { get; set; } // 0x00000001802964A0 0x00000001802965D0

	// Constructors
	internal HashMembershipCondition(); // 0x000000018018F3A0
	public HashMembershipCondition(HashAlgorithm hashAlg, byte[] value); // 0x0000000180296330

	// Methods
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender); // 0x00000001800EA7B0
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00000001800EA7B0
	public bool Check(Evidence evidence); // 0x0000000180295BD0
	public IMembershipCondition Copy(); // 0x0000000180295D60
	public override bool Equals(object o); // 0x0000000180295EA0
	public SecurityElement ToXml(); // 0x0000000180296210
	public SecurityElement ToXml(PolicyLevel level); // 0x0000000180296210
	public void FromXml(SecurityElement e); // 0x0000000180295F70
	public void FromXml(SecurityElement e, PolicyLevel level); // 0x0000000180295F70
	public override int GetHashCode(); // 0x0000000180296050
	public override string ToString(); // 0x00000001802960E0
	private bool Compare(byte[] expected, byte[] actual); // 0x0000000180295CD0
}

// Namespace: System.Security.Policy
public interface IApplicationTrustManager : ISecurityEncodable // TypeDefIndex: 1439
{
	// Methods
	ApplicationTrust DetermineApplicationTrust(ActivationContext activationContext, TrustManagerContext context);
}

// Namespace: System.Security.Policy
internal interface IBuiltInEvidence // TypeDefIndex: 1440
{
	// Methods
	int GetRequiredSize(bool verbose);
	int InitFromBuffer(char[] buffer, int position);
	int OutputToBuffer(char[] buffer, int position, bool verbose);
}

// Namespace: System.Security.Policy
internal interface IConstantMembershipCondition // TypeDefIndex: 1441
{
}

// Namespace: System.Security.Policy
public interface IIdentityPermissionFactory // TypeDefIndex: 1442
{
	// Methods
	IPermission CreateIdentityPermission(Evidence evidence);
}

// Namespace: System.Security.Policy
public interface IMembershipCondition : ISecurityEncodable, ISecurityPolicyEncodable // TypeDefIndex: 1443
{
	// Methods
	bool Check(Evidence evidence);
	IMembershipCondition Copy();
	bool Equals(object obj);
	string ToString();
}

// Namespace: System.Security.Policy
internal sealed class MembershipConditionHelper // TypeDefIndex: 1444
{
	// Fields
	private static readonly string XmlTag; // 0x00

	// Constructors
	public MembershipConditionHelper(); // 0x00000001800E2000
	private static MembershipConditionHelper(); // 0x00000001802972A0

	// Methods
	internal static int CheckSecurityElement(SecurityElement se, string parameterName, int minimumVersion, int maximumVersion); // 0x0000000180296EA0
	internal static SecurityElement Element(Type type, int version); // 0x0000000180297110
}

// Namespace: System.Security.Policy
internal class MonoTrustManager : IApplicationTrustManager, ISecurityEncodable // TypeDefIndex: 1445
{
	// Fields
	private const string tag = "IApplicationTrustManager"; // 0x00

	// Constructors
	public MonoTrustManager(); // 0x00000001800E2000

	// Methods
	public ApplicationTrust DetermineApplicationTrust(ActivationContext activationContext, TrustManagerContext context); // 0x00000001802972E0
	public void FromXml(SecurityElement e); // 0x0000000180297350
	public SecurityElement ToXml(); // 0x0000000180297440
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class NetCodeGroup : CodeGroup // TypeDefIndex: 1446
{
	// Fields
	public static readonly string AbsentOriginScheme; // 0x00
	public static readonly string AnyOtherOriginScheme; // 0x38
	private Hashtable _rules; // 0x10
	private int _hashcode; // 0x20

	// Properties
	public override string AttributeString { get; } // 0x00000001800EA8C0 
	public override string MergeLogic { get; } // 0x0000000180298970 
	public override string PermissionSetName { get; } // 0x00000001802989A0 

	// Constructors
	public NetCodeGroup(IMembershipCondition membershipCondition); // 0x0000000180298900
	internal NetCodeGroup(SecurityElement e, PolicyLevel level); // 0x0000000180298880
	private static NetCodeGroup(); // 0x0000000180298800

	// Methods
	public void AddConnectAccess(string originScheme, CodeConnectAccess connectAccess); // 0x0000000180297520
	public override CodeGroup Copy(); // 0x00000001802978A0
	private bool Equals(CodeConnectAccess[] rules1, CodeConnectAccess[] rules2); // 0x0000000180297B40
	public override bool Equals(object o); // 0x0000000180297C10
	public DictionaryEntry[] GetConnectAccessRules(); // 0x0000000180297F00
	public override int GetHashCode(); // 0x0000000180297F90
	public override PolicyStatement Resolve(Evidence evidence); // 0x0000000180298500
	public void ResetConnectAccess(); // 0x0000000180298210
	public override CodeGroup ResolveMatchingCodeGroups(Evidence evidence); // 0x0000000180298240
	protected override void CreateXml(SecurityElement element, PolicyLevel level); // 0x00000001800EA7B0
	protected override void ParseXml(SecurityElement e, PolicyLevel level); // 0x00000001800EA7B0
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class PermissionRequestEvidence : IBuiltInEvidence // TypeDefIndex: 1447
{
	// Fields
	private PermissionSet requested; // 0x10
	private PermissionSet optional; // 0x20
	private PermissionSet denied; // 0x10

	// Properties
	public PermissionSet DeniedPermissions { get; } // 0x00000001800EAEB0 
	public PermissionSet OptionalPermissions { get; } // 0x00000001800EAEC0 
	public PermissionSet RequestedPermissions { get; } // 0x00000001800E20D0 

	// Constructors
	public PermissionRequestEvidence(PermissionSet request, PermissionSet optional, PermissionSet denied); // 0x0000000180298DB0

	// Methods
	private int System.Security.Policy.IBuiltInEvidence.GetRequiredSize(bool verbose); // 0x0000000180298AE0
	private int System.Security.Policy.IBuiltInEvidence.InitFromBuffer(char[] buffer, int position); // 0x00000001800EA8C0
	private int System.Security.Policy.IBuiltInEvidence.OutputToBuffer(char[] buffer, int position, bool verbose); // 0x00000001800EA8C0
	public PermissionRequestEvidence Copy(); // 0x00000001802989D0
	public override string ToString(); // 0x0000000180298BE0
}

// Namespace: System.Security.Policy
[Serializable]
public class PolicyException : SystemException, _Exception // TypeDefIndex: 1448
{
	// Constructors
	public PolicyException(); // 0x0000000180298E90
	public PolicyException(string message); // 0x000000018010E1E0
	protected PolicyException(SerializationInfo info, StreamingContext context); // 0x000000018010E170
	public PolicyException(string message, Exception exception); // 0x000000018010E1D0

}

// Namespace: System.Security.Policy
[Serializable]
public sealed class PolicyLevel // TypeDefIndex: 1449
{
	// Fields
	private string label; // 0x10
	private CodeGroup root_code_group; // 0x20
	private ArrayList full_trust_assemblies; // 0x30
	private ArrayList named_permission_sets; // 0x40
	private string _location; // 0x10
	private PolicyLevelType _type; // 0x10
	private Hashtable fullNames; // 0x00
	private SecurityElement xml; // 0x00

	// Properties
	public IList FullTrustAssemblies { get; } // 0x00000001800EAEB0 
	public string Label { get; } // 0x00000001800E20D0 
	public IList NamedPermissionSets { get; } // 0x000000018013BF80 
	public CodeGroup RootCodeGroup { get; set; } // 0x00000001800EAEC0 0x000000018029D080
	public string StoreLocation { get; } // 0x00000001801146E0 
	public PolicyLevelType Type { get; } // 0x0000000180114770 

	// Constructors
	internal PolicyLevel(string label, PolicyLevelType type); // 0x000000018029CFF0

	// Methods
	internal void LoadFromFile(string filename); // 0x000000018029B370
	internal void LoadFromString(string xml); // 0x000000018029B770
	private SecurityElement FromString(string xml); // 0x000000018029A2E0
	public void AddFullTrustAssembly(StrongName sn); // 0x0000000180298EE0
	public void AddFullTrustAssembly(StrongNameMembershipCondition snMC); // 0x0000000180298FB0
	public void AddNamedPermissionSet(NamedPermissionSet permSet); // 0x00000001802991E0
	public NamedPermissionSet ChangeNamedPermissionSet(string name, PermissionSet pSet); // 0x0000000180299450
	public static PolicyLevel CreateAppDomainLevel(); // 0x00000001802997B0
	public void FromXml(SecurityElement e); // 0x000000018029A670
	public NamedPermissionSet GetNamedPermissionSet(string name); // 0x000000018029AF00
	public void Recover(); // 0x000000018029B7A0
	public void RemoveFullTrustAssembly(StrongName sn); // 0x000000018029B910
	public void RemoveFullTrustAssembly(StrongNameMembershipCondition snMC); // 0x000000018029BB20
	public NamedPermissionSet RemoveNamedPermissionSet(NamedPermissionSet permSet); // 0x000000018029BFC0
	public NamedPermissionSet RemoveNamedPermissionSet(string name); // 0x000000018029BC90
	public void Reset(); // 0x000000018029C040
	public PolicyStatement Resolve(Evidence evidence); // 0x000000018029C250
	public CodeGroup ResolveMatchingCodeGroups(Evidence evidence); // 0x000000018029C1C0
	public SecurityElement ToXml(); // 0x000000018029C560
	internal void Save(); // 0x000000018029C2F0
	internal void CreateDefaultLevel(PolicyLevelType type); // 0x0000000180299B60
	internal void CreateDefaultFullTrustAssemblies(); // 0x0000000180299970
	internal void CreateDefaultNamedPermissionSets(); // 0x0000000180299FB0
	internal string ResolveClassName(string className); // 0x000000018029C140
	internal bool IsFullTrustAssembly(Assembly a); // 0x000000018029B140
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class PolicyStatement : ISecurityEncodable, ISecurityPolicyEncodable // TypeDefIndex: 1450
{
	// Fields
	private PermissionSet perms; // 0x10
	private PolicyStatementAttribute attrs; // 0x10

	// Properties
	public PermissionSet PermissionSet { get; set; } // 0x000000018029D8E0 0x0000000180114C30
	public PolicyStatementAttribute Attributes { get; set; } // 0x00000001800ED060 0x000000018029D960
	public string AttributeString { get; } // 0x000000018029D840 

	// Constructors
	public PolicyStatement(PermissionSet permSet); // 0x000000018029D7E0
	public PolicyStatement(PermissionSet permSet, PolicyStatementAttribute attributes); // 0x000000018029D770

	// Methods
	public PolicyStatement Copy(); // 0x000000018029D100
	public void FromXml(SecurityElement et); // 0x000000018029D500
	public void FromXml(SecurityElement et, PolicyLevel level); // 0x000000018029D300
	public SecurityElement ToXml(); // 0x000000018029D550
	public SecurityElement ToXml(PolicyLevel level); // 0x000000018029D660
	public override bool Equals(object obj); // 0x000000018029D250
	public override int GetHashCode(); // 0x000000018029D510
	internal static PolicyStatement Empty(); // 0x000000018029D1A0
}

// Namespace: System.Security.Policy
[Serializable]
public enum PolicyStatementAttribute // TypeDefIndex: 1451
{
	Nothing = 0,
	Exclusive = 1,
	LevelFinal = 2,
	All = 3
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class Publisher : IBuiltInEvidence, IIdentityPermissionFactory // TypeDefIndex: 1452
{
	// Fields
	private X509Certificate m_cert; // 0x10

	// Properties
	public X509Certificate Certificate { get; } // 0x000000018029E530 

	// Constructors
	public Publisher(X509Certificate cert); // 0x000000018029E460

	// Methods
	private int System.Security.Policy.IBuiltInEvidence.GetRequiredSize(bool verbose); // 0x000000018029E320
	private int System.Security.Policy.IBuiltInEvidence.InitFromBuffer(char[] buffer, int position); // 0x00000001800EA8C0
	private int System.Security.Policy.IBuiltInEvidence.OutputToBuffer(char[] buffer, int position, bool verbose); // 0x00000001800EA8C0
	public object Copy(); // 0x000000018029E0C0
	public IPermission CreateIdentityPermission(Evidence evidence); // 0x000000018029E1C0
	public override bool Equals(object o); // 0x000000018029E220
	public override int GetHashCode(); // 0x000000018029E2F0
	public override string ToString(); // 0x000000018029E360
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class PublisherMembershipCondition : IConstantMembershipCondition, IMembershipCondition, ISecurityEncodable, ISecurityPolicyEncodable // TypeDefIndex: 1453
{
	// Fields
	private readonly int version; // 0x10
	private X509Certificate x509; // 0x10

	// Properties
	public X509Certificate Certificate { get; set; } // 0x00000001800EAEC0 0x000000018029E040

	// Constructors
	internal PublisherMembershipCondition(); // 0x000000018018F3A0
	public PublisherMembershipCondition(X509Certificate certificate); // 0x000000018029DF70

	// Methods
	public bool Check(Evidence evidence); // 0x000000018029DA30
	public IMembershipCondition Copy(); // 0x000000018029DB70
	public override bool Equals(object o); // 0x000000018029DC70
	public void FromXml(SecurityElement e); // 0x000000018029DD00
	public void FromXml(SecurityElement e, PolicyLevel level); // 0x000000018029DD00
	public override int GetHashCode(); // 0x000000018029DDE0
	public override string ToString(); // 0x000000018029DE10
	public SecurityElement ToXml(); // 0x000000018029DE90
	public SecurityElement ToXml(PolicyLevel level); // 0x000000018029DE90
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class Site : IBuiltInEvidence, IIdentityPermissionFactory // TypeDefIndex: 1454
{
	// Fields
	internal string origin_site; // 0x10

	// Properties
	public string Name { get; } // 0x00000001800E20D0 

	// Constructors
	public Site(string name); // 0x00000001802A13C0

	// Methods
	private int System.Security.Policy.IBuiltInEvidence.GetRequiredSize(bool verbose); // 0x00000001801917F0
	private int System.Security.Policy.IBuiltInEvidence.InitFromBuffer(char[] buffer, int position); // 0x00000001800EA8C0
	private int System.Security.Policy.IBuiltInEvidence.OutputToBuffer(char[] buffer, int position, bool verbose); // 0x00000001800EA8C0
	public static Site CreateFromUrl(string url); // 0x00000001802A0C10
	public object Copy(); // 0x00000001802A0BB0
	public IPermission CreateIdentityPermission(Evidence evidence); // 0x00000001802A0E40
	public override bool Equals(object o); // 0x00000001802A0EB0
	public override int GetHashCode(); // 0x00000001801AAC10
	public override string ToString(); // 0x00000001802A11E0
	internal static bool IsValid(string name); // 0x00000001802A0F90
	internal static string UrlToSite(string url); // 0x00000001802A12B0
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class SiteMembershipCondition : IConstantMembershipCondition, IMembershipCondition, ISecurityEncodable, ISecurityPolicyEncodable // TypeDefIndex: 1455
{
	// Fields
	private readonly int version; // 0x10
	private string _site; // 0x10

	// Properties
	public string Site { get; set; } // 0x00000001800EAEC0 0x00000001802A0AF0

	// Constructors
	internal SiteMembershipCondition(); // 0x000000018018F3A0
	public SiteMembershipCondition(string site); // 0x00000001802A0A20

	// Methods
	public bool Check(Evidence evidence); // 0x00000001802A0260
	public IMembershipCondition Copy(); // 0x00000001802A05C0
	public override bool Equals(object o); // 0x00000001802A06C0
	public void FromXml(SecurityElement e); // 0x00000001802A0840
	public void FromXml(SecurityElement e, PolicyLevel level); // 0x00000001802A0840
	public override int GetHashCode(); // 0x00000001801F64E0
	public override string ToString(); // 0x00000001802A08F0
	public SecurityElement ToXml(); // 0x00000001802A0950
	public SecurityElement ToXml(PolicyLevel level); // 0x00000001802A0950
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class StrongName : IBuiltInEvidence, IIdentityPermissionFactory // TypeDefIndex: 1456
{
	// Fields
	private StrongNamePublicKeyBlob publickey; // 0x10
	private string name; // 0x20
	private Version version; // 0x10

	// Properties
	public string Name { get; } // 0x00000001800EAEC0 
	public StrongNamePublicKeyBlob PublicKey { get; } // 0x00000001800E20D0 
	public Version Version { get; } // 0x00000001800EAEB0 

	// Constructors
	public StrongName(StrongNamePublicKeyBlob blob, string name, Version version); // 0x000000018018FA00

	// Methods
	private int System.Security.Policy.IBuiltInEvidence.GetRequiredSize(bool verbose); // 0x000000018018F890
	private int System.Security.Policy.IBuiltInEvidence.InitFromBuffer(char[] buffer, int position); // 0x00000001800EA8C0
	private int System.Security.Policy.IBuiltInEvidence.OutputToBuffer(char[] buffer, int position, bool verbose); // 0x00000001800EA8C0
	public object Copy(); // 0x000000018018F520
	public IPermission CreateIdentityPermission(Evidence evidence); // 0x000000018018F6C0
	public override bool Equals(object o); // 0x000000018018F740
	public override int GetHashCode(); // 0x000000018018F870
	public override string ToString(); // 0x000000018018F8C0
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class StrongNameMembershipCondition : IConstantMembershipCondition, IMembershipCondition, ISecurityEncodable, ISecurityPolicyEncodable // TypeDefIndex: 1457
{
	// Fields
	private readonly int version; // 0x10
	private StrongNamePublicKeyBlob blob; // 0x20
	private string name; // 0x10
	private Version assemblyVersion; // 0x12

	// Properties
	public string Name { get; set; } // 0x00000001800EAEB0 0x00000001800EAED0
	public Version Version { get; set; } // 0x000000018013BF80 0x000000018015B760
	public StrongNamePublicKeyBlob PublicKey { get; set; } // 0x00000001800EAEC0 0x000000018018F4A0

	// Constructors
	public StrongNameMembershipCondition(StrongNamePublicKeyBlob blob, string name, Version version); // 0x000000018018F3B0
	internal StrongNameMembershipCondition(SecurityElement e); // 0x000000018018F270
	internal StrongNameMembershipCondition(); // 0x000000018018F3A0

	// Methods
	public bool Check(Evidence evidence); // 0x000000018018EAF0
	public IMembershipCondition Copy(); // 0x000000018018EC50
	public override bool Equals(object o); // 0x000000018018ED70
	public override int GetHashCode(); // 0x000000018018EFC0
	public void FromXml(SecurityElement e); // 0x000000018018EEA0
	public void FromXml(SecurityElement e, PolicyLevel level); // 0x000000018018EEA0
	public override string ToString(); // 0x000000018018EFE0
	public SecurityElement ToXml(); // 0x000000018018F0A0
	public SecurityElement ToXml(PolicyLevel level); // 0x000000018018F0B0
}

// Namespace: System.Security.Policy
public class TrustManagerContext // TypeDefIndex: 1458
{
	// Fields
	private bool _ignorePersistedDecision; // 0x10
	private bool _noPrompt; // 0x12
	private bool _keepAlive; // 0x18
	private bool _persist; // 0x10
	private ApplicationIdentity _previousId; // 0x00
	private TrustManagerUIContext _ui; // 0x10

	// Properties
	public virtual bool IgnorePersistedDecision { get; set; } // 0x0000000180113840 0x000000018018FBE0
	public virtual bool KeepAlive { get; set; } // 0x00000001801475D0 0x000000018018FBF0
	public virtual bool NoPrompt { get; set; } // 0x0000000180147560 0x000000018018FC00
	public virtual bool Persist { get; set; } // 0x000000018018FBD0 0x000000018018FC10
	public virtual ApplicationIdentity PreviousApplicationIdentity { get; set; } // 0x00000001800EAEC0 0x00000001800EAEE0
	public virtual TrustManagerUIContext UIContext { get; set; } // 0x00000001800E2F70 0x000000018018FC20

	// Constructors
	public TrustManagerContext(); // 0x000000018018FBA0
	public TrustManagerContext(TrustManagerUIContext uiContext); // 0x000000018018FB70

}

// Namespace: System.Security.Policy
public enum TrustManagerUIContext // TypeDefIndex: 1459
{
	Install = 0,
	Upgrade = 1,
	Run = 2
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class UnionCodeGroup : CodeGroup // TypeDefIndex: 1460
{
	// Properties
	public override string MergeLogic { get; } // 0x0000000180190450 

	// Constructors
	public UnionCodeGroup(IMembershipCondition membershipCondition, PolicyStatement policy); // 0x0000000180190430
	internal UnionCodeGroup(SecurityElement e, PolicyLevel level); // 0x0000000180190440

	// Methods
	public override CodeGroup Copy(); // 0x000000018018FC30
	internal CodeGroup Copy(bool childs); // 0x000000018018FC40
	public override PolicyStatement Resolve(Evidence evidence); // 0x0000000180190150
	public override CodeGroup ResolveMatchingCodeGroups(Evidence evidence); // 0x000000018018FEC0
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class Url : IBuiltInEvidence, IIdentityPermissionFactory // TypeDefIndex: 1461
{
	// Fields
	private string origin_url; // 0x10

	// Properties
	public string Value { get; } // 0x00000001800E20D0 

	// Constructors
	public Url(string name); // 0x0000000180191950
	internal Url(string name, bool validated); // 0x00000001801918F0

	// Methods
	private int System.Security.Policy.IBuiltInEvidence.GetRequiredSize(bool verbose); // 0x00000001801917F0
	private int System.Security.Policy.IBuiltInEvidence.InitFromBuffer(char[] buffer, int position); // 0x00000001800EA8C0
	private int System.Security.Policy.IBuiltInEvidence.OutputToBuffer(char[] buffer, int position, bool verbose); // 0x00000001800EA8C0
	public object Copy(); // 0x00000001801910C0
	public IPermission CreateIdentityPermission(Evidence evidence); // 0x0000000180191130
	public override bool Equals(object o); // 0x0000000180191190
	public override int GetHashCode(); // 0x0000000180191370
	public override string ToString(); // 0x0000000180191820
	private string Prepare(string url); // 0x0000000180191480
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class UrlMembershipCondition : IConstantMembershipCondition, IMembershipCondition, ISecurityEncodable, ISecurityPolicyEncodable // TypeDefIndex: 1462
{
	// Fields
	private readonly int version; // 0x10
	private Url url; // 0x20
	private string userUrl; // 0x10

	// Properties
	public string Url { get; set; } // 0x0000000180191010 0x0000000180191040

	// Constructors
	public UrlMembershipCondition(string url); // 0x0000000180190E50
	internal UrlMembershipCondition(Url url, string userUrl); // 0x0000000180190F30

	// Methods
	public bool Check(Evidence evidence); // 0x00000001801905E0
	public IMembershipCondition Copy(); // 0x0000000180190860
	public override bool Equals(object o); // 0x0000000180190970
	public void FromXml(SecurityElement e); // 0x0000000180190AD0
	public void FromXml(SecurityElement e, PolicyLevel level); // 0x0000000180190AD0
	public override int GetHashCode(); // 0x0000000180190BD0
	public override string ToString(); // 0x0000000180190CF0
	public SecurityElement ToXml(); // 0x0000000180190D80
	public SecurityElement ToXml(PolicyLevel level); // 0x0000000180190D80
	internal void CheckUrl(string url); // 0x0000000180190480
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class Zone : IBuiltInEvidence, IIdentityPermissionFactory // TypeDefIndex: 1463
{
	// Fields
	private SecurityZone zone; // 0x10

	// Properties
	public SecurityZone SecurityZone { get; } // 0x00000001800ECD10 

	// Constructors
	public Zone(SecurityZone zone); // 0x0000000180194190

	// Methods
	private int System.Security.Policy.IBuiltInEvidence.GetRequiredSize(bool verbose); // 0x0000000180193F90
	private int System.Security.Policy.IBuiltInEvidence.InitFromBuffer(char[] buffer, int position); // 0x0000000180193FA0
	private int System.Security.Policy.IBuiltInEvidence.OutputToBuffer(char[] buffer, int position, bool verbose); // 0x0000000180193FF0
	public object Copy(); // 0x0000000180193C90
	public IPermission CreateIdentityPermission(Evidence evidence); // 0x0000000180193EC0
	public static Zone CreateFromUrl(string url); // 0x0000000180193CF0
	public override bool Equals(object o); // 0x0000000180193F20
	public override int GetHashCode(); // 0x00000001800ECD10
	public override string ToString(); // 0x0000000180194090
}

// Namespace: System.Security.Policy
[Serializable]
public sealed class ZoneMembershipCondition : IConstantMembershipCondition, IMembershipCondition, ISecurityEncodable, ISecurityPolicyEncodable // TypeDefIndex: 1464
{
	// Fields
	private readonly int version; // 0x10
	private SecurityZone zone; // 0x10

	// Properties
	public SecurityZone SecurityZone { get; set; } // 0x0000000180156360 0x0000000180193B40

	// Constructors
	internal ZoneMembershipCondition(); // 0x000000018018F3A0
	public ZoneMembershipCondition(SecurityZone zone); // 0x00000001801939E0

	// Methods
	public bool Check(Evidence evidence); // 0x0000000180193340
	public IMembershipCondition Copy(); // 0x0000000180193400
	public override bool Equals(object o); // 0x0000000180193590
	public void FromXml(SecurityElement e); // 0x0000000180193600
	public void FromXml(SecurityElement e, PolicyLevel level); // 0x0000000180193600
	public override int GetHashCode(); // 0x0000000180193740
	public override string ToString(); // 0x00000001801937C0
	public SecurityElement ToXml(); // 0x00000001801938E0
	public SecurityElement ToXml(PolicyLevel level); // 0x00000001801938E0
}

// Namespace: System.Security.Principal
[Serializable]
public class GenericIdentity : IIdentity // TypeDefIndex: 1465
{
	// Fields
	private string m_name; // 0x10
	private string m_type; // 0x10

	// Properties
	public virtual string AuthenticationType { get; } // 0x00000001800EAEC0 
	public virtual string Name { get; } // 0x00000001800E20D0 
	public virtual bool IsAuthenticated { get; } // 0x0000000180176D10 

	// Constructors
	public GenericIdentity(string name, string type); // 0x0000000180176C40
	public GenericIdentity(string name); // 0x0000000180176B30

}

// Namespace: System.Security.Principal
[Serializable]
public class GenericPrincipal : IPrincipal // TypeDefIndex: 1466
{
	// Fields
	private IIdentity m_identity; // 0x10
	private string[] m_roles; // 0x60

	// Properties
	public virtual IIdentity Identity { get; } // 0x00000001800E20D0 

	// Constructors
	public GenericPrincipal(IIdentity identity, string[] roles); // 0x0000000180176E40

	// Methods
	public virtual bool IsInRole(string role); // 0x0000000180176D40
}

// Namespace: System.Security.Principal
public interface IIdentity // TypeDefIndex: 1467
{
	// Properties
	string AuthenticationType { get; }
	bool IsAuthenticated { get; }
	string Name { get; }

}

// Namespace: System.Security.Principal
public interface IPrincipal // TypeDefIndex: 1468
{
	// Properties
	IIdentity Identity { get; }

	// Methods
	bool IsInRole(string role);
}

// Namespace: System.Security.Principal
[Serializable]
public sealed class IdentityNotMappedException : SystemException // TypeDefIndex: 1469
{
	// Fields
	private IdentityReferenceCollection _coll; // 0x60

	// Properties
	public IdentityReferenceCollection UnmappedIdentities { get; } // 0x0000000180176FD0 

	// Constructors
	public IdentityNotMappedException(); // 0x0000000180176F80
	public IdentityNotMappedException(string message); // 0x000000018010E1E0
	public IdentityNotMappedException(string message, Exception inner); // 0x000000018010E1D0

	// Methods
	public override void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext); // 0x00000001800EA7B0
}

// Namespace: System.Security.Principal
public abstract class IdentityReference // TypeDefIndex: 1470
{
	// Properties
	public abstract string Value { get; }

	// Constructors
	internal IdentityReference(); // 0x00000001800E2000

	// Methods
	public abstract bool Equals(object o);
	public abstract int GetHashCode();
	public abstract bool IsValidTargetType(Type targetType);
	public abstract string ToString();
	public abstract IdentityReference Translate(Type targetType);
	public static bool op_Equality(IdentityReference left, IdentityReference right); // 0x0000000180177820
	public static bool op_Inequality(IdentityReference left, IdentityReference right); // 0x00000001801778E0
}

// Namespace: System.Security.Principal
public class IdentityReferenceCollection : IEnumerable, ICollection`1<IdentityReference>, IEnumerable`1<IdentityReference> // TypeDefIndex: 1471
{
	// Fields
	private ArrayList _list; // 0x10

	// Properties
	public int Count { get; } // 0x000000018015AE50 
	public bool IsReadOnly { get; } // 0x000000018011A0F0 
	public IdentityReference Item { get; set; } // 0x0000000180177720 0x00000001801777F0

	// Constructors
	public IdentityReferenceCollection(); // 0x00000001801776C0
	public IdentityReferenceCollection(int capacity); // 0x0000000180177650

	// Methods
	private IEnumerator System.Collections.IEnumerable.GetEnumerator(); // 0x0000000180177560
	public void Add(IdentityReference identity); // 0x0000000180177070
	public void Clear(); // 0x00000001801770A0
	public bool Contains(IdentityReference identity); // 0x00000001801770D0
	public void CopyTo(IdentityReference[] array, int offset); // 0x00000001801772B0
	public IEnumerator`1<IdentityReference> GetEnumerator(); // 0x0000000180177300
	public bool Remove(IdentityReference identity); // 0x0000000180177350
	public IdentityReferenceCollection Translate(Type targetType); // 0x0000000180177600
	public IdentityReferenceCollection Translate(Type targetType, bool forceSuccess); // 0x00000001801775B0
}

// Namespace: System.Security.Principal
public sealed class NTAccount : IdentityReference // TypeDefIndex: 1472
{
	// Fields
	private string _value; // 0x10

	// Properties
	public override string Value { get; } // 0x00000001800E20D0 

	// Constructors
	public NTAccount(string name); // 0x0000000180177D80
	public NTAccount(string domainName, string accountName); // 0x0000000180177C40

	// Methods
	public override bool Equals(object o); // 0x00000001801779A0
	public override int GetHashCode(); // 0x0000000180177AA0
	public override bool IsValidTargetType(Type targetType); // 0x0000000180177B10
	public override string ToString(); // 0x00000001800E20D0
	public override IdentityReference Translate(Type targetType); // 0x0000000180177BC0
	public static bool op_Equality(NTAccount left, NTAccount right); // 0x0000000180177E50
	public static bool op_Inequality(NTAccount left, NTAccount right); // 0x0000000180177EF0
}

// Namespace: System.Security.Principal
[Serializable]
public enum PrincipalPolicy // TypeDefIndex: 1473
{
	UnauthenticatedPrincipal = 0,
	NoPrincipal = 1,
	WindowsPrincipal = 2
}

// Namespace: System.Security.Principal
public sealed class SecurityIdentifier : IdentityReference, IComparable`1<SecurityIdentifier> // TypeDefIndex: 1474
{
	// Fields
	private string _value; // 0x10
	public static readonly int MaxBinaryLength; // 0x04
	public static readonly int MinBinaryLength; // 0x10

	// Properties
	public SecurityIdentifier AccountDomainSid { get; } // 0x000000018017E380 
	public int BinaryLength { get; } // 0x0000000180133990 
	public override string Value { get; } // 0x00000001800E20D0 

	// Constructors
	public SecurityIdentifier(string sddlForm); // 0x000000018017E1A0
	public SecurityIdentifier(byte[] binaryForm, int offset); // 0x000000018017E0C0
	public SecurityIdentifier(IntPtr binaryForm); // 0x000000018017E060
	public SecurityIdentifier(WellKnownSidType sidType, SecurityIdentifier domainSid); // 0x000000018017E230
	private static SecurityIdentifier(); // 0x00000001800EA7B0

	// Methods
	public int CompareTo(SecurityIdentifier sid); // 0x000000018017DAC0
	public override bool Equals(object o); // 0x000000018017DC50
	public bool Equals(SecurityIdentifier sid); // 0x000000018017DB50
	public void GetBinaryForm(byte[] binaryForm, int offset); // 0x000000018017DD90
	public override int GetHashCode(); // 0x0000000180177AA0
	public bool IsAccountSid(); // 0x000000018017DE40
	public bool IsEqualDomainSid(SecurityIdentifier sid); // 0x000000018017DE90
	public override bool IsValidTargetType(Type targetType); // 0x000000018017DEE0
	public bool IsWellKnown(WellKnownSidType type); // 0x000000018017DF90
	public override string ToString(); // 0x00000001800E20D0
	public override IdentityReference Translate(Type targetType); // 0x000000018017DFE0
	public static bool op_Equality(SecurityIdentifier left, SecurityIdentifier right); // 0x000000018017E3E0
	public static bool op_Inequality(SecurityIdentifier left, SecurityIdentifier right); // 0x000000018017E480
}

// Namespace: System.Security.Principal
[Serializable]
public enum TokenAccessLevels // TypeDefIndex: 1475
{
	AssignPrimary = 1,
	Duplicate = 2,
	Impersonate = 4,
	Query = 8,
	QuerySource = 16,
	AdjustPrivileges = 32,
	AdjustGroups = 64,
	AdjustDefault = 128,
	AdjustSessionId = 256,
	Read = 131080,
	Write = 131296,
	AllAccess = 983551,
	MaximumAllowed = 33554432
}

// Namespace: System.Security.Principal
[Serializable]
public enum TokenImpersonationLevel // TypeDefIndex: 1476
{
	None = 0,
	Anonymous = 1,
	Identification = 2,
	Impersonation = 3,
	Delegation = 4
}

// Namespace: System.Security.Principal
public enum WellKnownSidType // TypeDefIndex: 1477
{
	NullSid = 0,
	WorldSid = 1,
	LocalSid = 2,
	CreatorOwnerSid = 3,
	CreatorGroupSid = 4,
	CreatorOwnerServerSid = 5,
	CreatorGroupServerSid = 6,
	NTAuthoritySid = 7,
	DialupSid = 8,
	NetworkSid = 9,
	BatchSid = 10,
	InteractiveSid = 11,
	ServiceSid = 12,
	AnonymousSid = 13,
	ProxySid = 14,
	EnterpriseControllersSid = 15,
	SelfSid = 16,
	AuthenticatedUserSid = 17,
	RestrictedCodeSid = 18,
	TerminalServerSid = 19,
	RemoteLogonIdSid = 20,
	LogonIdsSid = 21,
	LocalSystemSid = 22,
	LocalServiceSid = 23,
	NetworkServiceSid = 24,
	BuiltinDomainSid = 25,
	BuiltinAdministratorsSid = 26,
	BuiltinUsersSid = 27,
	BuiltinGuestsSid = 28,
	BuiltinPowerUsersSid = 29,
	BuiltinAccountOperatorsSid = 30,
	BuiltinSystemOperatorsSid = 31,
	BuiltinPrintOperatorsSid = 32,
	BuiltinBackupOperatorsSid = 33,
	BuiltinReplicatorSid = 34,
	BuiltinPreWindows2000CompatibleAccessSid = 35,
	BuiltinRemoteDesktopUsersSid = 36,
	BuiltinNetworkConfigurationOperatorsSid = 37,
	AccountAdministratorSid = 38,
	AccountGuestSid = 39,
	AccountKrbtgtSid = 40,
	AccountDomainAdminsSid = 41,
	AccountDomainUsersSid = 42,
	AccountDomainGuestsSid = 43,
	AccountComputersSid = 44,
	AccountControllersSid = 45,
	AccountCertAdminsSid = 46,
	AccountSchemaAdminsSid = 47,
	AccountEnterpriseAdminsSid = 48,
	AccountPolicyAdminsSid = 49,
	AccountRasAndIasServersSid = 50,
	NtlmAuthenticationSid = 51,
	DigestAuthenticationSid = 52,
	SChannelAuthenticationSid = 53,
	ThisOrganizationSid = 54,
	OtherOrganizationSid = 55,
	BuiltinIncomingForestTrustBuildersSid = 56,
	BuiltinPerformanceMonitoringUsersSid = 57,
	BuiltinPerformanceLoggingUsersSid = 58,
	BuiltinAuthorizationAccessSid = 59,
	WinBuiltinTerminalServerLicenseServersSid = 60,
	MaxDefined = 60
}

// Namespace: System.Security.Principal
[Serializable]
public enum WindowsAccountType // TypeDefIndex: 1478
{
	Normal = 0,
	Guest = 1,
	System = 2,
	Anonymous = 3
}

// Namespace: System.Security.Principal
[Serializable]
public enum WindowsBuiltInRole // TypeDefIndex: 1479
{
	Administrator = 544,
	User = 545,
	Guest = 546,
	PowerUser = 547,
	AccountOperator = 548,
	SystemOperator = 549,
	PrintOperator = 550,
	BackupOperator = 551,
	Replicator = 552
}

// Namespace: System.Security.Principal
[Serializable]
public class WindowsIdentity : IDisposable, ISerializable, IDeserializationCallback, IIdentity // TypeDefIndex: 1480
{
	// Fields
	private IntPtr _token; // 0x10
	private string _type; // 0x20
	private WindowsAccountType _account; // 0x28
	private bool _authenticated; // 0x00
	private string _name; // 0x10
	private SerializationInfo _info; // 0x10
	private static IntPtr invalidWindows; // 0x60

	// Properties
	public string AuthenticationType { get; } // 0x00000001800EAEC0 
	public virtual bool IsAnonymous { get; } // 0x0000000180192910 
	public virtual bool IsAuthenticated { get; } // 0x0000000180192920 
	public virtual bool IsGuest { get; } // 0x0000000180192930 
	public virtual bool IsSystem { get; } // 0x0000000180192970 
	public virtual string Name { get; } // 0x0000000180192980 
	public virtual IntPtr Token { get; } // 0x00000001800E20D0 
	public IdentityReferenceCollection Groups { get; } // 0x0000000180192870 
	public TokenImpersonationLevel ImpersonationLevel { get; } // 0x00000001801928C0 
	public SecurityIdentifier Owner { get; } // 0x00000001801929F0 
	public SecurityIdentifier User { get; } // 0x0000000180192A40 
	private static bool IsPosix { get; } // 0x0000000180192940 

	// Constructors
	public WindowsIdentity(IntPtr userToken); // 0x0000000180192610
	public WindowsIdentity(IntPtr userToken, string type); // 0x00000001801925C0
	public WindowsIdentity(IntPtr userToken, string type, WindowsAccountType acctType); // 0x0000000180192650
	public WindowsIdentity(IntPtr userToken, string type, WindowsAccountType acctType, bool isAuthenticated); // 0x00000001801926B0
	public WindowsIdentity(string sUserPrincipalName); // 0x00000001801924A0
	public WindowsIdentity(string sUserPrincipalName, string type); // 0x0000000180192740
	public WindowsIdentity(SerializationInfo info, StreamingContext context); // 0x0000000180192710
	private static WindowsIdentity(); // 0x0000000180192460

	// Methods
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender); // 0x0000000180191FF0
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x0000000180192360
	public void Dispose(); // 0x00000001801919F0
	protected virtual void Dispose(bool disposing); // 0x00000001801919B0
	public static WindowsIdentity GetAnonymous(); // 0x0000000180191A30
	public static WindowsIdentity GetCurrent(); // 0x0000000180191D40
	public static WindowsIdentity GetCurrent(bool ifImpersonating); // 0x0000000180191CA0
	public static WindowsIdentity GetCurrent(TokenAccessLevels desiredAccess); // 0x0000000180191CF0
	public virtual WindowsImpersonationContext Impersonate(); // 0x0000000180191E50
	public static WindowsImpersonationContext Impersonate(IntPtr userToken); // 0x0000000180191DF0
	private void SetToken(IntPtr token); // 0x0000000180191EB0
	internal static string[] _GetRoles(IntPtr token); // 0x0000000180192450
	internal static IntPtr GetCurrentToken(); // 0x00000001801150B0
	private static string GetTokenName(IntPtr token); // 0x00000001801150B0
	private static IntPtr GetUserToken(string username); // 0x0000000180191DE0
}

// Namespace: System.Security.Principal
public class WindowsImpersonationContext : IDisposable // TypeDefIndex: 1481
{
	// Fields
	private IntPtr _token; // 0x10
	private bool undo; // 0x10

	// Constructors
	internal WindowsImpersonationContext(IntPtr token); // 0x0000000180192BB0

	// Methods
	public void Dispose(); // 0x0000000180192AA0
	protected virtual void Dispose(bool disposing); // 0x0000000180192AB0
	public void Undo(); // 0x0000000180192B20
	private static bool CloseToken(IntPtr token); // 0x0000000180192A90
	private static IntPtr DuplicateToken(IntPtr token); // 0x0000000180192AF0
	private static bool SetCurrentToken(IntPtr token); // 0x0000000180192B10
	private static bool RevertToSelf(); // 0x0000000180192B00
}

// Namespace: System.Security.Principal
[Serializable]
public class WindowsPrincipal : IPrincipal // TypeDefIndex: 1482
{
	// Fields
	private WindowsIdentity _identity; // 0x10
	private string[] m_roles; // 0x60

	// Properties
	public virtual IIdentity Identity { get; } // 0x00000001800E20D0 
	private static bool IsPosix { get; } // 0x0000000180192940 
	private IntPtr Token { get; } // 0x00000001801930B0 

	// Constructors
	public WindowsPrincipal(WindowsIdentity ntIdentity); // 0x0000000180193030

	// Methods
	public virtual bool IsInRole(int rid); // 0x0000000180192E20
	public virtual bool IsInRole(string role); // 0x0000000180192C90
	public virtual bool IsInRole(WindowsBuiltInRole role); // 0x0000000180192F70
	public virtual bool IsInRole(SecurityIdentifier sid); // 0x0000000180192C40
	private static bool IsMemberOfGroupId(IntPtr user, IntPtr group); // 0x0000000180193010
	private static bool IsMemberOfGroupName(IntPtr user, string group); // 0x0000000180193020
}

// Namespace: System.Security
public sealed class AllowPartiallyTrustedCallersAttribute : Attribute // TypeDefIndex: 1483
{
	// Constructors
	public AllowPartiallyTrustedCallersAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Security
[Serializable]
public abstract class CodeAccessPermission : IPermission, ISecurityEncodable, IStackWalk // TypeDefIndex: 1484
{
	// Constructors
	protected CodeAccessPermission(); // 0x00000001800E2000

	// Methods
	public void Assert(); // 0x00000001800EA7B0
	internal bool CheckAssert(CodeAccessPermission asserted); // 0x00000001802F25F0
	internal bool CheckDemand(CodeAccessPermission target); // 0x00000001802F25F0
	internal bool CheckDeny(CodeAccessPermission denied); // 0x00000001802F2660
	internal bool CheckPermitOnly(CodeAccessPermission target); // 0x00000001802F25F0
	public abstract IPermission Copy();
	public void Demand(); // 0x00000001800EA7B0
	public void Deny(); // 0x00000001800EA7B0
	public override bool Equals(object obj); // 0x00000001802F2C50
	public abstract void FromXml(SecurityElement elem);
	public override int GetHashCode(); // 0x000000018026AD10
	public abstract IPermission Intersect(IPermission target);
	public abstract bool IsSubsetOf(IPermission target);
	public override string ToString(); // 0x00000001802F37C0
	public abstract SecurityElement ToXml();
	public virtual IPermission Union(IPermission other); // 0x00000001802F37F0
	public void PermitOnly(); // 0x00000001800EA7B0
	public static void RevertAll(); // 0x00000001800EA7B0
	public static void RevertAssert(); // 0x00000001800EA7B0
	public static void RevertDeny(); // 0x00000001800EA7B0
	public static void RevertPermitOnly(); // 0x00000001800EA7B0
	internal SecurityElement Element(int version); // 0x00000001802F2AF0
	internal static PermissionState CheckPermissionState(PermissionState state, bool allowUnrestricted); // 0x00000001802F2740
	internal static int CheckSecurityElement(SecurityElement se, string parameterName, int minimumVersion, int maximumVersion); // 0x00000001802F2810
	internal static bool IsUnrestricted(SecurityElement se); // 0x00000001802F2D60
	internal bool ProcessFrame(SecurityFrame frame); // 0x00000001802F2E70
	internal static void ThrowInvalidPermission(IPermission target, Type expected); // 0x00000001802F36A0
	internal static void ThrowExecutionEngineException(SecurityAction stackmod); // 0x00000001802F35C0
	internal static void ThrowSecurityException(object demanded, string message, SecurityFrame frame, SecurityAction action, IPermission failed); // 0x00000001802F3760
}

// Namespace: System.Security
[Serializable]
public class HostProtectionException : SystemException // TypeDefIndex: 1485
{
	// Fields
	private HostProtectionResource _protected; // 0x60
	private HostProtectionResource _demanded; // 0x10

	// Properties
	public HostProtectionResource DemandedResources { get; } // 0x0000000180196DD0 
	public HostProtectionResource ProtectedResources { get; } // 0x000000018019E8D0 

	// Constructors
	public HostProtectionException(); // 0x00000001801919A0
	public HostProtectionException(string message); // 0x000000018010E1E0
	public HostProtectionException(string message, Exception e); // 0x000000018010E1D0
	public HostProtectionException(string message, HostProtectionResource protectedResources, HostProtectionResource demandedResources); // 0x00000001802AB0C0
	protected HostProtectionException(SerializationInfo info, StreamingContext context); // 0x00000001802AB100

	// Methods
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00000001802AB040
	public override string ToString(); // 0x00000001802AB0B0
}

// Namespace: System.Security
[Serializable]
public class HostSecurityManager // TypeDefIndex: 1486
{
	// Properties
	public virtual PolicyLevel DomainPolicy { get; } // 0x00000001800EA8C0 
	public virtual HostSecurityManagerOptions Flags { get; } // 0x00000001802ABD60 

	// Constructors
	public HostSecurityManager(); // 0x00000001800E2000

	// Methods
	public virtual ApplicationTrust DetermineApplicationTrust(Evidence applicationEvidence, Evidence activatorEvidence, TrustManagerContext context); // 0x00000001802AB9D0
	public virtual Evidence ProvideAppDomainEvidence(Evidence inputEvidence); // 0x000000018012FC60
	public virtual Evidence ProvideAssemblyEvidence(Assembly loadedAssembly, Evidence inputEvidence); // 0x0000000180280520
	public virtual PermissionSet ResolvePolicy(Evidence evidence); // 0x00000001802ABCD0
}

// Namespace: System.Security
[Serializable]
public enum HostSecurityManagerOptions // TypeDefIndex: 1487
{
	None = 0,
	HostAppDomainEvidence = 1,
	HostPolicyLevel = 2,
	HostAssemblyEvidence = 4,
	HostDetermineApplicationTrust = 8,
	HostResolvePolicy = 16,
	AllFlags = 31
}

// Namespace: System.Security
public interface IEvidenceFactory // TypeDefIndex: 1488
{
	// Properties
	Evidence Evidence { get; }

}

// Namespace: System.Security
public interface IPermission : ISecurityEncodable // TypeDefIndex: 1489
{
	// Methods
	IPermission Copy();
	void Demand();
	IPermission Intersect(IPermission target);
	bool IsSubsetOf(IPermission target);
	IPermission Union(IPermission target);
}

// Namespace: System.Security
public interface ISecurityEncodable // TypeDefIndex: 1490
{
	// Methods
	void FromXml(SecurityElement e);
	SecurityElement ToXml();
}

// Namespace: System.Security
public interface ISecurityPolicyEncodable // TypeDefIndex: 1491
{
	// Methods
	void FromXml(SecurityElement e, PolicyLevel level);
	SecurityElement ToXml(PolicyLevel level);
}

// Namespace: System.Security
public interface IStackWalk // TypeDefIndex: 1492
{
	// Methods
	void Assert();
	void Demand();
	void Deny();
	void PermitOnly();
}

// Namespace: System.Security
[Serializable]
public sealed class NamedPermissionSet : PermissionSet // TypeDefIndex: 1493
{
	// Fields
	private string name; // 0x20
	private string description; // 0x10

	// Properties
	public string Description { get; set; } // 0x000000018013BF80 0x000000018015B760
	public string Name { get; set; } // 0x00000001800EAEB0 0x00000001802AE370

	// Constructors
	internal NamedPermissionSet(); // 0x00000001800E2000
	public NamedPermissionSet(string name, PermissionSet permSet); // 0x00000001802AE340
	public NamedPermissionSet(string name, PermissionState state); // 0x00000001802AE340
	public NamedPermissionSet(NamedPermissionSet permSet); // 0x00000001802AE300
	public NamedPermissionSet(string name); // 0x00000001802AE340

	// Methods
	public override PermissionSet Copy(); // 0x00000001802AE090
	public NamedPermissionSet Copy(string name); // 0x00000001802AE000
	public override void FromXml(SecurityElement et); // 0x00000001802AE1C0
	public override SecurityElement ToXml(); // 0x00000001802AE2B0
	public override bool Equals(object obj); // 0x00000001802AE100
	public override int GetHashCode(); // 0x00000001802AE270
}

// Namespace: System.Security
internal static class PermissionBuilder // TypeDefIndex: 1494
{
	// Fields
	private static object[] psNone; // 0x00

	// Constructors
	private static PermissionBuilder(); // 0x00000001802AEA10

	// Methods
	public static IPermission Create(string fullname, PermissionState state); // 0x00000001802AE840
	public static IPermission Create(SecurityElement se); // 0x00000001802AE670
	public static IPermission Create(string fullname, SecurityElement se); // 0x00000001802AE760
	public static IPermission Create(Type type); // 0x00000001802AE970
	internal static IPermission CreatePermission(string fullname, SecurityElement se); // 0x00000001802AE430
}

// Namespace: System.Security
[Serializable]
public class PermissionSet // TypeDefIndex: 1495
{
	// Fields
	private PolicyLevel <Resolver>k__BackingField; // 0x10
	private bool <DeclarativeSecurity>k__BackingField; // 0x10

	// Properties
	internal PolicyLevel Resolver { get; set; } // 0x00000001800E20D0 0x0000000180114C30
	internal bool DeclarativeSecurity { get; set; } // 0x00000001801249E0 0x00000001801AB4A0

	// Constructors
	public PermissionSet(); // 0x00000001800E2000
	internal PermissionSet(string xml); // 0x00000001800E2000
	public PermissionSet(PermissionState state); // 0x00000001800E2000
	public PermissionSet(PermissionSet permSet); // 0x00000001800E2000

	// Methods
	public IPermission AddPermission(IPermission perm); // 0x000000018012FC60
	public virtual void Assert(); // 0x00000001800EA7B0
	public virtual PermissionSet Copy(); // 0x00000001802AEAE0
	public virtual void Demand(); // 0x00000001800EA7B0
	public virtual void PermitOnly(); // 0x00000001800EA7B0
	public virtual IPermission GetPermission(Type permClass); // 0x00000001800EA8C0
	public virtual PermissionSet Intersect(PermissionSet other); // 0x000000018012FC60
	public virtual void Deny(); // 0x00000001800EA7B0
	public virtual void FromXml(SecurityElement et); // 0x00000001800EA7B0
	public virtual void CopyTo(Array array, int index); // 0x00000001800EA7B0
	public virtual SecurityElement ToXml(); // 0x00000001800EA8C0
	public virtual bool IsSubsetOf(PermissionSet target); // 0x000000018010E420
	internal void SetReadOnly(bool value); // 0x00000001800EA7B0
	public bool IsUnrestricted(); // 0x000000018010E420
	public PermissionSet Union(PermissionSet other); // 0x00000001802AEBD0
	public virtual IEnumerator GetEnumerator(); // 0x00000001802AEB80
	public virtual bool IsEmpty(); // 0x000000018010E420
	internal static PermissionSet CreateFromBinaryFormat(byte[] data); // 0x00000001802AEB30
}

// Namespace: 
private sealed class <GetEnumerator>c__Iterator1 : IEnumerator, IDisposable, IEnumerator`1<object> // TypeDefIndex: 1496
{
	// Fields
	internal int $PC; // 0x10
	internal object $current; // 0x10

	// Properties
	private object System.Collections.Generic.IEnumerator<object>.Current { get; } // 0x00000001800EAEC0 
	private object System.Collections.IEnumerator.Current { get; } // 0x00000001800EAEC0 

	// Constructors
	public <GetEnumerator>c__Iterator1(); // 0x00000001800E2000

	// Methods
	public bool MoveNext(); // 0x00000001802BC5C0
	public void Dispose(); // 0x00000001802BC5B0
	public void Reset(); // 0x00000001802BC5D0
}

// Namespace: System.Security
[Serializable]
public enum PolicyLevelType // TypeDefIndex: 1497
{
	User = 0,
	Machine = 1,
	Enterprise = 2,
	AppDomain = 3
}

// Namespace: System.Security
public sealed class SecureString : CriticalFinalizerObject, IDisposable // TypeDefIndex: 1498
{
	// Fields
	private const int BlockSize = 16; // 0x00
	private const int MaxSize = 65536; // 0x10
	private int length; // 0x15
	private bool disposed; // 0x10
	private bool read_only; // 0x20
	private byte[] data; // 0x29

	// Properties
	public int Length { get; } // 0x0000000180178EE0 

	// Constructors
	public SecureString(); // 0x0000000180178CD0
	public SecureString(void * value, int length); // 0x0000000180178D20
	private static SecureString(); // 0x00000001800EA7B0

	// Methods
	public void AppendChar(char c); // 0x00000001801780E0
	public void Clear(); // 0x00000001801782E0
	public SecureString Copy(); // 0x00000001801783C0
	public void Dispose(); // 0x00000001801784B0
	public void InsertAt(int index, char c); // 0x00000001801785D0
	public bool IsReadOnly(); // 0x00000001801788B0
	public void MakeReadOnly(); // 0x0000000180178920
	public void RemoveAt(int index); // 0x0000000180178930
	public void SetAt(int index, char c); // 0x0000000180178AF0
	private void Encrypt(); // 0x00000001801784A0
	private void Decrypt(); // 0x00000001801784A0
	private void Alloc(int length, bool realloc); // 0x0000000180177F90
	internal byte[] GetBuffer(); // 0x00000001801784F0
}

// Namespace: System.Security
public sealed class SecurityContext // TypeDefIndex: 1499
{
	// Fields
	private bool _capture; // 0x10
	private IntPtr _winid; // 0x20
	private CompressedStack _stack; // 0x29
	private bool _suppressFlowWindowsIdentity; // 0x10
	private bool _suppressFlow; // 0x00

	// Properties
	internal bool FlowSuppressed { get; set; } // 0x00000001801799D0 0x00000001801799E0
	internal bool WindowsIdentityFlowSuppressed { get; set; } // 0x00000001800EA930 0x00000001801799F0
	internal CompressedStack CompressedStack { get; set; } // 0x00000001800EAEB0 0x00000001800EAED0
	internal IntPtr IdentityToken { get; set; } // 0x00000001800EAEC0 0x00000001800EAEE0

	// Constructors
	internal SecurityContext(); // 0x00000001800E2000
	internal SecurityContext(SecurityContext sc); // 0x0000000180179980

	// Methods
	public SecurityContext CreateCopy(); // 0x00000001801792D0
	public static SecurityContext Capture(); // 0x00000001801791E0
	public static bool IsFlowSuppressed(); // 0x0000000180179380
	public static bool IsWindowsIdentityFlowSuppressed(); // 0x0000000180179400
	public static void RestoreFlow(); // 0x0000000180179480
	public static void Run(SecurityContext securityContext, ContextCallback callback, object state); // 0x0000000180179540
	public static AsyncFlowControl SuppressFlow(); // 0x00000001801798B0
	public static AsyncFlowControl SuppressFlowWindowsIdentity(); // 0x0000000180179800
}

// Namespace: System.Security
public sealed class SecurityCriticalAttribute : Attribute // TypeDefIndex: 1500
{
	// Fields
	private SecurityCriticalScope _scope; // 0x10

	// Properties
	public SecurityCriticalScope Scope { get; } // 0x00000001800ECD10 

	// Constructors
	public SecurityCriticalAttribute(); // 0x0000000180179A00
	public SecurityCriticalAttribute(SecurityCriticalScope scope); // 0x0000000180179A20

}

// Namespace: System.Security
public enum SecurityCriticalScope // TypeDefIndex: 1501
{
	Explicit = 0,
	Everything = 1
}

// Namespace: System.Security
[Serializable]
public sealed class SecurityElement // TypeDefIndex: 1502
{
	// Fields
	private string text; // 0x10
	private string tag; // 0x20
	private ArrayList attributes; // 0x00
	private ArrayList children; // 0x10
	private static readonly char[] invalid_tag_chars; // 0x20
	private static readonly char[] invalid_text_chars; // 0x10
	private static readonly char[] invalid_attr_name_chars; // 0x60
	private static readonly char[] invalid_attr_value_chars; // 0x70
	private static readonly char[] invalid_chars; // 0x80

	// Properties
	public Hashtable Attributes { get; set; } // 0x000000018017BDE0 0x000000018017C050
	public ArrayList Children { get; set; } // 0x000000018013BF80 0x000000018017C360
	public string Tag { get; set; } // 0x00000001800EAEC0 0x000000018017C4D0
	public string Text { get; set; } // 0x00000001800E20D0 0x000000018017C5F0

	// Constructors
	public SecurityElement(string tag); // 0x000000018017B740
	public SecurityElement(string tag, string text); // 0x000000018017BCA0
	internal SecurityElement(SecurityElement se); // 0x000000018017B750
	private static SecurityElement(); // 0x000000018017B480

	// Methods
	public void AddAttribute(string name, string value); // 0x0000000180179A50
	public void AddChild(SecurityElement child); // 0x0000000180179C10
	public string Attribute(string name); // 0x0000000180179CE0
	public SecurityElement Copy(); // 0x0000000180179D70
	public bool Equal(SecurityElement other); // 0x0000000180179DD0
	public static string Escape(string str); // 0x000000018017A2D0
	private static string Unescape(string str); // 0x000000018017B380
	public static SecurityElement FromString(string xml); // 0x000000018017A510
	public static bool IsValidAttributeName(string name); // 0x000000018017A860
	public static bool IsValidAttributeValue(string value); // 0x000000018017A8E0
	public static bool IsValidTag(string tag); // 0x000000018017A960
	public static bool IsValidText(string text); // 0x000000018017A9E0
	public SecurityElement SearchForChildByTag(string tag); // 0x000000018017AA60
	public string SearchForTextOfTag(string tag); // 0x000000018017ABE0
	public override string ToString(); // 0x000000018017ADB0
	private void ToXml(StringBuilder s, int level); // 0x000000018017AE30
	internal SecurityAttribute GetAttribute(string name); // 0x000000018017A660
}

// Namespace: 
internal class SecurityAttribute // TypeDefIndex: 1503
{
	// Fields
	private string _name; // 0x10
	private string _value; // 0x60

	// Properties
	public string Name { get; } // 0x00000001800E20D0 
	public string Value { get; } // 0x00000001800EAEC0 

	// Constructors
	public SecurityAttribute(string name, string value); // 0x0000000180178F50

}

// Namespace: System.Security
[Serializable]
public class SecurityException : SystemException // TypeDefIndex: 1504
{
	// Fields
	private string permissionState; // 0x60
	private Type permissionType; // 0x70
	private string _granted; // 0x80
	private string _refused; // 0x90
	private object _demanded; // 0xA0
	private IPermission _firstperm; // 0xB0
	private MethodInfo _method; // 0xC0
	private Evidence _evidence; // 0x10
	private SecurityAction _action; // 0x1C
	private object _denyset; // 0x10
	private object _permitset; // 0x20
	private AssemblyName _assembly; // 0x40
	private string _url; // 0x10
	private SecurityZone _zone; // 0x20

	// Properties
	public SecurityAction Action { get; set; } // 0x000000018017D2C0 0x000000018017D350
	public object DenySetInstance { get; set; } // 0x000000018017D2D0 0x000000018017D370
	public AssemblyName FailedAssemblyInfo { get; set; } // 0x000000018017D2E0 0x000000018017D380
	public MethodInfo Method { get; set; } // 0x000000018017D310 0x000000018017D3B0
	public object PermitOnlySetInstance { get; set; } // 0x000000018017D320 0x000000018017D3D0
	public string Url { get; set; } // 0x0000000180176B20 0x000000018017D3F0
	public SecurityZone Zone { get; set; } // 0x000000018017D340 0x000000018017D400
	public object Demanded { get; set; } // 0x0000000180113670 0x000000018017D360
	public IPermission FirstPermissionThatFailed { get; set; } // 0x000000018017D2F0 0x000000018017D390
	public string PermissionState { get; set; } // 0x0000000180114BE0 0x000000018017D3C0
	public Type PermissionType { get; set; } // 0x00000001801136C0 0x0000000180168370
	public string GrantedSet { get; set; } // 0x000000018017D300 0x000000018017D3A0
	public string RefusedSet { get; set; } // 0x000000018017D330 0x000000018017D3E0

	// Constructors
	public SecurityException(); // 0x000000018017D0B0
	public SecurityException(string message); // 0x000000018017CE50
	protected SecurityException(SerializationInfo info, StreamingContext context); // 0x000000018017CF90
	public SecurityException(string message, Exception inner); // 0x000000018017D140
	public SecurityException(string message, Type type); // 0x000000018017CEF0
	public SecurityException(string message, Type type, string state); // 0x000000018017D100
	internal SecurityException(string message, PermissionSet granted, PermissionSet refused); // 0x000000018017CE70
	public SecurityException(string message, object deny, object permitOnly, MethodInfo method, object demanded, IPermission permThatFailed); // 0x000000018017CF20
	public SecurityException(string message, AssemblyName assemblyName, PermissionSet grant, PermissionSet refused, MethodInfo method, SecurityAction action, object demanded, IPermission permThatFailed, Evidence evidence); // 0x000000018017D160

	// Methods
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x000000018017C760
	public override string ToString(); // 0x000000018017C800
}

// Namespace: System.Security
internal struct RuntimeDeclSecurityEntry // TypeDefIndex: 1505
{
	// Fields
	public IntPtr blob; // 0x10
	public int size; // 0x1C
	public int index; // 0x10

}

// Namespace: System.Security
internal class RuntimeSecurityFrame // TypeDefIndex: 1506
{
	// Fields
	public AppDomain domain; // 0x10
	public MethodInfo method; // 0x20
	public RuntimeDeclSecurityEntry assert; // 0x40
	public RuntimeDeclSecurityEntry deny; // 0x10
	public RuntimeDeclSecurityEntry permitonly; // 0x20

	// Constructors
	public RuntimeSecurityFrame(); // 0x00000001800E2000

}

// Namespace: System.Security
internal struct SecurityFrame // TypeDefIndex: 1507
{
	// Fields
	private AppDomain _domain; // 0x10
	private MethodInfo _method; // 0x20
	private PermissionSet _assert; // 0x30
	private PermissionSet _deny; // 0x10
	private PermissionSet _permitonly; // 0x30

	// Properties
	public Assembly Assembly { get; } // 0x0000000180007410 
	public AppDomain Domain { get; } // 0x0000000180002060 
	public MethodInfo Method { get; } // 0x0000000180002040 
	public PermissionSet Assert { get; } // 0x0000000180002050 
	public PermissionSet Deny { get; } // 0x0000000180002070 
	public PermissionSet PermitOnly { get; } // 0x0000000180006970 
	public bool HasStackModifiers { get; } // 0x0000000180007460 

	// Constructors
	internal SecurityFrame(RuntimeSecurityFrame frame); // 0x00000001800073E0
	internal SecurityFrame(int skip); // 0x00000001800073A0

	// Methods
	private static RuntimeSecurityFrame _GetSecurityFrame(int skip); // 0x000000018017DAB0
	private static Array _GetSecurityStack(int skip); // 0x00000001801150B0
	internal void InitFromRuntimeFrame(RuntimeSecurityFrame frame); // 0x0000000180007380
	public bool Equals(SecurityFrame sf); // 0x0000000180007340
	public override string ToString(); // 0x0000000180007390
	public static ArrayList GetStack(int skipFrames); // 0x000000018017D680
}

// Namespace: System.Security
internal struct RuntimeDeclSecurityActions // TypeDefIndex: 1508
{
	// Fields
	public RuntimeDeclSecurityEntry cas; // 0x10
	public RuntimeDeclSecurityEntry noncas; // 0x30
	public RuntimeDeclSecurityEntry choice; // 0x00

}

// Namespace: System.Security
public static class SecurityManager // TypeDefIndex: 1509
{
	// Fields
	private static object _lockObject; // 0x00
	private static ArrayList _hierarchy; // 0x10
	private static IPermission _unmanagedCode; // 0x20
	private static Hashtable _declsecCache; // 0x10
	private static PolicyLevel _level; // 0x00
	private static SecurityPermission _execution; // 0x00

	// Properties
	public static bool CheckExecutionRights { get; set; } // 0x0000000180113770 0x0000000180181760
	public static bool SecurityEnabled { get; set; } // 0x0000000180113770 0x00000001801817D0
	private static IEnumerator Hierarchy { get; } // 0x00000001801813E0 
	internal static PolicyLevel ResolvingPolicyLevel { get; set; } // 0x0000000180181560 0x0000000180181770
	private static IPermission UnmanagedCode { get; } // 0x00000001801815C0 

	// Constructors
	private static SecurityManager(); // 0x0000000180181350

	// Methods
	public static void GetZoneAndOrigin(out ArrayList zone, out ArrayList origin); // 0x000000018017F190
	public static bool IsGranted(IPermission perm); // 0x000000018017F8A0
	internal static bool IsGranted(Assembly a, IPermission perm); // 0x000000018017F940
	internal static IPermission CheckPermissionSet(Assembly a, PermissionSet ps, bool noncas); // 0x000000018017E8C0
	internal static IPermission CheckPermissionSet(AppDomain ad, PermissionSet ps); // 0x000000018017E520
	public static PolicyLevel LoadPolicyLevelFromFile(string path, PolicyLevelType type); // 0x0000000180180030
	public static PolicyLevel LoadPolicyLevelFromString(string str, PolicyLevelType type); // 0x0000000180180180
	public static IEnumerator PolicyHierarchy(); // 0x00000001801802D0
	public static PermissionSet ResolvePolicy(Evidence evidence); // 0x0000000180180E60
	public static PermissionSet ResolvePolicy(Evidence[] evidences); // 0x0000000180180CF0
	public static PermissionSet ResolveSystemPolicy(Evidence evidence); // 0x0000000180180FE0
	public static PermissionSet ResolvePolicy(Evidence evidence, PermissionSet reqdPset, PermissionSet optPset, PermissionSet denyPset, out PermissionSet denied); // 0x0000000180180AF0
	public static IEnumerator ResolvePolicyGroups(Evidence evidence); // 0x00000001801807D0
	public static void SavePolicy(); // 0x0000000180181190
	public static void SavePolicyLevel(PolicyLevel level); // 0x0000000180181170
	private static void InitializePolicyHierarchy(); // 0x000000018017F510
	internal static bool ResolvePolicyLevel(PermissionSet ps, PolicyLevel pl, Evidence evidence); // 0x0000000180180A10
	internal static void ResolveIdentityPermissions(PermissionSet ps, Evidence evidence); // 0x0000000180180620
	internal static PermissionSet Decode(IntPtr permissions, int length); // 0x000000018017ECC0
	internal static PermissionSet Decode(byte[] encodedPermissions); // 0x000000018017EB50
	private static bool GetLinkDemandSecurity(MethodBase method, void * cdecl, void * mdecl); // 0x0000000180113770
	internal static void ReflectedLinkDemandInvoke(MethodBase mb); // 0x0000000180180320
	internal static bool ReflectedLinkDemandQuery(MethodBase mb); // 0x0000000180180510
	private static bool LinkDemand(Assembly a, void * klass, void * method); // 0x000000018017FE50
	private static bool LinkDemandFullTrust(Assembly a); // 0x000000018017FB10
	private static bool LinkDemandUnmanaged(Assembly a); // 0x000000018017FDF0
	private static void LinkDemandSecurityException(int securityViolation, IntPtr methodHandle); // 0x000000018017FB80
	private static void InheritanceDemandSecurityException(int securityViolation, Assembly a, Type t, MethodInfo method); // 0x000000018017F210
	private static void ThrowException(Exception ex); // 0x0000000180181310
	private static bool InheritanceDemand(AppDomain ad, Assembly a, void * actions); // 0x000000018017F370
	private static void DemandUnmanaged(); // 0x000000018017F120
	private static void InternalDemand(IntPtr permissions, int length); // 0x000000018017F820
	private static void InternalDemandChoice(IntPtr permissions, int length); // 0x000000018017F7C0
}

// Namespace: System.Security
public sealed class SecuritySafeCriticalAttribute : Attribute // TypeDefIndex: 1510
{
	// Constructors
	public SecuritySafeCriticalAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Security
public abstract class SecurityState // TypeDefIndex: 1511
{
	// Constructors
	protected SecurityState(); // 0x00000001800E2000

	// Methods
	public abstract void EnsureState();
	public bool IsStateAvailable(); // 0x00000001801817E0
}

// Namespace: System.Security
public sealed class SecurityTransparentAttribute : Attribute // TypeDefIndex: 1512
{
	// Constructors
	public SecurityTransparentAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Security
public sealed class SecurityTreatAsSafeAttribute : Attribute // TypeDefIndex: 1513
{
	// Constructors
	public SecurityTreatAsSafeAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Security
[Serializable]
public enum SecurityZone // TypeDefIndex: 1514
{
	NoZone = -1,
	MyComputer = 0,
	Intranet = 1,
	Trusted = 2,
	Internet = 3,
	Untrusted = 4
}

// Namespace: System.Security
public sealed class SuppressUnmanagedCodeSecurityAttribute : Attribute // TypeDefIndex: 1515
{
	// Constructors
	public SuppressUnmanagedCodeSecurityAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Security
public sealed class UnverifiableCodeAttribute : Attribute // TypeDefIndex: 1516
{
	// Constructors
	public UnverifiableCodeAttribute(); // 0x00000001800EAC90

}

// Namespace: System.Security
[Serializable]
public class VerificationException : SystemException // TypeDefIndex: 1517
{
	// Constructors
	public VerificationException(); // 0x00000001801919A0
	public VerificationException(string message); // 0x000000018010E1E0
	protected VerificationException(SerializationInfo info, StreamingContext context); // 0x000000018010E170
	public VerificationException(string message, Exception innerException); // 0x000000018010E1D0

}

// Namespace: System.Security
[Serializable]
public sealed class XmlSyntaxException : SystemException // TypeDefIndex: 1518
{
	// Constructors
	public XmlSyntaxException(); // 0x00000001801919A0
	public XmlSyntaxException(int lineNumber); // 0x00000001801930E0
	public XmlSyntaxException(int lineNumber, string message); // 0x0000000180193190
	public XmlSyntaxException(string message); // 0x000000018010E1E0
	public XmlSyntaxException(string message, Exception inner); // 0x000000018010E1D0
	internal XmlSyntaxException(SerializationInfo info, StreamingContext context); // 0x000000018010E170

}

// Namespace: System.Text
[Serializable]
public class ASCIIEncoding : Encoding // TypeDefIndex: 1519
{
	// Fields
	internal const int ASCII_CODE_PAGE = 20127; // 0x00

	// Properties
	public override bool IsSingleByte { get; } // 0x000000018010E420 

	// Constructors
	public ASCIIEncoding(); // 0x00000001803A8D80

	// Methods
	public override int GetByteCount(char[] chars, int index, int count); // 0x00000001803A7220
	public override int GetByteCount(string chars); // 0x00000001803A7390
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x00000001803A79E0
	private int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, EncoderFallbackBuffer buffer, char[] fallback_chars); // 0x00000001803A7A30
	public override int GetBytes(string chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x00000001803A7990
	private int GetBytes(string chars, int charIndex, int charCount, byte[] bytes, int byteIndex, EncoderFallbackBuffer buffer, char[] fallback_chars); // 0x00000001803A7400
	public override int GetCharCount(byte[] bytes, int index, int count); // 0x00000001803A81D0
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x00000001803A84E0
	private int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, DecoderFallbackBuffer buffer); // 0x00000001803A8520
	public override int GetMaxByteCount(int charCount); // 0x00000001803A89F0
	public override int GetMaxCharCount(int byteCount); // 0x00000001803A8A90
	public override string GetString(byte[] bytes, int byteIndex, int byteCount); // 0x00000001803A8B30
	public override int GetBytes(void * chars, int charCount, void * bytes, int byteCount); // 0x00000001803A8020
	public override int GetChars(void * bytes, int byteCount, void * chars, int charCount); // 0x00000001803A8340
	public override int GetCharCount(void * bytes, int count); // 0x0000000180295830
	public override int GetByteCount(void * chars, int count); // 0x0000000180295830
	public override Decoder GetDecoder(); // 0x00000001803A8960
	public override Encoder GetEncoder(); // 0x00000001803A89E0
}

// Namespace: System.Text
[Serializable]
internal sealed class CodePageEncoding : ISerializable, IObjectReference // TypeDefIndex: 1520
{
	// Fields
	private int codePage; // 0x10
	private bool isReadOnly; // 0x18
	private EncoderFallback encoderFallback; // 0x28
	private DecoderFallback decoderFallback; // 0x10
	private Encoding realObject; // 0x10

	// Constructors
	private CodePageEncoding(SerializationInfo info, StreamingContext context); // 0x00000001803A91F0

	// Methods
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00000001803A9080
	public object GetRealObject(StreamingContext context); // 0x00000001803A90E0
}

// Namespace: 
[Serializable]
private sealed class Decoder : ISerializable, IObjectReference // TypeDefIndex: 1521
{
	// Fields
	private Encoding encoding; // 0x10
	private Decoder realObject; // 0x10

	// Constructors
	private Decoder(SerializationInfo info, StreamingContext context); // 0x00000001803AA8D0

	// Methods
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00000001803AA790
	public object GetRealObject(StreamingContext context); // 0x00000001803AA7F0
}

// Namespace: System.Text
[Serializable]
public abstract class Decoder // TypeDefIndex: 1522
{
	// Fields
	private DecoderFallback fallback; // 0x10
	private DecoderFallbackBuffer fallback_buffer; // 0x00

	// Properties
	public DecoderFallback Fallback { get; set; } // 0x00000001800E20D0 0x00000001803AAA30
	public DecoderFallbackBuffer FallbackBuffer { get; } // 0x00000001803AA9F0 

	// Constructors
	protected Decoder(); // 0x00000001803AA850

	// Methods
	public abstract int GetCharCount(byte[] bytes, int index, int count);
	public abstract int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
	public virtual int GetCharCount(byte[] bytes, int index, int count, bool flush); // 0x00000001803AA3B0
	public virtual int GetCharCount(void * bytes, int count, bool flush); // 0x00000001803AA420
	public virtual int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush); // 0x00000001803AA580
	public virtual int GetChars(void * bytes, int byteCount, void * chars, int charCount, bool flush); // 0x00000001803AA640
	public virtual void Reset(); // 0x00000001803AA830
	public virtual void Convert(void * bytes, int byteCount, void * chars, int charCount, bool flush, out int bytesUsed, out int charsUsed, out bool completed); // 0x00000001803AA0B0
	public virtual void Convert(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, int charCount, bool flush, out int bytesUsed, out int charsUsed, out bool completed); // 0x00000001803AA1E0
	private void CheckArguments(char[] chars, int charIndex); // 0x00000001803A9DD0
	private void CheckArguments(byte[] bytes, int byteIndex, int byteCount); // 0x00000001803A9FB0
	private void CheckArguments(void * chars, int charCount, void * bytes, int byteCount); // 0x00000001803A9E80
}

// Namespace: System.Text
[Serializable]
public sealed class DecoderExceptionFallback : DecoderFallback // TypeDefIndex: 1523
{
	// Properties
	public override int MaxCharCount { get; } // 0x00000001800EA8C0 

	// Constructors
	public DecoderExceptionFallback(); // 0x00000001803A95A0

	// Methods
	public override DecoderFallbackBuffer CreateFallbackBuffer(); // 0x00000001803A9500
	public override bool Equals(object value); // 0x00000001803A9550
	public override int GetHashCode(); // 0x00000001800EA8C0
}

// Namespace: System.Text
public sealed class DecoderExceptionFallbackBuffer : DecoderFallbackBuffer // TypeDefIndex: 1524
{
	// Properties
	public override int Remaining { get; } // 0x00000001800EA8C0 

	// Constructors
	public DecoderExceptionFallbackBuffer(); // 0x00000001800E2000

	// Methods
	public override bool Fallback(byte[] bytesUnknown, int index); // 0x00000001803A9490
	public override char GetNextChar(); // 0x00000001800EA8C0
	public override bool MovePrevious(); // 0x000000018011A0F0
}

// Namespace: System.Text
[Serializable]
public abstract class DecoderFallback // TypeDefIndex: 1525
{
	// Fields
	private static DecoderFallback exception_fallback; // 0x00
	private static DecoderFallback replacement_fallback; // 0x10
	private static DecoderFallback standard_safe_fallback; // 0x00

	// Properties
	public static DecoderFallback ExceptionFallback { get; } // 0x00000001803A9790 
	public abstract int MaxCharCount { get; }
	public static DecoderFallback ReplacementFallback { get; } // 0x00000001803A97F0 
	internal static DecoderFallback StandardSafeFallback { get; } // 0x00000001803A98B0 

	// Constructors
	protected DecoderFallback(); // 0x00000001800E2000
	private static DecoderFallback(); // 0x00000001803A9680

	// Methods
	public abstract DecoderFallbackBuffer CreateFallbackBuffer();
}

// Namespace: System.Text
public abstract class DecoderFallbackBuffer // TypeDefIndex: 1526
{
	// Properties
	public abstract int Remaining { get; }

	// Constructors
	protected DecoderFallbackBuffer(); // 0x00000001800E2000

	// Methods
	public abstract bool Fallback(byte[] bytesUnknown, int index);
	public abstract char GetNextChar();
	public abstract bool MovePrevious();
	public virtual void Reset(); // 0x00000001800EA7B0
}

// Namespace: System.Text
[Serializable]
public sealed class DecoderFallbackException : ArgumentException // TypeDefIndex: 1527
{
	// Fields
	private const string defaultMessage = "Failed to decode the input byte sequence to Unicode characters."; // 0x00
	private byte[] bytes_unknown; // 0x70
	private int index; // 0x10

	// Properties
	public byte[] BytesUnknown { get; } // 0x00000001801136C0 
	public int Index { get; } // 0x000000018026ECC0 

	// Constructors
	public DecoderFallbackException(); // 0x00000001803A9600
	public DecoderFallbackException(string message); // 0x00000001803A9660
	public DecoderFallbackException(string message, Exception innerException); // 0x00000001803A9670
	public DecoderFallbackException(string message, byte[] bytesUnknown, int index); // 0x00000001803A9620

}

// Namespace: System.Text
[Serializable]
public sealed class DecoderReplacementFallback : DecoderFallback // TypeDefIndex: 1528
{
	// Fields
	private string replacement; // 0x10

	// Properties
	public string DefaultString { get; } // 0x00000001800E20D0 
	public override int MaxCharCount { get; } // 0x00000001803A9DB0 

	// Constructors
	public DecoderReplacementFallback(); // 0x00000001803A9D70
	public DecoderReplacementFallback(string replacement); // 0x00000001803A9CD0

	// Methods
	public override DecoderFallbackBuffer CreateFallbackBuffer(); // 0x00000001803A9B70
	public override bool Equals(object value); // 0x00000001803A9C30
	public override int GetHashCode(); // 0x00000001801AAC10
}

// Namespace: System.Text
public sealed class DecoderReplacementFallbackBuffer : DecoderFallbackBuffer // TypeDefIndex: 1529
{
	// Fields
	private bool fallback_assigned; // 0x10
	private int current; // 0x18
	private string replacement; // 0x10

	// Properties
	public override int Remaining { get; } // 0x00000001803A9B40 

	// Constructors
	public DecoderReplacementFallbackBuffer(DecoderReplacementFallback fallback); // 0x00000001803A9AB0

	// Methods
	public override bool Fallback(byte[] bytesUnknown, int index); // 0x00000001803A9910
	public override char GetNextChar(); // 0x00000001803A9A40
	public override bool MovePrevious(); // 0x00000001803A9A80
	public override void Reset(); // 0x00000001803A9AA0
}

// Namespace: System.Text
[Serializable]
public abstract class Encoder // TypeDefIndex: 1530
{
	// Fields
	private EncoderFallback fallback; // 0x10
	private EncoderFallbackBuffer fallback_buffer; // 0x00

	// Properties
	public EncoderFallback Fallback { get; set; } // 0x00000001800E20D0 0x00000001803ABD90
	public EncoderFallbackBuffer FallbackBuffer { get; } // 0x00000001803AA9F0 

	// Constructors
	protected Encoder(); // 0x00000001803ABD10

	// Methods
	public abstract int GetByteCount(char[] chars, int index, int count, bool flush);
	public abstract int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush);
	public virtual int GetByteCount(void * chars, int count, bool flush); // 0x00000001803ABA40
	public virtual int GetBytes(void * chars, int charCount, void * bytes, int byteCount, bool flush); // 0x00000001803ABBA0
	public virtual void Reset(); // 0x00000001803ABCF0
	public virtual void Convert(void * chars, int charCount, void * bytes, int byteCount, bool flush, out int charsUsed, out int bytesUsed, out bool completed); // 0x00000001803AB920
	public virtual void Convert(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, int byteCount, bool flush, out int charsUsed, out int bytesUsed, out bool completed); // 0x00000001803AB610
	private void CheckArguments(void * chars, int charCount, void * bytes, int byteCount); // 0x00000001803AB4E0
}

// Namespace: System.Text
[Serializable]
public sealed class EncoderExceptionFallback : EncoderFallback // TypeDefIndex: 1531
{
	// Properties
	public override int MaxCharCount { get; } // 0x00000001800EA8C0 

	// Constructors
	public EncoderExceptionFallback(); // 0x00000001803AAC40

	// Methods
	public override EncoderFallbackBuffer CreateFallbackBuffer(); // 0x00000001803AABA0
	public override bool Equals(object value); // 0x00000001803AABF0
	public override int GetHashCode(); // 0x00000001800EA8C0
}

// Namespace: System.Text
public sealed class EncoderExceptionFallbackBuffer : EncoderFallbackBuffer // TypeDefIndex: 1532
{
	// Properties
	public override int Remaining { get; } // 0x00000001800EA8C0 

	// Constructors
	public EncoderExceptionFallbackBuffer(); // 0x00000001800E2000

	// Methods
	public override bool Fallback(char charUnknown, int index); // 0x00000001803AAB30
	public override bool Fallback(char charUnknownHigh, char charUnknownLow, int index); // 0x00000001803AAAB0
	public override char GetNextChar(); // 0x00000001800EA8C0
	public override bool MovePrevious(); // 0x000000018011A0F0
}

// Namespace: System.Text
[Serializable]
public abstract class EncoderFallback // TypeDefIndex: 1533
{
	// Fields
	private static EncoderFallback exception_fallback; // 0x00
	private static EncoderFallback replacement_fallback; // 0x10
	private static EncoderFallback standard_safe_fallback; // 0x00

	// Properties
	public static EncoderFallback ExceptionFallback { get; } // 0x00000001803AAF00 
	public abstract int MaxCharCount { get; }
	public static EncoderFallback ReplacementFallback { get; } // 0x00000001803AAF60 
	internal static EncoderFallback StandardSafeFallback { get; } // 0x00000001803AB020 

	// Constructors
	protected EncoderFallback(); // 0x00000001800E2000
	private static EncoderFallback(); // 0x00000001803AADF0

	// Methods
	public abstract EncoderFallbackBuffer CreateFallbackBuffer();
}

// Namespace: System.Text
public abstract class EncoderFallbackBuffer // TypeDefIndex: 1534
{
	// Properties
	public abstract int Remaining { get; }

	// Constructors
	protected EncoderFallbackBuffer(); // 0x00000001800E2000

	// Methods
	public abstract bool Fallback(char charUnknown, int index);
	public abstract bool Fallback(char charUnknownHigh, char charUnknownLow, int index);
	public abstract char GetNextChar();
	public abstract bool MovePrevious();
	public virtual void Reset(); // 0x00000001803AACA0
}

// Namespace: System.Text
[Serializable]
public sealed class EncoderFallbackException : ArgumentException // TypeDefIndex: 1535
{
	// Fields
	private const string defaultMessage = "Failed to decode the input byte sequence to Unicode characters."; // 0x00
	private char char_unknown; // 0x6A
	private char char_unknown_high; // 0x70
	private char char_unknown_low; // 0x10
	private int index; // 0x1C

	// Properties
	public char CharUnknown { get; } // 0x00000001803AADE0 
	public char CharUnknownHigh { get; } // 0x00000001803AADC0 
	public char CharUnknownLow { get; } // 0x00000001803AADD0 
	public int Index { get; } // 0x000000018026ECC0 

	// Constructors
	public EncoderFallbackException(); // 0x00000001803A9600
	public EncoderFallbackException(string message); // 0x00000001803A9660
	public EncoderFallbackException(string message, Exception innerException); // 0x00000001803A9670
	internal EncoderFallbackException(char charUnknown, int index); // 0x00000001803AAD20
	internal EncoderFallbackException(char charUnknownHigh, char charUnknownLow, int index); // 0x00000001803AAD60

	// Methods
	public bool IsUnknownSurrogate(); // 0x00000001803AACD0
}

// Namespace: System.Text
[Serializable]
public sealed class EncoderReplacementFallback : EncoderFallback // TypeDefIndex: 1536
{
	// Fields
	private string replacement; // 0x10

	// Properties
	public string DefaultString { get; } // 0x00000001800E20D0 
	public override int MaxCharCount { get; } // 0x00000001803A9DB0 

	// Constructors
	public EncoderReplacementFallback(); // 0x00000001803AB4A0
	public EncoderReplacementFallback(string replacement); // 0x00000001803AB400

	// Methods
	public override EncoderFallbackBuffer CreateFallbackBuffer(); // 0x00000001803AB2A0
	public override bool Equals(object value); // 0x00000001803AB360
	public override int GetHashCode(); // 0x00000001801AAC10
}

// Namespace: System.Text
public sealed class EncoderReplacementFallbackBuffer : EncoderFallbackBuffer // TypeDefIndex: 1537
{
	// Fields
	private string replacement; // 0x10
	private int current; // 0x1C
	private bool fallback_assigned; // 0x10

	// Properties
	public override int Remaining { get; } // 0x00000001803AB280 

	// Constructors
	public EncoderReplacementFallbackBuffer(EncoderReplacementFallback fallback); // 0x00000001803AB1F0

	// Methods
	public override bool Fallback(char charUnknown, int index); // 0x00000001803AB080
	public override bool Fallback(char charUnknownHigh, char charUnknownLow, int index); // 0x00000001803AB090
	private bool Fallback(int index); // 0x00000001803AB0A0
	public override char GetNextChar(); // 0x00000001803AB180
	public override bool MovePrevious(); // 0x00000001803AB1C0
	public override void Reset(); // 0x00000001803AB1E0
}

// Namespace: System.Text
[Serializable]
public abstract class Encoding : ICloneable // TypeDefIndex: 1538
{
	// Fields
	internal int codePage; // 0x10
	internal int windows_code_page; // 0x18
	private bool is_readonly; // 0x28
	private DecoderFallback decoder_fallback; // 0x08
	private EncoderFallback encoder_fallback; // 0x18
	private static Assembly i18nAssembly; // 0x38
	private static bool i18nDisabled; // 0x48
	private static EncodingInfo[] encoding_infos; // 0x4A
	private static readonly object[] encodings; // 0x50
	internal string body_name; // 0x28
	internal string encoding_name; // 0x38
	internal string header_name; // 0x48
	internal bool is_mail_news_display; // 0x58
	internal bool is_mail_news_save; // 0x68
	internal bool is_browser_save; // 0x78
	internal bool is_browser_display; // 0x20
	internal string web_name; // 0x10
	private static Encoding asciiEncoding; // 0x10
	private static Encoding bigEndianEncoding; // 0x18
	private static Encoding defaultEncoding; // 0x28
	private static Encoding utf7Encoding; // 0x10
	private static Encoding utf8EncodingWithMarkers; // 0x10
	private static Encoding utf8EncodingWithoutMarkers; // 0x10
	private static Encoding unicodeEncoding; // 0x00
	private static Encoding isoLatin1Encoding; // 0x00
	private static Encoding utf8EncodingUnsafe; // 0x00
	private static Encoding utf32Encoding; // 0x18
	private static Encoding bigEndianUTF32Encoding; // 0x28
	private static readonly object lockobj; // 0x10

	// Properties
	public bool IsReadOnly { get; } // 0x00000001801249E0 
	public virtual bool IsSingleByte { get; } // 0x000000018011A0F0 
	public DecoderFallback DecoderFallback { get; set; } // 0x00000001800EAEB0 0x00000001803B16D0
	public EncoderFallback EncoderFallback { get; set; } // 0x000000018013BF80 0x00000001803B1780
	public virtual string BodyName { get; } // 0x00000001801146E0 
	public virtual int CodePage { get; } // 0x00000001800ECD10 
	public virtual string EncodingName { get; } // 0x0000000180119440 
	public virtual string HeaderName { get; } // 0x0000000180114BB0 
	public virtual bool IsBrowserDisplay { get; } // 0x00000001803B09B0 
	public virtual bool IsBrowserSave { get; } // 0x00000001803B09C0 
	public virtual bool IsMailNewsDisplay { get; } // 0x00000001801D8540 
	public virtual bool IsMailNewsSave { get; } // 0x00000001803B09D0 
	public virtual string WebName { get; } // 0x00000001801513A0 
	public virtual int WindowsCodePage { get; } // 0x0000000180156360 
	public static Encoding ASCII { get; } // 0x00000001803AFDD0 
	public static Encoding BigEndianUnicode { get; } // 0x00000001803B0210 
	public static Encoding Default { get; } // 0x00000001803B0400 
	private static Encoding ISOLatin1 { get; } // 0x00000001803B0780 
	public static Encoding UTF7 { get; } // 0x00000001803B0BD0 
	public static Encoding UTF8 { get; } // 0x00000001803B12F0 
	internal static Encoding UTF8Unmarked { get; } // 0x00000001803B1100 
	internal static Encoding UTF8UnmarkedUnsafe { get; } // 0x00000001803B0E30 
	public static Encoding Unicode { get; } // 0x00000001803B14E0 
	public static Encoding UTF32 { get; } // 0x00000001803B09E0 
	internal static Encoding BigEndianUTF32 { get; } // 0x00000001803B0020 

	// Constructors
	protected Encoding(); // 0x00000001803AFDC0
	protected Encoding(int codePage); // 0x00000001803AFC00
	private static Encoding(); // 0x00000001803AEAA0

	// Methods
	internal static string _(string arg); // 0x0000000180123590
	internal void SetFallbackInternal(EncoderFallback e, DecoderFallback d); // 0x00000001803AEA80
	public static byte[] Convert(Encoding srcEncoding, Encoding dstEncoding, byte[] bytes); // 0x00000001803ABFF0
	public static byte[] Convert(Encoding srcEncoding, Encoding dstEncoding, byte[] bytes, int index, int count); // 0x00000001803AC120
	public override bool Equals(object value); // 0x00000001803AC350
	public abstract int GetByteCount(char[] chars, int index, int count);
	public virtual int GetByteCount(string s); // 0x00000001803AC4E0
	public virtual int GetByteCount(char[] chars); // 0x00000001803AC440
	public abstract int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
	public virtual int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x00000001803AC780
	public virtual byte[] GetBytes(string s); // 0x00000001803AC9F0
	public virtual byte[] GetBytes(char[] chars, int index, int count); // 0x00000001803ACDA0
	public virtual byte[] GetBytes(char[] chars); // 0x00000001803AC6C0
	public abstract int GetCharCount(byte[] bytes, int index, int count);
	public virtual int GetCharCount(byte[] bytes); // 0x00000001803ACE70
	public abstract int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
	public virtual char[] GetChars(byte[] bytes, int index, int count); // 0x00000001803AD380
	public virtual char[] GetChars(byte[] bytes); // 0x00000001803AD2A0
	public virtual Decoder GetDecoder(); // 0x00000001803A8960
	public virtual Encoder GetEncoder(); // 0x00000001803AD450
	private static object InvokeI18N(string name, object[] args); // 0x00000001803AE4A0
	public static Encoding GetEncoding(int codepage); // 0x00000001803AD990
	public virtual object Clone(); // 0x00000001803ABF60
	public static Encoding GetEncoding(int codepage, EncoderFallback encoderFallback, DecoderFallback decoderFallback); // 0x00000001803ADFA0
	public static Encoding GetEncoding(string name, EncoderFallback encoderFallback, DecoderFallback decoderFallback); // 0x00000001803ADE40
	public static EncodingInfo[] GetEncodings(); // 0x00000001803AE100
	public bool IsAlwaysNormalized(); // 0x00000001803AE9C0
	public virtual bool IsAlwaysNormalized(NormalizationForm form); // 0x00000001803AE9E0
	public static Encoding GetEncoding(string name); // 0x00000001803AD4E0
	public override int GetHashCode(); // 0x00000001803AE310
	public abstract int GetMaxByteCount(int charCount);
	public abstract int GetMaxCharCount(int byteCount);
	public virtual byte[] GetPreamble(); // 0x00000001803AE380
	public virtual string GetString(byte[] bytes, int index, int count); // 0x00000001803AE460
	public virtual string GetString(byte[] bytes); // 0x00000001803AE3C0
	internal static string InternalCodePage(int code_page); // 0x00000001803AE490
	public virtual int GetByteCount(void * chars, int count); // 0x00000001803AC590
	public virtual int GetCharCount(void * bytes, int count); // 0x00000001803ACF10
	public virtual int GetChars(void * bytes, int byteCount, void * chars, int charCount); // 0x00000001803AD040
	public virtual int GetBytes(void * chars, int charCount, void * bytes, int byteCount); // 0x00000001803ACB40
}

// Namespace: 
private sealed class ForwardingDecoder : Decoder // TypeDefIndex: 1539
{
	// Fields
	private Encoding encoding; // 0x20

	// Constructors
	public ForwardingDecoder(Encoding enc); // 0x00000001803B1890

	// Methods
	public override int GetCharCount(byte[] bytes, int index, int count); // 0x00000001803B1830
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x00000001803B1860
}

// Namespace: 
private sealed class ForwardingEncoder : Encoder // TypeDefIndex: 1540
{
	// Fields
	private Encoding encoding; // 0x20

	// Constructors
	public ForwardingEncoder(Encoding enc); // 0x00000001803B1940

	// Methods
	public override int GetByteCount(char[] chars, int index, int count, bool flush); // 0x00000001803B18E0
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteCount, bool flush); // 0x00000001803B1910
}

// Namespace: System.Text
[Serializable]
public sealed class EncodingInfo // TypeDefIndex: 1541
{
	// Fields
	private readonly int codepage; // 0x10
	private Encoding encoding; // 0x10

	// Properties
	public int CodePage { get; } // 0x00000001800ECD10 
	public string DisplayName { get; } // 0x00000001803ABED0 
	public string Name { get; } // 0x00000001803ABED0 

	// Constructors
	internal EncodingInfo(int cp); // 0x0000000180142DC0

	// Methods
	public override bool Equals(object value); // 0x00000001803ABE10
	public override int GetHashCode(); // 0x00000001800ECD10
	public Encoding GetEncoding(); // 0x00000001803ABE70
}

// Namespace: System.Text
[Serializable]
internal class Latin1Encoding : Encoding // TypeDefIndex: 1542
{
	// Fields
	internal const int ISOLATIN_CODE_PAGE = 28591; // 0x00

	// Properties
	public override bool IsSingleByte { get; } // 0x000000018010E420 
	public override string BodyName { get; } // 0x00000001803B3160 
	public override string EncodingName { get; } // 0x00000001803B3190 
	public override string HeaderName { get; } // 0x00000001803B31C0 
	public override bool IsBrowserDisplay { get; } // 0x000000018010E420 
	public override bool IsBrowserSave { get; } // 0x000000018010E420 
	public override bool IsMailNewsDisplay { get; } // 0x000000018010E420 
	public override bool IsMailNewsSave { get; } // 0x000000018010E420 
	public override string WebName { get; } // 0x00000001803B31F0 

	// Constructors
	public Latin1Encoding(); // 0x00000001803B3100

	// Methods
	public override bool IsAlwaysNormalized(NormalizationForm form); // 0x00000001803B30F0
	public override int GetByteCount(char[] chars, int index, int count); // 0x00000001803B1A20
	public override int GetByteCount(string s); // 0x00000001803B19B0
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x00000001803B27D0
	private int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, EncoderFallbackBuffer buffer, char[] fallback_chars); // 0x00000001803B1B90
	public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x00000001803B2820
	private int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex, EncoderFallbackBuffer buffer, char[] fallback_chars); // 0x00000001803B21C0
	public override int GetCharCount(byte[] bytes, int index, int count); // 0x00000001803B2870
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x00000001803B29E0
	public override int GetMaxByteCount(int charCount); // 0x00000001803B2CE0
	public override int GetMaxCharCount(int byteCount); // 0x00000001803B2D80
	public override string GetString(byte[] bytes, int index, int count); // 0x00000001803B2E20
	public override string GetString(byte[] bytes); // 0x00000001803B3050
}

// Namespace: System.Text
[Serializable]
internal sealed class MLangCodePageEncoding : ISerializable, IObjectReference // TypeDefIndex: 1543
{
	// Fields
	private int codePage; // 0x10
	private bool isReadOnly; // 0x18
	private EncoderFallback encoderFallback; // 0x28
	private DecoderFallback decoderFallback; // 0x10
	private Encoding realObject; // 0x10

	// Constructors
	private MLangCodePageEncoding(SerializationInfo info, StreamingContext context); // 0x00000001803B3390

	// Methods
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00000001803B3220
	public object GetRealObject(StreamingContext context); // 0x00000001803B3280
}

// Namespace: 
[Serializable]
private sealed class MLangEncoder : ISerializable, IObjectReference // TypeDefIndex: 1544
{
	// Fields
	private Encoding encoding; // 0x10
	private Encoder realObject; // 0x10

	// Constructors
	private MLangEncoder(SerializationInfo info, StreamingContext context); // 0x00000001803B3850

	// Methods
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00000001803B37B0
	public object GetRealObject(StreamingContext context); // 0x00000001803B3810
}

// Namespace: 
[Serializable]
private sealed class MLangDecoder : ISerializable, IObjectReference // TypeDefIndex: 1545
{
	// Fields
	private Encoding encoding; // 0x10
	private Decoder realObject; // 0x10

	// Constructors
	private MLangDecoder(SerializationInfo info, StreamingContext context); // 0x00000001803B3690

	// Methods
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00000001803B3630
	public object GetRealObject(StreamingContext context); // 0x00000001803AA7F0
}

// Namespace: System.Text
public enum NormalizationForm // TypeDefIndex: 1546
{
	FormC = 1,
	FormD = 2,
	FormKC = 5,
	FormKD = 6
}

// Namespace: System.Text
[Serializable]
public sealed class StringBuilder : ISerializable // TypeDefIndex: 1547
{
	// Fields
	private const int constDefaultCapacity = 16; // 0x00
	private int _length; // 0x18
	private string _str; // 0x28
	private string _cached_str; // 0x10
	private int _maxCapacity; // 0x00

	// Properties
	public int MaxCapacity { get; } // 0x0000000180119420 
	public int Capacity { get; set; } // 0x00000001803B6380 0x00000001803B6450
	public int Length { get; set; } // 0x00000001800ECD10 0x00000001803B65C0
	public char Chars { get; set; } // 0x00000001803B63C0 0x00000001803B6510

	// Constructors
	public StringBuilder(string value, int startIndex, int length, int capacity); // 0x00000001803B5D90
	private StringBuilder(string value, int startIndex, int length, int capacity, int maxCapacity); // 0x00000001803B5DC0
	public StringBuilder(); // 0x00000001803B5B10
	public StringBuilder(int capacity); // 0x00000001803B5D00
	public StringBuilder(int capacity, int maxCapacity); // 0x00000001803B6150
	public StringBuilder(string value); // 0x00000001803B5C60
	public StringBuilder(string value, int capacity); // 0x00000001803B5BA0
	private StringBuilder(SerializationInfo info, StreamingContext context); // 0x00000001803B61F0

	// Methods
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x00000001803B58C0
	public override string ToString(); // 0x00000001803B5990
	public string ToString(int startIndex, int length); // 0x00000001803B5A50
	public int EnsureCapacity(int capacity); // 0x00000001803B4840
	public bool Equals(StringBuilder sb); // 0x00000001803B48E0
	public StringBuilder Remove(int startIndex, int length); // 0x00000001803B52B0
	public StringBuilder Replace(char oldChar, char newChar); // 0x00000001803B57B0
	public StringBuilder Replace(char oldChar, char newChar, int startIndex, int count); // 0x00000001803B5660
	public StringBuilder Replace(string oldValue, string newValue); // 0x00000001803B5780
	public StringBuilder Replace(string oldValue, string newValue, int startIndex, int count); // 0x00000001803B53D0
	public StringBuilder Append(char[] value); // 0x00000001803B41F0
	public StringBuilder Append(string value); // 0x00000001803B4080
	public StringBuilder Append(bool value); // 0x00000001803B46C0
	public StringBuilder Append(byte value); // 0x00000001803B4690
	public StringBuilder Append(Decimal value); // 0x00000001803B41C0
	public StringBuilder Append(double value); // 0x00000001803B4190
	public StringBuilder Append(short value); // 0x00000001803B3FB0
	public StringBuilder Append(int value); // 0x00000001803B44D0
	public StringBuilder Append(long value); // 0x00000001803B4050
	public StringBuilder Append(object value); // 0x00000001803B4010
	public StringBuilder Append(sbyte value); // 0x00000001803B42E0
	public StringBuilder Append(float value); // 0x00000001803B3FE0
	public StringBuilder Append(ushort value); // 0x00000001803B3F00
	public StringBuilder Append(uint value); // 0x00000001803B4470
	public StringBuilder Append(ulong value); // 0x00000001803B44A0
	public StringBuilder Append(char value); // 0x00000001803B3F30
	public StringBuilder Append(char value, int repeatCount); // 0x00000001803B3E30
	public StringBuilder Append(char[] value, int startIndex, int charCount); // 0x00000001803B4310
	public StringBuilder Append(string value, int startIndex, int count); // 0x00000001803B4500
	public StringBuilder AppendLine(); // 0x00000001803B3DC0
	public StringBuilder AppendLine(string value); // 0x00000001803B3DF0
	public StringBuilder AppendFormat(string format, object[] args); // 0x00000001803B3DA0
	public StringBuilder AppendFormat(IFormatProvider provider, string format, object[] args); // 0x00000001803B3A40
	public StringBuilder AppendFormat(string format, object arg0); // 0x00000001803B3970
	public StringBuilder AppendFormat(string format, object arg0, object arg1); // 0x00000001803B3C70
	public StringBuilder AppendFormat(string format, object arg0, object arg1, object arg2); // 0x00000001803B3AD0
	public StringBuilder Insert(int index, char[] value); // 0x00000001803B4D20
	public StringBuilder Insert(int index, string value); // 0x00000001803B4ED0
	public StringBuilder Insert(int index, bool value); // 0x00000001803B5080
	public StringBuilder Insert(int index, byte value); // 0x00000001803B5040
	public StringBuilder Insert(int index, char value); // 0x00000001803B4A70
	public StringBuilder Insert(int index, Decimal value); // 0x00000001803B4D60
	public StringBuilder Insert(int index, double value); // 0x00000001803B4970
	public StringBuilder Insert(int index, short value); // 0x00000001803B5000
	public StringBuilder Insert(int index, int value); // 0x00000001803B4DA0
	public StringBuilder Insert(int index, long value); // 0x00000001803B50C0
	public StringBuilder Insert(int index, object value); // 0x00000001803B5100
	public StringBuilder Insert(int index, sbyte value); // 0x00000001803B49F0
	public StringBuilder Insert(int index, float value); // 0x00000001803B4B90
	public StringBuilder Insert(int index, ushort value); // 0x00000001803B49B0
	public StringBuilder Insert(int index, uint value); // 0x00000001803B4CE0
	public StringBuilder Insert(int index, ulong value); // 0x00000001803B4A30
	public StringBuilder Insert(int index, string value, int count); // 0x00000001803B4DE0
	public StringBuilder Insert(int index, char[] value, int startIndex, int charCount); // 0x00000001803B4BD0
	private void InternalEnsureCapacity(int size); // 0x00000001803B5150
	public void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count); // 0x00000001803B46F0
}

// Namespace: System.Text
[Serializable]
internal sealed class SurrogateEncoder : ISerializable, IObjectReference // TypeDefIndex: 1548
{
	// Fields
	private Encoding encoding; // 0x10
	private Encoder realObject; // 0x00

	// Constructors
	private SurrogateEncoder(SerializationInfo info, StreamingContext context); // 0x00000001803B6F00

	// Methods
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00000001803B6EA0
	public object GetRealObject(StreamingContext context); // 0x00000001803B3810
}

// Namespace: System.Text
[Serializable]
public sealed class UTF32Encoding : Encoding // TypeDefIndex: 1549
{
	// Fields
	internal const int UTF32_CODE_PAGE = 12000; // 0x00
	internal const int BIG_UTF32_CODE_PAGE = 12001; // 0x58
	private bool bigEndian; // 0x20
	private bool byteOrderMark; // 0x28

	// Constructors
	public UTF32Encoding(); // 0x00000001803B9030
	public UTF32Encoding(bool bigEndian, bool byteOrderMark); // 0x00000001803B9010
	public UTF32Encoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters); // 0x00000001803B8DA0

	// Methods
	public override int GetByteCount(char[] chars, int index, int count); // 0x00000001803B7B30
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x00000001803B7D80
	public override int GetCharCount(byte[] bytes, int index, int count); // 0x00000001803B8490
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x00000001803B8610
	public override int GetMaxByteCount(int charCount); // 0x00000001803B8B60
	public override int GetMaxCharCount(int byteCount); // 0x00000001803B8C10
	public override Decoder GetDecoder(); // 0x00000001803B8A80
	public override byte[] GetPreamble(); // 0x00000001803B8CC0
	public override bool Equals(object value); // 0x00000001803B7940
	public override int GetHashCode(); // 0x00000001803B8AE0
	public override int GetByteCount(void * chars, int count); // 0x00000001803B7AB0
	public override int GetByteCount(string s); // 0x00000001803B7AA0
	public override int GetBytes(void * chars, int charCount, void * bytes, int byteCount); // 0x00000001803B8470
	public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x00000001803B8460
	public override int GetCharCount(void * bytes, int count); // 0x00000001803B8480
	public override int GetChars(void * bytes, int byteCount, void * chars, int charCount); // 0x00000001803B8600
	public override string GetString(byte[] bytes, int index, int count); // 0x00000001803AE460
	public override Encoder GetEncoder(); // 0x00000001803A89E0
}

// Namespace: 
private sealed class UTF32Decoder : Decoder // TypeDefIndex: 1550
{
	// Fields
	private bool bigEndian; // 0x20
	private int leftOverByte; // 0x28
	private int leftOverLength; // 0x00

	// Constructors
	public UTF32Decoder(bool bigEndian); // 0x00000001803B7910

	// Methods
	public override int GetCharCount(byte[] bytes, int index, int count); // 0x00000001803B70B0
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x00000001803B7240
}

// Namespace: System.Text
[Serializable]
public class UTF7Encoding : Encoding // TypeDefIndex: 1551
{
	// Fields
	internal const int UTF7_CODE_PAGE = 65000; // 0x00
	private const string base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"; // 0x58
	private bool allowOptionals; // 0x08
	private static readonly byte[] encodingRules; // 0x20
	private static readonly sbyte[] base64Values; // 0x28

	// Constructors
	public UTF7Encoding(); // 0x00000001803BB590
	public UTF7Encoding(bool allowOptionals); // 0x00000001803BB4E0
	private static UTF7Encoding(); // 0x00000001803BB440

	// Methods
	public override int GetHashCode(); // 0x00000001803B9920
	public override bool Equals(object value); // 0x00000001803B9350
	private static int InternalGetByteCount(char[] chars, int index, int count, bool flush, int leftOver, bool isInShifted, bool allowOptionals); // 0x00000001803B9B00
	public override int GetByteCount(char[] chars, int index, int count); // 0x00000001803B9440
	private static int InternalGetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush, int leftOver, bool isInShifted, bool allowOptionals); // 0x00000001803B9E10
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x00000001803B9610
	private static int InternalGetCharCount(byte[] bytes, int index, int count, int leftOver); // 0x00000001803BA8D0
	public override int GetCharCount(byte[] bytes, int index, int count); // 0x00000001803B96E0
	private static int InternalGetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, int leftOver); // 0x00000001803BABA0
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x00000001803B9760
	public override int GetMaxByteCount(int charCount); // 0x00000001803B99A0
	public override int GetMaxCharCount(int byteCount); // 0x00000001803B9A60
	public override Decoder GetDecoder(); // 0x00000001803B9870
	public override Encoder GetEncoder(); // 0x00000001803B98C0
	public override int GetByteCount(void * chars, int count); // 0x00000001803B94E0
	public override int GetByteCount(string s); // 0x00000001803B7AA0
	public override int GetBytes(void * chars, int charCount, void * bytes, int byteCount); // 0x00000001803B8470
	public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x00000001803B8460
	public override int GetCharCount(void * bytes, int count); // 0x00000001803B8480
	public override int GetChars(void * bytes, int byteCount, void * chars, int charCount); // 0x00000001803B8600
	public override string GetString(byte[] bytes, int index, int count); // 0x00000001803AE460
}

// Namespace: 
private sealed class UTF7Decoder : Decoder // TypeDefIndex: 1552
{
	// Fields
	private int leftOver; // 0x20

	// Constructors
	public UTF7Decoder(); // 0x00000001803B9180

	// Methods
	public override int GetCharCount(byte[] bytes, int index, int count); // 0x00000001803B9050
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x00000001803B90E0
}

// Namespace: 
private sealed class UTF7Encoder : Encoder // TypeDefIndex: 1553
{
	// Fields
	private bool allowOptionals; // 0x20
	private int leftOver; // 0x28
	private bool isInShifted; // 0x00

	// Constructors
	public UTF7Encoder(bool allowOptionals); // 0x00000001803B9320

	// Methods
	public override int GetByteCount(char[] chars, int index, int count, bool flush); // 0x00000001803B91A0
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush); // 0x00000001803B9250
}

// Namespace: System.Text
[Serializable]
public class UTF8Encoding : Encoding // TypeDefIndex: 1554
{
	// Fields
	internal const int UTF8_CODE_PAGE = 65001; // 0x00
	private bool emitIdentifier; // 0x20

	// Constructors
	public UTF8Encoding(); // 0x00000001803BDF80
	public UTF8Encoding(bool encoderShouldEmitUTF8Identifier); // 0x00000001803BE150
	public UTF8Encoding(bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes); // 0x00000001803BDF90

	// Methods
	private static int InternalGetByteCount(char[] chars, int index, int count, char leftOver, bool flush); // 0x00000001803BC9B0
	private static int InternalGetByteCount(void * chars, int count, char leftOver, bool flush); // 0x00000001803BC840
	public override int GetByteCount(char[] chars, int index, int count); // 0x00000001803BBED0
	public override int GetByteCount(void * chars, int count); // 0x00000001803BBE30
	private static int InternalGetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, char leftOver, bool flush); // 0x00000001803BCB80
	private static int InternalGetBytes(void * chars, int count, void * bytes, int bcount, char leftOver, bool flush); // 0x00000001803BCE60
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x00000001803BC360
	public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x00000001803BC090
	public override int GetBytes(void * chars, int charCount, void * bytes, int byteCount); // 0x00000001803BBF10
	private static int InternalGetCharCount(byte[] bytes, int index, int count, uint leftOverBits, uint leftOverCount, object provider, DecoderFallbackBuffer fallbackBuffer, byte[] bufferArg, bool flush); // 0x00000001803BD470
	private static int InternalGetCharCount(void * bytes, int count, uint leftOverBits, uint leftOverCount, object provider, DecoderFallbackBuffer fallbackBuffer, byte[] bufferArg, bool flush); // 0x00000001803BD120
	private static int Fallback(object provider, DecoderFallbackBuffer buffer, byte[] bufferArg, void * bytes, long index, uint size); // 0x00000001803BB960
	private static void Fallback(object provider, DecoderFallbackBuffer buffer, byte[] bufferArg, void * bytes, long byteIndex, uint size, void * chars, int charIndex); // 0x00000001803BBBA0
	public override int GetCharCount(byte[] bytes, int index, int count); // 0x00000001803BC410
	public override int GetCharCount(void * bytes, int count); // 0x00000001803BC3B0
	private static int InternalGetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, uint leftOverBits, uint leftOverCount, object provider, DecoderFallbackBuffer fallbackBuffer, byte[] bufferArg, bool flush); // 0x00000001803BD660
	private static int InternalGetChars(void * bytes, int byteCount, void * chars, int charCount, uint leftOverBits, uint leftOverCount, object provider, DecoderFallbackBuffer fallbackBuffer, byte[] bufferArg, bool flush); // 0x00000001803BD9A0
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x00000001803BC4F0
	public override int GetChars(void * bytes, int byteCount, void * chars, int charCount); // 0x00000001803BC470
	public override int GetMaxByteCount(int charCount); // 0x00000001803BC640
	public override int GetMaxCharCount(int byteCount); // 0x00000001803BC6F0
	public override Decoder GetDecoder(); // 0x00000001803BC580
	public override Encoder GetEncoder(); // 0x00000001803BC5F0
	public override byte[] GetPreamble(); // 0x00000001803BC790
	public override bool Equals(object value); // 0x00000001803BB860
	public override int GetHashCode(); // 0x00000001803AE310
	public override int GetByteCount(string chars); // 0x00000001803B7AA0
	public override string GetString(byte[] bytes, int index, int count); // 0x00000001803AE460
}

// Namespace: 
[Serializable]
private class UTF8Decoder : Decoder // TypeDefIndex: 1555
{
	// Fields
	private uint leftOverBits; // 0x20
	private uint leftOverCount; // 0x20

	// Constructors
	public UTF8Decoder(DecoderFallback fallback); // 0x00000001803BB720

	// Methods
	public override int GetCharCount(byte[] bytes, int index, int count); // 0x00000001803BB630
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x00000001803BB690
}

// Namespace: 
[Serializable]
private class UTF8Encoder : Encoder // TypeDefIndex: 1556
{
	// Fields
	private char leftOverForCount; // 0x20
	private char leftOverForConv; // 0x00

	// Constructors
	public UTF8Encoder(bool emitIdentifier); // 0x00000001803BB840

	// Methods
	public override int GetByteCount(char[] chars, int index, int count, bool flush); // 0x00000001803BB780
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush); // 0x00000001803BB7F0
	public override int GetByteCount(void * chars, int count, bool flush); // 0x00000001803BB760
	public override int GetBytes(void * chars, int charCount, void * bytes, int byteCount, bool flush); // 0x00000001803BB7B0
}

// Namespace: System.Text
[Serializable]
public class UnicodeEncoding : Encoding // TypeDefIndex: 1557
{
	// Fields
	internal const int UNICODE_CODE_PAGE = 1200; // 0x00
	internal const int BIG_UNICODE_CODE_PAGE = 1201; // 0x00
	public const int CharSize = 2; // 0x59
	private bool bigEndian; // 0x20
	private bool byteOrderMark; // 0x60

	// Constructors
	public UnicodeEncoding(); // 0x00000001803C0050
	public UnicodeEncoding(bool bigEndian, bool byteOrderMark); // 0x00000001803C0240
	public UnicodeEncoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes); // 0x00000001803C0080

	// Methods
	public override int GetByteCount(char[] chars, int index, int count); // 0x00000001803BEB20
	public override int GetByteCount(string s); // 0x00000001803BEAB0
	public override int GetByteCount(void * chars, int count); // 0x00000001803BEA00
	public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x00000001803BF190
	public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex); // 0x00000001803BED70
	public override int GetBytes(void * chars, int charCount, void * bytes, int byteCount); // 0x00000001803BF030
	private int GetBytesInternal(void * chars, int charCount, void * bytes, int byteCount); // 0x00000001803BEC90
	public override int GetCharCount(byte[] bytes, int index, int count); // 0x00000001803BF450
	public override int GetCharCount(void * bytes, int count); // 0x00000001803BF5C0
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x00000001803BF8C0
	public override int GetChars(void * bytes, int byteCount, void * chars, int charCount); // 0x00000001803BF760
	public override string GetString(byte[] bytes, int index, int count); // 0x00000001803BFE10
	private int GetCharsInternal(void * bytes, int byteCount, void * chars, int charCount); // 0x00000001803BF670
	public override Encoder GetEncoder(); // 0x00000001803A89E0
	public override int GetMaxByteCount(int charCount); // 0x00000001803BFBE0
	public override int GetMaxCharCount(int byteCount); // 0x00000001803BFC80
	public override Decoder GetDecoder(); // 0x00000001803BFB80
	public override byte[] GetPreamble(); // 0x00000001803BFD30
	public override bool Equals(object value); // 0x00000001803BE950
	public override int GetHashCode(); // 0x00000001803AE310
	private static void CopyChars(void * src, void * dest, int count, bool bigEndian); // 0x00000001803BE700
}

// Namespace: 
private sealed class UnicodeDecoder : Decoder // TypeDefIndex: 1558
{
	// Fields
	private bool bigEndian; // 0x20
	private int leftOverByte; // 0x60

	// Constructors
	public UnicodeDecoder(bool bigEndian); // 0x00000001803B7910

	// Methods
	public override int GetCharCount(byte[] bytes, int index, int count); // 0x00000001803BE160
	public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex); // 0x00000001803BE2F0
}

// Namespace: System.Threading
[Serializable]
public class AbandonedMutexException : SystemException // TypeDefIndex: 1559
{
	// Fields
	private Mutex mutex; // 0x60
	private int mutex_index; // 0x10

	// Properties
	public Mutex Mutex { get; } // 0x0000000180114BE0 
	public int MutexIndex { get; } // 0x0000000180114BC0 

	// Constructors
	public AbandonedMutexException(); // 0x00000001803A8FD0
	public AbandonedMutexException(string message); // 0x00000001803A9020
	public AbandonedMutexException(int location, WaitHandle handle); // 0x00000001803A8F50
	protected AbandonedMutexException(SerializationInfo info, StreamingContext context); // 0x00000001803A8E00
	public AbandonedMutexException(string message, Exception inner); // 0x00000001803A9050
	public AbandonedMutexException(string message, int location, WaitHandle handle); // 0x00000001803A8E30
	public AbandonedMutexException(string message, Exception inner, int location, WaitHandle handle); // 0x00000001803A8EC0

}

// Namespace: System.Threading
[Serializable]
public enum ApartmentState // TypeDefIndex: 1560
{
	STA = 0,
	MTA = 1,
	Unknown = 2
}

// Namespace: System.Threading
internal enum AsyncFlowControlType // TypeDefIndex: 1561
{
	None = 0,
	Execution = 1,
	Security = 2
}

// Namespace: System.Threading
public struct AsyncFlowControl : IDisposable // TypeDefIndex: 1562
{
	// Fields
	private Thread _t; // 0x10
	private AsyncFlowControlType _type; // 0x10

	// Constructors
	internal AsyncFlowControl(Thread t, AsyncFlowControlType type); // 0x0000000180019CD0

	// Methods
	private void System.IDisposable.Dispose(); // 0x000000018001B1D0
	public void Undo(); // 0x000000018001B200
	public override int GetHashCode(); // 0x000000018001B170
	public override bool Equals(object obj); // 0x000000018001B0B0
	public bool Equals(AsyncFlowControl obj); // 0x000000018001B140
	public static bool op_Equality(AsyncFlowControl a, AsyncFlowControl b); // 0x00000001802DC6F0
	public static bool op_Inequality(AsyncFlowControl a, AsyncFlowControl b); // 0x00000001802DC720
}

// Namespace: System.Threading
public sealed class AutoResetEvent : EventWaitHandle // TypeDefIndex: 1563
{
	// Constructors
	public AutoResetEvent(bool initialState); // 0x00000001802DC750

}

// Namespace: System.Threading
[Serializable]
public sealed class CompressedStack : ISerializable // TypeDefIndex: 1564
{
	// Fields
	private ArrayList _list; // 0x10

	// Properties
	internal IList List { get; } // 0x00000001800E20D0 

	// Constructors
	internal CompressedStack(int length); // 0x00000001802DD0D0
	internal CompressedStack(CompressedStack cs); // 0x00000001802DD140

	// Methods
	public CompressedStack CreateCopy(); // 0x00000001802DC980
	public static CompressedStack Capture(); // 0x00000001802DC800
	public static CompressedStack GetCompressedStack(); // 0x00000001802DCCF0
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00000001802DCE50
	public static void Run(CompressedStack compressedStack, ContextCallback callback, object state); // 0x00000001802DCF00
	internal bool Equals(CompressedStack cs); // 0x00000001802DCA70
	internal bool IsEmpty(); // 0x00000001802DCEC0
}

// Namespace: System.Threading
public enum EventResetMode // TypeDefIndex: 1565
{
	AutoReset = 0,
	ManualReset = 1
}

// Namespace: System.Threading
public class EventWaitHandle : WaitHandle // TypeDefIndex: 1566
{
	// Constructors
	private EventWaitHandle(IntPtr handle); // 0x00000001802DD6A0
	public EventWaitHandle(bool initialState, EventResetMode mode); // 0x00000001802DD4B0
	public EventWaitHandle(bool initialState, EventResetMode mode, string name); // 0x00000001802DD720
	public EventWaitHandle(bool initialState, EventResetMode mode, string name, out bool createdNew); // 0x00000001802DD5A0

	// Methods
	private bool IsManualReset(EventResetMode mode); // 0x00000001802DD3E0
	public bool Reset(); // 0x00000001802DD450
	public bool Set(); // 0x00000001802DD480
}

// Namespace: System.Threading
[Serializable]
public sealed class ExecutionContext : ISerializable // TypeDefIndex: 1567
{
	// Fields
	private SecurityContext _sc; // 0x10
	private bool _suppressFlow; // 0x19
	private bool _capture; // 0x10

	// Properties
	internal SecurityContext SecurityContext { get; set; } // 0x00000001802DDF30 0x0000000180114C30
	internal bool FlowSuppressed { get; set; } // 0x00000001801249E0 0x00000001801AB4A0

	// Constructors
	internal ExecutionContext(); // 0x00000001800E2000
	internal ExecutionContext(ExecutionContext ec); // 0x00000001802DDE90
	internal ExecutionContext(SerializationInfo info, StreamingContext context); // 0x00000001802DDE30

	// Methods
	public static ExecutionContext Capture(); // 0x00000001802DD820
	public ExecutionContext CreateCopy(); // 0x00000001802DD9B0
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00000001802DDA40
	public static bool IsFlowSuppressed(); // 0x00000001802DDAD0
	public static void RestoreFlow(); // 0x00000001802DDB80
	public static void Run(ExecutionContext executionContext, ContextCallback callback, object state); // 0x00000001802DDC70
	public static AsyncFlowControl SuppressFlow(); // 0x00000001802DDD60
}

// Namespace: System.Threading
public class HostExecutionContext // TypeDefIndex: 1568
{
	// Fields
	private object _state; // 0x10

	// Properties
	protected internal object State { get; set; } // 0x00000001800E20D0 0x0000000180114C30

	// Constructors
	public HostExecutionContext(); // 0x00000001802DE0E0
	public HostExecutionContext(object state); // 0x000000018015C840

	// Methods
	public virtual HostExecutionContext CreateCopy(); // 0x00000001802DE080
}

// Namespace: System.Threading
public class HostExecutionContextManager // TypeDefIndex: 1569
{
	// Constructors
	public HostExecutionContextManager(); // 0x00000001800E2000

	// Methods
	public virtual HostExecutionContext Capture(); // 0x00000001802DDF90
	public virtual void Revert(object previousState); // 0x00000001802DDFE0
	public virtual object SetHostExecutionContext(HostExecutionContext hostExecutionContext); // 0x00000001802DE030
}

// Namespace: System.Threading
public static class Interlocked // TypeDefIndex: 1570
{
	// Methods
	public static int CompareExchange(int location1, int value, int comparand); // 0x00000001802DE450
	public static object CompareExchange(object location1, object value, object comparand); // 0x00000001802DE420
	public static float CompareExchange(float location1, float value, float comparand); // 0x00000001802DE440
	public static int Decrement(int location); // 0x00000001802DE460
	public static long Decrement(long location); // 0x00000001802DE470
	public static int Increment(int location); // 0x00000001802DE4D0
	public static long Increment(long location); // 0x00000001802DE4C0
	public static int Exchange(int location1, int value); // 0x00000001802DE480
	public static object Exchange(object location1, object value); // 0x00000001802DE4A0
	public static float Exchange(float location1, float value); // 0x00000001802DE4B0
	public static long CompareExchange(long location1, long value, long comparand); // 0x00000001802DE420
	public static IntPtr CompareExchange(IntPtr location1, IntPtr value, IntPtr comparand); // 0x00000001802DE420
	public static double CompareExchange(double location1, double value, double comparand); // 0x00000001802DE430
	public static T CompareExchange(T location1, T value, T comparand);
	public static long Exchange(long location1, long value); // 0x00000001802DE4A0
	public static IntPtr Exchange(IntPtr location1, IntPtr value); // 0x00000001802DE4A0
	public static double Exchange(double location1, double value); // 0x00000001802DE490
	public static T Exchange(T location1, T value);
	public static long Read(long location); // 0x00000001802DE4E0
	public static int Add(int location1, int value); // 0x00000001802DE400
	public static long Add(long location1, long value); // 0x00000001802DE410
}

// Namespace: System.Threading
public struct LockCookie // TypeDefIndex: 1571
{
	// Fields
	internal int ThreadId; // 0x10
	internal int ReaderLocks; // 0x18
	internal int WriterLocks; // 0x10

	// Constructors
	internal LockCookie(int thread_id); // 0x000000018001B3A0
	internal LockCookie(int thread_id, int reader_locks, int writer_locks); // 0x000000018001B390

	// Methods
	public override int GetHashCode(); // 0x000000018001B320
	public bool Equals(LockCookie obj); // 0x000000018001B250
	public override bool Equals(object obj); // 0x000000018001B290
	public static bool op_Equality(LockCookie a, LockCookie b); // 0x00000001802DE4F0
	public static bool op_Inequality(LockCookie a, LockCookie b); // 0x00000001802DE530
}

// Namespace: System.Threading
internal class LockQueue // TypeDefIndex: 1572
{
	// Fields
	private ReaderWriterLock rwlock; // 0x10
	private int lockCount; // 0x10

	// Properties
	public bool IsEmpty { get; } // 0x00000001802DE7E0 

	// Constructors
	public LockQueue(ReaderWriterLock rwlock); // 0x000000018015C840

	// Methods
	public bool Wait(int timeout); // 0x00000001802DE6B0
	public void Pulse(); // 0x00000001802DE610
	public void PulseAll(); // 0x00000001802DE570
}

// Namespace: System.Threading
public sealed class ManualResetEvent : EventWaitHandle // TypeDefIndex: 1573
{
	// Constructors
	public ManualResetEvent(bool initialState); // 0x00000001802DE870

}

// Namespace: System.Threading
public static class Monitor // TypeDefIndex: 1574
{
	// Methods
	private static bool Monitor_try_enter(object obj, int ms); // 0x00000001802DE970
	public static void Enter(object obj); // 0x00000001802DE920
	public static void Exit(object obj); // 0x00000001802DE930
	private static void Monitor_pulse(object obj); // 0x00000001802DE950
	private static bool Monitor_test_synchronised(object obj); // 0x00000001802DE960
	public static void Pulse(object obj); // 0x00000001802DEA40
	private static void Monitor_pulse_all(object obj); // 0x00000001802DE940
	public static void PulseAll(object obj); // 0x00000001802DE990
	public static bool TryEnter(object obj); // 0x00000001802DEC60
	public static bool TryEnter(object obj, int millisecondsTimeout); // 0x00000001802DEB90
	public static bool TryEnter(object obj, TimeSpan timeout); // 0x00000001802DEAF0
	private static bool Monitor_wait(object obj, int ms); // 0x00000001802DE980
	public static bool Wait(object obj); // 0x00000001802DF0A0
	public static bool Wait(object obj, int millisecondsTimeout); // 0x00000001802DEE20
	public static bool Wait(object obj, TimeSpan timeout); // 0x00000001802DEF20
	public static bool Wait(object obj, int millisecondsTimeout, bool exitContext); // 0x00000001802DEFC0
	public static bool Wait(object obj, TimeSpan timeout, bool exitContext); // 0x00000001802DECD0
}

// Namespace: System.Threading
public sealed class Mutex : WaitHandle // TypeDefIndex: 1575
{
	// Constructors
	public Mutex(); // 0x00000001802DF290
	public Mutex(bool initiallyOwned); // 0x00000001802DF310
	public Mutex(bool initiallyOwned, string name); // 0x00000001802DF1F0
	public Mutex(bool initiallyOwned, string name, out bool createdNew); // 0x00000001802DF150

	// Methods
	private static IntPtr CreateMutex_internal(bool initiallyOwned, string name, out bool created); // 0x00000001802DF0B0
	private static bool ReleaseMutex_internal(IntPtr handle); // 0x00000001802DF0C0
	public void ReleaseMutex(); // 0x00000001802DF0D0
}

// Namespace: System.Threading
internal sealed class NativeEventCalls // TypeDefIndex: 1576
{
	// Constructors
	public NativeEventCalls(); // 0x00000001800E2000

	// Methods
	public static IntPtr CreateEvent_internal(bool manual, bool initial, string name, out bool created); // 0x00000001802DF3B0
	public static bool SetEvent_internal(IntPtr handle); // 0x00000001802DF3D0
	public static bool ResetEvent_internal(IntPtr handle); // 0x00000001802DF3C0
	public static void CloseEvent_internal(IntPtr handle); // 0x00000001802DF3A0
}

// Namespace: System.Threading
public struct NativeOverlapped // TypeDefIndex: 1577
{
	// Fields
	public IntPtr EventHandle; // 0x10
	public IntPtr InternalHigh; // 0x20
	public IntPtr InternalLow; // 0x2C
	public int OffsetHigh; // 0x34
	public int OffsetLow; // 0x10
	internal int Handle1; // 0x1C
	internal int Handle2; // 0x28

}

// Namespace: System.Threading
public class Overlapped // TypeDefIndex: 1578
{
	// Fields
	private IAsyncResult ares; // 0x10
	private int offsetL; // 0x1C
	private int offsetH; // 0x28
	private int evt; // 0x10
	private IntPtr evt_ptr; // 0x18

	// Properties
	public IAsyncResult AsyncResult { get; set; } // 0x00000001800E20D0 0x0000000180114C30
	public int EventHandle { get; set; } // 0x00000001800E2F70 0x000000018018FC20
	public IntPtr EventHandleIntPtr { get; set; } // 0x000000018013BF80 0x000000018015B760
	public int OffsetHigh { get; set; } // 0x00000001801AE2C0 0x00000001802A41A0
	public int OffsetLow { get; set; } // 0x00000001800ED060 0x000000018019DD90

	// Constructors
	public Overlapped(); // 0x00000001800E2000
	public Overlapped(int offsetLo, int offsetHi, int hEvent, IAsyncResult ar); // 0x00000001802DF790
	public Overlapped(int offsetLo, int offsetHi, IntPtr hEvent, IAsyncResult ar); // 0x00000001802DF7E0

	// Methods
	public static void Free(void * nativeOverlappedPtr); // 0x00000001802DF3E0
	public static Overlapped Unpack(void * nativeOverlappedPtr); // 0x00000001802DF6C0
	public void * Pack(IOCompletionCallback iocb); // 0x00000001802DF5A0
	public void * Pack(IOCompletionCallback iocb, object userData); // 0x00000001802DF490
	public void * UnsafePack(IOCompletionCallback iocb); // 0x00000001802DF5A0
	public void * UnsafePack(IOCompletionCallback iocb, object userData); // 0x00000001802DF490
}

// Namespace: System.Threading
public sealed class ReaderWriterLock : CriticalFinalizerObject // TypeDefIndex: 1579
{
	// Fields
	private int seq_num; // 0x10
	private int state; // 0x18
	private int readers; // 0x28
	private LockQueue writer_queue; // 0x18
	private Hashtable reader_locks; // 0x28
	private int writer_lock_owner; // 0x38

	// Properties
	public bool IsReaderLockHeld { get; } // 0x00000001802E15D0 
	public bool IsWriterLockHeld { get; } // 0x00000001802E1700 
	public int WriterSeqNum { get; } // 0x00000001802E1800 

	// Constructors
	public ReaderWriterLock(); // 0x00000001802E1540

	// Methods
	protected override void Finalize(); // 0x00000001801EF9A0
	public void AcquireReaderLock(int millisecondsTimeout); // 0x00000001802E04F0
	private void AcquireReaderLock(int millisecondsTimeout, int initialLockCount); // 0x00000001802E0110
	public void AcquireReaderLock(TimeSpan timeout); // 0x00000001802E0500
	public void AcquireWriterLock(int millisecondsTimeout); // 0x00000001802E0530
	private void AcquireWriterLock(int millisecondsTimeout, int initialLockCount); // 0x00000001802E0570
	public void AcquireWriterLock(TimeSpan timeout); // 0x00000001802E0540
	public bool AnyWritersSince(int seqNum); // 0x00000001802E0760
	public void DowngradeFromWriterLock(LockCookie lockCookie); // 0x00000001802E0870
	public LockCookie ReleaseLock(); // 0x00000001802E0C20
	public void ReleaseReaderLock(); // 0x00000001802E0D60
	private void ReleaseReaderLock(int currentCount, int releaseCount); // 0x00000001802E0F60
	public void ReleaseWriterLock(); // 0x00000001802E1120
	private void ReleaseWriterLock(int releaseCount); // 0x00000001802E10C0
	public void RestoreLock(LockCookie lockCookie); // 0x00000001802E12A0
	public LockCookie UpgradeToWriterLock(int millisecondsTimeout); // 0x00000001802E13B0
	public LockCookie UpgradeToWriterLock(TimeSpan timeout); // 0x00000001802E1360
	private LockCookie GetLockCookie(); // 0x00000001802E0A50
	private bool HasWriterLock(); // 0x00000001802E0BB0
	private int CheckTimeout(TimeSpan timeout); // 0x00000001802E07F0
}

// Namespace: System.Threading
public sealed class RegisteredWaitHandle : MarshalByRefObject // TypeDefIndex: 1580
{
	// Fields
	private WaitHandle _waitObject; // 0x18
	private WaitOrTimerCallback _callback; // 0x28
	private TimeSpan _timeout; // 0x38
	private object _state; // 0x48
	private bool _executeOnlyOnce; // 0x54
	private WaitHandle _finalEvent; // 0x10
	private ManualResetEvent _cancelEvent; // 0x00
	private int _callsInProcess; // 0x10
	private bool _unregistered; // 0x20

	// Constructors
	internal RegisteredWaitHandle(WaitHandle waitObject, WaitOrTimerCallback callback, object state, TimeSpan timeout, bool executeOnlyOnce); // 0x00000001802E1DA0

	// Methods
	internal void Wait(object state); // 0x00000001802E1AE0
	private void DoCallBack(object timedOut); // 0x00000001802E1880
	public bool Unregister(WaitHandle waitObject); // 0x00000001802E19D0
}

// Namespace: System.Threading
public class SynchronizationContext // TypeDefIndex: 1581
{
	// Fields
	private bool notification_required; // 0x10
	private static SynchronizationContext currentContext; // 0x00

	// Properties
	public static SynchronizationContext Current { get; } // 0x00000001802E2EC0 

	// Constructors
	public SynchronizationContext(); // 0x00000001800E2000
	internal SynchronizationContext(SynchronizationContext context); // 0x00000001802E2E70

	// Methods
	public virtual SynchronizationContext CreateCopy(); // 0x00000001802E2C00
	public bool IsWaitNotificationRequired(); // 0x0000000180113840
	public virtual void OperationCompleted(); // 0x00000001800EA7B0
	public virtual void OperationStarted(); // 0x00000001800EA7B0
	public virtual void Post(SendOrPostCallback d, object state); // 0x00000001802E2C80
	public virtual void Send(SendOrPostCallback d, object state); // 0x00000001802E2CF0
	public static void SetSynchronizationContext(SynchronizationContext syncContext); // 0x00000001802E2D20
	public static void SetThreadStaticContext(SynchronizationContext syncContext); // 0x00000001802E2D60
	protected void SetWaitNotificationRequired(); // 0x00000001802E2DA0
	public virtual int Wait(IntPtr[] waitHandles, bool waitAll, int millisecondsTimeout); // 0x00000001802E2E50
	protected static int WaitHelper(IntPtr[] waitHandles, bool waitAll, int millisecondsTimeout); // 0x00000001802E2E00
}

// Namespace: System.Threading
[Serializable]
public class SynchronizationLockException : SystemException // TypeDefIndex: 1582
{
	// Constructors
	public SynchronizationLockException(); // 0x00000001802E2F00
	public SynchronizationLockException(string message); // 0x000000018010E1E0
	protected SynchronizationLockException(SerializationInfo info, StreamingContext context); // 0x000000018010E170
	public SynchronizationLockException(string message, Exception innerException); // 0x000000018010E1D0

}

// Namespace: System.Threading
public sealed class Thread : CriticalFinalizerObject, _Thread // TypeDefIndex: 1583
{
	// Fields
	private int lock_thread_id; // 0x10
	private IntPtr system_thread_handle; // 0x20
	private object cached_culture_info; // 0x30
	private IntPtr unused0; // 0x40
	private bool threadpool_thread; // 0x48
	private IntPtr name; // 0x58
	private int name_len; // 0x68
	private ThreadState state; // 0x78
	private object abort_exc; // 0x88
	private int abort_state_handle; // 0x98
	private long thread_id; // 0xA8
	private IntPtr start_notify; // 0xB8
	private IntPtr stack_ptr; // 0xC8
	private UIntPtr static_data; // 0xD8
	private IntPtr jit_data; // 0xE8
	private IntPtr lock_data; // 0xF0
	private object current_appcontext; // 0xF9
	private int stack_size; // 0x100
	private object start_obj; // 0x110
	private IntPtr appdomain_refs; // 0x120
	private int interruption_requested; // 0x130
	private IntPtr suspend_event; // 0x140
	private IntPtr suspended_event; // 0x80000008
	private IntPtr resume_event; // 0x150
	private IntPtr synch_cs; // 0x00
	private IntPtr serialized_culture_info; // 0x160
	private int serialized_culture_info_len; // 0x10
	private IntPtr serialized_ui_culture_info; // 0x00
	private int serialized_ui_culture_info_len; // 0x00
	private bool thread_dump_requested; // 0x10
	private IntPtr end_stack; // 0x00
	private bool thread_interrupt_requested; // 0x00
	private byte apartment_state; // 0x00
	private int critical_region_level; // 0x00
	private int small_id; // 0x00
	private IntPtr manage_callback; // 0x00
	private object pending_exception; // 0x18
	private ExecutionContext ec_to_set; // 0x28
	private IntPtr interrupt_on_stop; // 0x38
	private IntPtr unused3; // 0x00
	private IntPtr unused4; // 0x00
	private IntPtr unused5; // 0x00
	private IntPtr unused6; // 0x10
	private static object[] local_slots; // 0x20
	private static ExecutionContext _ec; // 0x10
	private MulticastDelegate threadstart; // 0x00
	private int managed_id; // 0x18
	private IPrincipal _principal; // 0x80000000
	private static Hashtable datastorehash; // 0x80000010
	private static object datastore_lock; // 0x28
	private bool in_currentculture; // 0x80000018
	private static object culture_lock; // 0x38

	// Properties
	public static Context CurrentContext { get; } // 0x000000018021ED40 
	public static IPrincipal CurrentPrincipal { get; set; } // 0x00000001802E5840 0x00000001802E60F0
	public static Thread CurrentThread { get; } // 0x00000001802E5A70 
	internal static int CurrentThreadId { get; } // 0x00000001802E59D0 
	public ApartmentState ApartmentState { get; set; } // 0x00000001802E54D0 0x00000001802E5EF0
	public CultureInfo CurrentCulture { get; set; } // 0x00000001802E5540 0x00000001802E5F00
	public CultureInfo CurrentUICulture { get; set; } // 0x00000001802E5AC0 0x00000001802E6220
	public bool IsThreadPoolThread { get; } // 0x000000018013BF70 
	internal bool IsThreadPoolThreadInternal { get; set; } // 0x000000018013BF70 0x000000018024FE60
	public bool IsAlive { get; } // 0x00000001802E5E60 
	public bool IsBackground { get; set; } // 0x00000001802E5E80 0x00000001802E63D0
	public string Name { get; set; } // 0x00000001802E3F80 0x00000001802E4860
	public ThreadPriority Priority { get; set; } // 0x00000001800EA8C0 0x00000001800EA7B0
	public ThreadState ThreadState { get; } // 0x00000001802E4200 
	public ExecutionContext ExecutionContext { get; } // 0x00000001802E5D80 
	public int ManagedThreadId { get; } // 0x00000001802E3ED0 

	// Constructors
	public Thread(ThreadStart start); // 0x00000001802E5260
	public Thread(ThreadStart start, int maxStackSize); // 0x00000001802E53E0
	public Thread(ParameterizedThreadStart start); // 0x00000001802E51D0
	public Thread(ParameterizedThreadStart start, int maxStackSize); // 0x00000001802E52F0
	private static Thread(); // 0x00000001802E5150

	// Methods
	private void System.Runtime.InteropServices._Thread.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x00000001802E4E20
	private void System.Runtime.InteropServices._Thread.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x00000001802E4EC0
	private void System.Runtime.InteropServices._Thread.GetTypeInfoCount(out uint pcTInfo); // 0x00000001802E4E70
	private void System.Runtime.InteropServices._Thread.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x00000001802E4F10
	private static Thread CurrentThread_internal(); // 0x00000001802E3960
	private static void InitDataStoreHash(); // 0x00000001802E4210
	public static LocalDataStoreSlot AllocateNamedDataSlot(string name); // 0x00000001802E3610
	public static void FreeNamedDataSlot(string name); // 0x00000001802E3AC0
	public static LocalDataStoreSlot AllocateDataSlot(); // 0x00000001802E35C0
	public static object GetData(LocalDataStoreSlot slot); // 0x00000001802E3DF0
	public static void SetData(LocalDataStoreSlot slot, object data); // 0x00000001802E46A0
	internal static void FreeLocalSlotValues(int slot, bool thread_local); // 0x00000001801B80A0
	public static LocalDataStoreSlot GetNamedDataSlot(string name); // 0x00000001802E3F90
	public static AppDomain GetDomain(); // 0x00000001802E3EC0
	public static int GetDomainID(); // 0x00000001802E3EB0
	private static void ResetAbort_internal(); // 0x00000001802E4500
	public static void ResetAbort(); // 0x00000001802E4510
	private static void Sleep_internal(int ms); // 0x00000001802E48A0
	public static void Sleep(int millisecondsTimeout); // 0x00000001802E48B0
	public static void Sleep(TimeSpan timeout); // 0x00000001802E4940
	private IntPtr Thread_internal(MulticastDelegate start); // 0x00000001802E4F80
	private void Thread_init(); // 0x00000001802E4F70
	private CultureInfo GetCachedCurrentCulture(); // 0x00000001802E3C40
	private byte[] GetSerializedCurrentCulture(); // 0x00000001802E41E0
	private void SetCachedCurrentCulture(CultureInfo culture); // 0x00000001802E45F0
	private void SetSerializedCurrentCulture(byte[] culture); // 0x00000001802E4870
	private CultureInfo GetCachedCurrentUICulture(); // 0x00000001802E3C50
	private byte[] GetSerializedCurrentUICulture(); // 0x00000001802E41F0
	private void SetCachedCurrentUICulture(CultureInfo culture); // 0x00000001802E4600
	private void SetSerializedCurrentUICulture(byte[] culture); // 0x00000001802E4880
	private string GetName_internal(); // 0x00000001802E3F80
	private void SetName_internal(string name); // 0x00000001802E4860
	private void Abort_internal(object stateInfo); // 0x00000001802E35A0
	public void Abort(); // 0x00000001802E35B0
	public void Abort(object stateInfo); // 0x00000001802E35A0
	internal object GetAbortExceptionState(); // 0x00000001802E3C20
	private void Interrupt_internal(); // 0x00000001802E4390
	public void Interrupt(); // 0x00000001802E4390
	private bool Join_internal(int ms, IntPtr handle); // 0x00000001802E43A0
	public void Join(); // 0x00000001802E4440
	public bool Join(int millisecondsTimeout); // 0x00000001802E43B0
	public bool Join(TimeSpan timeout); // 0x00000001802E4450
	public static void MemoryBarrier(); // 0x00000001802E44F0
	private void Resume_internal(); // 0x00000001802E4560
	public void Resume(); // 0x00000001802E4560
	private static void SpinWait_nop(); // 0x00000001801B80A0
	public static void SpinWait(int iterations); // 0x00000001802E49F0
	public void Start(); // 0x00000001802E4A70
	private void Suspend_internal(); // 0x00000001802E4E10
	public void Suspend(); // 0x00000001802E4E10
	private void Thread_free_internal(IntPtr handle); // 0x00000001802E4F60
	protected override void Finalize(); // 0x00000001802E3A30
	private void SetState(ThreadState set); // 0x00000001802E4890
	private void ClrState(ThreadState clr); // 0x00000001802E3950
	private ThreadState GetState(); // 0x00000001802E4200
	public static byte VolatileRead(byte address); // 0x00000001802E50B0
	public static double VolatileRead(double address); // 0x00000001802E50D0
	public static short VolatileRead(short address); // 0x00000001802E50C0
	public static int VolatileRead(int address); // 0x00000001802E50E0
	public static long VolatileRead(long address); // 0x00000001802E5090
	public static IntPtr VolatileRead(IntPtr address); // 0x00000001802E5090
	public static object VolatileRead(object address); // 0x00000001802E5090
	public static sbyte VolatileRead(sbyte address); // 0x00000001802E50B0
	public static float VolatileRead(float address); // 0x00000001802E50A0
	public static ushort VolatileRead(ushort address); // 0x00000001802E50C0
	public static uint VolatileRead(uint address); // 0x00000001802E50E0
	public static ulong VolatileRead(ulong address); // 0x00000001802E5090
	public static UIntPtr VolatileRead(UIntPtr address); // 0x00000001802E5090
	public static void VolatileWrite(byte address, byte value); // 0x00000001802E50F0
	public static void VolatileWrite(double address, double value); // 0x00000001802E5110
	public static void VolatileWrite(short address, short value); // 0x00000001802E5140
	public static void VolatileWrite(int address, int value); // 0x00000001802E5130
	public static void VolatileWrite(long address, long value); // 0x00000001802E5100
	public static void VolatileWrite(IntPtr address, IntPtr value); // 0x00000001802E5100
	public static void VolatileWrite(object address, object value); // 0x00000001802E5100
	public static void VolatileWrite(sbyte address, sbyte value); // 0x00000001802E50F0
	public static void VolatileWrite(float address, float value); // 0x00000001802E5120
	public static void VolatileWrite(ushort address, ushort value); // 0x00000001802E5140
	public static void VolatileWrite(uint address, uint value); // 0x00000001802E5130
	public static void VolatileWrite(ulong address, ulong value); // 0x00000001802E5100
	public static void VolatileWrite(UIntPtr address, UIntPtr value); // 0x00000001802E5100
	private static int GetNewManagedId(); // 0x00000001802E4190
	private static int GetNewManagedId_internal(); // 0x00000001802E4180
	public static void BeginCriticalRegion(); // 0x00000001802E3890
	public static void EndCriticalRegion(); // 0x00000001802E3970
	public static void BeginThreadAffinity(); // 0x00000001800EA7B0
	public static void EndThreadAffinity(); // 0x00000001800EA7B0
	public ApartmentState GetApartmentState(); // 0x00000001802E3C30
	public void SetApartmentState(ApartmentState state); // 0x00000001802E4570
	public bool TrySetApartmentState(ApartmentState state); // 0x00000001802E4F90
	public override int GetHashCode(); // 0x00000001802E3ED0
	public void Start(object parameter); // 0x00000001802E4A60
	public CompressedStack GetCompressedStack(); // 0x00000001802E3C60
	public void SetCompressedStack(CompressedStack stack); // 0x00000001802E4610
}

// Namespace: System.Threading
[Serializable]
public sealed class ThreadAbortException : SystemException // TypeDefIndex: 1584
{
	// Constructors
	private ThreadAbortException(); // 0x00000001802E2F40
	private ThreadAbortException(SerializationInfo info, StreamingContext sc); // 0x000000018010E170

}

// Namespace: System.Threading
[Serializable]
public class ThreadInterruptedException : SystemException // TypeDefIndex: 1585
{
	// Constructors
	public ThreadInterruptedException(); // 0x00000001802E2F90
	public ThreadInterruptedException(string message); // 0x000000018010E1E0
	protected ThreadInterruptedException(SerializationInfo info, StreamingContext context); // 0x000000018010E170
	public ThreadInterruptedException(string message, Exception innerException); // 0x000000018010E1D0

}

// Namespace: System.Threading
public static class ThreadPool // TypeDefIndex: 1586
{
	// Methods
	public static bool BindHandle(IntPtr osHandle); // 0x000000018010E420
	public static bool BindHandle(SafeHandle osHandle); // 0x00000001802E2FD0
	public static void GetMaxThreads(out int workerThreads, out int completionPortThreads); // 0x00000001802E3040
	public static void GetMinThreads(out int workerThreads, out int completionPortThreads); // 0x00000001802E3050
	public static bool SetMinThreads(int workerThreads, int completionPortThreads); // 0x00000001802E33F0
	public static bool SetMaxThreads(int workerThreads, int completionPortThreads); // 0x00000001802E33E0
	public static bool QueueUserWorkItem(WaitCallback callBack); // 0x00000001802E3100
	public static bool QueueUserWorkItem(WaitCallback callBack, object state); // 0x00000001802E3060
	public static RegisteredWaitHandle RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, object state, int millisecondsTimeOutInterval, bool executeOnlyOnce); // 0x00000001802E3110
	public static RegisteredWaitHandle RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, object state, long millisecondsTimeOutInterval, bool executeOnlyOnce); // 0x00000001802E3130
	public static RegisteredWaitHandle RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, object state, TimeSpan timeout, bool executeOnlyOnce); // 0x00000001802E33B0
	public static RegisteredWaitHandle RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, object state, uint millisecondsTimeOutInterval, bool executeOnlyOnce); // 0x00000001802E3390
}

// Namespace: System.Threading
[Serializable]
public enum ThreadPriority // TypeDefIndex: 1587
{
	Lowest = 0,
	BelowNormal = 1,
	Normal = 2,
	AboveNormal = 3,
	Highest = 4
}

// Namespace: System.Threading
[Serializable]
public sealed class ThreadStartException : SystemException // TypeDefIndex: 1588
{
	// Constructors
	internal ThreadStartException(); // 0x00000001802E3400
	internal ThreadStartException(string message); // 0x000000018010E1E0
	internal ThreadStartException(SerializationInfo info, StreamingContext context); // 0x000000018010E170
	internal ThreadStartException(string message, Exception innerException); // 0x000000018010E1D0

}

// Namespace: System.Threading
[Serializable]
public enum ThreadState // TypeDefIndex: 1589
{
	Running = 0,
	StopRequested = 1,
	SuspendRequested = 2,
	Background = 4,
	Unstarted = 8,
	Stopped = 16,
	WaitSleepJoin = 32,
	Suspended = 64,
	AbortRequested = 128,
	Aborted = 256
}

// Namespace: System.Threading
[Serializable]
public class ThreadStateException : SystemException // TypeDefIndex: 1590
{
	// Constructors
	public ThreadStateException(); // 0x00000001802E3560
	public ThreadStateException(string message); // 0x000000018010E1E0
	protected ThreadStateException(SerializationInfo info, StreamingContext context); // 0x000000018010E170
	public ThreadStateException(string message, Exception innerException); // 0x000000018010E1D0

}

// Namespace: System.Threading
public static class Timeout // TypeDefIndex: 1591
{
	// Fields
	public const int Infinite = -1; // 0x00

}

// Namespace: System.Threading
public sealed class Timer : MarshalByRefObject, IDisposable // TypeDefIndex: 1592
{
	// Fields
	private const long MaxValue = 4294967294; // 0x00
	private static Scheduler scheduler; // 0x18
	private TimerCallback callback; // 0x28
	private object state; // 0x38
	private long due_time_ms; // 0x00
	private long period_ms; // 0x00
	private long next_run; // 0x00
	private bool disposed; // 0x10

	// Constructors
	public Timer(TimerCallback callback, object state, int dueTime, int period); // 0x00000001802E8F30
	public Timer(TimerCallback callback, object state, long dueTime, long period); // 0x00000001802E8DF0
	public Timer(TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period); // 0x00000001802E8EA0
	public Timer(TimerCallback callback, object state, uint dueTime, uint period); // 0x00000001802E8F90
	public Timer(TimerCallback callback); // 0x00000001802E8E50
	private static Timer(); // 0x00000001802E8D40

	// Methods
	private void Init(TimerCallback callback, object state, long dueTime, long period); // 0x00000001802E8C90
	public bool Change(int dueTime, int period); // 0x00000001802E8830
	public bool Change(TimeSpan dueTime, TimeSpan period); // 0x00000001802E8850
	public bool Change(uint dueTime, uint period); // 0x00000001802E8AA0
	public void Dispose(); // 0x00000001802E8C00
	public bool Change(long dueTime, long period); // 0x00000001802E8AE0
	private bool Change(long dueTime, long period, bool first); // 0x00000001802E88A0
	public bool Dispose(WaitHandle notifyObject); // 0x00000001802E8B00
}

// Namespace: 
private sealed class TimerComparer : IComparer // TypeDefIndex: 1593
{
	// Constructors
	public TimerComparer(); // 0x00000001800E2000

	// Methods
	public int Compare(object x, object y); // 0x00000001802E8780
}

// Namespace: 
private sealed class Scheduler // TypeDefIndex: 1594
{
	// Fields
	private static Scheduler instance; // 0x00
	private SortedList list; // 0x00

	// Properties
	public static Scheduler Instance { get; } // 0x00000001802E2BA0 

	// Constructors
	private Scheduler(); // 0x00000001802E2A90
	private static Scheduler(); // 0x00000001802E2940

	// Methods
	public void Remove(Timer timer); // 0x00000001802E2210
	public void Change(Timer timer, long new_next_run); // 0x00000001802E2030
	private void Add(Timer timer); // 0x00000001802E1ED0
	private int InternalRemove(Timer timer); // 0x00000001802E21B0
	private void SchedulerThread(); // 0x00000001802E22E0
	private void ShrinkIfNeeded(ArrayList list, int initial); // 0x00000001802E28B0
}

// Namespace: System.Threading
public abstract class WaitHandle : MarshalByRefObject, IDisposable // TypeDefIndex: 1595
{
	// Fields
	public const int WaitTimeout = 258; // 0x00
	private SafeWaitHandle safe_wait_handle; // 0x00
	protected static readonly IntPtr InvalidHandle; // 0x10
	private bool disposed; // 0x20

	// Properties
	public virtual IntPtr Handle { get; set; } // 0x00000001802F1D00 0x00000001802F1D20
	public SafeWaitHandle SafeWaitHandle { get; set; } // 0x00000001800EAEC0 0x00000001802F1E10

	// Constructors
	protected WaitHandle(); // 0x00000001800EAC90
	private static WaitHandle(); // 0x00000001802F1CC0

	// Methods
	private void System.IDisposable.Dispose(); // 0x000000018013F2D0
	private static bool WaitAll_internal(WaitHandle[] handles, int ms, bool exitContext); // 0x00000001802F0F80
	private static void CheckArray(WaitHandle[] handles, bool waitAll); // 0x00000001802F09D0
	public static bool WaitAll(WaitHandle[] waitHandles); // 0x00000001802F1000
	public static bool WaitAll(WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext); // 0x00000001802F10E0
	public static bool WaitAll(WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext); // 0x00000001802F1250
	private static int WaitAny_internal(WaitHandle[] handles, int ms, bool exitContext); // 0x00000001802F13E0
	public static int WaitAny(WaitHandle[] waitHandles); // 0x00000001802F17D0
	public static int WaitAny(WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext); // 0x00000001802F1460
	public static int WaitAny(WaitHandle[] waitHandles, TimeSpan timeout); // 0x00000001802F13F0
	public static int WaitAny(WaitHandle[] waitHandles, int millisecondsTimeout); // 0x00000001802F1760
	public static int WaitAny(WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext); // 0x00000001802F15D0
	public virtual void Close(); // 0x000000018013F2D0
	private bool WaitOne_internal(IntPtr handle, int ms, bool exitContext); // 0x00000001802F1840
	protected virtual void Dispose(bool explicitDisposing); // 0x00000001802F0BD0
	public static bool SignalAndWait(WaitHandle toSignal, WaitHandle toWaitOn); // 0x00000001802F0DA0
	public static bool SignalAndWait(WaitHandle toSignal, WaitHandle toWaitOn, int millisecondsTimeout, bool exitContext); // 0x00000001802F0E10
	public static bool SignalAndWait(WaitHandle toSignal, WaitHandle toWaitOn, TimeSpan timeout, bool exitContext); // 0x00000001802F0CA0
	private static bool SignalAndWait_Internal(IntPtr toSignal, IntPtr toWaitOn, int ms, bool exitContext); // 0x00000001802F0C90
	public virtual bool WaitOne(); // 0x00000001802F1850
	public virtual bool WaitOne(int millisecondsTimeout, bool exitContext); // 0x00000001802F1960
	public virtual bool WaitOne(int millisecondsTimeout); // 0x00000001801FE5E0
	public virtual bool WaitOne(TimeSpan timeout); // 0x0000000180161790
	public virtual bool WaitOne(TimeSpan timeout, bool exitContext); // 0x00000001802F1B00
	internal void CheckDisposed(); // 0x00000001802F0B30
	public static bool WaitAll(WaitHandle[] waitHandles, int millisecondsTimeout); // 0x00000001802F0F90
	public static bool WaitAll(WaitHandle[] waitHandles, TimeSpan timeout); // 0x00000001802F1070
	protected override void Finalize(); // 0x000000018013AFC0
}

// Namespace: System.Threading
[Serializable]
public class WaitHandleCannotBeOpenedException : ApplicationException // TypeDefIndex: 1596
{
	// Constructors
	public WaitHandleCannotBeOpenedException(); // 0x00000001802F0980
	public WaitHandleCannotBeOpenedException(string message); // 0x00000001801AF100
	public WaitHandleCannotBeOpenedException(string message, Exception innerException); // 0x00000001801AF0A0
	protected WaitHandleCannotBeOpenedException(SerializationInfo info, StreamingContext context); // 0x000000018010E170

}

// Namespace: System
[Serializable]
public class AccessViolationException : SystemException // TypeDefIndex: 1597
{
	// Fields
	private const int Result = -2147467261; // 0x00

	// Constructors
	public AccessViolationException(); // 0x00000001801942F0
	public AccessViolationException(string message); // 0x0000000180133900
	public AccessViolationException(string message, Exception innerException); // 0x0000000180133970
	protected AccessViolationException(SerializationInfo info, StreamingContext context); // 0x000000018010E170

}

// Namespace: System
[Serializable]
public sealed class ActivationContext : IDisposable, ISerializable // TypeDefIndex: 1598
{
	// Fields
	private ContextForm _form; // 0x10
	private ApplicationIdentity _appid; // 0x20
	private bool _disposed; // 0x10

	// Properties
	public ContextForm Form { get; } // 0x00000001800ECD10 
	public ApplicationIdentity Identity { get; } // 0x00000001800EAEC0 

	// Constructors
	private ActivationContext(ApplicationIdentity identity); // 0x00000001801945B0

	// Methods
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x0000000180194540
	protected override void Finalize(); // 0x00000001801944D0
	public static ActivationContext CreatePartialActivationContext(ApplicationIdentity identity); // 0x0000000180194410
	public static ActivationContext CreatePartialActivationContext(ApplicationIdentity identity, string[] manifestPaths); // 0x0000000180194340
	public void Dispose(); // 0x00000001801944B0
	private void Dispose(bool disposing); // 0x00000001801944A0
}

// Namespace: 
public enum ContextForm // TypeDefIndex: 1599
{
	Loose = 0,
	StoreBounded = 1
}

// Namespace: System
public sealed class Activator : _Activator // TypeDefIndex: 1600
{
	// Fields
	private const BindingFlags _flags = 532; // 0x00
	private const BindingFlags _accessFlags = 127; // 0x90

	// Constructors
	private Activator(); // 0x00000001800E2000

	// Methods
	private void System.Runtime.InteropServices._Activator.GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId); // 0x0000000180195E30
	private void System.Runtime.InteropServices._Activator.GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo); // 0x0000000180195ED0
	private void System.Runtime.InteropServices._Activator.GetTypeInfoCount(out uint pcTInfo); // 0x0000000180195E80
	private void System.Runtime.InteropServices._Activator.Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr); // 0x0000000180195F20
	public static ObjectHandle CreateComInstanceFrom(string assemblyName, string typeName); // 0x00000001801948C0
	public static ObjectHandle CreateComInstanceFrom(string assemblyName, string typeName, byte[] hashValue, AssemblyHashAlgorithm hashAlgorithm); // 0x00000001801949D0
	public static ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName); // 0x0000000180194BD0
	public static ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName, object[] activationAttributes); // 0x0000000180194D50
	public static ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes, Evidence securityInfo); // 0x0000000180194AE0
	public static ObjectHandle CreateInstance(string assemblyName, string typeName); // 0x0000000180195010
	public static ObjectHandle CreateInstance(string assemblyName, string typeName, object[] activationAttributes); // 0x0000000180195C60
	public static ObjectHandle CreateInstance(string assemblyName, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes, Evidence securityInfo); // 0x0000000180195AB0
	public static ObjectHandle CreateInstance(ActivationContext activationContext); // 0x0000000180195110
	public static ObjectHandle CreateInstance(ActivationContext activationContext, string[] activationCustomData); // 0x00000001801950C0
	public static ObjectHandle CreateInstanceFrom(AppDomain domain, string assemblyFile, string typeName); // 0x0000000180194CC0
	public static ObjectHandle CreateInstanceFrom(AppDomain domain, string assemblyFile, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes, Evidence securityAttributes); // 0x0000000180194C10
	public static ObjectHandle CreateInstance(AppDomain domain, string assemblyName, string typeName); // 0x0000000180194F80
	public static ObjectHandle CreateInstance(AppDomain domain, string assemblyName, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes, Evidence securityAttributes); // 0x0000000180195BB0
	public static T CreateInstance();
	public static object CreateInstance(Type type); // 0x0000000180195AA0
	public static object CreateInstance(Type type, object[] args); // 0x0000000180194DA0
	public static object CreateInstance(Type type, object[] args, object[] activationAttributes); // 0x0000000180194EA0
	public static object CreateInstance(Type type, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture); // 0x0000000180195A10
	public static object CreateInstance(Type type, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes); // 0x00000001801953E0
	public static object CreateInstance(Type type, bool nonPublic); // 0x0000000180195160
	private static void CheckType(Type type); // 0x00000001801946D0
	private static void CheckAbstractType(Type type); // 0x00000001801945E0
	public static object GetObject(Type type, string url); // 0x0000000180195CE0
	public static object GetObject(Type type, string url, object state); // 0x0000000180195D80
	internal static object CreateInstanceInternal(Type type); // 0x0000000180194D90
}

// Namespace: System
public sealed class AppDomain : MarshalByRefObject // TypeDefIndex: 1601
{
	// Fields
	private IntPtr _mono_app_domain; // 0x18
	private static string _process_guid; // 0x80000000
	private static Hashtable type_resolve_in_progress; // 0x80000010
	private static Hashtable assembly_resolve_in_progress; // 0x28
	private static Hashtable assembly_resolve_in_progress_refonly; // 0x80000018
	private Evidence _evidence; // 0x38
	private PermissionSet _granted; // 0x48
	private PrincipalPolicy _principalPolicy; // 0x58
	private static IPrincipal _principal; // 0x68
	private static AppDomain default_domain; // 0x78
	private AppDomainManager _domain_manager; // 0x88
	private ActivationContext _activation; // 0x18
	private ApplicationIdentity _applicationIdentity; // 0x10
	private AssemblyLoadEventHandler AssemblyLoad; // 0x20
	private ResolveEventHandler AssemblyResolve; // 0x30
	private EventHandler DomainUnload; // 0x40
	private EventHandler ProcessExit; // 0x50
	private ResolveEventHandler ResourceResolve; // 0x60
	private ResolveEventHandler TypeResolve; // 0x64
	private UnhandledExceptionEventHandler UnhandledException; // 0x69
	private ResolveEventHandler ReflectionOnlyAssemblyResolve; // 0x78

	// Properties
	internal AppDomainSetup SetupInformationNoCopy { get; } // 0x000000018019AAD0 
	public AppDomainSetup SetupInformation { get; } // 0x000000018019B130 
	public string BaseDirectory { get; } // 0x000000018019AAE0 
	public string RelativeSearchPath { get; } // 0x000000018019B070 
	public string DynamicDirectory { get; } // 0x000000018019ADD0 
	public bool ShadowCopyFiles { get; } // 0x000000018019B190 
	public string FriendlyName { get; } // 0x000000018019A440 
	public Evidence Evidence { get; } // 0x000000018019AEF0 
	internal IPrincipal DefaultPrincipal { get; } // 0x000000018019AC80 
	internal PermissionSet GrantedPermissionSet { get; } // 0x000000018013BF80 
	public static AppDomain CurrentDomain { get; } // 0x000000018019AA60 
	internal static AppDomain DefaultDomain { get; } // 0x000000018019ABA0 
	public AppDomainManager DomainManager { get; } // 0x0000000180119440 
	public ActivationContext ActivationContext { get; } // 0x0000000180114BB0 
	public ApplicationIdentity ApplicationIdentity { get; } // 0x0000000180113E60 
	public int Id { get; } // 0x000000018019AA70 

	// Events
	public event AssemblyLoadEventHandler AssemblyLoad {
		add; // 0x000000018019A630
		remove; // 0x000000018019B210
	}
	public event ResolveEventHandler AssemblyResolve {
		add; // 0x000000018019A6B0
		remove; // 0x000000018019B290
	}
	public event EventHandler DomainUnload {
		add; // 0x000000018019A730
		remove; // 0x000000018019B310
	}
	public event EventHandler ProcessExit {
		add; // 0x000000018019A7B0
		remove; // 0x000000018019B390
	}
	public event ResolveEventHandler ResourceResolve {
		add; // 0x000000018019A8C0
		remove; // 0x000000018019B4A0
	}
	public event ResolveEventHandler TypeResolve {
		add; // 0x000000018019A940
		remove; // 0x000000018019B520
	}
	public event UnhandledExceptionEventHandler UnhandledException {
		add; // 0x000000018019A9C0
		remove; // 0x000000018019B5A0
	}
	public event ResolveEventHandler ReflectionOnlyAssemblyResolve {
		add; // 0x000000018019A830
		remove; // 0x000000018019B410
	}

	// Constructors
	private AppDomain(); // 0x00000001800EAC90

	// Methods
	private AppDomainSetup getSetup(); // 0x000000018019AAD0
	private string getFriendlyName(); // 0x000000018019A440
	private static AppDomain getCurDomain(); // 0x000000018019AA60
	private static AppDomain getRootDomain(); // 0x000000018019AAC0
	public void AppendPrivatePath(string path); // 0x0000000180197020
	public void ClearPrivatePath(); // 0x0000000180197270
	public void ClearShadowCopyPath(); // 0x00000001801972F0
	public ObjectHandle CreateInstance(string assemblyName, string typeName); // 0x0000000180197DF0
	public ObjectHandle CreateInstance(string assemblyName, string typeName, object[] activationAttributes); // 0x0000000180197D60
	public ObjectHandle CreateInstance(string assemblyName, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes, Evidence securityAttributes); // 0x0000000180197C80
	public object CreateInstanceAndUnwrap(string assemblyName, string typeName); // 0x0000000180197780
	public object CreateInstanceAndUnwrap(string assemblyName, string typeName, object[] activationAttributes); // 0x0000000180197820
	public object CreateInstanceAndUnwrap(string assemblyName, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes, Evidence securityAttributes); // 0x00000001801977A0
	public ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName); // 0x0000000180197B20
	public ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName, object[] activationAttributes); // 0x0000000180197BD0
	public ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes, Evidence securityAttributes); // 0x0000000180197A40
	public object CreateInstanceFromAndUnwrap(string assemblyName, string typeName); // 0x00000001801978D0
	public object CreateInstanceFromAndUnwrap(string assemblyName, string typeName, object[] activationAttributes); // 0x00000001801978F0
	public object CreateInstanceFromAndUnwrap(string assemblyName, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes, Evidence securityAttributes); // 0x00000001801979C0
	public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access); // 0x0000000180198160
	public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, Evidence evidence); // 0x00000001801981E0
	public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, string dir); // 0x0000000180198130
	public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, string dir, Evidence evidence); // 0x00000001801980A0
	public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions); // 0x0000000180198190
	public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, Evidence evidence, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions); // 0x0000000180198480
	public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, string dir, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions); // 0x00000001801980E0
	public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, string dir, Evidence evidence, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions); // 0x0000000180198430
	public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, string dir, Evidence evidence, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions, bool isSynchronized); // 0x0000000180198210
	public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, string dir, Evidence evidence, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions, bool isSynchronized, IEnumerable`1<CustomAttributeBuilder> assemblyAttributes); // 0x0000000180197EA0
	public AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, IEnumerable`1<CustomAttributeBuilder> assemblyAttributes); // 0x00000001801984D0
	internal AssemblyBuilder DefineInternalDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access); // 0x0000000180198510
	public void DoCallBack(CrossAppDomainDelegate callBackDelegate); // 0x00000001801988F0
	public int ExecuteAssembly(string assemblyFile); // 0x0000000180198E10
	public int ExecuteAssembly(string assemblyFile, Evidence assemblySecurity); // 0x0000000180198E90
	public int ExecuteAssembly(string assemblyFile, Evidence assemblySecurity, string[] args); // 0x0000000180198ED0
	public int ExecuteAssembly(string assemblyFile, Evidence assemblySecurity, string[] args, byte[] hashValue, AssemblyHashAlgorithm hashAlgorithm); // 0x0000000180198E40
	private int ExecuteAssemblyInternal(Assembly a, string[] args); // 0x0000000180198D00
	private int ExecuteAssembly(Assembly a, string[] args); // 0x0000000180198E00
	private Assembly[] GetAssemblies(bool refOnly); // 0x0000000180198F20
	public Assembly[] GetAssemblies(); // 0x0000000180198F10
	public object GetData(string name); // 0x0000000180198F80
	public Type GetType(); // 0x0000000180199040
	public override object InitializeLifetimeService(); // 0x00000001800EA8C0
	internal Assembly LoadAssembly(string assemblyRef, Evidence securityEvidence, bool refOnly); // 0x0000000180199520
	public Assembly Load(AssemblyName assemblyRef); // 0x0000000180199660
	internal Assembly LoadSatellite(AssemblyName assemblyRef, bool throwOnError); // 0x0000000180199530
	public Assembly Load(AssemblyName assemblyRef, Evidence assemblySecurity); // 0x00000001801997E0
	public Assembly Load(string assemblyString); // 0x0000000180199640
	public Assembly Load(string assemblyString, Evidence assemblySecurity); // 0x0000000180199620
	internal Assembly Load(string assemblyString, Evidence assemblySecurity, bool refonly); // 0x0000000180199D50
	public Assembly Load(byte[] rawAssembly); // 0x0000000180199E60
	public Assembly Load(byte[] rawAssembly, byte[] rawSymbolStore); // 0x0000000180199D30
	internal Assembly LoadAssemblyRaw(byte[] rawAssembly, byte[] rawSymbolStore, Evidence securityEvidence, bool refonly); // 0x0000000180199510
	public Assembly Load(byte[] rawAssembly, byte[] rawSymbolStore, Evidence securityEvidence); // 0x0000000180199730
	internal Assembly Load(byte[] rawAssembly, byte[] rawSymbolStore, Evidence securityEvidence, bool refonly); // 0x0000000180199670
	public void SetAppDomainPolicy(PolicyLevel domainPolicy); // 0x0000000180199FB0
	public void SetCachePath(string path); // 0x000000018019A110
	public void SetPrincipalPolicy(PrincipalPolicy policy); // 0x000000018019A1A0
	public void SetShadowCopyFiles(); // 0x000000018019A270
	public void SetShadowCopyPath(string path); // 0x000000018019A2C0
	public void SetThreadPrincipal(IPrincipal principal); // 0x000000018019A2F0
	private static AppDomain InternalSetDomainByID(int domain_id); // 0x00000001801990B0
	private static AppDomain InternalSetDomain(AppDomain context); // 0x00000001801990C0
	internal static void InternalPushDomainRef(AppDomain domain); // 0x0000000180199090
	internal static void InternalPushDomainRefByID(int domain_id); // 0x0000000180199080
	internal static void InternalPopDomainRef(); // 0x0000000180199070
	internal static Context InternalSetContext(Context context); // 0x00000001801990A0
	internal static Context InternalGetContext(); // 0x0000000180199050
	internal static Context InternalGetDefaultContext(); // 0x0000000180199050
	internal static string InternalGetProcessGuid(string newguid); // 0x0000000180199060
	internal static object InvokeInDomain(AppDomain domain, MethodInfo method, object obj, object[] args); // 0x00000001801992C0
	internal static object InvokeInDomainByID(int domain_id, MethodInfo method, object obj, object[] args); // 0x00000001801990E0
	internal static string GetProcessGuid(); // 0x0000000180198F90
	public static AppDomain CreateDomain(string friendlyName); // 0x0000000180197710
	public static AppDomain CreateDomain(string friendlyName, Evidence securityInfo); // 0x0000000180197770
	private static AppDomain createDomain(string friendlyName, AppDomainSetup info); // 0x000000018019AA50
	public static AppDomain CreateDomain(string friendlyName, Evidence securityInfo, AppDomainSetup info); // 0x0000000180197480
	public static AppDomain CreateDomain(string friendlyName, Evidence securityInfo, string appBasePath, string appRelativeSearchPath, bool shadowCopyFiles); // 0x0000000180197720
	private static AppDomainSetup CreateDomainSetup(string appBasePath, string appRelativeSearchPath, bool shadowCopyFiles); // 0x0000000180197370
	private static bool InternalIsFinalizingForUnload(int domain_id); // 0x0000000180113770
	public bool IsFinalizingForUnload(); // 0x00000001801994C0
	private static void InternalUnload(int domain_id); // 0x00000001801990D0
	private int getDomainID(); // 0x000000018019AA70
	public static void Unload(AppDomain domain); // 0x000000018019A450
	public void SetData(string name, object data); // 0x000000018019A140
	public void SetData(string name, object data, IPermission permission); // 0x000000018019A150
	public static int GetCurrentThreadId(); // 0x0000000180198F30
	public override string ToString(); // 0x000000018019A440
	private static void ValidateAssemblyName(string name); // 0x000000018019A500
	private void DoAssemblyLoad(Assembly assembly); // 0x0000000180198590
	private Assembly DoAssemblyResolve(string name, bool refonly); // 0x0000000180198620
	internal Assembly DoTypeResolve(object name_or_tb); // 0x0000000180198930
	private void DoDomainUnload(); // 0x0000000180198910
	internal void ProcessMessageInDomain(byte[] arrRequest, CADMethodCallMessage cadMsg, out byte[] arrResponse, out CADMethodReturnMessage cadMrm); // 0x0000000180199E80
	public string ApplyPolicy(string assemblyName); // 0x00000001801971D0
	public static AppDomain CreateDomain(string friendlyName, Evidence securityInfo, string appBasePath, string appRelativeSearchPath, bool shadowCopyFiles, AppDomainInitializer adInit, string[] adInitArgs); // 0x0000000180197410
	public int ExecuteAssemblyByName(string assemblyName); // 0x0000000180198CD0
	public int ExecuteAssemblyByName(string assemblyName, Evidence assemblySecurity); // 0x0000000180198C50
	public int ExecuteAssemblyByName(string assemblyName, Evidence assemblySecurity, string[] args); // 0x0000000180198C90
	public int ExecuteAssemblyByName(AssemblyName assemblyName, Evidence assemblySecurity, string[] args); // 0x0000000180198C10
	public bool IsDefaultAppDomain(); // 0x00000001801994A0
	public Assembly[] ReflectionOnlyGetAssemblies(); // 0x0000000180199FA0
}

// Namespace: System
public class AppDomainManager : MarshalByRefObject // TypeDefIndex: 1602
{
	// Fields
	private ApplicationActivator _activator; // 0x18
	private AppDomainManagerInitializationOptions _flags; // 0x10

	// Properties
	public virtual ApplicationActivator ApplicationActivator { get; } // 0x0000000180196530 
	public virtual Assembly EntryAssembly { get; } // 0x0000000180196590 
	public virtual HostExecutionContextManager HostExecutionContextManager { get; } // 0x00000001801965A0 
	public virtual HostSecurityManager HostSecurityManager { get; } // 0x00000001800EA8C0 
	public AppDomainManagerInitializationOptions InitializationFlags { get; set; } // 0x00000001800E2F70 0x000000018018FC20

	// Constructors
	public AppDomainManager(); // 0x0000000180196510

	// Methods
	public virtual AppDomain CreateDomain(string friendlyName, Evidence securityInfo, AppDomainSetup appDomainInfo); // 0x0000000180196320
	public virtual void InitializeNewDomain(AppDomainSetup appDomainInfo); // 0x00000001800EA7B0
	public virtual bool CheckSecuritySettings(SecurityState state); // 0x000000018011A0F0
	protected static AppDomain CreateDomainHelper(string friendlyName, Evidence securityInfo, AppDomainSetup appDomainInfo); // 0x0000000180196310
}

// Namespace: System
[Serializable]
public sealed class AppDomainSetup // TypeDefIndex: 1603
{
	// Fields
	private string application_base; // 0x10
	private string application_name; // 0x20
	private string cache_path; // 0x30
	private string configuration_file; // 0x40
	private string dynamic_base; // 0x50
	private string license_file; // 0x60
	private string private_bin_path; // 0x64
	private string private_bin_path_probe; // 0x69
	private string shadow_copy_directories; // 0x78
	private string shadow_copy_files; // 0x88
	private bool publisher_policy; // 0x98
	private bool path_changed; // 0x10
	private LoaderOptimization loader_optimization; // 0x20
	private bool disallow_binding_redirects; // 0x30
	private bool disallow_code_downloads; // 0x10
	private ActivationArguments _activationArguments; // 0x00
	private AppDomainInitializer domain_initializer; // 0x00
	[NonSerialized]	private ApplicationTrust application_trust; // 0x10
	private string[] domain_initializer_args; // 0x10
	private SecurityElement application_trust_xml; // 0x00
	private bool disallow_appbase_probe; // 0x00
	private byte[] configuration_bytes; // 0x00

	// Properties
	public string ApplicationBase { get; set; } // 0x0000000180196970 0x0000000180114C30
	public string ApplicationName { get; set; } // 0x00000001800EAEC0 0x00000001800EAEE0
	public string CachePath { get; set; } // 0x00000001800EAEB0 0x00000001800EAED0
	public string ConfigurationFile { get; set; } // 0x0000000180196B70 0x000000018015B760
	public bool DisallowPublisherPolicy { get; set; } // 0x0000000180196CB0 0x0000000180196E70
	public string DynamicBase { get; set; } // 0x0000000180196CC0 0x0000000180196E80
	public string LicenseFile { get; set; } // 0x0000000180119440 0x000000018015B770
	public LoaderOptimization LoaderOptimization { get; set; } // 0x0000000180196DD0 0x0000000180196F50
	public string PrivateBinPath { get; set; } // 0x0000000180114BB0 0x0000000180196F70
	public string PrivateBinPathProbe { get; set; } // 0x0000000180113E60 0x0000000180196F60
	public string ShadowCopyDirectories { get; set; } // 0x00000001801513A0 0x00000001801140B0
	public string ShadowCopyFiles { get; set; } // 0x0000000180176AC0 0x0000000180196F80
	public bool DisallowBindingRedirects { get; set; } // 0x0000000180196C90 0x0000000180196E50
	public bool DisallowCodeDownload { get; set; } // 0x0000000180196CA0 0x0000000180196E60
	public ActivationArguments ActivationArguments { get; set; } // 0x000000018017D300 0x000000018017D3A0
	public AppDomainInitializer AppDomainInitializer { get; set; } // 0x000000018017D330 0x000000018017D3E0
	public string[] AppDomainInitializerArguments { get; set; } // 0x000000018017D2F0 0x000000018017D390
	public ApplicationTrust ApplicationTrust { get; set; } // 0x0000000180196AF0 0x0000000180196DE0
	public bool DisallowApplicationBaseProbing { get; set; } // 0x0000000180196C80 0x0000000180196E40

	// Constructors
	public AppDomainSetup(); // 0x00000001800E2000
	internal AppDomainSetup(AppDomainSetup setup); // 0x00000001801967E0
	public AppDomainSetup(ActivationArguments activationArguments); // 0x0000000180196940
	public AppDomainSetup(ActivationContext activationContext); // 0x00000001801968D0

	// Methods
	private static string GetAppBase(string appBase); // 0x00000001801965F0
	public byte[] GetConfigurationBytes(); // 0x0000000180196770
	public void SetConfigurationBytes(byte[] value); // 0x00000001801967D0
}

// Namespace: System
[Serializable]
public class AppDomainUnloadedException : SystemException // TypeDefIndex: 1604
{
	// Fields
	private const int Result = -2146234348; // 0x00

	// Constructors
	public AppDomainUnloadedException(); // 0x0000000180196FD0
	public AppDomainUnloadedException(string message); // 0x0000000180196FB0
	public AppDomainUnloadedException(string message, Exception innerException); // 0x0000000180196F90
	protected AppDomainUnloadedException(SerializationInfo info, StreamingContext context); // 0x000000018010E170

}

// Namespace: System
[Serializable]
public class ApplicationException : Exception // TypeDefIndex: 1605
{
	// Fields
	private const int Result = -2146232832; // 0x00

	// Constructors
	public ApplicationException(); // 0x000000018019B650
	public ApplicationException(string message); // 0x000000018019B6C0
	public ApplicationException(string message, Exception innerException); // 0x000000018019B6A0
	protected ApplicationException(SerializationInfo info, StreamingContext context); // 0x000000018019B630

}

// Namespace: System
[Serializable]
public sealed class ApplicationId // TypeDefIndex: 1606
{
	// Fields
	private byte[] _token; // 0x10
	private string _name; // 0x20
	private Version _version; // 0x30
	private string _proc; // 0x10
	private string _culture; // 0x00

	// Properties
	public string Culture { get; } // 0x00000001801146E0 
	public string Name { get; } // 0x00000001800EAEC0 
	public string ProcessorArchitecture { get; } // 0x000000018013BF80 
	public byte[] PublicKeyToken { get; } // 0x000000018019BDD0 
	public Version Version { get; } // 0x00000001800EAEB0 

	// Constructors
	public ApplicationId(byte[] publicKeyToken, string name, Version version, string processorArchitecture, string culture); // 0x000000018019BC50

	// Methods
	public ApplicationId Copy(); // 0x000000018019B6E0
	public override bool Equals(object o); // 0x000000018019B890
	public override int GetHashCode(); // 0x000000018019BA50
	public override string ToString(); // 0x000000018019BAE0
}

// Namespace: System
[Serializable]
public sealed class ApplicationIdentity : ISerializable // TypeDefIndex: 1607
{
	// Fields
	private string _fullName; // 0x10
	private string _codeBase; // 0x00

	// Properties
	public string CodeBase { get; } // 0x00000001800EAEC0 
	public string FullName { get; } // 0x00000001800E20D0 

	// Constructors
	public ApplicationIdentity(string applicationIdentityFullName); // 0x000000018019BEC0

	// Methods
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x000000018019BE50
	public override string ToString(); // 0x00000001800E20D0
}

// Namespace: System
[Serializable]
public class ArgumentException : SystemException // TypeDefIndex: 1608
{
	// Fields
	private const int Result = -2147024809; // 0x00
	private string param_name; // 0x00

	// Properties
	public virtual string ParamName { get; } // 0x0000000180114BE0 
	public override string Message { get; } // 0x000000018019C350 

	// Constructors
	public ArgumentException(); // 0x000000018019C300
	public ArgumentException(string message); // 0x000000018019C2E0
	public ArgumentException(string message, Exception innerException); // 0x000000018019C280
	public ArgumentException(string message, string paramName); // 0x000000018019C1C0
	public ArgumentException(string message, string paramName, Exception innerException); // 0x000000018019C2A0
	protected ArgumentException(SerializationInfo info, StreamingContext context); // 0x000000018019C1F0

	// Methods
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x000000018019C120
}

// Namespace: System
[Serializable]
public class ArgumentNullException : ArgumentException // TypeDefIndex: 1609
{
	// Fields
	private const int Result = -2147467261; // 0x00

	// Constructors
	public ArgumentNullException(); // 0x000000018019C4B0
	public ArgumentNullException(string paramName); // 0x000000018019C500
	public ArgumentNullException(string paramName, string message); // 0x000000018019C470
	public ArgumentNullException(string message, Exception innerException); // 0x0000000180133970
	protected ArgumentNullException(SerializationInfo info, StreamingContext context); // 0x000000018019C1F0

}

// Namespace: System
[Serializable]
public class ArgumentOutOfRangeException : ArgumentException // TypeDefIndex: 1610
{
	// Fields
	private const int Result = -2146233086; // 0x00
	private object actual_value; // 0x10

	// Properties
	public virtual object ActualValue { get; } // 0x00000001801136C0 
	public override string Message { get; } // 0x000000018019C850 

	// Constructors
	public ArgumentOutOfRangeException(); // 0x000000018019C6E0
	public ArgumentOutOfRangeException(string paramName); // 0x000000018019C730
	public ArgumentOutOfRangeException(string paramName, string message); // 0x000000018019C680
	public ArgumentOutOfRangeException(string paramName, object actualValue, string message); // 0x000000018019C630
	protected ArgumentOutOfRangeException(SerializationInfo info, StreamingContext context); // 0x000000018019C790
	public ArgumentOutOfRangeException(string message, Exception innerException); // 0x000000018019C6C0

	// Methods
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x000000018019C560
}

// Namespace: System
[Serializable]
public class ArithmeticException : SystemException // TypeDefIndex: 1611
{
	// Fields
	private const int Result = -2147024362; // 0x00

	// Constructors
	public ArithmeticException(); // 0x000000018038C120
	public ArithmeticException(string message); // 0x000000018038C100
	public ArithmeticException(string message, Exception innerException); // 0x000000018038C0E0
	protected ArithmeticException(SerializationInfo info, StreamingContext context); // 0x000000018010E170

}

// Namespace: System
[Serializable]
public struct ArraySegment`1 // TypeDefIndex: 1612
{
	// Fields
	private T[] array; // 0x00
	private int offset; // 0x00
	private int count; // 0x40

	// Properties
	public T[] Array { get; }
	public int Offset { get; }
	public int Count { get; }

	// Constructors
	public ArraySegment`1(T[] array, int offset, int count);
	public ArraySegment`1(T[] array);

	// Methods
	public override bool Equals(object obj);
	public bool Equals(ArraySegment`1<T> obj);
	public override int GetHashCode();
	public static bool op_Equality(ArraySegment`1<T> a, ArraySegment`1<T> b);
	public static bool op_Inequality(ArraySegment`1<T> a, ArraySegment`1<T> b);
}

// Namespace: System
[Serializable]
public class ArrayTypeMismatchException : SystemException // TypeDefIndex: 1613
{
	// Fields
	private const int Result = -2146233085; // 0x00

	// Constructors
	public ArrayTypeMismatchException(); // 0x0000000180391D20
	public ArrayTypeMismatchException(string message); // 0x0000000180391D90
	public ArrayTypeMismatchException(string message, Exception innerException); // 0x0000000180391D70
	protected ArrayTypeMismatchException(SerializationInfo info, StreamingContext context); // 0x000000018010E170

}

// Namespace: System
public class AssemblyLoadEventArgs : EventArgs // TypeDefIndex: 1614
{
	// Fields
	private Assembly m_loadedAssembly; // 0x10

	// Properties
	public Assembly LoadedAssembly { get; } // 0x00000001800E20D0 

	// Constructors
	public AssemblyLoadEventArgs(Assembly loadedAssembly); // 0x00000001803979A0

}

// Namespace: System
[Serializable]
public enum AttributeTargets // TypeDefIndex: 1615
{
	Assembly = 1,
	Module = 2,
	Class = 4,
	Struct = 8,
	Enum = 16,
	Constructor = 32,
	Method = 64,
	Property = 128,
	Field = 256,
	Event = 512,
	Interface = 1024,
	Parameter = 2048,
	Delegate = 4096,
	ReturnValue = 8192,
	GenericParameter = 16384,
	All = 32767
}

// Namespace: System
[Serializable]
public class BadImageFormatException : SystemException // TypeDefIndex: 1616
{
	// Fields
	private const int Result = -2147024885; // 0x00
	private string fileName; // 0x68
	private string fusionLog; // 0x10

	// Properties
	public override string Message { get; } // 0x0000000180399900 
	public string FileName { get; } // 0x0000000180114BE0 
	public string FusionLog { get; } // 0x00000001801136C0 

	// Constructors
	public BadImageFormatException(); // 0x00000001803998B0
	public BadImageFormatException(string message); // 0x0000000180399780
	protected BadImageFormatException(SerializationInfo info, StreamingContext context); // 0x00000001803997A0
	public BadImageFormatException(string message, Exception inner); // 0x0000000180399760
	public BadImageFormatException(string message, string fileName); // 0x0000000180399880
	public BadImageFormatException(string message, string fileName, Exception inner); // 0x0000000180399840

	// Methods
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0000000180399550
	public override string ToString(); // 0x00000001803995F0
}

// Namespace: System
public enum Base64FormattingOptions // TypeDefIndex: 1617
{
	None = 0,
	InsertLineBreaks = 1
}

// Namespace: System
public static class BitConverter // TypeDefIndex: 1618
{
	// Fields
	private static readonly bool SwappedWordsInDouble; // 0x00
	public static readonly bool IsLittleEndian; // 0x10

	// Constructors
	private static BitConverter(); // 0x000000018039CC00

	// Methods
	private static bool AmILittleEndian(); // 0x000000018039AEA0
	private static bool DoubleWordsAreSwapped(); // 0x000000018011A0F0
	public static long DoubleToInt64Bits(double value); // 0x000000018039AEC0
	public static double Int64BitsToDouble(long value); // 0x000000018039B910
	internal static double InternalInt64BitsToDouble(long value); // 0x000000018039B970
	private static byte[] GetBytes(void * ptr, int count); // 0x000000018039B110
	public static byte[] GetBytes(bool value); // 0x000000018039B320
	public static byte[] GetBytes(char value); // 0x000000018039B1A0
	public static byte[] GetBytes(short value); // 0x000000018039B050
	public static byte[] GetBytes(int value); // 0x000000018039B550
	public static byte[] GetBytes(long value); // 0x000000018039B610
	public static byte[] GetBytes(ushort value); // 0x000000018039AF90
	public static byte[] GetBytes(uint value); // 0x000000018039B3D0
	public static byte[] GetBytes(ulong value); // 0x000000018039B260
	public static byte[] GetBytes(float value); // 0x000000018039B490
	public static byte[] GetBytes(double value); // 0x000000018039B6D0
	private static void PutBytes(void * dst, byte[] src, int start_index, int count); // 0x000000018039B9D0
	public static bool ToBoolean(byte[] value, int startIndex); // 0x000000018039C020
	public static char ToChar(byte[] value, int startIndex); // 0x000000018039C100
	public static short ToInt16(byte[] value, int startIndex); // 0x000000018039C460
	public static int ToInt32(byte[] value, int startIndex); // 0x000000018039C4F0
	public static long ToInt64(byte[] value, int startIndex); // 0x000000018039C570
	public static ushort ToUInt16(byte[] value, int startIndex); // 0x000000018039CA70
	public static uint ToUInt32(byte[] value, int startIndex); // 0x000000018039CB00
	public static ulong ToUInt64(byte[] value, int startIndex); // 0x000000018039CB80
	public static float ToSingle(byte[] value, int startIndex); // 0x000000018039C5F0
	public static double ToDouble(byte[] value, int startIndex); // 0x000000018039C190
	internal static double SwappableToDouble(byte[] value, int startIndex); // 0x000000018039BB20
	public static string ToString(byte[] value); // 0x000000018039C9E0
	public static string ToString(byte[] value, int startIndex); // 0x000000018039C940
	public static string ToString(byte[] value, int startIndex, int length); // 0x000000018039C680
}

// Namespace: System
public static class Buffer // TypeDefIndex: 1619
{
	// Methods
	public static int ByteLength(Array array); // 0x000000018039D4F0
	public static byte GetByte(Array array, int index); // 0x000000018039D5C0
	public static void SetByte(Array array, int index, byte value); // 0x000000018039D670
	public static void BlockCopy(Array src, int srcOffset, Array dst, int dstOffset, int count); // 0x000000018039D2A0
	private static int ByteLengthInternal(Array array); // 0x000000018039D4E0
	private static byte GetByteInternal(Array array, int index); // 0x000000018039D5B0
	private static void SetByteInternal(Array array, int index, int value); // 0x000000018039D660
	internal static bool BlockCopyInternal(Array src, int src_offset, Array dest, int dest_offset, int count); // 0x000000018039D290
}

// Namespace: System
[Serializable]
public class CannotUnloadAppDomainException : SystemException // TypeDefIndex: 1620
{
	// Fields
	private const int Result = -2146234347; // 0x00

	// Constructors
	public CannotUnloadAppDomainException(); // 0x000000018039DBA0
	public CannotUnloadAppDomainException(string message); // 0x000000018039DB80
	protected CannotUnloadAppDomainException(SerializationInfo info, StreamingContext context); // 0x000000018010E170
	public CannotUnloadAppDomainException(string message, Exception innerException); // 0x000000018039DB60

}

// Namespace: System
[Serializable]
public sealed class CharEnumerator : IEnumerator, IDisposable, ICloneable, IEnumerator`1<char> // TypeDefIndex: 1621
{
	// Fields
	private string str; // 0x10
	private int index; // 0x1C
	private int length; // 0x00

	// Properties
	private object System.Collections.IEnumerator.Current { get; } // 0x000000018039DCA0 
	public char Current { get; } // 0x000000018039DDB0 

	// Constructors
	internal CharEnumerator(string s); // 0x000000018039DD70

	// Methods
	private void System.IDisposable.Dispose(); // 0x00000001800EA7B0
	public object Clone(); // 0x000000018039DBF0
	public bool MoveNext(); // 0x000000018039DC80
	public void Reset(); // 0x0000000180142D40
}

// Namespace: System
public static class Console // TypeDefIndex: 1622
{
	// Fields
	internal static TextWriter stdout; // 0x00
	private static TextWriter stderr; // 0x10
	private static TextReader stdin; // 0x20
	private static Encoding inputEncoding; // 0x10
	private static Encoding outputEncoding; // 0x10

	// Properties
	public static TextWriter Error { get; } // 0x0000000180275020 
	public static TextWriter Out { get; } // 0x0000000180275140 
	public static TextReader In { get; } // 0x0000000180275080 
	public static Encoding InputEncoding { get; set; } // 0x00000001802750E0 0x0000000180275200
	public static Encoding OutputEncoding { get; set; } // 0x00000001802751A0 0x0000000180275280

	// Constructors
	private static Console(); // 0x0000000180274F10

	// Methods
	private static void SetEncodings(Encoding inputEncoding, Encoding outputEncoding); // 0x0000000180273020
	public static Stream OpenStandardError(); // 0x0000000180272C50
	private static Stream Open(IntPtr handle, FileAccess access, int bufferSize); // 0x0000000180272E60
	public static Stream OpenStandardError(int bufferSize); // 0x0000000180272BC0
	public static Stream OpenStandardInput(); // 0x0000000180272CA0
	public static Stream OpenStandardInput(int bufferSize); // 0x0000000180272CF0
	public static Stream OpenStandardOutput(); // 0x0000000180272E10
	public static Stream OpenStandardOutput(int bufferSize); // 0x0000000180272D80
	public static void SetError(TextWriter newError); // 0x00000001802733D0
	public static void SetIn(TextReader newIn); // 0x0000000180273470
	public static void SetOut(TextWriter newOut); // 0x0000000180273510
	public static void Write(bool value); // 0x0000000180274540
	public static void Write(char value); // 0x00000001802743B0
	public static void Write(char[] buffer); // 0x0000000180274D70
	public static void Write(Decimal value); // 0x0000000180274B20
	public static void Write(double value); // 0x0000000180274320
	public static void Write(int value); // 0x00000001802742A0
	public static void Write(long value); // 0x0000000180274C30
	public static void Write(object value); // 0x0000000180274BB0
	public static void Write(float value); // 0x00000001802744B0
	public static void Write(string value); // 0x0000000180274AA0
	public static void Write(uint value); // 0x0000000180274430
	public static void Write(ulong value); // 0x0000000180274DF0
	public static void Write(string format, object arg0); // 0x0000000180274A10
	public static void Write(string format, object[] arg); // 0x00000001802745C0
	public static void Write(char[] buffer, int index, int count); // 0x0000000180274650
	public static void Write(string format, object arg0, object arg1); // 0x0000000180274E70
	public static void Write(string format, object arg0, object arg1, object arg2); // 0x0000000180274CB0
	public static void Write(string format, object arg0, object arg1, object arg2, object arg3); // 0x00000001802746F0
	public static void WriteLine(); // 0x0000000180274190
	public static void WriteLine(bool value); // 0x0000000180273D10
	public static void WriteLine(char value); // 0x0000000180273C90
	public static void WriteLine(char[] buffer); // 0x0000000180274080
	public static void WriteLine(Decimal value); // 0x00000001802739D0
	public static void WriteLine(double value); // 0x0000000180273B80
	public static void WriteLine(int value); // 0x0000000180273B00
	public static void WriteLine(long value); // 0x0000000180273C10
	public static void WriteLine(object value); // 0x00000001802738D0
	public static void WriteLine(float value); // 0x0000000180273E50
	public static void WriteLine(string value); // 0x0000000180273950
	public static void WriteLine(uint value); // 0x0000000180273F60
	public static void WriteLine(ulong value); // 0x0000000180273EE0
	public static void WriteLine(string format, object arg0); // 0x0000000180274100
	public static void WriteLine(string format, object[] arg); // 0x0000000180274210
	public static void WriteLine(char[] buffer, int index, int count); // 0x0000000180273A60
	public static void WriteLine(string format, object arg0, object arg1); // 0x0000000180273FE0
	public static void WriteLine(string format, object arg0, object arg1, object arg2); // 0x0000000180273D90
	public static void WriteLine(string format, object arg0, object arg1, object arg2, object arg3); // 0x00000001802735B0
	public static int Read(); // 0x0000000180272FA0
	public static string ReadLine(); // 0x0000000180272F20
}

// Namespace: System
[Serializable]
public sealed class ConsoleCancelEventArgs : EventArgs // TypeDefIndex: 1623
{
	// Fields
	private bool cancel; // 0x10
	private ConsoleSpecialKey specialKey; // 0x10

	// Properties
	public bool Cancel { get; set; } // 0x0000000180113840 0x000000018018FBE0
	public ConsoleSpecialKey SpecialKey { get; } // 0x0000000180156360 

	// Constructors
	internal ConsoleCancelEventArgs(ConsoleSpecialKey key); // 0x0000000180272A90

}

// Namespace: System
[Serializable]
public enum ConsoleColor // TypeDefIndex: 1624
{
	Black = 0,
	DarkBlue = 1,
	DarkGreen = 2,
	DarkCyan = 3,
	DarkRed = 4,
	DarkMagenta = 5,
	DarkYellow = 6,
	Gray = 7,
	DarkGray = 8,
	Blue = 9,
	Green = 10,
	Cyan = 11,
	Red = 12,
	Magenta = 13,
	Yellow = 14,
	White = 15
}

// Namespace: System
[Serializable]
public enum ConsoleKey // TypeDefIndex: 1625
{
	Backspace = 8,
	Tab = 9,
	Clear = 12,
	Enter = 13,
	Pause = 19,
	Escape = 27,
	Spacebar = 32,
	PageUp = 33,
	PageDown = 34,
	End = 35,
	Home = 36,
	LeftArrow = 37,
	UpArrow = 38,
	RightArrow = 39,
	DownArrow = 40,
	Select = 41,
	Print = 42,
	Execute = 43,
	PrintScreen = 44,
	Insert = 45,
	Delete = 46,
	Help = 47,
	D0 = 48,
	D1 = 49,
	D2 = 50,
	D3 = 51,
	D4 = 52,
	D5 = 53,
	D6 = 54,
	D7 = 55,
	D8 = 56,
	D9 = 57,
	A = 65,
	B = 66,
	C = 67,
	D = 68,
	E = 69,
	F = 70,
	G = 71,
	H = 72,
	I = 73,
	J = 74,
	K = 75,
	L = 76,
	M = 77,
	N = 78,
	O = 79,
	P = 80,
	Q = 81,
	R = 82,
	S = 83,
	T = 84,
	U = 85,
	V = 86,
	W = 87,
	X = 88,
	Y = 89,
	Z = 90,
	LeftWindows = 91,
	RightWindows = 92,
	Applications = 93,
	Sleep = 95,
	NumPad0 = 96,
	NumPad1 = 97,
	NumPad2 = 98,
	NumPad3 = 99,
	NumPad4 = 100,
	NumPad5 = 101,
	NumPad6 = 102,
	NumPad7 = 103,
	NumPad8 = 104,
	NumPad9 = 105,
	Multiply = 106,
	Add = 107,
	Separator = 108,
	Subtract = 109,
	Decimal = 110,
	Divide = 111,
	F1 = 112,
	F2 = 113,
	F3 = 114,
	F4 = 115,
	F5 = 116,
	F6 = 117,
	F7 = 118,
	F8 = 119,
	F9 = 120,
	F10 = 121,
	F11 = 122,
	F12 = 123,
	F13 = 124,
	F14 = 125,
	F15 = 126,
	F16 = 127,
	F17 = 128,
	F18 = 129,
	F19 = 130,
	F20 = 131,
	F21 = 132,
	F22 = 133,
	F23 = 134,
	F24 = 135,
	BrowserBack = 166,
	BrowserForward = 167,
	BrowserRefresh = 168,
	BrowserStop = 169,
	BrowserSearch = 170,
	BrowserFavorites = 171,
	BrowserHome = 172,
	VolumeMute = 173,
	VolumeDown = 174,
	VolumeUp = 175,
	MediaNext = 176,
	MediaPrevious = 177,
	MediaStop = 178,
	MediaPlay = 179,
	LaunchMail = 180,
	LaunchMediaSelect = 181,
	LaunchApp1 = 182,
	LaunchApp2 = 183,
	Oem1 = 186,
	OemPlus = 187,
	OemComma = 188,
	OemMinus = 189,
	OemPeriod = 190,
	Oem2 = 191,
	Oem3 = 192,
	Oem4 = 219,
	Oem5 = 220,
	Oem6 = 221,
	Oem7 = 222,
	Oem8 = 223,
	Oem102 = 226,
	Process = 229,
	Packet = 231,
	Attention = 246,
	CrSel = 247,
	ExSel = 248,
	EraseEndOfFile = 249,
	Play = 250,
	Zoom = 251,
	NoName = 252,
	Pa1 = 253,
	OemClear = 254
}

// Namespace: System
[Serializable]
public struct ConsoleKeyInfo // TypeDefIndex: 1626
{
	// Fields
	internal static ConsoleKeyInfo Empty; // 0x00
	private ConsoleKey key; // 0x14
	private char keychar; // 0x10
	private ConsoleModifiers modifiers; // 0x00

	// Properties
	public ConsoleKey Key { get; } // 0x00000001800034B0 
	public char KeyChar { get; } // 0x000000018001A950 
	public ConsoleModifiers Modifiers { get; } // 0x0000000180016C80 

	// Constructors
	public ConsoleKeyInfo(char keyChar, ConsoleKey key, bool shift, bool alt, bool control); // 0x000000018001A920
	internal ConsoleKeyInfo(ConsoleKeyInfo other); // 0x000000018001A8F0
	private static ConsoleKeyInfo(); // 0x0000000180272AF0

	// Methods
	internal void SetKey(ConsoleKey key); // 0x0000000180006A40
	internal void SetKeyChar(char keyChar); // 0x000000018001A8C0
	internal void SetModifiers(bool shift, bool alt, bool control); // 0x000000018001A8D0
	public override bool Equals(object value); // 0x000000018001A6C0
	public bool Equals(ConsoleKeyInfo obj); // 0x000000018001A780
	public override int GetHashCode(); // 0x000000018001A7C0
	public static bool op_Equality(ConsoleKeyInfo a, ConsoleKeyInfo b); // 0x0000000180272B40
	public static bool op_Inequality(ConsoleKeyInfo a, ConsoleKeyInfo b); // 0x0000000180272B80
}

// Namespace: System
[Serializable]
public enum ConsoleModifiers // TypeDefIndex: 1627
{
	Alt = 1,
	Shift = 2,
	Control = 4
}

// Namespace: System
[Serializable]
public enum ConsoleSpecialKey // TypeDefIndex: 1628
{
	ControlC = 0,
	ControlBreak = 1
}

// Namespace: System
[Serializable]
public abstract class ContextBoundObject : MarshalByRefObject // TypeDefIndex: 1629
{
	// Constructors
	protected ContextBoundObject(); // 0x00000001800EAC90

}

// Namespace: System
[Serializable]
public class ContextMarshalException : SystemException // TypeDefIndex: 1630
{
	// Fields
	private const int Result = -2146233084; // 0x00

	// Constructors
	public ContextMarshalException(); // 0x0000000180275300
	public ContextMarshalException(string message); // 0x0000000180275350
	protected ContextMarshalException(SerializationInfo info, StreamingContext context); // 0x000000018010E170
	public ContextMarshalException(string message, Exception inner); // 0x0000000180275370

}

// Namespace: System
[Serializable]
public class ContextStaticAttribute : Attribute // TypeDefIndex: 1631
{
	// Constructors
	public ContextStaticAttribute(); // 0x00000001800EAC90

}

// Namespace: System
internal class ControlCharacters // TypeDefIndex: 1632
{
	// Fields
	public const int Intr = 0; // 0x00
	public const int Quit = 1; // 0x00
	public const int Erase = 2; // 0x00
	public const int Kill = 3; // 0x00
	public const int EOF = 4; // 0x00
	public const int Time = 5; // 0x00
	public const int Min = 6; // 0x00
	public const int SWTC = 7; // 0x00
	public const int Start = 8; // 0x00
	public const int Stop = 9; // 0x10
	public const int Susp = 10; // 0x10
	public const int EOL = 11; // 0x18
	public const int Reprint = 12; // 0x00
	public const int Discard = 13; // 0x10
	public const int WErase = 14; // 0x08
	public const int LNext = 15; // 0x20
	public const int EOL2 = 16; // 0x00

	// Constructors
	public ControlCharacters(); // 0x00000001800E2000

}

// Namespace: System
public static class Convert // TypeDefIndex: 1633
{
	// Fields
	private const int MaxBytesPerLine = 57; // 0x00
	public static readonly object DBNull; // 0x08
	private static readonly Type[] conversionTable; // 0x00

	// Constructors
	private static Convert(); // 0x000000018027F980

	// Methods
	private static byte[] InternalFromBase64String(string str, bool allowWhitespaceOnly); // 0x00000001802769E0
	private static byte[] InternalFromBase64CharArray(char[] arr, int offset, int length); // 0x00000001802769D0
	public static byte[] FromBase64CharArray(char[] inArray, int offset, int length); // 0x0000000180276750
	public static byte[] FromBase64String(string s); // 0x00000001802768B0
	public static TypeCode GetTypeCode(object value); // 0x0000000180276960
	public static bool IsDBNull(object value); // 0x00000001802769F0
	public static int ToBase64CharArray(byte[] inArray, int offsetIn, int length, char[] outArray, int offsetOut); // 0x0000000180276A60
	public static string ToBase64String(byte[] inArray); // 0x00000001802774E0
	public static string ToBase64String(byte[] inArray, int offset, int length); // 0x0000000180277190
	public static string ToBase64String(byte[] inArray, Base64FormattingOptions options); // 0x00000001802770E0
	public static string ToBase64String(byte[] inArray, int offset, int length, Base64FormattingOptions options); // 0x00000001802772E0
	public static int ToBase64CharArray(byte[] inArray, int offsetIn, int length, char[] outArray, int offsetOut, Base64FormattingOptions options); // 0x0000000180276C80
	private static StringBuilder ToBase64StringBuilderWithLine(byte[] inArray, int offset, int length); // 0x0000000180276F30
	public static bool ToBoolean(bool value); // 0x0000000180277670
	public static bool ToBoolean(byte value); // 0x0000000180277680
	public static bool ToBoolean(char value); // 0x0000000180277720
	public static bool ToBoolean(DateTime value); // 0x00000001802777C0
	public static bool ToBoolean(Decimal value); // 0x0000000180277690
	public static bool ToBoolean(double value); // 0x0000000180277830
	public static bool ToBoolean(float value); // 0x0000000180277660
	public static bool ToBoolean(int value); // 0x00000001802777A0
	public static bool ToBoolean(long value); // 0x00000001802777B0
	public static bool ToBoolean(sbyte value); // 0x0000000180277680
	public static bool ToBoolean(short value); // 0x0000000180277790
	public static bool ToBoolean(string value); // 0x0000000180277A40
	public static bool ToBoolean(string value, IFormatProvider provider); // 0x0000000180277900
	public static bool ToBoolean(uint value); // 0x00000001802777A0
	public static bool ToBoolean(ulong value); // 0x00000001802777B0
	public static bool ToBoolean(ushort value); // 0x0000000180277790
	public static bool ToBoolean(object value); // 0x0000000180277960
	public static bool ToBoolean(object value, IFormatProvider provider); // 0x0000000180277850
	public static byte ToByte(bool value); // 0x0000000180277C80
	public static byte ToByte(byte value); // 0x0000000180277670
	public static byte ToByte(char value); // 0x0000000180277B20
	public static byte ToByte(DateTime value); // 0x0000000180277C20
	public static byte ToByte(Decimal value); // 0x0000000180278110
	public static byte ToByte(double value); // 0x0000000180278320
	public static byte ToByte(float value); // 0x0000000180277C90
	public static byte ToByte(int value); // 0x0000000180277BA0
	public static byte ToByte(long value); // 0x0000000180278090
	public static byte ToByte(sbyte value); // 0x0000000180278010
	public static byte ToByte(short value); // 0x0000000180277ED0
	public static byte ToByte(string value); // 0x0000000180278000
	public static byte ToByte(string value, IFormatProvider provider); // 0x0000000180277E40
	public static byte ToByte(string value, int fromBase); // 0x0000000180277DA0
	public static byte ToByte(uint value); // 0x0000000180277E50
	public static byte ToByte(ulong value); // 0x00000001802782A0
	public static byte ToByte(ushort value); // 0x0000000180277AA0
	public static byte ToByte(object value); // 0x0000000180278420
	public static byte ToByte(object value, IFormatProvider provider); // 0x0000000180277F50
	public static char ToChar(bool value); // 0x0000000180278AB0
	public static char ToChar(byte value); // 0x0000000180277670
	public static char ToChar(char value); // 0x0000000180278880
	public static char ToChar(DateTime value); // 0x0000000180278A50
	public static char ToChar(Decimal value); // 0x0000000180278740
	public static char ToChar(double value); // 0x0000000180278820
	public static char ToChar(int value); // 0x00000001802786C0
	public static char ToChar(long value); // 0x0000000180278970
	public static char ToChar(float value); // 0x0000000180278500
	public static char ToChar(sbyte value); // 0x00000001802787A0
	public static char ToChar(short value); // 0x0000000180278640
	public static char ToChar(string value); // 0x00000001802785E0
	public static char ToChar(string value, IFormatProvider provider); // 0x00000001802789F0
	public static char ToChar(uint value); // 0x0000000180278560
	public static char ToChar(ulong value); // 0x0000000180278B10
	public static char ToChar(ushort value); // 0x0000000180278880
	public static char ToChar(object value); // 0x0000000180278890
	public static char ToChar(object value, IFormatProvider provider); // 0x0000000180278B90
	public static DateTime ToDateTime(string value); // 0x0000000180278EF0
	public static DateTime ToDateTime(string value, IFormatProvider provider); // 0x0000000180278C40
	public static DateTime ToDateTime(bool value); // 0x0000000180278D60
	public static DateTime ToDateTime(byte value); // 0x0000000180278E90
	public static DateTime ToDateTime(char value); // 0x0000000180278DC0
	public static DateTime ToDateTime(DateTime value); // 0x0000000180278E80
	public static DateTime ToDateTime(Decimal value); // 0x0000000180279370
	public static DateTime ToDateTime(double value); // 0x0000000180278E20
	public static DateTime ToDateTime(short value); // 0x0000000180279010
	public static DateTime ToDateTime(int value); // 0x0000000180278D00
	public static DateTime ToDateTime(long value); // 0x0000000180279130
	public static DateTime ToDateTime(float value); // 0x0000000180279070
	public static DateTime ToDateTime(object value); // 0x0000000180279430
	public static DateTime ToDateTime(object value, IFormatProvider provider); // 0x00000001802791F0
	public static DateTime ToDateTime(sbyte value); // 0x00000001802790D0
	public static DateTime ToDateTime(ushort value); // 0x0000000180279190
	public static DateTime ToDateTime(uint value); // 0x0000000180278FB0
	public static DateTime ToDateTime(ulong value); // 0x00000001802793D0
	public static Decimal ToDecimal(bool value); // 0x0000000180279770
	public static Decimal ToDecimal(byte value); // 0x00000001802798C0
	public static Decimal ToDecimal(char value); // 0x00000001802796B0
	public static Decimal ToDecimal(DateTime value); // 0x0000000180279710
	public static Decimal ToDecimal(Decimal value); // 0x0000000180278E80
	public static Decimal ToDecimal(double value); // 0x0000000180279930
	public static Decimal ToDecimal(float value); // 0x0000000180279B20
	public static Decimal ToDecimal(int value); // 0x0000000180279F10
	public static Decimal ToDecimal(long value); // 0x0000000180279DF0
	public static Decimal ToDecimal(sbyte value); // 0x00000001802795D0
	public static Decimal ToDecimal(short value); // 0x0000000180279640
	public static Decimal ToDecimal(string value); // 0x0000000180279B90
	public static Decimal ToDecimal(string value, IFormatProvider provider); // 0x0000000180279E60
	public static Decimal ToDecimal(uint value); // 0x0000000180279850
	public static Decimal ToDecimal(ulong value); // 0x00000001802797E0
	public static Decimal ToDecimal(ushort value); // 0x0000000180279C30
	public static Decimal ToDecimal(object value); // 0x00000001802799A0
	public static Decimal ToDecimal(object value, IFormatProvider provider); // 0x0000000180279CA0
	public static double ToDouble(bool value); // 0x000000018027A120
	public static double ToDouble(byte value); // 0x000000018027A2F0
	public static double ToDouble(char value); // 0x000000018027A0C0
	public static double ToDouble(DateTime value); // 0x0000000180279F80
	public static double ToDouble(Decimal value); // 0x0000000180279FF0
	public static double ToDouble(double value); // 0x00000001800EA7B0
	public static double ToDouble(float value); // 0x000000018027A310
	public static double ToDouble(int value); // 0x000000018027A070
	public static double ToDouble(long value); // 0x000000018027A0B0
	public static double ToDouble(sbyte value); // 0x000000018027A130
	public static double ToDouble(short value); // 0x0000000180279FE0
	public static double ToDouble(string value); // 0x000000018027A050
	public static double ToDouble(string value, IFormatProvider provider); // 0x000000018027A1F0
	public static double ToDouble(uint value); // 0x000000018027A060
	public static double ToDouble(ulong value); // 0x000000018027A080
	public static double ToDouble(ushort value); // 0x000000018027A300
	public static double ToDouble(object value); // 0x000000018027A210
	public static double ToDouble(object value, IFormatProvider provider); // 0x000000018027A140
	public static short ToInt16(bool value); // 0x0000000180277C80
	public static short ToInt16(byte value); // 0x0000000180277670
	public static short ToInt16(char value); // 0x000000018027A7B0
	public static short ToInt16(DateTime value); // 0x000000018027A750
	public static short ToInt16(Decimal value); // 0x000000018027A400
	public static short ToInt16(double value); // 0x000000018027ABA0
	public static short ToInt16(float value); // 0x000000018027A830
	public static short ToInt16(int value); // 0x000000018027A970
	public static short ToInt16(long value); // 0x000000018027AA00
	public static short ToInt16(sbyte value); // 0x000000018027A740
	public static short ToInt16(short value); // 0x0000000180278880
	public static short ToInt16(string value); // 0x000000018027A960
	public static short ToInt16(string value, IFormatProvider provider); // 0x000000018027AC50
	public static short ToInt16(string value, int fromBase); // 0x000000018027AA90
	public static short ToInt16(uint value); // 0x000000018027A8E0
	public static short ToInt16(ulong value); // 0x000000018027A590
	public static short ToInt16(ushort value); // 0x000000018027A6C0
	public static short ToInt16(object value); // 0x000000018027A320
	public static short ToInt16(object value, IFormatProvider provider); // 0x000000018027A610
	public static int ToInt32(bool value); // 0x0000000180277C80
	public static int ToInt32(byte value); // 0x0000000180277670
	public static int ToInt32(char value); // 0x0000000180278880
	public static int ToInt32(DateTime value); // 0x000000018027AFB0
	public static int ToInt32(Decimal value); // 0x000000018027B0C0
	public static int ToInt32(double value); // 0x000000018027AE60
	public static int ToInt32(float value); // 0x000000018027B250
	public static int ToInt32(int value); // 0x0000000180129DF0
	public static int ToInt32(long value); // 0x000000018027AD40
	public static int ToInt32(sbyte value); // 0x000000018027A740
	public static int ToInt32(short value); // 0x000000018027ADE0
	public static int ToInt32(string value); // 0x000000018027ADD0
	public static int ToInt32(string value, IFormatProvider provider); // 0x000000018027B3A0
	public static int ToInt32(string value, int fromBase); // 0x000000018027ADF0
	public static int ToInt32(uint value); // 0x000000018027AF30
	public static int ToInt32(ulong value); // 0x000000018027B320
	public static int ToInt32(ushort value); // 0x0000000180278880
	public static int ToInt32(object value); // 0x000000018027AC60
	public static int ToInt32(object value, IFormatProvider provider); // 0x000000018027B010
	public static long ToInt64(bool value); // 0x0000000180277C80
	public static long ToInt64(byte value); // 0x0000000180277670
	public static long ToInt64(char value); // 0x0000000180278880
	public static long ToInt64(DateTime value); // 0x000000018027B3C0
	public static long ToInt64(Decimal value); // 0x000000018027B7D0
	public static long ToInt64(double value); // 0x000000018027B420
	public static long ToInt64(float value); // 0x000000018027B700
	public static long ToInt64(int value); // 0x0000000180129DE0
	public static long ToInt64(long value); // 0x0000000180123590
	public static long ToInt64(sbyte value); // 0x000000018027B560
	public static long ToInt64(short value); // 0x000000018027B7C0
	public static long ToInt64(string value); // 0x000000018027B7B0
	public static long ToInt64(string value, IFormatProvider provider); // 0x000000018027B3B0
	public static long ToInt64(string value, int fromBase); // 0x000000018027B990
	public static long ToInt64(uint value); // 0x0000000180129DF0
	public static long ToInt64(ulong value); // 0x000000018027B4D0
	public static long ToInt64(ushort value); // 0x0000000180278880
	public static long ToInt64(object value); // 0x000000018027B570
	public static long ToInt64(object value, IFormatProvider provider); // 0x000000018027B650
	public static sbyte ToSByte(bool value); // 0x0000000180277C80
	public static sbyte ToSByte(byte value); // 0x000000018027C0F0
	public static sbyte ToSByte(char value); // 0x000000018027C200
	public static sbyte ToSByte(DateTime value); // 0x000000018027C380
	public static sbyte ToSByte(Decimal value); // 0x000000018027BA00
	public static sbyte ToSByte(double value); // 0x000000018027C040
	public static sbyte ToSByte(float value); // 0x000000018027BD20
	public static sbyte ToSByte(int value); // 0x000000018027C170
	public static sbyte ToSByte(long value); // 0x000000018027BB90
	public static sbyte ToSByte(sbyte value); // 0x0000000180277670
	public static sbyte ToSByte(short value); // 0x000000018027C3E0
	public static sbyte ToSByte(string value); // 0x000000018027C030
	public static sbyte ToSByte(string value, IFormatProvider provider); // 0x000000018027C280
	public static sbyte ToSByte(string value, int fromBase); // 0x000000018027BF60
	public static sbyte ToSByte(uint value); // 0x000000018027BCA0
	public static sbyte ToSByte(ulong value); // 0x000000018027C300
	public static sbyte ToSByte(ushort value); // 0x000000018027BC20
	public static sbyte ToSByte(object value); // 0x000000018027BDD0
	public static sbyte ToSByte(object value, IFormatProvider provider); // 0x000000018027BEB0
	public static float ToSingle(bool value); // 0x000000018027C640
	public static float ToSingle(byte value); // 0x000000018027C630
	public static float ToSingle(char value); // 0x000000018027C510
	public static float ToSingle(DateTime value); // 0x000000018027C790
	public static float ToSingle(Decimal value); // 0x000000018027C480
	public static float ToSingle(double value); // 0x000000018027C4E0
	public static float ToSingle(float value); // 0x00000001800EA7B0
	public static float ToSingle(int value); // 0x000000018027C470
	public static float ToSingle(long value); // 0x000000018027C680
	public static float ToSingle(sbyte value); // 0x000000018027C4F0
	public static float ToSingle(short value); // 0x000000018027C570
	public static float ToSingle(string value); // 0x000000018027C690
	public static float ToSingle(string value, IFormatProvider provider); // 0x000000018027C7F0
	public static float ToSingle(uint value); // 0x000000018027C780
	public static float ToSingle(ulong value); // 0x000000018027C650
	public static float ToSingle(ushort value); // 0x000000018027C500
	public static float ToSingle(object value); // 0x000000018027C6A0
	public static float ToSingle(object value, IFormatProvider provider); // 0x000000018027C580
	public static string ToString(bool value); // 0x000000018027CC20
	public static string ToString(bool value, IFormatProvider provider); // 0x000000018027CC20
	public static string ToString(byte value); // 0x000000018027CBA0
	public static string ToString(byte value, IFormatProvider provider); // 0x000000018027CC00
	public static string ToString(byte value, int toBase); // 0x000000018027D1A0
	public static string ToString(char value); // 0x000000018027CBC0
	public static string ToString(char value, IFormatProvider provider); // 0x000000018027CBC0
	public static string ToString(DateTime value); // 0x000000018027CA30
	public static string ToString(DateTime value, IFormatProvider provider); // 0x000000018027D390
	public static string ToString(Decimal value); // 0x000000018027C9C0
	public static string ToString(Decimal value, IFormatProvider provider); // 0x000000018027D350
	public static string ToString(double value); // 0x000000018027CF90
	public static string ToString(double value, IFormatProvider provider); // 0x000000018027D330
	public static string ToString(float value); // 0x000000018027CB80
	public static string ToString(float value, IFormatProvider provider); // 0x000000018027D3B0
	public static string ToString(int value); // 0x000000018027CF70
	public static string ToString(int value, int toBase); // 0x000000018027CC80
	public static string ToString(int value, IFormatProvider provider); // 0x000000018027CBE0
	public static string ToString(long value); // 0x000000018027CFF0
	public static string ToString(long value, int toBase); // 0x000000018027D010
	public static string ToString(long value, IFormatProvider provider); // 0x000000018027CC60
	public static string ToString(object value); // 0x000000018027CE00
	public static string ToString(object value, IFormatProvider provider); // 0x000000018027CA60
	public static string ToString(sbyte value); // 0x000000018027CF50
	public static string ToString(sbyte value, IFormatProvider provider); // 0x000000018027CA10
	public static string ToString(short value); // 0x000000018027C9D0
	public static string ToString(short value, int toBase); // 0x000000018027C830
	public static string ToString(short value, IFormatProvider provider); // 0x000000018027CFB0
	public static string ToString(string value); // 0x0000000180123590
	public static string ToString(string value, IFormatProvider provider); // 0x0000000180123590
	public static string ToString(uint value); // 0x000000018027C810
	public static string ToString(uint value, IFormatProvider provider); // 0x000000018027C9F0
	public static string ToString(ulong value); // 0x000000018027CFD0
	public static string ToString(ulong value, IFormatProvider provider); // 0x000000018027CA40
	public static string ToString(ushort value); // 0x000000018027D370
	public static string ToString(ushort value, IFormatProvider provider); // 0x000000018027CC40
	public static ushort ToUInt16(bool value); // 0x0000000180277C80
	public static ushort ToUInt16(byte value); // 0x0000000180277670
	public static ushort ToUInt16(char value); // 0x0000000180278880
	public static ushort ToUInt16(DateTime value); // 0x000000018027E810
	public static ushort ToUInt16(Decimal value); // 0x000000018027E520
	public static ushort ToUInt16(double value); // 0x000000018027E1F0
	public static ushort ToUInt16(float value); // 0x000000018027E870
	public static ushort ToUInt16(int value); // 0x000000018027E420
	public static ushort ToUInt16(long value); // 0x000000018027E2A0
	public static ushort ToUInt16(sbyte value); // 0x000000018027E320
	public static ushort ToUInt16(short value); // 0x000000018027E6B0
	public static ushort ToUInt16(string value); // 0x000000018027E120
	public static ushort ToUInt16(string value, IFormatProvider provider); // 0x000000018027E130
	public static ushort ToUInt16(string value, int fromBase); // 0x000000018027E920
	public static ushort ToUInt16(uint value); // 0x000000018027E3A0
	public static ushort ToUInt16(ulong value); // 0x000000018027E4A0
	public static ushort ToUInt16(ushort value); // 0x0000000180278880
	public static ushort ToUInt16(object value); // 0x000000018027E730
	public static ushort ToUInt16(object value, IFormatProvider provider); // 0x000000018027E140
	public static uint ToUInt32(bool value); // 0x0000000180277C80
	public static uint ToUInt32(byte value); // 0x0000000180277670
	public static uint ToUInt32(char value); // 0x0000000180278880
	public static uint ToUInt32(DateTime value); // 0x000000018027F190
	public static uint ToUInt32(Decimal value); // 0x000000018027E9F0
	public static uint ToUInt32(double value); // 0x000000018027EBA0
	public static uint ToUInt32(float value); // 0x000000018027EF00
	public static uint ToUInt32(int value); // 0x000000018027ED40
	public static uint ToUInt32(long value); // 0x000000018027EC50
	public static uint ToUInt32(sbyte value); // 0x000000018027F110
	public static uint ToUInt32(short value); // 0x000000018027EDC0
	public static uint ToUInt32(string value); // 0x000000018027F1F0
	public static uint ToUInt32(string value, IFormatProvider provider); // 0x000000018027EE40
	public static uint ToUInt32(string value, int fromBase); // 0x000000018027ECD0
	public static uint ToUInt32(uint value); // 0x0000000180129DF0
	public static uint ToUInt32(ulong value); // 0x000000018027EFB0
	public static uint ToUInt32(ushort value); // 0x0000000180278880
	public static uint ToUInt32(object value); // 0x000000018027F030
	public static uint ToUInt32(object value, IFormatProvider provider); // 0x000000018027EE50
	public static ulong ToUInt64(bool value); // 0x0000000180277C80
	public static ulong ToUInt64(byte value); // 0x0000000180277670
	public static ulong ToUInt64(char value); // 0x0000000180278880
	public static ulong ToUInt64(DateTime value); // 0x000000018027F490
	public static ulong ToUInt64(Decimal value); // 0x000000018027F200
	public static ulong ToUInt64(double value); // 0x000000018027F7E0
	public static ulong ToUInt64(float value); // 0x000000018027F4F0
	public static ulong ToUInt64(int value); // 0x000000018027F760
	public static ulong ToUInt64(long value); // 0x000000018027F900
	public static ulong ToUInt64(sbyte value); // 0x000000018027F6E0
	public static ulong ToUInt64(short value); // 0x000000018027F5A0
	public static ulong ToUInt64(string value); // 0x000000018027F6D0
	public static ulong ToUInt64(string value, IFormatProvider provider); // 0x000000018027F750
	public static ulong ToUInt64(string value, int fromBase); // 0x000000018027F890
	public static ulong ToUInt64(uint value); // 0x0000000180129DF0
	public static ulong ToUInt64(ulong value); // 0x0000000180123590
	public static ulong ToUInt64(ushort value); // 0x0000000180278880
	public static ulong ToUInt64(object value); // 0x000000018027F3B0
	public static ulong ToUInt64(object value, IFormatProvider provider); // 0x000000018027F620
	public static object ChangeType(object value, Type conversionType); // 0x00000001802755C0
	public static object ChangeType(object value, TypeCode typeCode); // 0x0000000180275390
	public static object ChangeType(object value, Type conversionType, IFormatProvider provider); // 0x0000000180275720
	public static object ChangeType(object value, TypeCode typeCode, IFormatProvider provider); // 0x0000000180275500
	private static bool NotValidBase(int value); // 0x0000000180276A40
	private static int ConvertFromBase(string value, int fromBase, bool unsigned); // 0x0000000180275CC0
	private static long ConvertFromBase64(string value, int fromBase, bool unsigned); // 0x00000001802757E0
	private static void EndianSwap(byte[] value); // 0x0000000180276680
	private static string ConvertToBase2(byte[] value); // 0x0000000180276350
	private static string ConvertToBase8(byte[] value); // 0x00000001802764A0
	private static string ConvertToBase16(byte[] value); // 0x00000001802761A0
	internal static object ToType(object value, Type conversionType, IFormatProvider provider, bool try_target_to_type); // 0x000000018027D3D0
}

// Namespace: System
[Serializable]
public sealed class DBNull : IConvertible, ISerializable // TypeDefIndex: 1634
{
	// Fields
	public static readonly DBNull Value; // 0x00

	// Constructors
	private DBNull(); // 0x00000001800E2000
	private DBNull(SerializationInfo info, StreamingContext context); // 0x000000018035A610
	private static DBNull(); // 0x000000018035A5B0

	// Methods
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x0000000180359F70
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x0000000180359FC0
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x000000018035A010
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x000000018035A060
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x000000018035A0B0
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x000000018035A100
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x000000018035A150
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x000000018035A1A0
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x000000018035A1F0
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x000000018035A240
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x000000018035A290
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x000000018035A2E0
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x000000018035A400
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x000000018035A450
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x000000018035A4A0
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0000000180359F50
	public TypeCode GetTypeCode(); // 0x00000001801ADE70
	public override string ToString(); // 0x000000018035A4F0
	public string ToString(IFormatProvider provider); // 0x000000018035A550
}

// Namespace: System
[Serializable]
public sealed class DataMisalignedException : SystemException // TypeDefIndex: 1635
{
	// Fields
	private const int Result = -2146233023; // 0x00

	// Constructors
	public DataMisalignedException(); // 0x000000018035A670
	public DataMisalignedException(string message); // 0x000000018035A6E0
	public DataMisalignedException(string message, Exception innerException); // 0x000000018035A6C0

}

// Namespace: System
[Serializable]
public struct DateTime : IFormattable, IConvertible, IComparable, IComparable`1<DateTime>, IEquatable`1<DateTime> // TypeDefIndex: 1636
{
	// Fields
	private const int dp400 = 146097; // 0x00
	private const int dp100 = 36524; // 0x00
	private const int dp4 = 1461; // 0x00
	private const long w32file_epoch = 504911232000000000; // 0x00
	private const long MAX_VALUE_TICKS = 3155378975999999999; // 0x00
	internal const long UnixEpoch = 621355968000000000; // 0x10
	private const long ticks18991230 = 599264352000000000; // 0x00
	private const double OAMinValue = -657435; // 0x20
	private const double OAMaxValue = 2958466; // 0x30
	private const string formatExceptionMessage = "String was not recognized as a valid DateTime."; // 0x40
	private TimeSpan ticks; // 0x50
	private DateTimeKind kind; // 0x60
	public static readonly DateTime MaxValue; // 0x70
	public static readonly DateTime MinValue; // 0x10
	private static readonly string[] ParseTimeFormats; // 0x00
	private static readonly string[] ParseYearDayMonthFormats; // 0x00
	private static readonly string[] ParseYearMonthDayFormats; // 0x10
	private static readonly string[] ParseDayMonthYearFormats; // 0x00
	private static readonly string[] ParseMonthDayYearFormats; // 0x00
	private static readonly string[] MonthDayShortFormats; // 0x10
	private static readonly string[] DayMonthShortFormats; // 0x10
	private static readonly int[] daysmonth; // 0x00
	private static readonly int[] daysmonthleap; // 0x00
	private static object to_local_time_span_object; // 0x00
	private static long last_now; // 0x10

	// Properties
	public DateTime Date { get; } // 0x00000001800201F0 
	public int Month { get; } // 0x000000018001EF90 
	public int Day { get; } // 0x000000018001EEA0 
	public DayOfWeek DayOfWeek { get; } // 0x000000018001EE50 
	public int DayOfYear { get; } // 0x000000018001EE90 
	public TimeSpan TimeOfDay { get; } // 0x000000018001EFB0 
	public int Hour { get; } // 0x000000018001EEB0 
	public int Minute { get; } // 0x000000018001EF80 
	public int Second { get; } // 0x000000018001EFA0 
	public int Millisecond { get; } // 0x000000018001EF70 
	public static DateTime Now { get; } // 0x000000018036A170 
	public long Ticks { get; } // 0x0000000180002060 
	public static DateTime Today { get; } // 0x000000018036A480 
	public static DateTime UtcNow { get; } // 0x000000018036A560 
	public int Year { get; } // 0x000000018001F010 
	public DateTimeKind Kind { get; } // 0x0000000180016C80 

	// Constructors
	public DateTime(long ticks); // 0x0000000180020140
	public DateTime(int year, int month, int day); // 0x00000001800201B0
	public DateTime(int year, int month, int day, int hour, int minute, int second); // 0x000000018001FE70
	public DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond); // 0x00000001800201E0
	public DateTime(int year, int month, int day, Calendar calendar); // 0x0000000180020030
	public DateTime(int year, int month, int day, int hour, int minute, int second, Calendar calendar); // 0x0000000180020160
	public DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, Calendar calendar); // 0x0000000180020020
	internal DateTime(bool check, TimeSpan value); // 0x0000000180020150
	public DateTime(long ticks, DateTimeKind kind); // 0x0000000180020130
	public DateTime(int year, int month, int day, int hour, int minute, int second, DateTimeKind kind); // 0x000000018001FF70
	public DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind); // 0x000000018001FEB0
	public DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, Calendar calendar, DateTimeKind kind); // 0x0000000180020070
	private static DateTime(); // 0x0000000180367CE0

	// Methods
	private bool System.IConvertible.ToBoolean(IFormatProvider provider); // 0x000000018001F810
	private byte System.IConvertible.ToByte(IFormatProvider provider); // 0x000000018001F820
	private char System.IConvertible.ToChar(IFormatProvider provider); // 0x000000018001F830
	private DateTime System.IConvertible.ToDateTime(IFormatProvider provider); // 0x0000000180002680
	private Decimal System.IConvertible.ToDecimal(IFormatProvider provider); // 0x000000018001F840
	private double System.IConvertible.ToDouble(IFormatProvider provider); // 0x000000018001F860
	private short System.IConvertible.ToInt16(IFormatProvider provider); // 0x000000018001F870
	private int System.IConvertible.ToInt32(IFormatProvider provider); // 0x000000018001F880
	private long System.IConvertible.ToInt64(IFormatProvider provider); // 0x000000018001F890
	private sbyte System.IConvertible.ToSByte(IFormatProvider provider); // 0x000000018001F8A0
	private float System.IConvertible.ToSingle(IFormatProvider provider); // 0x000000018001F8B0
	private object System.IConvertible.ToType(Type targetType, IFormatProvider provider); // 0x000000018001F8C0
	private ushort System.IConvertible.ToUInt16(IFormatProvider provider); // 0x000000018001FA60
	private uint System.IConvertible.ToUInt32(IFormatProvider provider); // 0x000000018001FA70
	private ulong System.IConvertible.ToUInt64(IFormatProvider provider); // 0x000000018001FA80
	private static int AbsoluteDays(int year, int month, int day); // 0x00000001803609F0
	private int FromTicks(Which what); // 0x000000018001F520
	internal static long GetTimeMonotonic(); // 0x0000000180362ED0
	internal static long GetNow(); // 0x0000000180362EC0
	public DateTime Add(TimeSpan value); // 0x000000018001F1F0
	public DateTime AddDays(double value); // 0x000000018001F020
	public DateTime AddTicks(long value); // 0x000000018001F190
	public DateTime AddHours(double value); // 0x000000018001F070
	public DateTime AddMilliseconds(double value); // 0x000000018001F0B0
	private DateTime AddRoundedMilliseconds(double ms); // 0x000000018001F130
	public DateTime AddMinutes(double value); // 0x000000018001F0D0
	public DateTime AddMonths(int months); // 0x000000018001F110
	public DateTime AddSeconds(double value); // 0x000000018001F150
	public DateTime AddYears(int value); // 0x000000018001F1B0
	public static int Compare(DateTime t1, DateTime t2); // 0x00000001803615C0
	public int CompareTo(object value); // 0x000000018001F240
	public bool IsDaylightSavingTime(); // 0x000000018001F6F0
	public int CompareTo(DateTime value); // 0x000000018001F220
	public bool Equals(DateTime value); // 0x000000018001F4B0
	public long ToBinary(); // 0x000000018001FA90
	public static DateTime FromBinary(long dateData); // 0x0000000180362390
	public static DateTime SpecifyKind(DateTime value, DateTimeKind kind); // 0x0000000180363C40
	public static int DaysInMonth(int year, int month); // 0x00000001803620A0
	public override bool Equals(object value); // 0x000000018001F3F0
	public static bool Equals(DateTime t1, DateTime t2); // 0x0000000180362200
	public static DateTime FromFileTime(long fileTime); // 0x0000000180362590
	public static DateTime FromFileTimeUtc(long fileTime); // 0x00000001803624F0
	public static DateTime FromOADate(double d); // 0x00000001803626B0
	public string[] GetDateTimeFormats(); // 0x000000018001F530
	public string[] GetDateTimeFormats(char format); // 0x000000018001F5A0
	public string[] GetDateTimeFormats(IFormatProvider provider); // 0x000000018001F590
	public string[] GetDateTimeFormats(char format, IFormatProvider provider); // 0x000000018001F6D0
	private string[] GetDateTimeFormats(bool adjustutc, string[] patterns, DateTimeFormatInfo dfi); // 0x000000018001F6C0
	private void CheckDateTimeKind(DateTimeKind kind); // 0x000000018001F210
	public override int GetHashCode(); // 0x00000001800034B0
	public TypeCode GetTypeCode(); // 0x000000018001F6E0
	public static bool IsLeapYear(int year); // 0x0000000180362EE0
	public static DateTime Parse(string s); // 0x0000000180363AB0
	public static DateTime Parse(string s, IFormatProvider provider); // 0x0000000180363950
	public static DateTime Parse(string s, IFormatProvider provider, DateTimeStyles styles); // 0x0000000180363840
	internal static bool CoreParse(string s, IFormatProvider provider, DateTimeStyles styles, out DateTime result, out DateTimeOffset dto, bool setExceptionOnError, Exception exception); // 0x0000000180361680
	public static DateTime ParseExact(string s, string format, IFormatProvider provider); // 0x00000001803636B0
	private static string[] YearMonthDayFormats(DateTimeFormatInfo dfi, bool setExceptionOnError, Exception exc); // 0x0000000180364B00
	private static int _ParseNumber(string s, int valuePos, int min_digits, int digits, bool leadingzero, bool sloppy_parsing, out int num_parsed); // 0x0000000180367920
	private static int _ParseEnum(string s, int sPos, string[] values, string[] invValues, bool exact, out int num_parsed); // 0x0000000180367630
	private static bool _ParseString(string s, int sPos, int maxlength, string value, out int num_parsed); // 0x0000000180367AB0
	private static bool _ParseAmPm(string s, int valuePos, int num, DateTimeFormatInfo dfi, bool exact, out int num_parsed, int ampm); // 0x00000001803671B0
	private static bool _ParseTimeSeparator(string s, int sPos, DateTimeFormatInfo dfi, bool exact, out int num_parsed); // 0x0000000180367BD0
	private static bool _ParseDateSeparator(string s, int sPos, DateTimeFormatInfo dfi, bool exact, out int num_parsed); // 0x00000001803674C0
	private static bool IsLetter(string s, int pos); // 0x0000000180362FA0
	private static bool _DoParse(string s, string firstPart, string secondPart, bool exact, out DateTime result, out DateTimeOffset dto, DateTimeFormatInfo dfi, DateTimeStyles style, bool firstPartIsDate, bool incompleteFormat, bool longYear); // 0x0000000180364E70
	public static DateTime ParseExact(string s, string format, IFormatProvider provider, DateTimeStyles style); // 0x0000000180363030
	public static DateTime ParseExact(string s, string[] formats, IFormatProvider provider, DateTimeStyles style); // 0x0000000180363190
	private static void CheckStyle(DateTimeStyles style); // 0x0000000180361260
	public static bool TryParse(string s, out DateTime result); // 0x00000001803648D0
	public static bool TryParse(string s, IFormatProvider provider, DateTimeStyles styles, out DateTime result); // 0x00000001803649E0
	public static bool TryParseExact(string s, string format, IFormatProvider provider, DateTimeStyles style, out DateTime result); // 0x00000001803647D0
	public static bool TryParseExact(string s, string[] formats, IFormatProvider provider, DateTimeStyles style, out DateTime result); // 0x00000001803646A0
	private static bool ParseExact(string s, string[] formats, DateTimeFormatInfo dfi, DateTimeStyles style, out DateTime ret, bool exact, bool longYear, bool setExceptionOnError, Exception exception); // 0x0000000180363430
	public TimeSpan Subtract(DateTime value); // 0x000000018001F780
	public DateTime Subtract(TimeSpan value); // 0x000000018001F7F0
	public long ToFileTime(); // 0x000000018001FBE0
	public long ToFileTimeUtc(); // 0x000000018001FB60
	public string ToLongDateString(); // 0x000000018001FC10
	public string ToLongTimeString(); // 0x000000018001FC50
	public double ToOADate(); // 0x000000018001FC90
	public string ToShortDateString(); // 0x000000018001FD50
	public string ToShortTimeString(); // 0x000000018001FD90
	public override string ToString(); // 0x000000018001FDF0
	public string ToString(IFormatProvider provider); // 0x000000018001FDD0
	public string ToString(string format); // 0x000000018001FE30
	public string ToString(string format, IFormatProvider provider); // 0x000000018001FE40
	public DateTime ToLocalTime(); // 0x000000018001FBF0
	public DateTime ToUniversalTime(); // 0x000000018001FE50
	public static DateTime op_Addition(DateTime d, TimeSpan t); // 0x000000018036A600
	public static bool op_Equality(DateTime d1, DateTime d2); // 0x000000018036A690
	public static bool op_GreaterThan(DateTime t1, DateTime t2); // 0x000000018036A770
	public static bool op_GreaterThanOrEqual(DateTime t1, DateTime t2); // 0x000000018036A700
	public static bool op_Inequality(DateTime d1, DateTime d2); // 0x000000018036A7E0
	public static bool op_LessThan(DateTime t1, DateTime t2); // 0x000000018036A8C0
	public static bool op_LessThanOrEqual(DateTime t1, DateTime t2); // 0x000000018036A850
	public static TimeSpan op_Subtraction(DateTime d1, DateTime d2); // 0x000000018036A9C0
	public static DateTime op_Subtraction(DateTime d, TimeSpan t); // 0x000000018036A930
}

// Namespace: 
private enum Which // TypeDefIndex: 1637
{
	Day = 0,
	DayYear = 1,
	Month = 2,
	Year = 3
}

// Namespace: System
[Serializable]
public enum DateTimeKind // TypeDefIndex: 1638
{
	Unspecified = 0,
	Utc = 1,
	Local = 2
}

// Namespace: System
[Serializable]
public struct DateTimeOffset : IFormattable, IComparable, ISerializable, IComparable`1<DateTimeOffset>, IEquatable`1<DateTimeOffset>, IDeserializationCallback // TypeDefIndex: 1639
{
	// Fields
	public static readonly DateTimeOffset MaxValue; // 0x00
	public static readonly DateTimeOffset MinValue; // 0x10
	private DateTime dt; // 0x10
	private TimeSpan utc_offset; // 0x00

	// Properties
	public DateTime Date { get; } // 0x000000018001ED40 
	public DateTime DateTime { get; } // 0x000000018001ED20 
	public int Day { get; } // 0x000000018001EEA0 
	public DayOfWeek DayOfWeek { get; } // 0x000000018001EE50 
	public int DayOfYear { get; } // 0x000000018001EE90 
	public int Hour { get; } // 0x000000018001EEB0 
	public DateTime LocalDateTime { get; } // 0x000000018001EEC0 
	public int Millisecond { get; } // 0x000000018001EF70 
	public int Minute { get; } // 0x000000018001EF80 
	public int Month { get; } // 0x000000018001EF90 
	public static DateTimeOffset Now { get; } // 0x000000018035EFA0 
	public TimeSpan Offset { get; } // 0x0000000180002050 
	public int Second { get; } // 0x000000018001EFA0 
	public long Ticks { get; } // 0x0000000180002060 
	public TimeSpan TimeOfDay { get; } // 0x000000018001EFB0 
	public DateTime UtcDateTime { get; } // 0x000000018001EFD0 
	public static DateTimeOffset UtcNow { get; } // 0x000000018035F1C0 
	public long UtcTicks { get; } // 0x000000018001EFF0 
	public int Year { get; } // 0x000000018001F010 

	// Constructors
	public DateTimeOffset(DateTime dateTime); // 0x000000018001ECE0
	public DateTimeOffset(DateTime dateTime, TimeSpan offset); // 0x000000018001ED00
	public DateTimeOffset(long ticks, TimeSpan offset); // 0x000000018001EC10
	public DateTimeOffset(int year, int month, int day, int hour, int minute, int second, TimeSpan offset); // 0x000000018001EC60
	public DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, TimeSpan offset); // 0x000000018001E950
	public DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, Calendar calendar, TimeSpan offset); // 0x000000018001E9D0
	private DateTimeOffset(SerializationInfo info, StreamingContext context); // 0x000000018001EA60
	private static DateTimeOffset(); // 0x000000018035E600

	// Methods
	private int System.IComparable.CompareTo(object obj); // 0x000000018001E780
	private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context); // 0x000000018001E840
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender); // 0x00000001800025C0
	public DateTimeOffset Add(TimeSpan timeSpan); // 0x000000018001E420
	public DateTimeOffset AddDays(double days); // 0x000000018001E0A0
	public DateTimeOffset AddHours(double hours); // 0x000000018001E110
	public DateTimeOffset AddMilliseconds(double milliseconds); // 0x000000018001E170
	public DateTimeOffset AddMinutes(double minutes); // 0x000000018001E1D0
	public DateTimeOffset AddMonths(int months); // 0x000000018001E230
	public DateTimeOffset AddSeconds(double seconds); // 0x000000018001E290
	public DateTimeOffset AddTicks(long ticks); // 0x000000018001E2F0
	public DateTimeOffset AddYears(int years); // 0x000000018001E3C0
	public static int Compare(DateTimeOffset first, DateTimeOffset second); // 0x000000018035A840
	public int CompareTo(DateTimeOffset other); // 0x000000018001E440
	public bool Equals(DateTimeOffset other); // 0x000000018001E5A0
	public override bool Equals(object obj); // 0x000000018001E5D0
	public static bool Equals(DateTimeOffset first, DateTimeOffset second); // 0x000000018035C350
	public bool EqualsExact(DateTimeOffset other); // 0x000000018001E4B0
	public static DateTimeOffset FromFileTime(long fileTime); // 0x000000018035C380
	public override int GetHashCode(); // 0x000000018001E710
	public static DateTimeOffset Parse(string input); // 0x000000018035D360
	public static DateTimeOffset Parse(string input, IFormatProvider formatProvider); // 0x000000018035D2C0
	public static DateTimeOffset Parse(string input, IFormatProvider formatProvider, DateTimeStyles styles); // 0x000000018035D430
	public static DateTimeOffset ParseExact(string input, string format, IFormatProvider formatProvider); // 0x000000018035CA20
	public static DateTimeOffset ParseExact(string input, string format, IFormatProvider formatProvider, DateTimeStyles styles); // 0x000000018035CEE0
	public static DateTimeOffset ParseExact(string input, string[] formats, IFormatProvider formatProvider, DateTimeStyles styles); // 0x000000018035CAD0
	private static bool ParseExact(string input, string[] formats, DateTimeFormatInfo dfi, DateTimeStyles styles, out DateTimeOffset ret); // 0x000000018035C820
	private static bool DoParse(string input, string format, bool exact, out DateTimeOffset result, DateTimeFormatInfo dfi, DateTimeStyles styles); // 0x000000018035A8A0
	private static int ParseNumber(string input, int pos, int digits, bool leading_zero, bool allow_leading_white, out int result); // 0x000000018035D0C0
	private static int ParseNumber(string input, int pos, int digits, bool leading_zero, bool allow_leading_white, out int result, out int digit_parsed); // 0x000000018035D170
	private static int ParseEnum(string input, int pos, string[] enums, bool allow_leading_white, out int result); // 0x000000018035C710
	private static int ParseChar(string input, int pos, char c, bool allow_leading_white, out int result); // 0x000000018035C670
	public TimeSpan Subtract(DateTimeOffset value); // 0x000000018001E750
	public DateTimeOffset Subtract(TimeSpan value); // 0x000000018001E730
	public long ToFileTime(); // 0x000000018001E860
	public DateTimeOffset ToLocalTime(); // 0x000000018001E890
	public DateTimeOffset ToOffset(TimeSpan offset); // 0x000000018001E8B0
	public override string ToString(); // 0x000000018001E910
	public string ToString(IFormatProvider formatProvider); // 0x000000018001E8F0
	public string ToString(string format); // 0x000000018001E8E0
	public string ToString(string format, IFormatProvider formatProvider); // 0x000000018001E8D0
	public DateTimeOffset ToUniversalTime(); // 0x000000018001E930
	public static bool TryParse(string input, out DateTimeOffset result); // 0x000000018035E3A0
	public static bool TryParse(string input, IFormatProvider formatProvider, DateTimeStyles styles, out DateTimeOffset result); // 0x000000018035E510
	public static bool TryParseExact(string input, string format, IFormatProvider formatProvider, DateTimeStyles styles, out DateTimeOffset result); // 0x000000018035E2A0
	public static bool TryParseExact(string input, string[] formats, IFormatProvider formatProvider, DateTimeStyles styles, out DateTimeOffset result); // 0x000000018035E1A0
	public static DateTimeOffset op_Addition(DateTimeOffset dateTimeTz, TimeSpan timeSpan); // 0x000000018035F2C0
	public static bool op_Equality(DateTimeOffset left, DateTimeOffset right); // 0x000000018035C350
	public static bool op_GreaterThan(DateTimeOffset left, DateTimeOffset right); // 0x000000018035F3C0
	public static bool op_GreaterThanOrEqual(DateTimeOffset left, DateTimeOffset right); // 0x000000018035F2F0
	public static DateTimeOffset op_Implicit(DateTime dateTime); // 0x000000018035F490
	public static bool op_Inequality(DateTimeOffset left, DateTimeOffset right); // 0x000000018035F4D0
	public static bool op_LessThan(DateTimeOffset left, DateTimeOffset right); // 0x000000018035F670
	public static bool op_LessThanOrEqual(DateTimeOffset left, DateTimeOffset right); // 0x000000018035F5A0
	public static TimeSpan op_Subtraction(DateTimeOffset left, DateTimeOffset right); // 0x000000018035F740
	public static DateTimeOffset op_Subtraction(DateTimeOffset dateTimeTz, TimeSpan timeSpan); // 0x000000018035D590
}

// Namespace: System
internal static class DateTimeUtils // TypeDefIndex: 1640
{
	// Methods
	public static int CountRepeat(string fmt, int p, char c); // 0x000000018035F770
	public static void ZeroPad(StringBuilder output, int digits, int len); // 0x00000001803608E0
	public static int ParseQuotedString(string fmt, int pos, StringBuilder output); // 0x000000018035FA90
	public static string GetStandardPattern(char format, DateTimeFormatInfo dfi, out bool useutc, out bool use_invariant); // 0x000000018035F7F0
	public static string GetStandardPattern(char format, DateTimeFormatInfo dfi, out bool useutc, out bool use_invariant, bool date_time_offset); // 0x000000018035F810
	public static string ToString(DateTime dt, string format, DateTimeFormatInfo dfi); // 0x00000001803608A0
	public static string ToString(DateTime dt, Nullable`1<TimeSpan> utc_offset, string format, DateTimeFormatInfo dfi); // 0x000000018035FBD0
}

// Namespace: System
[Serializable]
public enum DayOfWeek // TypeDefIndex: 1641
{
	Sunday = 0,
	Monday = 1,
	Tuesday = 2,
	Wednesday = 3,
	Thursday = 4,
	Friday = 5,
	Saturday = 6
}

// Namespace: System
internal class DelegateData // TypeDefIndex: 1642
{
	// Fields
	public Type target_type; // 0x10
	public string method_name; // 0x10

	// Constructors
	public DelegateData(); // 0x00000001800E2000

}

// Namespace: System
[Serializable]
internal class DelegateSerializationHolder : ISerializable, IObjectReference // TypeDefIndex: 1643
{
	// Fields
	private Delegate _delegate; // 0x10

	// Constructors
	private DelegateSerializationHolder(SerializationInfo info, StreamingContext ctx); // 0x0000000180371FA0

	// Methods
	public static void GetDelegateData(Delegate instance, SerializationInfo info, StreamingContext ctx); // 0x0000000180371D70
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0000000180371F50
	public object GetRealObject(StreamingContext context); // 0x00000001800E20D0
}

// Namespace: 
[Serializable]
private class DelegateEntry // TypeDefIndex: 1644
{
	// Fields
	private string type; // 0x10
	private string assembly; // 0x20
	public object target; // 0x30
	private string targetTypeAssembly; // 0x40
	private string targetTypeName; // 0x10
	private string methodName; // 0x00
	public DelegateEntry delegateEntry; // 0x10

	// Constructors
	public DelegateEntry(Delegate del, string targetLabel); // 0x0000000180371BE0

	// Methods
	public Delegate DeserializeDelegate(SerializationInfo info); // 0x0000000180371970
}

// Namespace: System
[Serializable]
public class DivideByZeroException : ArithmeticException // TypeDefIndex: 1645
{
	// Fields
	private const int Result = -2147352558; // 0x00

	// Constructors
	public DivideByZeroException(); // 0x00000001802088D0
	public DivideByZeroException(string message); // 0x0000000180208940
	public DivideByZeroException(string message, Exception innerException); // 0x0000000180208920
	protected DivideByZeroException(SerializationInfo info, StreamingContext context); // 0x00000001801251B0

}

// Namespace: System
[Serializable]
public class DllNotFoundException : TypeLoadException // TypeDefIndex: 1646
{
	// Fields
	private const int Result = -2146233052; // 0x00

	// Constructors
	public DllNotFoundException(); // 0x0000000180208960
	public DllNotFoundException(string message); // 0x00000001802089D0
	protected DllNotFoundException(SerializationInfo info, StreamingContext context); // 0x00000001802089B0
	public DllNotFoundException(string message, Exception inner); // 0x00000001802089F0

}

// Namespace: System
public enum AppDomainManagerInitializationOptions // TypeDefIndex: 1647
{
	None = 0,
	RegisterWithHost = 1
}

// Namespace: System
[Serializable]
public class DuplicateWaitObjectException : ArgumentException // TypeDefIndex: 1648
{
	// Fields
	private const int Result = -2146233047; // 0x00

	// Constructors
	public DuplicateWaitObjectException(); // 0x000000018020A010
	public DuplicateWaitObjectException(string parameterName); // 0x0000000180209F60
	public DuplicateWaitObjectException(string parameterName, string message); // 0x0000000180209FE0
	public DuplicateWaitObjectException(string message, Exception innerException); // 0x0000000180209FC0
	protected DuplicateWaitObjectException(SerializationInfo info, StreamingContext context); // 0x0000000180209F40

}

// Namespace: System
[Serializable]
public class EntryPointNotFoundException : TypeLoadException // TypeDefIndex: 1649
{
	// Fields
	private const int Result = -2146233053; // 0x00

	// Constructors
	public EntryPointNotFoundException(); // 0x000000018020A060
	public EntryPointNotFoundException(string message); // 0x000000018020A0B0
	protected EntryPointNotFoundException(SerializationInfo info, StreamingContext context); // 0x00000001802089B0
	public EntryPointNotFoundException(string message, Exception inner); // 0x000000018020A0D0

}

// Namespace: System
internal struct MonoEnumInfo // TypeDefIndex: 1650
{
	// Fields
	internal Type utype; // 0x10
	internal Array values; // 0x20
	internal string[] names; // 0x80000000
	internal Hashtable name_hash; // 0x08
	private static Hashtable cache; // 0x18
	private static Hashtable global_cache; // 0x28
	private static object global_cache_monitor; // 0x10
	internal static SByteComparer sbyte_comparer; // 0x00
	internal static ShortComparer short_comparer; // 0x00
	internal static IntComparer int_comparer; // 0x00
	internal static LongComparer long_comparer; // 0x00

	// Properties
	private static Hashtable Cache { get; } // 0x000000018012FB70 

	// Constructors
	private MonoEnumInfo(MonoEnumInfo other); // 0x0000000180004B50
	private static MonoEnumInfo(); // 0x000000018012FA40

	// Methods
	private static void get_enum_info(Type enumType, out MonoEnumInfo info); // 0x000000018012FC50
	internal static void GetInfo(Type enumType, out MonoEnumInfo info); // 0x000000018012F210
}

// Namespace: 
internal class SByteComparer : IComparer`1<sbyte>, IComparer // TypeDefIndex: 1651
{
	// Constructors
	public SByteComparer(); // 0x00000001800E2000

	// Methods
	public int Compare(object x, object y); // 0x000000018013ACD0
	public int Compare(sbyte ix, sbyte iy); // 0x000000018013AD70
}

// Namespace: 
internal class ShortComparer : IComparer`1<short>, IComparer // TypeDefIndex: 1652
{
	// Constructors
	public ShortComparer(); // 0x00000001800E2000

	// Methods
	public int Compare(object x, object y); // 0x000000018013AD80
	public int Compare(short ix, short iy); // 0x000000018013AE20
}

// Namespace: 
internal class IntComparer : IComparer`1<int>, IComparer // TypeDefIndex: 1653
{
	// Constructors
	public IntComparer(); // 0x00000001800E2000

	// Methods
	public int Compare(object x, object y); // 0x0000000180129C50
	public int Compare(int ix, int iy); // 0x0000000180129D00
}

// Namespace: 
internal class LongComparer : IComparer`1<long>, IComparer // TypeDefIndex: 1654
{
	// Constructors
	public LongComparer(); // 0x00000001800E2000

	// Methods
	public int Compare(object x, object y); // 0x000000018012A670
	public int Compare(long ix, long iy); // 0x000000018012A650
}

// Namespace: System
public static class Environment // TypeDefIndex: 1655
{
	// Fields
	private const int mono_corlib_version = 82; // 0x00
	private static OperatingSystem os; // 0x00

	// Properties
	public static string CommandLine { get; } // 0x000000018020FF60 
	public static string CurrentDirectory { get; set; } // 0x000000018020FFC0 0x0000000180210210
	public static int ExitCode { get; set; } // 0x000000018020FFE0 0x0000000180210220
	public static bool HasShutdownStarted { get; } // 0x000000018020FFF0 
	public static string EmbeddingHostName { get; } // 0x000000018020FFD0 
	public static bool SocketSecurityEnabled { get; } // 0x0000000180210110 
	public static bool UnityWebSecurityEnabled { get; } // 0x0000000180210110 
	public static string MachineName { get; } // 0x0000000180210020 
	public static string NewLine { get; } // 0x0000000180210030 
	internal static PlatformID Platform { get; } // 0x00000001802100F0 
	public static OperatingSystem OSVersion { get; } // 0x0000000180210040 
	public static string StackTrace { get; } // 0x0000000180210120 
	public static int TickCount { get; } // 0x0000000180210190 
	public static string UserDomainName { get; } // 0x0000000180210020 
	public static bool UserInteractive { get; } // 0x000000018011A0F0 
	public static string UserName { get; } // 0x00000001802101A0 
	public static Version Version { get; } // 0x00000001802101B0 
	public static long WorkingSet { get; } // 0x00000001800EA8C0 
	public static int ProcessorCount { get; } // 0x0000000180210100 
	internal static bool IsRunningOnWindows { get; } // 0x0000000180210000 

	// Methods
	internal static string GetOSVersionString(); // 0x000000018020F3D0
	public static void Exit(int exitCode); // 0x000000018020E470
	public static string ExpandEnvironmentVariables(string name); // 0x000000018020E480
	public static string[] GetCommandLineArgs(); // 0x000000018020E900
	internal static string internalGetEnvironmentVariable(string variable); // 0x000000018020E920
	public static string GetEnvironmentVariable(string variable); // 0x000000018020E920
	private static Hashtable GetEnvironmentVariablesNoCase(); // 0x000000018020EC80
	public static IDictionary GetEnvironmentVariables(); // 0x000000018020EE00
	private static string GetWindowsFolderPath(int folder); // 0x000000018020F3E0
	public static string GetFolderPath(SpecialFolder folder); // 0x000000018020F380
	private static string ReadXdgUserDir(string config_dir, string home_dir, string key, string fallback); // 0x000000018020F6C0
	internal static string InternalGetFolderPath(SpecialFolder folder); // 0x000000018020F3F0
	public static string[] GetLogicalDrives(); // 0x000000018020F3B0
	private static void internalBroadcastSettingChange(); // 0x00000001801B80A0
	public static string GetEnvironmentVariable(string variable, EnvironmentVariableTarget target); // 0x000000018020E930
	public static IDictionary GetEnvironmentVariables(EnvironmentVariableTarget target); // 0x000000018020EEE0
	public static void SetEnvironmentVariable(string variable, string value); // 0x000000018020FF50
	public static void SetEnvironmentVariable(string variable, string value, EnvironmentVariableTarget target); // 0x000000018020FAA0
	internal static void InternalSetEnvironmentVariable(string variable, string value); // 0x000000018020F6B0
	public static void FailFast(string message); // 0x000000018020E8B0
	private static string[] GetLogicalDrivesInternal(); // 0x000000018020F3B0
	private static string[] GetEnvironmentVariableNames(); // 0x000000018020E910
	internal static string GetMachineConfigPath(); // 0x000000018020F3C0
	internal static string internalGetHome(); // 0x0000000180210200
}

// Namespace: 
public enum SpecialFolder // TypeDefIndex: 1656
{
	Desktop = 0,
	Programs = 2,
	MyDocuments = 5,
	Personal = 5,
	Favorites = 6,
	Startup = 7,
	Recent = 8,
	SendTo = 9,
	StartMenu = 11,
	MyMusic = 13,
	DesktopDirectory = 16,
	MyComputer = 17,
	Templates = 21,
	ApplicationData = 26,
	LocalApplicationData = 28,
	InternetCache = 32,
	Cookies = 33,
	History = 34,
	CommonApplicationData = 35,
	System = 37,
	ProgramFiles = 38,
	MyPictures = 39,
	CommonProgramFiles = 43
}

// Namespace: System
public enum EnvironmentVariableTarget // TypeDefIndex: 1657
{
	Process = 0,
	User = 1,
	Machine = 2
}

// Namespace: System
[Serializable]
public class EventArgs // TypeDefIndex: 1658
{
	// Fields
	public static readonly EventArgs Empty; // 0x00

	// Constructors
	public EventArgs(); // 0x00000001800E2000
	private static EventArgs(); // 0x0000000180210760

}

// Namespace: System
[Serializable]
public sealed class ExecutionEngineException : SystemException // TypeDefIndex: 1659
{
	// Constructors
	public ExecutionEngineException(); // 0x0000000180211AB0
	public ExecutionEngineException(string message); // 0x000000018010E1E0
	public ExecutionEngineException(string message, Exception innerException); // 0x000000018010E1D0
	internal ExecutionEngineException(SerializationInfo info, StreamingContext context); // 0x000000018010E170

}

// Namespace: System
[Serializable]
public class FieldAccessException : MemberAccessException // TypeDefIndex: 1660
{
	// Fields
	private const int Result = -2146233081; // 0x00

	// Constructors
	public FieldAccessException(); // 0x0000000180211B00
	public FieldAccessException(string message); // 0x0000000180211B50
	protected FieldAccessException(SerializationInfo info, StreamingContext context); // 0x00000001801251B0
	public FieldAccessException(string message, Exception inner); // 0x0000000180211B70

}

// Namespace: System
[Serializable]
public class FlagsAttribute : Attribute // TypeDefIndex: 1661
{
	// Constructors
	public FlagsAttribute(); // 0x00000001800EAC90

}

// Namespace: System
[Serializable]
public class FormatException : SystemException // TypeDefIndex: 1662
{
	// Fields
	private const int Result = -2146233033; // 0x00

	// Constructors
	public FormatException(); // 0x0000000180211B90
	public FormatException(string message); // 0x0000000180211C00
	public FormatException(string message, Exception innerException); // 0x0000000180211BE0
	protected FormatException(SerializationInfo info, StreamingContext context); // 0x000000018010E170

}

// Namespace: System
public static class GC // TypeDefIndex: 1663
{
	// Properties
	public static int MaxGeneration { get; } // 0x0000000180211D60 

	// Methods
	private static void InternalCollect(int generation); // 0x0000000180211D80
	public static void Collect(); // 0x0000000180211C30
	public static void Collect(int generation); // 0x0000000180211C50
	public static void Collect(int generation, GCCollectionMode mode); // 0x0000000180211C50
	public static int GetGeneration(object obj); // 0x0000000180211D60
	public static int GetGeneration(WeakReference wo); // 0x0000000180211CD0
	public static long GetTotalMemory(bool forceFullCollection); // 0x0000000180211D70
	public static void KeepAlive(object obj); // 0x00000001801B80A0
	public static void ReRegisterForFinalize(object obj); // 0x0000000180211D90
	public static void SuppressFinalize(object obj); // 0x0000000180211DB0
	public static void WaitForPendingFinalizers(); // 0x0000000180211DC0
	public static int CollectionCount(int generation); // 0x0000000180211CC0
	private static void RecordPressure(long bytesAllocated); // 0x0000000180211C20
	public static void AddMemoryPressure(long bytesAllocated); // 0x0000000180211C20
	public static void RemoveMemoryPressure(long bytesAllocated); // 0x0000000180211DA0
}

// Namespace: System
[Serializable]
public enum GCCollectionMode // TypeDefIndex: 1664
{
	Default = 0,
	Forced = 1,
	Optimized = 2
}

// Namespace: System
public enum GCNotificationStatus // TypeDefIndex: 1665
{
	Succeeded = 0,
	Failed = 1,
	Canceled = 2,
	Timeout = 3,
	NotApplicable = 4
}

// Namespace: System
[Serializable]
public struct Guid : IFormattable, IComparable, IComparable`1<Guid>, IEquatable`1<Guid> // TypeDefIndex: 1666
{
	// Fields
	private int _a; // 0x10
	private short _b; // 0x16
	private short _c; // 0x19
	private byte _d; // 0x1B
	private byte _e; // 0x1D
	private byte _f; // 0x1F
	private byte _g; // 0x10
	private byte _h; // 0x20
	private byte _i; // 0x10
	private byte _j; // 0x1C
	private byte _k; // 0x10
	public static readonly Guid Empty; // 0x00
	private static object _rngAccess; // 0x00
	private static RandomNumberGenerator _rng; // 0x00
	private static RandomNumberGenerator _fastRng; // 0x10

	// Constructors
	public Guid(byte[] b); // 0x000000018001DC10
	public Guid(string g); // 0x000000018001DC70
	public Guid(int a, short b, short c, byte[] d); // 0x000000018001DC00
	public Guid(int a, short b, short c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k); // 0x000000018001DC20
	public Guid(uint a, ushort b, ushort c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k); // 0x000000018001DC20
	private static Guid(); // 0x000000018032B630

	// Methods
	private static void CheckNull(object o); // 0x000000018032A820
	private static void CheckLength(byte[] o, int l); // 0x000000018032A740
	private static void CheckArray(byte[] o, int l); // 0x000000018032A620
	private static int Compare(int x, int y); // 0x000000018032AB30
	public int CompareTo(object value); // 0x000000018001D970
	public override bool Equals(object o); // 0x000000018001DA70
	public int CompareTo(Guid value); // 0x000000018001DA50
	public bool Equals(Guid g); // 0x000000018001DB10
	public override int GetHashCode(); // 0x000000018001DB40
	private static char ToHex(int b); // 0x000000018032B3F0
	public static Guid NewGuid(); // 0x000000018032AEF0
	internal static byte[] FastNewGuidArray(); // 0x000000018032AC20
	public byte[] ToByteArray(); // 0x000000018001DBA0
	private static void AppendInt(StringBuilder builder, int value); // 0x0000000180329FD0
	private static void AppendShort(StringBuilder builder, short value); // 0x000000018032A150
	private static void AppendByte(StringBuilder builder, byte value); // 0x0000000180329F10
	private string BaseToString(bool h, bool p, bool b); // 0x000000018001D960
	public override string ToString(); // 0x000000018001DBB0
	public string ToString(string format); // 0x000000018001DBE0
	public string ToString(string format, IFormatProvider provider); // 0x000000018001DBF0
	public static bool op_Equality(Guid a, Guid b); // 0x000000018032ABF0
	public static bool op_Inequality(Guid a, Guid b); // 0x000000018032BB90
}

// Namespace: 
internal class GuidParser // TypeDefIndex: 1667
{
	// Fields
	private string _src; // 0x10
	private int _length; // 0x1C
	private int _cur; // 0x10

	// Constructors
	public GuidParser(string src); // 0x0000000180329ED0

	// Methods
	private void Reset(); // 0x0000000180329E30
	private bool AtEnd(); // 0x0000000180329360
	private void ThrowFormatException(); // 0x0000000180329E60
	private ulong ParseHex(int length, bool strictLength); // 0x0000000180329BE0
	private bool ParseOptChar(char c); // 0x0000000180329D00
	private void ParseChar(char c); // 0x0000000180329370
	private Guid ParseGuid1(); // 0x00000001803293C0
	private void ParseHexPrefix(); // 0x0000000180329B70
	private Guid ParseGuid2(); // 0x0000000180329770
	public Guid Parse(); // 0x0000000180329D60
}

// Namespace: System
public interface IAppDomainSetup // TypeDefIndex: 1668
{
	// Properties
	string ApplicationBase { get; set; }
	string ApplicationName { get; set; }
	string CachePath { get; set; }
	string ConfigurationFile { get; set; }
	string DynamicBase { get; set; }
	string LicenseFile { get; set; }
	string PrivateBinPath { get; set; }
	string PrivateBinPathProbe { get; set; }
	string ShadowCopyDirectories { get; set; }
	string ShadowCopyFiles { get; set; }

}

// Namespace: System
internal interface IConsoleDriver // TypeDefIndex: 1669
{
	// Properties
	ConsoleColor BackgroundColor { get; set; }
	int BufferHeight { get; set; }
	int BufferWidth { get; set; }
	bool CapsLock { get; }
	int CursorLeft { get; set; }
	int CursorSize { get; set; }
	int CursorTop { get; set; }
	bool CursorVisible { get; set; }
	ConsoleColor ForegroundColor { get; set; }
	bool KeyAvailable { get; }
	bool Initialized { get; }
	int LargestWindowHeight { get; }
	int LargestWindowWidth { get; }
	bool NumberLock { get; }
	string Title { get; set; }
	bool TreatControlCAsInput { get; set; }
	int WindowHeight { get; set; }
	int WindowLeft { get; set; }
	int WindowTop { get; set; }
	int WindowWidth { get; set; }

	// Methods
	void Init();
	void Beep(int frequency, int duration);
	void Clear();
	void MoveBufferArea(int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop, char sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor);
	ConsoleKeyInfo ReadKey(bool intercept);
	void ResetColor();
	void SetBufferSize(int width, int height);
	void SetCursorPosition(int left, int top);
	void SetWindowPosition(int left, int top);
	void SetWindowSize(int width, int height);
	string ReadLine();
}

// Namespace: System
public interface ICustomFormatter // TypeDefIndex: 1670
{
	// Methods
	string Format(string format, object arg, IFormatProvider formatProvider);
}

// Namespace: System
public interface IFormatProvider // TypeDefIndex: 1671
{
	// Methods
	object GetFormat(Type formatType);
}

// Namespace: System
public interface IServiceProvider // TypeDefIndex: 1672
{
	// Methods
	object GetService(Type serviceType);
}

// Namespace: System
[Serializable]
public sealed class IndexOutOfRangeException : SystemException // TypeDefIndex: 1673
{
	// Constructors
	public IndexOutOfRangeException(); // 0x0000000180125AE0
	public IndexOutOfRangeException(string message); // 0x000000018010E1E0
	public IndexOutOfRangeException(string message, Exception innerException); // 0x000000018010E1D0
	internal IndexOutOfRangeException(SerializationInfo info, StreamingContext context); // 0x000000018010E170

}

// Namespace: System
[Serializable]
public sealed class InsufficientMemoryException : OutOfMemoryException // TypeDefIndex: 1674
{
	// Constructors
	public InsufficientMemoryException(); // 0x0000000180125B40
	public InsufficientMemoryException(string message); // 0x0000000180125B80
	public InsufficientMemoryException(string message, Exception innerException); // 0x0000000180125B30

}

// Namespace: System
[Serializable]
public class InvalidCastException : SystemException // TypeDefIndex: 1675
{
	// Fields
	private const int Result = -2147467262; // 0x00

	// Constructors
	public InvalidCastException(); // 0x0000000180129E40
	public InvalidCastException(string message); // 0x0000000180129E90
	public InvalidCastException(string message, Exception innerException); // 0x0000000180129E20
	public InvalidCastException(string message, int errorCode); // 0x0000000180129EB0
	protected InvalidCastException(SerializationInfo info, StreamingContext context); // 0x000000018010E170

}

// Namespace: System
[Serializable]
public class InvalidOperationException : SystemException // TypeDefIndex: 1676
{
	// Fields
	private const int Result = -2146233079; // 0x00

	// Constructors
	public InvalidOperationException(); // 0x0000000180129EE0
	public InvalidOperationException(string message); // 0x0000000180129F50
	public InvalidOperationException(string message, Exception innerException); // 0x0000000180129F30
	protected InvalidOperationException(SerializationInfo info, StreamingContext context); // 0x000000018010E170

}

// Namespace: System
[Serializable]
public sealed class InvalidProgramException : SystemException // TypeDefIndex: 1677
{
	// Constructors
	public InvalidProgramException(); // 0x0000000180129F70
	public InvalidProgramException(string message); // 0x000000018010E1E0
	public InvalidProgramException(string message, Exception inner); // 0x000000018010E1D0
	internal InvalidProgramException(SerializationInfo info, StreamingContext context); // 0x000000018010E170

}

// Namespace: System
internal static class KnownTerminals // TypeDefIndex: 1678
{
	// Properties
	public static byte[] linux { get; } // 0x000000018012A010 
	public static byte[] xterm { get; } // 0x000000018012A060 
	public static byte[] ansi { get; } // 0x0000000180129FC0 

}

// Namespace: System
[Serializable]
public enum LoaderOptimization // TypeDefIndex: 1679
{
	NotSpecified = 0,
	SingleDomain = 1,
	MultiDomain = 2,
	MultiDomainHost = 3,
	DomainMask = 3,
	DisallowBindings = 4
}

// Namespace: System
public sealed class LoaderOptimizationAttribute : Attribute // TypeDefIndex: 1680
{
	// Fields
	private LoaderOptimization lo; // 0x10

	// Properties
	public LoaderOptimization Value { get; } // 0x00000001800ECD10 

	// Constructors
	public LoaderOptimizationAttribute(byte value); // 0x000000018012A0B0
	public LoaderOptimizationAttribute(LoaderOptimization value); // 0x000000018010E510

}

// Namespace: System
public sealed class LocalDataStoreSlot // TypeDefIndex: 1681
{
	// Fields
	internal int slot; // 0x10
	internal bool thread_local; // 0x00
	private static object lock_obj; // 0x10
	private static bool[] slot_bitmap_thread; // 0x10
	private static bool[] slot_bitmap_context; // 0x00

	// Constructors
	internal LocalDataStoreSlot(bool in_thread); // 0x000000018012A390
	private static LocalDataStoreSlot(); // 0x000000018012A330

	// Methods
	protected override void Finalize(); // 0x000000018012A0E0
}

// Namespace: System
public sealed class MTAThreadAttribute : Attribute // TypeDefIndex: 1682
{
	// Constructors
	public MTAThreadAttribute(); // 0x00000001800EAC90

}

// Namespace: System
public static class Math // TypeDefIndex: 1683
{
	// Fields
	public const double E = 2.718281828459045; // 0x00
	public const double PI = 3.141592653589793; // 0x60

	// Methods
	public static Decimal Abs(Decimal value); // 0x000000018012AC10
	public static double Abs(double value); // 0x000000018012AA40
	public static float Abs(float value); // 0x000000018012A9A0
	public static int Abs(int value); // 0x000000018012AAF0
	public static long Abs(long value); // 0x000000018012A9B0
	public static sbyte Abs(sbyte value); // 0x000000018012AA60
	public static short Abs(short value); // 0x000000018012AB80
	public static Decimal Ceiling(Decimal d); // 0x000000018012AD50
	public static double Ceiling(double a); // 0x000000018012AE80
	public static long BigMul(int a, int b); // 0x000000018012AD40
	public static int DivRem(int a, int b, out int result); // 0x000000018012AED0
	public static long DivRem(long a, long b, out long result); // 0x000000018012AEE0
	public static double Floor(double d); // 0x000000018012AF80
	public static double IEEERemainder(double x, double y); // 0x000000018012AF90
	public static double Log(double a, double newBase); // 0x000000018012B070
	public static byte Max(byte val1, byte val2); // 0x000000018012B2B0
	public static Decimal Max(Decimal val1, Decimal val2); // 0x000000018012B0D0
	public static double Max(double val1, double val2); // 0x000000018012B240
	public static float Max(float val1, float val2); // 0x000000018012B180
	public static int Max(int val1, int val2); // 0x000000018012B220
	public static long Max(long val1, long val2); // 0x000000018012B1F0
	public static sbyte Max(sbyte val1, sbyte val2); // 0x000000018012B2A0
	public static short Max(short val1, short val2); // 0x000000018012B210
	public static uint Max(uint val1, uint val2); // 0x000000018012B200
	public static ulong Max(ulong val1, ulong val2); // 0x000000018012B230
	public static ushort Max(ushort val1, ushort val2); // 0x000000018012B1E0
	public static byte Min(byte val1, byte val2); // 0x000000018012B470
	public static Decimal Min(Decimal val1, Decimal val2); // 0x000000018012B2D0
	public static double Min(double val1, double val2); // 0x000000018012B380
	public static float Min(float val1, float val2); // 0x000000018012B400
	public static int Min(int val1, int val2); // 0x000000018012B3E0
	public static long Min(long val1, long val2); // 0x000000018012B2C0
	public static sbyte Min(sbyte val1, sbyte val2); // 0x000000018012B480
	public static short Min(short val1, short val2); // 0x000000018012B4A0
	public static uint Min(uint val1, uint val2); // 0x000000018012B490
	public static ulong Min(ulong val1, ulong val2); // 0x000000018012B460
	public static ushort Min(ushort val1, ushort val2); // 0x000000018012B3F0
	public static Decimal Round(Decimal d); // 0x000000018012B740
	public static Decimal Round(Decimal d, int decimals); // 0x000000018012C090
	public static Decimal Round(Decimal d, MidpointRounding mode); // 0x000000018012BBB0
	private static Decimal RoundAwayFromZero(Decimal d); // 0x000000018012B4D0
	public static Decimal Round(Decimal d, int decimals, MidpointRounding mode); // 0x000000018012BFE0
	public static double Round(double a); // 0x000000018012C080
	public static double Round(double value, int digits); // 0x000000018012BF30
	private static double Round2(double value, int digits, bool away_from_zero); // 0x000000018012B4C0
	public static double Round(double value, MidpointRounding mode); // 0x000000018012BA90
	public static double Round(double value, int digits, MidpointRounding mode); // 0x000000018012BCD0
	public static double Truncate(double d); // 0x000000018012C430
	public static Decimal Truncate(Decimal d); // 0x000000018012C450
	public static Decimal Floor(Decimal d); // 0x000000018012AF00
	public static int Sign(Decimal value); // 0x000000018012C120
	public static int Sign(double value); // 0x000000018012C260
	public static int Sign(float value); // 0x000000018012C330
	public static int Sign(int value); // 0x000000018012C320
	public static int Sign(long value); // 0x000000018012C240
	public static int Sign(sbyte value); // 0x000000018012C310
	public static int Sign(short value); // 0x000000018012C220
	public static double Sin(double a); // 0x000000018012C3E0
	public static double Cos(double d); // 0x000000018012AEB0
	public static double Tan(double a); // 0x000000018012C410
	public static double Sinh(double value); // 0x000000018012C3F0
	public static double Cosh(double value); // 0x000000018012AEC0
	public static double Tanh(double value); // 0x000000018012C420
	public static double Acos(double d); // 0x000000018012AD00
	public static double Asin(double d); // 0x000000018012AD10
	public static double Atan(double d); // 0x000000018012AD30
	public static double Atan2(double y, double x); // 0x000000018012AD20
	public static double Exp(double d); // 0x000000018012AEF0
	public static double Log(double d); // 0x000000018012B0C0
	public static double Log10(double d); // 0x000000018012B060
	public static double Pow(double x, double y); // 0x000000018012B4B0
	public static double Sqrt(double d); // 0x000000018012C400
}

// Namespace: System
[Serializable]
public class MemberAccessException : SystemException // TypeDefIndex: 1684
{
	// Fields
	private const int Result = -2146233062; // 0x00

	// Constructors
	public MemberAccessException(); // 0x000000018012C510
	public MemberAccessException(string message); // 0x000000018012C4D0
	protected MemberAccessException(SerializationInfo info, StreamingContext context); // 0x000000018010E170
	public MemberAccessException(string message, Exception inner); // 0x000000018012C4F0

}

// Namespace: System
[Serializable]
public class MethodAccessException : MemberAccessException // TypeDefIndex: 1685
{
	// Fields
	private const int Result = -2146233072; // 0x00

	// Constructors
	public MethodAccessException(); // 0x000000018012C560
	public MethodAccessException(string message); // 0x000000018012C5B0
	protected MethodAccessException(SerializationInfo info, StreamingContext context); // 0x000000018010E170
	public MethodAccessException(string message, Exception inner); // 0x000000018012C5D0

}

// Namespace: System
public enum MidpointRounding // TypeDefIndex: 1686
{
	ToEven = 0,
	AwayFromZero = 1
}

// Namespace: System
[Serializable]
public class MissingFieldException : MissingMemberException // TypeDefIndex: 1687
{
	// Fields
	private const int Result = -2146233071; // 0x00

	// Properties
	public override string Message { get; } // 0x000000018012C710 

	// Constructors
	public MissingFieldException(); // 0x000000018012C5F0
	public MissingFieldException(string message); // 0x000000018012C640
	protected MissingFieldException(SerializationInfo info, StreamingContext context); // 0x000000018012C6F0
	public MissingFieldException(string message, Exception inner); // 0x000000018012C660
	public MissingFieldException(string className, string fieldName); // 0x000000018012C680

}

// Namespace: System
[Serializable]
public class MissingMemberException : MemberAccessException // TypeDefIndex: 1688
{
	// Fields
	private const int Result = -2146233070; // 0x00
	protected string ClassName; // 0x68
	protected string MemberName; // 0x10
	protected byte[] Signature; // 0x10

	// Properties
	public override string Message { get; } // 0x000000018012CAA0 

	// Constructors
	public MissingMemberException(); // 0x000000018012CA50
	public MissingMemberException(string message); // 0x000000018012CA30
	public MissingMemberException(string message, Exception inner); // 0x000000018012C900
	protected MissingMemberException(SerializationInfo info, StreamingContext context); // 0x000000018012C920
	public MissingMemberException(string className, string memberName); // 0x000000018012C890

	// Methods
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x000000018012C7E0
}

// Namespace: System
[Serializable]
public class MissingMethodException : MissingMemberException // TypeDefIndex: 1689
{
	// Fields
	private const int Result = -2146233069; // 0x00

	// Properties
	public override string Message { get; } // 0x000000018012CC40 

	// Constructors
	public MissingMethodException(); // 0x000000018012CBD0
	public MissingMethodException(string message); // 0x000000018012CC20
	protected MissingMethodException(SerializationInfo info, StreamingContext context); // 0x000000018012C6F0
	public MissingMethodException(string message, Exception inner); // 0x000000018012CB40
	public MissingMethodException(string className, string methodName); // 0x000000018012CB60

}

// Namespace: System
public struct ModuleHandle // TypeDefIndex: 1690
{
	// Fields
	private IntPtr value; // 0x10
	public static readonly ModuleHandle EmptyHandle; // 0x10

	// Properties
	internal IntPtr Value { get; } // 0x0000000180002060 
	public int MDStreamVersion { get; } // 0x0000000180004A70 

	// Constructors
	internal ModuleHandle(IntPtr v); // 0x0000000180004760
	private static ModuleHandle(); // 0x000000018012D3A0

	// Methods
	internal void GetPEKind(out PortableExecutableKinds peKind, out ImageFileMachine machine); // 0x00000001800048C0
	public RuntimeFieldHandle ResolveFieldHandle(int fieldToken); // 0x00000001800049B0
	public RuntimeMethodHandle ResolveMethodHandle(int methodToken); // 0x00000001800049E0
	public RuntimeTypeHandle ResolveTypeHandle(int typeToken); // 0x0000000180004A10
	private IntPtr[] ptrs_from_handles(RuntimeTypeHandle[] handles); // 0x0000000180004B40
	public RuntimeTypeHandle ResolveTypeHandle(int typeToken, RuntimeTypeHandle[] typeInstantiationContext, RuntimeTypeHandle[] methodInstantiationContext); // 0x0000000180004A60
	public RuntimeMethodHandle ResolveMethodHandle(int methodToken, RuntimeTypeHandle[] typeInstantiationContext, RuntimeTypeHandle[] methodInstantiationContext); // 0x0000000180004A50
	public RuntimeFieldHandle ResolveFieldHandle(int fieldToken, RuntimeTypeHandle[] typeInstantiationContext, RuntimeTypeHandle[] methodInstantiationContext); // 0x0000000180004A40
	public RuntimeFieldHandle GetRuntimeFieldHandleFromMetadataToken(int fieldToken); // 0x00000001800049B0
	public RuntimeMethodHandle GetRuntimeMethodHandleFromMetadataToken(int methodToken); // 0x00000001800049E0
	public RuntimeTypeHandle GetRuntimeTypeHandleFromMetadataToken(int typeToken); // 0x0000000180004A10
	public override bool Equals(object obj); // 0x00000001800047E0
	public bool Equals(ModuleHandle handle); // 0x00000001800048B0
	public override int GetHashCode(); // 0x00000001800034B0
	public static bool op_Equality(ModuleHandle left, ModuleHandle right); // 0x000000018012D3E0
	public static bool op_Inequality(ModuleHandle left, ModuleHandle right); // 0x000000018012D460
}

// Namespace: System
internal class MonoAsyncCall // TypeDefIndex: 1691
{
	// Fields
	private object msg; // 0x10
	private IntPtr cb_method; // 0x20
	private object cb_target; // 0x30
	private object state; // 0x40
	private object res; // 0x00
	private object out_args; // 0x10
	private long wait_event; // 0x10

	// Constructors
	public MonoAsyncCall(); // 0x00000001800E2000

}

// Namespace: System
internal class MonoCustomAttrs // TypeDefIndex: 1692
{
	// Fields
	private static Assembly corlib; // 0x00
	private static readonly Type AttributeUsageType; // 0x10
	private static readonly AttributeUsageAttribute DefaultAttributeUsage; // 0x10

	// Constructors
	public MonoCustomAttrs(); // 0x00000001800E2000
	private static MonoCustomAttrs(); // 0x000000018012F170

	// Methods
	private static bool IsUserCattrProvider(object obj); // 0x000000018012ED20
	internal static object[] GetCustomAttributesInternal(ICustomAttributeProvider obj, Type attributeType, bool pseudoAttrs); // 0x000000018012DE90
	internal static object[] GetPseudoCustomAttributes(ICustomAttributeProvider obj, Type attributeType); // 0x000000018012E6B0
	internal static object[] GetCustomAttributesBase(ICustomAttributeProvider obj, Type attributeType); // 0x000000018012DC20
	internal static Attribute GetCustomAttribute(ICustomAttributeProvider obj, Type attributeType, bool inherit); // 0x000000018012DAC0
	internal static object[] GetCustomAttributes(ICustomAttributeProvider obj, Type attributeType, bool inherit); // 0x000000018012E010
	internal static object[] GetCustomAttributes(ICustomAttributeProvider obj, bool inherit); // 0x000000018012DEA0
	private static CustomAttributeData[] GetCustomAttributesDataInternal(ICustomAttributeProvider obj); // 0x000000018012DDE0
	internal static IList`1<CustomAttributeData> GetCustomAttributesData(ICustomAttributeProvider obj); // 0x000000018012DDF0
	internal static bool IsDefined(ICustomAttributeProvider obj, Type attributeType, bool inherit); // 0x000000018012EA80
	internal static bool IsDefinedInternal(ICustomAttributeProvider obj, Type AttributeType); // 0x000000018012EA70
	private static PropertyInfo GetBasePropertyDefinition(PropertyInfo property); // 0x000000018012D590
	private static ICustomAttributeProvider GetBase(ICustomAttributeProvider obj); // 0x000000018012D840
	private static AttributeUsageAttribute RetrieveAttributeUsage(Type attributeType); // 0x000000018012EF60
}

// Namespace: 
private class AttributeInfo // TypeDefIndex: 1693
{
	// Fields
	private AttributeUsageAttribute _usage; // 0x10
	private int _inheritanceLevel; // 0x10

	// Properties
	public AttributeUsageAttribute Usage { get; } // 0x00000001800E20D0 
	public int InheritanceLevel { get; } // 0x00000001800ED060 

	// Constructors
	public AttributeInfo(AttributeUsageAttribute usage, int inheritanceLevel); // 0x0000000180125A40

}

// Namespace: System
internal sealed class MonoListItem // TypeDefIndex: 1694
{
	// Fields
	private MonoListItem next; // 0x10
	private object data; // 0x10

	// Constructors
	public MonoListItem(); // 0x00000001800E2000

}

// Namespace: System
internal class MonoTouchAOTHelper // TypeDefIndex: 1695
{
	// Fields
	internal static bool FalseFlag; // 0x00

	// Constructors
	public MonoTouchAOTHelper(); // 0x00000001800E2000
	private static MonoTouchAOTHelper(); // 0x00000001800EA7B0

}

// Namespace: System
internal class MonoTypeInfo // TypeDefIndex: 1696
{
	// Fields
	public string full_name; // 0x10
	public ConstructorInfo default_ctor; // 0x18

	// Constructors
	public MonoTypeInfo(); // 0x00000001800E2000

}

// Namespace: System
[Serializable]
internal class MonoType : Type, ISerializable // TypeDefIndex: 1697
{
	// Fields
	[NonSerialized]	private MonoTypeInfo type_info; // 0x18

	// Properties
	public override Type UnderlyingSystemType { get; } // 0x0000000180123590 
	public override Assembly Assembly { get; } // 0x0000000180132540 
	public override string AssemblyQualifiedName { get; } // 0x0000000180132530 
	public override Type BaseType { get; } // 0x0000000180132550 
	public override string FullName { get; } // 0x00000001801326A0 
	public override Guid GUID { get; } // 0x0000000180132720 
	public override MemberTypes MemberType { get; } // 0x0000000180132860 
	public override string Name { get; } // 0x00000001801328C0 
	public override string Namespace { get; } // 0x00000001801328D0 
	public override Module Module { get; } // 0x00000001801328B0 
	public override Type DeclaringType { get; } // 0x0000000180132690 
	public override Type ReflectedType { get; } // 0x00000001801328E0 
	public override RuntimeTypeHandle TypeHandle { get; } // 0x00000001800E20D0 
	public override bool ContainsGenericParameters { get; } // 0x0000000180132560 
	public override bool IsGenericParameter { get; } // 0x0000000180132850 
	public override MethodBase DeclaringMethod { get; } // 0x00000001801150B0 

	// Constructors
	internal MonoType(object obj); // 0x0000000180132490

	// Methods
	private static void type_from_obj(MonoType type, object obj); // 0x0000000180132900
	private static TypeAttributes get_attributes(Type type); // 0x000000018012FC80
	internal ConstructorInfo GetDefaultConstructor(); // 0x0000000180130430
	protected override TypeAttributes GetAttributeFlagsImpl(); // 0x000000018012FC80
	protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x000000018012FC90
	internal ConstructorInfo[] GetConstructors_internal(BindingFlags bindingAttr, Type reflected_type); // 0x0000000180130110
	public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr); // 0x0000000180130120
	private EventInfo InternalGetEvent(string name, BindingFlags bindingAttr); // 0x0000000180131110
	public override EventInfo GetEvent(string name, BindingFlags bindingAttr); // 0x0000000180130510
	internal EventInfo[] GetEvents_internal(BindingFlags bindingAttr, Type reflected_type); // 0x00000001801305A0
	public override EventInfo[] GetEvents(BindingFlags bindingAttr); // 0x00000001801305B0
	public override FieldInfo GetField(string name, BindingFlags bindingAttr); // 0x00000001801305C0
	internal FieldInfo[] GetFields_internal(BindingFlags bindingAttr, Type reflected_type); // 0x0000000180130680
	public override FieldInfo[] GetFields(BindingFlags bindingAttr); // 0x0000000180130690
	public override Type GetInterface(string name, bool ignoreCase); // 0x0000000180130720
	public override Type[] GetInterfaces(); // 0x0000000180130970
	public override MemberInfo[] GetMembers(BindingFlags bindingAttr); // 0x0000000180130980
	internal MethodInfo[] GetMethodsByName(string name, BindingFlags bindingAttr, bool ignoreCase, Type reflected_type); // 0x0000000180130EA0
	public override MethodInfo[] GetMethods(BindingFlags bindingAttr); // 0x0000000180130EB0
	protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers); // 0x00000001801309C0
	private MethodInfo GetCorrespondingInflatedMethod(MethodInfo generic); // 0x0000000180130180
	private ConstructorInfo GetCorrespondingInflatedConstructor(ConstructorInfo generic); // 0x0000000180130130
	internal override MethodInfo GetMethod(MethodInfo fromNoninstanciated); // 0x0000000180130E00
	internal override ConstructorInfo GetConstructor(ConstructorInfo fromNoninstanciated); // 0x0000000180130070
	internal override FieldInfo GetField(FieldInfo fromNoninstanciated); // 0x00000001801305D0
	public override Type GetNestedType(string name, BindingFlags bindingAttr); // 0x0000000180130ED0
	public override Type[] GetNestedTypes(BindingFlags bindingAttr); // 0x0000000180130EE0
	internal PropertyInfo[] GetPropertiesByName(string name, BindingFlags bindingAttr, bool icase, Type reflected_type); // 0x0000000180130F10
	public override PropertyInfo[] GetProperties(BindingFlags bindingAttr); // 0x0000000180130F20
	protected override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers); // 0x0000000180130F40
	protected override bool HasElementTypeImpl(); // 0x00000001801310A0
	protected override bool IsArrayImpl(); // 0x0000000180132070
	protected override bool IsByRefImpl(); // 0x00000001801320D0
	protected override bool IsCOMObjectImpl(); // 0x0000000180113770
	protected override bool IsPointerImpl(); // 0x0000000180132160
	protected override bool IsPrimitiveImpl(); // 0x0000000180132170
	public override bool IsSubclassOf(Type type); // 0x0000000180132180
	public override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters); // 0x0000000180131120
	public override Type GetElementType(); // 0x0000000180130500
	private string getFullName(bool full_name, bool assembly_qualified); // 0x0000000180132520
	public override bool IsDefined(Type attributeType, bool inherit); // 0x00000001801320E0
	public override object[] GetCustomAttributes(bool inherit); // 0x00000001801301D0
	public override object[] GetCustomAttributes(Type attributeType, bool inherit); // 0x0000000180130380
	public override int GetArrayRank(); // 0x000000018012FC70
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0000000180130EF0
	public override string ToString(); // 0x0000000180132480
	public override Type[] GetGenericArguments(); // 0x00000001801306A0
	public override Type GetGenericTypeDefinition(); // 0x00000001801306B0
	private MethodBase CheckMethodSecurity(MethodBase mb); // 0x000000018012FC60
	private void ReorderParamArrayArguments(object[] args, MethodBase method); // 0x0000000180132200
}

// Namespace: System
[Serializable]
public sealed class MulticastNotSupportedException : SystemException // TypeDefIndex: 1698
{
	// Constructors
	public MulticastNotSupportedException(); // 0x0000000180133530
	public MulticastNotSupportedException(string message); // 0x000000018010E1E0
	public MulticastNotSupportedException(string message, Exception inner); // 0x000000018010E1D0
	internal MulticastNotSupportedException(SerializationInfo info, StreamingContext context); // 0x000000018010E170

}

// Namespace: System
public sealed class NonSerializedAttribute : Attribute // TypeDefIndex: 1699
{
	// Constructors
	public NonSerializedAttribute(); // 0x00000001800EAC90

}

// Namespace: System
[Serializable]
public class NotFiniteNumberException : ArithmeticException // TypeDefIndex: 1700
{
	// Fields
	private const int Result = -2146233048; // 0x00
	private double offending_number; // 0x00

	// Properties
	public double OffendingNumber { get; } // 0x00000001801337D0 

	// Constructors
	public NotFiniteNumberException(); // 0x0000000180133670
	public NotFiniteNumberException(double offendingNumber); // 0x0000000180133640
	public NotFiniteNumberException(string message); // 0x0000000180133770
	public NotFiniteNumberException(string message, double offendingNumber); // 0x0000000180133610
	public NotFiniteNumberException(string message, double offendingNumber, Exception innerException); // 0x0000000180133790
	protected NotFiniteNumberException(SerializationInfo info, StreamingContext context); // 0x00000001801336C0
	public NotFiniteNumberException(string message, Exception innerException); // 0x0000000180133750

	// Methods
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0000000180133580
}

// Namespace: System
[Serializable]
public class NotImplementedException : SystemException // TypeDefIndex: 1701
{
	// Fields
	private const int Result = -2147467263; // 0x00

	// Constructors
	public NotImplementedException(); // 0x0000000180133800
	public NotImplementedException(string message); // 0x00000001801337E0
	public NotImplementedException(string message, Exception inner); // 0x0000000180133850
	protected NotImplementedException(SerializationInfo info, StreamingContext context); // 0x000000018010E170

}

// Namespace: System
[Serializable]
public class NotSupportedException : SystemException // TypeDefIndex: 1702
{
	// Fields
	private const int Result = -2146233067; // 0x00

	// Constructors
	public NotSupportedException(); // 0x00000001801338B0
	public NotSupportedException(string message); // 0x0000000180133870
	public NotSupportedException(string message, Exception innerException); // 0x0000000180133890
	protected NotSupportedException(SerializationInfo info, StreamingContext context); // 0x000000018010E170

}

// Namespace: System
[Serializable]
public class NullReferenceException : SystemException // TypeDefIndex: 1703
{
	// Fields
	private const int Result = -2147467261; // 0x00

	// Constructors
	public NullReferenceException(); // 0x0000000180133920
	public NullReferenceException(string message); // 0x0000000180133900
	public NullReferenceException(string message, Exception innerException); // 0x0000000180133970
	protected NullReferenceException(SerializationInfo info, StreamingContext context); // 0x000000018010E170

}

// Namespace: System
public static class Nullable // TypeDefIndex: 1704
{
	// Methods
	public static int Compare(Nullable`1<T> value1, Nullable`1<T> value2);
	public static bool Equals(Nullable`1<T> value1, Nullable`1<T> value2);
	public static Type GetUnderlyingType(Type nullableType); // 0x0000000180133C40
}

// Namespace: System
internal sealed class NumberFormatter // TypeDefIndex: 1705
{
	// Fields
	private const int DefaultExpPrecision = 6; // 0x00
	private const int HundredMillion = 100000000; // 0x00
	private const long SeventeenDigitsThreshold = 10000000000000000; // 0x00
	private const ulong ULongDivHundredMillion = 184467440737; // 0x00
	private const ulong ULongModHundredMillion = 9551616; // 0x00
	private const int DoubleBitsExponentShift = 52; // 0x00
	private const int DoubleBitsExponentMask = 2047; // 0x00
	private const long DoubleBitsMantissaMask = 4503599627370495; // 0x00
	private const int DecimalBitsScaleMask = 2031616; // 0x00
	private const int SingleDefPrecision = 7; // 0x00
	private const int DoubleDefPrecision = 15; // 0x00
	private const int Int8DefPrecision = 3; // 0x00
	private const int UInt8DefPrecision = 3; // 0x08
	private const int Int16DefPrecision = 5; // 0x18
	private const int UInt16DefPrecision = 5; // 0x28
	private const int Int32DefPrecision = 10; // 0x18
	private const int UInt32DefPrecision = 10; // 0x21
	private const int Int64DefPrecision = 19; // 0x23
	private const int UInt64DefPrecision = 20; // 0x26
	private const int DecimalDefPrecision = 100; // 0x2C
	private const int TenPowersListLength = 19; // 0x34
	private const double MinRoundtripVal = -1.79769313486231E+308; // 0x3C
	private const double MaxRoundtripVal = 1.79769313486231E+308; // 0x44
	private static readonly void * MantissaBitsTable; // 0x50
	private static readonly void * TensExponentTable; // 0x80000000
	private static readonly void * DigitLowerTable; // 0x10
	private static readonly void * DigitUpperTable; // 0x18
	private static readonly void * TenPowersList; // 0x20
	private static readonly void * DecHexDigits; // 0x28
	private Thread _thread; // 0x30
	private NumberFormatInfo _nfi; // 0x38
	private bool _NaN; // 0x40
	private bool _infinity; // 0x60
	private bool _isCustomFormat; // 0x10
	private bool _specifierIsUpper; // 0x20
	private bool _positive; // 0x10
	private char _specifier; // 0x00
	private int _precision; // 0x00
	private int _defPrecision; // 0x00
	private int _digitsLen; // 0x00
	private int _offset; // 0x00
	private int _decPointPos; // 0x14
	private uint _val1; // 0x10
	private uint _val2; // 0x00
	private uint _val3; // 0x10
	private uint _val4; // 0x10
	private char[] _cbuf; // 0x10
	private int _ind; // 0x10
	private static NumberFormatter threadNumberFormatter; // 0x00

	// Properties
	public CultureInfo CurrentCulture { set; } // 0x000000018013AC70
	private int IntegerDigits { get; } // 0x000000018013AC10 
	private int DecimalDigits { get; } // 0x000000018013ABF0 
	private bool IsFloatingSource { get; } // 0x000000018013AC20 
	private bool IsZero { get; } // 0x000000018013AC60 
	private bool IsZeroInteger { get; } // 0x000000018013AC40 

	// Constructors
	public NumberFormatter(Thread current); // 0x000000018013AB50
	private static NumberFormatter(); // 0x000000018013AAF0

	// Methods
	private static void GetFormatterTables(out void * MantissaBitsTable, out void * TensExponentTable, out void * DigitLowerTable, out void * DigitUpperTable, out void * TenPowersList, out void * DecHexDigits); // 0x00000001801372D0
	private static long GetTenPowerOf(int i); // 0x0000000180137490
	private void InitDecHexDigits(uint value); // 0x0000000180137640
	private void InitDecHexDigits(ulong value); // 0x0000000180137500
	private void InitDecHexDigits(uint hi, ulong lo); // 0x00000001801376F0
	private static uint FastToDecHex(int val); // 0x0000000180135760
	private static uint ToDecHex(int val); // 0x000000018013A9B0
	private static int FastDecHexLen(int val); // 0x00000001801355B0
	private static int DecHexLen(uint val); // 0x0000000180135290
	private int DecHexLen(); // 0x0000000180135160
	private static int ScaleOrder(long hi); // 0x000000018013A850
	private int InitialFloatingPrecision(); // 0x0000000180138350
	private static int ParsePrecision(string format); // 0x000000018013A2D0
	private void Init(string format); // 0x0000000180138210
	private void InitHex(ulong value); // 0x00000001801378F0
	private void Init(string format, int value, int defPrecision); // 0x00000001801380A0
	private void Init(string format, uint value, int defPrecision); // 0x0000000180137F40
	private void Init(string format, long value); // 0x0000000180138000
	private void Init(string format, ulong value); // 0x0000000180138180
	private void Init(string format, double value, int defPrecision); // 0x0000000180137960
	private void Init(string format, Decimal value); // 0x0000000180137D80
	private void ResetCharBuf(int size); // 0x000000018013A3E0
	private void Resize(int len); // 0x000000018013A450
	private void Append(char c); // 0x0000000180134D00
	private void Append(char c, int cnt); // 0x0000000180134C20
	private void Append(string s); // 0x0000000180134DC0
	private NumberFormatInfo GetNumberFormatInstance(IFormatProvider fp); // 0x0000000180137420
	private void RoundPos(int pos); // 0x000000018013A840
	private bool RoundDecimal(int decimals); // 0x000000018013A820
	private bool RoundBits(int shift); // 0x000000018013A4B0
	private void RemoveTrailingZeros(); // 0x000000018013A3B0
	private void AddOneToDecHex(); // 0x0000000180133DF0
	private static uint AddOneToDecHex(uint val); // 0x0000000180133D70
	private int CountTrailingZeros(); // 0x0000000180134F20
	private static int CountTrailingZeros(uint val); // 0x0000000180134ED0
	private static NumberFormatter GetInstance(); // 0x00000001801372E0
	private void Release(); // 0x000000018013A350
	internal static void SetThreadCurrentCulture(CultureInfo culture); // 0x000000018013A8D0
	public static string NumberToString(string format, sbyte value, IFormatProvider fp); // 0x00000001801391B0
	public static string NumberToString(string format, byte value, IFormatProvider fp); // 0x0000000180139DC0
	public static string NumberToString(string format, ushort value, IFormatProvider fp); // 0x000000018013A040
	public static string NumberToString(string format, short value, IFormatProvider fp); // 0x0000000180139CB0
	public static string NumberToString(string format, uint value, IFormatProvider fp); // 0x00000001801389B0
	public static string NumberToString(string format, int value, IFormatProvider fp); // 0x0000000180138DC0
	public static string NumberToString(string format, ulong value, IFormatProvider fp); // 0x0000000180139930
	public static string NumberToString(string format, long value, IFormatProvider fp); // 0x0000000180139ED0
	public static string NumberToString(string format, float value, IFormatProvider fp); // 0x00000001801396E0
	public static string NumberToString(string format, double value, IFormatProvider fp); // 0x00000001801392C0
	public static string NumberToString(string format, Decimal value, IFormatProvider fp); // 0x0000000180138850
	public static string NumberToString(uint value, IFormatProvider fp); // 0x0000000180139A90
	public static string NumberToString(int value, IFormatProvider fp); // 0x0000000180139090
	public static string NumberToString(ulong value, IFormatProvider fp); // 0x0000000180139520
	public static string NumberToString(long value, IFormatProvider fp); // 0x0000000180138B10
	public static string NumberToString(float value, IFormatProvider fp); // 0x000000018013A150
	public static string NumberToString(double value, IFormatProvider fp); // 0x0000000180138C30
	private string FastIntegerToString(int value, IFormatProvider fp); // 0x00000001801355E0
	private string IntegerToString(string format, IFormatProvider fp); // 0x0000000180138390
	private string NumberToString(string format, NumberFormatInfo nfi); // 0x0000000180138ED0
	public string FormatCurrency(int precision, NumberFormatInfo nfi); // 0x0000000180135840
	private string FormatDecimal(int precision, NumberFormatInfo nfi); // 0x00000001801363B0
	private string FormatHexadecimal(int precision); // 0x0000000180136B80
	public string FormatFixedPoint(int precision, NumberFormatInfo nfi); // 0x0000000180136850
	private string FormatRoundtrip(double origval, NumberFormatInfo nfi); // 0x00000001801370A0
	private string FormatRoundtrip(float origval, NumberFormatInfo nfi); // 0x0000000180137190
	private string FormatGeneral(int precision, NumberFormatInfo nfi); // 0x00000001801369E0
	public string FormatNumber(int precision, NumberFormatInfo nfi); // 0x0000000180136D00
	public string FormatPercent(int precision, NumberFormatInfo nfi); // 0x0000000180136EE0
	public string FormatExponential(int precision, NumberFormatInfo nfi); // 0x00000001801364C0
	private string FormatExponential(int precision, NumberFormatInfo nfi, int expDigits); // 0x0000000180136520
	public string FormatCustom(string format, NumberFormatInfo nfi); // 0x0000000180135C20
	private static void ZeroTrimEnd(StringBuilder sb, bool canEmpty); // 0x000000018013AA60
	private static bool IsZeroOnly(StringBuilder sb); // 0x0000000180138770
	private static void AppendNonNegativeNumber(StringBuilder sb, int v); // 0x0000000180134950
	private void AppendIntegerString(int minLength, StringBuilder sb); // 0x0000000180134860
	private void AppendIntegerString(int minLength); // 0x00000001801348F0
	private void AppendDecimalString(int precision, StringBuilder sb); // 0x0000000180133F40
	private void AppendDecimalString(int precision); // 0x0000000180133F20
	private void AppendIntegerStringWithGroupSeparator(int[] groups, string groupSeparator); // 0x0000000180134640
	private void AppendExponent(NumberFormatInfo nfi, int exponent, int minDigits); // 0x00000001801344D0
	private void AppendOneDigit(int start); // 0x0000000180134B10
	private void FastAppendDigits(int val, bool force); // 0x0000000180135360
	private void AppendDigits(int start, int end); // 0x0000000180133F70
	private void AppendDigits(int start, int end, StringBuilder sb); // 0x00000001801342A0
	private void Multiply10(int count); // 0x0000000180138840
	private void Divide10(int count); // 0x0000000180135350
	private NumberFormatter GetClone(); // 0x0000000180137270
}

// Namespace: 
private class CustomInfo // TypeDefIndex: 1706
{
	// Fields
	public bool UseGroup; // 0x10
	public int DecimalDigits; // 0x18
	public int DecimalPointPos; // 0x20
	public int DecimalTailSharpDigits; // 0x28
	public int IntegerDigits; // 0x30
	public int IntegerHeadSharpDigits; // 0x38
	public int IntegerHeadPos; // 0x40
	public bool UseExponent; // 0x60
	public int ExponentDigits; // 0x10
	public int ExponentTailSharpDigits; // 0x20
	public bool ExponentNegativeSignOnly; // 0x10
	public int DividePlaces; // 0x00
	public int Percents; // 0x00
	public int Permilles; // 0x00

	// Constructors
	public CustomInfo(); // 0x000000018011FB00

	// Methods
	public static void GetActiveSection(string format, bool positive, bool zero, int offset, int length); // 0x000000018011F270
	public static CustomInfo Parse(string format, int offset, int length, NumberFormatInfo nfi); // 0x000000018011F7A0
	public string Format(string format, int offset, int length, NumberFormatInfo nfi, bool positive, StringBuilder sb_int, StringBuilder sb_dec, StringBuilder sb_exp); // 0x000000018011EAD0
}

// Namespace: System
[Serializable]
public class ObjectDisposedException : InvalidOperationException // TypeDefIndex: 1707
{
	// Fields
	private string obj_name; // 0x60
	private string msg; // 0x10

	// Properties
	public override string Message { get; } // 0x00000001801136C0 
	public string ObjectName { get; } // 0x0000000180114BE0 

	// Constructors
	public ObjectDisposedException(string objectName); // 0x00000001801247F0
	public ObjectDisposedException(string objectName, string message); // 0x00000001801247B0
	public ObjectDisposedException(string message, Exception innerException); // 0x00000001801248F0
	protected ObjectDisposedException(SerializationInfo info, StreamingContext context); // 0x0000000180124860

	// Methods
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0000000180124730
}

// Namespace: System
[Serializable]
public sealed class OperatingSystem : ICloneable, ISerializable // TypeDefIndex: 1708
{
	// Fields
	private PlatformID _platform; // 0x10
	private Version _version; // 0x20
	private string _servicePack; // 0x10

	// Properties
	public PlatformID Platform { get; } // 0x00000001800ECD10 
	public Version Version { get; } // 0x00000001800EAEC0 
	public string ServicePack { get; } // 0x00000001800EAEB0 
	public string VersionString { get; } // 0x0000000180124B90 

	// Constructors
	public OperatingSystem(PlatformID platform, Version version); // 0x0000000180124CA0

	// Methods
	public object Clone(); // 0x00000001801249F0
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x0000000180124AF0
	public override string ToString(); // 0x0000000180124B90
}

// Namespace: System
[Serializable]
public class OperationCanceledException : SystemException // TypeDefIndex: 1709
{
	// Fields
	private const int Result = -2146233029; // 0x00

	// Constructors
	public OperationCanceledException(); // 0x0000000180124DB0
	public OperationCanceledException(string message); // 0x0000000180124D70
	public OperationCanceledException(string message, Exception innerException); // 0x0000000180124D90
	protected OperationCanceledException(SerializationInfo info, StreamingContext context); // 0x000000018010E170

}

// Namespace: System
[Serializable]
public class OutOfMemoryException : SystemException // TypeDefIndex: 1710
{
	// Fields
	private const int Result = -2147024882; // 0x00

	// Constructors
	public OutOfMemoryException(); // 0x0000000180125160
	public OutOfMemoryException(string message); // 0x0000000180125140
	public OutOfMemoryException(string message, Exception innerException); // 0x0000000180125120
	protected OutOfMemoryException(SerializationInfo info, StreamingContext context); // 0x000000018010E170

}

// Namespace: System
[Serializable]
public class OverflowException : ArithmeticException // TypeDefIndex: 1711
{
	// Fields
	private const int Result = -2146233066; // 0x00

	// Constructors
	public OverflowException(); // 0x00000001801251D0
	public OverflowException(string message); // 0x0000000180125240
	public OverflowException(string message, Exception innerException); // 0x0000000180125220
	protected OverflowException(SerializationInfo info, StreamingContext context); // 0x00000001801251B0

}

// Namespace: System
[Serializable]
public enum PlatformID // TypeDefIndex: 1712
{
	Win32S = 0,
	Win32Windows = 1,
	Win32NT = 2,
	WinCE = 3,
	Unix = 4,
	Xbox = 5,
	MacOSX = 6
}

// Namespace: System
[Serializable]
public class PlatformNotSupportedException : NotSupportedException // TypeDefIndex: 1713
{
	// Fields
	private const int Result = -2146233031; // 0x00

	// Constructors
	public PlatformNotSupportedException(); // 0x0000000180125260
	public PlatformNotSupportedException(string message); // 0x00000001801252D0
	protected PlatformNotSupportedException(SerializationInfo info, StreamingContext context); // 0x00000001801251B0
	public PlatformNotSupportedException(string message, Exception inner); // 0x00000001801252B0

}

// Namespace: System
[Serializable]
public class Random // TypeDefIndex: 1714
{
	// Fields
	private const int MBIG = 2147483647; // 0x00
	private const int MSEED = 161803398; // 0x00
	private const int MZ = 0; // 0x14
	private int inext; // 0x10
	private int inextp; // 0x00
	private int[] SeedArray; // 0x10

	// Constructors
	public Random(); // 0x0000000180125870
	public Random(int Seed); // 0x0000000180125640

	// Methods
	protected virtual double Sample(); // 0x0000000180125590
	public virtual int Next(); // 0x0000000180125560
	public virtual int Next(int maxValue); // 0x00000001801253F0
	public virtual int Next(int minValue, int maxValue); // 0x0000000180125490
	public virtual void NextBytes(byte[] buffer); // 0x00000001801252F0
	public virtual double NextDouble(); // 0x00000001801253D0
}

// Namespace: System
[Serializable]
public class RankException : SystemException // TypeDefIndex: 1715
{
	// Fields
	private const int Result = -2146233065; // 0x00

	// Constructors
	public RankException(); // 0x00000001801258A0
	public RankException(string message); // 0x00000001801258F0
	public RankException(string message, Exception innerException); // 0x0000000180125910
	protected RankException(SerializationInfo info, StreamingContext context); // 0x000000018010E170

}

// Namespace: System
public class ResolveEventArgs : EventArgs // TypeDefIndex: 1716
{
	// Fields
	private string m_Name; // 0x10

	// Properties
	public string Name { get; } // 0x00000001800E20D0 

	// Constructors
	public ResolveEventArgs(string name); // 0x0000000180261BE0

}

// Namespace: System
[Serializable]
public struct RuntimeMethodHandle : ISerializable // TypeDefIndex: 1717
{
	// Fields
	private IntPtr value; // 0x10

	// Properties
	public IntPtr Value { get; } // 0x0000000180002060 

	// Constructors
	internal RuntimeMethodHandle(IntPtr v); // 0x0000000180004760
	private RuntimeMethodHandle(SerializationInfo info, StreamingContext context); // 0x0000000180005730

	// Methods
	public void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00000001800055C0
	private static IntPtr GetFunctionPointer(IntPtr m); // 0x00000001801150B0
	public IntPtr GetFunctionPointer(); // 0x00000001800055B0
	public override bool Equals(object obj); // 0x00000001800054D0
	public bool Equals(RuntimeMethodHandle handle); // 0x00000001800050E0
	public override int GetHashCode(); // 0x00000001800051D0
	public static bool op_Equality(RuntimeMethodHandle left, RuntimeMethodHandle right); // 0x0000000180156370
	public static bool op_Inequality(RuntimeMethodHandle left, RuntimeMethodHandle right); // 0x0000000180156380
}

// Namespace: System
public sealed class STAThreadAttribute : Attribute // TypeDefIndex: 1718
{
	// Constructors
	public STAThreadAttribute(); // 0x00000001800EAC90

}

// Namespace: System
[Serializable]
public sealed class StackOverflowException : SystemException // TypeDefIndex: 1719
{
	// Constructors
	public StackOverflowException(); // 0x00000001801820A0
	public StackOverflowException(string message); // 0x000000018010E1E0
	public StackOverflowException(string message, Exception innerException); // 0x000000018010E1D0
	internal StackOverflowException(SerializationInfo info, StreamingContext context); // 0x000000018010E170

}

// Namespace: System
[Serializable]
public abstract class StringComparer : IComparer`1<string>, IEqualityComparer`1<string>, IComparer, IEqualityComparer // TypeDefIndex: 1720
{
	// Fields
	private static StringComparer invariantCultureIgnoreCase; // 0x00
	private static StringComparer invariantCulture; // 0x10
	private static StringComparer ordinalIgnoreCase; // 0x10
	private static StringComparer ordinal; // 0x10

	// Properties
	public static StringComparer CurrentCulture { get; } // 0x00000001803B6CA0 
	public static StringComparer CurrentCultureIgnoreCase { get; } // 0x00000001803B6C20 
	public static StringComparer InvariantCulture { get; } // 0x00000001803B6D80 
	public static StringComparer InvariantCultureIgnoreCase { get; } // 0x00000001803B6D20 
	public static StringComparer Ordinal { get; } // 0x00000001803B6E40 
	public static StringComparer OrdinalIgnoreCase { get; } // 0x00000001803B6DE0 

	// Constructors
	protected StringComparer(); // 0x00000001800E2000
	private static StringComparer(); // 0x00000001803B6AF0

	// Methods
	public static StringComparer Create(CultureInfo culture, bool ignoreCase); // 0x00000001803B68B0
	public int Compare(object x, object y); // 0x00000001803B6700
	public bool Equals(object x, object y); // 0x00000001803B6950
	public int GetHashCode(object obj); // 0x00000001803B6A30
	public abstract int Compare(string x, string y);
	public abstract bool Equals(string x, string y);
	public abstract int GetHashCode(string obj);
}

// Namespace: System
[Serializable]
internal sealed class CultureAwareComparer : StringComparer // TypeDefIndex: 1721
{
	// Fields
	private readonly bool _ignoreCase; // 0x10
	private readonly CompareInfo _compareInfo; // 0x10

	// Constructors
	public CultureAwareComparer(CultureInfo ci, bool ignore_case); // 0x00000001803595A0

	// Methods
	public override int Compare(string x, string y); // 0x0000000180359460
	public override bool Equals(string x, string y); // 0x00000001803594A0
	public override int GetHashCode(string s); // 0x00000001803594E0
}

// Namespace: System
[Serializable]
internal sealed class OrdinalComparer : StringComparer // TypeDefIndex: 1722
{
	// Fields
	private readonly bool _ignoreCase; // 0x10

	// Constructors
	public OrdinalComparer(bool ignoreCase); // 0x00000001801250B0

	// Methods
	public override int Compare(string x, string y); // 0x0000000180124E00
	public override bool Equals(string x, string y); // 0x0000000180124EE0
	public override int GetHashCode(string s); // 0x0000000180125020
}

// Namespace: System
[Serializable]
public enum StringComparison // TypeDefIndex: 1723
{
	CurrentCulture = 0,
	CurrentCultureIgnoreCase = 1,
	InvariantCulture = 2,
	InvariantCultureIgnoreCase = 3,
	Ordinal = 4,
	OrdinalIgnoreCase = 5
}

// Namespace: System
public enum StringSplitOptions // TypeDefIndex: 1724
{
	None = 0,
	RemoveEmptyEntries = 1
}

// Namespace: System
[Serializable]
public class SystemException : Exception // TypeDefIndex: 1725
{
	// Fields
	private const int Result = -2146233087; // 0x00

	// Constructors
	public SystemException(); // 0x00000001803B7040
	public SystemException(string message); // 0x00000001803B7090
	protected SystemException(SerializationInfo info, StreamingContext context); // 0x000000018019B630
	public SystemException(string message, Exception innerException); // 0x00000001803B7020

}

// Namespace: System
internal enum TermInfoBooleans // TypeDefIndex: 1726
{
	AutoLeftMargin = 0,
	AutoRightMargin = 1,
	NoEscCtlc = 2,
	CeolStandoutGlitch = 3,
	EatNewlineGlitch = 4,
	EraseOverstrike = 5,
	GenericType = 6,
	HardCopy = 7,
	HasMetaKey = 8,
	HasStatusLine = 9,
	InsertNullGlitch = 10,
	MemoryAbove = 11,
	MemoryBelow = 12,
	MoveInsertMode = 13,
	MoveStandoutMode = 14,
	OverStrike = 15,
	StatusLineEscOk = 16,
	DestTabsMagicSmso = 17,
	TildeGlitch = 18,
	TransparentUnderline = 19,
	XonXoff = 20,
	NeedsXonXoff = 21,
	PrtrSilent = 22,
	HardCursor = 23,
	NonRevRmcup = 24,
	NoPadChar = 25,
	NonDestScrollRegion = 26,
	CanChange = 27,
	BackColorErase = 28,
	HueLightnessSaturation = 29,
	ColAddrGlitch = 30,
	CrCancelsMicroMode = 31,
	HasPrintWheel = 32,
	RowAddrGlitch = 33,
	SemiAutoRightMargin = 34,
	CpiChangesRes = 35,
	LpiChangesRes = 36,
	Last = 37
}

// Namespace: System
[Serializable]
public class ThreadStaticAttribute : Attribute // TypeDefIndex: 1727
{
	// Constructors
	public ThreadStaticAttribute(); // 0x00000001800EAC90

}

// Namespace: System
[Serializable]
public struct TimeSpan : IComparable, IComparable`1<TimeSpan>, IEquatable`1<TimeSpan> // TypeDefIndex: 1728
{
	// Fields
	public const long TicksPerDay = 864000000000; // 0x00
	public const long TicksPerHour = 36000000000; // 0x00
	public const long TicksPerMillisecond = 10000; // 0x00
	public const long TicksPerMinute = 600000000; // 0x08
	public const long TicksPerSecond = 10000000; // 0x10
	public static readonly TimeSpan MaxValue; // 0x10
	public static readonly TimeSpan MinValue; // 0x1C
	public static readonly TimeSpan Zero; // 0x00
	private long _ticks; // 0x10

	// Properties
	public int Days { get; } // 0x000000018001B780 
	public int Hours { get; } // 0x000000018001B7A0 
	public int Milliseconds { get; } // 0x000000018001B7D0 
	public int Minutes { get; } // 0x000000018001B820 
	public int Seconds { get; } // 0x000000018001B850 
	public long Ticks { get; } // 0x0000000180002060 
	public double TotalDays { get; } // 0x000000018001B8A0 
	public double TotalHours { get; } // 0x000000018001B8C0 
	public double TotalMilliseconds { get; } // 0x000000018001B8E0 
	public double TotalMinutes { get; } // 0x000000018001B900 
	public double TotalSeconds { get; } // 0x000000018001B920 

	// Constructors
	public TimeSpan(long ticks); // 0x0000000180004760
	public TimeSpan(int hours, int minutes, int seconds); // 0x000000018001B640
	public TimeSpan(int days, int hours, int minutes, int seconds); // 0x000000018001B6E0
	public TimeSpan(int days, int hours, int minutes, int seconds, int milliseconds); // 0x000000018001B770
	private static TimeSpan(); // 0x00000001802E7400

	// Methods
	internal static long CalculateTicks(int days, int hours, int minutes, int seconds, int milliseconds); // 0x00000001802E64D0
	public TimeSpan Add(TimeSpan ts); // 0x000000018001B3B0
	public static int Compare(TimeSpan t1, TimeSpan t2); // 0x00000001802E6790
	public int CompareTo(object value); // 0x000000018001B3C0
	public int CompareTo(TimeSpan value); // 0x000000018001B4F0
	public bool Equals(TimeSpan obj); // 0x0000000180003D90
	public TimeSpan Duration(); // 0x000000018001B570
	public override bool Equals(object value); // 0x000000018001B580
	public static bool Equals(TimeSpan t1, TimeSpan t2); // 0x0000000180124930
	public static TimeSpan FromDays(double value); // 0x00000001802E68F0
	public static TimeSpan FromHours(double value); // 0x00000001802E6960
	public static TimeSpan FromMinutes(double value); // 0x00000001802E6A30
	public static TimeSpan FromSeconds(double value); // 0x00000001802E6A90
	public static TimeSpan FromMilliseconds(double value); // 0x00000001802E69D0
	private static TimeSpan From(double value, long tickMultiplicator); // 0x00000001802E6AF0
	public static TimeSpan FromTicks(long value); // 0x0000000180123590
	public override int GetHashCode(); // 0x0000000180009250
	public TimeSpan Negate(); // 0x000000018001B610
	public static TimeSpan Parse(string s); // 0x00000001802E6EC0
	public static bool TryParse(string s, out TimeSpan result); // 0x00000001802E72B0
	public TimeSpan Subtract(TimeSpan ts); // 0x000000018001B620
	public override string ToString(); // 0x000000018001B630
	public static TimeSpan op_Addition(TimeSpan t1, TimeSpan t2); // 0x00000001802E7810
	public static bool op_Equality(TimeSpan t1, TimeSpan t2); // 0x0000000180124930
	public static bool op_GreaterThan(TimeSpan t1, TimeSpan t2); // 0x00000001802E7840
	public static bool op_GreaterThanOrEqual(TimeSpan t1, TimeSpan t2); // 0x00000001802E7830
	public static bool op_Inequality(TimeSpan t1, TimeSpan t2); // 0x0000000180129E10
	public static bool op_LessThan(TimeSpan t1, TimeSpan t2); // 0x00000001802E7860
	public static bool op_LessThanOrEqual(TimeSpan t1, TimeSpan t2); // 0x00000001802E7850
	public static TimeSpan op_Subtraction(TimeSpan t1, TimeSpan t2); // 0x00000001802E7870
	public static TimeSpan op_UnaryNegation(TimeSpan t); // 0x00000001802E7890
	public static TimeSpan op_UnaryPlus(TimeSpan t); // 0x0000000180123590
}

// Namespace: 
private class Parser // TypeDefIndex: 1729
{
	// Fields
	private string _src; // 0x10
	private int _cur; // 0x1C
	private int _length; // 0x00
	private bool formatError; // 0x10

	// Properties
	public bool AtEnd { get; } // 0x00000001802E0100 

	// Constructors
	public Parser(string src); // 0x00000001802E00C0

	// Methods
	private void ParseWhiteSpace(); // 0x00000001802E0030
	private bool ParseSign(); // 0x00000001802DFED0
	private int ParseInt(bool optional); // 0x00000001802DFC80
	private bool ParseOptDot(); // 0x00000001802DFE80
	private void ParseOptColon(); // 0x00000001802DFE30
	private long ParseTicks(); // 0x00000001802DFF20
	public TimeSpan Execute(); // 0x00000001802DF830
}

// Namespace: System
[Serializable]
public abstract class TimeZone // TypeDefIndex: 1730
{
	// Fields
	private static TimeZone currentTimeZone; // 0x00
	[NonSerialized]	private static object tz_lock; // 0x10
	[NonSerialized]	private static long timezone_check; // 0x10

	// Properties
	public static TimeZone CurrentTimeZone { get; } // 0x00000001802E84D0 
	public abstract string DaylightName { get; }
	public abstract string StandardName { get; }

	// Constructors
	protected TimeZone(); // 0x00000001800E2000
	private static TimeZone(); // 0x00000001802E8470

	// Methods
	public abstract DaylightTime GetDaylightChanges(int year);
	public abstract TimeSpan GetUtcOffset(DateTime time);
	public virtual bool IsDaylightSavingTime(DateTime time); // 0x00000001802E7D90
	public static bool IsDaylightSavingTime(DateTime time, DaylightTime daylightTimes); // 0x00000001802E7B90
	public virtual DateTime ToLocalTime(DateTime time); // 0x00000001802E7E30
	public virtual DateTime ToUniversalTime(DateTime time); // 0x00000001802E8230
	internal TimeSpan GetLocalTimeDiff(DateTime time); // 0x00000001802E78B0
	internal TimeSpan GetLocalTimeDiff(DateTime time, TimeSpan utc_offset); // 0x00000001802E7910
}

// Namespace: System
[Serializable]
internal class CurrentSystemTimeZone : TimeZone, IDeserializationCallback // TypeDefIndex: 1731
{
	// Fields
	private string m_standardName; // 0x10
	private string m_daylightName; // 0x20
	private Hashtable m_CachedDaylightChanges; // 0x30
	private long m_ticksOffset; // 0x00
	[NonSerialized]	private TimeSpan utcOffsetWithOutDLS; // 0x10
	[NonSerialized]	private TimeSpan utcOffsetWithDLS; // 0x00
	private static int this_year; // 0x00
	private static DaylightTime this_year_dlt; // 0x10

	// Properties
	public override string DaylightName { get; } // 0x00000001800EAEC0 
	public override string StandardName { get; } // 0x00000001800E20D0 

	// Constructors
	internal CurrentSystemTimeZone(); // 0x0000000180359ED0
	internal CurrentSystemTimeZone(long lnow); // 0x0000000180359CA0

	// Methods
	private void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender); // 0x0000000180359C90
	private static bool GetTimeZoneData(int year, out long[] data, out string[] names); // 0x0000000180359A50
	public override DaylightTime GetDaylightChanges(int year); // 0x0000000180359640
	public override TimeSpan GetUtcOffset(DateTime time); // 0x0000000180359A60
	private void OnDeserialization(DaylightTime dlt); // 0x0000000180359AA0
	private DaylightTime GetDaylightTimeFromData(long[] data); // 0x0000000180359930
}

// Namespace: 
internal enum TimeZoneData // TypeDefIndex: 1732
{
	DaylightSavingStartIdx = 0,
	DaylightSavingEndIdx = 1,
	UtcOffsetIdx = 2,
	AdditionalDaylightOffsetIdx = 3
}

// Namespace: 
internal enum TimeZoneNames // TypeDefIndex: 1733
{
	StandardNameIdx = 0,
	DaylightNameIdx = 1
}

// Namespace: System
[Serializable]
public class TimeoutException : SystemException // TypeDefIndex: 1734
{
	// Fields
	private const int Result = -2146233083; // 0x00

	// Constructors
	public TimeoutException(); // 0x00000001802E8710
	public TimeoutException(string message); // 0x00000001802E86F0
	public TimeoutException(string message, Exception innerException); // 0x00000001802E8760
	protected TimeoutException(SerializationInfo info, StreamingContext context); // 0x000000018010E170

}

// Namespace: System
[Serializable]
public enum TypeCode // TypeDefIndex: 1735
{
	Empty = 0,
	Object = 1,
	DBNull = 2,
	Boolean = 3,
	Char = 4,
	SByte = 5,
	Byte = 6,
	Int16 = 7,
	UInt16 = 8,
	Int32 = 9,
	UInt32 = 10,
	Int64 = 11,
	UInt64 = 12,
	Single = 13,
	Double = 14,
	Decimal = 15,
	DateTime = 16,
	String = 18
}

// Namespace: System
[Serializable]
public sealed class TypeInitializationException : SystemException // TypeDefIndex: 1736
{
	// Fields
	private string type_name; // 0x60

	// Properties
	public string TypeName { get; } // 0x0000000180114BE0 

	// Constructors
	public TypeInitializationException(string fullTypeName, Exception innerException); // 0x00000001802E9090
	internal TypeInitializationException(SerializationInfo info, StreamingContext context); // 0x00000001802E9130

	// Methods
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00000001802E9010
}

// Namespace: System
[Serializable]
public class TypeLoadException : SystemException // TypeDefIndex: 1737
{
	// Fields
	private const int Result = -2146233054; // 0x00
	private string className; // 0x68
	private string assemblyName; // 0x10

	// Properties
	public override string Message { get; } // 0x00000001802E9550 
	public string TypeName { get; } // 0x00000001802E9660 

	// Constructors
	public TypeLoadException(); // 0x00000001802E93A0
	public TypeLoadException(string message); // 0x00000001802E9380
	public TypeLoadException(string message, Exception inner); // 0x00000001802E9460
	internal TypeLoadException(string className, string assemblyName); // 0x00000001802E93F0
	protected TypeLoadException(SerializationInfo info, StreamingContext context); // 0x00000001802E9480

	// Methods
	public override void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00000001802E91C0
}

// Namespace: System
[Serializable]
public class TypeUnloadedException : SystemException // TypeDefIndex: 1738
{
	// Constructors
	public TypeUnloadedException(); // 0x00000001802E96D0
	public TypeUnloadedException(string message); // 0x000000018010E1E0
	protected TypeUnloadedException(SerializationInfo info, StreamingContext context); // 0x000000018010E170
	public TypeUnloadedException(string message, Exception innerException); // 0x000000018010E1D0

}

// Namespace: System
[Serializable]
public class UnauthorizedAccessException : SystemException // TypeDefIndex: 1739
{
	// Fields
	private const int Result = -2146233088; // 0x00

	// Constructors
	public UnauthorizedAccessException(); // 0x00000001803DCC40
	public UnauthorizedAccessException(string message); // 0x00000001803DCC00
	public UnauthorizedAccessException(string message, Exception inner); // 0x00000001803DCC20
	protected UnauthorizedAccessException(SerializationInfo info, StreamingContext context); // 0x000000018010E170

}

// Namespace: System
[Serializable]
public class UnhandledExceptionEventArgs : EventArgs // TypeDefIndex: 1740
{
	// Fields
	private object exception; // 0x10
	private bool m_isTerminating; // 0x10

	// Properties
	public object ExceptionObject { get; } // 0x00000001800E20D0 
	public bool IsTerminating { get; } // 0x00000001801249E0 

	// Constructors
	public UnhandledExceptionEventArgs(object exception, bool isTerminating); // 0x00000001803DCC90

}

// Namespace: System
[Serializable]
internal class UnitySerializationHolder : ISerializable, IObjectReference // TypeDefIndex: 1741
{
	// Fields
	private string _data; // 0x10
	private UnityType _unityType; // 0x20
	private string _assemblyName; // 0x10

	// Constructors
	private UnitySerializationHolder(SerializationInfo info, StreamingContext ctx); // 0x00000001803DD2B0

	// Methods
	public static void GetTypeData(Type instance, SerializationInfo info, StreamingContext ctx); // 0x00000001803DD1A0
	public static void GetDBNullData(DBNull instance, SerializationInfo info, StreamingContext ctx); // 0x00000001803DCE10
	public static void GetAssemblyData(Assembly instance, SerializationInfo info, StreamingContext ctx); // 0x00000001803DCD10
	public static void GetModuleData(Module instance, SerializationInfo info, StreamingContext ctx); // 0x00000001803DCF20
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00000001803DD010
	public virtual object GetRealObject(StreamingContext context); // 0x00000001803DD060
}

// Namespace: 
private enum UnityType : byte // TypeDefIndex: 1742
{
	DBNull = 2,
	Type = 4,
	Module = 5,
	Assembly = 6
}

// Namespace: System
internal struct Variant // TypeDefIndex: 1743
{
	// Fields
	public short vt; // 0x10
	public ushort wReserved1; // 0x14
	public ushort wReserved2; // 0x18
	public ushort wReserved3; // 0x18
	public long llVal; // 0x18
	public int lVal; // 0x18
	public byte bVal; // 0x18
	public short iVal; // 0x18
	public float fltVal; // 0x18
	public double dblVal; // 0x18
	public short boolVal; // 0x10
	public IntPtr bstrVal; // 0x00
	public sbyte cVal; // 0x14
	public ushort uiVal; // 0x1C
	public uint ulVal; // 0x10
	public ulong ullVal; // 0x18
	public int intVal; // 0x00
	public uint uintVal; // 0x50
	public IntPtr pdispVal; // 0x80
	public BRECORD bRecord; // 0xA8

	// Methods
	public void SetValue(object obj); // 0x00000001800378B0
	public object GetValue(); // 0x00000001800378A0
	public void Clear(); // 0x00000001800377E0
}

// Namespace: System
internal struct BRECORD // TypeDefIndex: 1744
{
	// Fields
	private IntPtr pvRecord; // 0x10
	private IntPtr pRecInfo; // 0x00

}

// Namespace: System
[Serializable]
public sealed class Version : IComparable, ICloneable, IComparable`1<Version>, IEquatable`1<Version> // TypeDefIndex: 1745
{
	// Fields
	private const int UNDEFINED = -1; // 0x00
	private int _Major; // 0x14
	private int _Minor; // 0x1C
	private int _Build; // 0x10
	private int _Revision; // 0x18

	// Properties
	public int Build { get; } // 0x00000001800ED060 
	public int Major { get; } // 0x00000001800ECD10 
	public int Minor { get; } // 0x0000000180156360 
	public int Revision { get; } // 0x00000001801AE2C0 
	public short MajorRevision { get; } // 0x00000001803DF310 
	public short MinorRevision { get; } // 0x00000001803DF320 

	// Constructors
	public Version(); // 0x00000001803DEFC0
	public Version(string version); // 0x00000001803DF0D0
	public Version(int major, int minor); // 0x00000001803DF000
	public Version(int major, int minor, int build); // 0x00000001803DEEF0
	public Version(int major, int minor, int build, int revision); // 0x00000001803DEF50

	// Methods
	private void CheckedSet(int defined, int major, int minor, int build, int revision); // 0x00000001803DE0E0
	public object Clone(); // 0x00000001803DE250
	public int CompareTo(object version); // 0x00000001803DE3D0
	public override bool Equals(object obj); // 0x00000001803DE770
	public int CompareTo(Version value); // 0x00000001803DE4A0
	public bool Equals(Version obj); // 0x00000001803DE700
	public override int GetHashCode(); // 0x00000001803DE820
	public override string ToString(); // 0x00000001803DEDB0
	public string ToString(int fieldCount); // 0x00000001803DE840
	internal static Version CreateFromString(string info); // 0x00000001803DE530
	public static bool op_Equality(Version v1, Version v2); // 0x00000001803DF330
	public static bool op_Inequality(Version v1, Version v2); // 0x00000001803DF3A0
	public static bool op_GreaterThan(Version v1, Version v2); // 0x00000001803DF370
	public static bool op_GreaterThanOrEqual(Version v1, Version v2); // 0x00000001803DF340
	public static bool op_LessThan(Version v1, Version v2); // 0x00000001803DF3F0
	public static bool op_LessThanOrEqual(Version v1, Version v2); // 0x00000001803DF3C0
}

// Namespace: System
[Serializable]
public class WeakReference : ISerializable // TypeDefIndex: 1746
{
	// Fields
	private bool isLongReference; // 0x10
	private GCHandle gcHandle; // 0x18

	// Properties
	public virtual bool IsAlive { get; } // 0x00000001803DF770 
	public virtual object Target { get; set; } // 0x00000001803DF790 0x00000001803DF7A0
	public virtual bool TrackResurrection { get; } // 0x0000000180113840 

	// Constructors
	protected WeakReference(); // 0x00000001800E2000
	public WeakReference(object target); // 0x00000001803DF5E0
	public WeakReference(object target, bool trackResurrection); // 0x00000001803DF620
	protected WeakReference(SerializationInfo info, StreamingContext context); // 0x00000001803DF670

	// Methods
	private void AllocateHandle(object target); // 0x00000001803DF420
	protected override void Finalize(); // 0x00000001803DF450
	public virtual void GetObjectData(SerializationInfo info, StreamingContext context); // 0x00000001803DF4E0
}

// Namespace: System
public interface _AppDomain // TypeDefIndex: 1747
{
	// Properties
	string BaseDirectory { get; }
	string DynamicDirectory { get; }
	Evidence Evidence { get; }
	string FriendlyName { get; }
	string RelativeSearchPath { get; }
	bool ShadowCopyFiles { get; }

	// Events
	event AssemblyLoadEventHandler AssemblyLoad {
		add; // 0x0000000000000000
		remove; // 0x0000000000000000
	}
	event ResolveEventHandler AssemblyResolve {
		add; // 0x0000000000000000
		remove; // 0x0000000000000000
	}
	event EventHandler DomainUnload {
		add; // 0x0000000000000000
		remove; // 0x0000000000000000
	}
	event EventHandler ProcessExit {
		add; // 0x0000000000000000
		remove; // 0x0000000000000000
	}
	event ResolveEventHandler ResourceResolve {
		add; // 0x0000000000000000
		remove; // 0x0000000000000000
	}
	event ResolveEventHandler TypeResolve {
		add; // 0x0000000000000000
		remove; // 0x0000000000000000
	}
	event UnhandledExceptionEventHandler UnhandledException {
		add; // 0x0000000000000000
		remove; // 0x0000000000000000
	}

	// Methods
	void AppendPrivatePath(string path);
	void ClearPrivatePath();
	void ClearShadowCopyPath();
	ObjectHandle CreateInstance(string assemblyName, string typeName);
	ObjectHandle CreateInstance(string assemblyName, string typeName, object[] activationAttributes);
	ObjectHandle CreateInstance(string assemblyName, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes, Evidence securityAttributes);
	ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName);
	ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName, object[] activationAttributes);
	ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, object[] args, CultureInfo culture, object[] activationAttributes, Evidence securityAttributes);
	AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access);
	AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, Evidence evidence);
	AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, string dir);
	AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, string dir, Evidence evidence);
	AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions);
	AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, Evidence evidence, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions);
	AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, string dir, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions);
	AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, string dir, Evidence evidence, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions);
	AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, string dir, Evidence evidence, PermissionSet requiredPermissions, PermissionSet optionalPermissions, PermissionSet refusedPermissions, bool isSynchronized);
	void DoCallBack(CrossAppDomainDelegate theDelegate);
	bool Equals(object other);
	int ExecuteAssembly(string assemblyFile);
	int ExecuteAssembly(string assemblyFile, Evidence assemblySecurity);
	int ExecuteAssembly(string assemblyFile, Evidence assemblySecurity, string[] args);
	Assembly[] GetAssemblies();
	object GetData(string name);
	int GetHashCode();
	object GetLifetimeService();
	Type GetType();
	object InitializeLifetimeService();
	Assembly Load(AssemblyName assemblyRef);
	Assembly Load(byte[] rawAssembly);
	Assembly Load(string assemblyString);
	Assembly Load(AssemblyName assemblyRef, Evidence assemblySecurity);
	Assembly Load(byte[] rawAssembly, byte[] rawSymbolStore);
	Assembly Load(string assemblyString, Evidence assemblySecurity);
	Assembly Load(byte[] rawAssembly, byte[] rawSymbolStore, Evidence securityEvidence);
	void SetAppDomainPolicy(PolicyLevel domainPolicy);
	void SetCachePath(string s);
	void SetData(string name, object data);
	void SetPrincipalPolicy(PrincipalPolicy policy);
	void SetShadowCopyPath(string s);
	void SetThreadPrincipal(IPrincipal principal);
	string ToString();
	void GetIDsOfNames(Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
	void GetTypeInfo(uint iTInfo, uint lcid, IntPtr ppTInfo);
	void GetTypeInfoCount(out uint pcTInfo);
	void Invoke(uint dispIdMember, Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
}

// Namespace: System
internal class __ComObject : MarshalByRefObject // TypeDefIndex: 1748
{
	// Fields
	private IntPtr iunknown; // 0x18
	private IntPtr hash_table; // 0x00

	// Properties
	internal IntPtr IUnknown { get; } // 0x00000001803E0390 
	internal IntPtr IDispatch { get; } // 0x00000001803E01D0 
	internal static Guid IID_IUnknown { get; } // 0x00000001803E0340 
	internal static Guid IID_IDispatch { get; } // 0x00000001803E02F0 

	// Constructors
	public __ComObject(); // 0x00000001803E00B0
	internal __ComObject(Type t); // 0x00000001803E00E0
	internal __ComObject(IntPtr pItf); // 0x00000001803E0110

	// Methods
	internal static __ComObject CreateRCW(Type t); // 0x00000001803DF900
	private void ReleaseInterfaces(); // 0x00000001803E00A0
	protected override void Finalize(); // 0x00000001803DFA80
	internal void Initialize(Type t); // 0x00000001803DFE50
	private static Guid GetCLSID(Type t); // 0x00000001803DFB10
	internal IntPtr GetInterfaceInternal(Type t, bool throwException); // 0x00000001803DFD10
	internal IntPtr GetInterface(Type t, bool throwException); // 0x00000001803DFDB0
	internal IntPtr GetInterface(Type t); // 0x00000001803DFD20
	private void CheckIUnknown(); // 0x00000001803DF7B0
	public override bool Equals(object obj); // 0x00000001803DF910
	public override int GetHashCode(); // 0x00000001803DFC90
	private static extern int CoCreateInstance(Guid rclsid, IntPtr pUnkOuter, uint dwClsContext, Guid riid, out IntPtr pUnk); // 0x00000001803DF820
}

// Namespace: Mono.Math.Prime
internal delegate bool PrimalityTest(BigInteger bi, ConfidenceFactor confidence); // TypeDefIndex: 1749; 0x000000018023A560

// Namespace: System.Reflection
[Serializable]
public delegate bool MemberFilter(MemberInfo m, object filterCriteria); // TypeDefIndex: 1750; 0x00000001801AD090

// Namespace: System.Reflection
[Serializable]
public delegate Module ModuleResolveEventHandler(object sender, ResolveEventArgs e); // TypeDefIndex: 1751; 0x00000001801AD090

// Namespace: System.Reflection
internal delegate object GetterAdapter(object _this); // TypeDefIndex: 1752; 0x00000001801AECC0

// Namespace: System.Reflection
internal delegate T Getter`2(T _this); // TypeDefIndex: 1753; 0x0000000000000000

// Namespace: System.Reflection
[Serializable]
public delegate bool TypeFilter(Type m, object filterCriteria); // TypeDefIndex: 1754; 0x00000001801AD090

// Namespace: System.Runtime.InteropServices
public delegate IntPtr ObjectCreationDelegate(IntPtr aggregator); // TypeDefIndex: 1755; 0x00000001801EFB10

// Namespace: System.Runtime.Remoting.Contexts
public delegate void CrossContextDelegate(); // TypeDefIndex: 1756; 0x000000018021F9F0

// Namespace: System.Runtime.Remoting.Messaging
public delegate object HeaderHandler(Header[] headers); // TypeDefIndex: 1757; 0x0000000180195FA0

// Namespace: System.Runtime.Remoting.Messaging
public delegate bool MessageSurrogateFilter(string key, object value); // TypeDefIndex: 1758; 0x0000000180224A00

// Namespace: System.Threading
public delegate void ContextCallback(object state); // TypeDefIndex: 1759; 0x00000001802DD200

// Namespace: System.Threading
public delegate void IOCompletionCallback(uint errorCode, uint numBytes, void * pOVERLAP); // TypeDefIndex: 1760; 0x00000001802DE190

// Namespace: System.Threading
public delegate void ParameterizedThreadStart(object obj); // TypeDefIndex: 1761; 0x00000001802DD200

// Namespace: System.Threading
public delegate void SendOrPostCallback(object state); // TypeDefIndex: 1762; 0x00000001802DD200

// Namespace: System.Threading
public delegate void ThreadStart(); // TypeDefIndex: 1763; 0x00000001802E3440

// Namespace: System.Threading
public delegate void TimerCallback(object state); // TypeDefIndex: 1764; 0x00000001802DD200

// Namespace: System.Threading
public delegate void WaitCallback(object state); // TypeDefIndex: 1765; 0x00000001802DD200

// Namespace: System.Threading
public delegate void WaitOrTimerCallback(object state, bool timedOut); // TypeDefIndex: 1766; 0x000000018025A230

// Namespace: System
public delegate void Action`1(T obj); // TypeDefIndex: 1767; 0x0000000000000000

// Namespace: System
[Serializable]
public delegate void AppDomainInitializer(string[] args); // TypeDefIndex: 1768; 0x0000000180195FA0

// Namespace: System
[Serializable]
public delegate void AssemblyLoadEventHandler(object sender, AssemblyLoadEventArgs args); // TypeDefIndex: 1769; 0x00000001801AD090

// Namespace: System
public delegate int Comparison`1(T x, T y); // TypeDefIndex: 1770; 0x0000000000000000

// Namespace: System
public delegate void ConsoleCancelEventHandler(object sender, ConsoleCancelEventArgs e); // TypeDefIndex: 1771; 0x00000001801AD090

// Namespace: System
public delegate T Converter`2(T input); // TypeDefIndex: 1772; 0x0000000000000000

// Namespace: System
public delegate void CrossAppDomainDelegate(); // TypeDefIndex: 1773; 0x0000000180359250

// Namespace: System
[Serializable]
public delegate void EventHandler`1(object sender, T e); // TypeDefIndex: 1774; 0x0000000000000000

// Namespace: System
[Serializable]
public delegate void EventHandler(object sender, EventArgs e); // TypeDefIndex: 1775; 0x00000001801AD090

// Namespace: System
public delegate bool Predicate`1(T obj); // TypeDefIndex: 1776; 0x0000000000000000

// Namespace: System
[Serializable]
public delegate Assembly ResolveEventHandler(object sender, ResolveEventArgs args); // TypeDefIndex: 1777; 0x00000001801AD090

// Namespace: System
[Serializable]
public delegate void UnhandledExceptionEventHandler(object sender, UnhandledExceptionEventArgs e); // TypeDefIndex: 1778; 0x00000001801AD090

// Namespace: 
internal class <PrivateImplementationDetails> // TypeDefIndex: 1779
{
	// Fields
	internal static $ArrayType$56 $$field-0 = null; // 0x00
	internal static $ArrayType$24 $$field-1 = null; // 0x50
	internal static $ArrayType$24 $$field-2 = null; // 0x80
	internal static $ArrayType$24 $$field-3 = null; // 0xA8
	internal static $ArrayType$24 $$field-4 = null; // 0xE0
	internal static $ArrayType$16 $$field-5 = null; // 0x12C
	internal static $ArrayType$16 $$field-6 = null; // 0x1C8
	internal static $ArrayType$40 $$field-7 = null; // 0x264
	internal static $ArrayType$40 $$field-8 = null; // 0xEC4
	internal static $ArrayType$36 $$field-9 = null; // 0xEF8
	internal static $ArrayType$36 $$field-10 = null; // 0xF68
	internal static $ArrayType$120 $$field-11 = null; // 0xFE8
	internal static $ArrayType$120 $$field-12 = null; // 0x1034
	internal static $ArrayType$36 $$field-13 = null; // 0x104C
	internal static $ArrayType$36 $$field-14 = null; // 0x10E4
	internal static $ArrayType$3132 $$field-15 = null; // 0x1140
	internal static $ArrayType$20 $$field-16 = null; // 0x1190
	internal static $ArrayType$32 $$field-17 = null; // 0x11E4
	internal static $ArrayType$48 $$field-18 = null; // 0x1280
	internal static $ArrayType$64 $$field-19 = null; // 0x1AE0
	internal static $ArrayType$64 $$field-20 = null; // 0x1B28
	internal static $ArrayType$64 $$field-21 = null; // 0x2358
	internal static $ArrayType$64 $$field-22 = null; // 0x2C58
	internal static $ArrayType$12 $$field-23 = null; // 0x2DD0
	internal static $ArrayType$12 $$field-24 = null; // 0x2FD0
	internal static $ArrayType$12 $$field-25 = null; // 0x37D0
	internal static $ArrayType$16 $$field-26 = null; // 0x3FD0
	internal static $ArrayType$136 $$field-27 = null; // 0x47D0
	internal static $ArrayType$8 $$field-28 = null; // 0x4FD0
	internal static $ArrayType$84 $$field-29 = null; // 0x5350
	internal static $ArrayType$72 $$field-30 = null; // 0x5450
	internal static $ArrayType$8 $$field-31 = null; // 0x55D8
	internal static $ArrayType$20 $$field-32 = null; // 0x5758
	internal static $ArrayType$64 $$field-33 = null; // 0x57C0
	internal static $ArrayType$124 $$field-34 = null; // 0x6678
	internal static $ArrayType$32 $$field-35 = null; // 0x29
	internal static $ArrayType$96 $$field-36 = null; // 0x8047D510
	internal static $ArrayType$2048 $$field-37 = null; // 0x00
	internal static $ArrayType$56 $$field-38 = null; // 0x00
	internal static $ArrayType$16 $$field-39 = null; // 0x31
	internal static $ArrayType$48 $$field-40 = null; // 0x8047D510
	internal static $ArrayType$2048 $$field-41 = null; // 0x00
	internal static $ArrayType$2048 $$field-42 = null; // 0x00
	internal static $ArrayType$256 $$field-43 = null; // 0x1D
	internal static $ArrayType$256 $$field-44 = null; // 0x8047D510
	internal static $ArrayType$120 $$field-45 = null; // 0x00
	internal static $ArrayType$256 $$field-46 = null; // 0x00
	internal static $ArrayType$256 $$field-47 = null; // 0x30
	internal static $ArrayType$1024 $$field-48 = null; // 0x8047D520
	internal static $ArrayType$1024 $$field-49 = null; // 0x00
	internal static $ArrayType$1024 $$field-50 = null; // 0x00
	internal static $ArrayType$1024 $$field-51 = null; // 0x19
	internal static $ArrayType$1024 $$field-52 = null; // 0x8047D520
	internal static $ArrayType$1024 $$field-53 = null; // 0x00
	internal static $ArrayType$1024 $$field-54 = null; // 0x00
	internal static $ArrayType$1024 $$field-55 = null; // 0x29
	internal static $ArrayType$256 $$field-56 = null; // 0x8047D520
	internal static $ArrayType$640 $$field-57 = null; // 0x00
	internal static $ArrayType$96 $$field-58 = null; // 0x00
	internal static $ArrayType$160 $$field-59 = null; // 0x31
	internal static $ArrayType$12 $$field-60 = null; // 0x8047D520
	internal static $ArrayType$380 $$field-61 = null; // 0x00
	internal static $ArrayType$128 $$field-62 = null; // 0x00
	internal static $ArrayType$256 $$field-63 = null; // 0x1D
	internal static $ArrayType$52 $$field-64 = null; // 0x8047D520
	internal static $ArrayType$52 $$field-65 = null; // 0x00
	internal static $ArrayType$1668 $$field-66 = null; // 0x00
	internal static $ArrayType$2100 $$field-67 = null; // 0x30
	internal static $ArrayType$1452 $$field-68 = null; // 0x8047D530

	// Constructors
	public <PrivateImplementationDetails>(); // 0x00000001800E2000

}

// Namespace: 
private struct $ArrayType$56 // TypeDefIndex: 1780
{
}

// Namespace: 
private struct $ArrayType$24 // TypeDefIndex: 1781
{
}

// Namespace: 
private struct $ArrayType$16 // TypeDefIndex: 1782
{
}

// Namespace: 
private struct $ArrayType$40 // TypeDefIndex: 1783
{
}

// Namespace: 
private struct $ArrayType$36 // TypeDefIndex: 1784
{
}

// Namespace: 
private struct $ArrayType$120 // TypeDefIndex: 1785
{
}

// Namespace: 
private struct $ArrayType$3132 // TypeDefIndex: 1786
{
}

// Namespace: 
private struct $ArrayType$20 // TypeDefIndex: 1787
{
}

// Namespace: 
private struct $ArrayType$32 // TypeDefIndex: 1788
{
}

// Namespace: 
private struct $ArrayType$48 // TypeDefIndex: 1789
{
}

// Namespace: 
private struct $ArrayType$64 // TypeDefIndex: 1790
{
}

// Namespace: 
private struct $ArrayType$12 // TypeDefIndex: 1791
{
}

// Namespace: 
private struct $ArrayType$136 // TypeDefIndex: 1792
{
}

// Namespace: 
private struct $ArrayType$8 // TypeDefIndex: 1793
{
}

// Namespace: 
private struct $ArrayType$84 // TypeDefIndex: 1794
{
}

// Namespace: 
private struct $ArrayType$72 // TypeDefIndex: 1795
{
}

// Namespace: 
private struct $ArrayType$124 // TypeDefIndex: 1796
{
}

// Namespace: 
private struct $ArrayType$96 // TypeDefIndex: 1797
{
}

// Namespace: 
private struct $ArrayType$2048 // TypeDefIndex: 1798
{
}

// Namespace: 
private struct $ArrayType$256 // TypeDefIndex: 1799
{
}

// Namespace: 
private struct $ArrayType$1024 // TypeDefIndex: 1800
{
}

// Namespace: 
private struct $ArrayType$640 // TypeDefIndex: 1801
{
}

// Namespace: 
private struct $ArrayType$160 // TypeDefIndex: 1802
{
}

// Namespace: 
private struct $ArrayType$380 // TypeDefIndex: 1803
{
}

// Namespace: 
private struct $ArrayType$128 // TypeDefIndex: 1804
{
}

// Namespace: 
private struct $ArrayType$52 // TypeDefIndex: 1805
{
}

// Namespace: 
private struct $ArrayType$1668 // TypeDefIndex: 1806
{
}

// Namespace: 
private struct $ArrayType$2100 // TypeDefIndex: 1807
{
}

// Namespace: 
private struct $ArrayType$1452 // TypeDefIndex: 1808
{
}

// Namespace: System
internal class __Il2CppComObject // TypeDefIndex: 1809
{
	// Methods
	protected override void Finalize(); // 0x00000001803E0410
}

// Namespace: Il2CppTests.TestSources
internal class GenericClass`1 // TypeDefIndex: 1811
{
	// Constructors
	public GenericClass`1();

	// Methods
	public void GenericMethodWithClassGenericTypeParameter(T v);
}
